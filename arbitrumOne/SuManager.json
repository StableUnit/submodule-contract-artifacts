{
  "address": "0x0715A50e4AF3612F8f7a2d8b20096acB1Bf558cD",
  "abi": [
    {
      "inputs": [],
      "name": "AlreadyPaused",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BadAccessControlSingleton",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BadInitialCollateralRatioValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BadLiquidationRatioValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidArgs",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LiquidationIsTriggered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotPaused",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAdminError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAlerterError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyDAOError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyLiquidationAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyMintAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyRewardAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyRoleError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyVaultAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PositionIsSafe",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Restricted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SmallCollateral",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnderCollateralized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnsupportedDecimals",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UselessTransaction",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "main",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stablecoin",
          "type": "uint256"
        }
      ],
      "name": "Exit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "main",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stablecoin",
          "type": "uint256"
        }
      ],
      "name": "Join",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debtAmount",
          "type": "uint256"
        }
      ],
      "name": "LiquidationTriggered",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACCESS_CONTROL_SINGLETON",
      "outputs": [
        {
          "internalType": "contract ISuAccessControl",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ALERTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DAO_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIQUIDATION_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINT_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARD_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VAULT_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cdpRegistry",
      "outputs": [
        {
          "internalType": "contract ISuCdpRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "assetAmountEDecimal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stablecoinAmountE18",
          "type": "uint256"
        }
      ],
      "name": "exit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "foundation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getAvailableToBorrowE18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getAvailableToWithdrawE18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getCollateralUsdValueE18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getLTVE18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getLiquidationBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getPositionInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "collateralEDecimal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "debtWithFeesE18",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "initialCollateralRatioE18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_suOracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_cdpRegistry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_suLiquidationMiddleware",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stablePro",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_foundation",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_suPausable",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "isLiquidatablePosition",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "assetAmountEDecimal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stablecoinAmountE18",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockupPeriodSeconds",
          "type": "uint256"
        }
      ],
      "name": "join",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "additionalCollateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "additionalStablecoinAmount",
          "type": "uint256"
        }
      ],
      "name": "liquidationPriceByAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "liquidationPriceE18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "liquidationRatioE18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minCollateralInUsdE18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stabilityFeeValueE18",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "initialCollateralRatioValueE18",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidationRatioValueE18",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stablecoinLimitE18",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minCollateralInUsdValueE18",
          "type": "uint256"
        }
      ],
      "name": "setCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newValueE18",
          "type": "uint256"
        }
      ],
      "name": "setInitialCollateralRatioE18",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newValueE18",
          "type": "uint256"
        }
      ],
      "name": "setLiquidationRatioE18",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValueE18",
          "type": "uint256"
        }
      ],
      "name": "setMinCollateralInUsdE18",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "triggerLiquidation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "utilizationRatioE18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "contract ISuVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultParameters",
      "outputs": [
        {
          "internalType": "contract SuVaultParameters",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "6bdb767f00e3f0fe0de7c63e7a48801d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AlreadyPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BadAccessControlSingleton\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BadInitialCollateralRatioValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BadLiquidationRatioValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidArgs\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LiquidationIsTriggered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAdminError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAlerterError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyDAOError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyLiquidationAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyMintAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRewardAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRoleError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyVaultAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PositionIsSafe\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Restricted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SmallCollateral\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnderCollateralized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnsupportedDecimals\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UselessTransaction\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"main\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stablecoin\",\"type\":\"uint256\"}],\"name\":\"Exit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"main\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stablecoin\",\"type\":\"uint256\"}],\"name\":\"Join\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtAmount\",\"type\":\"uint256\"}],\"name\":\"LiquidationTriggered\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACCESS_CONTROL_SINGLETON\",\"outputs\":[{\"internalType\":\"contract ISuAccessControl\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ALERTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAO_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDATION_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VAULT_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cdpRegistry\",\"outputs\":[{\"internalType\":\"contract ISuCdpRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetAmountEDecimal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stablecoinAmountE18\",\"type\":\"uint256\"}],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"foundation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getAvailableToBorrowE18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getAvailableToWithdrawE18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getCollateralUsdValueE18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getLTVE18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getLiquidationBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getPositionInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralEDecimal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtWithFeesE18\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"initialCollateralRatioE18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_suOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cdpRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_suLiquidationMiddleware\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stablePro\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_foundation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_suPausable\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"isLiquidatablePosition\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetAmountEDecimal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stablecoinAmountE18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockupPeriodSeconds\",\"type\":\"uint256\"}],\"name\":\"join\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"additionalCollateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"additionalStablecoinAmount\",\"type\":\"uint256\"}],\"name\":\"liquidationPriceByAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"liquidationPriceE18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidationRatioE18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minCollateralInUsdE18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stabilityFeeValueE18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialCollateralRatioValueE18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationRatioValueE18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stablecoinLimitE18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minCollateralInUsdValueE18\",\"type\":\"uint256\"}],\"name\":\"setCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newValueE18\",\"type\":\"uint256\"}],\"name\":\"setInitialCollateralRatioE18\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newValueE18\",\"type\":\"uint256\"}],\"name\":\"setLiquidationRatioE18\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValueE18\",\"type\":\"uint256\"}],\"name\":\"setMinCollateralInUsdE18\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"triggerLiquidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"utilizationRatioE18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract ISuVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultParameters\",\"outputs\":[{\"internalType\":\"contract SuVaultParameters\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"See ISuManager interface and all SuManager** contracts for full details.\",\"kind\":\"dev\",\"methods\":{\"getLiquidationBlock(address,address)\":{\"params\":{\"asset\":\"The address of the main collateral token of a position\",\"owner\":\"The owner of the collateral\"},\"returns\":{\"_0\":\"liquidationBlock The block number when the liquidation was triggered*\"}},\"getPositionInfo(address,address)\":{\"params\":{\"asset\":\"The address of the main collateral token of a position\",\"owner\":\"The owner of the collateral\"},\"returns\":{\"collateralEDecimal\":\"The amount of collateral\",\"debtWithFeesE18\":\"The amount of borrowed stablecoins with accumulated fee*\"}},\"join(address,uint256,uint256,uint256)\":{\"details\":\"Before calling this function user has to approve the Vault to take his collateral*\"},\"liquidationPriceE18(address,address)\":{\"details\":\"can be used inside of _isLiquidatablePosition*\"},\"setInitialCollateralRatioE18(address,uint256)\":{\"details\":\"Sets the initial collateral ratio\",\"params\":{\"asset\":\"The address of the main collateral token\",\"newValueE18\":\"The collateralization ratio (1e18 = 100%)*\"}},\"setLiquidationRatioE18(address,uint256)\":{\"details\":\"Sets the liquidation ratio\",\"params\":{\"asset\":\"The address of the main collateral token\",\"newValueE18\":\"The liquidation ratio (1e18 = 100%).*\"}},\"setMinCollateralInUsdE18(uint256)\":{\"details\":\"Sets a minimum value of collateral in USD which allowed to be left after partial closure\",\"params\":{\"newValueE18\":\"The minimum value of collateral in USD\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"triggerLiquidation(address,address)\":{\"details\":\"Emits LiquidationTriggered event. Sets the current block as liquidationBlock for the position. Can be triggered only once for the position. Add order for liquidated collateral to sell it by stablecoin from whitelist\",\"params\":{\"asset\":\"The address of the main collateral token of a position\",\"owner\":\"The owner of a position*\"}}},\"title\":\"SuManager\",\"version\":1},\"userdoc\":{\"events\":{\"Exit(address,address,uint256,uint256)\":{\"notice\":\"Event triggered when user withdraws collateral*\"},\"Join(address,address,uint256,uint256)\":{\"notice\":\"Even triggered when user deposit collateral*\"},\"LiquidationTriggered(address,uint256)\":{\"notice\":\"Event triggered when triggerLiquidation() is called*\"}},\"kind\":\"user\",\"methods\":{\"exit(address,uint256,uint256)\":{\"notice\":\"User can pay back the stablecoin and take his collateral instead of passing both assetAmount and stablecoinAmount better user just to pass one of them also pass preferred rate and maybe acceptable diff percent that's the purpose of passing both to protect user from rate fluctuations*\"},\"getAvailableToBorrowE18(address,address)\":{\"notice\":\"Returns Available to Borrow we have invariant: (collateralAmountEDecimal * collateralPriceE18 / 1e18) * initialCollateralRatioE18 <= debtE18 Has similar logic like in _ensurePositionCollateralization*\"},\"getAvailableToWithdrawE18(address,address)\":{\"notice\":\"Returns Available to Withdraw Has similar invariant like in getAvailableToBorrowE18*\"},\"getCollateralUsdValueE18(address,address)\":{\"notice\":\"USD value of collateral of owner*\"},\"getLTVE18(address,address)\":{\"notice\":\"Returns Loan-To-Value in e18*\"},\"getLiquidationBlock(address,address)\":{\"notice\":\"Returns information about a liquidating position\"},\"getPositionInfo(address,address)\":{\"notice\":\"Returns information about a liquidating position\"},\"initialCollateralRatioE18(address)\":{\"notice\":\"When ratio (debt / usdValue) goes below it user can't withdraw or borrow. Should be >= liquidationRatioE18. 1e18 = 100% ratio. Should be less than 1e18. Is used to calculate available to withdraw and borrow. For example, user can borrow <= usdValue * initialCollateralRatio*\"},\"isLiquidatablePosition(address,address)\":{\"notice\":\"View function to check if position is liquidatable*\"},\"join(address,uint256,uint256,uint256)\":{\"notice\":\"This function is called by user to deposit collateral and receive stablecoin\"},\"liquidationPriceE18(address,address)\":{\"notice\":\"Calculate liquidation price\"},\"liquidationRatioE18(address)\":{\"notice\":\"Ratio when cdp can be liquidated. 1e18 = 100% ratio. Should be less than 1e18. Is used in isLiquidatablePosition(). It's true when debt / usdValue >= liquidationRatio*\"},\"minCollateralInUsdE18()\":{\"notice\":\"The minimum value of collateral in USD which allowed to be left after partial closure*\"},\"setInitialCollateralRatioE18(address,uint256)\":{\"notice\":\"Only manager is able to call this function\"},\"setLiquidationRatioE18(address,uint256)\":{\"notice\":\"Only manager is able to call this function\"},\"setMinCollateralInUsdE18(uint256)\":{\"notice\":\"Only manager is able to call this function\"},\"triggerLiquidation(address,address)\":{\"notice\":\"Marks a position as to be liquidated\"},\"utilizationRatioE18(address,address)\":{\"notice\":\"View function to show utilization ratio the same function can be used inside of _isLiquidatablePosition*\"}},\"notice\":\"Main contract to give ability to user to join position or exit from it.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lending/SuManager.sol\":\"SuManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb82ef33f43b6b96109687d91b39c94573fdccaaa423fe28e8ba0977b31c023e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xd60f939a3ca0199014d079b4dd66aa757954334947d81eb5c1d35d7a83061ab3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x23b997be73d3dd46885262704f0f8cfc7273fdadfe303d37969a9561373972b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCastUpgradeable {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xcef50f95b43b038aa40aed25b62fc45906c681a5c1d504a4fdcf3bc6330a8d4b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x1c65595a26548a1b2263315b08a56334a2d7087319814437559c3c96025e939f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\",\"keccak256\":\"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd\",\"license\":\"GPL-2.0-or-later\"},\"contracts/emergency/SuPausableAbstract.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/ISuPausable.sol\\\";\\n\\n/**\\n * @dev Abstract contract which allows other contracts to use modifiers\\n */\\nabstract contract SuPausableAbstract {\\n    error AlreadyPaused();\\n    error NotPaused();\\n\\n    ISuPausable internal suPausable;\\n\\n    function __suPausableAbstractInit(address _suPausable) internal {\\n        suPausable = ISuPausable(_suPausable);\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     */\\n    modifier whenNotPaused(address collateral) {\\n        if (suPausable.isPaused(collateral)) revert AlreadyPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     */\\n    modifier whenPaused(address collateral) {\\n        if (!suPausable.isPaused(collateral)) revert NotPaused();\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x0ee9823be11f694cb4f05c1ff74f7676e8e24b859338298581a3462bbc3cd1c0\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IRewardChefV2.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"../periphery/contracts/interfaces/oracle/ISuOracle.sol\\\";\\n\\n/**\\n * @title RewardChefV2\\n * @notice fork of MasterChefV2(13/05/2023) https://etherscan.io/address/0xef0881ec094552b2e128cf945ef17a6752b4ec5d#code\\n * @dev This contract is based on MVC2, but uses \\\"virtual\\\" balances instead of storing real ERC20 tokens\\n * and uses address of this assets instead of pid.\\n * Rewards that are distributed have to be deposited using refillReward(uint256 amount, uint64 endBlock)\\n **/\\ninterface IRewardChefV2 {\\n    /**\\n      * @notice Info of each reward pool.\\n      * @param accSushiPerShare -\\n      * @param lastRewardBlock -\\n      * @param allocPoint - The amount of allocation points assigned to the pool.\\n      * Also known as the amount of REWARD_TOKEN to distribute per block.\\n      * @param lpSupply -\\n     **/\\n    struct PoolInfo {\\n        uint128 accSushiPerShare;\\n        uint64 lastRewardBlock;\\n        uint64 allocPoint;\\n        uint256 lpSupply;\\n    }\\n\\n    /**\\n      * @notice Info of each user.\\n      * @param amount - token amount the user has provided.\\n      * @param rewardDebt - The amount of rewards entitled to the user.\\n      * @param multiplicator1e18 - deposit amount multiplicator for current user, that depends on his lockupPeriod\\n      * @param lockupPeriodSeconds - users lockupPeriod in seconds\\n      * @param lockupStartTimestamp - timestamp when user start lockup\\n     **/\\n    struct UserInfo {\\n        uint256 amount;\\n        int256 rewardDebt;\\n\\n        uint256 multiplicator1e18;\\n        uint256 lockupPeriodSeconds;\\n        uint256 lockupStartTimestamp;\\n    }\\n\\n    /**\\n      * @notice Lockup info struct for a view method getPossibleLockupPeriodsSeconds()\\n      * @param lockupPeriodSeconds - available lockupPeriod in seconds\\n      * @param multiplicator1e18 - deposit amount multiplicator for this lockup period\\n     **/\\n    struct ILockupPeriod {\\n        uint256 lockupPeriodSeconds;\\n        uint256 multiplicator1e18;\\n    }\\n\\n    // =======================================EVENTS=============================================\\n    event VirtualDeposit(address indexed user, address indexed asset, uint256 amount);\\n    event VirtualWithdraw(address indexed user, address indexed asset, uint256 amount);\\n    event ResetAmount(\\n        address indexed user, address indexed asset, address indexed to, uint256 amount, uint256 lockupPeriodSeconds\\n    );\\n    event Harvest(address indexed user, address indexed asset, uint256 amount);\\n    event LogPoolAddition(address indexed asset, uint256 allocPoint);\\n    event LogSetPool(address indexed asset, uint256 allocPoint);\\n    event LogUpdatePool(address indexed asset, uint64 lastRewardBlock, uint256 lpSupply, uint256 accSushiPerShare);\\n\\n    // =======================================ERRORS=============================================\\n    error BadEndBlockForRefill();\\n    error ZeroLockupPeriod();\\n    error ZeroMultiplicator();\\n    error PoolExist();\\n    error PoolNotExist();\\n    error DifferentLockup();\\n    error HarvestBeforeLockup();\\n\\n    // =========================================VARS=============================================\\n    /**\\n     *  @dev Total allocation points. Must be the sum of all allocation points in all pools.\\n     * The good practice, to always keep this variable is equal 1000.\\n     */\\n    function totalAllocPoint() external view returns ( uint256 );\\n\\n    // =======================================REWARDER=============================================\\n    // solhint-disable-next-line func-name-mixedcase\\n    function REWARD_TOKEN() external view returns ( IERC20Upgradeable );\\n    // solhint-disable-next-line func-name-mixedcase\\n    function ORACLE() external view returns ( ISuOracle );\\n    function rewardPerBlock() external view returns ( uint256 );\\n    function rewardEndBlock() external view returns ( uint256 );\\n\\n    /**\\n     * @dev admin transfer REWARD_TOKEN to contract to increase rewards per block\\n     */\\n    function refillReward(uint256 amount, uint64 endBlock) external;\\n    /**\\n     * @dev returns total amount of rewards allocated to the all pools on the rage (startBlock, endBlock]\\n     * i.e. excluding startBlock but including endBlock\\n     */\\n    function rewardsBetweenBlocks(uint256 startBlock, uint256 endBlock) external returns ( uint256 );\\n\\n    //=======================================LOCKUP LOGIC===========================================\\n    /**\\n     * @notice view method that return all lockupPeriods in ILockupPeriod struct\\n     */\\n    function getPossibleLockupPeriodsSeconds() external view returns (ILockupPeriod[] memory);\\n\\n    /**\\n     * @notice method to add new LockupPeriods with it multiplicator\\n     * @dev If multiplicator1e18 == 0 => we remove lockupPeriodSeconds else we add it\\n     * @param lockupPeriodSeconds Amount of seconds of lockupPeriod we want to add/remove\\n     * @param multiplicator1e18 Multiplicator for that lockupPeriod\\n     */\\n    function setPossibleLockupPeriodsSeconds(uint256 lockupPeriodSeconds, uint256 multiplicator1e18) external;\\n\\n    //================================CORE REWARD CHEF METHODS======================================\\n    /**\\n     * @notice Add a new reward pool. Can only be called by the admin. Can't add the same LP token more than once.\\n     * @param allocPoint AP of the new pool.\\n     * @param _asset Address of the ERC-20 token.\\n     */\\n    function add(uint256 allocPoint, address _asset) external;\\n\\n    /**\\n     * @notice Update the given pool's REWARD_TOKEN allocation point. Can only be called by the admin.\\n     * Can't be called for asset that was not added by add() function.\\n     * @param _asset Address of the ERC-20 token.\\n     * @param _allocPoint New AP of the pool.\\n     */\\n    function set(address _asset, uint256 _allocPoint) external;\\n\\n    /**\\n     * @notice View function to see pending REWARD_TOKEN on frontend.\\n     * @param _asset Address of the ERC-20 token.\\n     * @param _user Address of user.\\n     * @return pending REWARD_TOKEN reward for a given user.\\n     */\\n    function pendingSushi(address _asset, address _user) external view returns ( uint256 );\\n\\n    /**\\n     * @notice Update reward variables of the given pool.\\n     * @param asset Asset address\\n     * @return updated pool info\\n     */\\n    function updatePool(address asset) external returns ( PoolInfo memory );\\n\\n    /**\\n     * @notice Update reward variables for all pools. Be careful of gas spending!\\n     */\\n    function updateAllPools() external;\\n\\n    /**\\n     * @notice analogues to MCV2 Deposit method, but can be called only by trusted address (onlyRewardAccess)\\n     * that is trusted to honestly calc how many \\\"virtual\\\" tokens have to be allocated for each user.\\n     * @param asset Asset address\\n     * @param to User for whom we will increase the virtual balance\\n     * @param amountEDecimal Quantity without taking into account the multiplier that we will add\\n     * @param lockupPeriodSeconds Current deposit lockup period. Can't increase amount with 2 different lockupPeriods\\n     */\\n    function increaseAmount(address asset, address to, uint256 amountEDecimal, uint256 lockupPeriodSeconds) external;\\n\\n    /**\\n     * @notice Analogues to MVC2 Withdraw method, that can be called only by trusted address (onlyRewardAccess)\\n     * that is trusted to honestly calc how many \\\"virtual\\\" tokens have to be allocated for each user.\\n     * @param asset Asset address\\n     * @param to User for whom we will subtract the virtual balance\\n     * @param amountEDecimal Quantity without taking into account the multiplier that we will subtract\\n     */\\n    function decreaseAmount(address asset, address to, uint256 amountEDecimal) external;\\n\\n    /**\\n     * @notice View method that return penalty for user that will decrease amount by {amountEDecimal}\\n     * @param asset Asset address\\n     * @param to User who will decrease his deposit amount\\n     * @param amountEDecimal Quantity without taking into account the multiplier that we will subtract\\n     */\\n    function getDecreaseAmountRewardPenalty(\\n        address asset,\\n        address to,\\n        uint256 amountEDecimal\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Harvest proceeds for transaction sender to {to}.\\n     * @dev Here we send msg.sender pendingSushi to {to} and update lockup period.\\n     * @param asset Asset address\\n     * @param to Receiver of REWARD_TOKEN rewards.\\n     */\\n    function harvest(address asset, address to, uint256 newLockupPeriodSeconds) external;\\n\\n    // TODO: check for exploits\\n    /**\\n     * @notice Withdraw without caring about rewards. EMERGENCY ONLY.\\n     * @param asset Asset address\\n     * @param to The address of the user whose information will be cleared\\n     */\\n    function resetAmount(address asset, address to) external;\\n\\n    //================================VIEW METHODS======================================\\n    /**\\n     * @notice Method for frontend that return pool APR\\n     * @param asset Asset address\\n     */\\n    function getPoolApr(address asset) external view returns (uint256);\\n\\n    /**\\n     * @notice Reward tokens can be locked for certain period of time.\\n     * So user have to wait until at least timestamp to be able to harvest them.\\n     * There's no lock or any restriction on withdrawing principle.\\n     * This function return end timestamp for that lock.\\n     * @param asset Asset address\\n     * @param user User address\\n     */\\n    function getHarvestLockupEndTimestamp(address asset, address user) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc03f1bb9765cbe888e07c506481afe4c17e46b22a71f6e955ce65e1427ad5c40\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ISuCdpRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title SuCdpRegistry\\n * @notice This contract is needed to index all opened CDPs.\\n * @dev It can be removed if there's more gas-efficient way to do that, such as graphQL, NFT-lps or other methods\\n **/\\ninterface ISuCdpRegistry {\\n    /// @notice Collateral Debt Position\\n    struct CDP {\\n        address asset; // collateral token\\n        address owner; // borrower account\\n    }\\n\\n    /* ===================== EVENTS ===================== */\\n\\n    /// @notice event emitted when a new CDP is created\\n    event Added(address indexed asset, address indexed owner);\\n\\n    /// @notice event emitted when a CDP is closed\\n    event Removed(address indexed asset, address indexed owner);\\n\\n    /* ===================== ERRORS ===================== */\\n\\n    error ArgumentsLengthMismatch();\\n\\n    /* ==================== MUTABLE METHODS ==================== */\\n\\n    /// @notice method to add or remove owner from cdpList[asset]\\n    function checkpoint ( address asset, address owner ) external;\\n\\n    /* ==================== VIEW METHODS ==================== */\\n\\n    /// @notice read-only function to get the list of all cdps\\n    function getAllCdps (  ) external view returns ( CDP[] memory r );\\n\\n    /// @notice read-only function to get the list of cdps for a given collateral\\n    function getCdpsByCollateral ( address asset ) external view returns ( CDP[] memory cdps );\\n\\n    /// @notice read-only function to get the list of all cdps by borrower\\n    function getCdpsByOwner ( address owner ) external view returns ( CDP[] memory r );\\n\\n    /// @notice total number of cdps\\n    function getCdpsCount (  ) external view returns ( uint256 totalCdpCount );\\n\\n    /// @notice number of cdps for a given collateral\\n    function getCdpsCountForCollateral ( address asset ) external view returns ( uint256 );\\n\\n    /// @notice alive means there are debts in the vault for this collateral of this borrower\\n    function isAlive ( address asset, address owner ) external view returns ( bool );\\n\\n    /// @notice listed means there are created cdps in this contract for this collateral of this borrower\\n    function isListed ( address asset, address owner ) external view returns ( bool );\\n}\\n\",\"keccak256\":\"0x3432617f951b39e14646d87b36091c3e15c97f4039586553dd1cf88689cd23c7\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ISuLiquidationMiddleware.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\npragma solidity ^0.8.0;\\n\\n/* @notice This contract is middleware between our Lending module and Exchange module.\\n * This contract is responsible for getting collateral to liquidate from lending module, sell it using exchange module.\\n * After sell users with StablePro can swap them to another stablecoin.\\n * Also DAO can send profit after profitable liquidations to foundation or get swapped StablePro.\\n */\\ninterface ISuLiquidationMiddleware {\\n    /* ===================== ERRORS ===================== */\\n    error BadStablecoin(address badStablecoin);\\n    error NoProfit();\\n    error NoStablePro();\\n\\n    /* ===================== EVENTS ===================== */\\n    event CollateralBorrowed(uint256 debt);\\n    event StableProSwapped(uint256 amount);\\n\\n    /* ==================== MUTABLE METHODS ==================== */\\n\\n    /**\\n      * @notice Set order to swap collateral to stablecoin to exchange module and store his debt to the SuManager\\n      * @dev TriggerLiquidation in SuManager need to send collateral to this contract and call this function\\n      * @param collateral - collateral token address\\n      * @param amount - The amount of LP-token to be unwrapped\\n      * @param debt - debt to the SuManager - how much StablePro user borrow using this collateral\\n     **/\\n    function borrowCollateralToSell (\\n        address collateral,\\n        uint256 amount,\\n        uint256 debt\\n    ) external;\\n\\n    /**\\n      * @notice Swap users StablePro to Stablecoin that Middleware receive from exchange module after filling order\\n      * @dev User need to approve StablePro for Middleware\\n      * @param stablecoinToken - what stablecoin user want to receive\\n      * @param stablecoinAmountEDecimal - The amount of stablecoinToken to receive\\n     **/\\n    function swapStableProToStablecoin(\\n        address stablecoinToken,\\n        uint256 stablecoinAmountEDecimal\\n    ) external;\\n\\n    /**\\n      * @notice DAO can send profit after liquidations that accumulates in this contract to foundation\\n     **/\\n    function sendProfitToFoundation() external;\\n\\n    /**\\n      * @notice After swapping Stablecoin to users StablePro Middleware can send them to DAO,\\n      * that can send them to liquidity pool, burn them and etc.\\n     **/\\n    function sendStableProToDAO() external;\\n\\n    function addWhitelistStablecoin(address _stablecoin) external;\\n\\n    function removeWhitelistStablecoin(address _stablecoin) external;\\n\\n    /* ==================== VIEW METHODS ==================== */\\n\\n    function hasWhitelistStablecoin(address _stablecoin) external view returns(bool);\\n}\\n\",\"keccak256\":\"0x47e708b7f9d12306cbb71c34ece650f10fb932347c19eb158f10a3e1ba2b4419\",\"license\":\"BSL 1.1\"},\"contracts/interfaces/ISuManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ISuManagerParameters.sol\\\";\\nimport \\\"./ISuManagerHelpers.sol\\\";\\nimport \\\"./ISuManagerLiquidation.sol\\\";\\n\\n/**\\n * @title SuManager\\n * @notice Manager mighty over the vault. Allows users to interact with their CDPs.\\n * User does only interact with manager as proxy to the vault.\\n **/\\ninterface ISuManager is ISuManagerParameters, ISuManagerHelpers, ISuManagerLiquidation {\\n    /* ===================== EVENTS ===================== */\\n    /**\\n     * @notice Even triggered when user deposit collateral\\n     **/\\n    event Join(address indexed asset, address indexed owner, uint256 main, uint256 stablecoin);\\n\\n    /**\\n     * @notice Event triggered when user withdraws collateral\\n     **/\\n    event Exit(address indexed asset, address indexed owner, uint256 main, uint256 stablecoin);\\n\\n    /* ===================== ERRORS ===================== */\\n    error Restricted();\\n    error UselessTransaction();\\n    error UnsupportedDecimals();\\n    error UnderCollateralized();\\n    error SmallCollateral();\\n\\n    /* ==================== METHODS ==================== */\\n    /**\\n     * @notice This function is called by user to deposit collateral and receive stablecoin\\n     * @dev Before calling this function user has to approve the Vault to take his collateral\\n     **/\\n    function join(\\n        address asset,\\n        uint256 assetAmountEDecimal,\\n        uint256 stablecoinAmountE18,\\n        uint256 lockupPeriodSeconds\\n    ) external;\\n\\n    /**\\n     * @notice User can pay back the stablecoin and take his collateral\\n     * instead of passing both assetAmount and stablecoinAmount\\n     * better user just to pass one of them\\n     * also pass preferred rate and maybe acceptable diff percent\\n     * that's the purpose of passing both to protect user from rate fluctuations\\n     **/\\n    function exit(address asset, uint256 assetAmountEDecimal, uint256 stablecoinAmountE18) external;\\n}\\n\",\"keccak256\":\"0x85b5124aac22a07972f193fbd4d896f73cf8832242f5697d55b0418a4ba443f8\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ISuManagerHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ISuManagerHelpers\\n * @notice Abstract contract that should be in SuManager. Here we have all view and ui-helpers methods.\\n * Here we don't change any values.\\n **/\\ninterface ISuManagerHelpers {\\n    /* ===================== ERRORS ===================== */\\n\\n    error InvalidArgs();\\n\\n    /* ==================== VIEW METHODS ==================== */\\n\\n    /**\\n     * @notice View function to check if position is liquidatable\\n     **/\\n    function isLiquidatablePosition(address asset, address owner) external view returns (bool);\\n\\n    /**\\n     * @notice Returns information about a liquidating position\\n     * @param asset The address of the main collateral token of a position\\n     * @param owner The owner of the collateral\\n     * @return collateralEDecimal The amount of collateral\\n     * @return debtWithFeesE18 The amount of borrowed stablecoins with accumulated fee\\n     **/\\n    function getPositionInfo(\\n        address asset,\\n        address owner\\n    ) external view returns (uint256 collateralEDecimal, uint256 debtWithFeesE18);\\n\\n    /**\\n     * @notice Returns information about a liquidating position\\n     * @param asset The address of the main collateral token of a position\\n     * @param owner The owner of the collateral\\n     * @return liquidationBlock The block number when the liquidation was triggered\\n     **/\\n    function getLiquidationBlock(address asset, address owner) external view returns (uint256);\\n\\n    /**\\n     * @notice USD value of collateral of owner\\n     **/\\n    function getCollateralUsdValueE18(address asset, address owner) external view returns (uint256);\\n\\n    /* ==================== UI HELPERS ==================== */\\n\\n    /**\\n     * @notice Returns Loan-To-Value in e18\\n     **/\\n    function getLTVE18(address asset, address owner) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns Available to Borrow\\n     * we have invariant: (collateralAmountEDecimal * collateralPriceE18 / 1e18) * initialCollateralRatioE18 <= debtE18\\n     * Has similar logic like in _ensurePositionCollateralization\\n     **/\\n    function getAvailableToBorrowE18(address asset, address owner) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns Available to Withdraw\\n     * Has similar invariant like in getAvailableToBorrowE18\\n     **/\\n    function getAvailableToWithdrawE18(address asset, address owner) external view returns (uint256);\\n\\n    /**\\n     * @notice Calculate liquidation price\\n     * @dev can be used inside of _isLiquidatablePosition\\n     **/\\n    function liquidationPriceE18(address asset, address owner) external view returns (uint256);\\n\\n    function liquidationPriceByAmount(\\n        address asset,\\n        address owner,\\n        uint256 additionalCollateralAmount,\\n        uint256 additionalStablecoinAmount\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice View function to show utilization ratio\\n     * the same function can be used inside of _isLiquidatablePosition\\n     **/\\n    function utilizationRatioE18(address asset, address owner) external view returns (uint256);\\n}\",\"keccak256\":\"0xbaefa2bdb0d4285d10612fbb88495414a634ae115f6fd0f9cb099451282e0618\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ISuManagerLiquidation.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ISuManagerLiquidation\\n * @notice Abstract contract that should be in SuManager.\\n * Here we have triggerLiquidation, that trigger bot should call after finding liquidatable position\\n **/\\ninterface ISuManagerLiquidation {\\n    /* ===================== ERRORS ===================== */\\n\\n    error PositionIsSafe();\\n    error LiquidationIsTriggered();\\n\\n    /* ===================== EVENTS ===================== */\\n    /**\\n     * @notice Event triggered when triggerLiquidation() is called\\n     **/\\n    event LiquidationTriggered(address asset, uint256 debtAmount);\\n\\n    /* ==================== MUTABLE METHODS ==================== */\\n\\n    /**\\n     * @notice Marks a position as to be liquidated\\n     * @dev\\n     * Emits LiquidationTriggered event.\\n     * Sets the current block as liquidationBlock for the position.\\n     * Can be triggered only once for the position.\\n     * Add order for liquidated collateral to sell it by stablecoin from whitelist\\n     * @param asset The address of the main collateral token of a position\\n     * @param owner The owner of a position\\n     **/\\n    function triggerLiquidation(address asset, address owner) external;\\n}\",\"keccak256\":\"0xb83ad87525768e72d36ab93a24a731536d18ed55d23d5dba6a877c549a141c94\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ISuManagerParameters.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\ninterface ISuManagerParameters {\\n    /* ====================== VARS ====================== */\\n    /**\\n     * @notice When ratio (debt / usdValue) goes below it user can't withdraw or borrow.\\n     * Should be >= liquidationRatioE18. 1e18 = 100% ratio. Should be less than 1e18.\\n     * Is used to calculate available to withdraw and borrow.\\n     * For example, user can borrow <= usdValue * initialCollateralRatio\\n     **/\\n    function initialCollateralRatioE18 (address asset) external view returns ( uint256 );\\n\\n    /**\\n     * @notice Ratio when cdp can be liquidated.\\n     * 1e18 = 100% ratio. Should be less than 1e18.\\n     * Is used in isLiquidatablePosition(). It's true when debt / usdValue >= liquidationRatio\\n     **/\\n    function liquidationRatioE18 (address asset) external view returns ( uint256 );\\n\\n    /**\\n     * @notice The minimum value of collateral in USD which allowed to be left after partial closure\\n     **/\\n    function minCollateralInUsdE18 ( ) external view returns ( uint256 );\\n\\n    /* ===================== ERRORS ===================== */\\n    error BadLiquidationRatioValue();\\n    error BadInitialCollateralRatioValue();\\n\\n    /* ==================== METHODS ==================== */\\n    function setCollateral (\\n        address asset,\\n        uint256 stabilityFeeValueE18,\\n        uint256 initialCollateralRatioValueE18,\\n        uint256 liquidationRatioValueE18,\\n        uint256 stablecoinLimitE18,\\n        uint256 minCollateralInUsdValueE18\\n    ) external;\\n\\n    /**\\n     * @notice Only manager is able to call this function\\n     * @dev Sets the initial collateral ratio\\n     * @param asset The address of the main collateral token\\n     * @param newValueE18 The collateralization ratio (1e18 = 100%)\\n     **/\\n    function setInitialCollateralRatioE18 ( address asset, uint256 newValueE18 ) external;\\n\\n    /**\\n     * @notice Only manager is able to call this function\\n     * @dev Sets the liquidation ratio\\n     * @param asset The address of the main collateral token\\n     * @param newValueE18 The liquidation ratio (1e18 = 100%).\\n     **/\\n    function setLiquidationRatioE18 ( address asset, uint256 newValueE18 ) external;\\n\\n    /**\\n     * @notice Only manager is able to call this function\\n     * @dev Sets a minimum value of collateral in USD which allowed to be left after partial closure\\n     * @param newValueE18 The minimum value of collateral in USD\\n     */\\n    function setMinCollateralInUsdE18 ( uint256 newValueE18 ) external;\\n}\\n\",\"keccak256\":\"0x244cf5530c7f2f1769980a413e183b4d36e087b6d23d4cd020bc8e285fac174e\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ISuPausable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\ninterface ISuPausable {\\n    /* ===================== EVENTS ===================== */\\n    /**\\n     * @dev Emitted when the pause is triggered by `account` for the \\\"collateral\\\".\\n     **/\\n    event PausedCollateral(address account, address collateral);\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account` for the \\\"_contract\\\".\\n     **/\\n    event PausedContract(address account, address _contract);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account` for the \\\"collateral\\\".\\n     **/\\n    event UnpausedCollateral(address account, address collateral);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account` for the \\\"_contract\\\".\\n     **/\\n    event UnpausedContract(address account, address _contract);\\n\\n    /* ===================== ERRORS ===================== */\\n    error AlreadyPaused();\\n    error NotPaused();\\n\\n    /* ==================== MUTABLE METHODS ==================== */\\n    /**\\n     * @dev Triggers stopped state for the \\\"collateral\\\".\\n     **/\\n    function pauseCollateral(address collateral) external;\\n\\n    /**\\n     * @dev Triggers stopped state for all \\\"collaterals\\\".\\n     **/\\n    function batchPauseCollateral(address[] calldata collaterals) external;\\n\\n    /**\\n     * @dev Triggers stopped state for the \\\"_contract\\\".\\n     **/\\n    function pauseContract(address _contract) external;\\n\\n    /**\\n     * @dev Triggers stopped state for the protocol.\\n     **/\\n    function pauseAll() external;\\n\\n    /**\\n     * @dev Returns \\\"collateral\\\" to normal state.\\n     **/\\n    function unpauseCollateral(address collateral) external;\\n\\n    /**\\n     * @dev Returns all \\\"collaterals\\\" to normal state.\\n     **/\\n    function batchUnpauseCollateral(address[] calldata collaterals) external;\\n\\n    /**\\n     * @dev Returns \\\"_contract\\\" to normal state.\\n     **/\\n    function unpauseContract(address _contract) external;\\n\\n    /**\\n     * @dev Returns protocol to normal state. All previous stopped collaterals and contracts are in the same state.\\n     **/\\n    function unpauseAll() external;\\n\\n    /* ==================== VIEW METHODS ==================== */\\n    /**\\n     * @dev Returns true if the contract for the \\\"collateral\\\" is paused, and false otherwise.\\n     **/\\n    function isPaused(address collateral) external view returns (bool);\\n}\",\"keccak256\":\"0x0a7500b38c8cb19a81e9fcdcd18c18e9647626704f45476dbee46c7548f8ee09\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ISuVault.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../lending/SuVaultParameters.sol\\\";\\nimport \\\"../interfaces/ISuVaultParameters.sol\\\";\\nimport \\\"../reward/RewardChefV2.sol\\\";\\n\\ninterface ISuVault is ISuVaultParameters {\\n    /* ===================== EVENTS ===================== */\\n    /**\\n     * @notice Event triggered when user destroys cdp\\n     **/\\n    event PositionLiquidated(\\n        address asset, address owner, address repayer, uint256 assetAmountEDecimal, uint256 repaymentE18\\n    );\\n\\n    /**\\n     * @notice Event triggered when user liquidate some part of cdp (debt > 0)\\n     **/\\n    event PositionLiquidatedPartial(\\n        address asset, address owner, address repayer, uint256 assetAmountEDecimal, uint256 repaymentE18\\n    );\\n\\n    /**\\n     * @notice Event triggered when user call repay() function\\n     **/\\n    event PositionRepaid(address repayer, uint256 repaymentE18, uint256 excessAndFeeE18);\\n\\n    /**\\n     * @notice Event triggered when user didnt withdraw collateral before price goes down\\n     **/\\n    event LiquidationTriggered(address indexed asset, address indexed owner);\\n\\n    /* ===================== ERRORS ===================== */\\n    error LiquidationIsTriggered();\\n    error Restricted();\\n    error WithdrawExceeded();\\n    error WrongDebt();\\n    error WrongTotalDebt();\\n    error UselessTransaction();\\n    error AssetDebtLimit();\\n\\n    /* ====================== VARS ====================== */\\n    /**\\n     * @notice how much collateral the users staked == collaterals[asset][user], i.e deposits\\n     * EDecimal means that this value in asset denomination, i.e. x{human readable value} * 10^{erc20.decimals()}\\n     **/\\n    function collateralsEDecimal (address asset, address user) external view returns ( uint256 );\\n\\n    /**\\n     * @notice stablecoin amount\\n     **/\\n    function debtsE18 (address asset, address user) external view returns ( uint256 );\\n\\n    /**\\n     * @notice stablecoin amount + fee accumulated before lastUpdate == debtWithFeesE18[asset][user]\\n     **/\\n    function debtWithFeesE18 (address asset, address user) external view returns ( uint256 );\\n\\n    /**\\n     * @notice the last time, when every fee before lastUpdates are calculated in the debt.\\n     * All data such as fees are from lastUpdate only\\n     **/\\n    function lastUpdate (address asset, address user) external view returns ( uint256 );\\n\\n    /**\\n     * @notice asset => user => block number\\n     **/\\n    function liquidationBlock (address asset, address user) external view returns (uint256);\\n\\n    /**\\n     * @notice current interest that user pay for stabilityFee[asset][user]\\n     **/\\n    function stabilityFeeE18 (address asset, address user) external view returns ( uint256 );\\n\\n    /**\\n     * @notice Stats, how much stablecoins were borrowed against particular asset == tokenDebtsE18[asset]\\n     **/\\n    function tokenDebtsE18 (address asset) external view returns ( uint256 );\\n\\n    /**\\n     * @notice tokenDebtsE18[asset] + accumulated fee in all CDPs in this asset\\n     **/\\n    function tokenDebtsWithFeesE18 (address asset) external view returns ( uint256 );\\n\\n    /* ==================== MUTABLE METHODS ==================== */\\n    /**\\n     * @notice borrow usdPRO using selected asset.\\n     * user expected previously to deposit collateral and then being able to take stablecoin\\n     * user can't create single position with multiple collaterals?\\n     **/\\n    function borrow ( address asset, address user, uint256 amountE18, uint256 lockupPeriodSeconds ) external;\\n\\n    /**\\n     * @notice collateral deposit\\n     **/\\n    function deposit ( address asset, address user, uint256 amountEDecimal ) external;\\n\\n    /**\\n     * @notice only destroy debt info\\n     * @dev onlyVaultAccess, exit -> _repay -> destroy if debt == 0\\n     **/\\n    function destroy ( address asset, address user ) external;\\n\\n    /**\\n     * @notice withdraw in case of some protocol errors, users can always get back their tokens\\n     **/\\n    function emergencyWithdraw ( address asset, address user, uint256 amountEDecimal ) external;\\n\\n    /**\\n     * @notice liquidate user position, just cut debt and withdraw user collateral without asking StablePro\\n     **/\\n    function liquidate(\\n        address asset,\\n        address owner,\\n        address recipient,\\n        uint256 assetAmountEDecimal,\\n        uint256 stablecoinAmountE18\\n    ) external;\\n\\n    /**\\n     * @notice set new RewardChef contract address\\n     **/\\n    function setRewardChef(address rewardChef) external;\\n\\n    /**\\n     * @notice Marks a position as to be liquidated\\n     * @param asset The address of the main collateral token of a position\\n     * @param positionOwner The owner of a position\\n     * @dev Sets the current block as liquidationBlock for the position. Can be triggered only once for the position.\\n     **/\\n    function triggerLiquidation(address asset, address positionOwner) external;\\n\\n    /**\\n     * @notice Update all main state vars\\n     * position is not allowed to be modified during liquidation, because when it's launched -\\n     * liquidators want to be sure they can participate\\n     * @dev is called, when user borrows more\\n     **/\\n    function update ( address asset, address user ) external;\\n\\n    /**\\n     * @notice collateral withdraw\\n     **/\\n    function withdraw ( address asset, address user, address recipient, uint256 amountEDecimal ) external;\\n\\n    /**\\n     * @notice Burns a debt repayment and transfers fees to the foundation.\\n     * @param repayer The person who repaies by debt and transfers stablecoins to the foundation\\n     * @param stablecoinsToRepaymentE18 The amount of stablecoins which will be burned as a debt repayment\\n     * @param stablecoinsToFoundationE18 The amount of stablecoins which will be transfered to the foundation(e.g fees)\\n     **/\\n    function payFeeAndBurn(\\n        address repayer,\\n        uint256 stablecoinsToRepaymentE18,\\n        uint256 stablecoinsToFoundationE18\\n    ) external;\\n\\n    /* ==================== VIEW METHODS ==================== */\\n\\n    /**\\n     * @notice fee is increased with time. Any call of vault.update would calc fee in debt and restart fee timer\\n     **/\\n    function calculateFeeE18 ( address asset, address user, uint256 amountE18 ) external view returns ( uint256 );\\n\\n    /**\\n     * @notice total dept is calculated as current debt with added calculated fee, don't use it in practice\\n     **/\\n    function getTotalDebtE18 ( address asset, address user ) external view returns ( uint256 );\\n}\\n\",\"keccak256\":\"0x7d9cc838d27dd71fff62d41f5523a4a0eda02c1ccdfd64a9e51578a044f833a5\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ISuVaultParameters.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title SuVaultParameters\\n * @notice SuVaultParameters is Singleton for Access Control, like configuration contract.\\n **/\\ninterface ISuVaultParameters {\\n    /* ====================== VARS ====================== */\\n    /**\\n     * @notice Stability fee that is used in calculateFeeE18 to see how much user debt increased.\\n     * It can be different for each collateral\\n     **/\\n    function protocolStabilityFeeE18 (address asset) external view returns ( uint256 );\\n\\n    /**\\n     * @notice Limit for each collateral-asset to manage risk profile\\n     **/\\n    function tokenDebtLimitE18 (address asset) external view returns ( uint256 );\\n\\n    /* ===================== ERRORS ===================== */\\n    error ZeroAddress();\\n\\n    /* ==================== METHODS ==================== */\\n    // TODO: creating new collaterals and modifying existing ones should be separate functions for security reason\\n    /**\\n     * @notice manager is allowed to add new collaterals and modify existing ones\\n     **/\\n    function setCollateral (address asset, uint256 stabilityFeeValueE18, uint256 stablecoinLimitE18) external;\\n\\n    /**\\n     * @notice manager is allowed to change foundation that receive fees and etc\\n     **/\\n    function setFoundation ( address newFoundation ) external;\\n\\n    /**\\n     * @notice set fee percentage (1e18 = 100%)\\n     **/\\n    function setStabilityFeeE18 ( address asset, uint256 newValue ) external;\\n\\n    /**\\n     * @notice debt limit can be changed for any collateral along with liquidation and stability fees\\n     **/\\n    function setTokenDebtLimitE18 ( address asset, uint256 limit ) external;\\n}\\n\",\"keccak256\":\"0x4cc72c9216b72ddfa81b20967d64e202cc2617d16c00b817f94e54b49767221d\",\"license\":\"UNLICENSED\"},\"contracts/lending/SuManager.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\n/*\\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\\n*/\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport \\\"../interfaces/ISuVault.sol\\\";\\nimport \\\"../interfaces/ISuCdpRegistry.sol\\\";\\nimport \\\"../interfaces/ISuManager.sol\\\";\\nimport \\\"./SuManagerParameters.sol\\\";\\nimport \\\"./SuManagerHelpers.sol\\\";\\nimport \\\"./SuManagerLiquidation.sol\\\";\\nimport \\\"../emergency/SuPausableAbstract.sol\\\";\\n\\n/**\\n * @title SuManager\\n * @notice Main contract to give ability to user to join position or exit from it.\\n * @dev See ISuManager interface and all SuManager** contracts for full details.\\n */\\ncontract SuManager is\\nReentrancyGuardUpgradeable,\\nSuManagerParameters,\\nSuManagerLiquidation,\\nSuManagerHelpers,\\nSuPausableAbstract,\\nISuManager {\\n    ISuVault public vault;\\n    ISuCdpRegistry public cdpRegistry;\\n\\n    modifier checkpoint(address asset, address owner) {\\n        _;\\n        cdpRegistry.checkpoint(asset, owner);\\n    }\\n\\n    function initialize(\\n        address _vault,\\n        address _suOracle,\\n        address _cdpRegistry,\\n        address _suLiquidationMiddleware,\\n        address _stablePro,\\n        address _foundation,\\n        address _suPausable\\n    ) public initializer {\\n        if (_cdpRegistry == address(0) || _suOracle == address(0)) revert InvalidArgs();\\n\\n        __ReentrancyGuard_init();\\n        __suManagerParametersInit(_vault);\\n        __suManagerLiquidationInit(address(this), _vault, _suLiquidationMiddleware, _stablePro, _foundation);\\n        __suManagerHelpersInit(address(this), _vault, _suOracle);\\n        __suPausableAbstractInit(_suPausable);\\n\\n        vault = ISuVault(_vault);\\n        cdpRegistry = ISuCdpRegistry(_cdpRegistry);\\n    }\\n\\n    // wrapper ether only, no native\\n    receive() external payable {\\n        revert Restricted();\\n    }\\n\\n    function join(address asset, uint256 assetAmountEDecimal, uint256 stablecoinAmountE18, uint256 lockupPeriodSeconds)\\n    public nonReentrant checkpoint(asset, msg.sender) whenNotPaused(asset) {\\n        if (stablecoinAmountE18 == 0 && assetAmountEDecimal == 0) revert UselessTransaction();\\n        if (IERC20Metadata(asset).decimals() > 18) revert UnsupportedDecimals();\\n\\n        if (stablecoinAmountE18 == 0) {\\n            vault.deposit(asset, msg.sender, assetAmountEDecimal);\\n        } else {\\n            if (assetAmountEDecimal != 0) {\\n                vault.deposit(asset, msg.sender, assetAmountEDecimal);\\n            }\\n\\n            vault.borrow(asset, msg.sender, stablecoinAmountE18, lockupPeriodSeconds);\\n\\n            _ensurePositionCollateralization(asset, msg.sender);\\n        }\\n\\n        // not allowed to left some dust after partial closure the position\\n        _ensureMinCollateralThreshold(asset, msg.sender);\\n\\n        emit Join(asset, msg.sender, assetAmountEDecimal, stablecoinAmountE18);\\n    }\\n\\n    function exit(address asset, uint256 assetAmountEDecimal, uint256 stablecoinAmountE18)\\n    public nonReentrant checkpoint(asset, msg.sender) whenNotPaused(asset) {\\n        if (vault.liquidationBlock(asset, msg.sender) > 0) revert LiquidationIsTriggered();\\n\\n        // not to pay more stablecoin than debt\\n        uint256 debtWithFeesE18 = vault.debtWithFeesE18(asset, msg.sender);\\n        if (stablecoinAmountE18 > debtWithFeesE18) { stablecoinAmountE18 = debtWithFeesE18; }\\n\\n        // calculate and charge fee\\n        uint256 feeE18 = vault.calculateFeeE18(asset, msg.sender, stablecoinAmountE18);\\n\\n        vault.liquidate(asset, msg.sender, msg.sender, assetAmountEDecimal, stablecoinAmountE18);\\n\\n        // not allowed to left some dust after partial closure the position\\n        _ensureMinCollateralThreshold(asset, msg.sender);\\n\\n        vault.payFeeAndBurn(msg.sender, stablecoinAmountE18, feeE18);\\n\\n        if (vault.debtWithFeesE18(asset, msg.sender) > 0) {\\n            // TODO: check that withdrawals lead to update\\n            vault.update(asset, msg.sender);\\n\\n            // dont need to check this after full repayment\\n            _ensurePositionCollateralization(asset, msg.sender);\\n        }\\n\\n        emit Exit(asset, msg.sender, assetAmountEDecimal, stablecoinAmountE18);\\n    }\\n\\n    // after partial repayment should be made sure its still collateralized enough\\n    function _ensurePositionCollateralization(address asset, address owner) internal view {\\n        // calculate value in usd from collateral position\\n        uint256 usdValueE18 = getCollateralUsdValueE18(asset, owner);\\n\\n        // multiply value in usd to the collateral ratio, then divide by 1e18\\n        uint256 usdLimitE18 = usdValueE18 * initialCollateralRatioE18[asset] / 1e18;\\n\\n        // make sure calculated allowed limit is higher than the actual debt\\n        if (vault.getTotalDebtE18(asset, owner) > usdLimitE18) revert UnderCollateralized();\\n    }\\n\\n    // after partial closure should be made sure it is not left too little amount of collateral\\n    function _ensureMinCollateralThreshold(address asset, address owner) internal view {\\n        uint256 usdValueE18 = getCollateralUsdValueE18(asset, owner)    ;\\n\\n        if (usdValueE18 > 0 && usdValueE18 <= minCollateralInUsdE18) revert SmallCollateral();\\n    }\\n}\\n\",\"keccak256\":\"0x0fa71df01d1849d053b277b48cdd5027482c05a9d07c5549b30234263436a336\",\"license\":\"BSL 1.1\"},\"contracts/lending/SuManagerHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"../interfaces/ISuManagerHelpers.sol\\\";\\nimport \\\"../interfaces/ISuVault.sol\\\";\\nimport \\\"../interfaces/ISuManager.sol\\\";\\nimport \\\"../periphery/contracts/interfaces/oracle/ISuOracle.sol\\\";\\n\\n/**\\n * @title SuManagerHelpers\\n * @dev See ISuManagerHelpers interface for full details.\\n */\\nabstract contract SuManagerHelpers is ISuManagerHelpers {\\n    ISuVault private _VAULT;\\n    ISuManager private _MANAGER;\\n    ISuOracle private _ORACLE;\\n\\n    function __suManagerHelpersInit(address _suManager, address _suVault, address _suOracle) internal {\\n        if (_suOracle == address(0)) revert InvalidArgs();\\n\\n        _MANAGER = ISuManager(_suManager);\\n        _VAULT = ISuVault(_suVault);\\n        _ORACLE = ISuOracle(_suOracle);\\n    }\\n\\n    /* ==================== VIEW METHODS ==================== */\\n\\n    function isLiquidatablePosition(address asset, address owner) public view returns (bool) {\\n        uint256 usdValueE18 = getCollateralUsdValueE18(asset, owner);\\n        if (usdValueE18 == 0) return false;\\n\\n        // calculate current debt to be returned\\n        uint256 debtE18 = _VAULT.getTotalDebtE18(asset, owner);\\n\\n        if (debtE18 == 0) return false;\\n        // make sure its not under collaterazied\\n        return debtE18 * 1e18 / usdValueE18 >= _MANAGER.liquidationRatioE18(asset);\\n    }\\n\\n    function getPositionInfo(address asset, address owner) external view returns (\\n        uint256 collateralEDecimal,\\n        uint256 debtWithFeesE18\\n    ) {\\n        collateralEDecimal = _VAULT.collateralsEDecimal(asset, owner);\\n        debtWithFeesE18 = _VAULT.debtWithFeesE18(asset, owner);\\n    }\\n\\n    function getLiquidationBlock(address asset, address owner) external view returns (uint256) {\\n        return _VAULT.liquidationBlock(asset, owner);\\n    }\\n\\n    function getCollateralUsdValueE18(address asset, address owner) public view returns (uint256) {\\n        uint256 assetAmountEDecimal = _VAULT.collateralsEDecimal(asset, owner);\\n\\n        return _ORACLE.getFiatPrice1e18(asset) * assetAmountEDecimal / 1e18;\\n    }\\n\\n    /* ====================== UI HELPERS ====================== */\\n\\n    function getLTVE18(address asset, address owner) external view returns (uint256) {\\n        uint256 usdValueE18 = getCollateralUsdValueE18(asset, owner);\\n        if (usdValueE18 == 0) return 0;\\n\\n        uint256 debtWithFeesE18 = _VAULT.debtWithFeesE18(asset, owner);\\n\\n        return debtWithFeesE18 * 1e18 / usdValueE18;\\n    }\\n\\n    function getAvailableToBorrowE18(address asset, address owner) external view returns (uint256) {\\n        uint256 usdValueE18 = getCollateralUsdValueE18(asset, owner);\\n        uint256 usdLimitE18 = usdValueE18 * _MANAGER.initialCollateralRatioE18(asset) / 1e18;\\n\\n        uint256 totalDebtWithFeeE18 = _VAULT.getTotalDebtE18(asset, owner);\\n\\n        if (usdLimitE18 <= totalDebtWithFeeE18) return 0;\\n\\n        return usdLimitE18 - totalDebtWithFeeE18;\\n    }\\n\\n    function getAvailableToWithdrawE18(address asset, address owner) external view returns (uint256) {\\n        uint256 collateralAmountEDecimal = _VAULT.collateralsEDecimal(asset, owner);\\n        uint256 collateralPriceE18 = _ORACLE.getFiatPrice1e18(asset);\\n        if (collateralPriceE18 == 0) return 0;\\n        uint256 debtWithFeesE18 = _VAULT.debtWithFeesE18(asset, owner);\\n\\n        uint256 minCollateralAmountEDecimal = debtWithFeesE18 * (10 ** IERC20Metadata(asset).decimals()) * 1e18 /\\n            (collateralPriceE18 * _MANAGER.initialCollateralRatioE18(asset));\\n\\n        return collateralAmountEDecimal - minCollateralAmountEDecimal;\\n    }\\n\\n    function liquidationPriceE18(address asset, address owner) external view returns (uint256) {\\n        uint256 debtE18 = _VAULT.getTotalDebtE18(asset, owner);\\n        if (debtE18 == 0) return type(uint256).max;\\n\\n        uint256 collateralLiqPriceE18 = debtE18 * 1e18 / _MANAGER.liquidationRatioE18(asset);\\n\\n        return collateralLiqPriceE18 * 1e18 / _VAULT.collateralsEDecimal(asset, owner) /\\n            10 ** (18 - IERC20Metadata(asset).decimals());\\n    }\\n\\n    function liquidationPriceByAmount(\\n        address asset,\\n        address owner,\\n        uint256 additionalCollateralAmount,\\n        uint256 additionalStablecoinAmount\\n    ) external view returns (uint256) {\\n        uint256 debtE18 = _VAULT.getTotalDebtE18(asset, owner) + additionalStablecoinAmount;\\n        if (debtE18 == 0) return type(uint256).max;\\n\\n        uint256 collateralLiqPriceE18 = debtE18 * 1e18 / _MANAGER.liquidationRatioE18(asset);\\n        uint256 collaterals = _VAULT.collateralsEDecimal(asset, owner) + additionalCollateralAmount;\\n\\n        return collateralLiqPriceE18 * 1e18 / collaterals / 10 ** (18 - IERC20Metadata(asset).decimals());\\n    }\\n\\n    function utilizationRatioE18(address asset, address owner) public view returns (uint256) {\\n        uint256 debtE18 = _VAULT.getTotalDebtE18(asset, owner);\\n        if (debtE18 == 0) return 0;\\n\\n        uint256 usdValueE18 = getCollateralUsdValueE18(asset, owner);\\n\\n        return debtE18 * 1e18 / usdValueE18;\\n    }\\n}\",\"keccak256\":\"0x7e4a57d63ca58d11ae10661e9ddd8afd72c95e9521972ea75be9f5ca27852678\",\"license\":\"BSL 1.1\"},\"contracts/lending/SuManagerLiquidation.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\n\\nimport \\\"../interfaces/ISuManagerLiquidation.sol\\\";\\nimport \\\"../interfaces/ISuVault.sol\\\";\\nimport \\\"../interfaces/ISuManager.sol\\\";\\nimport \\\"../interfaces/ISuLiquidationMiddleware.sol\\\";\\n\\nimport \\\"../periphery/contracts/access-control/SuAuthenticated.sol\\\";\\n\\n/**\\n * @title SuManagerLiquidation\\n * @dev See ISuManagerLiquidation interface for full details.\\n */\\nabstract contract SuManagerLiquidation is Initializable, SuAuthenticated, ISuManagerLiquidation {\\n    ISuVault private _vault;\\n    ISuManager private _manager;\\n    ISuLiquidationMiddleware private _liquidationMiddleware;\\n    address private _stablePro;\\n    address public foundation;\\n\\n    function __suManagerLiquidationInit(\\n        address _suManager,\\n        address _suVault,\\n        address _suLiquidationMiddleware,\\n        address _suStablePro,\\n        address _foundation\\n    ) internal onlyInitializing {\\n        _manager = ISuManager(_suManager);\\n        _vault = ISuVault(_suVault);\\n        _liquidationMiddleware = ISuLiquidationMiddleware(_suLiquidationMiddleware);\\n        _stablePro = _suStablePro;\\n        foundation = _foundation;\\n    }\\n\\n    function triggerLiquidation(address asset, address owner) external {\\n        if (_vault.liquidationBlock(asset, owner) > 0) revert LiquidationIsTriggered();\\n        if (!_manager.isLiquidatablePosition(asset, owner)) revert PositionIsSafe();\\n\\n        // summarize debt with accumulated fees\\n        _vault.update(asset, owner);\\n\\n        _vault.triggerLiquidation(asset, owner);\\n\\n        uint256 collateralsEDecimal = _vault.collateralsEDecimal(asset, owner);\\n        uint256 debtsE18 = _vault.debtsE18(asset, owner);\\n        uint256 debtWithFeesE18 = _vault.debtWithFeesE18(asset, owner);\\n\\n        // we need to cut all debt (with fees) of owner and send collateral to _liquidationMiddleware\\n        _vault.liquidate(\\n            asset,\\n            owner,\\n            address(this),\\n            collateralsEDecimal,\\n            debtWithFeesE18\\n        );\\n\\n        // TODO: make percent depending on collateralsEDecimal\\n        uint256 liquidationReward = collateralsEDecimal * 5 / 1000; // 0.5%\\n        uint256 sellAmount = collateralsEDecimal - liquidationReward;\\n\\n        TransferHelper.safeTransfer(asset, msg.sender, liquidationReward);\\n        TransferHelper.safeTransfer(asset, address(_liquidationMiddleware), sellAmount);\\n\\n        _liquidationMiddleware.borrowCollateralToSell(asset, sellAmount, debtsE18);\\n\\n        emit LiquidationTriggered(asset, debtsE18);\\n    }\\n}\",\"keccak256\":\"0x8a64c1593677ed73a6a0b6e935f7b0a94ed83c26c734020114541141c6ab630a\",\"license\":\"BSL 1.1\"},\"contracts/lending/SuManagerParameters.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\n/*\\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\\n*/\\npragma solidity ^0.8.0;\\n\\nimport \\\"./SuVaultParameters.sol\\\";\\nimport \\\"../interfaces/ISuManagerParameters.sol\\\";\\nimport \\\"../periphery/contracts/access-control/SuAuthenticated.sol\\\";\\n\\n/**\\n * @title SuManagerParameters\\n * @dev See ISuManagerParameters interface for full details.\\n */\\nabstract contract SuManagerParameters is SuAuthenticated, ISuManagerParameters {\\n    mapping(address => uint256) public initialCollateralRatioE18;\\n    mapping(address => uint256) public liquidationRatioE18;\\n    uint256 public minCollateralInUsdE18;\\n\\n    SuVaultParameters public vaultParameters;\\n\\n    function __suManagerParametersInit(address _vaultParameters) internal onlyInitializing {\\n        __suAuthenticatedInit(address(SuAuthenticated(_vaultParameters).ACCESS_CONTROL_SINGLETON()));\\n\\n        vaultParameters = SuVaultParameters(_vaultParameters);\\n        minCollateralInUsdE18 = 5 * 1e18;\\n    }\\n\\n    // TODO: add two types of functions:\\n    //  - fundamental for DAO that set collateral and limits for parameters\\n    //  - fine tuning for admin that is able to change some parameters within limits\\n    function setCollateral(\\n        address asset,\\n        uint256 stabilityFeeValueE18,\\n        uint256 initialCollateralRatioValueE18,\\n        uint256 liquidationRatioValueE18,\\n        uint256 stablecoinLimitE18,\\n        uint256 minCollateralInUsdValueE18\\n    ) external onlyDAO {\\n        vaultParameters.setCollateral(asset, stabilityFeeValueE18, stablecoinLimitE18);\\n        setInitialCollateralRatioE18(asset, initialCollateralRatioValueE18);\\n        setLiquidationRatioE18(asset, liquidationRatioValueE18);\\n        setMinCollateralInUsdE18(minCollateralInUsdValueE18);\\n    }\\n\\n    function setInitialCollateralRatioE18(address asset, uint256 newValueE18) public onlyDAO {\\n        if (newValueE18 == 0 || newValueE18 > 1e18) revert BadInitialCollateralRatioValue();\\n        initialCollateralRatioE18[asset] = newValueE18;\\n    }\\n\\n    function setLiquidationRatioE18(address asset, uint256 newValueE18) public onlyDAO {\\n        if (newValueE18 == 0 || newValueE18 < initialCollateralRatioE18[asset]) revert BadLiquidationRatioValue();\\n        liquidationRatioE18[asset] = newValueE18;\\n    }\\n\\n    function setMinCollateralInUsdE18(uint256 newValueE18) public onlyDAO {\\n        minCollateralInUsdE18 = newValueE18;\\n    }\\n}\\n\",\"keccak256\":\"0x3a316d7b5f5e169cde6958ac1a83870befd08718324123eed87b40cee87700b9\",\"license\":\"BSL 1.1\"},\"contracts/lending/SuVaultParameters.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\r\\n\\r\\nimport \\\"../interfaces/ISuVaultParameters.sol\\\";\\r\\nimport \\\"../periphery/contracts/access-control/SuAuthenticated.sol\\\";\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// TODO: merge with ManagerParameters\\r\\n/**\\r\\n * @title SuVaultParameters\\r\\n * @dev See ISuVaultParameters interface for full details.\\r\\n */\\r\\nabstract contract SuVaultParameters is SuAuthenticated, ISuVaultParameters {\\r\\n    mapping(address => uint256) public protocolStabilityFeeE18;\\r\\n    mapping(address => uint256) public tokenDebtLimitE18;\\r\\n    address public foundation;\\r\\n    address public vault;\\r\\n\\r\\n    // how can vault address be known at this moment?\\r\\n    // Precult based on CREATE spec\\r\\n    // can be created another function to set vault address once deployed?\\r\\n    // Yes, possibly with some logic change\\r\\n    function __suVaultParametersInit(\\r\\n        address _authControl,\\r\\n        address payable _vault,\\r\\n        address _foundation\\r\\n    )  internal onlyInitializing {\\r\\n        if (_vault == address(0) || _foundation == address(0)) revert ZeroAddress();\\r\\n\\r\\n        __suAuthenticatedInit(_authControl);\\r\\n        vault = _vault;\\r\\n        foundation = _foundation;\\r\\n    }\\r\\n\\r\\n    function setFoundation(address newFoundation) external onlyDAO {\\r\\n        if (newFoundation == address(0)) revert ZeroAddress();\\r\\n        foundation = newFoundation;\\r\\n    }\\r\\n\\r\\n    // is called by Manager\\r\\n    function setCollateral(\\r\\n        address asset,\\r\\n        uint256 stabilityFeeValueE18,\\r\\n        uint256 stablecoinLimitE18\\r\\n    ) external onlyVaultAccess {\\r\\n        // stability fee should be validated in range, what is stability fee should be described here?\\r\\n        setStabilityFeeE18(asset, stabilityFeeValueE18);\\r\\n        // why debt limit for collateral is necessary? to manage risks in case of collateral failure?\\r\\n        setTokenDebtLimitE18(asset, stablecoinLimitE18);\\r\\n    }\\r\\n\\r\\n    function setStabilityFeeE18(address asset, uint256 newValue) public onlyVaultAccess {\\r\\n        protocolStabilityFeeE18[asset] = newValue;\\r\\n    }\\r\\n\\r\\n    function setTokenDebtLimitE18(address asset, uint256 limit) public onlyVaultAccess {\\r\\n        tokenDebtLimitE18[asset] = limit;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x6a91a92cb6c0aaa9a0bf0fb7030b41179c4e39da48e80ac24e2c58f3aa3f5b4c\",\"license\":\"BSL 1.1\"},\"contracts/periphery/contracts/access-control/SuAccessRoles.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title SuAccessRoles Library\\n * @dev SuAuthenticated and SuAccessControlSingleton need to have this constants\\n * Hierarchy:\\n *      1. DAO - can give admins and system roles\\n *      2.1. Admin - can set Alerters\\n *      2.2. System - includes Minter, Vault, Liquidation and Reward roles, don't have access to give some roles.\\n *      3. Alerter - can send alerts and trigger rate limits, don't have access to give some roles.\\n */\\nabstract contract SuAccessRoles {\\n    bytes32 public constant ADMIN_ROLE = 0x00;\\n\\n    bytes32 public constant DAO_ROLE = keccak256(\\\"DAO_ROLE\\\");\\n\\n    bytes32 public constant ALERTER_ROLE = keccak256(\\\"ALERTER_ROLE\\\");\\n\\n    // system roles\\n    bytes32 public constant MINT_ACCESS_ROLE = keccak256(\\\"MINT_ACCESS_ROLE\\\");\\n    bytes32 public constant VAULT_ACCESS_ROLE = keccak256(\\\"VAULT_ACCESS_ROLE\\\");\\n    bytes32 public constant LIQUIDATION_ACCESS_ROLE = keccak256(\\\"LIQUIDATION_ACCESS_ROLE\\\");\\n    bytes32 public constant REWARD_ACCESS_ROLE = keccak256(\\\"REWARD_ACCESS_ROLE\\\");\\n}\\n\",\"keccak256\":\"0x024209469b6b337eef6cf520501d1e6c2ba66a79f014c25220a35e407d69b02e\",\"license\":\"BSL 1.1\"},\"contracts/periphery/contracts/access-control/SuAuthenticated.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/access-control/ISuAccessControl.sol\\\";\\nimport \\\"./SuAccessRoles.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @title SuAuthenticated\\n * @dev other contracts should inherit to be authenticated.\\n * The address of SuAccessControlSingleton should be one for all contract that inherits SuAuthenticated\\n */\\nabstract contract SuAuthenticated is Initializable, SuAccessRoles, IERC165Upgradeable {\\n    ISuAccessControl public ACCESS_CONTROL_SINGLETON;\\n\\n    error OnlyDAOError();\\n    error OnlyAdminError();\\n    error OnlyAlerterError();\\n    error OnlyVaultAccessError();\\n    error OnlyLiquidationAccessError();\\n    error OnlyMintAccessError();\\n    error OnlyRewardAccessError();\\n    error OnlyRoleError();\\n    error BadAccessControlSingleton();\\n\\n    /**\\n     * @dev should be passed in constructor\\n     */\\n    function __suAuthenticatedInit(address _accessControlSingleton) internal onlyInitializing {\\n        ACCESS_CONTROL_SINGLETON = ISuAccessControl(_accessControlSingleton);\\n        if (\\n            !ISuAccessControl(_accessControlSingleton).supportsInterface(type(IAccessControlUpgradeable).interfaceId)\\n        ) revert BadAccessControlSingleton();\\n    }\\n\\n    /** CORE ROLES */\\n\\n    modifier onlyDAO() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(DAO_ROLE, msg.sender)) revert OnlyDAOError();\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(ADMIN_ROLE, msg.sender)) revert OnlyAdminError();\\n        _;\\n    }\\n\\n    modifier onlyAlerter() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(ALERTER_ROLE, msg.sender)) revert OnlyAlerterError();\\n        _;\\n    }\\n\\n    /** SYSTEM ROLES */\\n\\n    modifier onlyVaultAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(VAULT_ACCESS_ROLE, msg.sender)) revert OnlyVaultAccessError();\\n        _;\\n    }\\n\\n    modifier onlyLiquidationAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(LIQUIDATION_ACCESS_ROLE, msg.sender)) revert OnlyLiquidationAccessError();\\n        _;\\n    }\\n\\n    modifier onlyMintAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(MINT_ACCESS_ROLE, msg.sender)) revert OnlyMintAccessError();\\n        _;\\n    }\\n\\n    modifier onlyRewardAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(REWARD_ACCESS_ROLE, msg.sender)) revert OnlyRewardAccessError();\\n        _;\\n    }\\n\\n    // syntax sugar under ACCESS_CONTROL_SINGLETON\\n    modifier onlyRole(bytes32 role) {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(role, msg.sender)) revert OnlyRoleError();\\n        _;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return ACCESS_CONTROL_SINGLETON.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x3553007ac782c0c5f2ecf3ca47b8b72d74b2cae35c34ffe2d030b968938b2b0d\",\"license\":\"BSL 1.1\"},\"contracts/periphery/contracts/interfaces/access-control/ISuAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\nimport \\\"../../access-control/SuAccessRoles.sol\\\";\\n\\n/**\\n * @notice Access control for contracts\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n **/\\ninterface ISuAccessControl is IAccessControlUpgradeable, IERC165Upgradeable {\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\\n}\\n\",\"keccak256\":\"0x25724ac502fd6418ccd38273b276de4b2fdecd023d723c5d80c9f0a27c407bcd\",\"license\":\"MIT\"},\"contracts/periphery/contracts/interfaces/oracle/ISuOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\n// solhint-disable compiler-version\\npragma solidity >=0.7.6;\\n\\ninterface ISuOracle {\\n    /**\\n     * @notice WARNING! Read this description very carefully!\\n     *     function getFiatPrice1e18(address asset) returns (uint256) that:\\n     *         basicAmountOfAsset * getFiatPrice1e18(asset) / 1e18 === $$ * 1e18\\n     *     in other words, it doesn't matter what's the erc20.decimals is,\\n     *     you just multiply token balance in basic units on value from oracle and get dollar amount multiplied on 1e18.\\n     *\\n     * different assets have different deviation threshold (errors)\\n     *     for wBTC it's <= 0.5%, read more https://data.chain.link/ethereum/mainnet/crypto-usd/btc-usd\\n     *     for other asset is can be larger based on particular oracle implementation.\\n     *\\n     * examples:\\n     *     market price of btc = $30k,\\n     *     for 0.1 wBTC the unit256 amount is 0.1 * 1e18\\n     *     0.1 * 1e18 * (price1e18 / 1e18) == $3000 == uint256(3000*1e18)\\n     *     => price1e18 = 30000 * 1e18;\\n     *\\n     *     market price of usdt = $0.97,\\n     *     for 1 usdt uint256 = 1 * 1e6\\n     *     so 1*1e6 * price1e18 / 1e18 == $0.97 == uint256(0.97*1e18)\\n     *     => 1*1e6 * (price1e18 / 1e18) / (0.97*1e18)   = 1\\n     *     =>  price1e18 = 0.97 * (1e18/1e6) * 1e18\\n     *\\n     *    assume market price of wBTC = $31,503.77, oracle error = $158\\n     *\\n     *     case #1: small amount of wBTC\\n     *         we have 0.0,000,001 wBTC that is worth v = $0.00315 \\u00b1 $0.00001 = 0.00315*1e18 = 315*1e13 \\u00b1 1*1e13\\n     *         actual balance on the asset b = wBTC.balanceOf() =  0.0000001*1e18 = 1e11\\n     *         oracle should return or = oracle.getFiatPrice1e18(wBTC) <=>\\n     *         <=> b*or = v => v/b = 315*1e13 / 1e11 = 315*1e2 \\u00b1 1e2\\n     *         error = or.error * b = 1e2 * 1e11 = 1e13 => 1e13/1e18 usd = 1e-5 = 0.00001 usd\\n     *\\n     *     case #2: large amount of wBTC\\n     *         v = 2,000,000 wBTC = $31,503.77 * 2m \\u00b1 158*2m = $63,007,540,000 \\u00b1 $316,000,000 = 63,007*1e24 \\u00b1 316*1e24\\n     *         for calc convenience we increase error on 0.05 and have v = 63,000*24 \\u00b1 300*1e24 = (630 \\u00b1 3)*1e26\\n     *         b = 2*1e6 * 1e18 = 2*1e24\\n     *         or = v/b = (630 \\u00b1 3)*1e26 / 2*1e24 = 315*1e2 \\u00b1 1.5*1e2\\n     *         error = or.error * b = 1.5*100 * 2*1e24 = 3*1e26 = 3*1e8*1e18 = $300,000,000 ~ $316,000,000\\n     *\\n     *     assume the market price of USDT = $0.97 \\u00b1 $0.00485,\\n     *\\n     *     case #3: little amount of USDT\\n     *         v = USDT amount 0.005 = 0.005*(0.97 \\u00b1 0.00485) = 0.00485*1e18 \\u00b1 0.00002425*1e18 = 485*1e13 \\u00b1 3*1e13\\n     *         we rounded error up on (3000-2425)/2425 ~= +24% for calculation convenience.\\n     *         b = USDT.balanceOf() = 0.005*1e6 = 5*1e3\\n     *         b*or = v => or = v/b = (485*1e13 \\u00b1 3*1e13) / 5*1e3 = 970*1e9 \\u00b1 6*1e9\\n     *         error = 6*1e9 * 5*1e3 / 1e18 = 30*1e12/1e18 = 3*1e-5 = $0,00005\\n     *\\n     *     case #4: lot of USDT\\n     *         v = we have 100,000,000,000 USDT = $97B = 97*1e9*1e18 \\u00b1 0.5*1e9*1e18\\n     *         b = USDT.balanceOf() = 1e11*1e6 = 1e17\\n     *         or = v/b = (97*1e9*1e18 \\u00b1 0.5*1e9*1e18) / 1e17 = 970*1e9 \\u00b1 5*1e9\\n     *         error = 5*1e9 * 1e17 = 5*1e26 = 0.5 * 1e8*1e18\\n     *\\n     * @param asset - address of erc20 token contract\\n     * @return usdPrice1e18 such that asset.balanceOf() * getFiatPrice1e18(asset) / 1e18 == $$ * 1e18\\n     **/\\n    function getFiatPrice1e18(address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa56b9cc86ef5935efecc276e6a3188d518f1a99cad960083a8de35849c997687\",\"license\":\"UNLICENSED\"},\"contracts/reward/RewardChefV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\\\";\\nimport \\\"../interfaces/IRewardChefV2.sol\\\";\\nimport \\\"../periphery/contracts/access-control/SuAuthenticated.sol\\\";\\nimport \\\"../periphery/contracts/interfaces/oracle/ISuOracle.sol\\\";\\n\\n/**\\n * @title RewardChefV2\\n * @dev See IRewardChefV2 interface for full details.\\n**/\\ncontract RewardChefV2 is IRewardChefV2, SuAuthenticated {\\n    using SafeCastUpgradeable for uint256;\\n    using SafeCastUpgradeable for uint128;\\n    using SafeCastUpgradeable for uint64;\\n    using SafeCastUpgradeable for int256;\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.UintSet;\\n\\n    /**\\n     * @notice Info of each MCV2 pool. SuDAO: instead of pool Ids (pid) we use address of the asset directly.\\n     * Also, there aren't just LPs but regular assets as well\\n     **/\\n    mapping(address => PoolInfo) public poolInfo;\\n\\n    /**\\n     * @notice Info of each user that stakes tokens. userInfo[_asset][_user]\\n     **/\\n    mapping(address => mapping(address => UserInfo)) public userInfo;\\n\\n    uint256 public totalAllocPoint;\\n\\n    /**\\n     * @notice Set of reward-able assets\\n     **/\\n    EnumerableSetUpgradeable.AddressSet private assetSet;\\n    uint256 private constant ACC_REWARD_TOKEN_PRECISION = 1e12; // TODO*: make it 1e18? check values overflow\\n\\n    // ==========================REWARDER================================\\n    IERC20Upgradeable public REWARD_TOKEN;\\n    ISuOracle public ORACLE;\\n    uint256 public rewardPerBlock;\\n    uint256 public rewardEndBlock;\\n\\n    function refillReward(uint256 amount, uint64 endBlock) public onlyAdmin {\\n        if (endBlock <= block.number) revert BadEndBlockForRefill();\\n        updateAllPools(); // TODO: gas optimization\\n\\n        REWARD_TOKEN.safeTransferFrom(msg.sender, address(this), amount);\\n        uint256 rewardLeftAmount;\\n        // if there are active rewards leftovers\\n        if (rewardEndBlock > 0) {\\n            // if we call refillReward before old endBlock ends\\n            if (block.number < rewardEndBlock) {\\n                rewardLeftAmount = rewardPerBlock * (rewardEndBlock - block.number);\\n            } else {\\n                // if we start the new reward interval that has nothing in common with the old noe\\n                rewardLeftAmount = 0;\\n            }\\n        }\\n        rewardPerBlock = (rewardLeftAmount + amount) / (endBlock - block.number);\\n        rewardEndBlock = endBlock;\\n    }\\n\\n    function rewardsBetweenBlocks(uint256 startBlock, uint256 endBlock) public view returns (uint256) {\\n        // if all rewards were allocation before our range - then answer is 0\\n        if (rewardEndBlock <= startBlock) {\\n            return 0;\\n        } else {\\n            // if rewards allocates on the whole range, than just calc rectangle area\\n            if (endBlock < rewardEndBlock) {\\n                return (endBlock - startBlock) * rewardPerBlock;\\n            } else {\\n                // other-vice, rewards end its allocation during our rage, so we have to calc only until rewardEndBlock\\n                return (rewardEndBlock - startBlock) * rewardPerBlock;\\n            }\\n        }\\n    }\\n\\n    /* ==========================LOCKUP LOGIC========================================= */\\n    mapping(uint256 => uint256) public multiplicator1e18ForLockupPeriod;\\n    EnumerableSetUpgradeable.UintSet private possibleLockupPeriodsSeconds;\\n\\n    function getPossibleLockupPeriodsSeconds() external view returns (ILockupPeriod[] memory) {\\n        uint256[] memory periods = possibleLockupPeriodsSeconds.values();\\n        uint256 len = periods.length;\\n        ILockupPeriod[] memory lockupPeriods = new ILockupPeriod[](len);\\n        for (uint256 i = 0; i < len; ++i) {\\n            lockupPeriods[i] = ILockupPeriod({\\n                lockupPeriodSeconds : periods[i],\\n                multiplicator1e18 : multiplicator1e18ForLockupPeriod[periods[i]]\\n            });\\n        }\\n        return lockupPeriods;\\n    }\\n\\n    function setPossibleLockupPeriodsSeconds(uint256 lockupPeriodSeconds, uint256 multiplicator1e18) external onlyDAO {\\n        if (lockupPeriodSeconds == 0) revert ZeroLockupPeriod();\\n        multiplicator1e18ForLockupPeriod[lockupPeriodSeconds] = multiplicator1e18;\\n        if (multiplicator1e18 == 0) {\\n            possibleLockupPeriodsSeconds.remove(lockupPeriodSeconds);\\n        } else {\\n            possibleLockupPeriodsSeconds.add(lockupPeriodSeconds);\\n        }\\n    }\\n    /* =================================================================== */\\n\\n    /**\\n      * @notice _rewardToken The REWARD_TOKEN token contract address.\\n     **/\\n    function initialize(address _authControl, IERC20Upgradeable _rewardToken, ISuOracle _oracle) public initializer {\\n        __suAuthenticatedInit(_authControl);\\n\\n        REWARD_TOKEN = _rewardToken;\\n        ORACLE = _oracle;\\n    }\\n\\n    function add(uint256 allocPoint, address _asset) public onlyAdmin {\\n        if (poolInfo[_asset].lastRewardBlock != 0) revert PoolExist();\\n\\n        totalAllocPoint = totalAllocPoint + allocPoint;\\n        assetSet.add(_asset);\\n\\n        poolInfo[_asset] = PoolInfo({\\n            allocPoint : allocPoint.toUint64(),\\n            lastRewardBlock : block.number.toUint64(),\\n            accSushiPerShare : 0,\\n            lpSupply : 0\\n        });\\n\\n        emit LogPoolAddition(_asset, allocPoint);\\n    }\\n\\n    function set(address _asset, uint256 _allocPoint) public onlyAdmin {\\n        if (poolInfo[_asset].lastRewardBlock == 0) revert PoolNotExist();\\n        // TODO: why was it in legal in MVC2 to call this function without mandatory update method?\\n        updatePool(_asset);\\n\\n        uint64 oldAllocPoint = poolInfo[_asset].allocPoint;\\n        totalAllocPoint = totalAllocPoint - oldAllocPoint + _allocPoint;\\n        poolInfo[_asset].allocPoint = _allocPoint.toUint64();\\n        if (_allocPoint == 0) {\\n            // we don't need to call updatePool(_asset) again\\n            // because the result of the second time call in the same block doesn't change anything\\n            assetSet.remove(_asset);\\n        } else if (oldAllocPoint == 0) {\\n            // when pool exists, but asset was removed from assetSet\\n            assetSet.add(_asset);\\n        }\\n        emit LogSetPool(_asset, _allocPoint);\\n    }\\n\\n    function pendingSushi(address _asset, address _user) public view returns (uint256 pending) {\\n        PoolInfo memory pool = poolInfo[_asset];\\n        UserInfo memory user = userInfo[_asset][_user];\\n        uint256 accSushiPerShare = pool.accSushiPerShare;\\n        // we don't have real balances anymore, so instead of lpSupply = lpTokens[_pid].balanceOf(address(this));\\n        // we use virtual total balance\\n        uint256 lpSupply = poolInfo[_asset].lpSupply;\\n        if (block.number > pool.lastRewardBlock && lpSupply != 0 && totalAllocPoint != 0) {\\n            // then we need to get updated accSushiPerShare, similar as in updatePool\\n            // totalSushiReward - how much reward were minted since last update pool.lastRewardBlock\\n            uint256 totalSushiReward = rewardsBetweenBlocks(pool.lastRewardBlock, block.number);\\n            uint256 poolSushiReward = totalSushiReward * pool.allocPoint / totalAllocPoint;\\n            // account it into share value\\n            accSushiPerShare = accSushiPerShare + (poolSushiReward * ACC_REWARD_TOKEN_PRECISION / lpSupply);\\n        }\\n        pending = (\\n            (user.amount * accSushiPerShare / ACC_REWARD_TOKEN_PRECISION).toInt256() - user.rewardDebt\\n        ).toUint256();\\n    }\\n\\n    function updatePool(address asset) public returns (PoolInfo memory pool) {\\n        pool = poolInfo[asset];\\n        if (block.number > pool.lastRewardBlock) {\\n            uint256 lpSupply = pool.lpSupply;\\n            if (lpSupply > 0 && pool.allocPoint > 0) {\\n                // calc how much rewards are minted since pool.lastRewardBlock for the pool\\n                uint256 totalSushiReward = rewardsBetweenBlocks(pool.lastRewardBlock, block.number);\\n                uint256 poolSushiReward = totalSushiReward * pool.allocPoint / totalAllocPoint;\\n                pool.accSushiPerShare = pool.accSushiPerShare +\\n                            (poolSushiReward * ACC_REWARD_TOKEN_PRECISION / lpSupply).toUint128();\\n            }\\n            pool.lastRewardBlock = block.number.toUint64();\\n            poolInfo[asset] = pool;\\n            emit LogUpdatePool(asset, pool.lastRewardBlock, lpSupply, pool.accSushiPerShare);\\n        }\\n    }\\n\\n    function updateAllPools() public {\\n        address[] memory assets = assetSet.values();\\n        uint256 len = assets.length;\\n        for (uint256 i = 0; i < len; ++i) {\\n            updatePool(assets[i]);\\n        }\\n    }\\n\\n    function increaseAmount(\\n        address asset,\\n        address to,\\n        uint256 amountEDecimal,\\n        uint256 lockupPeriodSeconds\\n    ) public onlyRewardAccess {\\n        PoolInfo memory pool = updatePool(asset);\\n        UserInfo storage user = userInfo[asset][to];\\n\\n        if (user.lockupPeriodSeconds == 0) {// it means there's no deposit yet\\n            user.multiplicator1e18 = multiplicator1e18ForLockupPeriod[lockupPeriodSeconds];\\n            user.lockupPeriodSeconds = lockupPeriodSeconds;\\n            user.lockupStartTimestamp = block.timestamp;\\n        } else if (user.lockupPeriodSeconds != lockupPeriodSeconds) revert DifferentLockup();\\n\\n        if (user.multiplicator1e18 == 0) revert ZeroMultiplicator();\\n\\n        // Effects\\n        // user.amount = user.amount + amountEDecimal;\\n        uint256 additionalAmount = amountEDecimal * user.multiplicator1e18 / 1e18;\\n        user.amount = user.amount + additionalAmount;\\n        user.rewardDebt = user.rewardDebt +\\n                    (additionalAmount * pool.accSushiPerShare / ACC_REWARD_TOKEN_PRECISION).toInt256();\\n        // we don't need, since the balances are virtual\\n        // lpToken[pid].safeTransferFrom(msg.sender, address(this), amount);\\n        // but we need to calc total supply of virtual tokens\\n        pool.lpSupply = pool.lpSupply + additionalAmount;\\n        poolInfo[asset] = pool;\\n\\n        emit VirtualDeposit(to, asset, additionalAmount);\\n    }\\n\\n    function decreaseAmount(address asset, address to, uint256 amountEDecimal) public onlyRewardAccess {\\n        PoolInfo memory pool = updatePool(asset);\\n        UserInfo storage user = userInfo[asset][to];\\n\\n        if (user.multiplicator1e18 == 0) revert ZeroMultiplicator();\\n\\n        // if we decreasing before time-lock is over => there is penalty\\n        uint256 penalty = block.timestamp < user.lockupStartTimestamp + user.lockupPeriodSeconds\\n            ? getDecreaseAmountRewardPenalty(asset, to, amountEDecimal)\\n            : 0;\\n\\n        // Effects\\n        uint256 subtractAmount = amountEDecimal * user.multiplicator1e18 / 1e18;\\n        user.rewardDebt = user.rewardDebt -\\n                    (subtractAmount * pool.accSushiPerShare / ACC_REWARD_TOKEN_PRECISION).toInt256() +\\n                            penalty.toInt256();\\n        user.amount = user.amount - subtractAmount;\\n\\n        if (user.amount == 0 && user.rewardDebt == 0) {\\n            // Reset lockupPeriod\\n            user.lockupStartTimestamp = block.timestamp;\\n            user.lockupPeriodSeconds = 0;\\n            user.multiplicator1e18 = 0;\\n        }\\n\\n        pool.lpSupply = pool.lpSupply - subtractAmount;\\n        poolInfo[asset] = pool;\\n\\n        emit VirtualWithdraw(to, asset, subtractAmount);\\n    }\\n\\n    function getDecreaseAmountRewardPenalty(\\n        address asset, address to, uint256 amountEDecimal\\n    ) public view returns (uint256) {\\n        UserInfo memory user = userInfo[asset][to];\\n\\n        if (user.multiplicator1e18 == 0) {\\n            return 0;\\n        }\\n\\n        uint256 subtractAmount = amountEDecimal * user.multiplicator1e18 / 1e18;\\n\\n        uint256 pending = pendingSushi(asset, to);\\n        return pending * subtractAmount / user.amount;\\n    }\\n\\n    function harvest(address asset, address to, uint256 newLockupPeriodSeconds) public {\\n        PoolInfo memory pool = updatePool(asset);\\n        UserInfo storage user = userInfo[asset][msg.sender];\\n\\n        if (user.lockupStartTimestamp + user.lockupPeriodSeconds > block.timestamp) revert HarvestBeforeLockup();\\n        if (user.multiplicator1e18 == 0) revert ZeroMultiplicator();\\n\\n        int256 accumulatedSushi = (user.amount * pool.accSushiPerShare / ACC_REWARD_TOKEN_PRECISION).toInt256();\\n        uint256 _pendingSushi = (accumulatedSushi - user.rewardDebt).toUint256();\\n\\n        // Effects\\n        user.rewardDebt = accumulatedSushi;\\n        // accumulatedSushi = user.rewardDebt + _pendingSushi;\\n\\n        // Interactions\\n        if (_pendingSushi > 0) {\\n            REWARD_TOKEN.safeTransfer(to, _pendingSushi);\\n        }\\n\\n        // Reset lockupPeriod\\n        user.lockupStartTimestamp = block.timestamp;\\n        // it's possible to remove code duplicates by using signed amount, but for simplicity I'll leave as it is\\n        uint256 newMultiplicator1e18 = multiplicator1e18ForLockupPeriod[newLockupPeriodSeconds];\\n        if (newMultiplicator1e18 == 0) revert ZeroMultiplicator();\\n        if (user.multiplicator1e18 < newMultiplicator1e18) {\\n            // since multiplicator increases, we need to increase amount\\n            uint256 additionalAmount = user.amount * newMultiplicator1e18 / user.multiplicator1e18 - user.amount;\\n\\n            user.amount = user.amount + additionalAmount;\\n            user.rewardDebt = user.rewardDebt +\\n                        (additionalAmount * pool.accSushiPerShare / ACC_REWARD_TOKEN_PRECISION).toInt256();\\n        } else if (user.multiplicator1e18 > newMultiplicator1e18) {\\n            uint256 subtractAmount = user.amount - user.amount * newMultiplicator1e18 / user.multiplicator1e18;\\n\\n            user.rewardDebt = user.rewardDebt -\\n                        (subtractAmount * pool.accSushiPerShare / ACC_REWARD_TOKEN_PRECISION).toInt256();\\n            user.amount = user.amount - subtractAmount;\\n        }\\n        user.multiplicator1e18 = newMultiplicator1e18;\\n\\n        emit Harvest(msg.sender, asset, _pendingSushi);\\n    }\\n\\n    function resetAmount(address asset, address to) public {\\n        PoolInfo storage pool = poolInfo[asset];\\n        UserInfo storage user = userInfo[asset][msg.sender];\\n\\n        uint256 userAmount = user.amount;\\n        uint256 userLockupPeriodSeconds = user.lockupPeriodSeconds;\\n\\n        pool.lpSupply = pool.lpSupply - userAmount;\\n        poolInfo[asset] = pool;\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n\\n        // Reset lockupPeriod\\n        user.lockupStartTimestamp = block.timestamp;\\n        user.lockupPeriodSeconds = 0;\\n        user.multiplicator1e18 = 0;\\n\\n        emit ResetAmount(msg.sender, asset, to, userAmount, userLockupPeriodSeconds);\\n    }\\n\\n    /* ================================VIEW METHODS====================================== */\\n\\n    function getPoolApr(address asset) public view returns (uint256) {\\n        // We use require to directly show this messages in frontend\\n        /* solhint-disable custom-errors */\\n        require(poolInfo[asset].lpSupply != 0, \\\"RewardChef: Pool doesn't have liquidity\\\");\\n        require(totalAllocPoint != 0, \\\"RewardChef: Total allocation point is 0\\\");\\n        require(rewardEndBlock > block.number, \\\"RewardChef: Vesting is already finished\\\");\\n        /* solhint-enable custom-errors */\\n\\n        uint256 rewardPerBlockForPool = rewardPerBlock * poolInfo[asset].allocPoint / totalAllocPoint;\\n        uint256 rewardTokenPrice = ORACLE.getFiatPrice1e18(address(REWARD_TOKEN));\\n        uint256 usdRewardYearForPool = rewardPerBlockForPool * 4 * 60 * 24 * 366 * rewardTokenPrice;\\n        // TODO: fix decimals and unify oracle answer\\n        uint256 decimals = IERC20Metadata(asset).decimals();\\n        uint256 usdValuePool = ORACLE.getFiatPrice1e18(asset) * poolInfo[asset].lpSupply / 10 ** decimals;\\n        return usdRewardYearForPool / usdValuePool;\\n    }\\n\\n    function getHarvestLockupEndTimestamp(address _asset, address _user) public view returns (uint256) {\\n        UserInfo memory user = userInfo[_asset][_user];\\n\\n        return user.lockupStartTimestamp + user.lockupPeriodSeconds;\\n    }\\n}\\n\",\"keccak256\":\"0xd3b5cf0d38d169f59c382e16c844fd1ca98a49bcf613cd80bbbd3e1ea5e29ea4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657612c31908161001c8239f35b600080fdfe608080604052600436101561002d575b50361561001b57600080fd5b60405163ccc0891360e01b8152600490fd5b600090813560e01c90816301ffc9a714611baf5750806303ee9f2214611b86578063112e1400146118c7578063134a02dd1461189057806314c376dc146118555780631c656c3914611828578063358764761461142b578063392c0ce7146113fe5780634030815e146113d157806341fbb050146113a857806343070b7a14611373578063438280dd146113385780634c9a55501461129457806356d8be56146112675780636338e4d71461123a5780636f16cbf71461117857806371d0fb411461113d57806375b238fc1461112157806376b5070c146110ec5780638e5313e0146110b15780639077beac14610ff5578063ab2a2a8214610fcc578063aca345ee14610fa3578063ada9e5ad14610d39578063af368fbd14610c1d578063bb497dcc14610bff578063bbdc9531146107c7578063cf13340414610728578063d4796d12146102ad578063dc97e84e14610272578063e6bc046114610239578063e9c2651814610210578063f3f481df146101d75763fbfa77cf0361000f57346101d457806003193601126101d4576041546040516001600160a01b039091168152602090f35b80fd5b50346101d45760203660031901126101d4576020906040906001600160a01b036101ff611c38565b168152603483522054604051908152f35b50346101d457806003193601126101d4576020604051600080516020612bdc8339815191528152f35b50346101d45760203660031901126101d4576020906040906001600160a01b03610261611c38565b168152603583522054604051908152f35b50346101d457806003193601126101d45760206040517f9a9aef7c1247d5fc769b0185c052913e39673da29a880317dfd20ebf86f26a498152f35b50346101d45760403660031901126101d4576102c7611c38565b6102cf611c4e565b603854604051631ce4b4a760e01b81526020916001600160a01b039190821690838180610300888a60048401611d10565b0381855afa9081156106de5787916106fb575b506106e957816039541683604051809263134a02dd60e01b8252818061033d8a8c60048401611d10565b03915afa9081156106de5787916106b1575b501561069f578086913b156106875781604051809263c640752d60e01b825281838161037f8b8d60048401611d10565b03925af180156105795761068b575b508160385416803b1561068757816040518092636a3cb68960e11b82528183816103bc8b8d60048401611d10565b03925af1801561057957610673575b506038546040516334e3b77960e01b8152939083168185806103f1898b60048401611d10565b0381845afa948515610668578395610635575b50604051636aee125d60e11b815295828780610424848c60048401611d10565b0381855afa96871561062a5784976105f7575b5060405163f084843d60e01b8152838180610456858d60048401611d10565b0381865afa9384156105ec5785946105b4575b5050813b156105b05783918883889361049a60405197889687958694636f70e66f60e01b8652309160048701611dd3565b03925af1801561057957610598575b5050600582028281046005148315171561058457906104da6104d26103e888959404809461223f565b923387612ae0565b6104e98282603a541687612ae0565b603a5416803b1561057557838391610519938360405180968195829463fb31318760e01b84528c60048501611e06565b03925af1801561057957610561575b50507f518c4e18971712e9ead4b0494dcf1bfc39d789cf7622ddfc960c7d62661512da9161055b60405192839283612ac5565b0390a180f35b61056a90611cc4565b610575578238610528565b8280fd5b6040513d84823e3d90fd5b634e487b7160e01b86526011600452602486fd5b6105a190611cc4565b6105ac5784386104a9565b8480fd5b8380fd5b819550809294503d83116105e5575b6105cd8183611ced565b810103126105e057879251913880610469565b600080fd5b503d6105c3565b6040513d87823e3d90fd5b83809298508195503d8311610623575b6106118183611ced565b810103126105e0578792519538610437565b503d610607565b6040513d86823e3d90fd5b82809296508194503d8311610661575b61064f8183611ced565b810103126105e0578691519338610404565b503d610645565b6040513d85823e3d90fd5b61067c90611cc4565b6105ac5784386103cb565b5080fd5b61069490611cc4565b6105ac57843861038e565b604051632066819b60e21b8152600490fd5b6106d19150843d86116106d7575b6106c98183611ced565b810190611d2a565b3861034f565b503d6106bf565b6040513d89823e3d90fd5b60405163fa5af4cd60e01b8152600490fd5b90508381813d8311610721575b6107128183611ced565b810103126105e0575138610313565b503d610708565b50346101d45760203660031901126101d457603354604051632474521560e21b8152600080516020612bdc833981519152600482015233602482015290602090829060449082906001600160a01b03165afa9081156105795782916107a9575b50156107975760043560365580f35b60405163599a6c3360e11b8152600490fd5b6107c1915060203d81116106d7576106c98183611ced565b38610788565b50346101d45760603660031901126101d4576107e1611c38565b604435906024356107f0611d7d565b60018060a01b03908160405416604051635b14f18360e01b8152808486169283600483015281602460209485935afa908115610aa6578891610be2575b50610bd0578590846041541696604051631ce4b4a760e01b8152828180610858338c60048401611d10565b03818c5afa908115610b21578a91610ba3575b506106e957889760405163f084843d60e01b928382528482806108938d339060048401611d10565b0381865afa918215610b98578b92610b66575b508110610b5e575b5060405163034c188b60e41b8152908382806108cf88338e60048501611d5b565b0381845afa918215610b21578a92610b2c575b50803b15610b055789856109149289838d60405196879586948593636f70e66f60e01b85523390339060048701611dd3565b03925af1908115610b21578a91610b09575b50506109323389611f2d565b8660415416803b15610b055760405163628a468360e01b8152918a918391829084908290610965908b3360048501611e06565b03925af1908115610ae6578991610af1575b5050856041541690604051908152828180610996338c60048401611d10565b0381855afa908115610ae6578991610ab5575b50610a40575b506040519384528301527fa702ae6024e8b4c2b0eb162b1453dacb93cf6922f5a2d7236faed898c21148f860403393a360425416803b15610a3c57604051632ed56dff60e21b81529183918391829084908290610a1190339060048401611d10565b03925af1801561057957610a28575b506001805580f35b610a3190611cc4565b6101d4578038610a20565b5050fd5b803b15610ab15760405163c640752d60e01b81529088908290818381610a6a338e60048401611d10565b03925af1908115610aa6578891610a8e575b5050610a883387611e6d565b386109af565b610a9790611cc4565b610aa2578638610a7c565b8680fd5b6040513d8a823e3d90fd5b8780fd5b809950838092503d8311610adf575b610ace8183611ced565b810103126105e057889751386109a9565b503d610ac4565b6040513d8b823e3d90fd5b610afa90611cc4565b610ab1578738610977565b8980fd5b610b1290611cc4565b610b1d578838610926565b8880fd5b6040513d8c823e3d90fd5b995090508289813d8111610b57575b610b458183611ced565b810103126105e05789985190386108e2565b503d610b3b565b9350386108ae565b9a509050838a813d8111610b91575b610b7f8183611ced565b810103126105e0578a995190386108a6565b503d610b75565b6040513d8d823e3d90fd5b90508281813d8311610bc9575b610bba8183611ced565b810103126105e057513861086b565b503d610bb0565b604051631785c68160e01b8152600490fd5b610bf99150823d84116106d7576106c98183611ced565b3861082d565b50346101d457806003193601126101d4576020603654604051908152f35b50346101d45760403660031901126101d457610c37611c38565b90610c40611c4e565b603d546040516334e3b77960e01b81526001600160a01b0390911693909291602091828580610c73858560048401611d10565b0381895afa94851561062a578495610d06575b5060405163f084843d60e01b8152958392879283918291610cab919060048401611d10565b03915afa918215610cfa5791610cca575b604080945051928352820152f35b80915083813d8311610cf3575b610ce18183611ced565b810103126105e0576040925190610cbc565b503d610cd7565b604051903d90823e3d90fd5b919094508282813d8311610d32575b610d1f8183611ced565b810103126105e057905193610cab610c86565b503d610d15565b50346101d45760c03660031901126101d457610d53611c38565b6044359060643560018060a01b039283603354169060405194632474521560e21b9485875286600080516020612bdc8339815191529485600483015233602483015281604460209a8b935afa908115610ae6578991610f86575b501561079757878260375416803b1561068757816040518092639fea3e0760e01b8252818381610de66084356024358b60048501611e06565b03925af1801561057957610f72575b50506044878360335416604051928380928b82528960048301523360248301525afa908115610ae6578991610f55575b50156107975782158015610f44575b610f32578116918288526034875260408820556044868260335416604051928380928a82528860048301523360248301525afa908115610aa6578891610f15575b50156107975783158015610f01575b610eef578593604492885260358552604088205560335416936040519485938492835260048301523360248301525afa918215610668578392610ed2575b5050156107975760a43560365580f35b610ee89250803d106106d7576106c98183611ced565b3880610ec2565b604051630906beff60e11b8152600490fd5b508187526034865260408720548410610e84565b610f2c9150873d89116106d7576106c98183611ced565b38610e75565b604051636ae75f5b60e01b8152600490fd5b50670de0b6b3a76400008311610e34565b610f6c9150883d8a116106d7576106c98183611ced565b38610e25565b610f7b90611cc4565b610ab1578738610df5565b610f9d9150883d8a116106d7576106c98183611ced565b38610dad565b50346101d457806003193601126101d4576037546040516001600160a01b039091168152602090f35b50346101d457806003193601126101d4576042546040516001600160a01b039091168152602090f35b50346101d45760403660031901126101d45761100f611c38565b6024359060018060a01b039060446020836033541660405192838092632474521560e21b8252600080516020612bdc83398151915260048301523360248301525afa9081156105ec578591611093575b50156107975782158015611082575b610f32571682526034602052604082205580f35b50670de0b6b3a7640000831161106e565b6110ab915060203d81116106d7576106c98183611ced565b3861105f565b50346101d457806003193601126101d45760206040517fe453bacb314e78dcd5192e6b1a2b1f0e7c76e92f6b7e429a6a90f04e39db3b768152f35b50346101d45760403660031901126101d457602061111961110b611c38565b611113611c4e565b9061237a565b604051908152f35b50346101d457806003193601126101d457602090604051908152f35b50346101d457806003193601126101d45760206040517f880a91047114272656e533301261260c75e4d11543ac7303d6fe4204579ec7278152f35b50346101d45760403660031901126101d457611192611c38565b6024359060018060a01b039060446020836033541660405192838092632474521560e21b8252600080516020612bdc83398151915260048301523360248301525afa9081156105ec57859161121c575b50156107975782158015611205575b610eef571682526035602052604082205580f35b5081811684526034602052604084205483106111f1565b611234915060203d81116106d7576106c98183611ced565b386111e2565b50346101d45760403660031901126101d4576020611119611259611c38565b611261611c4e565b90612614565b50346101d45760403660031901126101d4576020611119611286611c38565b61128e611c4e565b9061224c565b50346101d45760403660031901126101d4576112ea9060206112b4611c38565b6112bc611c4e565b603d54604051631ce4b4a760e01b81529586936001600160a01b039092169284928392919060048401611d10565b03915afa908115610cfa5790611306575b602090604051908152f35b506020813d8211611330575b8161131f60209383611ced565b810103126105e057602090516112fb565b3d9150611312565b50346101d457806003193601126101d45760206040517f39f61ca2a1a28fee144218173ec637b649a353e4026b2738c673800e5bf1437b8152f35b50346101d45760803660031901126101d4576020611119611392611c38565b61139a611c4e565b90606435916044359161284c565b50346101d457806003193601126101d457603c546040516001600160a01b039091168152602090f35b50346101d45760403660031901126101d45760206111196113f0611c38565b6113f8611c4e565b9061209f565b50346101d45760403660031901126101d457602061111961141d611c38565b611425611c4e565b90612190565b50346101d45760e03660031901126101d457611445611c38565b61144d611c4e565b6044356001600160a01b03811681036105e057606435926001600160a01b03841684036105e057608435926001600160a01b03841684036105e05760a435906001600160a01b03821682036105e05760c435916001600160a01b03831683036105e05787549560ff8760081c16159687809861181b575b8015611804575b156117a85760ff1981166001178a5587611797575b506001600160a01b038616158015611786575b6116fc5788549761150960ff8a60081c16611c64565b61151860ff8a60081c16611c64565b6001805561152b60ff8a60081c16611c64565b6040516301f74f9160e11b81526020816004816001600160a01b038b165afa908115610b98578b9161173f575b506024906020906001600160a01b031661157860088d901c60ff16611c64565b603380546001600160a01b031916821790556040516301ffc9a760e01b8152637965db0b60e01b600482015292839182905afa908115610b98578b91611720575b501561170e57603780546001600160a01b0319166001600160a01b038816179055674563918244f400006036556115f660088a901c60ff16611c64565b603980546001600160a01b031990811630179091556038805482166001600160a01b0389811691909117909155603a8054831693821693909317909255603b8054821693831693909317909255603c80549092169281169290921790551680156116fc57603e80546001600160a01b03199081163017909155603d805482166001600160a01b03958616908117909155603f805483169390931790925560408054821693851693909317909255604180548316909117905560428054909116929091169190911790556116c7575080f35b61ff00191681557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a180f35b6040516350dd03f760e11b8152600490fd5b6040516384d942fd60e01b8152600490fd5b611739915060203d6020116106d7576106c98183611ced565b386115b9565b90506020813d60201161177e575b8161175a60209383611ced565b8101031261177a57516001600160a01b038116810361177a576020611558565b8a80fd5b3d915061174d565b506001600160a01b038316156114f3565b61ffff1916610101178955386114e0565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b1580156114cb5750600160ff8216146114cb565b50600160ff8216106114c4565b50346101d45760403660031901126101d4576020611119611847611c38565b61184f611c4e565b90612a22565b50346101d457806003193601126101d45760206040517fe965846df3dd5b1dfa65f58e31477079e90140e0908b6dd31b5aead5a57cf3658152f35b50346101d45760403660031901126101d45760206118bd6118af611c38565b6118b7611c4e565b90611f67565b6040519015158152f35b50346101d45760803660031901126101d4576118e1611c38565b60443591906024356118f1611d7d565b60018060a01b0390816040541660405195635b14f18360e01b8752868486169283600483015281602460209a8b935afa9081156106de578791611b69575b50610bd05780158080611b61575b611b4f5760405163313ce56760e01b81528881600481875afa908115610aa65760129160ff918a91611b22575b501611611b105715611a3c5785968460415416803b15610ab157604051638340f54960e01b815290889082908183816119a88b338f60048501611d5b565b03925af1908115610aa6578891611a28575b50505b6119c73387611f2d565b6040519384528301527f6423b6056e64b3b29cb2d342362b47c26fa8d6877da27ea152354060df19b9bc60403393a360425416803b15610a3c57604051632ed56dff60e21b81529183918391829084908290610a1190339060048401611d10565b611a3190611cc4565b610aa25786386119ba565b82611ab5575b85968460415416803b15610ab15787809160846040518094819363fbf3773960e01b835289600484015233602484015288604484015260643560648401525af1908115610aa6578891611aa1575b5050611a9c3387611e6d565b6119bd565b611aaa90611cc4565b610aa2578638611a90565b836041541696873b15610aa257604051638340f54960e01b81529787908990818381611ae68a338e60048501611d5b565b03925af180156106de57611afc575b9650611a42565b959096611b0890611cc4565b948690611af5565b604051636a78e98160e11b8152600490fd5b611b4291508b3d8d11611b48575b611b3a8183611ced565b810190611d42565b3861196a565b503d611b30565b60405163fa95696160e01b8152600490fd5b50831561193d565b611b809150883d8a116106d7576106c98183611ced565b3861192f565b50346101d457806003193601126101d4576033546040516001600160a01b039091168152602090f35b9050346106875760203660031901126106875760043563ffffffff60e01b8116809103610575576033546301ffc9a760e01b83526004830191909152602090829060249082906001600160a01b03165afa9081156105795760209291611c1b575b506040519015158152f35b611c329150823d81116106d7576106c98183611ced565b38611c10565b600435906001600160a01b03821682036105e057565b602435906001600160a01b03821682036105e057565b15611c6b57565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b6001600160401b038111611cd757604052565b634e487b7160e01b600052604160045260246000fd5b601f909101601f19168101906001600160401b03821190821017611cd757604052565b6001600160a01b0391821681529116602082015260400190565b908160209103126105e0575180151581036105e05790565b908160209103126105e0575160ff811681036105e05790565b6001600160a01b03918216815291166020820152604081019190915260600190565b600260015414611d8e576002600155565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b6001600160a01b039182168152918116602083015290911660408201526060810191909152608081019190915260a00190565b604091949392606082019560018060a01b0316825260208201520152565b81810292918115918404141715611e3757565b634e487b7160e01b600052601160045260246000fd5b8115611e57570490565b634e487b7160e01b600052601260045260246000fd5b90611ecc6020611e7d838561209f565b9260018060a01b0394670de0b6b3a7640000611ea9600096888416885260348652604088205490611e24565b0495604154169060405180958194829363a6ea8b8760e01b845260048401611d10565b03915afa918215610cfa578092611ef9575b505011611ee757565b6040516330b58a9160e01b8152600490fd5b9091506020823d8211611f25575b81611f1460209383611ced565b810103126101d45750513880611ede565b3d9150611f07565b90611f379161209f565b8015159081611f5a575b50611f4857565b604051633fc1a63760e11b8152600490fd5b9050603654101538611f41565b90611f72818361209f565b91821561209757603d5460405163a6ea8b8760e01b81526020946001600160a01b039490928691839187169082908190611fb0908960048401611d10565b03915afa9081156120545760009161206a575b50801561206057670de0b6b3a764000080820291820403611e37578491611fe991611e4d565b603e5460405163e6bc046160e01b81529385166004850152909383916024918391165afa92831561205457600093612023575b5050101590565b8181949293943d831161204d575b61203b8183611ced565b810103126101d457505190388061201c565b503d612031565b6040513d6000823e3d90fd5b5050505050600090565b908582813d8311612090575b6120808183611ced565b810103126101d457505138611fc3565b503d612076565b505050600090565b6120d09060018060a01b0380603d54169360405180956334e3b77960e01b8252818060209788958860048401611d10565b03915afa93841561205457600094612161575b50603f54604051631735856760e31b81529282166004840152839183916024918391165afa91821561205457600092612130575b5050670de0b6b3a76400009161212c91611e24565b0490565b81819392933d831161215a575b6121478183611ced565b810103126101d45750518161212c612117565b503d61213d565b90938382813d8311612189575b6121788183611ced565b810103126101d457505192826120e3565b503d61216e565b61219a828261209f565b90811561209757603d5460405163f084843d60e01b81529360209285926001600160a01b031691839182916121d29160048401611d10565b03915afa9182156120545760009261220c575b50670de0b6b3a764000091828102928184041490151715611e375761220991611e4d565b90565b90916020823d8211612237575b8161222660209383611ced565b810103126101d457505190386121e5565b3d9150612219565b91908203918211611e3757565b90612257818361209f565b603e5460405163f3f481df60e01b81526001600160a01b038581166004830152946020949390928590839060249082908a165afa91821561205457600092612332575b5091670de0b6b3a76400006122b58695936122d89795611e24565b0495603d54169060405180968194829363a6ea8b8760e01b845260048401611d10565b03915afa90811561205457600091612306575b508091508211156122ff576122099161223f565b5050600090565b82813d831161232b575b61231a8183611ced565b810103126101d457505180386122eb565b503d612310565b90918582813d8311612362575b6123498183611ced565b810103126101d457505190670de0b6b3a764000061229a565b503d61233f565b60ff16604d8111611e3757600a0a90565b603d54604080516334e3b77960e01b8152936001600160a01b0393919290916004916020919086168288806123b28886898401611d10565b0381845afa978815612580576000986125d4575b5086603f541691865195631735856760e31b875284876024818c861697888b8301525afa9687156125c95760009761259a575b50861561258b57875163f084843d60e01b8152928592849283918291612421918b8401611d10565b03915afa90811561258057600091612553575b50855163313ce56760e01b815283818681865afa9081156125485761246c92916124669160009161252b575b50612369565b90611e24565b95670de0b6b3a764000096878102978189041490151715612516579060248392603e5416948751958693849263f3f481df60e01b84528301525afa93841561250c57506000936124d7575b5050916124cb6124d1926122099594611e24565b90611e4d565b9061223f565b8181949293943d8311612505575b6124ef8183611ced565b810103126101d4575051906124cb6122096124b7565b503d6124e5565b513d6000823e3d90fd5b601184634e487b7160e01b6000525260246000fd5b6125429150863d8811611b4857611b3a8183611ced565b38612460565b87513d6000823e3d90fd5b908382813d8311612579575b6125698183611ced565b810103126101d457505138612434565b503d61255f565b86513d6000823e3d90fd5b50505050505050505050600090565b90968582813d83116125c2575b6125b18183611ced565b810103126101d457505195386123f9565b503d6125a7565b88513d6000823e3d90fd5b90978382813d83116125fc575b6125eb8183611ced565b810103126101d457505196386123c6565b503d6125e1565b60ff166012039060ff8211611e3757565b603d546040805163a6ea8b8760e01b81526001600160a01b03949193600493602093919087169084848061264b86858b8401611d10565b0381855afa93841561254857600094612810575b50831561280257670de0b6b3a76400009384810290810485036127ed576024868a603e54169a8a519283809263e6bc046160e01b825287169d8e8d8301525afa9081156127e2576000916127b3575b506126b891611e4d565b84810294818604149015171561279e579184916126e99388518095819482936334e3b77960e01b84528b8401611d10565b03915afa90811561279357908391600091612763575b5061270a9192611e4d565b9484519384809263313ce56760e01b82525afa92831561250c575061220993926124cb9261274192600092612746575b5050612603565b612369565b61275c9250803d10611b4857611b3a8183611ced565b388061273a565b9182813d831161278c575b6127788183611ced565b810103126101d4575051829061270a6126ff565b503d61276e565b85513d6000823e3d90fd5b601186634e487b7160e01b6000525260246000fd5b908782813d83116127db575b6127c98183611ced565b810103126101d45750516126b86126ae565b503d6127bf565b89513d6000823e3d90fd5b601187634e487b7160e01b6000525260246000fd5b505050505050505060001990565b90938582813d8311612838575b6128278183611ced565b810103126101d4575051923861265f565b503d61281d565b91908201809211611e3757565b603d546040805163a6ea8b8760e01b815293959094600494602094936001600160a01b039081169390918681806128868d8a8d8401611d10565b0381885afa9081156127e2576000916129f3575b50906128a59161283f565b9788156129e457670de0b6b3a764000093848a02998a0485036129cf5782603e541699878a51809563e6bc046160e01b825289169c8d8c830152815a91602492fa9384156129c457908893929160009561298c575b506129239461290891611e4d565b968a518095819482936334e3b77960e01b84528d8401611d10565b03915afa9081156125485760009161295d575b50906129419161283f565b9181810291818304149015171561251657829161270a91611e4d565b908582813d8311612985575b6129738183611ced565b810103126101d4575051612941612936565b503d612969565b91938281969294963d83116129bd575b6129a68183611ced565b810103126101d457505192879290916129086128fa565b503d61299c565b8a513d6000823e3d90fd5b601188634e487b7160e01b6000525260246000fd5b50505050505050505060001990565b908782813d8311612a1b575b612a098183611ced565b810103126101d45750516128a561289a565b503d6129ff565b603d5460405163a6ea8b8760e01b8152929060209084906001600160a01b03168180612a52868860048401611d10565b03915afa92831561205457600093612a92575b50821561209757612a759161209f565b670de0b6b3a764000080830292830403611e375761220991611e4d565b90926020823d8211612abd575b81612aac60209383611ced565b810103126101d45750519138612a65565b3d9150612a9f565b6001600160a01b039091168152602081019190915260400190565b6040519182612b026020958683019363a9059cbb60e01b855260248401612ac5565b0392612b16601f1994858101835282611ced565b600092839283809351925af1913d15612bd2573d6001600160401b038111612bbe57612b4c8560405193601f8401160183611ced565b81528091843d92013e5b81612b8e575b5015612b655750565b6064906040519062461bcd60e51b82526004820152600260248201526114d560f21b6044820152fd5b80518015925083908315612ba6575b50505038612b5c565b612bb69350820181019101611d2a565b388281612b9d565b634e487b7160e01b83526041600452602483fd5b50506060612b5656fe3b5d4cc60d3ec3516ee8ae083bd60934f6eb2a6c54b1229985c41bfb092b2603a26469706673582212208631c1aae047a726652591b1b6073516dc3dd9cc2428d8335cc94ced99f39afc64736f6c63430008110033",
  "deployedBytecode": "0x608080604052600436101561002d575b50361561001b57600080fd5b60405163ccc0891360e01b8152600490fd5b600090813560e01c90816301ffc9a714611baf5750806303ee9f2214611b86578063112e1400146118c7578063134a02dd1461189057806314c376dc146118555780631c656c3914611828578063358764761461142b578063392c0ce7146113fe5780634030815e146113d157806341fbb050146113a857806343070b7a14611373578063438280dd146113385780634c9a55501461129457806356d8be56146112675780636338e4d71461123a5780636f16cbf71461117857806371d0fb411461113d57806375b238fc1461112157806376b5070c146110ec5780638e5313e0146110b15780639077beac14610ff5578063ab2a2a8214610fcc578063aca345ee14610fa3578063ada9e5ad14610d39578063af368fbd14610c1d578063bb497dcc14610bff578063bbdc9531146107c7578063cf13340414610728578063d4796d12146102ad578063dc97e84e14610272578063e6bc046114610239578063e9c2651814610210578063f3f481df146101d75763fbfa77cf0361000f57346101d457806003193601126101d4576041546040516001600160a01b039091168152602090f35b80fd5b50346101d45760203660031901126101d4576020906040906001600160a01b036101ff611c38565b168152603483522054604051908152f35b50346101d457806003193601126101d4576020604051600080516020612bdc8339815191528152f35b50346101d45760203660031901126101d4576020906040906001600160a01b03610261611c38565b168152603583522054604051908152f35b50346101d457806003193601126101d45760206040517f9a9aef7c1247d5fc769b0185c052913e39673da29a880317dfd20ebf86f26a498152f35b50346101d45760403660031901126101d4576102c7611c38565b6102cf611c4e565b603854604051631ce4b4a760e01b81526020916001600160a01b039190821690838180610300888a60048401611d10565b0381855afa9081156106de5787916106fb575b506106e957816039541683604051809263134a02dd60e01b8252818061033d8a8c60048401611d10565b03915afa9081156106de5787916106b1575b501561069f578086913b156106875781604051809263c640752d60e01b825281838161037f8b8d60048401611d10565b03925af180156105795761068b575b508160385416803b1561068757816040518092636a3cb68960e11b82528183816103bc8b8d60048401611d10565b03925af1801561057957610673575b506038546040516334e3b77960e01b8152939083168185806103f1898b60048401611d10565b0381845afa948515610668578395610635575b50604051636aee125d60e11b815295828780610424848c60048401611d10565b0381855afa96871561062a5784976105f7575b5060405163f084843d60e01b8152838180610456858d60048401611d10565b0381865afa9384156105ec5785946105b4575b5050813b156105b05783918883889361049a60405197889687958694636f70e66f60e01b8652309160048701611dd3565b03925af1801561057957610598575b5050600582028281046005148315171561058457906104da6104d26103e888959404809461223f565b923387612ae0565b6104e98282603a541687612ae0565b603a5416803b1561057557838391610519938360405180968195829463fb31318760e01b84528c60048501611e06565b03925af1801561057957610561575b50507f518c4e18971712e9ead4b0494dcf1bfc39d789cf7622ddfc960c7d62661512da9161055b60405192839283612ac5565b0390a180f35b61056a90611cc4565b610575578238610528565b8280fd5b6040513d84823e3d90fd5b634e487b7160e01b86526011600452602486fd5b6105a190611cc4565b6105ac5784386104a9565b8480fd5b8380fd5b819550809294503d83116105e5575b6105cd8183611ced565b810103126105e057879251913880610469565b600080fd5b503d6105c3565b6040513d87823e3d90fd5b83809298508195503d8311610623575b6106118183611ced565b810103126105e0578792519538610437565b503d610607565b6040513d86823e3d90fd5b82809296508194503d8311610661575b61064f8183611ced565b810103126105e0578691519338610404565b503d610645565b6040513d85823e3d90fd5b61067c90611cc4565b6105ac5784386103cb565b5080fd5b61069490611cc4565b6105ac57843861038e565b604051632066819b60e21b8152600490fd5b6106d19150843d86116106d7575b6106c98183611ced565b810190611d2a565b3861034f565b503d6106bf565b6040513d89823e3d90fd5b60405163fa5af4cd60e01b8152600490fd5b90508381813d8311610721575b6107128183611ced565b810103126105e0575138610313565b503d610708565b50346101d45760203660031901126101d457603354604051632474521560e21b8152600080516020612bdc833981519152600482015233602482015290602090829060449082906001600160a01b03165afa9081156105795782916107a9575b50156107975760043560365580f35b60405163599a6c3360e11b8152600490fd5b6107c1915060203d81116106d7576106c98183611ced565b38610788565b50346101d45760603660031901126101d4576107e1611c38565b604435906024356107f0611d7d565b60018060a01b03908160405416604051635b14f18360e01b8152808486169283600483015281602460209485935afa908115610aa6578891610be2575b50610bd0578590846041541696604051631ce4b4a760e01b8152828180610858338c60048401611d10565b03818c5afa908115610b21578a91610ba3575b506106e957889760405163f084843d60e01b928382528482806108938d339060048401611d10565b0381865afa918215610b98578b92610b66575b508110610b5e575b5060405163034c188b60e41b8152908382806108cf88338e60048501611d5b565b0381845afa918215610b21578a92610b2c575b50803b15610b055789856109149289838d60405196879586948593636f70e66f60e01b85523390339060048701611dd3565b03925af1908115610b21578a91610b09575b50506109323389611f2d565b8660415416803b15610b055760405163628a468360e01b8152918a918391829084908290610965908b3360048501611e06565b03925af1908115610ae6578991610af1575b5050856041541690604051908152828180610996338c60048401611d10565b0381855afa908115610ae6578991610ab5575b50610a40575b506040519384528301527fa702ae6024e8b4c2b0eb162b1453dacb93cf6922f5a2d7236faed898c21148f860403393a360425416803b15610a3c57604051632ed56dff60e21b81529183918391829084908290610a1190339060048401611d10565b03925af1801561057957610a28575b506001805580f35b610a3190611cc4565b6101d4578038610a20565b5050fd5b803b15610ab15760405163c640752d60e01b81529088908290818381610a6a338e60048401611d10565b03925af1908115610aa6578891610a8e575b5050610a883387611e6d565b386109af565b610a9790611cc4565b610aa2578638610a7c565b8680fd5b6040513d8a823e3d90fd5b8780fd5b809950838092503d8311610adf575b610ace8183611ced565b810103126105e057889751386109a9565b503d610ac4565b6040513d8b823e3d90fd5b610afa90611cc4565b610ab1578738610977565b8980fd5b610b1290611cc4565b610b1d578838610926565b8880fd5b6040513d8c823e3d90fd5b995090508289813d8111610b57575b610b458183611ced565b810103126105e05789985190386108e2565b503d610b3b565b9350386108ae565b9a509050838a813d8111610b91575b610b7f8183611ced565b810103126105e0578a995190386108a6565b503d610b75565b6040513d8d823e3d90fd5b90508281813d8311610bc9575b610bba8183611ced565b810103126105e057513861086b565b503d610bb0565b604051631785c68160e01b8152600490fd5b610bf99150823d84116106d7576106c98183611ced565b3861082d565b50346101d457806003193601126101d4576020603654604051908152f35b50346101d45760403660031901126101d457610c37611c38565b90610c40611c4e565b603d546040516334e3b77960e01b81526001600160a01b0390911693909291602091828580610c73858560048401611d10565b0381895afa94851561062a578495610d06575b5060405163f084843d60e01b8152958392879283918291610cab919060048401611d10565b03915afa918215610cfa5791610cca575b604080945051928352820152f35b80915083813d8311610cf3575b610ce18183611ced565b810103126105e0576040925190610cbc565b503d610cd7565b604051903d90823e3d90fd5b919094508282813d8311610d32575b610d1f8183611ced565b810103126105e057905193610cab610c86565b503d610d15565b50346101d45760c03660031901126101d457610d53611c38565b6044359060643560018060a01b039283603354169060405194632474521560e21b9485875286600080516020612bdc8339815191529485600483015233602483015281604460209a8b935afa908115610ae6578991610f86575b501561079757878260375416803b1561068757816040518092639fea3e0760e01b8252818381610de66084356024358b60048501611e06565b03925af1801561057957610f72575b50506044878360335416604051928380928b82528960048301523360248301525afa908115610ae6578991610f55575b50156107975782158015610f44575b610f32578116918288526034875260408820556044868260335416604051928380928a82528860048301523360248301525afa908115610aa6578891610f15575b50156107975783158015610f01575b610eef578593604492885260358552604088205560335416936040519485938492835260048301523360248301525afa918215610668578392610ed2575b5050156107975760a43560365580f35b610ee89250803d106106d7576106c98183611ced565b3880610ec2565b604051630906beff60e11b8152600490fd5b508187526034865260408720548410610e84565b610f2c9150873d89116106d7576106c98183611ced565b38610e75565b604051636ae75f5b60e01b8152600490fd5b50670de0b6b3a76400008311610e34565b610f6c9150883d8a116106d7576106c98183611ced565b38610e25565b610f7b90611cc4565b610ab1578738610df5565b610f9d9150883d8a116106d7576106c98183611ced565b38610dad565b50346101d457806003193601126101d4576037546040516001600160a01b039091168152602090f35b50346101d457806003193601126101d4576042546040516001600160a01b039091168152602090f35b50346101d45760403660031901126101d45761100f611c38565b6024359060018060a01b039060446020836033541660405192838092632474521560e21b8252600080516020612bdc83398151915260048301523360248301525afa9081156105ec578591611093575b50156107975782158015611082575b610f32571682526034602052604082205580f35b50670de0b6b3a7640000831161106e565b6110ab915060203d81116106d7576106c98183611ced565b3861105f565b50346101d457806003193601126101d45760206040517fe453bacb314e78dcd5192e6b1a2b1f0e7c76e92f6b7e429a6a90f04e39db3b768152f35b50346101d45760403660031901126101d457602061111961110b611c38565b611113611c4e565b9061237a565b604051908152f35b50346101d457806003193601126101d457602090604051908152f35b50346101d457806003193601126101d45760206040517f880a91047114272656e533301261260c75e4d11543ac7303d6fe4204579ec7278152f35b50346101d45760403660031901126101d457611192611c38565b6024359060018060a01b039060446020836033541660405192838092632474521560e21b8252600080516020612bdc83398151915260048301523360248301525afa9081156105ec57859161121c575b50156107975782158015611205575b610eef571682526035602052604082205580f35b5081811684526034602052604084205483106111f1565b611234915060203d81116106d7576106c98183611ced565b386111e2565b50346101d45760403660031901126101d4576020611119611259611c38565b611261611c4e565b90612614565b50346101d45760403660031901126101d4576020611119611286611c38565b61128e611c4e565b9061224c565b50346101d45760403660031901126101d4576112ea9060206112b4611c38565b6112bc611c4e565b603d54604051631ce4b4a760e01b81529586936001600160a01b039092169284928392919060048401611d10565b03915afa908115610cfa5790611306575b602090604051908152f35b506020813d8211611330575b8161131f60209383611ced565b810103126105e057602090516112fb565b3d9150611312565b50346101d457806003193601126101d45760206040517f39f61ca2a1a28fee144218173ec637b649a353e4026b2738c673800e5bf1437b8152f35b50346101d45760803660031901126101d4576020611119611392611c38565b61139a611c4e565b90606435916044359161284c565b50346101d457806003193601126101d457603c546040516001600160a01b039091168152602090f35b50346101d45760403660031901126101d45760206111196113f0611c38565b6113f8611c4e565b9061209f565b50346101d45760403660031901126101d457602061111961141d611c38565b611425611c4e565b90612190565b50346101d45760e03660031901126101d457611445611c38565b61144d611c4e565b6044356001600160a01b03811681036105e057606435926001600160a01b03841684036105e057608435926001600160a01b03841684036105e05760a435906001600160a01b03821682036105e05760c435916001600160a01b03831683036105e05787549560ff8760081c16159687809861181b575b8015611804575b156117a85760ff1981166001178a5587611797575b506001600160a01b038616158015611786575b6116fc5788549761150960ff8a60081c16611c64565b61151860ff8a60081c16611c64565b6001805561152b60ff8a60081c16611c64565b6040516301f74f9160e11b81526020816004816001600160a01b038b165afa908115610b98578b9161173f575b506024906020906001600160a01b031661157860088d901c60ff16611c64565b603380546001600160a01b031916821790556040516301ffc9a760e01b8152637965db0b60e01b600482015292839182905afa908115610b98578b91611720575b501561170e57603780546001600160a01b0319166001600160a01b038816179055674563918244f400006036556115f660088a901c60ff16611c64565b603980546001600160a01b031990811630179091556038805482166001600160a01b0389811691909117909155603a8054831693821693909317909255603b8054821693831693909317909255603c80549092169281169290921790551680156116fc57603e80546001600160a01b03199081163017909155603d805482166001600160a01b03958616908117909155603f805483169390931790925560408054821693851693909317909255604180548316909117905560428054909116929091169190911790556116c7575080f35b61ff00191681557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a180f35b6040516350dd03f760e11b8152600490fd5b6040516384d942fd60e01b8152600490fd5b611739915060203d6020116106d7576106c98183611ced565b386115b9565b90506020813d60201161177e575b8161175a60209383611ced565b8101031261177a57516001600160a01b038116810361177a576020611558565b8a80fd5b3d915061174d565b506001600160a01b038316156114f3565b61ffff1916610101178955386114e0565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b1580156114cb5750600160ff8216146114cb565b50600160ff8216106114c4565b50346101d45760403660031901126101d4576020611119611847611c38565b61184f611c4e565b90612a22565b50346101d457806003193601126101d45760206040517fe965846df3dd5b1dfa65f58e31477079e90140e0908b6dd31b5aead5a57cf3658152f35b50346101d45760403660031901126101d45760206118bd6118af611c38565b6118b7611c4e565b90611f67565b6040519015158152f35b50346101d45760803660031901126101d4576118e1611c38565b60443591906024356118f1611d7d565b60018060a01b0390816040541660405195635b14f18360e01b8752868486169283600483015281602460209a8b935afa9081156106de578791611b69575b50610bd05780158080611b61575b611b4f5760405163313ce56760e01b81528881600481875afa908115610aa65760129160ff918a91611b22575b501611611b105715611a3c5785968460415416803b15610ab157604051638340f54960e01b815290889082908183816119a88b338f60048501611d5b565b03925af1908115610aa6578891611a28575b50505b6119c73387611f2d565b6040519384528301527f6423b6056e64b3b29cb2d342362b47c26fa8d6877da27ea152354060df19b9bc60403393a360425416803b15610a3c57604051632ed56dff60e21b81529183918391829084908290610a1190339060048401611d10565b611a3190611cc4565b610aa25786386119ba565b82611ab5575b85968460415416803b15610ab15787809160846040518094819363fbf3773960e01b835289600484015233602484015288604484015260643560648401525af1908115610aa6578891611aa1575b5050611a9c3387611e6d565b6119bd565b611aaa90611cc4565b610aa2578638611a90565b836041541696873b15610aa257604051638340f54960e01b81529787908990818381611ae68a338e60048501611d5b565b03925af180156106de57611afc575b9650611a42565b959096611b0890611cc4565b948690611af5565b604051636a78e98160e11b8152600490fd5b611b4291508b3d8d11611b48575b611b3a8183611ced565b810190611d42565b3861196a565b503d611b30565b60405163fa95696160e01b8152600490fd5b50831561193d565b611b809150883d8a116106d7576106c98183611ced565b3861192f565b50346101d457806003193601126101d4576033546040516001600160a01b039091168152602090f35b9050346106875760203660031901126106875760043563ffffffff60e01b8116809103610575576033546301ffc9a760e01b83526004830191909152602090829060249082906001600160a01b03165afa9081156105795760209291611c1b575b506040519015158152f35b611c329150823d81116106d7576106c98183611ced565b38611c10565b600435906001600160a01b03821682036105e057565b602435906001600160a01b03821682036105e057565b15611c6b57565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b6001600160401b038111611cd757604052565b634e487b7160e01b600052604160045260246000fd5b601f909101601f19168101906001600160401b03821190821017611cd757604052565b6001600160a01b0391821681529116602082015260400190565b908160209103126105e0575180151581036105e05790565b908160209103126105e0575160ff811681036105e05790565b6001600160a01b03918216815291166020820152604081019190915260600190565b600260015414611d8e576002600155565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b6001600160a01b039182168152918116602083015290911660408201526060810191909152608081019190915260a00190565b604091949392606082019560018060a01b0316825260208201520152565b81810292918115918404141715611e3757565b634e487b7160e01b600052601160045260246000fd5b8115611e57570490565b634e487b7160e01b600052601260045260246000fd5b90611ecc6020611e7d838561209f565b9260018060a01b0394670de0b6b3a7640000611ea9600096888416885260348652604088205490611e24565b0495604154169060405180958194829363a6ea8b8760e01b845260048401611d10565b03915afa918215610cfa578092611ef9575b505011611ee757565b6040516330b58a9160e01b8152600490fd5b9091506020823d8211611f25575b81611f1460209383611ced565b810103126101d45750513880611ede565b3d9150611f07565b90611f379161209f565b8015159081611f5a575b50611f4857565b604051633fc1a63760e11b8152600490fd5b9050603654101538611f41565b90611f72818361209f565b91821561209757603d5460405163a6ea8b8760e01b81526020946001600160a01b039490928691839187169082908190611fb0908960048401611d10565b03915afa9081156120545760009161206a575b50801561206057670de0b6b3a764000080820291820403611e37578491611fe991611e4d565b603e5460405163e6bc046160e01b81529385166004850152909383916024918391165afa92831561205457600093612023575b5050101590565b8181949293943d831161204d575b61203b8183611ced565b810103126101d457505190388061201c565b503d612031565b6040513d6000823e3d90fd5b5050505050600090565b908582813d8311612090575b6120808183611ced565b810103126101d457505138611fc3565b503d612076565b505050600090565b6120d09060018060a01b0380603d54169360405180956334e3b77960e01b8252818060209788958860048401611d10565b03915afa93841561205457600094612161575b50603f54604051631735856760e31b81529282166004840152839183916024918391165afa91821561205457600092612130575b5050670de0b6b3a76400009161212c91611e24565b0490565b81819392933d831161215a575b6121478183611ced565b810103126101d45750518161212c612117565b503d61213d565b90938382813d8311612189575b6121788183611ced565b810103126101d457505192826120e3565b503d61216e565b61219a828261209f565b90811561209757603d5460405163f084843d60e01b81529360209285926001600160a01b031691839182916121d29160048401611d10565b03915afa9182156120545760009261220c575b50670de0b6b3a764000091828102928184041490151715611e375761220991611e4d565b90565b90916020823d8211612237575b8161222660209383611ced565b810103126101d457505190386121e5565b3d9150612219565b91908203918211611e3757565b90612257818361209f565b603e5460405163f3f481df60e01b81526001600160a01b038581166004830152946020949390928590839060249082908a165afa91821561205457600092612332575b5091670de0b6b3a76400006122b58695936122d89795611e24565b0495603d54169060405180968194829363a6ea8b8760e01b845260048401611d10565b03915afa90811561205457600091612306575b508091508211156122ff576122099161223f565b5050600090565b82813d831161232b575b61231a8183611ced565b810103126101d457505180386122eb565b503d612310565b90918582813d8311612362575b6123498183611ced565b810103126101d457505190670de0b6b3a764000061229a565b503d61233f565b60ff16604d8111611e3757600a0a90565b603d54604080516334e3b77960e01b8152936001600160a01b0393919290916004916020919086168288806123b28886898401611d10565b0381845afa978815612580576000986125d4575b5086603f541691865195631735856760e31b875284876024818c861697888b8301525afa9687156125c95760009761259a575b50861561258b57875163f084843d60e01b8152928592849283918291612421918b8401611d10565b03915afa90811561258057600091612553575b50855163313ce56760e01b815283818681865afa9081156125485761246c92916124669160009161252b575b50612369565b90611e24565b95670de0b6b3a764000096878102978189041490151715612516579060248392603e5416948751958693849263f3f481df60e01b84528301525afa93841561250c57506000936124d7575b5050916124cb6124d1926122099594611e24565b90611e4d565b9061223f565b8181949293943d8311612505575b6124ef8183611ced565b810103126101d4575051906124cb6122096124b7565b503d6124e5565b513d6000823e3d90fd5b601184634e487b7160e01b6000525260246000fd5b6125429150863d8811611b4857611b3a8183611ced565b38612460565b87513d6000823e3d90fd5b908382813d8311612579575b6125698183611ced565b810103126101d457505138612434565b503d61255f565b86513d6000823e3d90fd5b50505050505050505050600090565b90968582813d83116125c2575b6125b18183611ced565b810103126101d457505195386123f9565b503d6125a7565b88513d6000823e3d90fd5b90978382813d83116125fc575b6125eb8183611ced565b810103126101d457505196386123c6565b503d6125e1565b60ff166012039060ff8211611e3757565b603d546040805163a6ea8b8760e01b81526001600160a01b03949193600493602093919087169084848061264b86858b8401611d10565b0381855afa93841561254857600094612810575b50831561280257670de0b6b3a76400009384810290810485036127ed576024868a603e54169a8a519283809263e6bc046160e01b825287169d8e8d8301525afa9081156127e2576000916127b3575b506126b891611e4d565b84810294818604149015171561279e579184916126e99388518095819482936334e3b77960e01b84528b8401611d10565b03915afa90811561279357908391600091612763575b5061270a9192611e4d565b9484519384809263313ce56760e01b82525afa92831561250c575061220993926124cb9261274192600092612746575b5050612603565b612369565b61275c9250803d10611b4857611b3a8183611ced565b388061273a565b9182813d831161278c575b6127788183611ced565b810103126101d4575051829061270a6126ff565b503d61276e565b85513d6000823e3d90fd5b601186634e487b7160e01b6000525260246000fd5b908782813d83116127db575b6127c98183611ced565b810103126101d45750516126b86126ae565b503d6127bf565b89513d6000823e3d90fd5b601187634e487b7160e01b6000525260246000fd5b505050505050505060001990565b90938582813d8311612838575b6128278183611ced565b810103126101d4575051923861265f565b503d61281d565b91908201809211611e3757565b603d546040805163a6ea8b8760e01b815293959094600494602094936001600160a01b039081169390918681806128868d8a8d8401611d10565b0381885afa9081156127e2576000916129f3575b50906128a59161283f565b9788156129e457670de0b6b3a764000093848a02998a0485036129cf5782603e541699878a51809563e6bc046160e01b825289169c8d8c830152815a91602492fa9384156129c457908893929160009561298c575b506129239461290891611e4d565b968a518095819482936334e3b77960e01b84528d8401611d10565b03915afa9081156125485760009161295d575b50906129419161283f565b9181810291818304149015171561251657829161270a91611e4d565b908582813d8311612985575b6129738183611ced565b810103126101d4575051612941612936565b503d612969565b91938281969294963d83116129bd575b6129a68183611ced565b810103126101d457505192879290916129086128fa565b503d61299c565b8a513d6000823e3d90fd5b601188634e487b7160e01b6000525260246000fd5b50505050505050505060001990565b908782813d8311612a1b575b612a098183611ced565b810103126101d45750516128a561289a565b503d6129ff565b603d5460405163a6ea8b8760e01b8152929060209084906001600160a01b03168180612a52868860048401611d10565b03915afa92831561205457600093612a92575b50821561209757612a759161209f565b670de0b6b3a764000080830292830403611e375761220991611e4d565b90926020823d8211612abd575b81612aac60209383611ced565b810103126101d45750519138612a65565b3d9150612a9f565b6001600160a01b039091168152602081019190915260400190565b6040519182612b026020958683019363a9059cbb60e01b855260248401612ac5565b0392612b16601f1994858101835282611ced565b600092839283809351925af1913d15612bd2573d6001600160401b038111612bbe57612b4c8560405193601f8401160183611ced565b81528091843d92013e5b81612b8e575b5015612b655750565b6064906040519062461bcd60e51b82526004820152600260248201526114d560f21b6044820152fd5b80518015925083908315612ba6575b50505038612b5c565b612bb69350820181019101611d2a565b388281612b9d565b634e487b7160e01b83526041600452602483fd5b50506060612b5656fe3b5d4cc60d3ec3516ee8ae083bd60934f6eb2a6c54b1229985c41bfb092b2603a26469706673582212208631c1aae047a726652591b1b6073516dc3dd9cc2428d8335cc94ced99f39afc64736f6c63430008110033",
  "devdoc": {
    "details": "See ISuManager interface and all SuManager** contracts for full details.",
    "kind": "dev",
    "methods": {
      "getLiquidationBlock(address,address)": {
        "params": {
          "asset": "The address of the main collateral token of a position",
          "owner": "The owner of the collateral"
        },
        "returns": {
          "_0": "liquidationBlock The block number when the liquidation was triggered*"
        }
      },
      "getPositionInfo(address,address)": {
        "params": {
          "asset": "The address of the main collateral token of a position",
          "owner": "The owner of the collateral"
        },
        "returns": {
          "collateralEDecimal": "The amount of collateral",
          "debtWithFeesE18": "The amount of borrowed stablecoins with accumulated fee*"
        }
      },
      "join(address,uint256,uint256,uint256)": {
        "details": "Before calling this function user has to approve the Vault to take his collateral*"
      },
      "liquidationPriceE18(address,address)": {
        "details": "can be used inside of _isLiquidatablePosition*"
      },
      "setInitialCollateralRatioE18(address,uint256)": {
        "details": "Sets the initial collateral ratio",
        "params": {
          "asset": "The address of the main collateral token",
          "newValueE18": "The collateralization ratio (1e18 = 100%)*"
        }
      },
      "setLiquidationRatioE18(address,uint256)": {
        "details": "Sets the liquidation ratio",
        "params": {
          "asset": "The address of the main collateral token",
          "newValueE18": "The liquidation ratio (1e18 = 100%).*"
        }
      },
      "setMinCollateralInUsdE18(uint256)": {
        "details": "Sets a minimum value of collateral in USD which allowed to be left after partial closure",
        "params": {
          "newValueE18": "The minimum value of collateral in USD"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      },
      "triggerLiquidation(address,address)": {
        "details": "Emits LiquidationTriggered event. Sets the current block as liquidationBlock for the position. Can be triggered only once for the position. Add order for liquidated collateral to sell it by stablecoin from whitelist",
        "params": {
          "asset": "The address of the main collateral token of a position",
          "owner": "The owner of a position*"
        }
      }
    },
    "title": "SuManager",
    "version": 1
  },
  "userdoc": {
    "events": {
      "Exit(address,address,uint256,uint256)": {
        "notice": "Event triggered when user withdraws collateral*"
      },
      "Join(address,address,uint256,uint256)": {
        "notice": "Even triggered when user deposit collateral*"
      },
      "LiquidationTriggered(address,uint256)": {
        "notice": "Event triggered when triggerLiquidation() is called*"
      }
    },
    "kind": "user",
    "methods": {
      "exit(address,uint256,uint256)": {
        "notice": "User can pay back the stablecoin and take his collateral instead of passing both assetAmount and stablecoinAmount better user just to pass one of them also pass preferred rate and maybe acceptable diff percent that's the purpose of passing both to protect user from rate fluctuations*"
      },
      "getAvailableToBorrowE18(address,address)": {
        "notice": "Returns Available to Borrow we have invariant: (collateralAmountEDecimal * collateralPriceE18 / 1e18) * initialCollateralRatioE18 <= debtE18 Has similar logic like in _ensurePositionCollateralization*"
      },
      "getAvailableToWithdrawE18(address,address)": {
        "notice": "Returns Available to Withdraw Has similar invariant like in getAvailableToBorrowE18*"
      },
      "getCollateralUsdValueE18(address,address)": {
        "notice": "USD value of collateral of owner*"
      },
      "getLTVE18(address,address)": {
        "notice": "Returns Loan-To-Value in e18*"
      },
      "getLiquidationBlock(address,address)": {
        "notice": "Returns information about a liquidating position"
      },
      "getPositionInfo(address,address)": {
        "notice": "Returns information about a liquidating position"
      },
      "initialCollateralRatioE18(address)": {
        "notice": "When ratio (debt / usdValue) goes below it user can't withdraw or borrow. Should be >= liquidationRatioE18. 1e18 = 100% ratio. Should be less than 1e18. Is used to calculate available to withdraw and borrow. For example, user can borrow <= usdValue * initialCollateralRatio*"
      },
      "isLiquidatablePosition(address,address)": {
        "notice": "View function to check if position is liquidatable*"
      },
      "join(address,uint256,uint256,uint256)": {
        "notice": "This function is called by user to deposit collateral and receive stablecoin"
      },
      "liquidationPriceE18(address,address)": {
        "notice": "Calculate liquidation price"
      },
      "liquidationRatioE18(address)": {
        "notice": "Ratio when cdp can be liquidated. 1e18 = 100% ratio. Should be less than 1e18. Is used in isLiquidatablePosition(). It's true when debt / usdValue >= liquidationRatio*"
      },
      "minCollateralInUsdE18()": {
        "notice": "The minimum value of collateral in USD which allowed to be left after partial closure*"
      },
      "setInitialCollateralRatioE18(address,uint256)": {
        "notice": "Only manager is able to call this function"
      },
      "setLiquidationRatioE18(address,uint256)": {
        "notice": "Only manager is able to call this function"
      },
      "setMinCollateralInUsdE18(uint256)": {
        "notice": "Only manager is able to call this function"
      },
      "triggerLiquidation(address,address)": {
        "notice": "Marks a position as to be liquidated"
      },
      "utilizationRatioE18(address,address)": {
        "notice": "View function to show utilization ratio the same function can be used inside of _isLiquidatablePosition*"
      }
    },
    "notice": "Main contract to give ability to user to join position or exit from it.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 671,
        "contract": "contracts/lending/SuManager.sol:SuManager",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 674,
        "contract": "contracts/lending/SuManager.sol:SuManager",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 847,
        "contract": "contracts/lending/SuManager.sol:SuManager",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 916,
        "contract": "contracts/lending/SuManager.sol:SuManager",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 28586,
        "contract": "contracts/lending/SuManager.sol:SuManager",
        "label": "ACCESS_CONTROL_SINGLETON",
        "offset": 0,
        "slot": "51",
        "type": "t_contract(ISuAccessControl)32175"
      },
      {
        "astId": 25882,
        "contract": "contracts/lending/SuManager.sol:SuManager",
        "label": "initialCollateralRatioE18",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 25886,
        "contract": "contracts/lending/SuManager.sol:SuManager",
        "label": "liquidationRatioE18",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 25888,
        "contract": "contracts/lending/SuManager.sol:SuManager",
        "label": "minCollateralInUsdE18",
        "offset": 0,
        "slot": "54",
        "type": "t_uint256"
      },
      {
        "astId": 25891,
        "contract": "contracts/lending/SuManager.sol:SuManager",
        "label": "vaultParameters",
        "offset": 0,
        "slot": "55",
        "type": "t_contract(SuVaultParameters)27029"
      },
      {
        "astId": 25688,
        "contract": "contracts/lending/SuManager.sol:SuManager",
        "label": "_vault",
        "offset": 0,
        "slot": "56",
        "type": "t_contract(ISuVault)23976"
      },
      {
        "astId": 25691,
        "contract": "contracts/lending/SuManager.sol:SuManager",
        "label": "_manager",
        "offset": 0,
        "slot": "57",
        "type": "t_contract(ISuManager)23427"
      },
      {
        "astId": 25694,
        "contract": "contracts/lending/SuManager.sol:SuManager",
        "label": "_liquidationMiddleware",
        "offset": 0,
        "slot": "58",
        "type": "t_contract(ISuLiquidationMiddleware)23360"
      },
      {
        "astId": 25696,
        "contract": "contracts/lending/SuManager.sol:SuManager",
        "label": "_stablePro",
        "offset": 0,
        "slot": "59",
        "type": "t_address"
      },
      {
        "astId": 25698,
        "contract": "contracts/lending/SuManager.sol:SuManager",
        "label": "foundation",
        "offset": 0,
        "slot": "60",
        "type": "t_address"
      },
      {
        "astId": 25187,
        "contract": "contracts/lending/SuManager.sol:SuManager",
        "label": "_VAULT",
        "offset": 0,
        "slot": "61",
        "type": "t_contract(ISuVault)23976"
      },
      {
        "astId": 25190,
        "contract": "contracts/lending/SuManager.sol:SuManager",
        "label": "_MANAGER",
        "offset": 0,
        "slot": "62",
        "type": "t_contract(ISuManager)23427"
      },
      {
        "astId": 25193,
        "contract": "contracts/lending/SuManager.sol:SuManager",
        "label": "_ORACLE",
        "offset": 0,
        "slot": "63",
        "type": "t_contract(ISuOracle)32359"
      },
      {
        "astId": 17936,
        "contract": "contracts/lending/SuManager.sol:SuManager",
        "label": "suPausable",
        "offset": 0,
        "slot": "64",
        "type": "t_contract(ISuPausable)23716"
      },
      {
        "astId": 24784,
        "contract": "contracts/lending/SuManager.sol:SuManager",
        "label": "vault",
        "offset": 0,
        "slot": "65",
        "type": "t_contract(ISuVault)23976"
      },
      {
        "astId": 24787,
        "contract": "contracts/lending/SuManager.sol:SuManager",
        "label": "cdpRegistry",
        "offset": 0,
        "slot": "66",
        "type": "t_contract(ISuCdpRegistry)23241"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ISuAccessControl)32175": {
        "encoding": "inplace",
        "label": "contract ISuAccessControl",
        "numberOfBytes": "20"
      },
      "t_contract(ISuCdpRegistry)23241": {
        "encoding": "inplace",
        "label": "contract ISuCdpRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(ISuLiquidationMiddleware)23360": {
        "encoding": "inplace",
        "label": "contract ISuLiquidationMiddleware",
        "numberOfBytes": "20"
      },
      "t_contract(ISuManager)23427": {
        "encoding": "inplace",
        "label": "contract ISuManager",
        "numberOfBytes": "20"
      },
      "t_contract(ISuOracle)32359": {
        "encoding": "inplace",
        "label": "contract ISuOracle",
        "numberOfBytes": "20"
      },
      "t_contract(ISuPausable)23716": {
        "encoding": "inplace",
        "label": "contract ISuPausable",
        "numberOfBytes": "20"
      },
      "t_contract(ISuVault)23976": {
        "encoding": "inplace",
        "label": "contract ISuVault",
        "numberOfBytes": "20"
      },
      "t_contract(SuVaultParameters)27029": {
        "encoding": "inplace",
        "label": "contract SuVaultParameters",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}