{
  "address": "0x1c229165Ba6B07eB19662b66345D90389e323E2B",
  "abi": [
    {
      "inputs": [],
      "name": "AlreadyPaused",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AssetDebtLimit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BadAccessControlSingleton",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LiquidationIsTriggered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotPaused",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAdminError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAlerterError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyDAOError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyLiquidationAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyMintAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyRewardAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyRoleError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyVaultAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Restricted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UselessTransaction",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WithdrawExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WrongDebt",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WrongTotalDebt",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "LiquidationTriggered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "repayer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assetAmountEDecimal",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "repaymentE18",
          "type": "uint256"
        }
      ],
      "name": "PositionLiquidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "repayer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assetAmountEDecimal",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "repaymentE18",
          "type": "uint256"
        }
      ],
      "name": "PositionLiquidatedPartial",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "repayer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "repaymentE18",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "excessAndFeeE18",
          "type": "uint256"
        }
      ],
      "name": "PositionRepaid",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACCESS_CONTROL_SINGLETON",
      "outputs": [
        {
          "internalType": "contract ISuAccessControl",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ALERTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DAO_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIQUIDATION_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINT_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARD_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STABLE_PRO",
      "outputs": [
        {
          "internalType": "contract StablePro",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VAULT_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountE18",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockupPeriodSeconds",
          "type": "uint256"
        }
      ],
      "name": "borrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountE18",
          "type": "uint256"
        }
      ],
      "name": "calculateFeeE18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "collateralsEDecimal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "debtWithFeesE18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "debtsE18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountEDecimal",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "destroy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountEDecimal",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "foundation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getTotalDebtE18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_authControl",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stablePro",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_foundation",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardChef",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_suPausable",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastUpdate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "assetAmountEDecimal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stablecoinAmountE18",
          "type": "uint256"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "liquidationBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "repayer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stablecoinsToRepaymentE18",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stablecoinsToFoundationE18",
          "type": "uint256"
        }
      ],
      "name": "payFeeAndBurn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "protocolStabilityFeeE18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardChef",
      "outputs": [
        {
          "internalType": "contract RewardChefV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stabilityFeeValueE18",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stablecoinLimitE18",
          "type": "uint256"
        }
      ],
      "name": "setCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newFoundation",
          "type": "address"
        }
      ],
      "name": "setFoundation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardChef",
          "type": "address"
        }
      ],
      "name": "setRewardChef",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "setStabilityFeeE18",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "setTokenDebtLimitE18",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stabilityFeeE18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenDebtLimitE18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenDebtsE18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenDebtsWithFeesE18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "positionOwner",
          "type": "address"
        }
      ],
      "name": "triggerLiquidation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "update",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountEDecimal",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "6bdb767f00e3f0fe0de7c63e7a48801d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AlreadyPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AssetDebtLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BadAccessControlSingleton\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LiquidationIsTriggered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAdminError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAlerterError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyDAOError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyLiquidationAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyMintAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRewardAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRoleError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyVaultAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Restricted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UselessTransaction\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongDebt\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongTotalDebt\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LiquidationTriggered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"repayer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetAmountEDecimal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repaymentE18\",\"type\":\"uint256\"}],\"name\":\"PositionLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"repayer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetAmountEDecimal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repaymentE18\",\"type\":\"uint256\"}],\"name\":\"PositionLiquidatedPartial\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"repayer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repaymentE18\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"excessAndFeeE18\",\"type\":\"uint256\"}],\"name\":\"PositionRepaid\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACCESS_CONTROL_SINGLETON\",\"outputs\":[{\"internalType\":\"contract ISuAccessControl\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ALERTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAO_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDATION_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STABLE_PRO\",\"outputs\":[{\"internalType\":\"contract StablePro\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VAULT_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountE18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockupPeriodSeconds\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountE18\",\"type\":\"uint256\"}],\"name\":\"calculateFeeE18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"collateralsEDecimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"debtWithFeesE18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"debtsE18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountEDecimal\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"destroy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountEDecimal\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"foundation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getTotalDebtE18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_authControl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stablePro\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_foundation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardChef\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_suPausable\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetAmountEDecimal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stablecoinAmountE18\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidationBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"repayer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stablecoinsToRepaymentE18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stablecoinsToFoundationE18\",\"type\":\"uint256\"}],\"name\":\"payFeeAndBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"protocolStabilityFeeE18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardChef\",\"outputs\":[{\"internalType\":\"contract RewardChefV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stabilityFeeValueE18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stablecoinLimitE18\",\"type\":\"uint256\"}],\"name\":\"setCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFoundation\",\"type\":\"address\"}],\"name\":\"setFoundation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardChef\",\"type\":\"address\"}],\"name\":\"setRewardChef\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setStabilityFeeE18\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"setTokenDebtLimitE18\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stabilityFeeE18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenDebtLimitE18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenDebtsE18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenDebtsWithFeesE18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"positionOwner\",\"type\":\"address\"}],\"name\":\"triggerLiquidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountEDecimal\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"See ISuVault interface and SuVaultParameters contract for full details.\",\"kind\":\"dev\",\"methods\":{\"destroy(address,address)\":{\"details\":\"onlyVaultAccess, exit -> _repay -> destroy if debt == 0*\"},\"payFeeAndBurn(address,uint256,uint256)\":{\"params\":{\"repayer\":\"The person who repaies by debt and transfers stablecoins to the foundation\",\"stablecoinsToFoundationE18\":\"The amount of stablecoins which will be transfered to the foundation(e.g fees)*\",\"stablecoinsToRepaymentE18\":\"The amount of stablecoins which will be burned as a debt repayment\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"triggerLiquidation(address,address)\":{\"details\":\"Sets the current block as liquidationBlock for the position. Can be triggered only once for the position.*\",\"params\":{\"asset\":\"The address of the main collateral token of a position\",\"positionOwner\":\"The owner of a position\"}},\"update(address,address)\":{\"details\":\"is called, when user borrows more*\"}},\"title\":\"SuVault\",\"version\":1},\"userdoc\":{\"events\":{\"LiquidationTriggered(address,address)\":{\"notice\":\"Event triggered when user didnt withdraw collateral before price goes down*\"},\"PositionLiquidated(address,address,address,uint256,uint256)\":{\"notice\":\"Event triggered when user destroys cdp*\"},\"PositionLiquidatedPartial(address,address,address,uint256,uint256)\":{\"notice\":\"Event triggered when user liquidate some part of cdp (debt > 0)*\"},\"PositionRepaid(address,uint256,uint256)\":{\"notice\":\"Event triggered when user call repay() function*\"}},\"kind\":\"user\",\"methods\":{\"borrow(address,address,uint256,uint256)\":{\"notice\":\"borrow usdPRO using selected asset. user expected previously to deposit collateral and then being able to take stablecoin user can't create single position with multiple collaterals?*\"},\"calculateFeeE18(address,address,uint256)\":{\"notice\":\"fee is increased with time. Any call of vault.update would calc fee in debt and restart fee timer*\"},\"collateralsEDecimal(address,address)\":{\"notice\":\"how much collateral the users staked == collaterals[asset][user], i.e deposits EDecimal means that this value in asset denomination, i.e. x{human readable value} * 10^{erc20.decimals()}*\"},\"debtWithFeesE18(address,address)\":{\"notice\":\"stablecoin amount + fee accumulated before lastUpdate == debtWithFeesE18[asset][user]*\"},\"debtsE18(address,address)\":{\"notice\":\"stablecoin amount*\"},\"deposit(address,address,uint256)\":{\"notice\":\"collateral deposit*\"},\"destroy(address,address)\":{\"notice\":\"only destroy debt info\"},\"emergencyWithdraw(address,address,uint256)\":{\"notice\":\"withdraw in case of some protocol errors, users can always get back their tokens*\"},\"getTotalDebtE18(address,address)\":{\"notice\":\"total dept is calculated as current debt with added calculated fee, don't use it in practice*\"},\"initialize(address,address,address,address,address)\":{\"notice\":\"vault is initialize with parameters for auth (we are using OZ instead) and it accept address for wrapped eth, main stable coin, and probably governance token*\"},\"lastUpdate(address,address)\":{\"notice\":\"the last time, when every fee before lastUpdates are calculated in the debt. All data such as fees are from lastUpdate only*\"},\"liquidationBlock(address,address)\":{\"notice\":\"asset => user => block number*\"},\"payFeeAndBurn(address,uint256,uint256)\":{\"notice\":\"Burns a debt repayment and transfers fees to the foundation.\"},\"protocolStabilityFeeE18(address)\":{\"notice\":\"Stability fee that is used in calculateFeeE18 to see how much user debt increased. It can be different for each collateral*\"},\"setCollateral(address,uint256,uint256)\":{\"notice\":\"manager is allowed to add new collaterals and modify existing ones*\"},\"setFoundation(address)\":{\"notice\":\"manager is allowed to change foundation that receive fees and etc*\"},\"setStabilityFeeE18(address,uint256)\":{\"notice\":\"set fee percentage (1e18 = 100%)*\"},\"setTokenDebtLimitE18(address,uint256)\":{\"notice\":\"debt limit can be changed for any collateral along with liquidation and stability fees*\"},\"stabilityFeeE18(address,address)\":{\"notice\":\"current interest that user pay for stabilityFee[asset][user]*\"},\"tokenDebtLimitE18(address)\":{\"notice\":\"Limit for each collateral-asset to manage risk profile*\"},\"tokenDebtsE18(address)\":{\"notice\":\"Stats, how much stablecoins were borrowed against particular asset == tokenDebtsE18[asset]*\"},\"tokenDebtsWithFeesE18(address)\":{\"notice\":\"tokenDebtsE18[asset] + accumulated fee in all CDPs in this asset*\"},\"triggerLiquidation(address,address)\":{\"notice\":\"Marks a position as to be liquidated\"},\"update(address,address)\":{\"notice\":\"Update all main state vars position is not allowed to be modified during liquidation, because when it's launched - liquidators want to be sure they can participate\"},\"withdraw(address,address,address,uint256)\":{\"notice\":\"collateral withdraw*\"}},\"notice\":\"Users don't have direct access to it, only through SuManager\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lending/SuVault.sol\":\"SuVault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xd60f939a3ca0199014d079b4dd66aa757954334947d81eb5c1d35d7a83061ab3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x23b997be73d3dd46885262704f0f8cfc7273fdadfe303d37969a9561373972b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCastUpgradeable {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xcef50f95b43b038aa40aed25b62fc45906c681a5c1d504a4fdcf3bc6330a8d4b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x1c65595a26548a1b2263315b08a56334a2d7087319814437559c3c96025e939f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"contracts/StablePro.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\n/*\\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\\n*/\\npragma solidity ^0.8.0;\\n\\nimport \\\"./periphery/contracts/access-control/SuAuthenticated.sol\\\";\\nimport \\\"./gain-erc20/GainErc20v3Upgradeable.sol\\\";\\n\\n/**\\n * @title StablePro\\n * @notice ERC-20 token with GainableERC20 feature\\n * @dev See GainableERC20v3Upgradeable contract for more details.\\n**/\\ncontract StablePro is GainableERC20v3Upgradeable {\\n    function initialize(address _authControl) public initializer {\\n        // TODO: rename on mainnet\\n        __ERC20_init(_authControl, \\\"Some USD\\\", \\\"SomeUSD\\\");\\n    }\\n\\n    /**\\n      * @notice Only Vault can mint StablePro. Dollars can be minted by vault (once user deposited collateral)\\n      * @dev Mints 'amount' of tokens to address 'to', and MUST fire the\\n      * Transfer event\\n      * @param to The address of the recipient\\n      * @param amount The amount of token to be minted\\n     **/\\n    function mint(address to, uint256 amount) external onlyMintAccess {\\n        _mint(to, amount);\\n    }\\n\\n    /**\\n     * @notice dollars can be burned by manager but only his own dollars\\n     * which managers will be using this feature? burning protocol fees?\\n     **/\\n    function burn(uint256 amount) external onlyMintAccess {\\n        _burn(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @notice also vault is allowed to burn dollars of any account\\n     * when user repays his loan and takes back his collateral\\n     **/\\n    function burn(address from, uint256 amount) external onlyMintAccess {\\n        _burn(from, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x29a4bd97405c0c8802377876b91b61bd22d9ff4b28071ecf9462b7ee3eb4bdb5\",\"license\":\"BSL 1.1\"},\"contracts/emergency/SuPausableAbstract.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/ISuPausable.sol\\\";\\n\\n/**\\n * @dev Abstract contract which allows other contracts to use modifiers\\n */\\nabstract contract SuPausableAbstract {\\n    error AlreadyPaused();\\n    error NotPaused();\\n\\n    ISuPausable internal suPausable;\\n\\n    function __suPausableAbstractInit(address _suPausable) internal {\\n        suPausable = ISuPausable(_suPausable);\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     */\\n    modifier whenNotPaused(address collateral) {\\n        if (suPausable.isPaused(collateral)) revert AlreadyPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     */\\n    modifier whenPaused(address collateral) {\\n        if (!suPausable.isPaused(collateral)) revert NotPaused();\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x0ee9823be11f694cb4f05c1ff74f7676e8e24b859338298581a3462bbc3cd1c0\",\"license\":\"UNLICENSED\"},\"contracts/gain-erc20/GainErc20v3Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\\\";\\nimport \\\"../periphery/contracts/access-control/SuAuthenticated.sol\\\";\\n\\n/**\\n * This is fork on openzeppelin ERC20Upgradeable v4.5.0\\n * @dev Implementation of the {IERC20} interface.\\n */\\ncontract GainableERC20v3Upgradeable is\\nInitializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable, SuAuthenticated {\\n    using SafeCastUpgradeable for uint256;\\n    using SafeCastUpgradeable for uint128;\\n    using SafeCastUpgradeable for uint64;\\n    using SafeCastUpgradeable for int256;\\n\\n    /**\\n     * \\u2308log2(1e18)\\u2309 = 60 bit\\n     */\\n    struct IAccount {\\n        uint256 balance;\\n        int256 rewardDebt;\\n        address redirectYieldTo;\\n        // bool isGainDisabled;\\n    }\\n\\n    struct IRewardPool {\\n        uint128 accRewardPerShare;\\n        uint64 lastRewardBlock;\\n    }\\n\\n    error BadEndBlock();\\n\\n    uint256 private constant ACC_REWARD_TOKEN_PRECISION = 1e12;\\n    uint256 public constant REWARD_PRECISION = 1e14; // so min reward is 1e-4 unit cents\\n    IRewardPool public rewardPool;\\n\\n    mapping(address => IAccount) public _accounts;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    // ==========================REWARDER================================\\n    uint256 public rewardPerBlock;\\n    uint256 public rewardEndBlock;\\n\\n    function refillReward(uint256 amount, uint64 endBlock) public {\\n        if (block.number >= endBlock) revert BadEndBlock();\\n        updateRewardPool();\\n\\n        transferFrom(msg.sender, address(this), amount);\\n        uint256 rewardLeftAmount;\\n        // if there are active rewards leftovers\\n        if (rewardEndBlock > 0) {\\n            // if we call refillReward before old endBlock ends\\n            if (block.number < rewardEndBlock) {\\n                rewardLeftAmount = rewardPerBlock * (rewardEndBlock - block.number);\\n            } else {\\n                // if we start the new reward interval that has nothing in common with the old noe\\n                rewardLeftAmount = 0;\\n            }\\n        }\\n        rewardPerBlock = (rewardLeftAmount + amount) / (endBlock - block.number);\\n        rewardEndBlock = endBlock;\\n    }\\n\\n    /**\\n     *  @dev returns total amount of rewards allocated to the all pools on the rage (startBlock, endBlock]\\n     *      i.e. excluding startBlock but including endBlock\\n     */\\n    function rewardsBetweenBlocks(uint256 startBlock, uint256 endBlock) public view returns (uint256) {\\n        // if all rewards were allocation before our range - then answer is 0\\n        if (rewardEndBlock <= startBlock) {\\n            return 0;\\n        } else {\\n            // if rewards allocates on the whole range, than just calc rectangle area\\n            if (endBlock < rewardEndBlock) {\\n                return (endBlock - startBlock) * rewardPerBlock;\\n            } else {\\n                // other-vice, rewards end its allocation during our rage, so we have to calc only until rewardEndBlock\\n                return (rewardEndBlock - startBlock) * rewardPerBlock;\\n            }\\n        }\\n    }\\n\\n    function rewardsLeftToDistribute() internal view returns (uint256) {\\n        if (block.number > rewardEndBlock) {\\n            return 0;\\n        }\\n        return rewardPerBlock * (rewardEndBlock - block.number);\\n    }\\n\\n    function updateRewardPool() public {\\n        if (block.number > rewardPool.lastRewardBlock) {\\n            uint256 activeSupply = _totalSupply - rewardsLeftToDistribute();\\n            // totalSupply - undistributed reward - disabled accounts\\n            if (activeSupply > 0) {\\n                uint256 totalRewardsSinceLastUpdate = rewardsBetweenBlocks(rewardPool.lastRewardBlock, block.number);\\n\\n                rewardPool.accRewardPerShare = rewardPool.accRewardPerShare +\\n                            (totalRewardsSinceLastUpdate * ACC_REWARD_TOKEN_PRECISION / activeSupply).toUint128();\\n            }\\n            rewardPool.lastRewardBlock = block.number.toUint64();\\n        }\\n    }\\n\\n    function pendingRewards(address account) public view returns (uint256) {\\n        // simulate updateRewardPool() in-place\\n        uint256 activeSupply = _totalSupply - rewardsLeftToDistribute();\\n        // We need to have some initial _totalSupply or we'll have division by zero here.\\n        if (activeSupply == 0) {\\n            return 0;\\n        }\\n\\n        uint256 currentAccRewardPerShare = rewardPool.accRewardPerShare;\\n        if (block.number > rewardPool.lastRewardBlock) {\\n            uint256 totalRewardsSinceLastUpdate = rewardsBetweenBlocks(rewardPool.lastRewardBlock, block.number);\\n            // totalSupply - undistributed reward - disabled accounts\\n            currentAccRewardPerShare = currentAccRewardPerShare +\\n                (totalRewardsSinceLastUpdate * ACC_REWARD_TOKEN_PRECISION / activeSupply);\\n        }\\n\\n        // simulate harvest()\\n        IAccount memory user = _accounts[account];\\n        int256 completeAccountReward = (\\n            user.balance * currentAccRewardPerShare / ACC_REWARD_TOKEN_PRECISION\\n        ).toInt256();\\n        uint256 pending = (completeAccountReward - user.rewardDebt).toUint256();\\n\\n        // Number prettier\\n        // on metamask the balanceOf sometimes gives too many digits after the comma\\n        // so balance looks ugly, for example: 12507.259801909711051452 StablePro\\n        // Since in any known fiat currency sub-cent values are essentially worthless, let's round them up if original\\n        // balance doesn't have many decimals - any number of additions of rounded values doesn't increase it\\n        return (pending / REWARD_PRECISION) * REWARD_PRECISION;\\n    }\\n\\n    function harvest(address account) internal {\\n        IAccount storage user = _accounts[account];\\n        updateRewardPool();\\n        int256 accumulatedRewards = (\\n            user.balance * rewardPool.accRewardPerShare / ACC_REWARD_TOKEN_PRECISION\\n        ).toInt256();\\n        uint256 _pendingRewards = (accumulatedRewards - user.rewardDebt).toUint256();\\n\\n        // Effects\\n        user.balance = user.balance + _pendingRewards;\\n        // Should use new balance\\n        user.rewardDebt = (user.balance * rewardPool.accRewardPerShare / ACC_REWARD_TOKEN_PRECISION).toInt256();\\n    }\\n\\n    function getYieldAPR() public view returns (uint256) {\\n        if (block.number > rewardEndBlock) {\\n            return 0;\\n        }\\n        uint256 activeSupply = _totalSupply - rewardsLeftToDistribute();\\n        uint256 blocksPerYear = 4 * 60 * 24 * 365;\\n\\n        return rewardPerBlock * blocksPerYear * 1e18 / activeSupply;\\n    }\\n    //===================================================================\\n    // We need to disable custom-errors rule to behave like standard ERC20 token\\n    /* solhint-disable custom-errors */\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __ERC20_init(address authControl_, string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(authControl_, name_, symbol_);\\n    }\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __ERC20_init_unchained(\\n        address authControl_,\\n        string memory name_,\\n        string memory symbol_\\n    ) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n        __suAuthenticatedInit(authControl_);\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _accounts[account].balance + pendingRewards(account);\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _accounts[from].balance;\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _accounts[from].balance = fromBalance - amount;\\n            _accounts[from].rewardDebt = (\\n                _accounts[from].balance * rewardPool.accRewardPerShare / ACC_REWARD_TOKEN_PRECISION\\n            ).toInt256();\\n        }\\n        _accounts[to].balance += amount;\\n        _accounts[to].rewardDebt = (\\n            _accounts[to].balance * rewardPool.accRewardPerShare / ACC_REWARD_TOKEN_PRECISION\\n        ).toInt256();\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _accounts[account].balance += amount;\\n        _accounts[account].rewardDebt = (\\n            _accounts[account].balance * rewardPool.accRewardPerShare / ACC_REWARD_TOKEN_PRECISION\\n        ).toInt256();\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _accounts[account].balance;\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _accounts[account].balance = accountBalance - amount;\\n            _accounts[account].rewardDebt = (\\n                _accounts[account].balance * rewardPool.accRewardPerShare / ACC_REWARD_TOKEN_PRECISION\\n            ).toInt256();\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256) internal {\\n        if (from != address(0)) {\\n            harvest(from);\\n        }\\n        if (to != address(0)) {\\n            harvest(to);\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    // solhint-disable-next-line no-empty-blocks\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /* solhint-enable custom-errors */\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x6d965db5700bc3623efb4a35061ddfd9b1407a1e38eb37b6e253171c1fce4ed5\",\"license\":\"MIT\"},\"contracts/interfaces/IRewardChefV2.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"../periphery/contracts/interfaces/oracle/ISuOracle.sol\\\";\\n\\n/**\\n * @title RewardChefV2\\n * @notice fork of MasterChefV2(13/05/2023) https://etherscan.io/address/0xef0881ec094552b2e128cf945ef17a6752b4ec5d#code\\n * @dev This contract is based on MVC2, but uses \\\"virtual\\\" balances instead of storing real ERC20 tokens\\n * and uses address of this assets instead of pid.\\n * Rewards that are distributed have to be deposited using refillReward(uint256 amount, uint64 endBlock)\\n **/\\ninterface IRewardChefV2 {\\n    /**\\n      * @notice Info of each reward pool.\\n      * @param accSushiPerShare -\\n      * @param lastRewardBlock -\\n      * @param allocPoint - The amount of allocation points assigned to the pool.\\n      * Also known as the amount of REWARD_TOKEN to distribute per block.\\n      * @param lpSupply -\\n     **/\\n    struct PoolInfo {\\n        uint128 accSushiPerShare;\\n        uint64 lastRewardBlock;\\n        uint64 allocPoint;\\n        uint256 lpSupply;\\n    }\\n\\n    /**\\n      * @notice Info of each user.\\n      * @param amount - token amount the user has provided.\\n      * @param rewardDebt - The amount of rewards entitled to the user.\\n      * @param multiplicator1e18 - deposit amount multiplicator for current user, that depends on his lockupPeriod\\n      * @param lockupPeriodSeconds - users lockupPeriod in seconds\\n      * @param lockupStartTimestamp - timestamp when user start lockup\\n     **/\\n    struct UserInfo {\\n        uint256 amount;\\n        int256 rewardDebt;\\n\\n        uint256 multiplicator1e18;\\n        uint256 lockupPeriodSeconds;\\n        uint256 lockupStartTimestamp;\\n    }\\n\\n    /**\\n      * @notice Lockup info struct for a view method getPossibleLockupPeriodsSeconds()\\n      * @param lockupPeriodSeconds - available lockupPeriod in seconds\\n      * @param multiplicator1e18 - deposit amount multiplicator for this lockup period\\n     **/\\n    struct ILockupPeriod {\\n        uint256 lockupPeriodSeconds;\\n        uint256 multiplicator1e18;\\n    }\\n\\n    // =======================================EVENTS=============================================\\n    event VirtualDeposit(address indexed user, address indexed asset, uint256 amount);\\n    event VirtualWithdraw(address indexed user, address indexed asset, uint256 amount);\\n    event ResetAmount(\\n        address indexed user, address indexed asset, address indexed to, uint256 amount, uint256 lockupPeriodSeconds\\n    );\\n    event Harvest(address indexed user, address indexed asset, uint256 amount);\\n    event LogPoolAddition(address indexed asset, uint256 allocPoint);\\n    event LogSetPool(address indexed asset, uint256 allocPoint);\\n    event LogUpdatePool(address indexed asset, uint64 lastRewardBlock, uint256 lpSupply, uint256 accSushiPerShare);\\n\\n    // =======================================ERRORS=============================================\\n    error BadEndBlockForRefill();\\n    error ZeroLockupPeriod();\\n    error ZeroMultiplicator();\\n    error PoolExist();\\n    error PoolNotExist();\\n    error DifferentLockup();\\n    error HarvestBeforeLockup();\\n\\n    // =========================================VARS=============================================\\n    /**\\n     *  @dev Total allocation points. Must be the sum of all allocation points in all pools.\\n     * The good practice, to always keep this variable is equal 1000.\\n     */\\n    function totalAllocPoint() external view returns ( uint256 );\\n\\n    // =======================================REWARDER=============================================\\n    // solhint-disable-next-line func-name-mixedcase\\n    function REWARD_TOKEN() external view returns ( IERC20Upgradeable );\\n    // solhint-disable-next-line func-name-mixedcase\\n    function ORACLE() external view returns ( ISuOracle );\\n    function rewardPerBlock() external view returns ( uint256 );\\n    function rewardEndBlock() external view returns ( uint256 );\\n\\n    /**\\n     * @dev admin transfer REWARD_TOKEN to contract to increase rewards per block\\n     */\\n    function refillReward(uint256 amount, uint64 endBlock) external;\\n    /**\\n     * @dev returns total amount of rewards allocated to the all pools on the rage (startBlock, endBlock]\\n     * i.e. excluding startBlock but including endBlock\\n     */\\n    function rewardsBetweenBlocks(uint256 startBlock, uint256 endBlock) external returns ( uint256 );\\n\\n    //=======================================LOCKUP LOGIC===========================================\\n    /**\\n     * @notice view method that return all lockupPeriods in ILockupPeriod struct\\n     */\\n    function getPossibleLockupPeriodsSeconds() external view returns (ILockupPeriod[] memory);\\n\\n    /**\\n     * @notice method to add new LockupPeriods with it multiplicator\\n     * @dev If multiplicator1e18 == 0 => we remove lockupPeriodSeconds else we add it\\n     * @param lockupPeriodSeconds Amount of seconds of lockupPeriod we want to add/remove\\n     * @param multiplicator1e18 Multiplicator for that lockupPeriod\\n     */\\n    function setPossibleLockupPeriodsSeconds(uint256 lockupPeriodSeconds, uint256 multiplicator1e18) external;\\n\\n    //================================CORE REWARD CHEF METHODS======================================\\n    /**\\n     * @notice Add a new reward pool. Can only be called by the admin. Can't add the same LP token more than once.\\n     * @param allocPoint AP of the new pool.\\n     * @param _asset Address of the ERC-20 token.\\n     */\\n    function add(uint256 allocPoint, address _asset) external;\\n\\n    /**\\n     * @notice Update the given pool's REWARD_TOKEN allocation point. Can only be called by the admin.\\n     * Can't be called for asset that was not added by add() function.\\n     * @param _asset Address of the ERC-20 token.\\n     * @param _allocPoint New AP of the pool.\\n     */\\n    function set(address _asset, uint256 _allocPoint) external;\\n\\n    /**\\n     * @notice View function to see pending REWARD_TOKEN on frontend.\\n     * @param _asset Address of the ERC-20 token.\\n     * @param _user Address of user.\\n     * @return pending REWARD_TOKEN reward for a given user.\\n     */\\n    function pendingSushi(address _asset, address _user) external view returns ( uint256 );\\n\\n    /**\\n     * @notice Update reward variables of the given pool.\\n     * @param asset Asset address\\n     * @return updated pool info\\n     */\\n    function updatePool(address asset) external returns ( PoolInfo memory );\\n\\n    /**\\n     * @notice Update reward variables for all pools. Be careful of gas spending!\\n     */\\n    function updateAllPools() external;\\n\\n    /**\\n     * @notice analogues to MCV2 Deposit method, but can be called only by trusted address (onlyRewardAccess)\\n     * that is trusted to honestly calc how many \\\"virtual\\\" tokens have to be allocated for each user.\\n     * @param asset Asset address\\n     * @param to User for whom we will increase the virtual balance\\n     * @param amountEDecimal Quantity without taking into account the multiplier that we will add\\n     * @param lockupPeriodSeconds Current deposit lockup period. Can't increase amount with 2 different lockupPeriods\\n     */\\n    function increaseAmount(address asset, address to, uint256 amountEDecimal, uint256 lockupPeriodSeconds) external;\\n\\n    /**\\n     * @notice Analogues to MVC2 Withdraw method, that can be called only by trusted address (onlyRewardAccess)\\n     * that is trusted to honestly calc how many \\\"virtual\\\" tokens have to be allocated for each user.\\n     * @param asset Asset address\\n     * @param to User for whom we will subtract the virtual balance\\n     * @param amountEDecimal Quantity without taking into account the multiplier that we will subtract\\n     */\\n    function decreaseAmount(address asset, address to, uint256 amountEDecimal) external;\\n\\n    /**\\n     * @notice View method that return penalty for user that will decrease amount by {amountEDecimal}\\n     * @param asset Asset address\\n     * @param to User who will decrease his deposit amount\\n     * @param amountEDecimal Quantity without taking into account the multiplier that we will subtract\\n     */\\n    function getDecreaseAmountRewardPenalty(\\n        address asset,\\n        address to,\\n        uint256 amountEDecimal\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Harvest proceeds for transaction sender to {to}.\\n     * @dev Here we send msg.sender pendingSushi to {to} and update lockup period.\\n     * @param asset Asset address\\n     * @param to Receiver of REWARD_TOKEN rewards.\\n     */\\n    function harvest(address asset, address to, uint256 newLockupPeriodSeconds) external;\\n\\n    // TODO: check for exploits\\n    /**\\n     * @notice Withdraw without caring about rewards. EMERGENCY ONLY.\\n     * @param asset Asset address\\n     * @param to The address of the user whose information will be cleared\\n     */\\n    function resetAmount(address asset, address to) external;\\n\\n    //================================VIEW METHODS======================================\\n    /**\\n     * @notice Method for frontend that return pool APR\\n     * @param asset Asset address\\n     */\\n    function getPoolApr(address asset) external view returns (uint256);\\n\\n    /**\\n     * @notice Reward tokens can be locked for certain period of time.\\n     * So user have to wait until at least timestamp to be able to harvest them.\\n     * There's no lock or any restriction on withdrawing principle.\\n     * This function return end timestamp for that lock.\\n     * @param asset Asset address\\n     * @param user User address\\n     */\\n    function getHarvestLockupEndTimestamp(address asset, address user) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc03f1bb9765cbe888e07c506481afe4c17e46b22a71f6e955ce65e1427ad5c40\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ISuPausable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\ninterface ISuPausable {\\n    /* ===================== EVENTS ===================== */\\n    /**\\n     * @dev Emitted when the pause is triggered by `account` for the \\\"collateral\\\".\\n     **/\\n    event PausedCollateral(address account, address collateral);\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account` for the \\\"_contract\\\".\\n     **/\\n    event PausedContract(address account, address _contract);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account` for the \\\"collateral\\\".\\n     **/\\n    event UnpausedCollateral(address account, address collateral);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account` for the \\\"_contract\\\".\\n     **/\\n    event UnpausedContract(address account, address _contract);\\n\\n    /* ===================== ERRORS ===================== */\\n    error AlreadyPaused();\\n    error NotPaused();\\n\\n    /* ==================== MUTABLE METHODS ==================== */\\n    /**\\n     * @dev Triggers stopped state for the \\\"collateral\\\".\\n     **/\\n    function pauseCollateral(address collateral) external;\\n\\n    /**\\n     * @dev Triggers stopped state for all \\\"collaterals\\\".\\n     **/\\n    function batchPauseCollateral(address[] calldata collaterals) external;\\n\\n    /**\\n     * @dev Triggers stopped state for the \\\"_contract\\\".\\n     **/\\n    function pauseContract(address _contract) external;\\n\\n    /**\\n     * @dev Triggers stopped state for the protocol.\\n     **/\\n    function pauseAll() external;\\n\\n    /**\\n     * @dev Returns \\\"collateral\\\" to normal state.\\n     **/\\n    function unpauseCollateral(address collateral) external;\\n\\n    /**\\n     * @dev Returns all \\\"collaterals\\\" to normal state.\\n     **/\\n    function batchUnpauseCollateral(address[] calldata collaterals) external;\\n\\n    /**\\n     * @dev Returns \\\"_contract\\\" to normal state.\\n     **/\\n    function unpauseContract(address _contract) external;\\n\\n    /**\\n     * @dev Returns protocol to normal state. All previous stopped collaterals and contracts are in the same state.\\n     **/\\n    function unpauseAll() external;\\n\\n    /* ==================== VIEW METHODS ==================== */\\n    /**\\n     * @dev Returns true if the contract for the \\\"collateral\\\" is paused, and false otherwise.\\n     **/\\n    function isPaused(address collateral) external view returns (bool);\\n}\",\"keccak256\":\"0x0a7500b38c8cb19a81e9fcdcd18c18e9647626704f45476dbee46c7548f8ee09\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ISuVault.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../lending/SuVaultParameters.sol\\\";\\nimport \\\"../interfaces/ISuVaultParameters.sol\\\";\\nimport \\\"../reward/RewardChefV2.sol\\\";\\n\\ninterface ISuVault is ISuVaultParameters {\\n    /* ===================== EVENTS ===================== */\\n    /**\\n     * @notice Event triggered when user destroys cdp\\n     **/\\n    event PositionLiquidated(\\n        address asset, address owner, address repayer, uint256 assetAmountEDecimal, uint256 repaymentE18\\n    );\\n\\n    /**\\n     * @notice Event triggered when user liquidate some part of cdp (debt > 0)\\n     **/\\n    event PositionLiquidatedPartial(\\n        address asset, address owner, address repayer, uint256 assetAmountEDecimal, uint256 repaymentE18\\n    );\\n\\n    /**\\n     * @notice Event triggered when user call repay() function\\n     **/\\n    event PositionRepaid(address repayer, uint256 repaymentE18, uint256 excessAndFeeE18);\\n\\n    /**\\n     * @notice Event triggered when user didnt withdraw collateral before price goes down\\n     **/\\n    event LiquidationTriggered(address indexed asset, address indexed owner);\\n\\n    /* ===================== ERRORS ===================== */\\n    error LiquidationIsTriggered();\\n    error Restricted();\\n    error WithdrawExceeded();\\n    error WrongDebt();\\n    error WrongTotalDebt();\\n    error UselessTransaction();\\n    error AssetDebtLimit();\\n\\n    /* ====================== VARS ====================== */\\n    /**\\n     * @notice how much collateral the users staked == collaterals[asset][user], i.e deposits\\n     * EDecimal means that this value in asset denomination, i.e. x{human readable value} * 10^{erc20.decimals()}\\n     **/\\n    function collateralsEDecimal (address asset, address user) external view returns ( uint256 );\\n\\n    /**\\n     * @notice stablecoin amount\\n     **/\\n    function debtsE18 (address asset, address user) external view returns ( uint256 );\\n\\n    /**\\n     * @notice stablecoin amount + fee accumulated before lastUpdate == debtWithFeesE18[asset][user]\\n     **/\\n    function debtWithFeesE18 (address asset, address user) external view returns ( uint256 );\\n\\n    /**\\n     * @notice the last time, when every fee before lastUpdates are calculated in the debt.\\n     * All data such as fees are from lastUpdate only\\n     **/\\n    function lastUpdate (address asset, address user) external view returns ( uint256 );\\n\\n    /**\\n     * @notice asset => user => block number\\n     **/\\n    function liquidationBlock (address asset, address user) external view returns (uint256);\\n\\n    /**\\n     * @notice current interest that user pay for stabilityFee[asset][user]\\n     **/\\n    function stabilityFeeE18 (address asset, address user) external view returns ( uint256 );\\n\\n    /**\\n     * @notice Stats, how much stablecoins were borrowed against particular asset == tokenDebtsE18[asset]\\n     **/\\n    function tokenDebtsE18 (address asset) external view returns ( uint256 );\\n\\n    /**\\n     * @notice tokenDebtsE18[asset] + accumulated fee in all CDPs in this asset\\n     **/\\n    function tokenDebtsWithFeesE18 (address asset) external view returns ( uint256 );\\n\\n    /* ==================== MUTABLE METHODS ==================== */\\n    /**\\n     * @notice borrow usdPRO using selected asset.\\n     * user expected previously to deposit collateral and then being able to take stablecoin\\n     * user can't create single position with multiple collaterals?\\n     **/\\n    function borrow ( address asset, address user, uint256 amountE18, uint256 lockupPeriodSeconds ) external;\\n\\n    /**\\n     * @notice collateral deposit\\n     **/\\n    function deposit ( address asset, address user, uint256 amountEDecimal ) external;\\n\\n    /**\\n     * @notice only destroy debt info\\n     * @dev onlyVaultAccess, exit -> _repay -> destroy if debt == 0\\n     **/\\n    function destroy ( address asset, address user ) external;\\n\\n    /**\\n     * @notice withdraw in case of some protocol errors, users can always get back their tokens\\n     **/\\n    function emergencyWithdraw ( address asset, address user, uint256 amountEDecimal ) external;\\n\\n    /**\\n     * @notice liquidate user position, just cut debt and withdraw user collateral without asking StablePro\\n     **/\\n    function liquidate(\\n        address asset,\\n        address owner,\\n        address recipient,\\n        uint256 assetAmountEDecimal,\\n        uint256 stablecoinAmountE18\\n    ) external;\\n\\n    /**\\n     * @notice set new RewardChef contract address\\n     **/\\n    function setRewardChef(address rewardChef) external;\\n\\n    /**\\n     * @notice Marks a position as to be liquidated\\n     * @param asset The address of the main collateral token of a position\\n     * @param positionOwner The owner of a position\\n     * @dev Sets the current block as liquidationBlock for the position. Can be triggered only once for the position.\\n     **/\\n    function triggerLiquidation(address asset, address positionOwner) external;\\n\\n    /**\\n     * @notice Update all main state vars\\n     * position is not allowed to be modified during liquidation, because when it's launched -\\n     * liquidators want to be sure they can participate\\n     * @dev is called, when user borrows more\\n     **/\\n    function update ( address asset, address user ) external;\\n\\n    /**\\n     * @notice collateral withdraw\\n     **/\\n    function withdraw ( address asset, address user, address recipient, uint256 amountEDecimal ) external;\\n\\n    /**\\n     * @notice Burns a debt repayment and transfers fees to the foundation.\\n     * @param repayer The person who repaies by debt and transfers stablecoins to the foundation\\n     * @param stablecoinsToRepaymentE18 The amount of stablecoins which will be burned as a debt repayment\\n     * @param stablecoinsToFoundationE18 The amount of stablecoins which will be transfered to the foundation(e.g fees)\\n     **/\\n    function payFeeAndBurn(\\n        address repayer,\\n        uint256 stablecoinsToRepaymentE18,\\n        uint256 stablecoinsToFoundationE18\\n    ) external;\\n\\n    /* ==================== VIEW METHODS ==================== */\\n\\n    /**\\n     * @notice fee is increased with time. Any call of vault.update would calc fee in debt and restart fee timer\\n     **/\\n    function calculateFeeE18 ( address asset, address user, uint256 amountE18 ) external view returns ( uint256 );\\n\\n    /**\\n     * @notice total dept is calculated as current debt with added calculated fee, don't use it in practice\\n     **/\\n    function getTotalDebtE18 ( address asset, address user ) external view returns ( uint256 );\\n}\\n\",\"keccak256\":\"0x7d9cc838d27dd71fff62d41f5523a4a0eda02c1ccdfd64a9e51578a044f833a5\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ISuVaultParameters.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title SuVaultParameters\\n * @notice SuVaultParameters is Singleton for Access Control, like configuration contract.\\n **/\\ninterface ISuVaultParameters {\\n    /* ====================== VARS ====================== */\\n    /**\\n     * @notice Stability fee that is used in calculateFeeE18 to see how much user debt increased.\\n     * It can be different for each collateral\\n     **/\\n    function protocolStabilityFeeE18 (address asset) external view returns ( uint256 );\\n\\n    /**\\n     * @notice Limit for each collateral-asset to manage risk profile\\n     **/\\n    function tokenDebtLimitE18 (address asset) external view returns ( uint256 );\\n\\n    /* ===================== ERRORS ===================== */\\n    error ZeroAddress();\\n\\n    /* ==================== METHODS ==================== */\\n    // TODO: creating new collaterals and modifying existing ones should be separate functions for security reason\\n    /**\\n     * @notice manager is allowed to add new collaterals and modify existing ones\\n     **/\\n    function setCollateral (address asset, uint256 stabilityFeeValueE18, uint256 stablecoinLimitE18) external;\\n\\n    /**\\n     * @notice manager is allowed to change foundation that receive fees and etc\\n     **/\\n    function setFoundation ( address newFoundation ) external;\\n\\n    /**\\n     * @notice set fee percentage (1e18 = 100%)\\n     **/\\n    function setStabilityFeeE18 ( address asset, uint256 newValue ) external;\\n\\n    /**\\n     * @notice debt limit can be changed for any collateral along with liquidation and stability fees\\n     **/\\n    function setTokenDebtLimitE18 ( address asset, uint256 limit ) external;\\n}\\n\",\"keccak256\":\"0x4cc72c9216b72ddfa81b20967d64e202cc2617d16c00b817f94e54b49767221d\",\"license\":\"UNLICENSED\"},\"contracts/lending/SuVault.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\n/*\\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\\n*/\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"./SuVaultParameters.sol\\\";\\nimport \\\"../StablePro.sol\\\";\\nimport \\\"../reward/RewardChefV2.sol\\\";\\nimport \\\"../interfaces/ISuVault.sol\\\";\\nimport \\\"../emergency/SuPausableAbstract.sol\\\";\\n\\n/**\\n * @title SuVault\\n * @notice Users don't have direct access to it, only through SuManager\\n * @dev See ISuVault interface and SuVaultParameters contract for full details.\\n */\\ncontract SuVault is SuVaultParameters, SuPausableAbstract, ISuVault  {\\n    StablePro public STABLE_PRO;\\n\\n    mapping(address => mapping(address => uint256)) public collateralsEDecimal;\\n    mapping(address => mapping(address => uint256)) public debtWithFeesE18;\\n    mapping(address => mapping(address => uint256)) public debtsE18;\\n    mapping(address => uint256) public tokenDebtsWithFeesE18;\\n    mapping(address => uint256) public tokenDebtsE18;\\n    mapping(address => mapping(address => uint256)) public stabilityFeeE18;\\n    mapping(address => mapping(address => uint256)) public lastUpdate;\\n    mapping(address => mapping(address => uint256)) public liquidationBlock;\\n\\n    /**\\n     * @notice check if liquidation process not started for asset of user\\n     **/\\n    modifier notLiquidating(address asset, address user) {\\n        if (liquidationBlock[asset][user] > 0) revert LiquidationIsTriggered();\\n        _;\\n    }\\n\\n    RewardChefV2 public rewardChef;\\n\\n    /**\\n     * @notice vault is initialize with parameters for auth (we are using OZ instead)\\n     * and it accept address for wrapped eth, main stable coin, and probably governance token\\n     **/\\n    function initialize(\\n        address _authControl,\\n        address _stablePro,\\n        address _foundation,\\n        address _rewardChef,\\n        address _suPausable\\n    ) public initializer {\\n        __suVaultParametersInit(_authControl, payable(this), _foundation);\\n        __suPausableAbstractInit(_suPausable);\\n\\n        STABLE_PRO = StablePro(_stablePro);\\n        rewardChef = RewardChefV2(_rewardChef);\\n    }\\n\\n    /**\\n     * @notice do not accept direct payments from users because they will be stuck on contract address\\n     **/\\n    receive() external payable {\\n        revert Restricted();\\n    }\\n\\n    function update(\\n        address asset,\\n        address user\\n    ) public onlyVaultAccess notLiquidating(asset, user) whenNotPaused(asset) {\\n        // probably should be checked if zero then skip\\n        uint256 newDebtWithFeesE18 = getTotalDebtE18(asset, user);\\n\\n        tokenDebtsWithFeesE18[asset] = tokenDebtsWithFeesE18[asset] - debtWithFeesE18[asset][user] + newDebtWithFeesE18;\\n        debtWithFeesE18[asset][user] = newDebtWithFeesE18;\\n        stabilityFeeE18[asset][user] = protocolStabilityFeeE18[asset];\\n        lastUpdate[asset][user] = block.timestamp;\\n    }\\n\\n    // public?\\n    function destroy(address asset, address user) public onlyVaultAccess whenNotPaused(asset) {\\n        delete stabilityFeeE18[asset][user];\\n        delete lastUpdate[asset][user];\\n        delete liquidationBlock[asset][user];\\n    }\\n\\n    function deposit(\\n        address asset,\\n        address user,\\n        uint256 amountEDecimal\\n    ) external onlyVaultAccess notLiquidating(asset, user) whenNotPaused(asset) {\\n        SafeERC20Upgradeable.safeTransferFrom(IERC20Upgradeable(asset), user, address(this), amountEDecimal);\\n        collateralsEDecimal[asset][user] = collateralsEDecimal[asset][user] + amountEDecimal;\\n    }\\n\\n    function withdraw(\\n        address asset,\\n        address user,\\n        address recipient,\\n        uint256 amountEDecimal\\n    ) public onlyVaultAccess whenNotPaused(asset) {\\n        if (amountEDecimal > collateralsEDecimal[asset][user]) revert WithdrawExceeded();\\n        collateralsEDecimal[asset][user] = collateralsEDecimal[asset][user] - amountEDecimal;\\n        if (recipient != address(0)) {\\n            SafeERC20Upgradeable.safeTransfer(IERC20Upgradeable(asset), recipient, amountEDecimal);\\n        }\\n    }\\n\\n    // TODO: what role should we have? Need whenNotPaused(asset)?\\n    function emergencyWithdraw(\\n        address asset,\\n        address user,\\n        uint256 amountEDecimal\\n    ) external onlyVaultAccess whenNotPaused(asset) {\\n        if (amountEDecimal > collateralsEDecimal[asset][user]) revert WithdrawExceeded();\\n        collateralsEDecimal[asset][user] = collateralsEDecimal[asset][user] - amountEDecimal;\\n        SafeERC20Upgradeable.safeTransfer(IERC20Upgradeable(asset), user, amountEDecimal);\\n\\n        // solhint-disable-next-line no-empty-blocks\\n        try rewardChef.resetAmount(asset, user) {} catch {}\\n    }\\n\\n    function borrow(\\n        address asset,\\n        address user,\\n        uint256 amountE18,\\n        uint256 lockupPeriodSeconds\\n    ) external onlyVaultAccess notLiquidating(asset, user) whenNotPaused(asset) {\\n        update(asset, user);\\n\\n        debtsE18[asset][user] = debtsE18[asset][user] + amountE18;\\n        debtWithFeesE18[asset][user] = debtWithFeesE18[asset][user] + amountE18;\\n        tokenDebtsE18[asset] = tokenDebtsE18[asset] + amountE18;\\n        tokenDebtsWithFeesE18[asset] = tokenDebtsWithFeesE18[asset] + amountE18;\\n\\n        if (tokenDebtsWithFeesE18[asset] > tokenDebtLimitE18[asset]) revert AssetDebtLimit();\\n\\n        STABLE_PRO.mint(user, amountE18);\\n        rewardChef.increaseAmount(asset, user, amountE18, lockupPeriodSeconds);\\n    }\\n\\n    function _cutDebt(address asset, address user, uint256 stablecoinAmountE18) internal onlyVaultAccess {\\n        if (stablecoinAmountE18 > debtWithFeesE18[asset][user]) revert WrongDebt();\\n        if (stablecoinAmountE18 > tokenDebtsWithFeesE18[asset]) revert WrongTotalDebt();\\n\\n        uint256 fee = stablecoinAmountE18 > debtsE18[asset][user] ? stablecoinAmountE18 - debtsE18[asset][user] : 0;\\n\\n        // current debt of user by given collateral\\n        // is being decreased by chosen amount\\n        debtWithFeesE18[asset][user] = debtWithFeesE18[asset][user] - stablecoinAmountE18;\\n        // we don't need to count fee here\\n        debtsE18[asset][user] = debtsE18[asset][user] + fee - stablecoinAmountE18;\\n\\n        // total debt by asset is being decreased too\\n        // this value is used to limit total collateral allowed debt\\n        tokenDebtsWithFeesE18[asset] = tokenDebtsWithFeesE18[asset] - stablecoinAmountE18;\\n        tokenDebtsE18[asset] = tokenDebtsE18[asset] + fee - stablecoinAmountE18;\\n        rewardChef.decreaseAmount(asset, user, stablecoinAmountE18 - fee);\\n    }\\n\\n    function liquidate(\\n        address asset,\\n        address user,\\n        address recipient,\\n        uint256 assetAmountEDecimal,\\n        uint256 stablecoinAmountE18\\n    ) external onlyVaultAccess whenNotPaused(asset) {\\n        if (assetAmountEDecimal == 0 && stablecoinAmountE18 == 0) revert UselessTransaction();\\n\\n        // reduce debt and don't repay, stablecoinAmount == 0 in case of withdraw\\n        if (stablecoinAmountE18 != 0) {\\n            _cutDebt(asset, user, stablecoinAmountE18);\\n        }\\n\\n        // vault will transfer collateral to the user\\n        if (assetAmountEDecimal != 0) {\\n            withdraw(asset, user, recipient, assetAmountEDecimal);\\n        }\\n\\n        // clean state\\n        if (debtWithFeesE18[asset][user] == 0) {\\n            destroy(asset, user);\\n            emit PositionLiquidated(asset, user, recipient, assetAmountEDecimal, stablecoinAmountE18);\\n        } else {\\n            emit PositionLiquidatedPartial(asset, user, recipient, assetAmountEDecimal, stablecoinAmountE18);\\n        }\\n    }\\n\\n    function triggerLiquidation(\\n        address asset,\\n        address positionOwner\\n    ) external onlyVaultAccess notLiquidating(asset, positionOwner) whenNotPaused(asset) {\\n        emit LiquidationTriggered(asset, positionOwner);\\n\\n        liquidationBlock[asset][positionOwner] = block.number;\\n    }\\n\\n    function getTotalDebtE18(address asset, address user) public view returns (uint256) {\\n        uint256 debtWithFeeE18 = debtWithFeesE18[asset][user];\\n        uint256 feeE18 = calculateFeeE18(asset, user, debtWithFeeE18);\\n        // debtWithFee before lastUpdate + fee after lastUpdate\\n        return debtWithFeeE18 + feeE18;\\n    }\\n\\n    function calculateFeeE18(address asset, address user, uint256 amountE18) public view returns (uint256) {\\n        uint256 sFeePercentE18 = stabilityFeeE18[asset][user];\\n        uint256 timePast = block.timestamp - lastUpdate[asset][user];\\n\\n        return amountE18 * sFeePercentE18 * timePast / (365 days) / 1e18;\\n    }\\n\\n    function payFeeAndBurn(\\n        address repayer,\\n        uint256 stablecoinsToRepaymentE18,\\n        uint256 stablecoinsToFoundationE18\\n    ) external onlyVaultAccess {\\n        emit PositionRepaid(repayer, stablecoinsToRepaymentE18, stablecoinsToFoundationE18);\\n\\n        // the repayer transfers fees and excesses over the repayment\\n        if (stablecoinsToFoundationE18 != 0) {\\n            SafeERC20Upgradeable.safeTransferFrom(STABLE_PRO, repayer, foundation, stablecoinsToFoundationE18);\\n        }\\n\\n        // we burn stablecoin from user\\n        STABLE_PRO.burn(repayer, stablecoinsToRepaymentE18);\\n    }\\n\\n    function setRewardChef(address _rewardChef) public onlyVaultAccess {\\n        rewardChef = RewardChefV2(_rewardChef);\\n    }\\n}\\n\",\"keccak256\":\"0x2c338ef38d7a477b89cfb6097548f8983b6376183aa157c7f364ce647d4f3551\",\"license\":\"BSL 1.1\"},\"contracts/lending/SuVaultParameters.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\r\\n\\r\\nimport \\\"../interfaces/ISuVaultParameters.sol\\\";\\r\\nimport \\\"../periphery/contracts/access-control/SuAuthenticated.sol\\\";\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// TODO: merge with ManagerParameters\\r\\n/**\\r\\n * @title SuVaultParameters\\r\\n * @dev See ISuVaultParameters interface for full details.\\r\\n */\\r\\nabstract contract SuVaultParameters is SuAuthenticated, ISuVaultParameters {\\r\\n    mapping(address => uint256) public protocolStabilityFeeE18;\\r\\n    mapping(address => uint256) public tokenDebtLimitE18;\\r\\n    address public foundation;\\r\\n    address public vault;\\r\\n\\r\\n    // how can vault address be known at this moment?\\r\\n    // Precult based on CREATE spec\\r\\n    // can be created another function to set vault address once deployed?\\r\\n    // Yes, possibly with some logic change\\r\\n    function __suVaultParametersInit(\\r\\n        address _authControl,\\r\\n        address payable _vault,\\r\\n        address _foundation\\r\\n    )  internal onlyInitializing {\\r\\n        if (_vault == address(0) || _foundation == address(0)) revert ZeroAddress();\\r\\n\\r\\n        __suAuthenticatedInit(_authControl);\\r\\n        vault = _vault;\\r\\n        foundation = _foundation;\\r\\n    }\\r\\n\\r\\n    function setFoundation(address newFoundation) external onlyDAO {\\r\\n        if (newFoundation == address(0)) revert ZeroAddress();\\r\\n        foundation = newFoundation;\\r\\n    }\\r\\n\\r\\n    // is called by Manager\\r\\n    function setCollateral(\\r\\n        address asset,\\r\\n        uint256 stabilityFeeValueE18,\\r\\n        uint256 stablecoinLimitE18\\r\\n    ) external onlyVaultAccess {\\r\\n        // stability fee should be validated in range, what is stability fee should be described here?\\r\\n        setStabilityFeeE18(asset, stabilityFeeValueE18);\\r\\n        // why debt limit for collateral is necessary? to manage risks in case of collateral failure?\\r\\n        setTokenDebtLimitE18(asset, stablecoinLimitE18);\\r\\n    }\\r\\n\\r\\n    function setStabilityFeeE18(address asset, uint256 newValue) public onlyVaultAccess {\\r\\n        protocolStabilityFeeE18[asset] = newValue;\\r\\n    }\\r\\n\\r\\n    function setTokenDebtLimitE18(address asset, uint256 limit) public onlyVaultAccess {\\r\\n        tokenDebtLimitE18[asset] = limit;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x6a91a92cb6c0aaa9a0bf0fb7030b41179c4e39da48e80ac24e2c58f3aa3f5b4c\",\"license\":\"BSL 1.1\"},\"contracts/periphery/contracts/access-control/SuAccessRoles.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title SuAccessRoles Library\\n * @dev SuAuthenticated and SuAccessControlSingleton need to have this constants\\n * Hierarchy:\\n *      1. DAO - can give admins and system roles\\n *      2.1. Admin - can set Alerters\\n *      2.2. System - includes Minter, Vault, Liquidation and Reward roles, don't have access to give some roles.\\n *      3. Alerter - can send alerts and trigger rate limits, don't have access to give some roles.\\n */\\nabstract contract SuAccessRoles {\\n    bytes32 public constant ADMIN_ROLE = 0x00;\\n\\n    bytes32 public constant DAO_ROLE = keccak256(\\\"DAO_ROLE\\\");\\n\\n    bytes32 public constant ALERTER_ROLE = keccak256(\\\"ALERTER_ROLE\\\");\\n\\n    // system roles\\n    bytes32 public constant MINT_ACCESS_ROLE = keccak256(\\\"MINT_ACCESS_ROLE\\\");\\n    bytes32 public constant VAULT_ACCESS_ROLE = keccak256(\\\"VAULT_ACCESS_ROLE\\\");\\n    bytes32 public constant LIQUIDATION_ACCESS_ROLE = keccak256(\\\"LIQUIDATION_ACCESS_ROLE\\\");\\n    bytes32 public constant REWARD_ACCESS_ROLE = keccak256(\\\"REWARD_ACCESS_ROLE\\\");\\n}\\n\",\"keccak256\":\"0x024209469b6b337eef6cf520501d1e6c2ba66a79f014c25220a35e407d69b02e\",\"license\":\"BSL 1.1\"},\"contracts/periphery/contracts/access-control/SuAuthenticated.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/access-control/ISuAccessControl.sol\\\";\\nimport \\\"./SuAccessRoles.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @title SuAuthenticated\\n * @dev other contracts should inherit to be authenticated.\\n * The address of SuAccessControlSingleton should be one for all contract that inherits SuAuthenticated\\n */\\nabstract contract SuAuthenticated is Initializable, SuAccessRoles, IERC165Upgradeable {\\n    ISuAccessControl public ACCESS_CONTROL_SINGLETON;\\n\\n    error OnlyDAOError();\\n    error OnlyAdminError();\\n    error OnlyAlerterError();\\n    error OnlyVaultAccessError();\\n    error OnlyLiquidationAccessError();\\n    error OnlyMintAccessError();\\n    error OnlyRewardAccessError();\\n    error OnlyRoleError();\\n    error BadAccessControlSingleton();\\n\\n    /**\\n     * @dev should be passed in constructor\\n     */\\n    function __suAuthenticatedInit(address _accessControlSingleton) internal onlyInitializing {\\n        ACCESS_CONTROL_SINGLETON = ISuAccessControl(_accessControlSingleton);\\n        if (\\n            !ISuAccessControl(_accessControlSingleton).supportsInterface(type(IAccessControlUpgradeable).interfaceId)\\n        ) revert BadAccessControlSingleton();\\n    }\\n\\n    /** CORE ROLES */\\n\\n    modifier onlyDAO() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(DAO_ROLE, msg.sender)) revert OnlyDAOError();\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(ADMIN_ROLE, msg.sender)) revert OnlyAdminError();\\n        _;\\n    }\\n\\n    modifier onlyAlerter() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(ALERTER_ROLE, msg.sender)) revert OnlyAlerterError();\\n        _;\\n    }\\n\\n    /** SYSTEM ROLES */\\n\\n    modifier onlyVaultAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(VAULT_ACCESS_ROLE, msg.sender)) revert OnlyVaultAccessError();\\n        _;\\n    }\\n\\n    modifier onlyLiquidationAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(LIQUIDATION_ACCESS_ROLE, msg.sender)) revert OnlyLiquidationAccessError();\\n        _;\\n    }\\n\\n    modifier onlyMintAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(MINT_ACCESS_ROLE, msg.sender)) revert OnlyMintAccessError();\\n        _;\\n    }\\n\\n    modifier onlyRewardAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(REWARD_ACCESS_ROLE, msg.sender)) revert OnlyRewardAccessError();\\n        _;\\n    }\\n\\n    // syntax sugar under ACCESS_CONTROL_SINGLETON\\n    modifier onlyRole(bytes32 role) {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(role, msg.sender)) revert OnlyRoleError();\\n        _;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return ACCESS_CONTROL_SINGLETON.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x3553007ac782c0c5f2ecf3ca47b8b72d74b2cae35c34ffe2d030b968938b2b0d\",\"license\":\"BSL 1.1\"},\"contracts/periphery/contracts/interfaces/access-control/ISuAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\nimport \\\"../../access-control/SuAccessRoles.sol\\\";\\n\\n/**\\n * @notice Access control for contracts\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n **/\\ninterface ISuAccessControl is IAccessControlUpgradeable, IERC165Upgradeable {\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\\n}\\n\",\"keccak256\":\"0x25724ac502fd6418ccd38273b276de4b2fdecd023d723c5d80c9f0a27c407bcd\",\"license\":\"MIT\"},\"contracts/periphery/contracts/interfaces/oracle/ISuOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\n// solhint-disable compiler-version\\npragma solidity >=0.7.6;\\n\\ninterface ISuOracle {\\n    /**\\n     * @notice WARNING! Read this description very carefully!\\n     *     function getFiatPrice1e18(address asset) returns (uint256) that:\\n     *         basicAmountOfAsset * getFiatPrice1e18(asset) / 1e18 === $$ * 1e18\\n     *     in other words, it doesn't matter what's the erc20.decimals is,\\n     *     you just multiply token balance in basic units on value from oracle and get dollar amount multiplied on 1e18.\\n     *\\n     * different assets have different deviation threshold (errors)\\n     *     for wBTC it's <= 0.5%, read more https://data.chain.link/ethereum/mainnet/crypto-usd/btc-usd\\n     *     for other asset is can be larger based on particular oracle implementation.\\n     *\\n     * examples:\\n     *     market price of btc = $30k,\\n     *     for 0.1 wBTC the unit256 amount is 0.1 * 1e18\\n     *     0.1 * 1e18 * (price1e18 / 1e18) == $3000 == uint256(3000*1e18)\\n     *     => price1e18 = 30000 * 1e18;\\n     *\\n     *     market price of usdt = $0.97,\\n     *     for 1 usdt uint256 = 1 * 1e6\\n     *     so 1*1e6 * price1e18 / 1e18 == $0.97 == uint256(0.97*1e18)\\n     *     => 1*1e6 * (price1e18 / 1e18) / (0.97*1e18)   = 1\\n     *     =>  price1e18 = 0.97 * (1e18/1e6) * 1e18\\n     *\\n     *    assume market price of wBTC = $31,503.77, oracle error = $158\\n     *\\n     *     case #1: small amount of wBTC\\n     *         we have 0.0,000,001 wBTC that is worth v = $0.00315 \\u00b1 $0.00001 = 0.00315*1e18 = 315*1e13 \\u00b1 1*1e13\\n     *         actual balance on the asset b = wBTC.balanceOf() =  0.0000001*1e18 = 1e11\\n     *         oracle should return or = oracle.getFiatPrice1e18(wBTC) <=>\\n     *         <=> b*or = v => v/b = 315*1e13 / 1e11 = 315*1e2 \\u00b1 1e2\\n     *         error = or.error * b = 1e2 * 1e11 = 1e13 => 1e13/1e18 usd = 1e-5 = 0.00001 usd\\n     *\\n     *     case #2: large amount of wBTC\\n     *         v = 2,000,000 wBTC = $31,503.77 * 2m \\u00b1 158*2m = $63,007,540,000 \\u00b1 $316,000,000 = 63,007*1e24 \\u00b1 316*1e24\\n     *         for calc convenience we increase error on 0.05 and have v = 63,000*24 \\u00b1 300*1e24 = (630 \\u00b1 3)*1e26\\n     *         b = 2*1e6 * 1e18 = 2*1e24\\n     *         or = v/b = (630 \\u00b1 3)*1e26 / 2*1e24 = 315*1e2 \\u00b1 1.5*1e2\\n     *         error = or.error * b = 1.5*100 * 2*1e24 = 3*1e26 = 3*1e8*1e18 = $300,000,000 ~ $316,000,000\\n     *\\n     *     assume the market price of USDT = $0.97 \\u00b1 $0.00485,\\n     *\\n     *     case #3: little amount of USDT\\n     *         v = USDT amount 0.005 = 0.005*(0.97 \\u00b1 0.00485) = 0.00485*1e18 \\u00b1 0.00002425*1e18 = 485*1e13 \\u00b1 3*1e13\\n     *         we rounded error up on (3000-2425)/2425 ~= +24% for calculation convenience.\\n     *         b = USDT.balanceOf() = 0.005*1e6 = 5*1e3\\n     *         b*or = v => or = v/b = (485*1e13 \\u00b1 3*1e13) / 5*1e3 = 970*1e9 \\u00b1 6*1e9\\n     *         error = 6*1e9 * 5*1e3 / 1e18 = 30*1e12/1e18 = 3*1e-5 = $0,00005\\n     *\\n     *     case #4: lot of USDT\\n     *         v = we have 100,000,000,000 USDT = $97B = 97*1e9*1e18 \\u00b1 0.5*1e9*1e18\\n     *         b = USDT.balanceOf() = 1e11*1e6 = 1e17\\n     *         or = v/b = (97*1e9*1e18 \\u00b1 0.5*1e9*1e18) / 1e17 = 970*1e9 \\u00b1 5*1e9\\n     *         error = 5*1e9 * 1e17 = 5*1e26 = 0.5 * 1e8*1e18\\n     *\\n     * @param asset - address of erc20 token contract\\n     * @return usdPrice1e18 such that asset.balanceOf() * getFiatPrice1e18(asset) / 1e18 == $$ * 1e18\\n     **/\\n    function getFiatPrice1e18(address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa56b9cc86ef5935efecc276e6a3188d518f1a99cad960083a8de35849c997687\",\"license\":\"UNLICENSED\"},\"contracts/reward/RewardChefV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\\\";\\nimport \\\"../interfaces/IRewardChefV2.sol\\\";\\nimport \\\"../periphery/contracts/access-control/SuAuthenticated.sol\\\";\\nimport \\\"../periphery/contracts/interfaces/oracle/ISuOracle.sol\\\";\\n\\n/**\\n * @title RewardChefV2\\n * @dev See IRewardChefV2 interface for full details.\\n**/\\ncontract RewardChefV2 is IRewardChefV2, SuAuthenticated {\\n    using SafeCastUpgradeable for uint256;\\n    using SafeCastUpgradeable for uint128;\\n    using SafeCastUpgradeable for uint64;\\n    using SafeCastUpgradeable for int256;\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.UintSet;\\n\\n    /**\\n     * @notice Info of each MCV2 pool. SuDAO: instead of pool Ids (pid) we use address of the asset directly.\\n     * Also, there aren't just LPs but regular assets as well\\n     **/\\n    mapping(address => PoolInfo) public poolInfo;\\n\\n    /**\\n     * @notice Info of each user that stakes tokens. userInfo[_asset][_user]\\n     **/\\n    mapping(address => mapping(address => UserInfo)) public userInfo;\\n\\n    uint256 public totalAllocPoint;\\n\\n    /**\\n     * @notice Set of reward-able assets\\n     **/\\n    EnumerableSetUpgradeable.AddressSet private assetSet;\\n    uint256 private constant ACC_REWARD_TOKEN_PRECISION = 1e12; // TODO*: make it 1e18? check values overflow\\n\\n    // ==========================REWARDER================================\\n    IERC20Upgradeable public REWARD_TOKEN;\\n    ISuOracle public ORACLE;\\n    uint256 public rewardPerBlock;\\n    uint256 public rewardEndBlock;\\n\\n    function refillReward(uint256 amount, uint64 endBlock) public onlyAdmin {\\n        if (endBlock <= block.number) revert BadEndBlockForRefill();\\n        updateAllPools(); // TODO: gas optimization\\n\\n        REWARD_TOKEN.safeTransferFrom(msg.sender, address(this), amount);\\n        uint256 rewardLeftAmount;\\n        // if there are active rewards leftovers\\n        if (rewardEndBlock > 0) {\\n            // if we call refillReward before old endBlock ends\\n            if (block.number < rewardEndBlock) {\\n                rewardLeftAmount = rewardPerBlock * (rewardEndBlock - block.number);\\n            } else {\\n                // if we start the new reward interval that has nothing in common with the old noe\\n                rewardLeftAmount = 0;\\n            }\\n        }\\n        rewardPerBlock = (rewardLeftAmount + amount) / (endBlock - block.number);\\n        rewardEndBlock = endBlock;\\n    }\\n\\n    function rewardsBetweenBlocks(uint256 startBlock, uint256 endBlock) public view returns (uint256) {\\n        // if all rewards were allocation before our range - then answer is 0\\n        if (rewardEndBlock <= startBlock) {\\n            return 0;\\n        } else {\\n            // if rewards allocates on the whole range, than just calc rectangle area\\n            if (endBlock < rewardEndBlock) {\\n                return (endBlock - startBlock) * rewardPerBlock;\\n            } else {\\n                // other-vice, rewards end its allocation during our rage, so we have to calc only until rewardEndBlock\\n                return (rewardEndBlock - startBlock) * rewardPerBlock;\\n            }\\n        }\\n    }\\n\\n    /* ==========================LOCKUP LOGIC========================================= */\\n    mapping(uint256 => uint256) public multiplicator1e18ForLockupPeriod;\\n    EnumerableSetUpgradeable.UintSet private possibleLockupPeriodsSeconds;\\n\\n    function getPossibleLockupPeriodsSeconds() external view returns (ILockupPeriod[] memory) {\\n        uint256[] memory periods = possibleLockupPeriodsSeconds.values();\\n        uint256 len = periods.length;\\n        ILockupPeriod[] memory lockupPeriods = new ILockupPeriod[](len);\\n        for (uint256 i = 0; i < len; ++i) {\\n            lockupPeriods[i] = ILockupPeriod({\\n                lockupPeriodSeconds : periods[i],\\n                multiplicator1e18 : multiplicator1e18ForLockupPeriod[periods[i]]\\n            });\\n        }\\n        return lockupPeriods;\\n    }\\n\\n    function setPossibleLockupPeriodsSeconds(uint256 lockupPeriodSeconds, uint256 multiplicator1e18) external onlyDAO {\\n        if (lockupPeriodSeconds == 0) revert ZeroLockupPeriod();\\n        multiplicator1e18ForLockupPeriod[lockupPeriodSeconds] = multiplicator1e18;\\n        if (multiplicator1e18 == 0) {\\n            possibleLockupPeriodsSeconds.remove(lockupPeriodSeconds);\\n        } else {\\n            possibleLockupPeriodsSeconds.add(lockupPeriodSeconds);\\n        }\\n    }\\n    /* =================================================================== */\\n\\n    /**\\n      * @notice _rewardToken The REWARD_TOKEN token contract address.\\n     **/\\n    function initialize(address _authControl, IERC20Upgradeable _rewardToken, ISuOracle _oracle) public initializer {\\n        __suAuthenticatedInit(_authControl);\\n\\n        REWARD_TOKEN = _rewardToken;\\n        ORACLE = _oracle;\\n    }\\n\\n    function add(uint256 allocPoint, address _asset) public onlyAdmin {\\n        if (poolInfo[_asset].lastRewardBlock != 0) revert PoolExist();\\n\\n        totalAllocPoint = totalAllocPoint + allocPoint;\\n        assetSet.add(_asset);\\n\\n        poolInfo[_asset] = PoolInfo({\\n            allocPoint : allocPoint.toUint64(),\\n            lastRewardBlock : block.number.toUint64(),\\n            accSushiPerShare : 0,\\n            lpSupply : 0\\n        });\\n\\n        emit LogPoolAddition(_asset, allocPoint);\\n    }\\n\\n    function set(address _asset, uint256 _allocPoint) public onlyAdmin {\\n        if (poolInfo[_asset].lastRewardBlock == 0) revert PoolNotExist();\\n        // TODO: why was it in legal in MVC2 to call this function without mandatory update method?\\n        updatePool(_asset);\\n\\n        uint64 oldAllocPoint = poolInfo[_asset].allocPoint;\\n        totalAllocPoint = totalAllocPoint - oldAllocPoint + _allocPoint;\\n        poolInfo[_asset].allocPoint = _allocPoint.toUint64();\\n        if (_allocPoint == 0) {\\n            // we don't need to call updatePool(_asset) again\\n            // because the result of the second time call in the same block doesn't change anything\\n            assetSet.remove(_asset);\\n        } else if (oldAllocPoint == 0) {\\n            // when pool exists, but asset was removed from assetSet\\n            assetSet.add(_asset);\\n        }\\n        emit LogSetPool(_asset, _allocPoint);\\n    }\\n\\n    function pendingSushi(address _asset, address _user) public view returns (uint256 pending) {\\n        PoolInfo memory pool = poolInfo[_asset];\\n        UserInfo memory user = userInfo[_asset][_user];\\n        uint256 accSushiPerShare = pool.accSushiPerShare;\\n        // we don't have real balances anymore, so instead of lpSupply = lpTokens[_pid].balanceOf(address(this));\\n        // we use virtual total balance\\n        uint256 lpSupply = poolInfo[_asset].lpSupply;\\n        if (block.number > pool.lastRewardBlock && lpSupply != 0 && totalAllocPoint != 0) {\\n            // then we need to get updated accSushiPerShare, similar as in updatePool\\n            // totalSushiReward - how much reward were minted since last update pool.lastRewardBlock\\n            uint256 totalSushiReward = rewardsBetweenBlocks(pool.lastRewardBlock, block.number);\\n            uint256 poolSushiReward = totalSushiReward * pool.allocPoint / totalAllocPoint;\\n            // account it into share value\\n            accSushiPerShare = accSushiPerShare + (poolSushiReward * ACC_REWARD_TOKEN_PRECISION / lpSupply);\\n        }\\n        pending = (\\n            (user.amount * accSushiPerShare / ACC_REWARD_TOKEN_PRECISION).toInt256() - user.rewardDebt\\n        ).toUint256();\\n    }\\n\\n    function updatePool(address asset) public returns (PoolInfo memory pool) {\\n        pool = poolInfo[asset];\\n        if (block.number > pool.lastRewardBlock) {\\n            uint256 lpSupply = pool.lpSupply;\\n            if (lpSupply > 0 && pool.allocPoint > 0) {\\n                // calc how much rewards are minted since pool.lastRewardBlock for the pool\\n                uint256 totalSushiReward = rewardsBetweenBlocks(pool.lastRewardBlock, block.number);\\n                uint256 poolSushiReward = totalSushiReward * pool.allocPoint / totalAllocPoint;\\n                pool.accSushiPerShare = pool.accSushiPerShare +\\n                            (poolSushiReward * ACC_REWARD_TOKEN_PRECISION / lpSupply).toUint128();\\n            }\\n            pool.lastRewardBlock = block.number.toUint64();\\n            poolInfo[asset] = pool;\\n            emit LogUpdatePool(asset, pool.lastRewardBlock, lpSupply, pool.accSushiPerShare);\\n        }\\n    }\\n\\n    function updateAllPools() public {\\n        address[] memory assets = assetSet.values();\\n        uint256 len = assets.length;\\n        for (uint256 i = 0; i < len; ++i) {\\n            updatePool(assets[i]);\\n        }\\n    }\\n\\n    function increaseAmount(\\n        address asset,\\n        address to,\\n        uint256 amountEDecimal,\\n        uint256 lockupPeriodSeconds\\n    ) public onlyRewardAccess {\\n        PoolInfo memory pool = updatePool(asset);\\n        UserInfo storage user = userInfo[asset][to];\\n\\n        if (user.lockupPeriodSeconds == 0) {// it means there's no deposit yet\\n            user.multiplicator1e18 = multiplicator1e18ForLockupPeriod[lockupPeriodSeconds];\\n            user.lockupPeriodSeconds = lockupPeriodSeconds;\\n            user.lockupStartTimestamp = block.timestamp;\\n        } else if (user.lockupPeriodSeconds != lockupPeriodSeconds) revert DifferentLockup();\\n\\n        if (user.multiplicator1e18 == 0) revert ZeroMultiplicator();\\n\\n        // Effects\\n        // user.amount = user.amount + amountEDecimal;\\n        uint256 additionalAmount = amountEDecimal * user.multiplicator1e18 / 1e18;\\n        user.amount = user.amount + additionalAmount;\\n        user.rewardDebt = user.rewardDebt +\\n                    (additionalAmount * pool.accSushiPerShare / ACC_REWARD_TOKEN_PRECISION).toInt256();\\n        // we don't need, since the balances are virtual\\n        // lpToken[pid].safeTransferFrom(msg.sender, address(this), amount);\\n        // but we need to calc total supply of virtual tokens\\n        pool.lpSupply = pool.lpSupply + additionalAmount;\\n        poolInfo[asset] = pool;\\n\\n        emit VirtualDeposit(to, asset, additionalAmount);\\n    }\\n\\n    function decreaseAmount(address asset, address to, uint256 amountEDecimal) public onlyRewardAccess {\\n        PoolInfo memory pool = updatePool(asset);\\n        UserInfo storage user = userInfo[asset][to];\\n\\n        if (user.multiplicator1e18 == 0) revert ZeroMultiplicator();\\n\\n        // if we decreasing before time-lock is over => there is penalty\\n        uint256 penalty = block.timestamp < user.lockupStartTimestamp + user.lockupPeriodSeconds\\n            ? getDecreaseAmountRewardPenalty(asset, to, amountEDecimal)\\n            : 0;\\n\\n        // Effects\\n        uint256 subtractAmount = amountEDecimal * user.multiplicator1e18 / 1e18;\\n        user.rewardDebt = user.rewardDebt -\\n                    (subtractAmount * pool.accSushiPerShare / ACC_REWARD_TOKEN_PRECISION).toInt256() +\\n                            penalty.toInt256();\\n        user.amount = user.amount - subtractAmount;\\n\\n        if (user.amount == 0 && user.rewardDebt == 0) {\\n            // Reset lockupPeriod\\n            user.lockupStartTimestamp = block.timestamp;\\n            user.lockupPeriodSeconds = 0;\\n            user.multiplicator1e18 = 0;\\n        }\\n\\n        pool.lpSupply = pool.lpSupply - subtractAmount;\\n        poolInfo[asset] = pool;\\n\\n        emit VirtualWithdraw(to, asset, subtractAmount);\\n    }\\n\\n    function getDecreaseAmountRewardPenalty(\\n        address asset, address to, uint256 amountEDecimal\\n    ) public view returns (uint256) {\\n        UserInfo memory user = userInfo[asset][to];\\n\\n        if (user.multiplicator1e18 == 0) {\\n            return 0;\\n        }\\n\\n        uint256 subtractAmount = amountEDecimal * user.multiplicator1e18 / 1e18;\\n\\n        uint256 pending = pendingSushi(asset, to);\\n        return pending * subtractAmount / user.amount;\\n    }\\n\\n    function harvest(address asset, address to, uint256 newLockupPeriodSeconds) public {\\n        PoolInfo memory pool = updatePool(asset);\\n        UserInfo storage user = userInfo[asset][msg.sender];\\n\\n        if (user.lockupStartTimestamp + user.lockupPeriodSeconds > block.timestamp) revert HarvestBeforeLockup();\\n        if (user.multiplicator1e18 == 0) revert ZeroMultiplicator();\\n\\n        int256 accumulatedSushi = (user.amount * pool.accSushiPerShare / ACC_REWARD_TOKEN_PRECISION).toInt256();\\n        uint256 _pendingSushi = (accumulatedSushi - user.rewardDebt).toUint256();\\n\\n        // Effects\\n        user.rewardDebt = accumulatedSushi;\\n        // accumulatedSushi = user.rewardDebt + _pendingSushi;\\n\\n        // Interactions\\n        if (_pendingSushi > 0) {\\n            REWARD_TOKEN.safeTransfer(to, _pendingSushi);\\n        }\\n\\n        // Reset lockupPeriod\\n        user.lockupStartTimestamp = block.timestamp;\\n        // it's possible to remove code duplicates by using signed amount, but for simplicity I'll leave as it is\\n        uint256 newMultiplicator1e18 = multiplicator1e18ForLockupPeriod[newLockupPeriodSeconds];\\n        if (newMultiplicator1e18 == 0) revert ZeroMultiplicator();\\n        if (user.multiplicator1e18 < newMultiplicator1e18) {\\n            // since multiplicator increases, we need to increase amount\\n            uint256 additionalAmount = user.amount * newMultiplicator1e18 / user.multiplicator1e18 - user.amount;\\n\\n            user.amount = user.amount + additionalAmount;\\n            user.rewardDebt = user.rewardDebt +\\n                        (additionalAmount * pool.accSushiPerShare / ACC_REWARD_TOKEN_PRECISION).toInt256();\\n        } else if (user.multiplicator1e18 > newMultiplicator1e18) {\\n            uint256 subtractAmount = user.amount - user.amount * newMultiplicator1e18 / user.multiplicator1e18;\\n\\n            user.rewardDebt = user.rewardDebt -\\n                        (subtractAmount * pool.accSushiPerShare / ACC_REWARD_TOKEN_PRECISION).toInt256();\\n            user.amount = user.amount - subtractAmount;\\n        }\\n        user.multiplicator1e18 = newMultiplicator1e18;\\n\\n        emit Harvest(msg.sender, asset, _pendingSushi);\\n    }\\n\\n    function resetAmount(address asset, address to) public {\\n        PoolInfo storage pool = poolInfo[asset];\\n        UserInfo storage user = userInfo[asset][msg.sender];\\n\\n        uint256 userAmount = user.amount;\\n        uint256 userLockupPeriodSeconds = user.lockupPeriodSeconds;\\n\\n        pool.lpSupply = pool.lpSupply - userAmount;\\n        poolInfo[asset] = pool;\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n\\n        // Reset lockupPeriod\\n        user.lockupStartTimestamp = block.timestamp;\\n        user.lockupPeriodSeconds = 0;\\n        user.multiplicator1e18 = 0;\\n\\n        emit ResetAmount(msg.sender, asset, to, userAmount, userLockupPeriodSeconds);\\n    }\\n\\n    /* ================================VIEW METHODS====================================== */\\n\\n    function getPoolApr(address asset) public view returns (uint256) {\\n        // We use require to directly show this messages in frontend\\n        /* solhint-disable custom-errors */\\n        require(poolInfo[asset].lpSupply != 0, \\\"RewardChef: Pool doesn't have liquidity\\\");\\n        require(totalAllocPoint != 0, \\\"RewardChef: Total allocation point is 0\\\");\\n        require(rewardEndBlock > block.number, \\\"RewardChef: Vesting is already finished\\\");\\n        /* solhint-enable custom-errors */\\n\\n        uint256 rewardPerBlockForPool = rewardPerBlock * poolInfo[asset].allocPoint / totalAllocPoint;\\n        uint256 rewardTokenPrice = ORACLE.getFiatPrice1e18(address(REWARD_TOKEN));\\n        uint256 usdRewardYearForPool = rewardPerBlockForPool * 4 * 60 * 24 * 366 * rewardTokenPrice;\\n        // TODO: fix decimals and unify oracle answer\\n        uint256 decimals = IERC20Metadata(asset).decimals();\\n        uint256 usdValuePool = ORACLE.getFiatPrice1e18(asset) * poolInfo[asset].lpSupply / 10 ** decimals;\\n        return usdRewardYearForPool / usdValuePool;\\n    }\\n\\n    function getHarvestLockupEndTimestamp(address _asset, address _user) public view returns (uint256) {\\n        UserInfo memory user = userInfo[_asset][_user];\\n\\n        return user.lockupStartTimestamp + user.lockupPeriodSeconds;\\n    }\\n}\\n\",\"keccak256\":\"0xd3b5cf0d38d169f59c382e16c844fd1ca98a49bcf613cd80bbbd3e1ea5e29ea4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608080604052346100165761292a908161001c8239f35b600080fdfe608080604052600436101561002d575b50361561001b57600080fd5b60405163ccc0891360e01b8152600490fd5b600090813560e01c90816301ffc9a7146122de5750806303ee9f22146122b35780630b620b81146121425780630fc9d694146120f75780631459457a14611e9c57806314c376dc14611e735780631ce4b4a714611e285780632754891e14611def5780632a43734e14611d4b57806334c188b014611d3157806334e3b77914611ce657806341fbb05014611cbd578063438280dd14611c82578063477e9c6a14611bdf578063628a468314611ab257806362b40f9f146119745780636f70e66f1461123357806371d0fb41146111f857806374befebc146111bf57806375b238fc146111a3578063815753711461117a5780638340f5491461103857806388ad7a6114610fe95780638e5313e014610fae578063965f5cfd14610f755780639fea3e0714610e2a578063a6ea8b8714610df5578063c640752d14610c55578063c9bc438414610c2c578063d4796d1214610ad5578063d5dc24ba14610a86578063d6ff0b3114610a4d578063db3543f51461097b578063dc97e84e14610940578063e63ea408146107aa578063e9c2651814610781578063ec69678a146106d3578063f084843d14610684578063fbf37739146102195763fbfa77cf0361000f57346102165780600319360112610216576004546040516001600160a01b039091168152602090f35b80fd5b50346102165760803660031901126102165761023361236d565b61023b612388565b906044359060018060a01b0380855460101c1690604051632474521560e21b938482526000805160206128d5833981519152948560048401523360248401526020928381604481895afa908115610679578a9161065c575b50156105f95783821695868a52600e845260408a2095858a16968760005285526040600020546105e757856005541692604051928c635b14f18360e01b948581528b600482015288816024818a5afa9182156106505791610633575b5061059d57604487926040519485938492835260048301523360248301525afa908115610628578b9161060b575b50156105f957868a52600e845260408a208660005284526040600020546105e757839060246040518094819382528a60048301525afa9081156105dc5789916105af575b5061059d578661037091612797565b848852600a82526103a28161039d60408b20546008865260408c2088600052865260406000205490612477565b61249a565b858952600a835260408920556008825260408820846000528252604060002055838752600181526040872054600c825260408820846000528252604060002055838752600d81526040872083600052815242604060002055838752600981526040872083600052815261041a8560406000205461249a565b848852600982526040882084600052825260406000205583875260088152604087208360005281526104518560406000205461249a565b8488526008825260408820846000528252604060002055838752600b815261047d85604089205461249a565b848852600b82526040882055600a815261049b85604089205461249a565b848852600a8252604088205560026040882054915260408720541061058b5785948160065416803b15610587578587916104ec93836040518096819582946340c10f1960e01b845260048401612722565b03925af190811561057c578691610568575b5050600f5416803b15610564578492836084926040519687958694633deffa8b60e21b865260048601526024850152604484015260643560648401525af18015610559576105495750f35b61055290612413565b6102165780f35b6040513d84823e3d90fd5b8480fd5b61057190612413565b6105645784386104fe565b6040513d88823e3d90fd5b8680fd5b604051632cd29bf960e21b8152600490fd5b604051631785c68160e01b8152600490fd5b6105cf9150833d85116105d5575b6105c7818361243c565b81019061245f565b38610361565b503d6105bd565b6040513d8b823e3d90fd5b60405163fa5af4cd60e01b8152600490fd5b604051635692bcb560e11b8152600490fd5b6106229150853d87116105d5576105c7818361243c565b3861031d565b6040513d8d823e3d90fd5b61064a9150883d8a116105d5576105c7818361243c565b386102ef565b604051903d90823e3d90fd5b6106739150843d86116105d5576105c7818361243c565b38610293565b6040513d8c823e3d90fd5b50346102165760403660031901126102165761069e61236d565b60406106a8612388565b9260018060a01b03809316815260086020522091166000526020526020604060002054604051908152f35b5034610216576040366003190112610216576106ed61236d565b8154604051632474521560e21b81526000805160206128d583398151915260048201523360248201526001600160a01b0392916020908290604490829060101c87165afa908115610776578491610758575b50156105f9571681526001602052602435604082205580f35b610770915060203d81116105d5576105c7818361243c565b3861073f565b6040513d86823e3d90fd5b503461021657806003193601126102165760206040516000805160206128b58339815191528152f35b5034610216576107b9366123b4565b909160018060a01b0380855460101c166040518091632474521560e21b82526000805160206128d5833981519152600483015233602483015281604460209485935afa908115610918578791610923575b50156105f9578181816005541694602460405180948193635b14f18360e01b835216978860048301525afa9081156109185787916108fb575b5061059d578286526007815260408620938286169485600052825260406000205481116108e95786956108ae92858852600781526040882087600052815261089083604060002054612477565b9086895260078152604089209088600052526040600020558461273d565b600f541691823b156108e4576044849283604051958694859363cf4f68d560e01b8552600485015260248401525af16105495750f35b505050fd5b604051633b6bb76f60e01b8152600490fd5b6109129150823d84116105d5576105c7818361243c565b38610843565b6040513d89823e3d90fd5b61093a9150823d84116105d5576105c7818361243c565b3861080a565b503461021657806003193601126102165760206040517f9a9aef7c1247d5fc769b0185c052913e39673da29a880317dfd20ebf86f26a498152f35b50346102165760203660031901126102165761099561236d565b8154604051632474521560e21b81526000805160206128b583398151915260048201523360248201526001600160a01b0392916020908290604490829060101c87165afa908115610776578491610a2f575b5015610a1d57168015610a0b57600380546001600160a01b03191691909117905580f35b60405163d92e233d60e01b8152600490fd5b60405163599a6c3360e11b8152600490fd5b610a47915060203d81116105d5576105c7818361243c565b386109e7565b5034610216576020366003190112610216576020906040906001600160a01b03610a7561236d565b168152600283522054604051908152f35b503461021657604036600319011261021657610aa061236d565b6040610aaa612388565b9260018060a01b03809316815260096020522091166000526020526020604060002054604051908152f35b503461021657604036600319011261021657610aef61236d565b610af7612388565b8254604051632474521560e21b81526000805160206128d5833981519152600482015233602482015291926020926001600160a01b039284908290604490829060101c87165afa90811561057c578691610c0f575b50156105f957811690818552600e835280604086209416938460005283526040600020546105e757826024916005541660405192838092635b14f18360e01b82528660048301525afa908115610c04578591610be7575b5061059d5782817f5b79a897d30813a62a1f95ba180d3320d3701d96605708b81105e00719a069e48680a38352600e81526040832091600052524360406000205580f35b610bfe9150833d85116105d5576105c7818361243c565b38610ba3565b6040513d87823e3d90fd5b610c269150843d86116105d5576105c7818361243c565b38610b4c565b5034610216578060031936011261021657600f546040516001600160a01b039091168152602090f35b503461021657604036600319011261021657610c6f61236d565b610c77612388565b8254604051632474521560e21b81526000805160206128d583398151915260048201523360248201526001600160a01b03936020939290919084908290604490829060101c89165afa90811561057c578691610dd8575b50156105f95783811691828652600e84526040862094808216958660005285526040600020546105e757846024916005541660405192838092635b14f18360e01b82528860048301525afa908115610918578791610dbb575b5061059d57610d3591612797565b818552600a8352610d628161039d6040882054600887526040892088600052875260406000205490612477565b828652600a845260408620556008835260408520846000528352604060002055808452600182526040842054600c8352604085208460005283526040600020558352600d81526040832091600052524260406000205580f35b610dd29150853d87116105d5576105c7818361243c565b38610d27565b610def9150843d86116105d5576105c7818361243c565b38610cce565b5034610216576040366003190112610216576020610e22610e1461236d565b610e1c612388565b90612797565b604051908152f35b503461021657610e39366123e9565b8354604051632474521560e21b8082526000805160206128d583398151915260048301819052336024840152939560209491936001600160a01b039360109190911c8416908681604481855afa908115610679578a91610f58575b50156105f95785604491604051928380928982528760048301523360248301525afa9081156105dc578991610f3b575b50156105f9578285936044921696878a526001855260408a2055885460101c16936040519485938492835260048301523360248301525afa908115610c04578591610f1e575b50156105f957600291845252604082205580f35b610f359150823d84116105d5576105c7818361243c565b38610f0a565b610f529150863d88116105d5576105c7818361243c565b38610ec4565b610f6f9150873d89116105d5576105c7818361243c565b38610e94565b5034610216576020366003190112610216576020906040906001600160a01b03610f9d61236d565b168152600183522054604051908152f35b503461021657806003193601126102165760206040517fe453bacb314e78dcd5192e6b1a2b1f0e7c76e92f6b7e429a6a90f04e39db3b768152f35b50346102165760403660031901126102165761100361236d565b604061100d612388565b9260018060a01b038093168152600d6020522091166000526020526020604060002054604051908152f35b503461021657611047366123b4565b8354604051632474521560e21b81526000805160206128d5833981519152600482015233602482015291936001600160a01b0393602093909284908290604490829060101c89165afa90811561091857879161115d575b50156105f957831693848652600e83526040862093808316948560005284526040600020546105e757836024916005541660405192838092635b14f18360e01b82528a60048301525afa908115610918578791611140575b5061059d5761110b81611127933090886124c9565b848652600783526040862084600052835260406000205461249a565b9284526007815260408420916000525260406000205580f35b6111579150843d86116105d5576105c7818361243c565b386110f6565b6111749150843d86116105d5576105c7818361243c565b3861109e565b50346102165780600319360112610216576006546040516001600160a01b039091168152602090f35b5034610216578060031936011261021657602090604051908152f35b5034610216576020366003190112610216576020906040906001600160a01b036111e761236d565b168152600b83522054604051908152f35b503461021657806003193601126102165760206040517f880a91047114272656e533301261260c75e4d11543ac7303d6fe4204579ec7278152f35b50346102165760a03660031901126102165761124d61236d565b611255612388565b9061125e61239e565b8354604051632474521560e21b81526000805160206128d5833981519152600482015233602482015260109190911c6001600160a01b031690602081604481855afa90811561057c578691611955575b50156105f957600554604051635b14f18360e01b81526001600160a01b038581166004830152909160209183916024918391165afa90811561057c578691611936575b5061059d576064351590818061192c575b61191a5760843561166a575b50156114e5575b6001600160a01b038281168552600860209081526040808720928616600081815293909252909120546114ab578454604051632474521560e21b81526000805160206128d58339815191526004820152336024820152906020908290604490829060101c6001600160a01b03165afa90811561057c57869161148c575b50156105f957600554604051635b14f18360e01b81526001600160a01b038581166004830152909160209183916024918391165afa90811561057c57869161146d575b5061059d576001600160a01b038316808652600c602090815260408088206000858152908352818120899055838952600d83528189208582528352818120899055928852600e8252808820938352929052819020859055517faaa3e6a935674cc172e60bf40d5e74691d4b2192405f3843f12ac33dacadb73d9390928392611467926084359260643592919086612764565b0390a180f35b611486915060203d6020116105d5576105c7818361243c565b386113d5565b6114a5915060203d6020116105d5576105c7818361243c565b38611392565b506114677f1aa32b453741aadaad9ed1a4be10676ce1cf45e4843cc4aa25e5fd969fc2514f93604051938493608435926064359286612764565b8354604051632474521560e21b81526000805160206128d58339815191526004820152336024820152906020908290604490829060101c6001600160a01b03165afa908115610c0457859161164b575b50156105f957600554604051635b14f18360e01b81526001600160a01b038481166004830152909160209183916024918391165afa908115610c0457859161162c575b5061059d576001600160a01b038281168552600760209081526040808720928616600090815292909152902054606435116108e95760018060a01b038216845260076020526040842060018060a01b0384166000526020526115e1606435604060002054612477565b6001600160a01b0383811686526007602090815260408088208784166000908152925290209190915581161561131557611627606435826001600160a01b03851661273d565b611315565b611645915060203d6020116105d5576105c7818361243c565b38611578565b611664915060203d6020116105d5576105c7818361243c565b38611535565b602060449160405192838092632474521560e21b82526000805160206128d583398151915260048301523360248301525afa90811561057c5786916118fb575b50156105f9576001600160a01b03838116865260086020908152604080882092871660008181529390925290912054608435116118e9576001600160a01b0384168652600a6020526040862054608435116118d7576001600160a01b03841686526009602090815260408088206000848152925290205486919060843511156118d05760018060a01b038516825260096020526040822081600052602052611759604060002054608435612477565b905b60018060a01b038616835260086020526040832081600052602052611787608435604060002054612477565b60018060a01b03871684526008602052604084208260005260205260406000205560018060a01b0386168352600960205260408320816000526020526117dd6084356117d88460406000205461249a565b612477565b6001600160a01b0387168085526009602090815260408087206000958652825293849020929092558452600a905282205461181b9060843590612477565b60018060a01b0386168352600a6020526040832055600b6020526118496084356117d883604086205461249a565b6001600160a01b038681168452600b6020526040842091909155600f54169061187490608435612477565b90803b156118cc57604051636aed34f760e01b815291839183918290849082906118a3908d8d600485016124a7565b03925af18015610559576118b8575b5061130e565b6118c190612413565b6105645784386118b2565b8280fd5b819061175b565b604051634bf0a71560e11b8152600490fd5b6040516371fa0fd760e01b8152600490fd5b611914915060203d6020116105d5576105c7818361243c565b386116aa565b60405163fa95696160e01b8152600490fd5b5060843515611302565b61194f915060203d6020116105d5576105c7818361243c565b386112f1565b61196e915060203d6020116105d5576105c7818361243c565b386112ae565b50346102165760403660031901126102165761198e61236d565b611996612388565b8254604051632474521560e21b81526000805160206128d58339815191526004820152336024820152919260209290916001600160a01b03919084908290604490829060101c86165afa90811561057c578691611a95575b50156105f9578083816005541693602460405180948193635b14f18360e01b835216968760048301525afa90811561057c578691611a78575b5061059d57818552600c83526040852093169283600052825283604060002055808452600d825260408420836000528252836040600020558352600e81526040832091600052528060406000205580f35b611a8f9150843d86116105d5576105c7818361243c565b38611a27565b611aac9150843d86116105d5576105c7818361243c565b386119ee565b503461021657611ac1366123e9565b8354604051632474521560e21b81526000805160206128d583398151915260048201523360248201529192916001600160a01b03916020908290604490829060101c86165afa90811561057c578691611bc1575b50156105f95784927ffd2eefe030edeab1f0352cd450d7c7e0ffb83cbf33faf97cf068d11974a5e1f160606040518488168152856020820152836040820152a180611ba6575b5060065416803b156118cc57611b889383604051809681958294632770a7eb60e21b845260048401612722565b03925af1801561055957611b9a575080f35b611ba390612413565b80f35b611bbb908260065416868460035416916124c9565b38611b5b565b611bd9915060203d81116105d5576105c7818361243c565b38611b15565b503461021657604036600319011261021657611bf961236d565b8154604051632474521560e21b81526000805160206128d583398151915260048201523360248201526001600160a01b0392916020908290604490829060101c87165afa908115610776578491611c64575b50156105f9571681526002602052602435604082205580f35b611c7c915060203d81116105d5576105c7818361243c565b38611c4b565b503461021657806003193601126102165760206040517f39f61ca2a1a28fee144218173ec637b649a353e4026b2738c673800e5bf1437b8152f35b50346102165780600319360112610216576003546040516001600160a01b039091168152602090f35b5034610216576040366003190112610216576040602091611d0561236d565b611d0d612388565b6001600160a01b039182168352600785528383209116825283522054604051908152f35b5034610216576020610e22611d45366123b4565b916127e9565b503461021657602036600319011261021657611d6561236d565b8154604051632474521560e21b81526000805160206128d583398151915260048201523360248201526001600160a01b0392916020908290604490829060101c87165afa908115610776578491611dd1575b50156105f9571660018060a01b0319600f541617600f5580f35b611de9915060203d81116105d5576105c7818361243c565b38611db7565b5034610216576020366003190112610216576020906040906001600160a01b03611e1761236d565b168152600a83522054604051908152f35b5034610216576040366003190112610216576040602091611e4761236d565b611e4f612388565b6001600160a01b039182168352600e85528383209116825283522054604051908152f35b503461021657806003193601126102165760206040516000805160206128d58339815191528152f35b50346102165760a036600319011261021657611eb661236d565b611ebe612388565b611ec661239e565b6001600160a01b03919060643583811691908290036120f357608435938085168095036105875786549360ff8560081c1615948580966120e6575b80156120cf575b156120735760ff198116600117895585612062575b5087549560ff8760081c16611f3181612854565b30158015612058575b610a0b57611f4790612854565b62010000600160b01b03601089901b1662010000600160b01b0319881681178a556040516301ffc9a760e01b8152637965db0b60e01b600482015290986020908290602490829088165afa908115610679578a9161203a575b5015612028578260018060a01b031994308660045416176004551684600354161760035583600554161760055516816006541617600655600f541617600f55611fe7578280f35b610100600160b01b031916178155604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a138808280f35b6040516384d942fd60e01b8152600490fd5b612052915060203d81116105d5576105c7818361243c565b38611fa0565b5083851615611f3a565b61ffff191661010117885538611f1d565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b158015611f085750600160ff821614611f08565b50600160ff821610611f01565b8580fd5b503461021657604036600319011261021657604060209161211661236d565b61211e612388565b6001600160a01b039182168352600c85528383209116825283522054604051908152f35b50346102165760803660031901126102165761215c61236d565b612164612388565b61216c61239e565b8354604051632474521560e21b81526000805160206128d58339815191526004820152336024820152606435936001600160a01b03926020929083908290604490829060101c88165afa90811561228b578891612296575b50156105f9578282816005541697602460405180948193635b14f18360e01b8352169a8b60048301525afa90811561228b57889161226e575b5061059d578587526007825282604088209116908188528252604087205485116108e9578587526007825260408720818852825261223f856040892054612477565b918688526007815260408820918852526040862055811661225e578380f35b6122679261273d565b3880808380f35b6122859150833d85116105d5576105c7818361243c565b386121fd565b6040513d8a823e3d90fd5b6122ad9150833d85116105d5576105c7818361243c565b386121c4565b50346102165780600319360112610216575460405160109190911c6001600160a01b03168152602090f35b9050346123695760203660031901126123695760043563ffffffff60e01b81168091036118cc5782546301ffc9a760e01b835260048301919091526020908290602490829060101c6001600160a01b03165afa908115610559576020929161234c575b506040519015158152f35b6123639150823d81116105d5576105c7818361243c565b38612341565b5080fd5b600435906001600160a01b038216820361238357565b600080fd5b602435906001600160a01b038216820361238357565b604435906001600160a01b038216820361238357565b6060906003190112612383576001600160a01b0390600435828116810361238357916024359081168103612383579060443590565b6060906003190112612383576004356001600160a01b038116810361238357906024359060443590565b6001600160401b03811161242657604052565b634e487b7160e01b600052604160045260246000fd5b601f909101601f19168101906001600160401b0382119082101761242657604052565b90816020910312612383575180151581036123835790565b9190820391821161248457565b634e487b7160e01b600052601160045260246000fd5b9190820180921161248457565b6001600160a01b03918216815291166020820152604081019190915260600190565b906124ff906124f1612504956040519586936323b872dd60e01b6020860152602485016124a7565b03601f19810184528361243c565b612506565b565b604080516001600160401b0394936001600160a01b03909316929091820185811183821017612426576040526020928383527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564848401526000808386829551910182855af1903d15612641573d96871161262d576125a59495966040519061259788601f19601f840116018361243c565b81528093873d92013e61264e565b805190828215928315612615575b505050156125be5750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b612625935082018101910161245f565b3882816125b3565b634e487b7160e01b83526041600452602483fd5b91506125a5939495506060915b919290156126b05750815115612662575090565b3b1561266b5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156126c35750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b828510612709575050604492506000838284010152601f80199101168101030190fd5b84810182015186860160440152938101938593506126e6565b6001600160a01b039091168152602081019190915260400190565b6124ff61250493926124f160405194859263a9059cbb60e01b602085015260248401612722565b6001600160a01b039182168152918116602083015290911660408201526060810191909152608081019190915260a00190565b906127cd6127d39260018060a01b03808216600052600860205260406000209084166000526020526040600020549283916127e9565b9061249a565b90565b8181029291811591840414171561248457565b670de0b6b3a76400009261284a6301e1338093612844604061284f9560018060a01b0380911693600091858352600c60205283832091169081835260205282822054948252600d602052828220908252602052205442612477565b926127d6565b6127d6565b040490565b1561285b57565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fdfe3b5d4cc60d3ec3516ee8ae083bd60934f6eb2a6c54b1229985c41bfb092b2603e965846df3dd5b1dfa65f58e31477079e90140e0908b6dd31b5aead5a57cf365a2646970667358221220a752258507c30a6b10ce2e266e9b8d25ac1a9ee5a8d4d8cb149e2f1039eb332164736f6c63430008110033",
  "deployedBytecode": "0x608080604052600436101561002d575b50361561001b57600080fd5b60405163ccc0891360e01b8152600490fd5b600090813560e01c90816301ffc9a7146122de5750806303ee9f22146122b35780630b620b81146121425780630fc9d694146120f75780631459457a14611e9c57806314c376dc14611e735780631ce4b4a714611e285780632754891e14611def5780632a43734e14611d4b57806334c188b014611d3157806334e3b77914611ce657806341fbb05014611cbd578063438280dd14611c82578063477e9c6a14611bdf578063628a468314611ab257806362b40f9f146119745780636f70e66f1461123357806371d0fb41146111f857806374befebc146111bf57806375b238fc146111a3578063815753711461117a5780638340f5491461103857806388ad7a6114610fe95780638e5313e014610fae578063965f5cfd14610f755780639fea3e0714610e2a578063a6ea8b8714610df5578063c640752d14610c55578063c9bc438414610c2c578063d4796d1214610ad5578063d5dc24ba14610a86578063d6ff0b3114610a4d578063db3543f51461097b578063dc97e84e14610940578063e63ea408146107aa578063e9c2651814610781578063ec69678a146106d3578063f084843d14610684578063fbf37739146102195763fbfa77cf0361000f57346102165780600319360112610216576004546040516001600160a01b039091168152602090f35b80fd5b50346102165760803660031901126102165761023361236d565b61023b612388565b906044359060018060a01b0380855460101c1690604051632474521560e21b938482526000805160206128d5833981519152948560048401523360248401526020928381604481895afa908115610679578a9161065c575b50156105f95783821695868a52600e845260408a2095858a16968760005285526040600020546105e757856005541692604051928c635b14f18360e01b948581528b600482015288816024818a5afa9182156106505791610633575b5061059d57604487926040519485938492835260048301523360248301525afa908115610628578b9161060b575b50156105f957868a52600e845260408a208660005284526040600020546105e757839060246040518094819382528a60048301525afa9081156105dc5789916105af575b5061059d578661037091612797565b848852600a82526103a28161039d60408b20546008865260408c2088600052865260406000205490612477565b61249a565b858952600a835260408920556008825260408820846000528252604060002055838752600181526040872054600c825260408820846000528252604060002055838752600d81526040872083600052815242604060002055838752600981526040872083600052815261041a8560406000205461249a565b848852600982526040882084600052825260406000205583875260088152604087208360005281526104518560406000205461249a565b8488526008825260408820846000528252604060002055838752600b815261047d85604089205461249a565b848852600b82526040882055600a815261049b85604089205461249a565b848852600a8252604088205560026040882054915260408720541061058b5785948160065416803b15610587578587916104ec93836040518096819582946340c10f1960e01b845260048401612722565b03925af190811561057c578691610568575b5050600f5416803b15610564578492836084926040519687958694633deffa8b60e21b865260048601526024850152604484015260643560648401525af18015610559576105495750f35b61055290612413565b6102165780f35b6040513d84823e3d90fd5b8480fd5b61057190612413565b6105645784386104fe565b6040513d88823e3d90fd5b8680fd5b604051632cd29bf960e21b8152600490fd5b604051631785c68160e01b8152600490fd5b6105cf9150833d85116105d5575b6105c7818361243c565b81019061245f565b38610361565b503d6105bd565b6040513d8b823e3d90fd5b60405163fa5af4cd60e01b8152600490fd5b604051635692bcb560e11b8152600490fd5b6106229150853d87116105d5576105c7818361243c565b3861031d565b6040513d8d823e3d90fd5b61064a9150883d8a116105d5576105c7818361243c565b386102ef565b604051903d90823e3d90fd5b6106739150843d86116105d5576105c7818361243c565b38610293565b6040513d8c823e3d90fd5b50346102165760403660031901126102165761069e61236d565b60406106a8612388565b9260018060a01b03809316815260086020522091166000526020526020604060002054604051908152f35b5034610216576040366003190112610216576106ed61236d565b8154604051632474521560e21b81526000805160206128d583398151915260048201523360248201526001600160a01b0392916020908290604490829060101c87165afa908115610776578491610758575b50156105f9571681526001602052602435604082205580f35b610770915060203d81116105d5576105c7818361243c565b3861073f565b6040513d86823e3d90fd5b503461021657806003193601126102165760206040516000805160206128b58339815191528152f35b5034610216576107b9366123b4565b909160018060a01b0380855460101c166040518091632474521560e21b82526000805160206128d5833981519152600483015233602483015281604460209485935afa908115610918578791610923575b50156105f9578181816005541694602460405180948193635b14f18360e01b835216978860048301525afa9081156109185787916108fb575b5061059d578286526007815260408620938286169485600052825260406000205481116108e95786956108ae92858852600781526040882087600052815261089083604060002054612477565b9086895260078152604089209088600052526040600020558461273d565b600f541691823b156108e4576044849283604051958694859363cf4f68d560e01b8552600485015260248401525af16105495750f35b505050fd5b604051633b6bb76f60e01b8152600490fd5b6109129150823d84116105d5576105c7818361243c565b38610843565b6040513d89823e3d90fd5b61093a9150823d84116105d5576105c7818361243c565b3861080a565b503461021657806003193601126102165760206040517f9a9aef7c1247d5fc769b0185c052913e39673da29a880317dfd20ebf86f26a498152f35b50346102165760203660031901126102165761099561236d565b8154604051632474521560e21b81526000805160206128b583398151915260048201523360248201526001600160a01b0392916020908290604490829060101c87165afa908115610776578491610a2f575b5015610a1d57168015610a0b57600380546001600160a01b03191691909117905580f35b60405163d92e233d60e01b8152600490fd5b60405163599a6c3360e11b8152600490fd5b610a47915060203d81116105d5576105c7818361243c565b386109e7565b5034610216576020366003190112610216576020906040906001600160a01b03610a7561236d565b168152600283522054604051908152f35b503461021657604036600319011261021657610aa061236d565b6040610aaa612388565b9260018060a01b03809316815260096020522091166000526020526020604060002054604051908152f35b503461021657604036600319011261021657610aef61236d565b610af7612388565b8254604051632474521560e21b81526000805160206128d5833981519152600482015233602482015291926020926001600160a01b039284908290604490829060101c87165afa90811561057c578691610c0f575b50156105f957811690818552600e835280604086209416938460005283526040600020546105e757826024916005541660405192838092635b14f18360e01b82528660048301525afa908115610c04578591610be7575b5061059d5782817f5b79a897d30813a62a1f95ba180d3320d3701d96605708b81105e00719a069e48680a38352600e81526040832091600052524360406000205580f35b610bfe9150833d85116105d5576105c7818361243c565b38610ba3565b6040513d87823e3d90fd5b610c269150843d86116105d5576105c7818361243c565b38610b4c565b5034610216578060031936011261021657600f546040516001600160a01b039091168152602090f35b503461021657604036600319011261021657610c6f61236d565b610c77612388565b8254604051632474521560e21b81526000805160206128d583398151915260048201523360248201526001600160a01b03936020939290919084908290604490829060101c89165afa90811561057c578691610dd8575b50156105f95783811691828652600e84526040862094808216958660005285526040600020546105e757846024916005541660405192838092635b14f18360e01b82528860048301525afa908115610918578791610dbb575b5061059d57610d3591612797565b818552600a8352610d628161039d6040882054600887526040892088600052875260406000205490612477565b828652600a845260408620556008835260408520846000528352604060002055808452600182526040842054600c8352604085208460005283526040600020558352600d81526040832091600052524260406000205580f35b610dd29150853d87116105d5576105c7818361243c565b38610d27565b610def9150843d86116105d5576105c7818361243c565b38610cce565b5034610216576040366003190112610216576020610e22610e1461236d565b610e1c612388565b90612797565b604051908152f35b503461021657610e39366123e9565b8354604051632474521560e21b8082526000805160206128d583398151915260048301819052336024840152939560209491936001600160a01b039360109190911c8416908681604481855afa908115610679578a91610f58575b50156105f95785604491604051928380928982528760048301523360248301525afa9081156105dc578991610f3b575b50156105f9578285936044921696878a526001855260408a2055885460101c16936040519485938492835260048301523360248301525afa908115610c04578591610f1e575b50156105f957600291845252604082205580f35b610f359150823d84116105d5576105c7818361243c565b38610f0a565b610f529150863d88116105d5576105c7818361243c565b38610ec4565b610f6f9150873d89116105d5576105c7818361243c565b38610e94565b5034610216576020366003190112610216576020906040906001600160a01b03610f9d61236d565b168152600183522054604051908152f35b503461021657806003193601126102165760206040517fe453bacb314e78dcd5192e6b1a2b1f0e7c76e92f6b7e429a6a90f04e39db3b768152f35b50346102165760403660031901126102165761100361236d565b604061100d612388565b9260018060a01b038093168152600d6020522091166000526020526020604060002054604051908152f35b503461021657611047366123b4565b8354604051632474521560e21b81526000805160206128d5833981519152600482015233602482015291936001600160a01b0393602093909284908290604490829060101c89165afa90811561091857879161115d575b50156105f957831693848652600e83526040862093808316948560005284526040600020546105e757836024916005541660405192838092635b14f18360e01b82528a60048301525afa908115610918578791611140575b5061059d5761110b81611127933090886124c9565b848652600783526040862084600052835260406000205461249a565b9284526007815260408420916000525260406000205580f35b6111579150843d86116105d5576105c7818361243c565b386110f6565b6111749150843d86116105d5576105c7818361243c565b3861109e565b50346102165780600319360112610216576006546040516001600160a01b039091168152602090f35b5034610216578060031936011261021657602090604051908152f35b5034610216576020366003190112610216576020906040906001600160a01b036111e761236d565b168152600b83522054604051908152f35b503461021657806003193601126102165760206040517f880a91047114272656e533301261260c75e4d11543ac7303d6fe4204579ec7278152f35b50346102165760a03660031901126102165761124d61236d565b611255612388565b9061125e61239e565b8354604051632474521560e21b81526000805160206128d5833981519152600482015233602482015260109190911c6001600160a01b031690602081604481855afa90811561057c578691611955575b50156105f957600554604051635b14f18360e01b81526001600160a01b038581166004830152909160209183916024918391165afa90811561057c578691611936575b5061059d576064351590818061192c575b61191a5760843561166a575b50156114e5575b6001600160a01b038281168552600860209081526040808720928616600081815293909252909120546114ab578454604051632474521560e21b81526000805160206128d58339815191526004820152336024820152906020908290604490829060101c6001600160a01b03165afa90811561057c57869161148c575b50156105f957600554604051635b14f18360e01b81526001600160a01b038581166004830152909160209183916024918391165afa90811561057c57869161146d575b5061059d576001600160a01b038316808652600c602090815260408088206000858152908352818120899055838952600d83528189208582528352818120899055928852600e8252808820938352929052819020859055517faaa3e6a935674cc172e60bf40d5e74691d4b2192405f3843f12ac33dacadb73d9390928392611467926084359260643592919086612764565b0390a180f35b611486915060203d6020116105d5576105c7818361243c565b386113d5565b6114a5915060203d6020116105d5576105c7818361243c565b38611392565b506114677f1aa32b453741aadaad9ed1a4be10676ce1cf45e4843cc4aa25e5fd969fc2514f93604051938493608435926064359286612764565b8354604051632474521560e21b81526000805160206128d58339815191526004820152336024820152906020908290604490829060101c6001600160a01b03165afa908115610c0457859161164b575b50156105f957600554604051635b14f18360e01b81526001600160a01b038481166004830152909160209183916024918391165afa908115610c0457859161162c575b5061059d576001600160a01b038281168552600760209081526040808720928616600090815292909152902054606435116108e95760018060a01b038216845260076020526040842060018060a01b0384166000526020526115e1606435604060002054612477565b6001600160a01b0383811686526007602090815260408088208784166000908152925290209190915581161561131557611627606435826001600160a01b03851661273d565b611315565b611645915060203d6020116105d5576105c7818361243c565b38611578565b611664915060203d6020116105d5576105c7818361243c565b38611535565b602060449160405192838092632474521560e21b82526000805160206128d583398151915260048301523360248301525afa90811561057c5786916118fb575b50156105f9576001600160a01b03838116865260086020908152604080882092871660008181529390925290912054608435116118e9576001600160a01b0384168652600a6020526040862054608435116118d7576001600160a01b03841686526009602090815260408088206000848152925290205486919060843511156118d05760018060a01b038516825260096020526040822081600052602052611759604060002054608435612477565b905b60018060a01b038616835260086020526040832081600052602052611787608435604060002054612477565b60018060a01b03871684526008602052604084208260005260205260406000205560018060a01b0386168352600960205260408320816000526020526117dd6084356117d88460406000205461249a565b612477565b6001600160a01b0387168085526009602090815260408087206000958652825293849020929092558452600a905282205461181b9060843590612477565b60018060a01b0386168352600a6020526040832055600b6020526118496084356117d883604086205461249a565b6001600160a01b038681168452600b6020526040842091909155600f54169061187490608435612477565b90803b156118cc57604051636aed34f760e01b815291839183918290849082906118a3908d8d600485016124a7565b03925af18015610559576118b8575b5061130e565b6118c190612413565b6105645784386118b2565b8280fd5b819061175b565b604051634bf0a71560e11b8152600490fd5b6040516371fa0fd760e01b8152600490fd5b611914915060203d6020116105d5576105c7818361243c565b386116aa565b60405163fa95696160e01b8152600490fd5b5060843515611302565b61194f915060203d6020116105d5576105c7818361243c565b386112f1565b61196e915060203d6020116105d5576105c7818361243c565b386112ae565b50346102165760403660031901126102165761198e61236d565b611996612388565b8254604051632474521560e21b81526000805160206128d58339815191526004820152336024820152919260209290916001600160a01b03919084908290604490829060101c86165afa90811561057c578691611a95575b50156105f9578083816005541693602460405180948193635b14f18360e01b835216968760048301525afa90811561057c578691611a78575b5061059d57818552600c83526040852093169283600052825283604060002055808452600d825260408420836000528252836040600020558352600e81526040832091600052528060406000205580f35b611a8f9150843d86116105d5576105c7818361243c565b38611a27565b611aac9150843d86116105d5576105c7818361243c565b386119ee565b503461021657611ac1366123e9565b8354604051632474521560e21b81526000805160206128d583398151915260048201523360248201529192916001600160a01b03916020908290604490829060101c86165afa90811561057c578691611bc1575b50156105f95784927ffd2eefe030edeab1f0352cd450d7c7e0ffb83cbf33faf97cf068d11974a5e1f160606040518488168152856020820152836040820152a180611ba6575b5060065416803b156118cc57611b889383604051809681958294632770a7eb60e21b845260048401612722565b03925af1801561055957611b9a575080f35b611ba390612413565b80f35b611bbb908260065416868460035416916124c9565b38611b5b565b611bd9915060203d81116105d5576105c7818361243c565b38611b15565b503461021657604036600319011261021657611bf961236d565b8154604051632474521560e21b81526000805160206128d583398151915260048201523360248201526001600160a01b0392916020908290604490829060101c87165afa908115610776578491611c64575b50156105f9571681526002602052602435604082205580f35b611c7c915060203d81116105d5576105c7818361243c565b38611c4b565b503461021657806003193601126102165760206040517f39f61ca2a1a28fee144218173ec637b649a353e4026b2738c673800e5bf1437b8152f35b50346102165780600319360112610216576003546040516001600160a01b039091168152602090f35b5034610216576040366003190112610216576040602091611d0561236d565b611d0d612388565b6001600160a01b039182168352600785528383209116825283522054604051908152f35b5034610216576020610e22611d45366123b4565b916127e9565b503461021657602036600319011261021657611d6561236d565b8154604051632474521560e21b81526000805160206128d583398151915260048201523360248201526001600160a01b0392916020908290604490829060101c87165afa908115610776578491611dd1575b50156105f9571660018060a01b0319600f541617600f5580f35b611de9915060203d81116105d5576105c7818361243c565b38611db7565b5034610216576020366003190112610216576020906040906001600160a01b03611e1761236d565b168152600a83522054604051908152f35b5034610216576040366003190112610216576040602091611e4761236d565b611e4f612388565b6001600160a01b039182168352600e85528383209116825283522054604051908152f35b503461021657806003193601126102165760206040516000805160206128d58339815191528152f35b50346102165760a036600319011261021657611eb661236d565b611ebe612388565b611ec661239e565b6001600160a01b03919060643583811691908290036120f357608435938085168095036105875786549360ff8560081c1615948580966120e6575b80156120cf575b156120735760ff198116600117895585612062575b5087549560ff8760081c16611f3181612854565b30158015612058575b610a0b57611f4790612854565b62010000600160b01b03601089901b1662010000600160b01b0319881681178a556040516301ffc9a760e01b8152637965db0b60e01b600482015290986020908290602490829088165afa908115610679578a9161203a575b5015612028578260018060a01b031994308660045416176004551684600354161760035583600554161760055516816006541617600655600f541617600f55611fe7578280f35b610100600160b01b031916178155604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a138808280f35b6040516384d942fd60e01b8152600490fd5b612052915060203d81116105d5576105c7818361243c565b38611fa0565b5083851615611f3a565b61ffff191661010117885538611f1d565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b158015611f085750600160ff821614611f08565b50600160ff821610611f01565b8580fd5b503461021657604036600319011261021657604060209161211661236d565b61211e612388565b6001600160a01b039182168352600c85528383209116825283522054604051908152f35b50346102165760803660031901126102165761215c61236d565b612164612388565b61216c61239e565b8354604051632474521560e21b81526000805160206128d58339815191526004820152336024820152606435936001600160a01b03926020929083908290604490829060101c88165afa90811561228b578891612296575b50156105f9578282816005541697602460405180948193635b14f18360e01b8352169a8b60048301525afa90811561228b57889161226e575b5061059d578587526007825282604088209116908188528252604087205485116108e9578587526007825260408720818852825261223f856040892054612477565b918688526007815260408820918852526040862055811661225e578380f35b6122679261273d565b3880808380f35b6122859150833d85116105d5576105c7818361243c565b386121fd565b6040513d8a823e3d90fd5b6122ad9150833d85116105d5576105c7818361243c565b386121c4565b50346102165780600319360112610216575460405160109190911c6001600160a01b03168152602090f35b9050346123695760203660031901126123695760043563ffffffff60e01b81168091036118cc5782546301ffc9a760e01b835260048301919091526020908290602490829060101c6001600160a01b03165afa908115610559576020929161234c575b506040519015158152f35b6123639150823d81116105d5576105c7818361243c565b38612341565b5080fd5b600435906001600160a01b038216820361238357565b600080fd5b602435906001600160a01b038216820361238357565b604435906001600160a01b038216820361238357565b6060906003190112612383576001600160a01b0390600435828116810361238357916024359081168103612383579060443590565b6060906003190112612383576004356001600160a01b038116810361238357906024359060443590565b6001600160401b03811161242657604052565b634e487b7160e01b600052604160045260246000fd5b601f909101601f19168101906001600160401b0382119082101761242657604052565b90816020910312612383575180151581036123835790565b9190820391821161248457565b634e487b7160e01b600052601160045260246000fd5b9190820180921161248457565b6001600160a01b03918216815291166020820152604081019190915260600190565b906124ff906124f1612504956040519586936323b872dd60e01b6020860152602485016124a7565b03601f19810184528361243c565b612506565b565b604080516001600160401b0394936001600160a01b03909316929091820185811183821017612426576040526020928383527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564848401526000808386829551910182855af1903d15612641573d96871161262d576125a59495966040519061259788601f19601f840116018361243c565b81528093873d92013e61264e565b805190828215928315612615575b505050156125be5750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b612625935082018101910161245f565b3882816125b3565b634e487b7160e01b83526041600452602483fd5b91506125a5939495506060915b919290156126b05750815115612662575090565b3b1561266b5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156126c35750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b828510612709575050604492506000838284010152601f80199101168101030190fd5b84810182015186860160440152938101938593506126e6565b6001600160a01b039091168152602081019190915260400190565b6124ff61250493926124f160405194859263a9059cbb60e01b602085015260248401612722565b6001600160a01b039182168152918116602083015290911660408201526060810191909152608081019190915260a00190565b906127cd6127d39260018060a01b03808216600052600860205260406000209084166000526020526040600020549283916127e9565b9061249a565b90565b8181029291811591840414171561248457565b670de0b6b3a76400009261284a6301e1338093612844604061284f9560018060a01b0380911693600091858352600c60205283832091169081835260205282822054948252600d602052828220908252602052205442612477565b926127d6565b6127d6565b040490565b1561285b57565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fdfe3b5d4cc60d3ec3516ee8ae083bd60934f6eb2a6c54b1229985c41bfb092b2603e965846df3dd5b1dfa65f58e31477079e90140e0908b6dd31b5aead5a57cf365a2646970667358221220a752258507c30a6b10ce2e266e9b8d25ac1a9ee5a8d4d8cb149e2f1039eb332164736f6c63430008110033",
  "devdoc": {
    "details": "See ISuVault interface and SuVaultParameters contract for full details.",
    "kind": "dev",
    "methods": {
      "destroy(address,address)": {
        "details": "onlyVaultAccess, exit -> _repay -> destroy if debt == 0*"
      },
      "payFeeAndBurn(address,uint256,uint256)": {
        "params": {
          "repayer": "The person who repaies by debt and transfers stablecoins to the foundation",
          "stablecoinsToFoundationE18": "The amount of stablecoins which will be transfered to the foundation(e.g fees)*",
          "stablecoinsToRepaymentE18": "The amount of stablecoins which will be burned as a debt repayment"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      },
      "triggerLiquidation(address,address)": {
        "details": "Sets the current block as liquidationBlock for the position. Can be triggered only once for the position.*",
        "params": {
          "asset": "The address of the main collateral token of a position",
          "positionOwner": "The owner of a position"
        }
      },
      "update(address,address)": {
        "details": "is called, when user borrows more*"
      }
    },
    "title": "SuVault",
    "version": 1
  },
  "userdoc": {
    "events": {
      "LiquidationTriggered(address,address)": {
        "notice": "Event triggered when user didnt withdraw collateral before price goes down*"
      },
      "PositionLiquidated(address,address,address,uint256,uint256)": {
        "notice": "Event triggered when user destroys cdp*"
      },
      "PositionLiquidatedPartial(address,address,address,uint256,uint256)": {
        "notice": "Event triggered when user liquidate some part of cdp (debt > 0)*"
      },
      "PositionRepaid(address,uint256,uint256)": {
        "notice": "Event triggered when user call repay() function*"
      }
    },
    "kind": "user",
    "methods": {
      "borrow(address,address,uint256,uint256)": {
        "notice": "borrow usdPRO using selected asset. user expected previously to deposit collateral and then being able to take stablecoin user can't create single position with multiple collaterals?*"
      },
      "calculateFeeE18(address,address,uint256)": {
        "notice": "fee is increased with time. Any call of vault.update would calc fee in debt and restart fee timer*"
      },
      "collateralsEDecimal(address,address)": {
        "notice": "how much collateral the users staked == collaterals[asset][user], i.e deposits EDecimal means that this value in asset denomination, i.e. x{human readable value} * 10^{erc20.decimals()}*"
      },
      "debtWithFeesE18(address,address)": {
        "notice": "stablecoin amount + fee accumulated before lastUpdate == debtWithFeesE18[asset][user]*"
      },
      "debtsE18(address,address)": {
        "notice": "stablecoin amount*"
      },
      "deposit(address,address,uint256)": {
        "notice": "collateral deposit*"
      },
      "destroy(address,address)": {
        "notice": "only destroy debt info"
      },
      "emergencyWithdraw(address,address,uint256)": {
        "notice": "withdraw in case of some protocol errors, users can always get back their tokens*"
      },
      "getTotalDebtE18(address,address)": {
        "notice": "total dept is calculated as current debt with added calculated fee, don't use it in practice*"
      },
      "initialize(address,address,address,address,address)": {
        "notice": "vault is initialize with parameters for auth (we are using OZ instead) and it accept address for wrapped eth, main stable coin, and probably governance token*"
      },
      "lastUpdate(address,address)": {
        "notice": "the last time, when every fee before lastUpdates are calculated in the debt. All data such as fees are from lastUpdate only*"
      },
      "liquidationBlock(address,address)": {
        "notice": "asset => user => block number*"
      },
      "payFeeAndBurn(address,uint256,uint256)": {
        "notice": "Burns a debt repayment and transfers fees to the foundation."
      },
      "protocolStabilityFeeE18(address)": {
        "notice": "Stability fee that is used in calculateFeeE18 to see how much user debt increased. It can be different for each collateral*"
      },
      "setCollateral(address,uint256,uint256)": {
        "notice": "manager is allowed to add new collaterals and modify existing ones*"
      },
      "setFoundation(address)": {
        "notice": "manager is allowed to change foundation that receive fees and etc*"
      },
      "setStabilityFeeE18(address,uint256)": {
        "notice": "set fee percentage (1e18 = 100%)*"
      },
      "setTokenDebtLimitE18(address,uint256)": {
        "notice": "debt limit can be changed for any collateral along with liquidation and stability fees*"
      },
      "stabilityFeeE18(address,address)": {
        "notice": "current interest that user pay for stabilityFee[asset][user]*"
      },
      "tokenDebtLimitE18(address)": {
        "notice": "Limit for each collateral-asset to manage risk profile*"
      },
      "tokenDebtsE18(address)": {
        "notice": "Stats, how much stablecoins were borrowed against particular asset == tokenDebtsE18[asset]*"
      },
      "tokenDebtsWithFeesE18(address)": {
        "notice": "tokenDebtsE18[asset] + accumulated fee in all CDPs in this asset*"
      },
      "triggerLiquidation(address,address)": {
        "notice": "Marks a position as to be liquidated"
      },
      "update(address,address)": {
        "notice": "Update all main state vars position is not allowed to be modified during liquidation, because when it's launched - liquidators want to be sure they can participate"
      },
      "withdraw(address,address,address,uint256)": {
        "notice": "collateral withdraw*"
      }
    },
    "notice": "Users don't have direct access to it, only through SuManager",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 671,
        "contract": "contracts/lending/SuVault.sol:SuVault",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 674,
        "contract": "contracts/lending/SuVault.sol:SuVault",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 28586,
        "contract": "contracts/lending/SuVault.sol:SuVault",
        "label": "ACCESS_CONTROL_SINGLETON",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(ISuAccessControl)32175"
      },
      {
        "astId": 26903,
        "contract": "contracts/lending/SuVault.sol:SuVault",
        "label": "protocolStabilityFeeE18",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 26907,
        "contract": "contracts/lending/SuVault.sol:SuVault",
        "label": "tokenDebtLimitE18",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 26909,
        "contract": "contracts/lending/SuVault.sol:SuVault",
        "label": "foundation",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 26911,
        "contract": "contracts/lending/SuVault.sol:SuVault",
        "label": "vault",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 17936,
        "contract": "contracts/lending/SuVault.sol:SuVault",
        "label": "suPausable",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(ISuPausable)23716"
      },
      {
        "astId": 26050,
        "contract": "contracts/lending/SuVault.sol:SuVault",
        "label": "STABLE_PRO",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(StablePro)17401"
      },
      {
        "astId": 26056,
        "contract": "contracts/lending/SuVault.sol:SuVault",
        "label": "collateralsEDecimal",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 26062,
        "contract": "contracts/lending/SuVault.sol:SuVault",
        "label": "debtWithFeesE18",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 26068,
        "contract": "contracts/lending/SuVault.sol:SuVault",
        "label": "debtsE18",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 26072,
        "contract": "contracts/lending/SuVault.sol:SuVault",
        "label": "tokenDebtsWithFeesE18",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 26076,
        "contract": "contracts/lending/SuVault.sol:SuVault",
        "label": "tokenDebtsE18",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 26082,
        "contract": "contracts/lending/SuVault.sol:SuVault",
        "label": "stabilityFeeE18",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 26088,
        "contract": "contracts/lending/SuVault.sol:SuVault",
        "label": "lastUpdate",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 26094,
        "contract": "contracts/lending/SuVault.sol:SuVault",
        "label": "liquidationBlock",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 26117,
        "contract": "contracts/lending/SuVault.sol:SuVault",
        "label": "rewardChef",
        "offset": 0,
        "slot": "15",
        "type": "t_contract(RewardChefV2)38904"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ISuAccessControl)32175": {
        "encoding": "inplace",
        "label": "contract ISuAccessControl",
        "numberOfBytes": "20"
      },
      "t_contract(ISuPausable)23716": {
        "encoding": "inplace",
        "label": "contract ISuPausable",
        "numberOfBytes": "20"
      },
      "t_contract(RewardChefV2)38904": {
        "encoding": "inplace",
        "label": "contract RewardChefV2",
        "numberOfBytes": "20"
      },
      "t_contract(StablePro)17401": {
        "encoding": "inplace",
        "label": "contract StablePro",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}