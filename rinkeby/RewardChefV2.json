{
  "address": "0x2a04351387D6fA9D024315b83F07964a125e0248",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_authControl",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "contract ISuOracle",
          "name": "_oracle",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Harvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        }
      ],
      "name": "LogPoolAddition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        }
      ],
      "name": "LogSetPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "lastRewardBlock",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "accSushiPerShare",
          "type": "uint256"
        }
      ],
      "name": "LogUpdatePool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockupPeriodSeconds",
          "type": "uint256"
        }
      ],
      "name": "ResetAmount",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "VirtualDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "VirtualWithdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACCESS_CONTROL_SINGLETON",
      "outputs": [
        {
          "internalType": "contract ISuAccessControl",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIQUIDATION_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ORACLE",
      "outputs": [
        {
          "internalType": "contract ISuOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARD_TOKEN",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VAULT_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountEDecimal",
          "type": "uint256"
        }
      ],
      "name": "decreaseAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountEDecimal",
          "type": "uint256"
        }
      ],
      "name": "decreaseAmountRewardPenalty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getPoolApr",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPossibleLockupPeriodsSeconds",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "lockupPeriodSeconds",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "multiplicator1e18",
              "type": "uint256"
            }
          ],
          "internalType": "struct RewardChefV2.ILockupPeriod[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newLockupPeriodSeconds",
          "type": "uint256"
        }
      ],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountEDecimal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockupPeriodSeconds",
          "type": "uint256"
        }
      ],
      "name": "increaseAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingSushi",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pending",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "accSushiPerShare",
          "type": "uint128"
        },
        {
          "internalType": "uint64",
          "name": "lastRewardBlock",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "allocPoint",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "lpSupply",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "endBlock",
          "type": "uint64"
        }
      ],
      "name": "refillReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "resetAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardEndBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "startBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endBlock",
          "type": "uint256"
        }
      ],
      "name": "rewardsBetweenBlocks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        }
      ],
      "name": "set",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lockupPeriodSeconds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "multiplicator1e18",
          "type": "uint256"
        }
      ],
      "name": "setPossibleLockupPeriodsSeconds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAllocPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateAllPools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "updatePool",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "accSushiPerShare",
              "type": "uint128"
            },
            {
              "internalType": "uint64",
              "name": "lastRewardBlock",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "allocPoint",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "lpSupply",
              "type": "uint256"
            }
          ],
          "internalType": "struct IRewardChefV2.PoolInfo",
          "name": "pool",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "rewardDebt",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "multiplicator1e18",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockupPeriodSeconds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockupStartTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8cb66443ff3e654b4594b936c6ed2d8459ed8b9a0bac0386bd194bab0146b04b",
  "receipt": {
    "to": null,
    "from": "0xE2661235b116781a7b30D4a675898cF9E61298Df",
    "contractAddress": "0x2a04351387D6fA9D024315b83F07964a125e0248",
    "transactionIndex": 5,
    "gasUsed": "2527410",
    "logsBloom": "0x
    "blockHash": "0xe04587c451364bd4c1eba4be90fd17f444b19ffedc9a46d036494c679343aec2",
    "transactionHash": "0x8cb66443ff3e654b4594b936c6ed2d8459ed8b9a0bac0386bd194bab0146b04b",
    "logs": [],
    "blockNumber": 11104557,
    "cumulativeGasUsed": "7682548",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x97BaD58312b27BB53846749d35a8f0dc0F95E7eE",
    "0x86bc9E097a0A2Ca736AB31B53Ad93Ab3E5B332e1",
    "0xE49187305017f54D2BB716a8b9C86D1cF90Cf99D"
  ],
  "numDeployments": 1,
  "solcInputHash": "f0e3ee812b01a4597188858a77d65e1c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_authControl\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"contract ISuOracle\",\"name\":\"_oracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"}],\"name\":\"LogPoolAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"}],\"name\":\"LogSetPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"lastRewardBlock\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accSushiPerShare\",\"type\":\"uint256\"}],\"name\":\"LogUpdatePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockupPeriodSeconds\",\"type\":\"uint256\"}],\"name\":\"ResetAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"VirtualDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"VirtualWithdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACCESS_CONTROL_SINGLETON\",\"outputs\":[{\"internalType\":\"contract ISuAccessControl\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDATION_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ORACLE\",\"outputs\":[{\"internalType\":\"contract ISuOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VAULT_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountEDecimal\",\"type\":\"uint256\"}],\"name\":\"decreaseAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountEDecimal\",\"type\":\"uint256\"}],\"name\":\"decreaseAmountRewardPenalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getPoolApr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPossibleLockupPeriodsSeconds\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lockupPeriodSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplicator1e18\",\"type\":\"uint256\"}],\"internalType\":\"struct RewardChefV2.ILockupPeriod[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newLockupPeriodSeconds\",\"type\":\"uint256\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountEDecimal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockupPeriodSeconds\",\"type\":\"uint256\"}],\"name\":\"increaseAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingSushi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pending\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"accSushiPerShare\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"lastRewardBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"allocPoint\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"lpSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"endBlock\",\"type\":\"uint64\"}],\"name\":\"refillReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"resetAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardEndBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"}],\"name\":\"rewardsBetweenBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockupPeriodSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplicator1e18\",\"type\":\"uint256\"}],\"name\":\"setPossibleLockupPeriodsSeconds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateAllPools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"updatePool\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"accSushiPerShare\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"lastRewardBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"allocPoint\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"lpSupply\",\"type\":\"uint256\"}],\"internalType\":\"struct IRewardChefV2.PoolInfo\",\"name\":\"pool\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"rewardDebt\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"multiplicator1e18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockupPeriodSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockupStartTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"add(uint256,address)\":{\"params\":{\"_asset\":\"Address of the ERC-20 token.\",\"allocPoint\":\"AP of the new pool.\"}},\"constructor\":{\"params\":{\"_rewardToken\":\"The REWARD_TOKEN token contract address.\"}},\"harvest(address,address,uint256)\":{\"params\":{\"asset\":\"Asset address\",\"to\":\"Receiver of REWARD_TOKEN rewards.\"}},\"pendingSushi(address,address)\":{\"params\":{\"_asset\":\"Address of the ERC-20 token.\",\"_user\":\"Address of user.\"},\"returns\":{\"pending\":\"REWARD_TOKEN reward for a given user.\"}},\"resetAmount(address,address)\":{\"params\":{\"asset\":\"Asset address\",\"to\":\"The address of the user whose information will be cleared\"}},\"rewardsBetweenBlocks(uint256,uint256)\":{\"details\":\"returns total amount of rewards allocated to the all pools on the rage (startBlock, endBlock]      i.e. excluding startBlock but including endBlock\"},\"set(address,uint256)\":{\"params\":{\"_allocPoint\":\"New AP of the pool.\",\"_asset\":\"Address of the ERC-20 token.\"}},\"updatePool(address)\":{\"params\":{\"asset\":\"Asset address\"},\"returns\":{\"pool\":\"Returns the pool that was updated.\"}}},\"stateVariables\":{\"totalAllocPoint\":{\"details\":\"Total allocation points. Must be the sum of all allocation points in all pools. The good practice, to always keep this variable is equal 1000.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"REWARD_TOKEN()\":{\"notice\":\"Address of REWARD_TOKEN contract.\"},\"add(uint256,address)\":{\"notice\":\"Add a new reward pool. Can only be called by the owner. DO NOT add the same LP token more than once.\"},\"decreaseAmount(address,address,uint256)\":{\"notice\":\"Analogues to MVC2 Withdraw method, that can be called only by trusted address that is trusted to honestly calc how many \\\"virtual\\\" tokens have to be allocated for each user.\"},\"harvest(address,address,uint256)\":{\"notice\":\"Harvest proceeds for transaction sender to `to`.\"},\"increaseAmount(address,address,uint256,uint256)\":{\"notice\":\"analogues to MCV2 Deposit method, but can be called only by trusted address\"},\"pendingSushi(address,address)\":{\"notice\":\"View function to see pending REWARD_TOKEN on frontend.\"},\"poolInfo(address)\":{\"notice\":\"Info of each MCV2 pool. PoolInfo memory pool = poolInfo[_pid]\"},\"resetAmount(address,address)\":{\"notice\":\"Withdraw without caring about rewards. EMERGENCY ONLY.\"},\"set(address,uint256)\":{\"notice\":\"Update the given pool's REWARD_TOKEN allocation point. Can only be called by the owner.\"},\"updateAllPools()\":{\"notice\":\"Update reward variables for all pools. Be careful of gas spending!\"},\"updatePool(address)\":{\"notice\":\"Update reward variables of the given pool.\"},\"userInfo(address,address)\":{\"notice\":\"Info of each user that stakes tokens. userInfo[_asset][_user]\"}},\"notice\":\"This contract is based on MVC2, but uses \\\"virtual\\\" balances instead of storing real ERC20 tokens and uses address of this assets instead of pid. Rewards that are distributed have to be deposited using refillReward(uint256 amount, uint64 endBlock)\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/reward/RewardChefV2.sol\":\"RewardChefV2\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x5c6caab697d302ad7eb59c234a4d2dbc965c1bae87709bd2850060b7695b28c7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"contracts/access-control/SuAuthenticated.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\npragma solidity >=0.7.6;\\n\\nimport \\\"../interfaces/ISuAccessControl.sol\\\";\\n\\n/**\\n * @title SuAuthenticated\\n * @dev other contracts should inherit to be authenticated\\n */\\nabstract contract SuAuthenticated {\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant VAULT_ACCESS_ROLE = keccak256(\\\"VAULT_ACCESS_ROLE\\\");\\n    bytes32 public constant LIQUIDATION_ACCESS_ROLE = keccak256(\\\"LIQUIDATION_ACCESS_ROLE\\\");\\n    bytes32 private constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /// @dev the address of SuAccessControlSingleton - it should be one for all contract that inherits SuAuthenticated\\n    ISuAccessControl public immutable ACCESS_CONTROL_SINGLETON;\\n\\n    /// @dev should be passed in constructor\\n    constructor(address _accessControlSingleton) {\\n        ACCESS_CONTROL_SINGLETON = ISuAccessControl(_accessControlSingleton);\\n        // TODO: check that _accessControlSingleton points to ISuAccessControl instance\\n        // require(ISuAccessControl(_accessControlSingleton).supportsInterface(ISuAccessControl.hasRole.selector), \\\"bad dependency\\\");\\n    }\\n\\n    /// @dev check DEFAULT_ADMIN_ROLE\\n    modifier onlyOwner() {\\n        require(ACCESS_CONTROL_SINGLETON.hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"SuAuth: onlyOwner AUTH_FAILED\\\");\\n        _;\\n    }\\n\\n    /// @dev check VAULT_ACCESS_ROLE\\n    modifier onlyVaultAccess() {\\n        require(ACCESS_CONTROL_SINGLETON.hasRole(VAULT_ACCESS_ROLE, msg.sender), \\\"SuAuth: onlyVaultAccess AUTH_FAILED\\\");\\n        _;\\n    }\\n\\n    /// @dev check VAULT_ACCESS_ROLE\\n    modifier onlyLiquidationAccess() {\\n        require(ACCESS_CONTROL_SINGLETON.hasRole(LIQUIDATION_ACCESS_ROLE, msg.sender), \\\"SuAuth: onlyLiquidationAccess AUTH_FAILED\\\");\\n        _;\\n    }\\n\\n    /// @dev check MINTER_ROLE\\n    modifier onlyMinter() {\\n        require(ACCESS_CONTROL_SINGLETON.hasRole(MINTER_ROLE, msg.sender), \\\"SuAuth: onlyMinter AUTH_FAILED\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x0cf69e39724023d26c834d7a13f51b418604c19010949d146094f99e06ee8b9c\",\"license\":\"BSL 1.1\"},\"contracts/interfaces/IRewardChefV2.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IRewardChefV2 {\\n    /// @notice Info of each reward pool.\\n    /// `allocPoint` The amount of allocation points assigned to the pool.\\n    /// Also known as the amount of REWARD_TOKEN to distribute per block.\\n    struct PoolInfo {\\n        uint128 accSushiPerShare;\\n        uint64 lastRewardBlock;\\n        uint64 allocPoint;\\n        uint256 lpSupply;\\n    }\\n\\n    /// @notice Info of each user.\\n    /// `amount` token amount the user has provided.\\n    /// `rewardDebt` The amount of rewards entitled to the user.\\n    struct UserInfo {\\n        uint256 amount;\\n        int256 rewardDebt;\\n\\n        uint256 multiplicator1e18;\\n        uint256 lockupPeriodSeconds;\\n        uint256 lockupStartTimestamp;\\n    }\\n\\n    // Public variables that are declared in RewardChefV2.sol\\n    //  function userInfo(address asset, address user) external returns ( UserInfo );\\n    //  function poolInfo(address asset) external returns ( PoolInfo );\\n\\n    function REWARD_TOKEN() external view returns ( IERC20 );\\n    function add(uint256 allocPoint, address _asset) external;\\n\\n    function increaseAmount(address asset, address to, uint256 amountEDecimal, uint256 lockupPeriodSeconds) external;\\n    function decreaseAmount(address asset, address to, uint256 amountEDecimal) external;\\n    function decreaseAmountRewardPenalty(address asset, address to, uint256 amountEDecimal) external view returns (uint256);\\n    function harvest(address asset, address to, uint256 newLockupPeriodSeconds) external;\\n    function pendingSushi(address _asset, address _user) external view returns ( uint256 );\\n    function refillReward(uint256 amount, uint64 endBlock) external;\\n    function rewardsBetweenBlocks(uint256 startBlock, uint256 endBlock) external returns ( uint256 );\\n    function rewardEndBlock() external view returns ( uint256 );\\n    function set(address _asset, uint256 _allocPoint) external;\\n    function totalAllocPoint() external view returns ( uint256 );\\n    function updateAllPools() external;\\n    function updatePool(address asset) external returns ( PoolInfo memory );\\n    function resetAmount(address asset, address to) external;\\n}\\n\",\"keccak256\":\"0x659861294ca72fe6c5dd801e6c4baccbc422d3b8cece10d0c0b59a75c6b609b6\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ISuAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface ISuAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n    function grantRole(bytes32 role, address account) external;\\n    function revokeRole(bytes32 role, address account) external;\\n    function renounceRole(bytes32 role, address account) external;\\n\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    // TODO: remove legacy functionality\\n    function setVault(address _vault, bool _isVault) external;\\n    function setCdpManager(address _cdpManager, bool _isCdpManager) external;\\n    function setDAO(address _dao, bool _isDAO) external;\\n    function setManagerParameters(address _address, bool _permit) external;\\n    function transferOwnership(address newOwner) external;\\n}\\n\",\"keccak256\":\"0xd386f4bad5ae0d77788abea08ceec10dc02b02559465d8a8f4e30b58dfac2d2a\",\"license\":\"MIT\"},\"contracts/interfaces/ISuOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity >=0.7.6;\\n\\ninterface ISuOracle {\\n    /**\\n     * @notice WARNING! Read this description very carefully!\\n     *      function getUsdPrice1e18(address asset) returns (uint256) that:\\n     *          basicAmountOfAsset * getUsdPrice1e18(asset) / 1e18 === $$ * 1e18\\n     *      in other words, it doesn't matter what's the erc20.decimals is,\\n     *      you just multiply token balance in basic units on value from oracle and get dollar amount multiplied on 1e18.\\n     *\\n     * different assets have different deviation threshold (errors)\\n     *      for wBTC it's <= 0.5%, read more https://data.chain.link/ethereum/mainnet/crypto-usd/btc-usd\\n     *      for other asset is can be larger based on particular oracle implementation.\\n     *\\n     * examples:\\n     *      assume market price of wBTC = $31,503.77, oracle error = $158\\n     *\\n     *       case #1: small amount of wBTC\\n     *           we have 0.0,000,001 wBTC that is worth v = $0.00315 \\u00b1 $0.00001 = 0.00315*1e18 = 315*1e13 \\u00b1 1*1e13\\n     *           actual balance on the asset b = wBTC.balanceOf() =  0.0000001*1e18 = 1e11\\n     *           oracle should return or = oracle.getUsdPrice1e18(wBTC) <=>\\n     *           <=> b*or = v => v/b = 315*1e13 / 1e11 = 315*1e2 \\u00b1 1e2\\n     *           error = or.error * b = 1e2 * 1e11 = 1e13 => 1e13/1e18 usd = 1e-5 = 0.00001 usd\\n     *\\n     *       case #2: large amount of wBTC\\n     *           v = 2,000,000 wBTC = $31,503.77 * 2m \\u00b1 158*2m = $63,007,540,000 \\u00b1 $316,000,000 = 63,007*1e24 \\u00b1 316*1e24\\n     *           for calc convenience we increase error on 0.05 and have v = 63,000*24 \\u00b1 300*1e24 = (630 \\u00b1 3)*1e26\\n     *           b = 2*1e6 * 1e18 = 2*1e24\\n     *           or = v/b = (630 \\u00b1 3)*1e26 / 2*1e24 = 315*1e2 \\u00b1 1.5*1e2\\n     *           error = or.error * b = 1.5*100 * 2*1e24 = 3*1e26 = 3*1e8*1e18 = $300,000,000 ~ $316,000,000\\n     *\\n     *      assume the market price of USDT = $0.97 \\u00b1 $0.00485,\\n     *\\n     *       case #3: little amount of USDT\\n     *           v = USDT amount 0.005 = 0.005*(0.97 \\u00b1 0.00485) = 0.00485*1e18 \\u00b1 0.00002425*1e18 = 485*1e13 \\u00b1 3*1e13\\n     *           we rounded error up on (3000-2425)/2425 ~= +24% for calculation convenience.\\n     *           b = USDT.balanceOf() = 0.005*1e6 = 5*1e3\\n     *           b*or = v => or = v/b = (485*1e13 \\u00b1 3*1e13) / 5*1e3 = 970*1e9 \\u00b1 6*1e9\\n     *           error = 6*1e9 * 5*1e3 / 1e18 = 30*1e12/1e18 = 3*1e-5 = $0,00005\\n     *\\n     *       case #4: lot of USDT\\n     *           v = we have 100,000,000,000 USDT = $97B = 97*1e9*1e18 \\u00b1 0.5*1e9*1e18\\n     *           b = USDT.balanceOf() = 1e11*1e6 = 1e17\\n     *           or = v/b = (97*1e9*1e18 \\u00b1 0.5*1e9*1e18) / 1e17 = 970*1e9 \\u00b1 5*1e9\\n     *           error = 5*1e9 * 1e17 = 5*1e26 = 0.5 * 1e8*1e18\\n     *\\n     * @param asset - address of erc20 token contract\\n     * @return usdPrice1e18 such that asset.balanceOf() * getUsdPrice1e18(asset) / 1e18 == $$ * 1e18\\n     **/\\n    function getUsdPrice1e18(address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x000567b74a69b532d893db59cb93c4e470aa794a909a7309fdacc0ba29671538\",\"license\":\"UNLICENSED\"},\"contracts/reward/RewardChefV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport \\\"../access-control/SuAuthenticated.sol\\\";\\nimport \\\"../interfaces/IRewardChefV2.sol\\\";\\nimport \\\"../interfaces/ISuOracle.sol\\\";\\n\\n// fork of MasterChefV2(May-13-2021) https://etherscan.io/address/0xef0881ec094552b2e128cf945ef17a6752b4ec5d#code\\n\\n/// This contract is based on MVC2, but uses \\\"virtual\\\" balances instead of storing real ERC20 tokens\\n/// and uses address of this assets instead of pid.\\n/// Rewards that are distributed have to be deposited using refillReward(uint256 amount, uint64 endBlock)\\ncontract RewardChefV2 is IRewardChefV2, SuAuthenticated {\\n    using SafeCast for uint256;\\n    using SafeCast for uint128;\\n    using SafeCast for uint64;\\n    using SafeCast for int256;\\n    using SafeERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    // SuDAO: instead of pool Ids (pid) we use address of the asset directly.\\n    //        Also, there aren't just LPs but regular assets as well\\n    /// @notice Info of each MCV2 pool. PoolInfo memory pool = poolInfo[_pid]\\n    //    PoolInfo[] public poolInfo;\\n    mapping(address => PoolInfo) public poolInfo;\\n    /// @notice Address of the LP token for each MCV2 pool.\\n    //    IERC20[] public lpTokens;\\n    /// @notice Set of reward-able assets\\n    EnumerableSet.AddressSet private assetSet;\\n\\n    /// @notice Info of each user that stakes tokens. userInfo[_asset][_user]\\n    mapping(address => mapping(address => UserInfo)) public userInfo;\\n\\n    /// @dev Total allocation points. Must be the sum of all allocation points in all pools.\\n    /// The good practice, to always keep this variable is equal 1000.\\n    uint256 public override totalAllocPoint;\\n\\n    uint256 private constant ACC_REWARD_TOKEN_PRECISION = 1e12; // TODO*: make it 1e18? check values overflow\\n\\n    //    // we would use just \\\"lpToken to poolId\\\" but because mapper is init with zeros by default\\n    //    // that would create a edge case for the first pool with pID 0, so we store pID + 1 instead\\n    //    mapping (address => uint256) private _lpTokenToPoolIdPlus1;\\n\\n    // ==========================REWARDER================================\\n    /// @notice Address of REWARD_TOKEN contract.\\n    IERC20 public immutable override REWARD_TOKEN;\\n    ISuOracle public immutable ORACLE;\\n\\n    uint256 public rewardPerBlock;\\n    uint256 public override rewardEndBlock;\\n\\n    function refillReward(uint256 amount, uint64 endBlock) public onlyOwner override {\\n        require(endBlock > block.number, \\\"EndBlock should be greater than current block\\\");\\n        // TODO: gas optimization\\n        updateAllPools();\\n\\n        REWARD_TOKEN.safeTransferFrom(msg.sender, address(this), amount);\\n        uint256 rewardLeftAmount;\\n        // if there are active rewards leftovers\\n        if (rewardEndBlock > 0) {\\n            // if we call refillReward before old endBlock ends\\n            if (block.number < rewardEndBlock) {\\n                rewardLeftAmount = rewardPerBlock * (rewardEndBlock - block.number);\\n            } else {\\n                // if we start the new reward interval that has nothing in common with the old noe\\n                rewardLeftAmount = 0;\\n            }\\n        }\\n        rewardPerBlock = (rewardLeftAmount + amount) / (endBlock - block.number);\\n        rewardEndBlock = endBlock;\\n    }\\n\\n\\n\\n    /**\\n     *  @dev returns total amount of rewards allocated to the all pools on the rage (startBlock, endBlock]\\n     *      i.e. excluding startBlock but including endBlock\\n     */\\n    function rewardsBetweenBlocks(uint256 startBlock, uint256 endBlock) public view override returns (uint256) {\\n        // if all rewards were allocation before our range - then answer is 0\\n        if (rewardEndBlock <= startBlock) {\\n            return 0;\\n        } else {\\n            // if rewards allocates on the whole range, than just calc rectangle area\\n            if (endBlock < rewardEndBlock) {\\n                return (endBlock - startBlock) * rewardPerBlock;\\n            } else {\\n                // other-vice, rewards end its allocation during our rage, so we have to calc only until rewardEndBlock\\n                return (rewardEndBlock - startBlock) * rewardPerBlock;\\n            }\\n        }\\n    }\\n\\n    //==========================LOCKUP LOGIC=========================================\\n    struct ILockupPeriod {\\n        uint256 lockupPeriodSeconds;\\n        uint256 multiplicator1e18;\\n    }\\n\\n    mapping(uint256 => uint256) multiplicator1e18ForLockupPeriod;\\n    EnumerableSet.UintSet private possibleLockupPeriodsSeconds;\\n\\n    function getPossibleLockupPeriodsSeconds() external view returns (ILockupPeriod[] memory) {\\n        uint256[] memory periods = possibleLockupPeriodsSeconds.values();\\n        uint256 len = periods.length;\\n        ILockupPeriod[] memory lockupPeriods = new ILockupPeriod[](len);\\n        for (uint256 i = 0; i < len; i++) {\\n            lockupPeriods[i] = ILockupPeriod({\\n            lockupPeriodSeconds : periods[i],\\n            multiplicator1e18 : multiplicator1e18ForLockupPeriod[periods[i]]\\n            });\\n        }\\n        return lockupPeriods;\\n    }\\n\\n    function setPossibleLockupPeriodsSeconds(uint256 lockupPeriodSeconds, uint256 multiplicator1e18) external onlyOwner {\\n        multiplicator1e18ForLockupPeriod[lockupPeriodSeconds] = multiplicator1e18;\\n        if (multiplicator1e18 == 0) {\\n            possibleLockupPeriodsSeconds.remove(lockupPeriodSeconds);\\n        } else {\\n            possibleLockupPeriodsSeconds.add(lockupPeriodSeconds);\\n        }\\n    }\\n    //===================================================================\\n\\n    //    event Deposit(address indexed user, uint256 indexed pid, uint256 amount, address indexed to);\\n    event VirtualDeposit(address indexed user, address indexed asset, uint256 amount);\\n    //    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount, address indexed to);\\n    event VirtualWithdraw(address indexed user, address indexed asset, uint256 amount);\\n    event ResetAmount(\\n        address indexed user,\\n        address indexed asset,\\n        address indexed to,\\n        uint256 amount,\\n        uint256 lockupPeriodSeconds\\n    );\\n    event Harvest(address indexed user, address indexed asset, uint256 amount);\\n    //    event LogPoolAddition(uint256 indexed pid, uint256 allocPoint, IERC20 indexed lpToken);\\n    event LogPoolAddition(address indexed asset, uint256 allocPoint);\\n    event LogSetPool(address indexed asset, uint256 allocPoint);\\n    event LogUpdatePool(address indexed asset, uint64 lastRewardBlock, uint256 lpSupply, uint256 accSushiPerShare);\\n\\n\\n    /// @param _rewardToken The REWARD_TOKEN token contract address.\\n    constructor(address _authControl, IERC20 _rewardToken, ISuOracle _oracle) SuAuthenticated(_authControl) {\\n        REWARD_TOKEN = _rewardToken;\\n        ORACLE = _oracle;\\n    }\\n    //\\n    //    /// @notice Returns the number of MCV2 pools.\\n    //    function poolLength() public view returns (uint256 pools) {\\n    //        pools = poolInfo.length;\\n    //    }\\n    //\\n    //    function lpTokenToPoolId(address _lpToken) view public returns (uint256) {\\n    //        uint256 pIdPlus1 = _lpTokenToPoolIdPlus1[_lpToken];\\n    //        require(pIdPlus1 > 0, \\\"pool for this lpToken doesn't exist\\\");\\n    //        return  pIdPlus1 - 1;\\n    //    }\\n\\n    /// @notice Add a new reward pool. Can only be called by the owner.\\n    /// DO NOT add the same LP token more than once.\\n    /// @param allocPoint AP of the new pool.\\n    /// @param _asset Address of the ERC-20 token.\\n    function add(uint256 allocPoint, address _asset) public onlyOwner override {\\n        // check for possible duplications\\n        require(poolInfo[_asset].lastRewardBlock == 0, \\\"Pool already exist\\\");\\n\\n        uint256 lastRewardBlock = block.number;\\n        totalAllocPoint = totalAllocPoint + allocPoint;\\n        //        lpTokens.push(_lpToken);\\n        assetSet.add(_asset);\\n\\n        poolInfo[_asset] = PoolInfo({\\n        allocPoint : allocPoint.toUint64(),\\n        lastRewardBlock : lastRewardBlock.toUint64(),\\n        accSushiPerShare : 0,\\n        lpSupply : 0\\n        });\\n\\n        //        _lpTokenToPoolIdPlus1[address(_lpToken)] = poolInfo.length;\\n        emit LogPoolAddition(_asset, allocPoint);\\n    }\\n\\n    /// @notice Update the given pool's REWARD_TOKEN allocation point. Can only be called by the owner.\\n    /// @param _asset Address of the ERC-20 token.\\n    /// @param _allocPoint New AP of the pool.\\n    function set(address _asset, uint256 _allocPoint) public onlyOwner override {\\n        require(poolInfo[_asset].lastRewardBlock != 0, \\\"Pool doesn't exist\\\");\\n        // TODO: why was it in legal in MVC2 to call this function without mandatory update method?\\n        updatePool(_asset);\\n        totalAllocPoint = totalAllocPoint - poolInfo[_asset].allocPoint + _allocPoint;\\n        poolInfo[_asset].allocPoint = _allocPoint.toUint64();\\n        if (_allocPoint == 0) {\\n            // we don't need to call updatePool(_asset) again\\n            // because the result of the second time call in the same block doesn't change anything\\n            assetSet.remove(_asset);\\n        }\\n        emit LogSetPool(_asset, _allocPoint);\\n    }\\n\\n    /// @notice View function to see pending REWARD_TOKEN on frontend.\\n    /// @param _asset Address of the ERC-20 token.\\n    /// @param _user Address of user.\\n    /// @return pending REWARD_TOKEN reward for a given user.\\n    function pendingSushi(address _asset, address _user) public view override returns (uint256 pending) {\\n        PoolInfo memory pool = poolInfo[_asset];\\n        UserInfo memory user = userInfo[_asset][_user];\\n        uint256 accSushiPerShare = pool.accSushiPerShare;\\n        // we don't have real balances anymore, so instead of\\n        //        uint256 lpSupply = lpTokens[_pid].balanceOf(address(this));\\n        // we use virtual total balance\\n        uint256 lpSupply = poolInfo[_asset].lpSupply;\\n        if (block.number > pool.lastRewardBlock && lpSupply != 0 && totalAllocPoint != 0) {\\n            /// how much reward were minted since last update pool.lastRewardBlock\\n            uint256 totalSushiReward = rewardsBetweenBlocks(pool.lastRewardBlock, block.number);\\n            uint256 poolSushiReward = totalSushiReward * pool.allocPoint / totalAllocPoint;\\n            // account it into share value\\n            accSushiPerShare = accSushiPerShare + (poolSushiReward * ACC_REWARD_TOKEN_PRECISION / lpSupply);\\n        }\\n        pending = ((user.amount * accSushiPerShare / ACC_REWARD_TOKEN_PRECISION).toInt256() - user.rewardDebt).toUint256();\\n    }\\n\\n    /// @notice Update reward variables of the given pool.\\n    /// @param asset Asset address\\n    /// @return pool Returns the pool that was updated.\\n    function updatePool(address asset) public override returns (PoolInfo memory pool) {\\n        pool = poolInfo[asset];\\n        if (block.number > pool.lastRewardBlock) {\\n            // uint256 lpSupply = lpTokens[pid].balanceOf(address(this));\\n            uint256 lpSupply = pool.lpSupply;\\n            if (lpSupply > 0 && pool.allocPoint > 0) {\\n                /// calc how much rewards are minted since pool.lastRewardBlock for the pool\\n                uint256 totalSushiReward = rewardsBetweenBlocks(pool.lastRewardBlock, block.number);\\n                uint256 poolSushiReward = totalSushiReward * pool.allocPoint / totalAllocPoint;\\n                ///\\n                pool.accSushiPerShare = pool.accSushiPerShare + (poolSushiReward * ACC_REWARD_TOKEN_PRECISION / lpSupply).toUint128();\\n            }\\n            pool.lastRewardBlock = block.number.toUint64();\\n            poolInfo[asset] = pool;\\n            emit LogUpdatePool(asset, pool.lastRewardBlock, lpSupply, pool.accSushiPerShare);\\n        }\\n    }\\n\\n    /// @notice Update reward variables for all pools. Be careful of gas spending!\\n    function updateAllPools() public override {\\n        address[] memory assets = assetSet.values();\\n        uint256 len = assets.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            updatePool(assets[i]);\\n        }\\n    }\\n\\n\\n\\n    /// @notice analogues to MCV2 Deposit method, but can be called only by trusted address\\n    // that is trusted to honestly calc how many \\\"virtual\\\" tokens have to be allocated for each user.\\n    function increaseAmount(address asset, address to, uint256 amountEDecimal, uint256 lockupPeriodSeconds)\\n    public onlyOwner override {\\n        PoolInfo memory pool = updatePool(asset);\\n        UserInfo storage user = userInfo[asset][to];\\n\\n        if (user.lockupPeriodSeconds == 0) {// it means there's no deposit yet\\n            user.multiplicator1e18 = multiplicator1e18ForLockupPeriod[lockupPeriodSeconds];\\n            user.lockupPeriodSeconds = lockupPeriodSeconds;\\n            user.lockupStartTimestamp = block.timestamp;\\n        } else {\\n            require(user.lockupPeriodSeconds == lockupPeriodSeconds, \\\"Existing deposit has different lockup\\\");\\n        }\\n\\n        require(user.multiplicator1e18 != 0, \\\"User multiplicator equils zero\\\");\\n\\n        // Effects\\n        // user.amount = user.amount + amountEDecimal;\\n        uint256 additionalAmount = amountEDecimal * user.multiplicator1e18 / 1e18;\\n        user.amount = user.amount + additionalAmount;\\n        user.rewardDebt = user.rewardDebt + (additionalAmount * pool.accSushiPerShare / ACC_REWARD_TOKEN_PRECISION).toInt256();\\n\\n        // we don't need, since the balances are virtual\\n        // lpToken[pid].safeTransferFrom(msg.sender, address(this), amount);\\n        // but we need to calc total supply of virtual tokens\\n        pool.lpSupply = pool.lpSupply + additionalAmount;\\n        poolInfo[asset] = pool;\\n\\n        emit VirtualDeposit(to, asset, additionalAmount);\\n    }\\n\\n    /// @notice Analogues to MVC2 Withdraw method, that can be called only by trusted address\\n    /// that is trusted to honestly calc how many \\\"virtual\\\" tokens have to be allocated for each user.\\n    function decreaseAmount(address asset, address to, uint256 amountEDecimal) public onlyOwner override {\\n        PoolInfo memory pool = updatePool(asset);\\n        UserInfo storage user = userInfo[asset][to];\\n\\n        require(user.multiplicator1e18 != 0, \\\"User multiplicator equils zero\\\");\\n\\n        // how much penalty?\\n        uint256 penalty = 0;\\n        if (block.timestamp < user.lockupStartTimestamp + user.lockupPeriodSeconds) {\\n           // if we decreasing before time-lock is over\\n            penalty = decreaseAmountRewardPenalty(asset, to, amountEDecimal);\\n        }\\n\\n        // Effects\\n        uint256 subtractAmount = amountEDecimal * user.multiplicator1e18 / 1e18;\\n        user.rewardDebt = user.rewardDebt - (subtractAmount * pool.accSushiPerShare / ACC_REWARD_TOKEN_PRECISION).toInt256() + penalty.toInt256();\\n        user.amount = user.amount - subtractAmount;\\n\\n        // lpTokens[pid].safeTransfer(to, amount);\\n        pool.lpSupply = pool.lpSupply - subtractAmount;\\n        poolInfo[asset] = pool;\\n\\n        emit VirtualWithdraw(to, asset, subtractAmount);\\n    }\\n\\n    function decreaseAmountRewardPenalty(address asset, address to, uint256 amountEDecimal) public view override returns (uint256) {\\n        UserInfo memory user = userInfo[asset][to];\\n\\n        if (user.multiplicator1e18 == 0) {\\n            return 0;\\n        }\\n\\n        uint256 subtractAmount = amountEDecimal * user.multiplicator1e18 / 1e18;\\n\\n        uint256 pending = pendingSushi(asset, to);\\n        return pending * subtractAmount / user.amount;\\n    }\\n\\n    /// @notice Harvest proceeds for transaction sender to `to`.\\n    /// @param asset Asset address\\n    /// @param to Receiver of REWARD_TOKEN rewards.\\n    function harvest(address asset, address to, uint256 newLockupPeriodSeconds) public override {\\n        PoolInfo memory pool = updatePool(asset);\\n        UserInfo storage user = userInfo[asset][msg.sender];\\n\\n        require(user.lockupStartTimestamp + user.lockupPeriodSeconds <= block.timestamp, \\\"Can't harvest before lockup is over\\\");\\n        require(user.multiplicator1e18 != 0, \\\"User multiplicator equils zero\\\");\\n\\n        int256 accumulatedSushi = (user.amount * pool.accSushiPerShare / ACC_REWARD_TOKEN_PRECISION).toInt256();\\n        uint256 _pendingSushi = (accumulatedSushi - user.rewardDebt).toUint256();\\n\\n        // Effects\\n        user.rewardDebt = accumulatedSushi;\\n        // accumulatedSushi = user.rewardDebt + _pendingSushi;\\n\\n        // Interactions\\n        if (_pendingSushi > 0) {\\n            REWARD_TOKEN.safeTransfer(to, _pendingSushi);\\n        }\\n\\n        // Reset lockupPeriod\\n        user.lockupStartTimestamp = block.timestamp;\\n        // it's possible to remove code duplicates by using signed amount, but for simplicity I'll leave as it is\\n        uint256 newMultiplicator1e18 = multiplicator1e18ForLockupPeriod[newLockupPeriodSeconds];\\n        require(newMultiplicator1e18 != 0, \\\"New multiplicator equils zero\\\");\\n        if (user.multiplicator1e18 < newMultiplicator1e18) {\\n            // since multiplicator increases, we need to increase amount\\n            uint256 additionalAmount = user.amount * newMultiplicator1e18 / user.multiplicator1e18 - user.amount;\\n\\n            user.amount = user.amount + additionalAmount;\\n            user.rewardDebt = user.rewardDebt + (additionalAmount * pool.accSushiPerShare / ACC_REWARD_TOKEN_PRECISION).toInt256();\\n        } else if (user.multiplicator1e18 > newMultiplicator1e18) {\\n            uint256 subtractAmount = user.amount - user.amount * newMultiplicator1e18 / user.multiplicator1e18;\\n\\n            user.rewardDebt = user.rewardDebt - (subtractAmount * pool.accSushiPerShare / ACC_REWARD_TOKEN_PRECISION).toInt256();\\n            user.amount = user.amount - subtractAmount;\\n        }\\n        user.multiplicator1e18 = newMultiplicator1e18;\\n\\n        emit Harvest(msg.sender, asset, _pendingSushi);\\n    }\\n\\n    // TODO: check for exploits\\n    /// @notice Withdraw without caring about rewards. EMERGENCY ONLY.\\n    /// @param asset Asset address\\n    /// @param to The address of the user whose information will be cleared\\n    function resetAmount(address asset, address to) public override {\\n        PoolInfo storage pool = poolInfo[asset];\\n        UserInfo storage user = userInfo[asset][msg.sender];\\n\\n        uint256 userAmount = user.amount;\\n        uint256 userLockupPeriodSeconds = user.lockupPeriodSeconds;\\n        pool.lpSupply = pool.lpSupply - userAmount;\\n        poolInfo[asset] = pool;\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n        user.lockupPeriodSeconds = 0;\\n        emit ResetAmount(msg.sender, asset, to, userAmount, userLockupPeriodSeconds);\\n    }\\n\\n    //================================VIEW METHODS======================================\\n\\n    function getPoolApr(address asset) public view returns (uint256) {\\n        require(poolInfo[asset].lastRewardBlock != 0, \\\"RewardChef: Pool doesn't exist\\\");\\n        require(totalAllocPoint != 0, 'RewardChef: Total allocation point is 0');\\n\\n        uint256 rewardPerBlockForPool = rewardPerBlock * poolInfo[asset].allocPoint / totalAllocPoint;\\n        uint256 rewardTokenPrice = ORACLE.getUsdPrice1e18(address(REWARD_TOKEN));\\n        uint256 usdRewardYearForPool = rewardPerBlockForPool * 4 * 60 * 24 * 366 * rewardTokenPrice;\\n        uint256 usdValuePool = poolInfo[asset].lpSupply * ORACLE.getUsdPrice1e18(asset);\\n        return usdRewardYearForPool * 1e18 / usdValuePool;\\n    }\\n}\\n\",\"keccak256\":\"0xe7fc344fd21ad271388df07362bf02878a3378480d25fef932b6b2bdbba8e1bf\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101ae5760003560e01c806387d48316116100ee578063b9ec7d7411610097578063d539139311610071578063d5391393146104c5578063dc97e84e146104ec578063eeba3c3f14610513578063f7bfea2c1461052657600080fd5b8063b9ec7d7414610497578063c2ceb95f1461049f578063cf4f68d5146104b257600080fd5b806399248ea7116100c857806399248ea7146103d65780639a7b5f11146103fd578063a7533e091461048457600080fd5b806387d48316146103a757806387ee8c4c146103ba5780638ae39cac146103cd57600080fd5b80632fcd4bc01161015b578063604ef2e511610135578063604ef2e51461031857806369827402146103215780636aed34f7146103365780637b46c54f1461034957600080fd5b80632fcd4bc0146102cb57806338013f02146102de5780633825d8281461030557600080fd5b806317caf6f11161018c57806317caf6f11461029a5780631d40e439146102a35780632b8bbbe8146102b657600080fd5b806303ee9f22146101b35780630f208beb146101f757806314c376dc14610265575b600080fd5b6101da7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61023d6102053660046128fa565b600360208181526000938452604080852090915291835291208054600182015460028301549383015460049093015491939092909185565b604080519586526020860194909452928401919091526060830152608082015260a0016101ee565b61028c7fe965846df3dd5b1dfa65f58e31477079e90140e0908b6dd31b5aead5a57cf36581565b6040519081526020016101ee565b61028c60045481565b61028c6102b13660046128fa565b610539565b6102c96102c4366004612a09565b6106de565b005b6102c96102d9366004612a2b565b610959565b6101da7f000000000000000000000000000000000000000000000000000000000000000081565b6102c96103133660046129a8565b610a74565b61028c60065481565b610329610cc5565b6040516101ee9190612aa3565b6102c961034436600461292c565b610e10565b61035c6103573660046128e0565b6110f3565b6040805182516001600160801b0316815260208084015167ffffffffffffffff90811691830191909152838301511691810191909152606091820151918101919091526080016101ee565b61028c6103b536600461292c565b6112fb565b6102c96103c8366004612a4c565b6113c2565b61028c60055481565b6101da7f000000000000000000000000000000000000000000000000000000000000000081565b61044c61040b3660046128e0565b600060208190529081526040902080546001909101546001600160801b0382169167ffffffffffffffff600160801b8204811692600160c01b909204169084565b604080516001600160801b0395909516855267ffffffffffffffff9384166020860152919092169083015260608201526080016101ee565b61028c6104923660046128e0565b6115df565b6102c96118fa565b6102c96104ad36600461292c565b611959565b6102c96104c03660046128fa565b611c9e565b61028c7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b61028c7f9a9aef7c1247d5fc769b0185c052913e39673da29a880317dfd20ebf86f26a4981565b61028c610521366004612a2b565b611ddd565b6102c9610534366004612967565b611e2f565b6001600160a01b0380831660008181526020818152604080832081516080808201845282546001600160801b03808216845267ffffffffffffffff600160801b83048116858901908152600160c01b90930481168588015260019586015460608087018290528b8b526003808b52898c209d8f168c529c8a52888b20895160a081018b528154815298810154898c01526002810154998901999099529b8801549b87019b909b52600490960154928501929092528251978752948690529351949690959194919093169291164311801561061257508015155b801561061f575060045415155b1561069457600061063e856020015167ffffffffffffffff1643611ddd565b90506000600454866040015167ffffffffffffffff168361065f9190612bc7565b6106699190612ba7565b90508261067b64e8d4a5100083612bc7565b6106859190612ba7565b61068f9085612b8f565b935050505b6106d383602001516106c464e8d4a510008587600001516106b59190612bc7565b6106bf9190612ba7565b612171565b6106ce9190612be6565b6121f4565b979650505050505050565b604051632474521560e21b8152600060048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d148549060440160206040518083038186803b15801561074457600080fd5b505afa158015610758573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077c91906129d1565b6107cd5760405162461bcd60e51b815260206004820152601d60248201527f5375417574683a206f6e6c794f776e657220415554485f4641494c454400000060448201526064015b60405180910390fd5b6001600160a01b038116600090815260208190526040902054600160801b900467ffffffffffffffff16156108445760405162461bcd60e51b815260206004820152601260248201527f506f6f6c20616c7265616479206578697374000000000000000000000000000060448201526064016107c4565b6004544390610854908490612b8f565b600455610862600183612246565b50604051806080016040528060006001600160801b031681526020016108878361225b565b67ffffffffffffffff16815260200161089f8561225b565b67ffffffffffffffff9081168252600060209283018190526001600160a01b0386168082528184526040918290208551815487870151888601518716600160c01b026001600160c01b0391909716600160801b026001600160c01b03199092166001600160801b03909316929092171716939093178355606090940151600190920191909155518581527f595f39ef10c3b539b41f83620205bd2e76334edf0cfda5ed207f10616e867dad910160405180910390a2505050565b604051632474521560e21b8152600060048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d148549060440160206040518083038186803b1580156109bf57600080fd5b505afa1580156109d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f791906129d1565b610a435760405162461bcd60e51b815260206004820152601d60248201527f5375417574683a206f6e6c794f776e657220415554485f4641494c454400000060448201526064016107c4565b600082815260076020526040902081905580610a6957610a646008836122db565b505050565b610a646008836122e7565b604051632474521560e21b8152600060048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d148549060440160206040518083038186803b158015610ada57600080fd5b505afa158015610aee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1291906129d1565b610b5e5760405162461bcd60e51b815260206004820152601d60248201527f5375417574683a206f6e6c794f776e657220415554485f4641494c454400000060448201526064016107c4565b6001600160a01b038216600090815260208190526040902054600160801b900467ffffffffffffffff16610bd45760405162461bcd60e51b815260206004820152601260248201527f506f6f6c20646f65736e2774206578697374000000000000000000000000000060448201526064016107c4565b610bdd826110f3565b506001600160a01b0382166000908152602081905260409020546004548291610c1891600160c01b90910467ffffffffffffffff1690612c25565b610c229190612b8f565b600455610c2e8161225b565b6001600160a01b0383166000908152602081905260409020805467ffffffffffffffff92909216600160c01b026001600160c01b0390921691909117905580610c7e57610c7c6001836122f3565b505b816001600160a01b03167f57096e403eca2ab85e7ad27527b2efe1598aaf6760715227633947f3652a0f6b82604051610cb991815260200190565b60405180910390a25050565b60606000610cd36008612308565b805190915060008167ffffffffffffffff811115610d0157634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610d4657816020015b6040805180820190915260008082526020820152815260200190600190039081610d1f5790505b50905060005b82811015610e08576040518060400160405280858381518110610d7f57634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200160076000878581518110610db057634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002054815250828281518110610dea57634e487b7160e01b600052603260045260246000fd5b60200260200101819052508080610e0090612c68565b915050610d4c565b509392505050565b604051632474521560e21b8152600060048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d148549060440160206040518083038186803b158015610e7657600080fd5b505afa158015610e8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eae91906129d1565b610efa5760405162461bcd60e51b815260206004820152601d60248201527f5375417574683a206f6e6c794f776e657220415554485f4641494c454400000060448201526064016107c4565b6000610f05846110f3565b6001600160a01b038086166000908152600360209081526040808320938816835292905220600281015491925090610f7f5760405162461bcd60e51b815260206004820152601e60248201527f55736572206d756c7469706c696361746f7220657175696c73207a65726f000060448201526064016107c4565b600081600301548260040154610f959190612b8f565b421015610faa57610fa78686866112fb565b90505b6000670de0b6b3a7640000836002015486610fc59190612bc7565b610fcf9190612ba7565b9050610fda82612171565b8451610ffa9064e8d4a51000906106b5906001600160801b031685612bc7565b84600101546110099190612be6565b6110139190612b25565b60018401558254611025908290612c25565b83556060840151611037908290612c25565b606085019081526001600160a01b038881166000818152602081815260409182902089518154838c0151858d01516001600160801b039093166001600160c01b031990921691909117600160801b67ffffffffffffffff92831602176001600160c01b0316600160c01b91909216021781559451600190950194909455518481529092918916917f5c89d0cd1567084571f8083b115429597fe4af296968d67b6b7ebc9d12777e8791015b60405180910390a350505050505050565b604080516080810182526000808252602082018190529181018290526060810191909152506001600160a01b03811660009081526020818152604091829020825160808101845281546001600160801b038116825267ffffffffffffffff600160801b82048116948301859052600160c01b90910416938101939093526001015460608301524311156112f657606081015180158015906111a257506000826040015167ffffffffffffffff16115b1561122a5760006111c1836020015167ffffffffffffffff1643611ddd565b90506000600454846040015167ffffffffffffffff16836111e29190612bc7565b6111ec9190612ba7565b90506112108361120164e8d4a5100084612bc7565b61120b9190612ba7565b612315565b845161121c9190612b64565b6001600160801b0316845250505b6112334361225b565b67ffffffffffffffff90811660208481019182526001600160a01b0386166000818152808352604090819020875181549551838a01518816600160c01b026001600160c01b0391909816600160801b81026001600160c01b03199098166001600160801b03909316928317979097171696909617815560608089015160019092019190915581519485529284018690528301939093527f46cf4926e42ba22492fd67b3ea0fba545c48ca18651eb6cd271e653d3308c567910160405180910390a2505b919050565b6001600160a01b0380841660009081526003602081815260408084209487168452938152838320845160a081018652815481526001820154928101929092526002810154948201859052918201546060820152600490910154608082015290916113695760009150506113bb565b6000670de0b6b3a76400008260400151856113849190612bc7565b61138e9190612ba7565b9050600061139c8787610539565b83519091506113ab8383612bc7565b6113b59190612ba7565b93505050505b9392505050565b604051632474521560e21b8152600060048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d148549060440160206040518083038186803b15801561142857600080fd5b505afa15801561143c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146091906129d1565b6114ac5760405162461bcd60e51b815260206004820152601d60248201527f5375417574683a206f6e6c794f776e657220415554485f4641494c454400000060448201526064016107c4565b438167ffffffffffffffff161161152b5760405162461bcd60e51b815260206004820152602d60248201527f456e64426c6f636b2073686f756c642062652067726561746572207468616e2060448201527f63757272656e7420626c6f636b0000000000000000000000000000000000000060648201526084016107c4565b6115336118fa565b6115686001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333085612394565b600654600090156115a35760065443101561159f574360065461158b9190612c25565b6005546115989190612bc7565b90506115a3565b5060005b6115b74367ffffffffffffffff8416612c25565b6115c18483612b8f565b6115cb9190612ba7565b6005555067ffffffffffffffff1660065550565b6001600160a01b038116600090815260208190526040812054600160801b900467ffffffffffffffff166116555760405162461bcd60e51b815260206004820152601e60248201527f526577617264436865663a20506f6f6c20646f65736e2774206578697374000060448201526064016107c4565b6004546116ca5760405162461bcd60e51b815260206004820152602760248201527f526577617264436865663a20546f74616c20616c6c6f636174696f6e20706f6960448201527f6e7420697320300000000000000000000000000000000000000000000000000060648201526084016107c4565b6004546001600160a01b03831660009081526020819052604081205460055491929161170791600160c01b900467ffffffffffffffff1690612bc7565b6117119190612ba7565b6040516306addfb360e31b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301529192506000917f0000000000000000000000000000000000000000000000000000000000000000169063356efd989060240160206040518083038186803b15801561179857600080fd5b505afa1580156117ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117d091906129f1565b90506000816117e0846004612bc7565b6117eb90603c612bc7565b6117f6906018612bc7565b6118029061016e612bc7565b61180c9190612bc7565b6040516306addfb360e31b81526001600160a01b0387811660048301529192506000917f0000000000000000000000000000000000000000000000000000000000000000169063356efd989060240160206040518083038186803b15801561187357600080fd5b505afa158015611887573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ab91906129f1565b6001600160a01b0387166000908152602081905260409020600101546118d19190612bc7565b9050806118e683670de0b6b3a7640000612bc7565b6118f09190612ba7565b9695505050505050565b60006119066001612308565b805190915060005b81811015610a645761194683828151811061193957634e487b7160e01b600052603260045260246000fd5b60200260200101516110f3565b508061195181612c68565b91505061190e565b6000611964846110f3565b6001600160a01b0385166000908152600360208181526040808420338552909152909120908101546004820154929350909142916119a191612b8f565b1115611a155760405162461bcd60e51b815260206004820152602360248201527f43616e27742068617276657374206265666f7265206c6f636b7570206973206f60448201527f766572000000000000000000000000000000000000000000000000000000000060648201526084016107c4565b6002810154611a665760405162461bcd60e51b815260206004820152601e60248201527f55736572206d756c7469706c696361746f7220657175696c73207a65726f000060448201526064016107c4565b6000611a8e64e8d4a5100084600001516001600160801b031684600001546106b59190612bc7565b90506000611aa58360010154836106ce9190612be6565b6001840183905590508015611ae857611ae86001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016878361244b565b42600484015560008581526007602052604090205480611b4a5760405162461bcd60e51b815260206004820152601d60248201527f4e6577206d756c7469706c696361746f7220657175696c73207a65726f00000060448201526064016107c4565b8084600201541015611bcb578354600285015460009190611b6b8483612bc7565b611b759190612ba7565b611b7f9190612c25565b8554909150611b8f908290612b8f565b85558551611bb19064e8d4a51000906106b5906001600160801b031684612bc7565b8560010154611bc09190612b25565b600186015550611c4d565b8084600201541115611c4d5760008460020154828660000154611bee9190612bc7565b611bf89190612ba7565b8554611c049190612c25565b9050611c2864e8d4a5100087600001516001600160801b0316836106b59190612bc7565b8560010154611c379190612be6565b60018601558454611c49908290612c25565b8555505b600284018190556040518281526001600160a01b0389169033907fa0306f61d3fafe13787b78e276cb6b644382854a66cb46daae14227d3ec267979060200160405180910390a35050505050505050565b6001600160a01b038216600090815260208181526040808320600380845282852033865290935292208054918101546001840154919291611ce0908390612c25565b60018581019182556001600160a01b038881166000818152602081815260408083208b5481546001600160801b039091167fffffffffffffffffffffffffffffffff000000000000000000000000000000008216811783558d546001600160c01b031990921617600160801b9182900467ffffffffffffffff908116909202178083558d546001600160c01b03909116600160c01b91829004909216021781559654968601969096558189559388018190556003880155835186815292830185905290881692909133917f0b29f3a03cca6d26633adab7fad4d1d3383ee338e01e04ebcf40d0beff8838fe910160405180910390a4505050505050565b60008260065411611df057506000611e29565b600654821015611e1857600554611e078484612c25565b611e119190612bc7565b9050611e29565b60055483600654611e079190612c25565b92915050565b604051632474521560e21b8152600060048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d148549060440160206040518083038186803b158015611e9557600080fd5b505afa158015611ea9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ecd91906129d1565b611f195760405162461bcd60e51b815260206004820152601d60248201527f5375417574683a206f6e6c794f776e657220415554485f4641494c454400000060448201526064016107c4565b6000611f24856110f3565b6001600160a01b038087166000908152600360208181526040808420948a1684529390529190209081015491925090611f7d57600083815260076020526040902054600282015560038101839055426004820155611ff6565b82816003015414611ff65760405162461bcd60e51b815260206004820152602560248201527f4578697374696e67206465706f7369742068617320646966666572656e74206c60448201527f6f636b757000000000000000000000000000000000000000000000000000000060648201526084016107c4565b60028101546120475760405162461bcd60e51b815260206004820152601e60248201527f55736572206d756c7469706c696361746f7220657175696c73207a65726f000060448201526064016107c4565b6000670de0b6b3a76400008260020154866120629190612bc7565b61206c9190612ba7565b825490915061207c908290612b8f565b8255825161209e9064e8d4a51000906106b5906001600160801b031684612bc7565b82600101546120ad9190612b25565b600183015560608301516120c2908290612b8f565b606084019081526001600160a01b038881166000818152602081815260409182902088518154838b0151858c01516001600160801b039093166001600160c01b031990921691909117600160801b67ffffffffffffffff92831602176001600160c01b0316600160c01b91909216021781559451600190950194909455518481529092918916917fbe0e56c891bb7033dc9f0c815fb5e1fd09ee48ffbc1c32b504a52911a542467091016110e2565b60006001600160ff1b038211156121f05760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e206160448201527f6e20696e7432353600000000000000000000000000000000000000000000000060648201526084016107c4565b5090565b6000808212156121f05760405162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f73697469766560448201526064016107c4565b60006113bb836001600160a01b038416612494565b600067ffffffffffffffff8211156121f05760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201527f342062697473000000000000000000000000000000000000000000000000000060648201526084016107c4565b60006113bb83836124e3565b60006113bb8383612494565b60006113bb836001600160a01b0384166124e3565b606060006113bb83612600565b60006001600160801b038211156121f05760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203160448201527f323820626974730000000000000000000000000000000000000000000000000060648201526084016107c4565b6040516001600160a01b03808516602483015283166044820152606481018290526124459085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915261265c565b50505050565b6040516001600160a01b038316602482015260448101829052610a649084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064016123e1565b60008181526001830160205260408120546124db57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155611e29565b506000611e29565b600081815260018301602052604081205480156125f6576000612507600183612c25565b855490915060009061251b90600190612c25565b905081811461259c57600086600001828154811061254957634e487b7160e01b600052603260045260246000fd5b906000526020600020015490508087600001848154811061257a57634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b85548690806125bb57634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050611e29565b6000915050611e29565b60608160000180548060200260200160405190810160405280929190818152602001828054801561265057602002820191906000526020600020905b81548152602001906001019080831161263c575b50505050509050919050565b60006126b1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166127419092919063ffffffff16565b805190915015610a6457808060200190518101906126cf91906129d1565b610a645760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016107c4565b60606127508484600085612758565b949350505050565b6060824710156127d05760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016107c4565b6001600160a01b0385163b6128275760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016107c4565b600080866001600160a01b031685876040516128439190612a87565b60006040518083038185875af1925050503d8060008114612880576040519150601f19603f3d011682016040523d82523d6000602084013e612885565b606091505b50915091506106d38282866060831561289f5750816113bb565b8251156128af5782518084602001fd5b8160405162461bcd60e51b81526004016107c49190612af2565b80356001600160a01b03811681146112f657600080fd5b6000602082840312156128f1578081fd5b6113bb826128c9565b6000806040838503121561290c578081fd5b612915836128c9565b9150612923602084016128c9565b90509250929050565b600080600060608486031215612940578081fd5b612949846128c9565b9250612957602085016128c9565b9150604084013590509250925092565b6000806000806080858703121561297c578081fd5b612985856128c9565b9350612993602086016128c9565b93969395505050506040820135916060013590565b600080604083850312156129ba578182fd5b6129c3836128c9565b946020939093013593505050565b6000602082840312156129e2578081fd5b815180151581146113bb578182fd5b600060208284031215612a02578081fd5b5051919050565b60008060408385031215612a1b578182fd5b82359150612923602084016128c9565b60008060408385031215612a3d578182fd5b50508035926020909101359150565b60008060408385031215612a5e578182fd5b82359150602083013567ffffffffffffffff81168114612a7c578182fd5b809150509250929050565b60008251612a99818460208701612c3c565b9190910192915050565b602080825282518282018190526000919060409081850190868401855b82811015612ae557815180518552860151868501529284019290850190600101612ac0565b5091979650505050505050565b6020815260008251806020840152612b11816040850160208701612c3c565b601f01601f19169190910160400192915050565b6000808212826001600160ff1b0303841381151615612b4657612b46612c83565b82600160ff1b038412811615612b5e57612b5e612c83565b50500190565b60006001600160801b03808316818516808303821115612b8657612b86612c83565b01949350505050565b60008219821115612ba257612ba2612c83565b500190565b600082612bc257634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615612be157612be1612c83565b500290565b600080831283600160ff1b01831281151615612c0457612c04612c83565b836001600160ff1b03018313811615612c1f57612c1f612c83565b50500390565b600082821015612c3757612c37612c83565b500390565b60005b83811015612c57578181015183820152602001612c3f565b838111156124455750506000910152565b6000600019821415612c7c57612c7c612c83565b5060010190565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220a095dce9c38152b9337d53e302df3ac23c346eca840357395cabfcb5d669302764736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "add(uint256,address)": {
        "params": {
          "_asset": "Address of the ERC-20 token.",
          "allocPoint": "AP of the new pool."
        }
      },
      "constructor": {
        "params": {
          "_rewardToken": "The REWARD_TOKEN token contract address."
        }
      },
      "harvest(address,address,uint256)": {
        "params": {
          "asset": "Asset address",
          "to": "Receiver of REWARD_TOKEN rewards."
        }
      },
      "pendingSushi(address,address)": {
        "params": {
          "_asset": "Address of the ERC-20 token.",
          "_user": "Address of user."
        },
        "returns": {
          "pending": "REWARD_TOKEN reward for a given user."
        }
      },
      "resetAmount(address,address)": {
        "params": {
          "asset": "Asset address",
          "to": "The address of the user whose information will be cleared"
        }
      },
      "rewardsBetweenBlocks(uint256,uint256)": {
        "details": "returns total amount of rewards allocated to the all pools on the rage (startBlock, endBlock]      i.e. excluding startBlock but including endBlock"
      },
      "set(address,uint256)": {
        "params": {
          "_allocPoint": "New AP of the pool.",
          "_asset": "Address of the ERC-20 token."
        }
      },
      "updatePool(address)": {
        "params": {
          "asset": "Asset address"
        },
        "returns": {
          "pool": "Returns the pool that was updated."
        }
      }
    },
    "stateVariables": {
      "totalAllocPoint": {
        "details": "Total allocation points. Must be the sum of all allocation points in all pools. The good practice, to always keep this variable is equal 1000."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "REWARD_TOKEN()": {
        "notice": "Address of REWARD_TOKEN contract."
      },
      "add(uint256,address)": {
        "notice": "Add a new reward pool. Can only be called by the owner. DO NOT add the same LP token more than once."
      },
      "decreaseAmount(address,address,uint256)": {
        "notice": "Analogues to MVC2 Withdraw method, that can be called only by trusted address that is trusted to honestly calc how many \"virtual\" tokens have to be allocated for each user."
      },
      "harvest(address,address,uint256)": {
        "notice": "Harvest proceeds for transaction sender to `to`."
      },
      "increaseAmount(address,address,uint256,uint256)": {
        "notice": "analogues to MCV2 Deposit method, but can be called only by trusted address"
      },
      "pendingSushi(address,address)": {
        "notice": "View function to see pending REWARD_TOKEN on frontend."
      },
      "poolInfo(address)": {
        "notice": "Info of each MCV2 pool. PoolInfo memory pool = poolInfo[_pid]"
      },
      "resetAmount(address,address)": {
        "notice": "Withdraw without caring about rewards. EMERGENCY ONLY."
      },
      "set(address,uint256)": {
        "notice": "Update the given pool's REWARD_TOKEN allocation point. Can only be called by the owner."
      },
      "updateAllPools()": {
        "notice": "Update reward variables for all pools. Be careful of gas spending!"
      },
      "updatePool(address)": {
        "notice": "Update reward variables of the given pool."
      },
      "userInfo(address,address)": {
        "notice": "Info of each user that stakes tokens. userInfo[_asset][_user]"
      }
    },
    "notice": "This contract is based on MVC2, but uses \"virtual\" balances instead of storing real ERC20 tokens and uses address of this assets instead of pid. Rewards that are distributed have to be deposited using refillReward(uint256 amount, uint64 endBlock)",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11085,
        "contract": "contracts/reward/RewardChefV2.sol:RewardChefV2",
        "label": "poolInfo",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_struct(PoolInfo)4537_storage)"
      },
      {
        "astId": 11089,
        "contract": "contracts/reward/RewardChefV2.sol:RewardChefV2",
        "label": "assetSet",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(AddressSet)2800_storage"
      },
      {
        "astId": 11097,
        "contract": "contracts/reward/RewardChefV2.sol:RewardChefV2",
        "label": "userInfo",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(UserInfo)4548_storage))"
      },
      {
        "astId": 11101,
        "contract": "contracts/reward/RewardChefV2.sol:RewardChefV2",
        "label": "totalAllocPoint",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 11114,
        "contract": "contracts/reward/RewardChefV2.sol:RewardChefV2",
        "label": "rewardPerBlock",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 11117,
        "contract": "contracts/reward/RewardChefV2.sol:RewardChefV2",
        "label": "rewardEndBlock",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 11246,
        "contract": "contracts/reward/RewardChefV2.sol:RewardChefV2",
        "label": "multiplicator1e18ForLockupPeriod",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 11249,
        "contract": "contracts/reward/RewardChefV2.sol:RewardChefV2",
        "label": "possibleLockupPeriodsSeconds",
        "offset": 0,
        "slot": "8",
        "type": "t_struct(UintSet)2957_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(UserInfo)4548_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct IRewardChefV2.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)4548_storage)"
      },
      "t_mapping(t_address,t_struct(PoolInfo)4537_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IRewardChefV2.PoolInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolInfo)4537_storage"
      },
      "t_mapping(t_address,t_struct(UserInfo)4548_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IRewardChefV2.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)4548_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)2800_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 2799,
            "contract": "contracts/reward/RewardChefV2.sol:RewardChefV2",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2499_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(PoolInfo)4537_storage": {
        "encoding": "inplace",
        "label": "struct IRewardChefV2.PoolInfo",
        "members": [
          {
            "astId": 4530,
            "contract": "contracts/reward/RewardChefV2.sol:RewardChefV2",
            "label": "accSushiPerShare",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 4532,
            "contract": "contracts/reward/RewardChefV2.sol:RewardChefV2",
            "label": "lastRewardBlock",
            "offset": 16,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 4534,
            "contract": "contracts/reward/RewardChefV2.sol:RewardChefV2",
            "label": "allocPoint",
            "offset": 24,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 4536,
            "contract": "contracts/reward/RewardChefV2.sol:RewardChefV2",
            "label": "lpSupply",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2499_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2494,
            "contract": "contracts/reward/RewardChefV2.sol:RewardChefV2",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2498,
            "contract": "contracts/reward/RewardChefV2.sol:RewardChefV2",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)2957_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 2956,
            "contract": "contracts/reward/RewardChefV2.sol:RewardChefV2",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2499_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UserInfo)4548_storage": {
        "encoding": "inplace",
        "label": "struct IRewardChefV2.UserInfo",
        "members": [
          {
            "astId": 4539,
            "contract": "contracts/reward/RewardChefV2.sol:RewardChefV2",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4541,
            "contract": "contracts/reward/RewardChefV2.sol:RewardChefV2",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          },
          {
            "astId": 4543,
            "contract": "contracts/reward/RewardChefV2.sol:RewardChefV2",
            "label": "multiplicator1e18",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4545,
            "contract": "contracts/reward/RewardChefV2.sol:RewardChefV2",
            "label": "lockupPeriodSeconds",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4547,
            "contract": "contracts/reward/RewardChefV2.sol:RewardChefV2",
            "label": "lockupStartTimestamp",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}