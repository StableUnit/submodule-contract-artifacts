{
  "address": "0xE7240F96dCbfE0f48C1171398DAaD06fc7305E86",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_authControl",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "CollateralAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "CollateralRemoved",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACCESS_CONTROL_SINGLETON",
      "outputs": [
        {
          "internalType": "contract ISuAccessControl",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIQUIDATION_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VAULT_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "addCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "collateralId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "collateralList",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collaterals",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "isCollateral",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "removeCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2f6615eaeed260b0ab7f303c9c3dd5d93e760a216d9d9505b0b53c1e973498e7",
  "receipt": {
    "to": null,
    "from": "0xE2661235b116781a7b30D4a675898cF9E61298Df",
    "contractAddress": "0xE7240F96dCbfE0f48C1171398DAaD06fc7305E86",
    "transactionIndex": 8,
    "gasUsed": "589195",
    "logsBloom": "0x
    "blockHash": "0x25ac75687fbcb029797c951259b7285d8837bfc5c416912fd1f57291e8c55daa",
    "transactionHash": "0x2f6615eaeed260b0ab7f303c9c3dd5d93e760a216d9d9505b0b53c1e973498e7",
    "logs": [],
    "blockNumber": 10988755,
    "cumulativeGasUsed": "21069038",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7e0D073062FC3D88bCD7d781679F829b12Ba6f95",
    []
  ],
  "numDeployments": 1,
  "solcInputHash": "1acf5fc7213acb073e526533d9983610",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_authControl\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"CollateralAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"CollateralRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACCESS_CONTROL_SINGLETON\",\"outputs\":[{\"internalType\":\"contract ISuAccessControl\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDATION_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VAULT_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"addCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"collateralId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"collateralList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collaterals\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"isCollateral\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"removeCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lending/SuCollateralRegistry.sol\":\"SuCollateralRegistry\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4a1a0ba12bf1a33f10d9fe226278cf59675c0b929d29e4da99658a079b27fb84\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/access-control/SuAccessControlSingleton.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"./SuAuthenticated.sol\\\";\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title SuAccessControl\\n * @dev Access control for contracts. SuVaultParameters can be inherited from it.\\n */\\n// TODO: refactor by https://en.wikipedia.org/wiki/Principle_of_least_privilege\\ncontract SuAccessControlSingleton is AccessControl, SuAuthenticated {\\n    /**\\n     * @dev Initialize the contract with initial owner to be deployer\\n     */\\n    constructor() SuAuthenticated(address(this)) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    /**\\n    * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n    * Can only be called by the current owner.\\n    */\\n    function transferOwnership(address newOwner) external {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Ownable: caller is not the owner\\\");\\n\\n        if (hasRole(MINTER_ROLE, msg.sender)) {\\n            grantRole(MINTER_ROLE, newOwner);\\n            revokeRole(MINTER_ROLE, msg.sender);\\n        }\\n\\n        if (hasRole(VAULT_ACCESS_ROLE, msg.sender)) {\\n            grantRole(VAULT_ACCESS_ROLE, newOwner);\\n            revokeRole(VAULT_ACCESS_ROLE, msg.sender);\\n        }\\n\\n        grantRole(DEFAULT_ADMIN_ROLE, newOwner);\\n        revokeRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0xecbacd6aa378b65c97e1006790e9ec0c5af8808490f5f921c4c7dadac05b271b\",\"license\":\"BSL 1.1\"},\"contracts/access-control/SuAuthenticated.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\npragma solidity >=0.7.6;\\n\\nimport \\\"../interfaces/ISuAccessControl.sol\\\";\\n\\n/**\\n * @title SuAuthenticated\\n * @dev other contracts should inherit to be authenticated\\n */\\nabstract contract SuAuthenticated {\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant VAULT_ACCESS_ROLE = keccak256(\\\"VAULT_ACCESS_ROLE\\\");\\n    bytes32 public constant LIQUIDATION_ACCESS_ROLE = keccak256(\\\"LIQUIDATION_ACCESS_ROLE\\\");\\n    bytes32 private constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /// @dev the address of SuAccessControlSingleton - it should be one for all contract that inherits SuAuthenticated\\n    ISuAccessControl public immutable ACCESS_CONTROL_SINGLETON;\\n\\n    /// @dev should be passed in constructor\\n    constructor(address _accessControlSingleton) {\\n        ACCESS_CONTROL_SINGLETON = ISuAccessControl(_accessControlSingleton);\\n        // TODO: check that _accessControlSingleton points to ISuAccessControl instance\\n        // require(ISuAccessControl(_accessControlSingleton).supportsInterface(ISuAccessControl.hasRole.selector), \\\"bad dependency\\\");\\n    }\\n\\n    /// @dev check DEFAULT_ADMIN_ROLE\\n    modifier onlyOwner() {\\n        require(ACCESS_CONTROL_SINGLETON.hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"SuAuth: onlyOwner AUTH_FAILED\\\");\\n        _;\\n    }\\n\\n    /// @dev check VAULT_ACCESS_ROLE\\n    modifier onlyVaultAccess() {\\n        require(ACCESS_CONTROL_SINGLETON.hasRole(VAULT_ACCESS_ROLE, msg.sender), \\\"SuAuth: onlyVaultAccess AUTH_FAILED\\\");\\n        _;\\n    }\\n\\n    /// @dev check VAULT_ACCESS_ROLE\\n    modifier onlyLiquidationAccess() {\\n        require(ACCESS_CONTROL_SINGLETON.hasRole(LIQUIDATION_ACCESS_ROLE, msg.sender), \\\"SuAuth: onlyLiquidationAccess AUTH_FAILED\\\");\\n        _;\\n    }\\n\\n    /// @dev check MINTER_ROLE\\n    modifier onlyMinter() {\\n        require(ACCESS_CONTROL_SINGLETON.hasRole(MINTER_ROLE, msg.sender), \\\"SuAuth: onlyMinter AUTH_FAILED\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x0cf69e39724023d26c834d7a13f51b418604c19010949d146094f99e06ee8b9c\",\"license\":\"BSL 1.1\"},\"contracts/interfaces/ISuAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface ISuAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n    function grantRole(bytes32 role, address account) external;\\n    function revokeRole(bytes32 role, address account) external;\\n    function renounceRole(bytes32 role, address account) external;\\n\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    // TODO: remove legacy functionality\\n    function setVault(address _vault, bool _isVault) external;\\n    function setCdpManager(address _cdpManager, bool _isCdpManager) external;\\n    function setDAO(address _dao, bool _isDAO) external;\\n    function setManagerParameters(address _address, bool _permit) external;\\n    function transferOwnership(address newOwner) external;\\n}\\n\",\"keccak256\":\"0xd386f4bad5ae0d77788abea08ceec10dc02b02559465d8a8f4e30b58dfac2d2a\",\"license\":\"MIT\"},\"contracts/lending/SuCollateralRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\r\\n\\r\\n/*\\r\\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\\r\\n*/\\r\\npragma solidity ^0.8.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n\\r\\nimport \\\"./SuVaultParameters.sol\\\";\\r\\nimport \\\"../access-control/SuAccessControlSingleton.sol\\\";\\r\\n\\r\\n// [deprecated]\\r\\n// contacts implements simple a enumeredSet of asset and used by CdpRegistry only\\r\\n// can be change to https://docs.openzeppelin.com/contracts/4.x/api/utils#EnumerableSet\\r\\ncontract SuCollateralRegistry is SuAuthenticated {\\r\\n\\r\\n    event CollateralAdded(address indexed asset);\\r\\n    event CollateralRemoved(address indexed asset);\\r\\n\\r\\n    // mapping of collateral to its index in collateralList\\r\\n    // it allowed to find collateral by address in the list without loop\\r\\n    mapping(address => uint) public collateralId;\\r\\n\\r\\n    address[] public collateralList;\\r\\n\\r\\n    // collateral registry is deployed after vaultParameters contract and it initializes list of collaterals\\r\\n    constructor(address _authControl, address[] memory assets) SuAuthenticated(_authControl) {\\r\\n        for (uint i = 0; i < assets.length; i++) {\\r\\n            require(!isCollateral(assets[i]), \\\"Unit Protocol: ALREADY_EXIST\\\");\\r\\n            collateralList.push(assets[i]);\\r\\n            collateralId[assets[i]] = i;\\r\\n            emit CollateralAdded(assets[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // after deployment more collaterals can be added by managers\\r\\n    function addCollateral(address asset) public onlyOwner {\\r\\n        require(asset != address(0), \\\"Unit Protocol: ZERO_ADDRESS\\\");\\r\\n\\r\\n        require(!isCollateral(asset), \\\"Unit Protocol: ALREADY_EXIST\\\");\\r\\n\\r\\n        collateralId[asset] = collateralList.length;\\r\\n        collateralList.push(asset);\\r\\n\\r\\n        emit CollateralAdded(asset);\\r\\n    }\\r\\n\\r\\n    // as well collaterals can be removed\\r\\n    function removeCollateral(address asset) public onlyOwner {\\r\\n        require(asset != address(0), \\\"Unit Protocol: ZERO_ADDRESS\\\");\\r\\n\\r\\n        require(isCollateral(asset), \\\"Unit Protocol: DOES_NOT_EXIST\\\");\\r\\n\\r\\n        uint id = collateralId[asset];\\r\\n\\r\\n        delete collateralId[asset];\\r\\n\\r\\n        uint lastId = collateralList.length - 1;\\r\\n\\r\\n        if (id != lastId) {\\r\\n            address lastCollateral = collateralList[lastId];\\r\\n            collateralList[id] = lastCollateral;\\r\\n            collateralId[lastCollateral] = id;\\r\\n        }\\r\\n\\r\\n        collateralList.pop();\\r\\n\\r\\n        emit CollateralRemoved(asset);\\r\\n    }\\r\\n\\r\\n    // check whether asset is collateral\\r\\n    function isCollateral(address asset) public view returns(bool) {\\r\\n        if (collateralList.length == 0) { return false; }\\r\\n        return collateralId[asset] != 0 || collateralList[0] == asset;\\r\\n    }\\r\\n\\r\\n    // return all collateral assets\\r\\n    function collaterals() external view returns (address[] memory) {\\r\\n        return collateralList;\\r\\n    }\\r\\n\\r\\n    // return total number of collateral assets\\r\\n    function collateralsCount() external view returns (uint) {\\r\\n        return collateralList.length;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe0f9f1bb2fde47dce8b6889eefefb4ad42f02e2b85de57a9b1bd9ee928f959db\",\"license\":\"BSL 1.1\"},\"contracts/lending/SuVaultParameters.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\r\\n\\r\\nimport \\\"../access-control/SuAccessControlSingleton.sol\\\";\\r\\nimport \\\"../access-control/SuAuthenticated.sol\\\";\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// VaultParameters is Singleton for Access Control\\r\\n// this looks like configuration contract\\r\\n// what are the rules to determine these configs for each new allowed collateral?\\r\\n/// yes, and for all collaterals\\r\\n// is DAO allowed to choose parameters for existing collaterals?\\r\\n///\\r\\n// are there any limits to be enforced? i.e. fee cannot be over 100% percent\\r\\n/// No, but it's a good idea to have it\\r\\nabstract contract SuVaultParameters is SuAuthenticated {\\r\\n    // stability fee can be different for each collateral\\r\\n    /// yes\\r\\n    mapping(address => uint) public protocolStabilityFeeE18;\\r\\n\\r\\n    // map token to USDP mint limit\\r\\n    /// yes, limit for each collateral-assert\\r\\n    mapping(address => uint) public tokenDebtLimitE18;\\r\\n\\r\\n    // what is foundation, DAO?\\r\\n    /// Beneficiaty as VotingEscrow.vy\\r\\n    address public foundation;\\r\\n\\r\\n    address public immutable vault;\\r\\n\\r\\n    // creator of contract is manager, can it be the same as DAO or can it be removed later?\\r\\n    /// YES\\r\\n    // how can vault address be known at this moment?\\r\\n    /// Precult based on CREATE spec\\r\\n    // can be created another function to set vault address once deployed?\\r\\n    /// Yes, possibly with some logic change\\r\\n    constructor(address _authControl, address payable _vault, address _foundation)\\r\\n        SuAuthenticated(_authControl)\\r\\n    {\\r\\n        require(_vault != address(0), \\\"Unit Protocol: ZERO_ADDRESS\\\");\\r\\n        require(_foundation != address(0), \\\"Unit Protocol: ZERO_ADDRESS\\\");\\r\\n\\r\\n        vault = _vault;\\r\\n\\r\\n//        ISuAccessControl(_authControl).setVault(_vault, true);\\r\\n//        ISuAccessControl(_authControl).setDAO(msg.sender, true);\\r\\n\\r\\n        foundation = _foundation;\\r\\n    }\\r\\n\\r\\n    // similar function can be added to setVault\\r\\n    function setFoundation(address newFoundation) external onlyOwner {\\r\\n        require(newFoundation != address(0), \\\"Unit Protocol: ZERO_ADDRESS\\\");\\r\\n        foundation = newFoundation;\\r\\n    }\\r\\n\\r\\n    // manager is allowed to add new collaterals and modify existing ones\\r\\n    // I think creating new collaterals and modifying existing ones should be separate functions\\r\\n    /// Yes, for sercurity reason, it's possible to add events for creating and edititing\\r\\n    // also different event should be emitted NewCollateral UpdatedCollateral accordingly\\r\\n    // those events can be handled on frontend to notify user about any changes in rules\\r\\n    /// Not sure it makes sense to split into create/edit functions\\r\\n    function setCollateral(\\r\\n        address asset,\\r\\n        uint stabilityFeeValueE18,\\r\\n        uint stablecoinLimitE18\\r\\n    ) external onlyOwner {\\r\\n        // stability fee should be validated in range, what is stability fee should be described here?\\r\\n        setStabilityFeeE18(asset, stabilityFeeValueE18);\\r\\n        // why debt limit for collateral is necessary? to manage risks in case of collateral failure?\\r\\n        setTokenDebtLimitE18(asset, stablecoinLimitE18);\\r\\n    }\\r\\n\\r\\n    // stability fee is measured as the number of coins per year or percentage?\\r\\n    // this should be clarified in argument name i.e. stabilityFeePercentageYearly\\r\\n    /// No, it's APR ( per year, see calculateFee) percentrage, fee percentage.\\r\\n    /// YES, self-documented code-style is the best practice.\\r\\n    function setStabilityFeeE18(address asset, uint newValue) public onlyOwner {\\r\\n        protocolStabilityFeeE18[asset] = newValue;\\r\\n    }\\r\\n\\r\\n\\r\\n    // debt limit can be changed for any collateral along with liquidation and stability fees\\r\\n    // seems like managers have too much power - that can be dangerous given multiple managers?\\r\\n    /// Yes, application of  principle of least priviledge needed\\r\\n    function setTokenDebtLimitE18(address asset, uint limit) public onlyOwner {\\r\\n        tokenDebtLimitE18[asset] = limit;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xafbd13c21b374b60d9afed68b298bcee5763164f72c91744d3b38e9d90a33dea\",\"license\":\"BSL 1.1\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162000d6a38038062000d6a8339810160408190526200003491620002a9565b6001600160601b0319606083901b1660805260005b815181101562000204576200008c8282815181106200007857634e487b7160e01b600052603260045260246000fd5b60200260200101516200020d60201b60201c565b15620000de5760405162461bcd60e51b815260206004820152601c60248201527f556e69742050726f746f636f6c3a20414c52454144595f455849535400000000604482015260640160405180910390fd5b60018282815181106200010157634e487b7160e01b600052603260045260246000fd5b6020908102919091018101518254600181018455600093845291832090910180546001600160a01b0319166001600160a01b03909216919091179055825182919081908590849081106200016557634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002081905550818181518110620001b257634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03167f7db05e63d635a68c62fd7fd8f3107ae8ab584a383e102d1bd8a40f4c977e465f60405160405180910390a280620001fb8162000394565b91505062000049565b505050620003d2565b6001546000906200022057506000919050565b6001600160a01b038216600090815260208190526040902054151580620002865750816001600160a01b031660016000815481106200026f57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316145b92915050565b80516001600160a01b0381168114620002a457600080fd5b919050565b60008060408385031215620002bc578182fd5b620002c7836200028c565b602084810151919350906001600160401b0380821115620002e6578384fd5b818601915086601f830112620002fa578384fd5b8151818111156200030f576200030f620003bc565b8060051b604051601f19603f83011681018181108582111715620003375762000337620003bc565b604052828152858101935084860182860187018b101562000356578788fd5b8795505b8386101562000383576200036e816200028c565b8552600195909501949386019386016200035a565b508096505050505050509250929050565b6000600019821415620003b557634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fd5b60805160601c61096c620003fe6000396000818160d3015281816103540152610654015261096c6000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c80634113e5ca11610081578063d53913931161005b578063d5391393146101cf578063dc97e84e146101f6578063f0d2d5a81461021d57600080fd5b80634113e5ca146101855780634f7304551461019a578063c99d3a06146101ba57600080fd5b806314c376dc116100b257806314c376dc146101355780631bcff06c1461016a5780633024a9121461017257600080fd5b806303ee9f22146100ce5780630ee21e5414610112575b600080fd5b6100f57f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b610125610120366004610860565b610230565b6040519015158152602001610109565b61015c7fe965846df3dd5b1dfa65f58e31477079e90140e0908b6dd31b5aead5a57cf36581565b604051908152602001610109565b60015461015c565b6100f56101803660046108ae565b6102ac565b61018d6102d6565b60405161010991906108c6565b61015c6101a8366004610860565b60006020819052908152604090205481565b6101cd6101c8366004610860565b610338565b005b61015c7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b61015c7f9a9aef7c1247d5fc769b0185c052913e39673da29a880317dfd20ebf86f26a4981565b6101cd61022b366004610860565b610638565b60015460009061024257506000919050565b6001600160a01b0382166000908152602081905260409020541515806102a65750816001600160a01b0316600160008154811061028f57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316145b92915050565b600181815481106102bc57600080fd5b6000918252602090912001546001600160a01b0316905081565b6060600180548060200260200160405190810160405280929190818152602001828054801561032e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610310575b5050505050905090565b604051632474521560e21b8152600060048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d148549060440160206040518083038186803b15801561039e57600080fd5b505afa1580156103b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d6919061088e565b6104275760405162461bcd60e51b815260206004820152601d60248201527f5375417574683a206f6e6c794f776e657220415554485f4641494c454400000060448201526064015b60405180910390fd5b6001600160a01b03811661047d5760405162461bcd60e51b815260206004820152601b60248201527f556e69742050726f746f636f6c3a205a45524f5f414444524553530000000000604482015260640161041e565b61048681610230565b6104d25760405162461bcd60e51b815260206004820152601d60248201527f556e69742050726f746f636f6c3a20444f45535f4e4f545f4558495354000000604482015260640161041e565b6001600160a01b0381166000908152602081905260408120805490829055600180549192916105019190610913565b90508082146105b15760006001828154811061052d57634e487b7160e01b600052603260045260246000fd5b600091825260209091200154600180546001600160a01b03909216925082918590811061056a57634e487b7160e01b600052603260045260246000fd5b6000918252602080832091909101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0394851617905592909116815290819052604090208290555b60018054806105d057634e487b7160e01b600052603160045260246000fd5b6000828152602081208201600019908101805473ffffffffffffffffffffffffffffffffffffffff191690559091019091556040516001600160a01b038516917fd89d2ee68ab04dca0193f48a4aff55e20fa5ec0429a8a8c1c51b8dad6178a59391a2505050565b604051632474521560e21b8152600060048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d148549060440160206040518083038186803b15801561069e57600080fd5b505afa1580156106b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d6919061088e565b6107225760405162461bcd60e51b815260206004820152601d60248201527f5375417574683a206f6e6c794f776e657220415554485f4641494c4544000000604482015260640161041e565b6001600160a01b0381166107785760405162461bcd60e51b815260206004820152601b60248201527f556e69742050726f746f636f6c3a205a45524f5f414444524553530000000000604482015260640161041e565b61078181610230565b156107ce5760405162461bcd60e51b815260206004820152601c60248201527f556e69742050726f746f636f6c3a20414c52454144595f455849535400000000604482015260640161041e565b600180546001600160a01b03831660008181526020819052604080822084905583850185559381527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6909201805473ffffffffffffffffffffffffffffffffffffffff19168217905591517f7db05e63d635a68c62fd7fd8f3107ae8ab584a383e102d1bd8a40f4c977e465f9190a250565b600060208284031215610871578081fd5b81356001600160a01b0381168114610887578182fd5b9392505050565b60006020828403121561089f578081fd5b81518015158114610887578182fd5b6000602082840312156108bf578081fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b818110156109075783516001600160a01b0316835292840192918401916001016108e2565b50909695505050505050565b60008282101561093157634e487b7160e01b81526011600452602481fd5b50039056fea2646970667358221220692974f1457430ea21490ae5e13da44db9d4d978883eb01dbeea0237e366614d64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100c95760003560e01c80634113e5ca11610081578063d53913931161005b578063d5391393146101cf578063dc97e84e146101f6578063f0d2d5a81461021d57600080fd5b80634113e5ca146101855780634f7304551461019a578063c99d3a06146101ba57600080fd5b806314c376dc116100b257806314c376dc146101355780631bcff06c1461016a5780633024a9121461017257600080fd5b806303ee9f22146100ce5780630ee21e5414610112575b600080fd5b6100f57f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b610125610120366004610860565b610230565b6040519015158152602001610109565b61015c7fe965846df3dd5b1dfa65f58e31477079e90140e0908b6dd31b5aead5a57cf36581565b604051908152602001610109565b60015461015c565b6100f56101803660046108ae565b6102ac565b61018d6102d6565b60405161010991906108c6565b61015c6101a8366004610860565b60006020819052908152604090205481565b6101cd6101c8366004610860565b610338565b005b61015c7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b61015c7f9a9aef7c1247d5fc769b0185c052913e39673da29a880317dfd20ebf86f26a4981565b6101cd61022b366004610860565b610638565b60015460009061024257506000919050565b6001600160a01b0382166000908152602081905260409020541515806102a65750816001600160a01b0316600160008154811061028f57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316145b92915050565b600181815481106102bc57600080fd5b6000918252602090912001546001600160a01b0316905081565b6060600180548060200260200160405190810160405280929190818152602001828054801561032e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610310575b5050505050905090565b604051632474521560e21b8152600060048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d148549060440160206040518083038186803b15801561039e57600080fd5b505afa1580156103b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d6919061088e565b6104275760405162461bcd60e51b815260206004820152601d60248201527f5375417574683a206f6e6c794f776e657220415554485f4641494c454400000060448201526064015b60405180910390fd5b6001600160a01b03811661047d5760405162461bcd60e51b815260206004820152601b60248201527f556e69742050726f746f636f6c3a205a45524f5f414444524553530000000000604482015260640161041e565b61048681610230565b6104d25760405162461bcd60e51b815260206004820152601d60248201527f556e69742050726f746f636f6c3a20444f45535f4e4f545f4558495354000000604482015260640161041e565b6001600160a01b0381166000908152602081905260408120805490829055600180549192916105019190610913565b90508082146105b15760006001828154811061052d57634e487b7160e01b600052603260045260246000fd5b600091825260209091200154600180546001600160a01b03909216925082918590811061056a57634e487b7160e01b600052603260045260246000fd5b6000918252602080832091909101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0394851617905592909116815290819052604090208290555b60018054806105d057634e487b7160e01b600052603160045260246000fd5b6000828152602081208201600019908101805473ffffffffffffffffffffffffffffffffffffffff191690559091019091556040516001600160a01b038516917fd89d2ee68ab04dca0193f48a4aff55e20fa5ec0429a8a8c1c51b8dad6178a59391a2505050565b604051632474521560e21b8152600060048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d148549060440160206040518083038186803b15801561069e57600080fd5b505afa1580156106b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d6919061088e565b6107225760405162461bcd60e51b815260206004820152601d60248201527f5375417574683a206f6e6c794f776e657220415554485f4641494c4544000000604482015260640161041e565b6001600160a01b0381166107785760405162461bcd60e51b815260206004820152601b60248201527f556e69742050726f746f636f6c3a205a45524f5f414444524553530000000000604482015260640161041e565b61078181610230565b156107ce5760405162461bcd60e51b815260206004820152601c60248201527f556e69742050726f746f636f6c3a20414c52454144595f455849535400000000604482015260640161041e565b600180546001600160a01b03831660008181526020819052604080822084905583850185559381527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6909201805473ffffffffffffffffffffffffffffffffffffffff19168217905591517f7db05e63d635a68c62fd7fd8f3107ae8ab584a383e102d1bd8a40f4c977e465f9190a250565b600060208284031215610871578081fd5b81356001600160a01b0381168114610887578182fd5b9392505050565b60006020828403121561089f578081fd5b81518015158114610887578182fd5b6000602082840312156108bf578081fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b818110156109075783516001600160a01b0316835292840192918401916001016108e2565b50909695505050505050565b60008282101561093157634e487b7160e01b81526011600452602481fd5b50039056fea2646970667358221220692974f1457430ea21490ae5e13da44db9d4d978883eb01dbeea0237e366614d64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6002,
        "contract": "contracts/lending/SuCollateralRegistry.sol:SuCollateralRegistry",
        "label": "collateralId",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6005,
        "contract": "contracts/lending/SuCollateralRegistry.sol:SuCollateralRegistry",
        "label": "collateralList",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}