{
  "address": "0x3171A0b29226D41C8e22C488a9452eaD05a3daF6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_suOracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_cdpRegistry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "Buyout",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "main",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stablecoin",
          "type": "uint256"
        }
      ],
      "name": "Destroyed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "main",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stablecoin",
          "type": "uint256"
        }
      ],
      "name": "Exit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "main",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stablecoin",
          "type": "uint256"
        }
      ],
      "name": "Join",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "LiquidationTriggered",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACCESS_CONTROL_SINGLETON",
      "outputs": [
        {
          "internalType": "contract ISuAccessControl",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIQUIDATION_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VAULT_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cdpRegistry",
      "outputs": [
        {
          "internalType": "contract ISuCdpRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "assetAmountEDecimal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stablecoinAmountE18",
          "type": "uint256"
        }
      ],
      "name": "exit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getAvailableToBorrowE18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getAvailableToWithdrawE18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getCollateralUsdValueE18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getLTVE18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getLiquidationBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getPosition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidationBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateralEDecimal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "debtE18",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "initialCollateralRatioE18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "isLiquidatablePosition",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "assetAmountEDecimal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stablecoinAmountE18",
          "type": "uint256"
        }
      ],
      "name": "join",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "repayer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stablecoinsToRepaymentE18",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "assetAmountEDecimal",
          "type": "uint256"
        }
      ],
      "name": "liquidate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "destroyed",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "repayer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "repaymentE18",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "excessAndFeeE18",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "assetAmountEDecimal",
          "type": "uint256"
        }
      ],
      "name": "liquidateAndRepay",
      "outputs": [
        {
          "internalType": "bool",
          "name": "destroyed",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "liquidationPriceE18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "liquidationRatioE18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "managerParameters",
      "outputs": [
        {
          "internalType": "contract ISuManagerParameters",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minCollateralInUsdE18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "repayer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stablecoinsToRepaymentE18",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stablecoinsToFoundationE18",
          "type": "uint256"
        }
      ],
      "name": "repay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stabilityFeeValueE18",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "initialCollateralRatioValueE18",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidationRatioValueE18",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stablecoinLimitE18",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minCollateralInUsdValueE18",
          "type": "uint256"
        }
      ],
      "name": "setCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newValueE18",
          "type": "uint256"
        }
      ],
      "name": "setInitialCollateralRatioE18",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newValueE18",
          "type": "uint256"
        }
      ],
      "name": "setLiquidationRatioE18",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValueE18",
          "type": "uint256"
        }
      ],
      "name": "setMinCollateralInUsdE18",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "suOracle",
      "outputs": [
        {
          "internalType": "contract ISuOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "triggerLiquidation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "utilizationRatioE18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "contract ISuVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultParameters",
      "outputs": [
        {
          "internalType": "contract SuVaultParameters",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xac8a5f6623d38a4c48a3498b2c1051dfafa56b581dd9559660527e32787f5152",
  "receipt": {
    "to": null,
    "from": "0xE2661235b116781a7b30D4a675898cF9E61298Df",
    "contractAddress": "0x3171A0b29226D41C8e22C488a9452eaD05a3daF6",
    "transactionIndex": 21,
    "gasUsed": "3451926",
    "logsBloom": "0x
    "blockHash": "0x12834e7c52637807594f5cdd0abd3ca036a6e288ea1899071499f84d42cd4565",
    "transactionHash": "0xac8a5f6623d38a4c48a3498b2c1051dfafa56b581dd9559660527e32787f5152",
    "logs": [],
    "blockNumber": 10988754,
    "cumulativeGasUsed": "6085504",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x86907dAE821789743750a0cbe2bBC562518DF336",
    "0x492802041d5781FD3e5a1f8DD9C3C481d82Be89D",
    "0x9E7507864681fB896b6FaAB76800b3ef9a9E0360"
  ],
  "numDeployments": 1,
  "solcInputHash": "1acf5fc7213acb073e526533d9983610",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_suOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cdpRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Buyout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"main\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stablecoin\",\"type\":\"uint256\"}],\"name\":\"Destroyed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"main\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stablecoin\",\"type\":\"uint256\"}],\"name\":\"Exit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"main\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stablecoin\",\"type\":\"uint256\"}],\"name\":\"Join\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LiquidationTriggered\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACCESS_CONTROL_SINGLETON\",\"outputs\":[{\"internalType\":\"contract ISuAccessControl\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDATION_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VAULT_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cdpRegistry\",\"outputs\":[{\"internalType\":\"contract ISuCdpRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetAmountEDecimal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stablecoinAmountE18\",\"type\":\"uint256\"}],\"name\":\"exit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getAvailableToBorrowE18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getAvailableToWithdrawE18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getCollateralUsdValueE18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getLTVE18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getLiquidationBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidationBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralEDecimal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtE18\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"initialCollateralRatioE18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"isLiquidatablePosition\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetAmountEDecimal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stablecoinAmountE18\",\"type\":\"uint256\"}],\"name\":\"join\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"repayer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stablecoinsToRepaymentE18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetAmountEDecimal\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"destroyed\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"repayer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repaymentE18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"excessAndFeeE18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetAmountEDecimal\",\"type\":\"uint256\"}],\"name\":\"liquidateAndRepay\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"destroyed\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"liquidationPriceE18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidationRatioE18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managerParameters\",\"outputs\":[{\"internalType\":\"contract ISuManagerParameters\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minCollateralInUsdE18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"repayer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stablecoinsToRepaymentE18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stablecoinsToFoundationE18\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stabilityFeeValueE18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialCollateralRatioValueE18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationRatioValueE18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stablecoinLimitE18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minCollateralInUsdValueE18\",\"type\":\"uint256\"}],\"name\":\"setCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newValueE18\",\"type\":\"uint256\"}],\"name\":\"setInitialCollateralRatioE18\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newValueE18\",\"type\":\"uint256\"}],\"name\":\"setLiquidationRatioE18\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValueE18\",\"type\":\"uint256\"}],\"name\":\"setMinCollateralInUsdE18\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"suOracle\",\"outputs\":[{\"internalType\":\"contract ISuOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"triggerLiquidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"utilizationRatioE18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract ISuVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultParameters\",\"outputs\":[{\"internalType\":\"contract SuVaultParameters\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"events\":{\"Buyout(address,address,address,uint256,uint256)\":{\"details\":\"Trigger when buyouts are happened*\"}},\"kind\":\"dev\",\"methods\":{\"getLiquidationBlock(address,address)\":{\"params\":{\"asset\":\"The address of the main collateral token of a position\",\"owner\":\"The owner of the collateral\"},\"returns\":{\"_0\":\"liquidationBlock The block number when the liquidation was triggered\"}},\"getPosition(address,address)\":{\"details\":\"TODO: should rename to getPositionInfo()\",\"params\":{\"asset\":\"The address of the main collateral token of a position\",\"owner\":\"The owner of the collateral\"},\"returns\":{\"collateralEDecimal\":\"The amount of collateral\",\"debtE18\":\"The amount of borrowed stablecoins\",\"liquidationBlock\":\"The block number when the liquidation was triggered\"}},\"liquidate(address,address,address,uint256,uint256)\":{\"details\":\"Supports a partial liquidation\",\"params\":{\"asset\":\"The address of the main collateral token of a position\",\"assetAmountEDecimal\":\"The position's collateral which be recieved by repayer\",\"owner\":\"The owner of the collateral\",\"repayer\":\"The person who repaies by debt and transfers stablecoins to the foundation\",\"stablecoinsToRepaymentE18\":\"The amount of stablecoins which will be burned as a debt repaymention\"},\"returns\":{\"destroyed\":\"Returns \\\"true\\\" if the position completely liquidated\"}},\"liquidateAndRepay(address,address,address,uint256,uint256,uint256)\":{\"details\":\"Supports a partial liquidation\",\"params\":{\"asset\":\"The address of the main collateral token of a position\",\"assetAmountEDecimal\":\"The position's collateral which be recieved by repayer\",\"excessAndFeeE18\":\"The amount of stablecoins which transfer to foundation\",\"owner\":\"The owner of a position\",\"repayer\":\"The person who repaies by debt and recieves a position's collateral\",\"repaymentE18\":\"The amount of repayment\"},\"returns\":{\"destroyed\":\"Returns \\\"true\\\" if the position completely liquidated\"}},\"repay(address,uint256,uint256)\":{\"params\":{\"repayer\":\"The person who repaies by debt and transfers stablecoins to the foundation\",\"stablecoinsToFoundationE18\":\"The amount of stablecoins which will be transfered to the foundation\",\"stablecoinsToRepaymentE18\":\"The amount of stablecoins which will be burned as a debt repayment\"}},\"setInitialCollateralRatioE18(address,uint256)\":{\"details\":\"Sets the initial collateral ratio\",\"params\":{\"asset\":\"The address of the main collateral token\",\"newValueE18\":\"The collateralization ratio (1e18 = 100%)*\"}},\"setLiquidationRatioE18(address,uint256)\":{\"details\":\"Sets the liquidation ratio\",\"params\":{\"asset\":\"The address of the main collateral token\",\"newValueE18\":\"The liquidation ratio (1e18 = 100%)*\"}},\"setMinCollateralInUsdE18(uint256)\":{\"details\":\"Sets a minimum value of collateral in USD which allowed to be left after partial closure\",\"params\":{\"newValueE18\":\"The minimum value of collateral in USD\"}},\"triggerLiquidation(address,address)\":{\"details\":\"Emits LiquidationTriggered event. Sets the current block as liquidationBlock for the position. Can be triggered only once for the position.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getAvailableToBorrowE18(address,address)\":{\"notice\":\"Returns Available to Borrow we have invariant: (collateralAmountEDecimal * collateralPriceE18 / 1e18) * initialCollateralRatioE18 <= debtE18 Has similar logic like in _ensurePositionCollateralization\"},\"getAvailableToWithdrawE18(address,address)\":{\"notice\":\"Returns Available to Withdraw Has similar invariant like in getAvailableToBorrowE18\"},\"getLTVE18(address,address)\":{\"notice\":\"Returns Loan-To-Value in e18\"},\"getLiquidationBlock(address,address)\":{\"notice\":\"Returns information about a liquidating position\"},\"getPosition(address,address)\":{\"notice\":\"Returns information about a liquidating position\"},\"join(address,uint256,uint256)\":{\"notice\":\"Yes,\"},\"liquidate(address,address,address,uint256,uint256)\":{\"notice\":\"Liquidates a position\"},\"liquidateAndRepay(address,address,address,uint256,uint256,uint256)\":{\"notice\":\"please see https://ratiofinance.medium.com/ratio-risk-lesson-2-cascading-liquidations-e91e04050f47Liquidates a position's collateral completely\"},\"repay(address,uint256,uint256)\":{\"notice\":\"Finilizes the liquidation\"},\"setInitialCollateralRatioE18(address,uint256)\":{\"notice\":\"Only manager is able to call this function\"},\"setLiquidationRatioE18(address,uint256)\":{\"notice\":\"Only manager is able to call this function\"},\"setMinCollateralInUsdE18(uint256)\":{\"notice\":\"Only manager is able to call this function\"}},\"notice\":\"not sure why\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lending/SuManager.sol\":\"SuManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4a1a0ba12bf1a33f10d9fe226278cf59675c0b929d29e4da99658a079b27fb84\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/access-control/SuAccessControlSingleton.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"./SuAuthenticated.sol\\\";\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title SuAccessControl\\n * @dev Access control for contracts. SuVaultParameters can be inherited from it.\\n */\\n// TODO: refactor by https://en.wikipedia.org/wiki/Principle_of_least_privilege\\ncontract SuAccessControlSingleton is AccessControl, SuAuthenticated {\\n    /**\\n     * @dev Initialize the contract with initial owner to be deployer\\n     */\\n    constructor() SuAuthenticated(address(this)) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    /**\\n    * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n    * Can only be called by the current owner.\\n    */\\n    function transferOwnership(address newOwner) external {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Ownable: caller is not the owner\\\");\\n\\n        if (hasRole(MINTER_ROLE, msg.sender)) {\\n            grantRole(MINTER_ROLE, newOwner);\\n            revokeRole(MINTER_ROLE, msg.sender);\\n        }\\n\\n        if (hasRole(VAULT_ACCESS_ROLE, msg.sender)) {\\n            grantRole(VAULT_ACCESS_ROLE, newOwner);\\n            revokeRole(VAULT_ACCESS_ROLE, msg.sender);\\n        }\\n\\n        grantRole(DEFAULT_ADMIN_ROLE, newOwner);\\n        revokeRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0xecbacd6aa378b65c97e1006790e9ec0c5af8808490f5f921c4c7dadac05b271b\",\"license\":\"BSL 1.1\"},\"contracts/access-control/SuAuthenticated.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\npragma solidity >=0.7.6;\\n\\nimport \\\"../interfaces/ISuAccessControl.sol\\\";\\n\\n/**\\n * @title SuAuthenticated\\n * @dev other contracts should inherit to be authenticated\\n */\\nabstract contract SuAuthenticated {\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant VAULT_ACCESS_ROLE = keccak256(\\\"VAULT_ACCESS_ROLE\\\");\\n    bytes32 public constant LIQUIDATION_ACCESS_ROLE = keccak256(\\\"LIQUIDATION_ACCESS_ROLE\\\");\\n    bytes32 private constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /// @dev the address of SuAccessControlSingleton - it should be one for all contract that inherits SuAuthenticated\\n    ISuAccessControl public immutable ACCESS_CONTROL_SINGLETON;\\n\\n    /// @dev should be passed in constructor\\n    constructor(address _accessControlSingleton) {\\n        ACCESS_CONTROL_SINGLETON = ISuAccessControl(_accessControlSingleton);\\n        // TODO: check that _accessControlSingleton points to ISuAccessControl instance\\n        // require(ISuAccessControl(_accessControlSingleton).supportsInterface(ISuAccessControl.hasRole.selector), \\\"bad dependency\\\");\\n    }\\n\\n    /// @dev check DEFAULT_ADMIN_ROLE\\n    modifier onlyOwner() {\\n        require(ACCESS_CONTROL_SINGLETON.hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"SuAuth: onlyOwner AUTH_FAILED\\\");\\n        _;\\n    }\\n\\n    /// @dev check VAULT_ACCESS_ROLE\\n    modifier onlyVaultAccess() {\\n        require(ACCESS_CONTROL_SINGLETON.hasRole(VAULT_ACCESS_ROLE, msg.sender), \\\"SuAuth: onlyVaultAccess AUTH_FAILED\\\");\\n        _;\\n    }\\n\\n    /// @dev check VAULT_ACCESS_ROLE\\n    modifier onlyLiquidationAccess() {\\n        require(ACCESS_CONTROL_SINGLETON.hasRole(LIQUIDATION_ACCESS_ROLE, msg.sender), \\\"SuAuth: onlyLiquidationAccess AUTH_FAILED\\\");\\n        _;\\n    }\\n\\n    /// @dev check MINTER_ROLE\\n    modifier onlyMinter() {\\n        require(ACCESS_CONTROL_SINGLETON.hasRole(MINTER_ROLE, msg.sender), \\\"SuAuth: onlyMinter AUTH_FAILED\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x0cf69e39724023d26c834d7a13f51b418604c19010949d146094f99e06ee8b9c\",\"license\":\"BSL 1.1\"},\"contracts/interfaces/ISuAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface ISuAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n    function grantRole(bytes32 role, address account) external;\\n    function revokeRole(bytes32 role, address account) external;\\n    function renounceRole(bytes32 role, address account) external;\\n\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    // TODO: remove legacy functionality\\n    function setVault(address _vault, bool _isVault) external;\\n    function setCdpManager(address _cdpManager, bool _isCdpManager) external;\\n    function setDAO(address _dao, bool _isDAO) external;\\n    function setManagerParameters(address _address, bool _permit) external;\\n    function transferOwnership(address newOwner) external;\\n}\\n\",\"keccak256\":\"0xd386f4bad5ae0d77788abea08ceec10dc02b02559465d8a8f4e30b58dfac2d2a\",\"license\":\"MIT\"},\"contracts/interfaces/ISuCdpRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface ISuCdpRegistry {\\n\\n    struct CDP {\\n        address asset;\\n        address owner;\\n    }\\n\\n    function batchCheckpoint ( address[] calldata assets, address[] calldata owners ) external;\\n    function batchCheckpointForAsset ( address asset, address[] calldata owners ) external;\\n    function checkpoint ( address asset, address owner ) external;\\n    function cr (  ) external view returns ( address );\\n    function getAllCdps (  ) external view returns ( CDP[] memory r );\\n    function getCdpsByCollateral ( address asset ) external view returns ( CDP[] memory cdps );\\n    function getCdpsByOwner ( address owner ) external view returns ( CDP[] memory r );\\n    function getCdpsCount (  ) external view returns ( uint256 totalCdpCount );\\n    function getCdpsCountForCollateral ( address asset ) external view returns ( uint256 );\\n    function isAlive ( address asset, address owner ) external view returns ( bool );\\n    function isListed ( address asset, address owner ) external view returns ( bool );\\n    function vault (  ) external view returns ( address );\\n}\\n\",\"keccak256\":\"0xbd1b2a5c0c1f57ab775899ab9b3d35a6dbde8c75aba0860ac271e6f1f31b6186\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ISuManagerParameters.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\ninterface ISuManagerParameters {\\n    function initialCollateralRatioE18 ( address ) external view returns ( uint256 );\\n    function liquidationRatioE18 ( address ) external view returns ( uint256 );\\n    function minCollateralInUsdE18 () external view returns ( uint256 );\\n    function setCollateral (\\n        address asset,\\n        uint256 stabilityFeeValueE18,\\n        uint256 initialCollateralRatioValueE18,\\n        uint256 liquidationRatioValueE18,\\n        uint256 stablecoinLimitE18,\\n        uint256 minCollateralInUsdValueE18\\n    ) external;\\n    function setInitialCollateralRatioE18 ( address asset, uint256 newValueE18 ) external;\\n    function setLiquidationRatioE18 ( address asset, uint256 newValueE18 ) external;\\n    function setMinCollateralInUsdE18 ( uint256 newValueE18 ) external;\\n    function vaultParameters (  ) external view returns ( address );\\n}\\n\",\"keccak256\":\"0x8525d04243a7fae8d184d3f56e0f03054d06ec87f714b85bd8835ed931ddf4c0\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ISuOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity >=0.7.6;\\n\\ninterface ISuOracle {\\n    /**\\n     * @notice WARNING! Read this description very carefully!\\n     *      function getUsdPrice1e18(address asset) returns (uint256) that:\\n     *          basicAmountOfAsset * getUsdPrice1e18(asset) / 1e18 === $$ * 1e18\\n     *      in other words, it doesn't matter what's the erc20.decimals is,\\n     *      you just multiply token balance in basic units on value from oracle and get dollar amount multiplied on 1e18.\\n     *\\n     * different assets have different deviation threshold (errors)\\n     *      for wBTC it's <= 0.5%, read more https://data.chain.link/ethereum/mainnet/crypto-usd/btc-usd\\n     *      for other asset is can be larger based on particular oracle implementation.\\n     *\\n     * examples:\\n     *      assume market price of wBTC = $31,503.77, oracle error = $158\\n     *\\n     *       case #1: small amount of wBTC\\n     *           we have 0.0,000,001 wBTC that is worth v = $0.00315 \\u00b1 $0.00001 = 0.00315*1e18 = 315*1e13 \\u00b1 1*1e13\\n     *           actual balance on the asset b = wBTC.balanceOf() =  0.0000001*1e18 = 1e11\\n     *           oracle should return or = oracle.getUsdPrice1e18(wBTC) <=>\\n     *           <=> b*or = v => v/b = 315*1e13 / 1e11 = 315*1e2 \\u00b1 1e2\\n     *           error = or.error * b = 1e2 * 1e11 = 1e13 => 1e13/1e18 usd = 1e-5 = 0.00001 usd\\n     *\\n     *       case #2: large amount of wBTC\\n     *           v = 2,000,000 wBTC = $31,503.77 * 2m \\u00b1 158*2m = $63,007,540,000 \\u00b1 $316,000,000 = 63,007*1e24 \\u00b1 316*1e24\\n     *           for calc convenience we increase error on 0.05 and have v = 63,000*24 \\u00b1 300*1e24 = (630 \\u00b1 3)*1e26\\n     *           b = 2*1e6 * 1e18 = 2*1e24\\n     *           or = v/b = (630 \\u00b1 3)*1e26 / 2*1e24 = 315*1e2 \\u00b1 1.5*1e2\\n     *           error = or.error * b = 1.5*100 * 2*1e24 = 3*1e26 = 3*1e8*1e18 = $300,000,000 ~ $316,000,000\\n     *\\n     *      assume the market price of USDT = $0.97 \\u00b1 $0.00485,\\n     *\\n     *       case #3: little amount of USDT\\n     *           v = USDT amount 0.005 = 0.005*(0.97 \\u00b1 0.00485) = 0.00485*1e18 \\u00b1 0.00002425*1e18 = 485*1e13 \\u00b1 3*1e13\\n     *           we rounded error up on (3000-2425)/2425 ~= +24% for calculation convenience.\\n     *           b = USDT.balanceOf() = 0.005*1e6 = 5*1e3\\n     *           b*or = v => or = v/b = (485*1e13 \\u00b1 3*1e13) / 5*1e3 = 970*1e9 \\u00b1 6*1e9\\n     *           error = 6*1e9 * 5*1e3 / 1e18 = 30*1e12/1e18 = 3*1e-5 = $0,00005\\n     *\\n     *       case #4: lot of USDT\\n     *           v = we have 100,000,000,000 USDT = $97B = 97*1e9*1e18 \\u00b1 0.5*1e9*1e18\\n     *           b = USDT.balanceOf() = 1e11*1e6 = 1e17\\n     *           or = v/b = (97*1e9*1e18 \\u00b1 0.5*1e9*1e18) / 1e17 = 970*1e9 \\u00b1 5*1e9\\n     *           error = 5*1e9 * 1e17 = 5*1e26 = 0.5 * 1e8*1e18\\n     *\\n     * @param asset - address of erc20 token contract\\n     * @return usdPrice1e18 such that asset.balanceOf() * getUsdPrice1e18(asset) / 1e18 == $$ * 1e18\\n     **/\\n    function getUsdPrice1e18(address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x000567b74a69b532d893db59cb93c4e470aa794a909a7309fdacc0ba29671538\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ISuVault.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\ninterface ISuVault {\\n    function borrow ( address asset, address user, uint256 amountE18 ) external returns ( uint256 );\\n    function calculateFeeE18 ( address asset, address user, uint256 amountE18 ) external view returns ( uint256 );\\n    function collateralsEDecimal ( address, address ) external view returns ( uint256 );\\n    function debtsE18 ( address, address ) external view returns ( uint256 );\\n    function deposit ( address asset, address user, uint256 amountEDecimal ) external;\\n    function destroy ( address asset, address user ) external;\\n    function getTotalDebtE18 ( address asset, address user ) external view returns ( uint256 );\\n    function liquidate(\\n        address asset,\\n        address owner,\\n        address recipient,\\n        uint assetAmountEDecimal,\\n        uint stablecoinAmountE18\\n    ) external returns (bool);\\n    function triggerLiquidation(address asset,address positionOwner) external;\\n    function lastUpdate ( address, address ) external view returns ( uint256 );\\n    function stabilityFeeE18 ( address, address ) external view returns ( uint256 );\\n    function tokenDebtsE18 ( address ) external view returns ( uint256 );\\n    function update ( address asset, address user ) external;\\n    function liquidationBlock (address, address) external view returns (uint256);\\n    function STABLECOIN (  ) external view returns ( address );\\n    function VAULT_PARAMETERS (  ) external view returns ( address );\\n    function withdraw ( address asset, address user, address recipient, uint256 amountEDecimal ) external;\\n    function repay ( address repayer, uint256 repaymentE18, uint256 excessAndFeeE18 ) external;\\n}\\n\",\"keccak256\":\"0x6c91c94c7733eef489800cd25ec58e2053f051108755584e0346f1706c2a763f\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ISuVaultParameters.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\ninterface ISuVaultParameters {\\n    function foundation (  ) external view returns ( address );\\n    function setCollateral (\\n        address asset,\\n        uint256 stabilityFeeValueE18,\\n        uint256 stablecoinLimitE18,\\n        uint256[] calldata oracles\\n    ) external;\\n    function setFoundation ( address newFoundation ) external;\\n    function setStabilityFeeE18 ( address asset, uint256 newValue ) external;\\n    function setTokenDebtLimitE18 ( address asset, uint256 limit ) external;\\n    function protocolStabilityFeeE18 ( address ) external view returns ( uint256 );\\n    function tokenDebtLimitE18 ( address ) external view returns ( uint256 );\\n    function vault (  ) external view returns ( address );\\n}\\n\",\"keccak256\":\"0x10074ee603fd8636d50476821e9bef8c7f95d96ceb481a6d8853791999bbb44b\",\"license\":\"UNLICENSED\"},\"contracts/lending/SuManager.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\n/*\\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\\n*/\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport \\\"../interfaces/ISuOracle.sol\\\";\\nimport \\\"../interfaces/ISuVault.sol\\\";\\nimport \\\"../interfaces/ISuCdpRegistry.sol\\\";\\nimport \\\"../interfaces/ISuManagerParameters.sol\\\";\\nimport \\\"../interfaces/ISuVaultParameters.sol\\\";\\nimport \\\"./SuManagerParameters.sol\\\";\\n\\n// finally found the managers mighty over the vault\\n// user does only interact with manager as proxy to the wallet\\n/// Yes\\n// there is only one manager for vault each moment\\n/// I'm sure, the code doesn't enforce this, could be multiple managers\\n// suggest to maintain only address of active manager instead of managers list\\n/// not sure why\\ncontract SuManager is ReentrancyGuard, SuManagerParameters {\\n    ISuVault public immutable vault;\\n    ISuManagerParameters public immutable managerParameters;\\n    ISuCdpRegistry public immutable cdpRegistry;\\n\\n    ISuOracle public suOracle;\\n\\n    // even triggered when user deposit collateral\\n    event Join(address indexed asset, address indexed owner, uint main, uint stablecoin);\\n\\n    // event triggered when user withdraws collateral\\n    event Exit(address indexed asset, address indexed owner, uint main, uint stablecoin);\\n\\n    // event triggered when user destroyes cdp\\n    event Destroyed(address indexed asset, address indexed owner, uint main, uint stablecoin);\\n\\n    // event triggered when user didnt withdraw collateral before price goes down\\n    event LiquidationTriggered(address indexed asset, address indexed owner);\\n\\n    /**\\n     * @dev Trigger when buyouts are happened\\n    **/\\n    event Buyout(address indexed asset, address indexed owner, address indexed buyer, uint amount, uint price);\\n\\n    modifier checkpoint(address asset, address owner) {\\n        _;\\n        cdpRegistry.checkpoint(asset, owner);\\n    }\\n\\n     // aggregation over composition\\n    constructor(address _vault, address _suOracle, address _cdpRegistry)\\n        SuManagerParameters(_vault)\\n    {\\n        address _managerParameters = address (this);\\n        require(\\n            _managerParameters != address(0) &&\\n            _cdpRegistry != address(0),\\n                \\\"Unit Protocol: INVALID_ARGS\\\"\\n        );\\n\\n        require(_suOracle != address(0), \\\"INVALID_ARGS: SU_ORACLE\\\");\\n\\n        // require(ISuVaultManagerParameters(_managerParameters).vaultParameters() != address(0), \\\"INVALID_ARGS: VAULT_PARAMETERS\\\");\\n\\n        // require(ISuVaultParameters(ISuVaultManagerParameters(_managerParameters).vaultParameters()).vault() != address(0), \\\"INVALID_ARGS: VAULT\\\");\\n\\n        // require(ISuVault(ISuVaultParameters(ISuVaultManagerParameters(_managerParameters).vaultParameters()).vault()).weth() != address(0), \\\"INVALID_ARGS: VAULT_MANAGER\\\");\\n\\n        suOracle = ISuOracle(_suOracle);\\n\\n        managerParameters = ISuManagerParameters(_managerParameters);\\n\\n//        vault = ISuVault(ISuVaultParameters(ISuVaultManagerParameters(_managerParameters).vaultParameters()).vault());\\n        vault = ISuVault(_vault);\\n\\n        cdpRegistry = ISuCdpRegistry(_cdpRegistry);\\n    }\\n\\n    // wrapper ether only, no native\\n    receive() external payable {\\n        revert(\\\"Unit Protocol: RESTRICTED\\\");\\n    }\\n\\n      // why checkpoint is needed? to check if depositing collateral allowed for user?\\n      // this function is called by user to deposit collateral and receive stablecoin\\n      // before calling this function user has to approve the Vault to take his collateral\\n      /// Yes,\\n    function join(address asset, uint assetAmountEDecimal, uint stablecoinAmountE18) public nonReentrant checkpoint(asset, msg.sender) {\\n        require(stablecoinAmountE18 != 0 || assetAmountEDecimal != 0, \\\"Unit Protocol: USELESS_TX\\\");\\n\\n        require(IERC20Metadata(asset).decimals() <= 18, \\\"Unit Protocol: NOT_SUPPORTED_DECIMALS\\\");\\n\\n        if (stablecoinAmountE18 == 0) {\\n\\n            // why user deposit collateral but does not take stablecoin?\\n            // should be called in separate function\\n            /// Use doesn't want to get liquidate, so stakes more collateral\\n            vault.deposit(asset, msg.sender, assetAmountEDecimal);\\n\\n        } else {\\n\\n            if (assetAmountEDecimal != 0) {\\n                // deposit collateral to the wallet\\n                vault.deposit(asset, msg.sender, assetAmountEDecimal);\\n            }\\n\\n            // issue stablecoin to the user\\n            // why stablecoinAmount is chosen by user?\\n            // it should be calculated from amount of collateral given\\n            vault.borrow(asset, msg.sender, stablecoinAmountE18);\\n\\n            // maybe here we check that stablecoinAmount are corresponding to assetAmount?\\n            // how does user know correct values? probably by calling helper view function\\n            _ensurePositionCollateralization(asset, msg.sender);\\n\\n        }\\n\\n        // not allowed to left some dust after partial closure the position\\n        _ensureMinCollateralThreshold(asset, msg.sender);\\n\\n        emit Join(asset, msg.sender, assetAmountEDecimal, stablecoinAmountE18);\\n    }\\n\\n      // user can pay back the stablecoin and take his collateral\\n      // instead of passing both assetAmount and stablecoinAmount\\n      // better user just to pass one of them\\n      // also pass preferred rate and maybe acceptable diff percent\\n      // that's the purpose of passing both to protect user from rate fluctuations\\n    function exit(address asset, uint assetAmountEDecimal, uint stablecoinAmountE18) public nonReentrant checkpoint(asset, msg.sender) returns (uint) {\\n\\n        // check liquidation is not triggered yet\\n        require(vault.liquidationBlock(asset, msg.sender) == 0, \\\"Unit Protocol: LIQUIDATING_POSITION\\\");\\n\\n        // not to pay more stablecoin than debt\\n        uint debtE18 = vault.debtsE18(asset, msg.sender);\\n        if (stablecoinAmountE18 > debtE18) { stablecoinAmountE18 = debtE18; }\\n\\n        // calculate and charge fee\\n        uint feeE18 = vault.calculateFeeE18(asset, msg.sender, stablecoinAmountE18);\\n\\n        bool destroyed = vault.liquidate(asset, msg.sender, msg.sender, assetAmountEDecimal, stablecoinAmountE18);\\n\\n        // not allowed to left some dust after partial closure the position\\n        _ensureMinCollateralThreshold(asset, msg.sender);\\n\\n        // burn stablecoin from the vault\\n        vault.repay(msg.sender, stablecoinAmountE18, feeE18);\\n\\n        if (destroyed) {\\n            emit Destroyed(asset, msg.sender, assetAmountEDecimal, stablecoinAmountE18);\\n            return stablecoinAmountE18;\\n        }\\n\\n        // TODO: check that withdrawals lead to update\\n\\n        vault.update(asset, msg.sender);\\n\\n        // make sure partial repayment is valid\\n        // but dont need to check this after full repayment?\\n        /// Yes, because divizion by 0\\n        _ensurePositionCollateralization(asset, msg.sender);\\n\\n        emit Exit(asset, msg.sender, assetAmountEDecimal, stablecoinAmountE18);\\n\\n        return stablecoinAmountE18;\\n    }\\n\\n    // after partial repayment should be made sure its still collateralized enough\\n    function _ensurePositionCollateralization(address asset, address owner) internal view {\\n        // calculate value in usd from collateral position\\n        uint usdValueE18 = getCollateralUsdValueE18(asset, owner);\\n\\n        // multiply value in usd to the collateral ratio, then divide by 1e18\\n        uint usdLimitE18 = usdValueE18 * managerParameters.initialCollateralRatioE18(asset) / 1e18;\\n\\n        // make sure calculated allowed limit is higher than the actual debt\\n        require(vault.getTotalDebtE18(asset, owner) <= usdLimitE18, \\\"Unit Protocol: UNDERCOLLATERALIZED\\\");\\n    }\\n\\n    // after partial closure should be made sure it is not left too little amount of collateral\\n    function _ensureMinCollateralThreshold(address asset, address owner) internal view {\\n        // calculate value in usd from collateral position\\n        uint usdValueE18 = getCollateralUsdValueE18(asset, owner);\\n\\n        require(usdValueE18 == 0 || usdValueE18 > managerParameters.minCollateralInUsdE18(), \\\"Unit Protocol: SMALL_COLLATERAL\\\");\\n    }\\n\\n    // * Now we return rate and calculate amount here\\n    function getCollateralUsdValueE18(address asset, address owner) public view returns (uint) {\\n        uint256 assetAmountEDecimal = vault.collateralsEDecimal(asset, owner);\\n\\n        return suOracle.getUsdPrice1e18(asset) * assetAmountEDecimal / 1e18;\\n    }\\n\\n     // is position allowed to be liquidated\\n    function _isLiquidatablePosition(\\n        address asset,\\n        address owner,\\n        uint usdValueE18\\n    ) internal view returns (bool) {\\n        // calculate current debt to be returned\\n        uint debtE18 = vault.getTotalDebtE18(asset, owner);\\n\\n        if (debtE18 == 0) return false;\\n        console.log(\\\"LIMIT\\\", debtE18, usdValueE18, managerParameters.liquidationRatioE18(asset));\\n        // make sure its not under collaterazied\\n        // should liquidation ration always be higher than 1 or allowed lower?\\n        return debtE18 * 1e18 / usdValueE18 >= managerParameters.liquidationRatioE18(asset);\\n    }\\n\\n     // view function to check if position is liquidatable\\n    function isLiquidatablePosition(\\n        address asset,\\n        address owner\\n    ) public view returns (bool) {\\n        uint usdValueE18 = getCollateralUsdValueE18(asset, owner);\\n\\n        return _isLiquidatablePosition(asset, owner, usdValueE18);\\n    }\\n\\n     // view function to show utilization ratio\\n     // the same function can be used inside of _isLiquidatablePosition\\n    function utilizationRatioE18(\\n        address asset,\\n        address owner\\n    ) public view returns (uint) {\\n        uint debtE18 = vault.getTotalDebtE18(asset, owner);\\n        if (debtE18 == 0) return 0;\\n\\n        uint usdValueE18 = getCollateralUsdValueE18(asset, owner);\\n\\n        return debtE18 * 1e18 / usdValueE18;\\n    }\\n\\n    /// @notice Marks a position as to be liquidated\\n    /// @param asset The address of the main collateral token of a position\\n    /// @param owner The owner of a position\\n    /** @dev\\n    Emits LiquidationTriggered event.\\n    Sets the current block as liquidationBlock for the position.\\n    Can be triggered only once for the position.\\n    */\\n    function triggerLiquidation(address asset, address owner) external {\\n\\n        // check liquidation is not triggered yet\\n        require(vault.liquidationBlock(asset, owner) == 0, \\\"Unit Protocol: LIQUIDATING_POSITION\\\");\\n\\n        // calculate valut of collateral\\n        uint usdValue = getCollateralUsdValueE18(asset, owner);\\n\\n        // and check if it can be liquidated\\n        require(_isLiquidatablePosition(asset, owner, usdValue), \\\"Unit Protocol: SAFE_POSITION\\\");\\n\\n        // summarize debt with accumulated fees\\n        vault.update(asset, owner);\\n\\n        // then vault will trigger liquidation and auction begins\\n        vault.triggerLiquidation(asset, owner);\\n\\n        emit LiquidationTriggered(asset, owner);\\n    }\\n\\n    // will stablecoin paid by liquidator be burned immediately?\\n    /// Yes\\n    // how can cascading liquidation happen step by step?\\n    /// please see https://ratiofinance.medium.com/ratio-risk-lesson-2-cascading-liquidations-e91e04050f47\\n    /// @notice Liquidates a position's collateral completely\\n    /// @dev Supports a partial liquidation\\n    /// @param asset The address of the main collateral token of a position\\n    /// @param owner The owner of a position\\n    /// @param repayer The person who repaies by debt and recieves a position's collateral\\n    /// @param repaymentE18 The amount of repayment\\n    /// @param excessAndFeeE18 The amount of stablecoins which transfer to foundation\\n    /// @param assetAmountEDecimal The position's collateral which be recieved by repayer\\n    /// @return destroyed Returns \\\"true\\\" if the position completely liquidated\\n    function liquidateAndRepay(\\n        address asset,\\n        address owner,\\n        address repayer,\\n        uint repaymentE18,\\n        uint excessAndFeeE18,\\n        uint assetAmountEDecimal\\n    ) public nonReentrant checkpoint(asset, owner) onlyLiquidationAccess returns (bool destroyed) {\\n        // check if it can be liquidated\\n        require(vault.liquidationBlock(asset, owner) > 0, \\\"Unit Protocol: NOT_LIQUIDATING_POSITION\\\");\\n\\n        console.log(\\\"LIQUIDATE liquidate (assetAmount, repayment): \\\", assetAmountEDecimal, repaymentE18);\\n        destroyed = vault.liquidate(asset, owner, repayer, assetAmountEDecimal, repaymentE18);\\n\\n        // not allowed to left some dust after partial closure the position\\n        _ensureMinCollateralThreshold(asset, msg.sender);\\n\\n        // burn stablecoin from the vault\\n        console.log(\\\"REPAY repay (repayment, excessAndFee):\\\", repaymentE18, excessAndFeeE18);\\n        vault.repay(repayer, repaymentE18, excessAndFeeE18);\\n    }\\n\\n    /// @notice Liquidates a position\\n    /// @dev Supports a partial liquidation\\n    /// @param asset The address of the main collateral token of a position\\n    /// @param owner The owner of the collateral\\n    /// @param repayer The person who repaies by debt and transfers stablecoins to the foundation\\n    /// @param stablecoinsToRepaymentE18 The amount of stablecoins which will be burned as a debt repaymention\\n    /// @param assetAmountEDecimal The position's collateral which be recieved by repayer\\n    /// @return destroyed Returns \\\"true\\\" if the position completely liquidated\\n    function liquidate(\\n        address asset,\\n        address owner,\\n        address repayer,\\n        uint stablecoinsToRepaymentE18,\\n        uint assetAmountEDecimal\\n    ) public nonReentrant checkpoint(asset, owner) onlyLiquidationAccess returns (bool destroyed) {\\n        // check if it can be liquidated\\n        require(vault.liquidationBlock(asset, owner) > 0, \\\"Unit Protocol: NOT_LIQUIDATING_POSITION\\\");\\n\\n        console.log(\\\"LIQUIDATE liquidate (assetAmount, repayment): \\\", assetAmountEDecimal, stablecoinsToRepaymentE18);\\n\\n        destroyed = vault.liquidate(asset, owner, repayer, assetAmountEDecimal, stablecoinsToRepaymentE18);\\n\\n        // not allowed to left some dust after partial closure the position\\n        _ensureMinCollateralThreshold(asset, msg.sender);\\n    }\\n\\n    /// @notice Finilizes the liquidation\\n    /// @param repayer The person who repaies by debt and transfers stablecoins to the foundation\\n    /// @param stablecoinsToRepaymentE18 The amount of stablecoins which will be burned as a debt repayment\\n    /// @param stablecoinsToFoundationE18 The amount of stablecoins which will be transfered to the foundation\\n    function repay(\\n        address repayer,\\n        uint stablecoinsToRepaymentE18,\\n        uint stablecoinsToFoundationE18\\n    ) public {\\n        console.log(\\\"REPAY repay (repayment, toFondation):\\\", stablecoinsToRepaymentE18, stablecoinsToFoundationE18);\\n\\n        // burn stablecoin from the vault\\n        vault.repay(repayer, stablecoinsToRepaymentE18, stablecoinsToFoundationE18);\\n    }\\n\\n    /// @notice Returns information about a liquidating position\\n    /// @dev TODO: should rename to getPositionInfo()\\n    /// @param asset The address of the main collateral token of a position\\n    /// @param owner The owner of the collateral\\n    /// @return liquidationBlock The block number when the liquidation was triggered\\n    /// @return collateralEDecimal The amount of collateral\\n    /// @return debtE18 The amount of borrowed stablecoins\\n    function getPosition(\\n        address asset,\\n        address owner\\n    ) external view returns (\\n        uint liquidationBlock,\\n        uint collateralEDecimal,\\n        uint debtE18\\n    ) {\\n        liquidationBlock = vault.liquidationBlock(asset, owner);\\n\\n        collateralEDecimal = vault.collateralsEDecimal(asset, owner);\\n        debtE18 = vault.debtsE18(asset, owner);\\n    }\\n\\n    /// @notice Returns information about a liquidating position\\n    /// @param asset The address of the main collateral token of a position\\n    /// @param owner The owner of the collateral\\n    /// @return liquidationBlock The block number when the liquidation was triggered\\n    function getLiquidationBlock(\\n        address asset,\\n        address owner\\n    ) external view returns (uint256) {\\n        return vault.liquidationBlock(asset, owner);\\n    }\\n\\n    // UI-helpers\\n\\n    // calculate liquidation price\\n    // can be used inside of _isLiquidatablePosition\\n    function liquidationPriceE18(\\n        address asset,\\n        address owner\\n    ) external view returns (uint) {\\n        uint debtE18 = vault.getTotalDebtE18(asset, owner);\\n        if (debtE18 == 0) return type(uint256).max;\\n\\n        // TODO initialCollateralRatioE18 or liquidationRatioE18?\\n        uint collateralLiqPriceE18 = debtE18 * 1e18 / (managerParameters.liquidationRatioE18(asset));\\n\\n        require(IERC20Metadata(asset).decimals() <= 18, \\\"Unit Protocol: NOT_SUPPORTED_DECIMALS\\\");\\n\\n        return collateralLiqPriceE18 * 1e18 / vault.collateralsEDecimal(asset, owner) / 10 ** (18 - IERC20Metadata(asset).decimals());\\n    }\\n\\n    /// @notice Returns Loan-To-Value in e18\\n    function getLTVE18(address asset, address owner) external view returns (uint256) {\\n        uint usdValueE18 = getCollateralUsdValueE18(asset, owner);\\n        if (usdValueE18 == 0) return 0;\\n\\n        uint debtE18 = vault.debtsE18(asset, owner);\\n\\n        return debtE18 * 1e18 / usdValueE18;\\n    }\\n\\n    /// @notice Returns Available to Borrow\\n    /// we have invariant: (collateralAmountEDecimal * collateralPriceE18 / 1e18) * initialCollateralRatioE18 <= debtE18\\n    /// Has similar logic like in _ensurePositionCollateralization\\n    function getAvailableToBorrowE18(address asset, address owner) external view returns (uint256) {\\n        uint usdValueE18 = getCollateralUsdValueE18(asset, owner);\\n        uint usdLimitE18 = usdValueE18 * managerParameters.initialCollateralRatioE18(asset) / 1e18;\\n\\n        uint totalDebtE18 = vault.getTotalDebtE18(asset, owner);\\n\\n        if (usdLimitE18 <= totalDebtE18) return 0;\\n\\n        return usdLimitE18 - totalDebtE18;\\n    }\\n\\n    /// @notice Returns Available to Withdraw\\n    /// Has similar invariant like in getAvailableToBorrowE18\\n    function getAvailableToWithdrawE18(address asset, address owner) external view returns (uint256) {\\n        uint256 collateralAmountEDecimal = vault.collateralsEDecimal(asset, owner);\\n        uint256 collateralPriceE18 = suOracle.getUsdPrice1e18(asset);\\n        if (collateralPriceE18 == 0) return 0;\\n        uint256 debtE18 = vault.debtsE18(asset, owner);\\n\\n        uint256 minCollateralAmountEDecimal = debtE18 * 1e18 / (collateralPriceE18 * managerParameters.initialCollateralRatioE18(asset));\\n\\n        return collateralAmountEDecimal - minCollateralAmountEDecimal;\\n    }\\n}\\n\",\"keccak256\":\"0xb70a0ff9ec84bd8b6cfa4841a77f0948ea7c91b094a6b29b899b37159abda838\",\"license\":\"BSL 1.1\"},\"contracts/lending/SuManagerParameters.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\n/*\\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\\n*/\\npragma solidity ^0.8.0;\\n\\nimport \\\"./SuVaultParameters.sol\\\";\\nimport \\\"../access-control/SuAccessControlSingleton.sol\\\";\\n\\n/**\\n * @title managerParameters\\n **/\\nabstract contract SuManagerParameters is SuAuthenticated {\\n    // map token to initial collateralization ratio; 1e18 = 100% ratio\\n    mapping(address => uint) public initialCollateralRatioE18;\\n\\n    // map token to liquidation ratio; 1e18 = 100% ratio\\n    mapping(address => uint) public liquidationRatioE18; // TODO: deprecated\\n\\n    // the minimum value of collateral in USD which allowed to be left after partial closure\\n    uint256 public minCollateralInUsdE18 = 5 * 1e18;\\n\\n    SuVaultParameters public vaultParameters;\\n\\n    constructor(address _vaultParameters) SuAuthenticated(address(SuAuthenticated(_vaultParameters).ACCESS_CONTROL_SINGLETON())) {\\n        vaultParameters = SuVaultParameters(_vaultParameters);\\n    }\\n\\n    function setCollateral(\\n        address asset,\\n        uint stabilityFeeValueE18,\\n        uint initialCollateralRatioValueE18,\\n        uint liquidationRatioValueE18,\\n        uint stablecoinLimitE18,\\n        uint minCollateralInUsdValueE18\\n    ) external onlyOwner {\\n        vaultParameters.setCollateral(asset, stabilityFeeValueE18, stablecoinLimitE18);\\n        setInitialCollateralRatioE18(asset, initialCollateralRatioValueE18);\\n        setLiquidationRatioE18(asset, liquidationRatioValueE18);\\n        setMinCollateralInUsdE18(minCollateralInUsdValueE18);\\n    }\\n\\n    /**\\n     * @notice Only manager is able to call this function\\n     * @dev Sets the initial collateral ratio\\n     * @param asset The address of the main collateral token\\n     * @param newValueE18 The collateralization ratio (1e18 = 100%)\\n     **/\\n    function setInitialCollateralRatioE18(address asset, uint256 newValueE18) public onlyOwner {\\n        require(newValueE18 != 0 && newValueE18 <= 1e18, \\\"Unit Protocol: INCORRECT_COLLATERALIZATION_VALUE\\\");\\n        initialCollateralRatioE18[asset] = newValueE18;\\n    }\\n\\n    /**\\n     * @notice Only manager is able to call this function\\n     * @dev Sets the liquidation ratio\\n     * @param asset The address of the main collateral token\\n     * @param newValueE18 The liquidation ratio (1e18 = 100%)\\n     **/\\n    function setLiquidationRatioE18(address asset, uint256 newValueE18) public onlyOwner {\\n        require(newValueE18 != 0 && newValueE18 >= initialCollateralRatioE18[asset], \\\"Unit Protocol: INCORRECT_COLLATERALIZATION_VALUE\\\");\\n        liquidationRatioE18[asset] = newValueE18;\\n    }\\n\\n    /**\\n     * @notice Only manager is able to call this function\\n     * @dev Sets a minimum value of collateral in USD which allowed to be left after partial closure\\n     * @param newValueE18 The minimum value of collateral in USD\\n     */\\n    function setMinCollateralInUsdE18(uint256 newValueE18) public onlyOwner {\\n        minCollateralInUsdE18 = newValueE18;\\n    }\\n}\\n\",\"keccak256\":\"0x0f10ab7103b7993da19b0206aaa52e0c8b3c4317f856ca833d354a153303f819\",\"license\":\"BSL 1.1\"},\"contracts/lending/SuVaultParameters.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\r\\n\\r\\nimport \\\"../access-control/SuAccessControlSingleton.sol\\\";\\r\\nimport \\\"../access-control/SuAuthenticated.sol\\\";\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// VaultParameters is Singleton for Access Control\\r\\n// this looks like configuration contract\\r\\n// what are the rules to determine these configs for each new allowed collateral?\\r\\n/// yes, and for all collaterals\\r\\n// is DAO allowed to choose parameters for existing collaterals?\\r\\n///\\r\\n// are there any limits to be enforced? i.e. fee cannot be over 100% percent\\r\\n/// No, but it's a good idea to have it\\r\\nabstract contract SuVaultParameters is SuAuthenticated {\\r\\n    // stability fee can be different for each collateral\\r\\n    /// yes\\r\\n    mapping(address => uint) public protocolStabilityFeeE18;\\r\\n\\r\\n    // map token to USDP mint limit\\r\\n    /// yes, limit for each collateral-assert\\r\\n    mapping(address => uint) public tokenDebtLimitE18;\\r\\n\\r\\n    // what is foundation, DAO?\\r\\n    /// Beneficiaty as VotingEscrow.vy\\r\\n    address public foundation;\\r\\n\\r\\n    address public immutable vault;\\r\\n\\r\\n    // creator of contract is manager, can it be the same as DAO or can it be removed later?\\r\\n    /// YES\\r\\n    // how can vault address be known at this moment?\\r\\n    /// Precult based on CREATE spec\\r\\n    // can be created another function to set vault address once deployed?\\r\\n    /// Yes, possibly with some logic change\\r\\n    constructor(address _authControl, address payable _vault, address _foundation)\\r\\n        SuAuthenticated(_authControl)\\r\\n    {\\r\\n        require(_vault != address(0), \\\"Unit Protocol: ZERO_ADDRESS\\\");\\r\\n        require(_foundation != address(0), \\\"Unit Protocol: ZERO_ADDRESS\\\");\\r\\n\\r\\n        vault = _vault;\\r\\n\\r\\n//        ISuAccessControl(_authControl).setVault(_vault, true);\\r\\n//        ISuAccessControl(_authControl).setDAO(msg.sender, true);\\r\\n\\r\\n        foundation = _foundation;\\r\\n    }\\r\\n\\r\\n    // similar function can be added to setVault\\r\\n    function setFoundation(address newFoundation) external onlyOwner {\\r\\n        require(newFoundation != address(0), \\\"Unit Protocol: ZERO_ADDRESS\\\");\\r\\n        foundation = newFoundation;\\r\\n    }\\r\\n\\r\\n    // manager is allowed to add new collaterals and modify existing ones\\r\\n    // I think creating new collaterals and modifying existing ones should be separate functions\\r\\n    /// Yes, for sercurity reason, it's possible to add events for creating and edititing\\r\\n    // also different event should be emitted NewCollateral UpdatedCollateral accordingly\\r\\n    // those events can be handled on frontend to notify user about any changes in rules\\r\\n    /// Not sure it makes sense to split into create/edit functions\\r\\n    function setCollateral(\\r\\n        address asset,\\r\\n        uint stabilityFeeValueE18,\\r\\n        uint stablecoinLimitE18\\r\\n    ) external onlyOwner {\\r\\n        // stability fee should be validated in range, what is stability fee should be described here?\\r\\n        setStabilityFeeE18(asset, stabilityFeeValueE18);\\r\\n        // why debt limit for collateral is necessary? to manage risks in case of collateral failure?\\r\\n        setTokenDebtLimitE18(asset, stablecoinLimitE18);\\r\\n    }\\r\\n\\r\\n    // stability fee is measured as the number of coins per year or percentage?\\r\\n    // this should be clarified in argument name i.e. stabilityFeePercentageYearly\\r\\n    /// No, it's APR ( per year, see calculateFee) percentrage, fee percentage.\\r\\n    /// YES, self-documented code-style is the best practice.\\r\\n    function setStabilityFeeE18(address asset, uint newValue) public onlyOwner {\\r\\n        protocolStabilityFeeE18[asset] = newValue;\\r\\n    }\\r\\n\\r\\n\\r\\n    // debt limit can be changed for any collateral along with liquidation and stability fees\\r\\n    // seems like managers have too much power - that can be dangerous given multiple managers?\\r\\n    /// Yes, application of  principle of least priviledge needed\\r\\n    function setTokenDebtLimitE18(address asset, uint limit) public onlyOwner {\\r\\n        tokenDebtLimitE18[asset] = limit;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xafbd13c21b374b60d9afed68b298bcee5763164f72c91744d3b38e9d90a33dea\",\"license\":\"BSL 1.1\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610100604052674563918244f400006003553480156200001e57600080fd5b5060405162004011380380620040118339810160408190526200004191620001f8565b82806001600160a01b03166303ee9f226040518163ffffffff1660e01b815260040160206040518083038186803b1580156200007c57600080fd5b505afa15801562000091573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000b791906200024b565b600160005560601b6001600160601b031916608052600480546001600160a01b0319166001600160a01b03929092169190911790553080158015906200010557506001600160a01b03821615155b620001575760405162461bcd60e51b815260206004820152601b60248201527f556e69742050726f746f636f6c3a20494e56414c49445f41524753000000000060448201526064015b60405180910390fd5b6001600160a01b038316620001af5760405162461bcd60e51b815260206004820152601760248201527f494e56414c49445f415247533a2053555f4f5241434c4500000000000000000060448201526064016200014e565b600580546001600160a01b039094166001600160a01b0319909416939093179092556001600160601b0319606092831b811660c05292821b831660a052901b1660e0526200028a565b6000806000606084860312156200020d578283fd5b83516200021a8162000271565b60208501519093506200022d8162000271565b6040850151909250620002408162000271565b809150509250925092565b6000602082840312156200025d578081fd5b81516200026a8162000271565b9392505050565b6001600160a01b03811681146200028757600080fd5b50565b60805160601c60a05160601c60c05160601c60e05160601c613bea62000427600039600081816104de0152818161143b015281816119d501528181612848015261304601526000818161030801528181610b1c01528181610d5601528181611c48015281816131bf0152818161325f0152818161339301526134ac0152600081816106e5015281816107570152818161085e0152818161091b01528181610a5d01528181610bd901528181610ca801528181610f70015281816111a9015281816112e2015281816113ba015281816117ed0152818161192601528181611a6e01528181611ba701528181611d4f01528181612104015281816121aa015281816122500152818161235a0152818161245501528181612527015281816125e30152818161268e0152818161276e015281816129c901528181612b2801528181612bc201528181612e1301528181612ea601528181612f48015281816130da01526135680152600081816102450152818161109f015281816114c7015281816116e301528181611dcc01528181611f5b01526128cf0152613bea6000f3fe6080604052600436106101dc5760003560e01c80639077beac11610102578063cf13340411610095578063e6bc046111610064578063e6bc046114610659578063ea36380a14610686578063f3f481df146106a6578063fbfa77cf146106d357600080fd5b8063cf133404146105b1578063d4796d12146105d1578063d5391393146105f1578063dc97e84e1461062557600080fd5b8063ada9e5ad116100d1578063ada9e5ad14610520578063b33dc19014610540578063bb497dcc1461057b578063bbdc95311461059157600080fd5b80639077beac1461048c578063a20f9cb3146104ac578063ab2a2a82146104cc578063aca345ee1461050057600080fd5b80634c9a55501161017a5780636f16cbf7116101495780636f16cbf71461040a5780636f70e66f1461042c57806376b5070c1461044c5780638cd2e0c71461046c57600080fd5b80634c9a55501461038a57806356d8be56146103aa5780636338e4d7146103ca5780636bf12d5f146103ea57600080fd5b80631af3be18116101b65780631af3be18146102f65780631c656c391461032a578063392c0ce71461034a5780634030815e1461036a57600080fd5b806303ee9f2214610233578063134a02dd1461028457806314c376dc146102b457600080fd5b3661022e5760405162461bcd60e51b815260206004820152601960248201527f556e69742050726f746f636f6c3a20524553545249435445440000000000000060448201526064015b60405180910390fd5b600080fd5b34801561023f57600080fd5b506102677f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561029057600080fd5b506102a461029f366004613726565b610707565b604051901515815260200161027b565b3480156102c057600080fd5b506102e87fe965846df3dd5b1dfa65f58e31477079e90140e0908b6dd31b5aead5a57cf36581565b60405190815260200161027b565b34801561030257600080fd5b506102677f000000000000000000000000000000000000000000000000000000000000000081565b34801561033657600080fd5b506102e8610345366004613726565b61072b565b34801561035657600080fd5b506102e8610365366004613726565b610816565b34801561037657600080fd5b506102e8610385366004613726565b6108ef565b34801561039657600080fd5b506102e86103a5366004613726565b610a33565b3480156103b657600080fd5b506102e86103c5366004613726565b610ae0565b3480156103d657600080fd5b506102e86103e5366004613726565b610c7c565b3480156103f657600080fd5b506102a46104053660046137ac565b611006565b34801561041657600080fd5b5061042a61042536600461380a565b6114ab565b005b34801561043857600080fd5b506102a4610447366004613758565b61164a565b34801561045857600080fd5b506102e8610467366004613726565b611a42565b34801561047857600080fd5b5061042a610487366004613833565b611cff565b34801561049857600080fd5b5061042a6104a736600461380a565b611db0565b3480156104b857600080fd5b50600554610267906001600160a01b031681565b3480156104d857600080fd5b506102677f000000000000000000000000000000000000000000000000000000000000000081565b34801561050c57600080fd5b50600454610267906001600160a01b031681565b34801561052c57600080fd5b5061042a61053b366004613865565b611f3f565b34801561054c57600080fd5b5061056061055b366004613726565b6120d6565b6040805193845260208401929092529082015260600161027b565b34801561058757600080fd5b506102e860035481565b34801561059d57600080fd5b506102e86105ac366004613833565b6122d5565b3480156105bd57600080fd5b5061042a6105cc3660046138ce565b6128b3565b3480156105dd57600080fd5b5061042a6105ec366004613726565b6129a2565b3480156105fd57600080fd5b506102e87f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b34801561063157600080fd5b506102e87f9a9aef7c1247d5fc769b0185c052913e39673da29a880317dfd20ebf86f26a4981565b34801561066557600080fd5b506102e861067436600461370c565b60026020526000908152604090205481565b34801561069257600080fd5b5061042a6106a1366004613833565b612c5d565b3480156106b257600080fd5b506102e86106c136600461370c565b60016020526000908152604090205481565b3480156106df57600080fd5b506102677f000000000000000000000000000000000000000000000000000000000000000081565b60008061071484846108ef565b90506107218484836130ae565b9150505b92915050565b60405163a6ea8b8760e01b81526001600160a01b038381166004830152828116602483015260009182917f0000000000000000000000000000000000000000000000000000000000000000169063a6ea8b879060440160206040518083038186803b15801561079957600080fd5b505afa1580156107ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d191906138e6565b9050806107e2576000915050610725565b60006107ee85856108ef565b90508061080383670de0b6b3a7640000613acc565b61080d91906139be565b95945050505050565b60008061082384846108ef565b905080610834576000915050610725565b604051636aee125d60e11b81526001600160a01b03858116600483015284811660248301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063d5dc24ba9060440160206040518083038186803b1580156108a257600080fd5b505afa1580156108b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108da91906138e6565b90508161080382670de0b6b3a7640000613acc565b6040516334e3b77960e01b81526001600160a01b038381166004830152828116602483015260009182917f000000000000000000000000000000000000000000000000000000000000000016906334e3b7799060440160206040518083038186803b15801561095d57600080fd5b505afa158015610971573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099591906138e6565b6005546040516306addfb360e31b81526001600160a01b038781166004830152929350670de0b6b3a7640000928492169063356efd989060240160206040518083038186803b1580156109e757600080fd5b505afa1580156109fb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1f91906138e6565b610a299190613acc565b61072191906139be565b604051631ce4b4a760e01b81526001600160a01b03838116600483015282811660248301526000917f000000000000000000000000000000000000000000000000000000000000000090911690631ce4b4a79060440160206040518083038186803b158015610aa157600080fd5b505afa158015610ab5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad991906138e6565b9392505050565b600080610aed84846108ef565b60405163f3f481df60e01b81526001600160a01b038681166004830152919250600091670de0b6b3a7640000917f00000000000000000000000000000000000000000000000000000000000000009091169063f3f481df9060240160206040518083038186803b158015610b6057600080fd5b505afa158015610b74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9891906138e6565b610ba29084613acc565b610bac91906139be565b60405163a6ea8b8760e01b81526001600160a01b03878116600483015286811660248301529192506000917f0000000000000000000000000000000000000000000000000000000000000000169063a6ea8b879060440160206040518083038186803b158015610c1b57600080fd5b505afa158015610c2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5391906138e6565b9050808211610c685760009350505050610725565b610c728183613aeb565b9695505050505050565b60405163a6ea8b8760e01b81526001600160a01b038381166004830152828116602483015260009182917f0000000000000000000000000000000000000000000000000000000000000000169063a6ea8b879060440160206040518083038186803b158015610cea57600080fd5b505afa158015610cfe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2291906138e6565b905080610d3457600019915050610725565b60405163e6bc046160e01b81526001600160a01b0385811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063e6bc04619060240160206040518083038186803b158015610d9a57600080fd5b505afa158015610dae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd291906138e6565b610de483670de0b6b3a7640000613acc565b610dee91906139be565b90506012856001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610e2b57600080fd5b505afa158015610e3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6391906138fe565b60ff161115610ec25760405162461bcd60e51b815260206004820152602560248201527f556e69742050726f746f636f6c3a204e4f545f535550504f525445445f444543604482015264494d414c5360d81b6064820152608401610225565b846001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610efb57600080fd5b505afa158015610f0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3391906138fe565b610f3e906012613b02565b610f4990600a613a21565b6040516334e3b77960e01b81526001600160a01b03878116600483015286811660248301527f000000000000000000000000000000000000000000000000000000000000000016906334e3b7799060440160206040518083038186803b158015610fb257600080fd5b505afa158015610fc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fea91906138e6565b610ffc83670de0b6b3a7640000613acc565b61080391906139be565b60006002600054141561105b5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610225565b6002600055604051632474521560e21b81527f9a9aef7c1247d5fc769b0185c052913e39673da29a880317dfd20ebf86f26a496004820152336024820152879087907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d148549060440160206040518083038186803b1580156110e957600080fd5b505afa1580156110fd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112191906138ae565b61117f5760405162461bcd60e51b815260206004820152602960248201527f5375417574683a206f6e6c794c69717569646174696f6e416363657373204155604482015268151217d1905253115160ba1b6064820152608401610225565b604051631ce4b4a760e01b81526001600160a01b038a8116600483015289811660248301526000917f000000000000000000000000000000000000000000000000000000000000000090911690631ce4b4a79060440160206040518083038186803b1580156111ed57600080fd5b505afa158015611201573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122591906138e6565b116112825760405162461bcd60e51b815260206004820152602760248201527f556e69742050726f746f636f6c3a204e4f545f4c49515549444154494e475f5060448201526627a9a4aa24a7a760c91b6064820152608401610225565b6112a56040518060600160405280602e8152602001613b62602e91398588613301565b604051636f70e66f60e01b81526001600160a01b038a811660048301528981166024830152888116604483015260648201869052608482018890527f00000000000000000000000000000000000000000000000000000000000000001690636f70e66f9060a401602060405180830381600087803b15801561132657600080fd5b505af115801561133a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061135e91906138ae565b925061136a893361337b565b61138d604051806060016040528060268152602001613b3c602691398787613301565b604051638cd2e0c760e01b81526001600160a01b03888116600483015260248201889052604482018790527f00000000000000000000000000000000000000000000000000000000000000001690638cd2e0c790606401600060405180830381600087803b1580156113fe57600080fd5b505af1158015611412573d6000803e3d6000fd5b5050604051632ed56dff60e21b81526001600160a01b03858116600483015284811660248301527f000000000000000000000000000000000000000000000000000000000000000016925063bb55b7fc9150604401600060405180830381600087803b15801561148157600080fd5b505af1158015611495573d6000803e3d6000fd5b5050600160005550929998505050505050505050565b604051632474521560e21b8152600060048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d148549060440160206040518083038186803b15801561151157600080fd5b505afa158015611525573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154991906138ae565b6115955760405162461bcd60e51b815260206004820152601d60248201527f5375417574683a206f6e6c794f776e657220415554485f4641494c45440000006044820152606401610225565b80158015906115bc57506001600160a01b0382166000908152600160205260409020548110155b61162e5760405162461bcd60e51b815260206004820152603060248201527f556e69742050726f746f636f6c3a20494e434f52524543545f434f4c4c41544560448201527f52414c495a4154494f4e5f56414c5545000000000000000000000000000000006064820152608401610225565b6001600160a01b03909116600090815260026020526040902055565b60006002600054141561169f5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610225565b6002600055604051632474521560e21b81527f9a9aef7c1247d5fc769b0185c052913e39673da29a880317dfd20ebf86f26a496004820152336024820152869086907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d148549060440160206040518083038186803b15801561172d57600080fd5b505afa158015611741573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061176591906138ae565b6117c35760405162461bcd60e51b815260206004820152602960248201527f5375417574683a206f6e6c794c69717569646174696f6e416363657373204155604482015268151217d1905253115160ba1b6064820152608401610225565b604051631ce4b4a760e01b81526001600160a01b03898116600483015288811660248301526000917f000000000000000000000000000000000000000000000000000000000000000090911690631ce4b4a79060440160206040518083038186803b15801561183157600080fd5b505afa158015611845573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061186991906138e6565b116118c65760405162461bcd60e51b815260206004820152602760248201527f556e69742050726f746f636f6c3a204e4f545f4c49515549444154494e475f5060448201526627a9a4aa24a7a760c91b6064820152608401610225565b6118e96040518060600160405280602e8152602001613b62602e91398587613301565b604051636f70e66f60e01b81526001600160a01b0389811660048301528881166024830152878116604483015260648201869052608482018790527f00000000000000000000000000000000000000000000000000000000000000001690636f70e66f9060a401602060405180830381600087803b15801561196a57600080fd5b505af115801561197e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119a291906138ae565b92506119ae883361337b565b604051632ed56dff60e21b81526001600160a01b03838116600483015282811660248301527f0000000000000000000000000000000000000000000000000000000000000000169063bb55b7fc90604401600060405180830381600087803b158015611a1957600080fd5b505af1158015611a2d573d6000803e3d6000fd5b50506001600055509298975050505050505050565b6040516334e3b77960e01b81526001600160a01b038381166004830152828116602483015260009182917f000000000000000000000000000000000000000000000000000000000000000016906334e3b7799060440160206040518083038186803b158015611ab057600080fd5b505afa158015611ac4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ae891906138e6565b6005546040516306addfb360e31b81526001600160a01b0387811660048301529293506000929091169063356efd989060240160206040518083038186803b158015611b3357600080fd5b505afa158015611b47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b6b91906138e6565b905080611b7d57600092505050610725565b604051636aee125d60e11b81526001600160a01b03868116600483015285811660248301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063d5dc24ba9060440160206040518083038186803b158015611beb57600080fd5b505afa158015611bff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c2391906138e6565b60405163f3f481df60e01b81526001600160a01b0388811660048301529192506000917f0000000000000000000000000000000000000000000000000000000000000000169063f3f481df9060240160206040518083038186803b158015611c8a57600080fd5b505afa158015611c9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cc291906138e6565b611ccc9084613acc565b611cde83670de0b6b3a7640000613acc565b611ce891906139be565b9050611cf48185613aeb565b979650505050505050565b611d22604051806060016040528060258152602001613b90602591398383613301565b604051638cd2e0c760e01b81526001600160a01b03848116600483015260248201849052604482018390527f00000000000000000000000000000000000000000000000000000000000000001690638cd2e0c790606401600060405180830381600087803b158015611d9357600080fd5b505af1158015611da7573d6000803e3d6000fd5b50505050505050565b604051632474521560e21b8152600060048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d148549060440160206040518083038186803b158015611e1657600080fd5b505afa158015611e2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e4e91906138ae565b611e9a5760405162461bcd60e51b815260206004820152601d60248201527f5375417574683a206f6e6c794f776e657220415554485f4641494c45440000006044820152606401610225565b8015801590611eb15750670de0b6b3a76400008111155b611f235760405162461bcd60e51b815260206004820152603060248201527f556e69742050726f746f636f6c3a20494e434f52524543545f434f4c4c41544560448201527f52414c495a4154494f4e5f56414c5545000000000000000000000000000000006064820152608401610225565b6001600160a01b03909116600090815260016020526040902055565b604051632474521560e21b8152600060048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d148549060440160206040518083038186803b158015611fa557600080fd5b505afa158015611fb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fdd91906138ae565b6120295760405162461bcd60e51b815260206004820152601d60248201527f5375417574683a206f6e6c794f776e657220415554485f4641494c45440000006044820152606401610225565b600480546040517f9fea3e070000000000000000000000000000000000000000000000000000000081526001600160a01b03898116938201939093526024810188905260448101859052911690639fea3e0790606401600060405180830381600087803b15801561209957600080fd5b505af11580156120ad573d6000803e3d6000fd5b505050506120bb8685611db0565b6120c586846114ab565b6120ce816128b3565b505050505050565b604051631ce4b4a760e01b81526001600160a01b0383811660048301528281166024830152600091829182917f000000000000000000000000000000000000000000000000000000000000000090911690631ce4b4a79060440160206040518083038186803b15801561214857600080fd5b505afa15801561215c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061218091906138e6565b6040516334e3b77960e01b81526001600160a01b03878116600483015286811660248301529194507f0000000000000000000000000000000000000000000000000000000000000000909116906334e3b7799060440160206040518083038186803b1580156121ee57600080fd5b505afa158015612202573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061222691906138e6565b604051636aee125d60e11b81526001600160a01b03878116600483015286811660248301529193507f00000000000000000000000000000000000000000000000000000000000000009091169063d5dc24ba9060440160206040518083038186803b15801561229457600080fd5b505afa1580156122a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122cc91906138e6565b90509250925092565b60006002600054141561232a5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610225565b6002600055604051631ce4b4a760e01b81526001600160a01b0380861660048301523360248301819052869290917f00000000000000000000000000000000000000000000000000000000000000001690631ce4b4a79060440160206040518083038186803b15801561239c57600080fd5b505afa1580156123b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123d491906138e6565b1561242d5760405162461bcd60e51b815260206004820152602360248201527f556e69742050726f746f636f6c3a204c49515549444154494e475f504f53495460448201526224a7a760e91b6064820152608401610225565b604051636aee125d60e11b81526001600160a01b0387811660048301523360248301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063d5dc24ba9060440160206040518083038186803b15801561249957600080fd5b505afa1580156124ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124d191906138e6565b9050808511156124df578094505b6040517f34c188b00000000000000000000000000000000000000000000000000000000081526001600160a01b038881166004830152336024830152604482018790526000917f0000000000000000000000000000000000000000000000000000000000000000909116906334c188b09060640160206040518083038186803b15801561256b57600080fd5b505afa15801561257f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125a391906138e6565b604051636f70e66f60e01b81526001600160a01b038a8116600483015233602483018190526044830152606482018a9052608482018990529192506000917f00000000000000000000000000000000000000000000000000000000000000001690636f70e66f9060a401602060405180830381600087803b15801561262757600080fd5b505af115801561263b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061265f91906138ae565b905061266b893361337b565b604051638cd2e0c760e01b815233600482015260248101889052604481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690638cd2e0c790606401600060405180830381600087803b1580156126da57600080fd5b505af11580156126ee573d6000803e3d6000fd5b50505050801561274957604080518981526020810189905233916001600160a01b038c16917f4bd704811146c45cfd9276261817324e0acc0b5eaa458b21a0740367dc37cdb8910160405180910390a3869550505050612821565b60405163c640752d60e01b81526001600160a01b038a811660048301523360248301527f0000000000000000000000000000000000000000000000000000000000000000169063c640752d90604401600060405180830381600087803b1580156127b257600080fd5b505af11580156127c6573d6000803e3d6000fd5b505050506127d48933613471565b604080518981526020810189905233916001600160a01b038c16917fa702ae6024e8b4c2b0eb162b1453dacb93cf6922f5a2d7236faed898c21148f8910160405180910390a38695505050505b604051632ed56dff60e21b81526001600160a01b03838116600483015282811660248301527f0000000000000000000000000000000000000000000000000000000000000000169063bb55b7fc90604401600060405180830381600087803b15801561288c57600080fd5b505af11580156128a0573d6000803e3d6000fd5b5050600160005550929695505050505050565b604051632474521560e21b8152600060048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d148549060440160206040518083038186803b15801561291957600080fd5b505afa15801561292d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061295191906138ae565b61299d5760405162461bcd60e51b815260206004820152601d60248201527f5375417574683a206f6e6c794f776e657220415554485f4641494c45440000006044820152606401610225565b600355565b604051631ce4b4a760e01b81526001600160a01b03838116600483015282811660248301527f00000000000000000000000000000000000000000000000000000000000000001690631ce4b4a79060440160206040518083038186803b158015612a0b57600080fd5b505afa158015612a1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a4391906138e6565b15612a9c5760405162461bcd60e51b815260206004820152602360248201527f556e69742050726f746f636f6c3a204c49515549444154494e475f504f53495460448201526224a7a760e91b6064820152608401610225565b6000612aa883836108ef565b9050612ab58383836130ae565b612b015760405162461bcd60e51b815260206004820152601c60248201527f556e69742050726f746f636f6c3a20534146455f504f534954494f4e000000006044820152606401610225565b60405163c640752d60e01b81526001600160a01b03848116600483015283811660248301527f0000000000000000000000000000000000000000000000000000000000000000169063c640752d90604401600060405180830381600087803b158015612b6c57600080fd5b505af1158015612b80573d6000803e3d6000fd5b50506040517fd4796d120000000000000000000000000000000000000000000000000000000081526001600160a01b03868116600483015285811660248301527f000000000000000000000000000000000000000000000000000000000000000016925063d4796d129150604401600060405180830381600087803b158015612c0857600080fd5b505af1158015612c1c573d6000803e3d6000fd5b50506040516001600160a01b038086169350861691507f5b79a897d30813a62a1f95ba180d3320d3701d96605708b81105e00719a069e490600090a3505050565b60026000541415612cb05760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610225565b6002600055823382151580612cc457508315155b612d105760405162461bcd60e51b815260206004820152601960248201527f556e69742050726f746f636f6c3a205553454c4553535f5458000000000000006044820152606401610225565b6012856001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015612d4b57600080fd5b505afa158015612d5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d8391906138fe565b60ff161115612de25760405162461bcd60e51b815260206004820152602560248201527f556e69742050726f746f636f6c3a204e4f545f535550504f525445445f444543604482015264494d414c5360d81b6064820152608401610225565b82612e7457604051638340f54960e01b81526001600160a01b038681166004830152336024830152604482018690527f00000000000000000000000000000000000000000000000000000000000000001690638340f54990606401600060405180830381600087803b158015612e5757600080fd5b505af1158015612e6b573d6000803e3d6000fd5b50505050612fcf565b8315612f0357604051638340f54960e01b81526001600160a01b038681166004830152336024830152604482018690527f00000000000000000000000000000000000000000000000000000000000000001690638340f54990606401600060405180830381600087803b158015612eea57600080fd5b505af1158015612efe573d6000803e3d6000fd5b505050505b6040517f5224372c0000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152336024830152604482018590527f00000000000000000000000000000000000000000000000000000000000000001690635224372c90606401602060405180830381600087803b158015612f8c57600080fd5b505af1158015612fa0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fc491906138e6565b50612fcf8533613471565b612fd9853361337b565b604080518581526020810185905233916001600160a01b038816917f6423b6056e64b3b29cb2d342362b47c26fa8d6877da27ea152354060df19b9bc910160405180910390a3604051632ed56dff60e21b81526001600160a01b03838116600483015282811660248301527f0000000000000000000000000000000000000000000000000000000000000000169063bb55b7fc90604401600060405180830381600087803b15801561308a57600080fd5b505af115801561309e573d6000803e3d6000fd5b5050600160005550505050505050565b60405163a6ea8b8760e01b81526001600160a01b038481166004830152838116602483015260009182917f0000000000000000000000000000000000000000000000000000000000000000169063a6ea8b879060440160206040518083038186803b15801561311c57600080fd5b505afa158015613130573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061315491906138e6565b905080613165576000915050610ad9565b604080518082018252600581527f4c494d49540000000000000000000000000000000000000000000000000000006020820152905163e6bc046160e01b81526001600160a01b0387811660048301526132409291849187917f00000000000000000000000000000000000000000000000000000000000000009091169063e6bc04619060240160206040518083038186803b15801561320357600080fd5b505afa158015613217573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061323b91906138e6565b61365c565b60405163e6bc046160e01b81526001600160a01b0386811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063e6bc04619060240160206040518083038186803b1580156132a157600080fd5b505afa1580156132b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132d991906138e6565b836132ec83670de0b6b3a7640000613acc565b6132f691906139be565b101595945050505050565b6133768383836040516024016133199392919061396a565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f969cdd03000000000000000000000000000000000000000000000000000000001790526136cf565b505050565b600061338783836108ef565b905080158061342557507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bb497dcc6040518163ffffffff1660e01b815260040160206040518083038186803b1580156133ea57600080fd5b505afa1580156133fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061342291906138e6565b81115b6133765760405162461bcd60e51b815260206004820152601f60248201527f556e69742050726f746f636f6c3a20534d414c4c5f434f4c4c41544552414c006044820152606401610225565b600061347d83836108ef565b60405163f3f481df60e01b81526001600160a01b038581166004830152919250600091670de0b6b3a7640000917f00000000000000000000000000000000000000000000000000000000000000009091169063f3f481df9060240160206040518083038186803b1580156134f057600080fd5b505afa158015613504573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061352891906138e6565b6135329084613acc565b61353c91906139be565b60405163a6ea8b8760e01b81526001600160a01b038681166004830152858116602483015291925082917f0000000000000000000000000000000000000000000000000000000000000000169063a6ea8b879060440160206040518083038186803b1580156135aa57600080fd5b505afa1580156135be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135e291906138e6565b11156136565760405162461bcd60e51b815260206004820152602260248201527f556e69742050726f746f636f6c3a20554e444552434f4c4c41544552414c495a60448201527f45440000000000000000000000000000000000000000000000000000000000006064820152608401610225565b50505050565b61365684848484604051602401613676949392919061398f565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f08ee5666000000000000000000000000000000000000000000000000000000001790525b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b80356001600160a01b038116811461370757600080fd5b919050565b60006020828403121561371d578081fd5b610ad9826136f0565b60008060408385031215613738578081fd5b613741836136f0565b915061374f602084016136f0565b90509250929050565b600080600080600060a0868803121561376f578081fd5b613778866136f0565b9450613786602087016136f0565b9350613794604087016136f0565b94979396509394606081013594506080013592915050565b60008060008060008060c087890312156137c4578081fd5b6137cd876136f0565b95506137db602088016136f0565b94506137e9604088016136f0565b9350606087013592506080870135915060a087013590509295509295509295565b6000806040838503121561381c578182fd5b613825836136f0565b946020939093013593505050565b600080600060608486031215613847578283fd5b613850846136f0565b95602085013595506040909401359392505050565b60008060008060008060c0878903121561387d578182fd5b613886876136f0565b9860208801359850604088013597606081013597506080810135965060a00135945092505050565b6000602082840312156138bf578081fd5b81518015158114610ad9578182fd5b6000602082840312156138df578081fd5b5035919050565b6000602082840312156138f7578081fd5b5051919050565b60006020828403121561390f578081fd5b815160ff81168114610ad9578182fd5b60008151808452815b8181101561394457602081850181015186830182015201613928565b818111156139555782602083870101525b50601f01601f19169290920160200192915050565b60608152600061397d606083018661391f565b60208301949094525060400152919050565b6080815260006139a2608083018761391f565b6020830195909552506040810192909252606090910152919050565b6000826139d957634e487b7160e01b81526012600452602481fd5b500490565b600181815b80851115613a195781600019048211156139ff576139ff613b25565b80851615613a0c57918102915b93841c93908002906139e3565b509250929050565b6000610ad960ff841683600082613a3a57506001610725565b81613a4757506000610725565b8160018114613a5d5760028114613a6757613a83565b6001915050610725565b60ff841115613a7857613a78613b25565b50506001821b610725565b5060208310610133831016604e8410600b8410161715613aa6575081810a610725565b613ab083836139de565b8060001904821115613ac457613ac4613b25565b029392505050565b6000816000190483118215151615613ae657613ae6613b25565b500290565b600082821015613afd57613afd613b25565b500390565b600060ff821660ff841680821015613b1c57613b1c613b25565b90039392505050565b634e487b7160e01b600052601160045260246000fdfe5245504159207265706179202872657061796d656e742c20657863657373416e64466565293a4c4951554944415445206c697175696461746520286173736574416d6f756e742c2072657061796d656e74293a205245504159207265706179202872657061796d656e742c20746f466f6e646174696f6e293aa26469706673582212205cf6ea7180a00a8370d1758e987c1e6c8f87f0d01739abedc8174c952d692c8964736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106101dc5760003560e01c80639077beac11610102578063cf13340411610095578063e6bc046111610064578063e6bc046114610659578063ea36380a14610686578063f3f481df146106a6578063fbfa77cf146106d357600080fd5b8063cf133404146105b1578063d4796d12146105d1578063d5391393146105f1578063dc97e84e1461062557600080fd5b8063ada9e5ad116100d1578063ada9e5ad14610520578063b33dc19014610540578063bb497dcc1461057b578063bbdc95311461059157600080fd5b80639077beac1461048c578063a20f9cb3146104ac578063ab2a2a82146104cc578063aca345ee1461050057600080fd5b80634c9a55501161017a5780636f16cbf7116101495780636f16cbf71461040a5780636f70e66f1461042c57806376b5070c1461044c5780638cd2e0c71461046c57600080fd5b80634c9a55501461038a57806356d8be56146103aa5780636338e4d7146103ca5780636bf12d5f146103ea57600080fd5b80631af3be18116101b65780631af3be18146102f65780631c656c391461032a578063392c0ce71461034a5780634030815e1461036a57600080fd5b806303ee9f2214610233578063134a02dd1461028457806314c376dc146102b457600080fd5b3661022e5760405162461bcd60e51b815260206004820152601960248201527f556e69742050726f746f636f6c3a20524553545249435445440000000000000060448201526064015b60405180910390fd5b600080fd5b34801561023f57600080fd5b506102677f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561029057600080fd5b506102a461029f366004613726565b610707565b604051901515815260200161027b565b3480156102c057600080fd5b506102e87fe965846df3dd5b1dfa65f58e31477079e90140e0908b6dd31b5aead5a57cf36581565b60405190815260200161027b565b34801561030257600080fd5b506102677f000000000000000000000000000000000000000000000000000000000000000081565b34801561033657600080fd5b506102e8610345366004613726565b61072b565b34801561035657600080fd5b506102e8610365366004613726565b610816565b34801561037657600080fd5b506102e8610385366004613726565b6108ef565b34801561039657600080fd5b506102e86103a5366004613726565b610a33565b3480156103b657600080fd5b506102e86103c5366004613726565b610ae0565b3480156103d657600080fd5b506102e86103e5366004613726565b610c7c565b3480156103f657600080fd5b506102a46104053660046137ac565b611006565b34801561041657600080fd5b5061042a61042536600461380a565b6114ab565b005b34801561043857600080fd5b506102a4610447366004613758565b61164a565b34801561045857600080fd5b506102e8610467366004613726565b611a42565b34801561047857600080fd5b5061042a610487366004613833565b611cff565b34801561049857600080fd5b5061042a6104a736600461380a565b611db0565b3480156104b857600080fd5b50600554610267906001600160a01b031681565b3480156104d857600080fd5b506102677f000000000000000000000000000000000000000000000000000000000000000081565b34801561050c57600080fd5b50600454610267906001600160a01b031681565b34801561052c57600080fd5b5061042a61053b366004613865565b611f3f565b34801561054c57600080fd5b5061056061055b366004613726565b6120d6565b6040805193845260208401929092529082015260600161027b565b34801561058757600080fd5b506102e860035481565b34801561059d57600080fd5b506102e86105ac366004613833565b6122d5565b3480156105bd57600080fd5b5061042a6105cc3660046138ce565b6128b3565b3480156105dd57600080fd5b5061042a6105ec366004613726565b6129a2565b3480156105fd57600080fd5b506102e87f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b34801561063157600080fd5b506102e87f9a9aef7c1247d5fc769b0185c052913e39673da29a880317dfd20ebf86f26a4981565b34801561066557600080fd5b506102e861067436600461370c565b60026020526000908152604090205481565b34801561069257600080fd5b5061042a6106a1366004613833565b612c5d565b3480156106b257600080fd5b506102e86106c136600461370c565b60016020526000908152604090205481565b3480156106df57600080fd5b506102677f000000000000000000000000000000000000000000000000000000000000000081565b60008061071484846108ef565b90506107218484836130ae565b9150505b92915050565b60405163a6ea8b8760e01b81526001600160a01b038381166004830152828116602483015260009182917f0000000000000000000000000000000000000000000000000000000000000000169063a6ea8b879060440160206040518083038186803b15801561079957600080fd5b505afa1580156107ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d191906138e6565b9050806107e2576000915050610725565b60006107ee85856108ef565b90508061080383670de0b6b3a7640000613acc565b61080d91906139be565b95945050505050565b60008061082384846108ef565b905080610834576000915050610725565b604051636aee125d60e11b81526001600160a01b03858116600483015284811660248301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063d5dc24ba9060440160206040518083038186803b1580156108a257600080fd5b505afa1580156108b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108da91906138e6565b90508161080382670de0b6b3a7640000613acc565b6040516334e3b77960e01b81526001600160a01b038381166004830152828116602483015260009182917f000000000000000000000000000000000000000000000000000000000000000016906334e3b7799060440160206040518083038186803b15801561095d57600080fd5b505afa158015610971573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099591906138e6565b6005546040516306addfb360e31b81526001600160a01b038781166004830152929350670de0b6b3a7640000928492169063356efd989060240160206040518083038186803b1580156109e757600080fd5b505afa1580156109fb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1f91906138e6565b610a299190613acc565b61072191906139be565b604051631ce4b4a760e01b81526001600160a01b03838116600483015282811660248301526000917f000000000000000000000000000000000000000000000000000000000000000090911690631ce4b4a79060440160206040518083038186803b158015610aa157600080fd5b505afa158015610ab5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad991906138e6565b9392505050565b600080610aed84846108ef565b60405163f3f481df60e01b81526001600160a01b038681166004830152919250600091670de0b6b3a7640000917f00000000000000000000000000000000000000000000000000000000000000009091169063f3f481df9060240160206040518083038186803b158015610b6057600080fd5b505afa158015610b74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9891906138e6565b610ba29084613acc565b610bac91906139be565b60405163a6ea8b8760e01b81526001600160a01b03878116600483015286811660248301529192506000917f0000000000000000000000000000000000000000000000000000000000000000169063a6ea8b879060440160206040518083038186803b158015610c1b57600080fd5b505afa158015610c2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5391906138e6565b9050808211610c685760009350505050610725565b610c728183613aeb565b9695505050505050565b60405163a6ea8b8760e01b81526001600160a01b038381166004830152828116602483015260009182917f0000000000000000000000000000000000000000000000000000000000000000169063a6ea8b879060440160206040518083038186803b158015610cea57600080fd5b505afa158015610cfe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2291906138e6565b905080610d3457600019915050610725565b60405163e6bc046160e01b81526001600160a01b0385811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063e6bc04619060240160206040518083038186803b158015610d9a57600080fd5b505afa158015610dae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd291906138e6565b610de483670de0b6b3a7640000613acc565b610dee91906139be565b90506012856001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610e2b57600080fd5b505afa158015610e3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6391906138fe565b60ff161115610ec25760405162461bcd60e51b815260206004820152602560248201527f556e69742050726f746f636f6c3a204e4f545f535550504f525445445f444543604482015264494d414c5360d81b6064820152608401610225565b846001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610efb57600080fd5b505afa158015610f0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3391906138fe565b610f3e906012613b02565b610f4990600a613a21565b6040516334e3b77960e01b81526001600160a01b03878116600483015286811660248301527f000000000000000000000000000000000000000000000000000000000000000016906334e3b7799060440160206040518083038186803b158015610fb257600080fd5b505afa158015610fc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fea91906138e6565b610ffc83670de0b6b3a7640000613acc565b61080391906139be565b60006002600054141561105b5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610225565b6002600055604051632474521560e21b81527f9a9aef7c1247d5fc769b0185c052913e39673da29a880317dfd20ebf86f26a496004820152336024820152879087907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d148549060440160206040518083038186803b1580156110e957600080fd5b505afa1580156110fd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112191906138ae565b61117f5760405162461bcd60e51b815260206004820152602960248201527f5375417574683a206f6e6c794c69717569646174696f6e416363657373204155604482015268151217d1905253115160ba1b6064820152608401610225565b604051631ce4b4a760e01b81526001600160a01b038a8116600483015289811660248301526000917f000000000000000000000000000000000000000000000000000000000000000090911690631ce4b4a79060440160206040518083038186803b1580156111ed57600080fd5b505afa158015611201573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122591906138e6565b116112825760405162461bcd60e51b815260206004820152602760248201527f556e69742050726f746f636f6c3a204e4f545f4c49515549444154494e475f5060448201526627a9a4aa24a7a760c91b6064820152608401610225565b6112a56040518060600160405280602e8152602001613b62602e91398588613301565b604051636f70e66f60e01b81526001600160a01b038a811660048301528981166024830152888116604483015260648201869052608482018890527f00000000000000000000000000000000000000000000000000000000000000001690636f70e66f9060a401602060405180830381600087803b15801561132657600080fd5b505af115801561133a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061135e91906138ae565b925061136a893361337b565b61138d604051806060016040528060268152602001613b3c602691398787613301565b604051638cd2e0c760e01b81526001600160a01b03888116600483015260248201889052604482018790527f00000000000000000000000000000000000000000000000000000000000000001690638cd2e0c790606401600060405180830381600087803b1580156113fe57600080fd5b505af1158015611412573d6000803e3d6000fd5b5050604051632ed56dff60e21b81526001600160a01b03858116600483015284811660248301527f000000000000000000000000000000000000000000000000000000000000000016925063bb55b7fc9150604401600060405180830381600087803b15801561148157600080fd5b505af1158015611495573d6000803e3d6000fd5b5050600160005550929998505050505050505050565b604051632474521560e21b8152600060048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d148549060440160206040518083038186803b15801561151157600080fd5b505afa158015611525573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154991906138ae565b6115955760405162461bcd60e51b815260206004820152601d60248201527f5375417574683a206f6e6c794f776e657220415554485f4641494c45440000006044820152606401610225565b80158015906115bc57506001600160a01b0382166000908152600160205260409020548110155b61162e5760405162461bcd60e51b815260206004820152603060248201527f556e69742050726f746f636f6c3a20494e434f52524543545f434f4c4c41544560448201527f52414c495a4154494f4e5f56414c5545000000000000000000000000000000006064820152608401610225565b6001600160a01b03909116600090815260026020526040902055565b60006002600054141561169f5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610225565b6002600055604051632474521560e21b81527f9a9aef7c1247d5fc769b0185c052913e39673da29a880317dfd20ebf86f26a496004820152336024820152869086907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d148549060440160206040518083038186803b15801561172d57600080fd5b505afa158015611741573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061176591906138ae565b6117c35760405162461bcd60e51b815260206004820152602960248201527f5375417574683a206f6e6c794c69717569646174696f6e416363657373204155604482015268151217d1905253115160ba1b6064820152608401610225565b604051631ce4b4a760e01b81526001600160a01b03898116600483015288811660248301526000917f000000000000000000000000000000000000000000000000000000000000000090911690631ce4b4a79060440160206040518083038186803b15801561183157600080fd5b505afa158015611845573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061186991906138e6565b116118c65760405162461bcd60e51b815260206004820152602760248201527f556e69742050726f746f636f6c3a204e4f545f4c49515549444154494e475f5060448201526627a9a4aa24a7a760c91b6064820152608401610225565b6118e96040518060600160405280602e8152602001613b62602e91398587613301565b604051636f70e66f60e01b81526001600160a01b0389811660048301528881166024830152878116604483015260648201869052608482018790527f00000000000000000000000000000000000000000000000000000000000000001690636f70e66f9060a401602060405180830381600087803b15801561196a57600080fd5b505af115801561197e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119a291906138ae565b92506119ae883361337b565b604051632ed56dff60e21b81526001600160a01b03838116600483015282811660248301527f0000000000000000000000000000000000000000000000000000000000000000169063bb55b7fc90604401600060405180830381600087803b158015611a1957600080fd5b505af1158015611a2d573d6000803e3d6000fd5b50506001600055509298975050505050505050565b6040516334e3b77960e01b81526001600160a01b038381166004830152828116602483015260009182917f000000000000000000000000000000000000000000000000000000000000000016906334e3b7799060440160206040518083038186803b158015611ab057600080fd5b505afa158015611ac4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ae891906138e6565b6005546040516306addfb360e31b81526001600160a01b0387811660048301529293506000929091169063356efd989060240160206040518083038186803b158015611b3357600080fd5b505afa158015611b47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b6b91906138e6565b905080611b7d57600092505050610725565b604051636aee125d60e11b81526001600160a01b03868116600483015285811660248301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063d5dc24ba9060440160206040518083038186803b158015611beb57600080fd5b505afa158015611bff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c2391906138e6565b60405163f3f481df60e01b81526001600160a01b0388811660048301529192506000917f0000000000000000000000000000000000000000000000000000000000000000169063f3f481df9060240160206040518083038186803b158015611c8a57600080fd5b505afa158015611c9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cc291906138e6565b611ccc9084613acc565b611cde83670de0b6b3a7640000613acc565b611ce891906139be565b9050611cf48185613aeb565b979650505050505050565b611d22604051806060016040528060258152602001613b90602591398383613301565b604051638cd2e0c760e01b81526001600160a01b03848116600483015260248201849052604482018390527f00000000000000000000000000000000000000000000000000000000000000001690638cd2e0c790606401600060405180830381600087803b158015611d9357600080fd5b505af1158015611da7573d6000803e3d6000fd5b50505050505050565b604051632474521560e21b8152600060048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d148549060440160206040518083038186803b158015611e1657600080fd5b505afa158015611e2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e4e91906138ae565b611e9a5760405162461bcd60e51b815260206004820152601d60248201527f5375417574683a206f6e6c794f776e657220415554485f4641494c45440000006044820152606401610225565b8015801590611eb15750670de0b6b3a76400008111155b611f235760405162461bcd60e51b815260206004820152603060248201527f556e69742050726f746f636f6c3a20494e434f52524543545f434f4c4c41544560448201527f52414c495a4154494f4e5f56414c5545000000000000000000000000000000006064820152608401610225565b6001600160a01b03909116600090815260016020526040902055565b604051632474521560e21b8152600060048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d148549060440160206040518083038186803b158015611fa557600080fd5b505afa158015611fb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fdd91906138ae565b6120295760405162461bcd60e51b815260206004820152601d60248201527f5375417574683a206f6e6c794f776e657220415554485f4641494c45440000006044820152606401610225565b600480546040517f9fea3e070000000000000000000000000000000000000000000000000000000081526001600160a01b03898116938201939093526024810188905260448101859052911690639fea3e0790606401600060405180830381600087803b15801561209957600080fd5b505af11580156120ad573d6000803e3d6000fd5b505050506120bb8685611db0565b6120c586846114ab565b6120ce816128b3565b505050505050565b604051631ce4b4a760e01b81526001600160a01b0383811660048301528281166024830152600091829182917f000000000000000000000000000000000000000000000000000000000000000090911690631ce4b4a79060440160206040518083038186803b15801561214857600080fd5b505afa15801561215c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061218091906138e6565b6040516334e3b77960e01b81526001600160a01b03878116600483015286811660248301529194507f0000000000000000000000000000000000000000000000000000000000000000909116906334e3b7799060440160206040518083038186803b1580156121ee57600080fd5b505afa158015612202573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061222691906138e6565b604051636aee125d60e11b81526001600160a01b03878116600483015286811660248301529193507f00000000000000000000000000000000000000000000000000000000000000009091169063d5dc24ba9060440160206040518083038186803b15801561229457600080fd5b505afa1580156122a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122cc91906138e6565b90509250925092565b60006002600054141561232a5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610225565b6002600055604051631ce4b4a760e01b81526001600160a01b0380861660048301523360248301819052869290917f00000000000000000000000000000000000000000000000000000000000000001690631ce4b4a79060440160206040518083038186803b15801561239c57600080fd5b505afa1580156123b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123d491906138e6565b1561242d5760405162461bcd60e51b815260206004820152602360248201527f556e69742050726f746f636f6c3a204c49515549444154494e475f504f53495460448201526224a7a760e91b6064820152608401610225565b604051636aee125d60e11b81526001600160a01b0387811660048301523360248301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063d5dc24ba9060440160206040518083038186803b15801561249957600080fd5b505afa1580156124ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124d191906138e6565b9050808511156124df578094505b6040517f34c188b00000000000000000000000000000000000000000000000000000000081526001600160a01b038881166004830152336024830152604482018790526000917f0000000000000000000000000000000000000000000000000000000000000000909116906334c188b09060640160206040518083038186803b15801561256b57600080fd5b505afa15801561257f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125a391906138e6565b604051636f70e66f60e01b81526001600160a01b038a8116600483015233602483018190526044830152606482018a9052608482018990529192506000917f00000000000000000000000000000000000000000000000000000000000000001690636f70e66f9060a401602060405180830381600087803b15801561262757600080fd5b505af115801561263b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061265f91906138ae565b905061266b893361337b565b604051638cd2e0c760e01b815233600482015260248101889052604481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690638cd2e0c790606401600060405180830381600087803b1580156126da57600080fd5b505af11580156126ee573d6000803e3d6000fd5b50505050801561274957604080518981526020810189905233916001600160a01b038c16917f4bd704811146c45cfd9276261817324e0acc0b5eaa458b21a0740367dc37cdb8910160405180910390a3869550505050612821565b60405163c640752d60e01b81526001600160a01b038a811660048301523360248301527f0000000000000000000000000000000000000000000000000000000000000000169063c640752d90604401600060405180830381600087803b1580156127b257600080fd5b505af11580156127c6573d6000803e3d6000fd5b505050506127d48933613471565b604080518981526020810189905233916001600160a01b038c16917fa702ae6024e8b4c2b0eb162b1453dacb93cf6922f5a2d7236faed898c21148f8910160405180910390a38695505050505b604051632ed56dff60e21b81526001600160a01b03838116600483015282811660248301527f0000000000000000000000000000000000000000000000000000000000000000169063bb55b7fc90604401600060405180830381600087803b15801561288c57600080fd5b505af11580156128a0573d6000803e3d6000fd5b5050600160005550929695505050505050565b604051632474521560e21b8152600060048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d148549060440160206040518083038186803b15801561291957600080fd5b505afa15801561292d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061295191906138ae565b61299d5760405162461bcd60e51b815260206004820152601d60248201527f5375417574683a206f6e6c794f776e657220415554485f4641494c45440000006044820152606401610225565b600355565b604051631ce4b4a760e01b81526001600160a01b03838116600483015282811660248301527f00000000000000000000000000000000000000000000000000000000000000001690631ce4b4a79060440160206040518083038186803b158015612a0b57600080fd5b505afa158015612a1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a4391906138e6565b15612a9c5760405162461bcd60e51b815260206004820152602360248201527f556e69742050726f746f636f6c3a204c49515549444154494e475f504f53495460448201526224a7a760e91b6064820152608401610225565b6000612aa883836108ef565b9050612ab58383836130ae565b612b015760405162461bcd60e51b815260206004820152601c60248201527f556e69742050726f746f636f6c3a20534146455f504f534954494f4e000000006044820152606401610225565b60405163c640752d60e01b81526001600160a01b03848116600483015283811660248301527f0000000000000000000000000000000000000000000000000000000000000000169063c640752d90604401600060405180830381600087803b158015612b6c57600080fd5b505af1158015612b80573d6000803e3d6000fd5b50506040517fd4796d120000000000000000000000000000000000000000000000000000000081526001600160a01b03868116600483015285811660248301527f000000000000000000000000000000000000000000000000000000000000000016925063d4796d129150604401600060405180830381600087803b158015612c0857600080fd5b505af1158015612c1c573d6000803e3d6000fd5b50506040516001600160a01b038086169350861691507f5b79a897d30813a62a1f95ba180d3320d3701d96605708b81105e00719a069e490600090a3505050565b60026000541415612cb05760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610225565b6002600055823382151580612cc457508315155b612d105760405162461bcd60e51b815260206004820152601960248201527f556e69742050726f746f636f6c3a205553454c4553535f5458000000000000006044820152606401610225565b6012856001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015612d4b57600080fd5b505afa158015612d5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d8391906138fe565b60ff161115612de25760405162461bcd60e51b815260206004820152602560248201527f556e69742050726f746f636f6c3a204e4f545f535550504f525445445f444543604482015264494d414c5360d81b6064820152608401610225565b82612e7457604051638340f54960e01b81526001600160a01b038681166004830152336024830152604482018690527f00000000000000000000000000000000000000000000000000000000000000001690638340f54990606401600060405180830381600087803b158015612e5757600080fd5b505af1158015612e6b573d6000803e3d6000fd5b50505050612fcf565b8315612f0357604051638340f54960e01b81526001600160a01b038681166004830152336024830152604482018690527f00000000000000000000000000000000000000000000000000000000000000001690638340f54990606401600060405180830381600087803b158015612eea57600080fd5b505af1158015612efe573d6000803e3d6000fd5b505050505b6040517f5224372c0000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152336024830152604482018590527f00000000000000000000000000000000000000000000000000000000000000001690635224372c90606401602060405180830381600087803b158015612f8c57600080fd5b505af1158015612fa0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fc491906138e6565b50612fcf8533613471565b612fd9853361337b565b604080518581526020810185905233916001600160a01b038816917f6423b6056e64b3b29cb2d342362b47c26fa8d6877da27ea152354060df19b9bc910160405180910390a3604051632ed56dff60e21b81526001600160a01b03838116600483015282811660248301527f0000000000000000000000000000000000000000000000000000000000000000169063bb55b7fc90604401600060405180830381600087803b15801561308a57600080fd5b505af115801561309e573d6000803e3d6000fd5b5050600160005550505050505050565b60405163a6ea8b8760e01b81526001600160a01b038481166004830152838116602483015260009182917f0000000000000000000000000000000000000000000000000000000000000000169063a6ea8b879060440160206040518083038186803b15801561311c57600080fd5b505afa158015613130573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061315491906138e6565b905080613165576000915050610ad9565b604080518082018252600581527f4c494d49540000000000000000000000000000000000000000000000000000006020820152905163e6bc046160e01b81526001600160a01b0387811660048301526132409291849187917f00000000000000000000000000000000000000000000000000000000000000009091169063e6bc04619060240160206040518083038186803b15801561320357600080fd5b505afa158015613217573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061323b91906138e6565b61365c565b60405163e6bc046160e01b81526001600160a01b0386811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063e6bc04619060240160206040518083038186803b1580156132a157600080fd5b505afa1580156132b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132d991906138e6565b836132ec83670de0b6b3a7640000613acc565b6132f691906139be565b101595945050505050565b6133768383836040516024016133199392919061396a565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f969cdd03000000000000000000000000000000000000000000000000000000001790526136cf565b505050565b600061338783836108ef565b905080158061342557507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bb497dcc6040518163ffffffff1660e01b815260040160206040518083038186803b1580156133ea57600080fd5b505afa1580156133fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061342291906138e6565b81115b6133765760405162461bcd60e51b815260206004820152601f60248201527f556e69742050726f746f636f6c3a20534d414c4c5f434f4c4c41544552414c006044820152606401610225565b600061347d83836108ef565b60405163f3f481df60e01b81526001600160a01b038581166004830152919250600091670de0b6b3a7640000917f00000000000000000000000000000000000000000000000000000000000000009091169063f3f481df9060240160206040518083038186803b1580156134f057600080fd5b505afa158015613504573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061352891906138e6565b6135329084613acc565b61353c91906139be565b60405163a6ea8b8760e01b81526001600160a01b038681166004830152858116602483015291925082917f0000000000000000000000000000000000000000000000000000000000000000169063a6ea8b879060440160206040518083038186803b1580156135aa57600080fd5b505afa1580156135be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135e291906138e6565b11156136565760405162461bcd60e51b815260206004820152602260248201527f556e69742050726f746f636f6c3a20554e444552434f4c4c41544552414c495a60448201527f45440000000000000000000000000000000000000000000000000000000000006064820152608401610225565b50505050565b61365684848484604051602401613676949392919061398f565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f08ee5666000000000000000000000000000000000000000000000000000000001790525b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b80356001600160a01b038116811461370757600080fd5b919050565b60006020828403121561371d578081fd5b610ad9826136f0565b60008060408385031215613738578081fd5b613741836136f0565b915061374f602084016136f0565b90509250929050565b600080600080600060a0868803121561376f578081fd5b613778866136f0565b9450613786602087016136f0565b9350613794604087016136f0565b94979396509394606081013594506080013592915050565b60008060008060008060c087890312156137c4578081fd5b6137cd876136f0565b95506137db602088016136f0565b94506137e9604088016136f0565b9350606087013592506080870135915060a087013590509295509295509295565b6000806040838503121561381c578182fd5b613825836136f0565b946020939093013593505050565b600080600060608486031215613847578283fd5b613850846136f0565b95602085013595506040909401359392505050565b60008060008060008060c0878903121561387d578182fd5b613886876136f0565b9860208801359850604088013597606081013597506080810135965060a00135945092505050565b6000602082840312156138bf578081fd5b81518015158114610ad9578182fd5b6000602082840312156138df578081fd5b5035919050565b6000602082840312156138f7578081fd5b5051919050565b60006020828403121561390f578081fd5b815160ff81168114610ad9578182fd5b60008151808452815b8181101561394457602081850181015186830182015201613928565b818111156139555782602083870101525b50601f01601f19169290920160200192915050565b60608152600061397d606083018661391f565b60208301949094525060400152919050565b6080815260006139a2608083018761391f565b6020830195909552506040810192909252606090910152919050565b6000826139d957634e487b7160e01b81526012600452602481fd5b500490565b600181815b80851115613a195781600019048211156139ff576139ff613b25565b80851615613a0c57918102915b93841c93908002906139e3565b509250929050565b6000610ad960ff841683600082613a3a57506001610725565b81613a4757506000610725565b8160018114613a5d5760028114613a6757613a83565b6001915050610725565b60ff841115613a7857613a78613b25565b50506001821b610725565b5060208310610133831016604e8410600b8410161715613aa6575081810a610725565b613ab083836139de565b8060001904821115613ac457613ac4613b25565b029392505050565b6000816000190483118215151615613ae657613ae6613b25565b500290565b600082821015613afd57613afd613b25565b500390565b600060ff821660ff841680821015613b1c57613b1c613b25565b90039392505050565b634e487b7160e01b600052601160045260246000fdfe5245504159207265706179202872657061796d656e742c20657863657373416e64466565293a4c4951554944415445206c697175696461746520286173736574416d6f756e742c2072657061796d656e74293a205245504159207265706179202872657061796d656e742c20746f466f6e646174696f6e293aa26469706673582212205cf6ea7180a00a8370d1758e987c1e6c8f87f0d01739abedc8174c952d692c8964736f6c63430008040033",
  "devdoc": {
    "events": {
      "Buyout(address,address,address,uint256,uint256)": {
        "details": "Trigger when buyouts are happened*"
      }
    },
    "kind": "dev",
    "methods": {
      "getLiquidationBlock(address,address)": {
        "params": {
          "asset": "The address of the main collateral token of a position",
          "owner": "The owner of the collateral"
        },
        "returns": {
          "_0": "liquidationBlock The block number when the liquidation was triggered"
        }
      },
      "getPosition(address,address)": {
        "details": "TODO: should rename to getPositionInfo()",
        "params": {
          "asset": "The address of the main collateral token of a position",
          "owner": "The owner of the collateral"
        },
        "returns": {
          "collateralEDecimal": "The amount of collateral",
          "debtE18": "The amount of borrowed stablecoins",
          "liquidationBlock": "The block number when the liquidation was triggered"
        }
      },
      "liquidate(address,address,address,uint256,uint256)": {
        "details": "Supports a partial liquidation",
        "params": {
          "asset": "The address of the main collateral token of a position",
          "assetAmountEDecimal": "The position's collateral which be recieved by repayer",
          "owner": "The owner of the collateral",
          "repayer": "The person who repaies by debt and transfers stablecoins to the foundation",
          "stablecoinsToRepaymentE18": "The amount of stablecoins which will be burned as a debt repaymention"
        },
        "returns": {
          "destroyed": "Returns \"true\" if the position completely liquidated"
        }
      },
      "liquidateAndRepay(address,address,address,uint256,uint256,uint256)": {
        "details": "Supports a partial liquidation",
        "params": {
          "asset": "The address of the main collateral token of a position",
          "assetAmountEDecimal": "The position's collateral which be recieved by repayer",
          "excessAndFeeE18": "The amount of stablecoins which transfer to foundation",
          "owner": "The owner of a position",
          "repayer": "The person who repaies by debt and recieves a position's collateral",
          "repaymentE18": "The amount of repayment"
        },
        "returns": {
          "destroyed": "Returns \"true\" if the position completely liquidated"
        }
      },
      "repay(address,uint256,uint256)": {
        "params": {
          "repayer": "The person who repaies by debt and transfers stablecoins to the foundation",
          "stablecoinsToFoundationE18": "The amount of stablecoins which will be transfered to the foundation",
          "stablecoinsToRepaymentE18": "The amount of stablecoins which will be burned as a debt repayment"
        }
      },
      "setInitialCollateralRatioE18(address,uint256)": {
        "details": "Sets the initial collateral ratio",
        "params": {
          "asset": "The address of the main collateral token",
          "newValueE18": "The collateralization ratio (1e18 = 100%)*"
        }
      },
      "setLiquidationRatioE18(address,uint256)": {
        "details": "Sets the liquidation ratio",
        "params": {
          "asset": "The address of the main collateral token",
          "newValueE18": "The liquidation ratio (1e18 = 100%)*"
        }
      },
      "setMinCollateralInUsdE18(uint256)": {
        "details": "Sets a minimum value of collateral in USD which allowed to be left after partial closure",
        "params": {
          "newValueE18": "The minimum value of collateral in USD"
        }
      },
      "triggerLiquidation(address,address)": {
        "details": "Emits LiquidationTriggered event. Sets the current block as liquidationBlock for the position. Can be triggered only once for the position."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getAvailableToBorrowE18(address,address)": {
        "notice": "Returns Available to Borrow we have invariant: (collateralAmountEDecimal * collateralPriceE18 / 1e18) * initialCollateralRatioE18 <= debtE18 Has similar logic like in _ensurePositionCollateralization"
      },
      "getAvailableToWithdrawE18(address,address)": {
        "notice": "Returns Available to Withdraw Has similar invariant like in getAvailableToBorrowE18"
      },
      "getLTVE18(address,address)": {
        "notice": "Returns Loan-To-Value in e18"
      },
      "getLiquidationBlock(address,address)": {
        "notice": "Returns information about a liquidating position"
      },
      "getPosition(address,address)": {
        "notice": "Returns information about a liquidating position"
      },
      "join(address,uint256,uint256)": {
        "notice": "Yes,"
      },
      "liquidate(address,address,address,uint256,uint256)": {
        "notice": "Liquidates a position"
      },
      "liquidateAndRepay(address,address,address,uint256,uint256,uint256)": {
        "notice": "please see https://ratiofinance.medium.com/ratio-risk-lesson-2-cascading-liquidations-e91e04050f47Liquidates a position's collateral completely"
      },
      "repay(address,uint256,uint256)": {
        "notice": "Finilizes the liquidation"
      },
      "setInitialCollateralRatioE18(address,uint256)": {
        "notice": "Only manager is able to call this function"
      },
      "setLiquidationRatioE18(address,uint256)": {
        "notice": "Only manager is able to call this function"
      },
      "setMinCollateralInUsdE18(uint256)": {
        "notice": "Only manager is able to call this function"
      }
    },
    "notice": "not sure why",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 543,
        "contract": "contracts/lending/SuManager.sol:SuManager",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 7326,
        "contract": "contracts/lending/SuManager.sol:SuManager",
        "label": "initialCollateralRatioE18",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7330,
        "contract": "contracts/lending/SuManager.sol:SuManager",
        "label": "liquidationRatioE18",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7335,
        "contract": "contracts/lending/SuManager.sol:SuManager",
        "label": "minCollateralInUsdE18",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 7338,
        "contract": "contracts/lending/SuManager.sol:SuManager",
        "label": "vaultParameters",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(SuVaultParameters)8385"
      },
      {
        "astId": 6255,
        "contract": "contracts/lending/SuManager.sol:SuManager",
        "label": "suOracle",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(ISuOracle)5114"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(ISuOracle)5114": {
        "encoding": "inplace",
        "label": "contract ISuOracle",
        "numberOfBytes": "20"
      },
      "t_contract(SuVaultParameters)8385": {
        "encoding": "inplace",
        "label": "contract SuVaultParameters",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}