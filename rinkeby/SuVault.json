{
  "address": "0xBA54Dc3f6A7cAE873Ae7Cb12c4dC294A8E02Cb32",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_parameters",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_col",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdp",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_weth",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DENOMINATOR_1E2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DENOMINATOR_1E5",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "borrow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "calculateFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newOracleType",
          "type": "uint256"
        }
      ],
      "name": "changeOracleType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "chargeFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "col",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "colToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "collaterals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "debts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositCol",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "depositEth",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositMain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "destroy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getTotalDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastUpdate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "positionOwner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "mainAssetToLiquidator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "colToLiquidator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mainAssetToPositionOwner",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "colToPositionOwner",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "repayment",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "penalty",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "liquidationBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "liquidationFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "liquidationPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "oracleType",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "repay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "spawn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stabilityFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenDebts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "positionOwner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "initialPrice",
          "type": "uint256"
        }
      ],
      "name": "triggerLiquidation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "update",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdp",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultParameters",
      "outputs": [
        {
          "internalType": "contract SuVaultParameters",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawCol",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawEth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawMain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x1efb533d8e1fef5852854608f9d8a5c5224b6842f5be38895379bc9882317fbd",
  "receipt": {
    "to": null,
    "from": "0xE2661235b116781a7b30D4a675898cF9E61298Df",
    "contractAddress": "0xBA54Dc3f6A7cAE873Ae7Cb12c4dC294A8E02Cb32",
    "transactionIndex": 25,
    "gasUsed": "2908461",
    "logsBloom": "0x
    "blockHash": "0x121a6adf6fea4710a16d793ba66ee08d838fdb601d72e014c59ba4f7f39ed404",
    "transactionHash": "0x1efb533d8e1fef5852854608f9d8a5c5224b6842f5be38895379bc9882317fbd",
    "logs": [],
    "blockNumber": 10454014,
    "cumulativeGasUsed": "8192848",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xFEc15b6Ad0664BD951f0a1de73eF539cd8fAFc2F",
    "0x3E8A9e09cd9a4F12D66449c0Bdc286D904Fa6948",
    "0x44858A8c87520dbA932037de07511bC88a3F672b",
    "0xA7C888818D81C6CcCfdA101804a7eB62241c75c5"
  ],
  "numDeployments": 1,
  "solcInputHash": "273b8a8676c1f082f3d5df451cde8e6d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_parameters\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_col\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdp\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DENOMINATOR_1E2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DENOMINATOR_1E5\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newOracleType\",\"type\":\"uint256\"}],\"name\":\"changeOracleType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"chargeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"col\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"colToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"collaterals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"debts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositCol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"depositEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositMain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"destroy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getTotalDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"positionOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mainAssetToLiquidator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"colToLiquidator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mainAssetToPositionOwner\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"colToPositionOwner\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repayment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidationBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidationPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"oracleType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"spawn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stabilityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenDebts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"positionOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialPrice\",\"type\":\"uint256\"}],\"name\":\"triggerLiquidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultParameters\",\"outputs\":[{\"internalType\":\"contract SuVaultParameters\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawCol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawMain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"borrow(address,address,uint256)\":{\"notice\":\"no, one debt for [asset][user]\"},\"calculateFee(address,address,uint256)\":{\"notice\":\"No, any call of valult.update would calc fee in debt and restart fee timer\"},\"changeOracleType(address,address,uint256)\":{\"notice\":\"any time\"},\"chargeFee(address,address,uint256)\":{\"notice\":\"this is just tranfer function, manager calc fees\"},\"col()\":{\"notice\":\"yes\"},\"collaterals(address,address)\":{\"notice\":\"No, it's how much user had stacked collaterael asset == collaterals[asset][user], i.e deposits\"},\"constructor\":{\"notice\":\"YES\"},\"debts(address,address)\":{\"notice\":\"Yes, in stablecoin amount, == debts[asset][user]\"},\"destroy(address,address)\":{\"notice\":\"only destroy debt info, exit -> _repay -> destroy if debt == 0\"},\"getTotalDebt(address,address)\":{\"notice\":\"they don't use it in practice\"},\"lastUpdate(address,address)\":{\"notice\":\"everything before lastUpdates is already calced in the debt. all data such as fees are from lastUpdate only\"},\"liquidate(address,address,uint256,uint256,uint256,uint256,uint256,uint256,address)\":{\"notice\":\"please see https://ratiofinance.medium.com/ratio-risk-lesson-2-cascading-liquidations-e91e04050f47\"},\"liquidationBlock(address,address)\":{\"notice\":\"Yes ,  liquidationBlock[asset][user]\"},\"liquidationFee(address,address)\":{\"notice\":\"Penalty during liquidation\"},\"liquidationPrice(address,address)\":{\"notice\":\"see line 287 triggerLiquidation: liquidationPrice[asset][positionOwner] = initialPrice;\"},\"oracleType(address,address)\":{\"notice\":\"ID of oracle contact for oracleType[asset][user]\"},\"repay(address,address,uint256)\":{\"notice\":\"return for the debt\"},\"spawn(address,address)\":{\"notice\":\"all implementation are numbered\"},\"stabilityFee(address,address)\":{\"notice\":\"current interest that user pay for stabilityFee[asset][user]\"},\"tokenDebts(address)\":{\"notice\":\"How much stablecoin was borrowed against particular asset == tokenDebts[asset]  \"},\"triggerLiquidation(address,address,uint256)\":{\"notice\":\"it's Vault so Manager does tells it what to do.\"},\"update(address,address)\":{\"notice\":\"when user borrows more \"},\"weth()\":{\"notice\":\"yes\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SuVault.sol\":\"SuVault\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/SuUSD.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\n/*\\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\\n*/\\npragma solidity ^0.8.0;\\n\\nimport \\\"./SuVaultParameters.sol\\\";\\nimport \\\"./original-unit-contracts/helpers/SafeMath.sol\\\";\\n\\ncontract SuUSD is Auth {\\n    using SafeMath for uint;\\n\\n    // our name will be UNIT\\n    string public constant name = \\\"USDP Stablecoin\\\";\\n\\n    // symbol UNIT\\n    string public constant symbol = \\\"USDP\\\";\\n\\n    // can it be redeployed? can it be any other value?\\n    /// i think it useless\\n    string public constant version = \\\"1\\\";\\n\\n    // always 18 decimals the same like ETH\\n    uint8 public constant decimals = 18;\\n\\n    // how many dollars in circulation\\n    uint public totalSupply;\\n\\n    // balance of each account\\n    mapping(address => uint) public balanceOf;\\n\\n    // how many dollars one address is allowed to transfer from another\\n    mapping(address => mapping(address => uint)) public allowance;\\n\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    constructor(address _parameters) Auth(_parameters) {}\\n\\n    /**\\n      * @notice Only Vault can mint USDP\\n      * @dev Mints 'amount' of tokens to address 'to', and MUST fire the\\n      * Transfer event\\n      * @param to The address of the recipient\\n      * @param amount The amount of token to be minted\\n     **/\\n\\n     // dollars can be minted by vault (once user deposited collateral)\\n    function mint(address to, uint amount) external onlyVault {\\n        require(to != address(0), \\\"Unit Protocol: ZERO_ADDRESS\\\");\\n\\n        balanceOf[to] = balanceOf[to].add(amount);\\n        totalSupply = totalSupply.add(amount);\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    // dollars can be burned by manager but only his own dollars\\n    // which managers will be using this feature? burning protocol fees?\\n    function burn(uint amount) external onlyManager {\\n        _burn(msg.sender, amount);\\n    }\\n\\n     // also vault is allowed to burn dollars of any account\\n     // when user repays his loan and takes back his collateral\\n    function burn(address from, uint amount) external onlyVault {\\n        _burn(from, amount);\\n    }\\n\\n    // I think transfer and transferFrom should execute the same internal function\\n    // instead of transfer executing transferFrom\\n    function transfer(address to, uint amount) external returns (bool) {\\n        return transferFrom(msg.sender, to, amount);\\n    }\\n\\n    // implementation by standard - allows one user to transfer from another account\\n    // in which cases our contracts will utilize this ability?\\n    function transferFrom(address from, address to, uint amount) public returns (bool) {\\n        require(to != address(0), \\\"Unit Protocol: ZERO_ADDRESS\\\");\\n        require(balanceOf[from] >= amount, \\\"Unit Protocol: INSUFFICIENT_BALANCE\\\");\\n\\n        if (from != msg.sender) {\\n            require(allowance[from][msg.sender] >= amount, \\\"Unit Protocol: INSUFFICIENT_ALLOWANCE\\\");\\n            _approve(from, msg.sender, allowance[from][msg.sender].sub(amount));\\n        }\\n        balanceOf[from] = balanceOf[from].sub(amount);\\n        balanceOf[to] = balanceOf[to].add(amount);\\n\\n        emit Transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    // at which point in user experience will he send approve transaction?\\n    function approve(address spender, uint amount) external returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    // alternative to approve\\n    function increaseAllowance(address spender, uint addedValue) public virtual returns (bool) {\\n        _approve(msg.sender, spender, allowance[msg.sender][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    // to manage amount granuarly\\n    function decreaseAllowance(address spender, uint subtractedValue) public virtual returns (bool) {\\n        _approve(msg.sender, spender, allowance[msg.sender][spender].sub(subtractedValue));\\n        return true;\\n    }\\n\\n    // in our case we inherit from OZ and these function are there\\n    function _approve(address owner, address spender, uint amount) internal virtual {\\n        require(owner != address(0), \\\"Unit Protocol: approve from the zero address\\\");\\n        require(spender != address(0), \\\"Unit Protocol: approve to the zero address\\\");\\n\\n        allowance[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    // as well this one inherited from OZ\\n    function _burn(address from, uint amount) internal virtual {\\n        balanceOf[from] = balanceOf[from].sub(amount);\\n        totalSupply = totalSupply.sub(amount);\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0b6e8d1efa066bf716ec687fa09eb16882d905a31a5caf3522c0485fe8844ee5\",\"license\":\"BSL 1.1\"},\"contracts/SuVault.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\n/*\\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\\n*/\\npragma solidity ^0.8.0;\\n\\nimport \\\"./original-unit-contracts/helpers/SafeMath.sol\\\";\\nimport \\\"./SuVaultParameters.sol\\\";\\nimport \\\"./original-unit-contracts/helpers/TransferHelper.sol\\\";\\nimport \\\"./SuUSD.sol\\\";\\nimport \\\"./original-unit-contracts/interfaces/IWETH.sol\\\";\\n\\ncontract SuVault is Auth {\\n    // don't need anymore in modern solidity?\\n    /// correct\\n    using SafeMath for uint;\\n\\n    // dont need theirs token \\n    /// yes\\n    address public immutable col;\\n\\n    // only wrapped ether will be supported\\n    /// yes\\n    address payable public immutable weth;\\n\\n    // 10^5 = 100000\\n    uint public constant DENOMINATOR_1E5 = 1e5;\\n\\n    // 10^2 = 100\\n    uint public constant DENOMINATOR_1E2 = 1e2;\\n\\n    // token itself - will be unit stable coin\\n    address public immutable usdp;\\n\\n    // which tokens are allowed as collateral; what's the int value - min threshold or rate?\\n    /// No, it's how much user had stacked collaterael asset == collaterals[asset][user], i.e deposits\\n    mapping(address => mapping(address => uint)) public collaterals;\\n\\n    // the same but for theirs token - can be ignored\\n    mapping(address => mapping(address => uint)) public colToken;\\n\\n    // mapping of user address to integer value; which is the amount of debt represented by what?\\n    /// Yes, in stablecoin amount, == debts[asset][user]\\n    // or might be it mapping fro token address into total debt amount?\\n    mapping(address => mapping(address => uint)) public debts;\\n\\n    // liquidation can be triggered by permissionless-action?\\n    /// Yes\\n    // then the process begins and we remember which block it started at\\n    // is it indexed by collateral token address?\\n    /// Yes ,  liquidationBlock[asset][user]\\n    mapping(address => mapping(address => uint)) public liquidationBlock;\\n\\n    // mapping of collateral address to liquidation price;\\n    // when and who decides on the collateral price, is that dynamic?\\n    /// see line 287 triggerLiquidation: liquidationPrice[asset][positionOwner] = initialPrice;\\n    mapping(address => mapping(address => uint)) public liquidationPrice;\\n\\n    // mapping of address to integer for token debts;\\n    // what'is the units of measurement?\\n    /// How much stablecoin was borrowed against particular asset == tokenDebts[asset]  \\n    mapping(address => uint) public tokenDebts;\\n\\n    // double mapping probably from collateral to each user to debt\\n    // how is stability fee calculated and where is it paid and when?\\n    /// current interest that user pay for stabilityFee[asset][user]\\n    mapping(address => mapping(address => uint)) public stabilityFee;\\n\\n    // another similar mapping for another fee, how is liquidation fee different from stability fee?\\n    // can we combine both mapping into single mapping to structure?\\n    /// Penalty during liquidation\\n    mapping(address => mapping(address => uint)) public liquidationFee;\\n\\n    // mapping for oracles; are there different oracle types? who is allowed to choose oracle?\\n    // oracles are passive\\n    /// ID of oracle contact for oracleType[asset][user]\\n    mapping(address => mapping(address => uint)) public oracleType;\\n\\n    // mapping for timestamps;\\n    // why do we need timestamps? how do we calculate medium price when merging positions?\\n    /// everything before lastUpdates is already calced in the debt. all data such as fees are from lastUpdate only\\n    mapping(address => mapping(address => uint)) public lastUpdate;\\n\\n    // check if liquidation process not started for asset of user\\n    /// YES\\n    modifier notLiquidating(address asset, address user) {\\n        require(liquidationBlock[asset][user] == 0, \\\"Unit Protocol: LIQUIDATING_POSITION\\\");\\n        _;\\n    }\\n\\n    // vault is initialize with parameters for auth (we are using OZ instead)\\n    // and it accept address for wrapped eth, main stable coin, and probably governance token\\n    /// YES\\n    constructor(address _parameters, address _col, address _usdp, address payable _weth) Auth(_parameters) {\\n        col = _col;\\n        usdp = _usdp;\\n        weth = _weth;\\n    }\\n\\n    // do not accept direct payments from users because they will be stuck on contract address\\n    /// YES, does work for erc20\\n    receive() external payable {\\n        require(msg.sender == weth, \\\"Unit Protocol: RESTRICTED\\\");\\n    }\\n\\n     // who does have vault access?\\n     /// anyone from canModifyVault\\n     // why position is not allowed to be modified during liquidation?\\n     /// because when it's launched - liquidators want to be sure they can participate\\n     // how often update can be triggered?\\n     /// when user borrows more \\n    function update(address asset, address user) public hasVaultAccess notLiquidating(asset, user) {\\n        \\n        // probably should be checked if zero then skip\\n        /// \\n        uint debtWithFee = getTotalDebt(asset, user);\\n\\n        // we decrease token debt by current debt and increase by new debt\\n        // can we just set new value instead?\\n        tokenDebts[asset] = tokenDebts[asset].sub(debts[asset][user]).add(debtWithFee);\\n        \\n        // we set new debt for asset of user\\n        debts[asset][user] = debtWithFee;\\n\\n        // we also set new fee\\n        stabilityFee[asset][user] = vaultParameters.stabilityFee(asset);\\n        \\n        // we also set new fee\\n        liquidationFee[asset][user] = vaultParameters.liquidationFee(asset);\\n        \\n        // and update timestamp\\n        lastUpdate[asset][user] = block.timestamp;\\n    }\\n\\n     // spawn means to create new debt position for user\\n     // it accepts collateral token address and user and chosen oracle type\\n     // this function is not called by user but by special priviliged account?\\n     /// yes, by CDP manager 01\\n     // what are the options for oracle type?\\n     /// all implementation are numbered\\n    function spawn(address asset, address user) external hasVaultAccess notLiquidating(asset, user) {\\n        \\n        // why its being removed and which cases its not empty?\\n        /// could be liquidationBlock[asset][user] = 0;\\n        delete liquidationBlock[asset][user];\\n    }\\n\\n    // does it help to restore gas fees? what's the purpose of cleanup?\\n    /// Not clear for after London hardfork\\n    // how do ensure its not being called unexpectedly? very dangerous function \\n    /// only destroy debt info, exit -> _repay -> destroy if debt == 0\\n    function destroy(address asset, address user) public hasVaultAccess notLiquidating(asset, user) {\\n        delete stabilityFee[asset][user];\\n        delete oracleType[asset][user];\\n        delete lastUpdate[asset][user];\\n        delete liquidationFee[asset][user];\\n    }\\n\\n     // collateral deposit\\n    function depositMain(address asset, address user, uint amount) external hasVaultAccess notLiquidating(asset, user) {\\n        collaterals[asset][user] = collaterals[asset][user].add(amount);\\n        TransferHelper.safeTransferFrom(asset, user, address(this), amount);\\n    }\\n\\n    // wrapped ether deposit\\n    // can be called by anyone? how do we reject weth transfers by mistake?\\n    function depositEth(address user) external payable notLiquidating(weth, user) {\\n        IWETH(weth).deposit{value: msg.value}();\\n        collaterals[weth][user] = collaterals[weth][user].add(msg.value);\\n    }\\n\\n     // collateral withdraw\\n     // why being called by privileged account and not by user?\\n    function withdrawMain(address asset, address user, uint amount) external hasVaultAccess notLiquidating(asset, user) {\\n        collaterals[asset][user] = collaterals[asset][user].sub(amount);\\n        TransferHelper.safeTransfer(asset, user, amount);\\n    }\\n\\n    // withdraw wrapper ether\\n    function withdrawEth(address payable user, uint amount) external hasVaultAccess notLiquidating(weth, user) {\\n        collaterals[weth][user] = collaterals[weth][user].sub(amount);\\n        IWETH(weth).withdraw(amount);\\n        TransferHelper.safeTransferETH(user, amount);\\n    }\\n\\n    // this can be ignored\\n    function depositCol(address asset, address user, uint amount) external hasVaultAccess notLiquidating(asset, user) {\\n        colToken[asset][user] = colToken[asset][user].add(amount);\\n        TransferHelper.safeTransferFrom(col, user, address(this), amount);\\n    }\\n\\n    // this can be ignored\\n    function withdrawCol(address asset, address user, uint amount) external hasVaultAccess notLiquidating(asset, user) {\\n        colToken[asset][user] = colToken[asset][user].sub(amount);\\n        TransferHelper.safeTransfer(col, user, amount);\\n    }\\n\\n     // BORROW == takeUnit\\n     /// yes, fro cdpManager01\\n     // user expected previously to deposit collateral and then being able to take stablecoin\\n     // but where do we check current user collateral and amount??\\n     /// in CDPManager01\\n     // can user create single position with multiple collaterals?\\n     /// no, one debt for [asset][user]\\n    function borrow(\\n        address asset,\\n        address user,\\n        uint amount\\n    )\\n    external\\n    hasVaultAccess\\n    notLiquidating(asset, user)\\n    returns(uint)\\n    {\\n        // update debts and fees of user for collateral\\n        /// I think better name is needed\\n        update(asset, user);\\n\\n        // why we update it again after update already called?\\n        /// becaause update doesn't use amount, only calc curr fees\\n        debts[asset][user] = debts[asset][user].add(amount);\\n        tokenDebts[asset] = tokenDebts[asset].add(amount);\\n\\n        // there is a limit of total debt for each collateral\\n        // why that limit is needed?\\n        /// because of risk profile\\n        require(tokenDebts[asset] <= vaultParameters.tokenDebtLimit(asset), \\\"Unit Protocol: ASSET_DEBT_LIMIT\\\");\\n\\n        // here stablecoin is created for user\\n        SuUSD(usdp).mint(user, amount);\\n\\n        // we return value of previous debt plus new debt\\n        // how this can be accessed and used by client?\\n        // should consider to emit events instead\\n        return debts[asset][user];\\n    }\\n\\n    // REPAY == giveUnit\\n    /// return for the debt\\n    function repay(\\n        address asset,\\n        address user,\\n        uint amount\\n    )\\n    external\\n    hasVaultAccess\\n    notLiquidating(asset, user)\\n    returns(uint)\\n    {\\n        // current debt of user by given collateral\\n        uint debt = debts[asset][user];\\n        \\n        // is being decreased by chosen amount\\n        debts[asset][user] = debt.sub(amount);\\n\\n        // total debt by asset is being decreased too\\n        // this value is used to limit total collateral allowed debt\\n        tokenDebts[asset] = tokenDebts[asset].sub(amount);\\n\\n        // we burn stablecoin from user\\n        // vault should have corresponding permission\\n        SuUSD(usdp).burn(user, amount);\\n\\n        // after we burn stablecoin we need to take back collateral\\n        // does that happen in another contract which calls this function?\\n\\n        return debts[asset][user];\\n    }\\n\\n    // transfering chosen amount chosen asset from user to foundation address\\n    // can foundation address be changed?\\n    /// Yes, setFoundation.\\n    // why its being transferred from user? instead should be from this vault\\n    /// TODO: he doesn't have his vault with usdp\\n    // why amount is chosen manually? should be always the same value as in fees mapping\\n    /// this is just tranfer function, manager calc fees\\n    function chargeFee(address asset, address user, uint amount) external hasVaultAccess notLiquidating(asset, user) {\\n        if (amount != 0) {\\n            TransferHelper.safeTransferFrom(asset, user, vaultParameters.foundation(), amount);\\n        }\\n    }\\n\\n    // position liquidation being triggerred by another contract\\n    // initial price is passed here but better it would be accessed from mapping directly\\n    /// it's Vault so Manager does tells it what to do.\\n    function triggerLiquidation(\\n        address asset,\\n        address positionOwner,\\n        uint initialPrice\\n    )\\n    external\\n    hasVaultAccess\\n    notLiquidating(asset, positionOwner)\\n    {\\n        // why debt recalculation is needed and which cases it can be outdated?\\n        /// because function called from CDPManger01.triggerLiquidation which doesn't call update\\n        debts[asset][positionOwner] = getTotalDebt(asset, positionOwner);\\n\\n        // remember when liquidation start and which price\\n        liquidationBlock[asset][positionOwner] = block.number;\\n        liquidationPrice[asset][positionOwner] = initialPrice;\\n    }\\n\\n\\n\\n\\n     // liquidation can happen after liquidator is chosen through auction\\n     // and auction starts after liquidation starting process has triggered\\n     /// YES\\n     // liquidator accepts a deal to give minimum amount of stablecoin and receive all position collateral\\n     /// NO, \\n     // mainAsset is collateral\\n     /// YES\\n     // why col is needed? can be ignored\\n     /// CORRECT\\n     // what is repayment and what is penalty?\\n     /// \\n     // what happens if liquidator does not execute agreed transaction?\\n     /// \\n     // borrower should receive some part of stablecoin given by liquidator\\n     /// POSSIBLY\\n     // how is that portion calculated and where the rest goes?\\n     /// YES, please see _liquidate at LiquidationAunction02\\n     // will stablecoin paid by liquidator be burned immediately?\\n     /// Yes\\n     // how can cascading liquidation happen step by step?\\n     /// please see https://ratiofinance.medium.com/ratio-risk-lesson-2-cascading-liquidations-e91e04050f47\\n    function liquidate(\\n        address asset,\\n        address positionOwner,\\n        uint mainAssetToLiquidator,\\n        uint colToLiquidator,\\n        uint mainAssetToPositionOwner,\\n        uint colToPositionOwner,\\n        uint repayment,\\n        uint penalty,\\n        address liquidator\\n    )\\n        external\\n        hasVaultAccess\\n    {\\n        require(liquidationBlock[asset][positionOwner] != 0, \\\"Unit Protocol: NOT_TRIGGERED_LIQUIDATION\\\");\\n\\n        uint mainAssetInPosition = collaterals[asset][positionOwner];\\n\\n        uint mainAssetToFoundation = mainAssetInPosition.sub(mainAssetToLiquidator).sub(mainAssetToPositionOwner);\\n\\n        uint colInPosition = colToken[asset][positionOwner];\\n        uint colToFoundation = colInPosition.sub(colToLiquidator).sub(colToPositionOwner);\\n\\n        delete liquidationPrice[asset][positionOwner];\\n        delete liquidationBlock[asset][positionOwner];\\n        delete debts[asset][positionOwner];\\n        delete collaterals[asset][positionOwner];\\n        delete colToken[asset][positionOwner];\\n\\n        destroy(asset, positionOwner);\\n\\n        if (repayment > penalty) {\\n            if (penalty != 0) {\\n                TransferHelper.safeTransferFrom(usdp, liquidator, vaultParameters.foundation(), penalty);\\n            }\\n            SuUSD(usdp).burn(liquidator, repayment.sub(penalty));\\n        } else {\\n            if (repayment != 0) {\\n                TransferHelper.safeTransferFrom(usdp, liquidator, vaultParameters.foundation(), repayment);\\n            }\\n        }\\n\\n        if (mainAssetToLiquidator != 0) {\\n            TransferHelper.safeTransfer(asset, liquidator, mainAssetToLiquidator);\\n        }\\n\\n        if (colToLiquidator != 0) {\\n            TransferHelper.safeTransfer(col, liquidator, colToLiquidator);\\n        }\\n\\n        if (mainAssetToPositionOwner != 0) {\\n            TransferHelper.safeTransfer(asset, positionOwner, mainAssetToPositionOwner);\\n        }\\n\\n        if (colToPositionOwner != 0) {\\n            TransferHelper.safeTransfer(col, positionOwner, colToPositionOwner);\\n        }\\n\\n        if (mainAssetToFoundation != 0) {\\n            TransferHelper.safeTransfer(asset, vaultParameters.foundation(), mainAssetToFoundation);\\n        }\\n\\n        if (colToFoundation != 0) {\\n            TransferHelper.safeTransfer(col, vaultParameters.foundation(), colToFoundation);\\n        }\\n    }\\n\\n    // oracle type can be changed manager, under which conditions?\\n    /// any time\\n    function changeOracleType(address asset, address user, uint newOracleType) external onlyManager {\\n        oracleType[asset][user] = newOracleType;\\n    }\\n\\n    // total dept is calculated as current debt with added calculated fee\\n    /// they don't use it in practice\\n    function getTotalDebt(address asset, address user) public view returns (uint) {\\n        uint debt = debts[asset][user];\\n        if (liquidationBlock[asset][user] != 0) return debt;\\n        uint fee = calculateFee(asset, user, debt);\\n        return debt.add(fee);\\n    }\\n\\n     // fee is increased with time and \\n     /// YES\\n     // decreased when partial repayment is made \\n     /// No, any call of valult.update would calc fee in debt and restart fee timer\\n    function calculateFee(address asset, address user, uint amount) public view returns (uint) {\\n        uint sFeePercent = stabilityFee[asset][user];\\n        uint timePast = block.timestamp.sub(lastUpdate[asset][user]);\\n\\n        return amount.mul(sFeePercent).mul(timePast).div(365 days).div(DENOMINATOR_1E5);\\n    }\\n}\\n\",\"keccak256\":\"0x383c973598a4327362cecf514b014cccb0a82063a0fead879848fff3ddb4f4ea\",\"license\":\"BSL 1.1\"},\"contracts/SuVaultParameters.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\r\\n\\r\\n/*\\r\\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\\r\\n*/\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\n// proxy for VaultParameters - other contracts should be inherited from here\\r\\n// this contract contains modifiers used in VaultParameters contract\\r\\n// it should be an abstract class because it cannot by instantiated/deployed directly,\\r\\n// its supposed to be inherited by VaultParameters contract which is deployed \\r\\n/// yes\\r\\ncontract Auth {\\r\\n    // but actually it does store address to vaultParameters contract?\\r\\n    SuVaultParameters public vaultParameters;\\r\\n\\r\\n    // its the same time parent of VaultParameters (inheritance)\\r\\n    // and same time its linking to VaultParameters (composition)\\r\\n    // one approach should be chosen: either inheritance or composition\\r\\n    // otherwise its very confusing\\r\\n    /// No, it's singleton\\r\\n    constructor(address _parameters) {\\r\\n        vaultParameters = SuVaultParameters(_parameters);\\r\\n    }\\r\\n\\r\\n    // check manager permission\\r\\n    modifier onlyManager() {\\r\\n        require(vaultParameters.isManager(msg.sender), \\\"Unit Protocol: onlyManager AUTH_FAILED\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // check permission to modify vault\\r\\n    modifier hasVaultAccess() {\\r\\n        require(vaultParameters.canModifyVault(msg.sender), \\\"Unit Protocol: hasVaultAccess AUTH_FAILED\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // check vault permission\\r\\n    modifier onlyVault() {\\r\\n        require(msg.sender == vaultParameters.vault(), \\\"Unit Protocol: onlyVault AUTH_FAILED\\\");\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n// VaultParameters is Singleton for Access Control\\r\\n// this looks like configuration contract\\r\\n// what are the rules to determine these configs for each new allowed collateral?\\r\\n/// yes, and for all collaterals\\r\\n// is DAO allowed to choose parameters for existing collaterals?\\r\\n/// \\r\\n// are there any limits to be enforced? i.e. fee cannot be over 100% percent\\r\\n/// No, but it's a good idea to have it\\r\\ncontract SuVaultParameters is Auth {\\r\\n    // stability fee can be different for each collateral\\r\\n    /// yes\\r\\n    mapping(address => uint) public stabilityFee;\\r\\n\\r\\n    // liquidation fee too can be different\\r\\n    /// yes\\r\\n    mapping(address => uint) public liquidationFee;\\r\\n\\r\\n    // map token to USDP mint limit\\r\\n    /// yes, limit for each collateral-assert\\r\\n    mapping(address => uint) public tokenDebtLimit;\\r\\n\\r\\n    // permissions to modify the Vault\\r\\n    mapping(address => bool) public canModifyVault;\\r\\n\\r\\n    // whether an account is manager\\r\\n    mapping(address => bool) public isManager;\\r\\n\\r\\n    // whether an oracle is enabled\\r\\n    /// TODO:\\r\\n    mapping(uint => mapping (address => bool)) public isOracleTypeEnabled;\\r\\n\\r\\n    // linked to the vault contract\\r\\n    // I think its better to inherit Vault from VaultParameters\\r\\n    /// NO, needed for onlyVault modifier\\r\\n    address payable public vault;\\r\\n\\r\\n    // what is foundation, DAO?\\r\\n    /// Beneficiaty as VotingEscrow.vy\\r\\n    address public foundation;\\r\\n\\r\\n    // creator of contract is manager, can it be the same as DAO or can it be removed later?\\r\\n    /// YES\\r\\n    // how can vault address be known at this moment?\\r\\n    /// Precult based on CREATE spec\\r\\n    // can be created another function to set vault address once deployed?\\r\\n    /// Yes, possibly with some logic change\\r\\n    constructor(address payable _vault, address _foundation) Auth(address(this)) {\\r\\n        require(_vault != address(0), \\\"Unit Protocol: ZERO_ADDRESS\\\");\\r\\n        require(_foundation != address(0), \\\"Unit Protocol: ZERO_ADDRESS\\\");\\r\\n\\r\\n        isManager[msg.sender] = true;\\r\\n        vault = _vault;\\r\\n        foundation = _foundation;\\r\\n    }\\r\\n\\r\\n     // existing managers can enable other managers\\r\\n     // one manager can disable all other managers - dangerous?\\r\\n     /// YES, could be dangerous\\r\\n    function setManager(address who, bool permit) external onlyManager {\\r\\n        isManager[who] = permit;\\r\\n    }\\r\\n\\r\\n    // similar function can be added to setVault\\r\\n    function setFoundation(address newFoundation) external onlyManager {\\r\\n        require(newFoundation != address(0), \\\"Unit Protocol: ZERO_ADDRESS\\\");\\r\\n        foundation = newFoundation;\\r\\n    }\\r\\n\\r\\n     // manager is allowed to add new collaterals and modify existing ones\\r\\n     // I think creating new collaterals and modifying existing ones should be separate functions\\r\\n     /// Yes, for sercurity reason, it's possible to add events for creating and edititing \\r\\n     // also different event should be emitted NewCollateral UpdatedCollateral accordingly\\r\\n     // those events can be handled on frontend to notify user about any changes in rules\\r\\n     /// Not sure it makes sense to split into create/edit functions\\r\\n    function setCollateral(\\r\\n        address asset,\\r\\n        uint stabilityFeeValue,\\r\\n        uint liquidationFeeValue,\\r\\n        uint usdpLimit\\r\\n    ) external onlyManager {\\r\\n        // stability fee should be validated in range, what is stability fee should be described here?\\r\\n        setStabilityFee(asset, stabilityFeeValue);\\r\\n        // liquidation fee should be validated in range, what is liquidation fee should be explained?\\r\\n        setLiquidationFee(asset, liquidationFeeValue);\\r\\n        // why debt limit for collateral is necessary? to manage risks in case of collateral failure?\\r\\n        setTokenDebtLimit(asset, usdpLimit);\\r\\n    }\\r\\n\\r\\n     // manager can choose who is allowed to modify vault, \\r\\n     // what does it mean to modify vault and why permission separate from manager himself?\\r\\n     /// https://en.wikipedia.org/wiki/Principle_of_least_privilege \\r\\n    function setVaultAccess(address who, bool permit) external onlyManager {\\r\\n        canModifyVault[who] = permit;\\r\\n    }\\r\\n\\r\\n    // stability fee is measured as the number of coins per year or percentage? \\r\\n    // this should be clarified in argument name i.e. stabilityFeePercentageYearly\\r\\n    /// No, it's APR ( per year, see calculateFee) percentrage, fee percentage; 3 decimals.\\r\\n    /// YES, self-documented code-style is the best practice.\\r\\n    function setStabilityFee(address asset, uint newValue) public onlyManager {\\r\\n        stabilityFee[asset] = newValue;\\r\\n    }\\r\\n\\r\\n    // the same with liquidation fee is not clear\\r\\n    /// % 0 decimals, needede to get better variable names\\r\\n    function setLiquidationFee(address asset, uint newValue) public onlyManager {\\r\\n        require(newValue <= 100, \\\"Unit Protocol: VALUE_OUT_OF_RANGE\\\");\\r\\n        liquidationFee[asset] = newValue;\\r\\n    }\\r\\n\\r\\n     // what are allowed types? enum should be defined\\r\\n     // types out of range should fail transaction\\r\\n    /// All oracles implementation are numbered, so some of them support this particular asset\\r\\n    function setOracleType(uint _type, address asset, bool enabled) public onlyManager {\\r\\n        isOracleTypeEnabled[_type][asset] = enabled;\\r\\n    }\\r\\n\\r\\n     // debt limit can be changed for any collateral along with liquidation and stability fees\\r\\n     // seems like managers have too much power - that can be dangerous given multiple managers?\\r\\n     /// Yes, application of  principle of least priviledge needed\\r\\n    function setTokenDebtLimit(address asset, uint limit) public onlyManager {\\r\\n        tokenDebtLimit[asset] = limit;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xbc2ccb04d4de0500943dc32b624de04fb451b928c8a65c6928ca78ee39d99693\",\"license\":\"BSL 1.1\"},\"contracts/original-unit-contracts/helpers/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\r\\n\\r\\n/*\\r\\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\\r\\n*/\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary SafeMath {\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        c = a * b;\\r\\n        assert(c / a == b);\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b != 0, \\\"SafeMath: division by zero\\\");\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        assert(b <= a);\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n        c = a + b;\\r\\n        assert(c >= a);\\r\\n        return c;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4a7e8b8106c4b6992296938b2537dd8f55006faacbfa026fedd74c532aabd4ab\",\"license\":\"BSL 1.1\"},\"contracts/original-unit-contracts/helpers/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n\\r\\n/*\\r\\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\\r\\n*/\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// library to extend contracts with helper methods\\r\\n// which are the contracts where its being used?\\r\\nlibrary TransferHelper {\\r\\n    // internal function to approve\\r\\n    function safeApprove(address token, address to, uint value) internal {\\r\\n        // function signature should be inline variable instead \\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\r\\n        \\r\\n        // what is difference between success=false OR data.length = 0 OR data encoded ?\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\r\\n    }\\r\\n\\r\\n    // internal function to transfer\\r\\n    function safeTransfer(address token, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\r\\n    }\\r\\n\\r\\n    // internal function to transfer from\\r\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\r\\n    }\\r\\n\\r\\n    // internal function to transfer eth\\r\\n    function safeTransferETH(address to, uint value) internal {\\r\\n        (bool success,) = to.call{value:value}(new bytes(0));\\r\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe9fa1afaa48bc26b0611de34152224ccb9aca3de18a380eb72d23a02cc69a11a\",\"license\":\"GPL-3.0-or-later\"},\"contracts/original-unit-contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\r\\n\\r\\n/*\\r\\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\\r\\n*/\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IWETH {\\r\\n    function deposit() external payable;\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n    function withdraw(uint) external;\\r\\n}\",\"keccak256\":\"0x00be9df600655c54a496a97f14ece254d03c01b9c6ae791ca2509d7f281ffb57\",\"license\":\"BSL 1.1\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b506040516200350a3803806200350a83398101604081905262000034916200007e565b600080546001600160a01b039095166001600160a01b0319909516949094179093556001600160601b0319606092831b811660805290821b811660c05291901b1660a052620000fe565b6000806000806080858703121562000094578384fd5b8451620000a181620000e5565b6020860151909450620000b481620000e5565b6040860151909350620000c781620000e5565b6060860151909250620000da81620000e5565b939692955090935050565b6001600160a01b0381168114620000fb57600080fd5b50565b60805160601c60a05160601c60c05160601c613355620001b5600039600081816104f101528181610c3a01528181611039015281816110ed015281816111a30152611a2d015260008181610212015281816103d80152818161089e015281816109360152818161098601528181612011015281816120a10152818161211b015261216e0152600081816105b401528181611269015281816112ab0152818161137001528181612347015261284801526133556000f3fe6080604052600436106102025760003560e01c806388ad7a611161011d578063c1a3b9a6116100b0578063d6446d431161007f578063e51e119e11610064578063e51e119e14610751578063ee18359e14610789578063f190439e146107a957600080fd5b8063d6446d4314610711578063e0ede1cd1461073157600080fd5b8063c1a3b9a614610679578063c640752d14610699578063d3511d6f146106b9578063d4b93dbe146106d957600080fd5b8063aa9c2c16116100ec578063aa9c2c16146105d6578063aca345ee1461060e578063ad9d4ba31461062e578063b4da092c1461064157600080fd5b806388ad7a61146105335780638d7cad881461056b578063971182c61461058b578063a78695b0146105a257600080fd5b806340f626e31161019557806362b40f9f1161016457806362b40f9f1461049f578063742a326e146104bf57806374e6076c146104df5780637ca87cb61461051357600080fd5b806340f626e31461041257806347ba94f9146104275780634ac1c33d146104475780635224372c1461047f57600080fd5b806330c77c7e116101d157806330c77c7e1461034e5780633ba0af81146103865780633d1aa963146103a65780633fc8cef3146103c657600080fd5b80630fbac4e61461028b5780631b9a91a4146102d65780631ce4b4a7146102f65780631da649cf1461032e57600080fd5b3661028657336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146102845760405162461bcd60e51b815260206004820152601960248201527f556e69742050726f746f636f6c3a20524553545249435445440000000000000060448201526064015b60405180910390fd5b005b600080fd5b34801561029757600080fd5b506102c36102a63660046130d5565b600560209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b3480156102e257600080fd5b506102846102f13660046130aa565b6107d6565b34801561030257600080fd5b506102c36103113660046130d5565b600460209081526000928352604080842090915290825290205481565b34801561033a57600080fd5b506102c361034936600461310d565b610a3d565b34801561035a57600080fd5b506102c36103693660046130d5565b600960209081526000928352604080842090915290825290205481565b34801561039257600080fd5b506102846103a136600461314d565b610cca565b3480156103b257600080fd5b506102846103c136600461310d565b611428565b3480156103d257600080fd5b506103fa7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016102cd565b34801561041e57600080fd5b506102c3606481565b34801561043357600080fd5b5061028461044236600461310d565b6115fb565b34801561045357600080fd5b506102c36104623660046130d5565b600360209081526000928352604080842090915290825290205481565b34801561048b57600080fd5b506102c361049a36600461310d565b61172d565b3480156104ab57600080fd5b506102846104ba3660046130d5565b611aba565b3480156104cb57600080fd5b506102846104da36600461310d565b611c5f565b3480156104eb57600080fd5b506103fa7f000000000000000000000000000000000000000000000000000000000000000081565b34801561051f57600080fd5b506102c361052e36600461310d565b611dfa565b34801561053f57600080fd5b506102c361054e3660046130d5565b600a60209081526000928352604080842090915290825290205481565b34801561057757600080fd5b5061028461058636600461310d565b611e77565b34801561059757600080fd5b506102c3620186a081565b3480156105ae57600080fd5b506103fa7f000000000000000000000000000000000000000000000000000000000000000081565b3480156105e257600080fd5b506102c36105f13660046130d5565b600860209081526000928352604080842090915290825290205481565b34801561061a57600080fd5b506000546103fa906001600160a01b031681565b61028461063c366004613072565b61200f565b34801561064d57600080fd5b506102c361065c3660046130d5565b600260209081526000928352604080842090915290825290205481565b34801561068557600080fd5b5061028461069436600461310d565b6121b5565b3480156106a557600080fd5b506102846106b43660046130d5565b61236d565b3480156106c557600080fd5b506102846106d436600461310d565b6126b6565b3480156106e557600080fd5b506102c36106f43660046130d5565b600760209081526000928352604080842090915290825290205481565b34801561071d57600080fd5b506102c361072c3660046130d5565b61286f565b34801561073d57600080fd5b5061028461074c3660046130d5565b6128dc565b34801561075d57600080fd5b506102c361076c3660046130d5565b600160209081526000928352604080842090915290825290205481565b34801561079557600080fd5b506102846107a436600461310d565b612a41565b3480156107b557600080fd5b506102c36107c4366004613072565b60066020526000908152604090205481565b60005460405162db063b60e41b81523360048201526001600160a01b0390911690630db063b09060240160206040518083038186803b15801561081857600080fd5b505afa15801561082c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085091906131d2565b61089c5760405162461bcd60e51b815260206004820152602960248201526000805160206132e0833981519152604482015268151217d1905253115160ba1b606482015260840161027b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0381811660009081526004602090815260408083209387168352929052205483901561092c5760405162461bcd60e51b8152602060048201526023602482015260008051602061330083398151915260448201526224a7a760e91b606482015260840161027b565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660009081526001602090815260408083209388168352929052205461097c9084612bda565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166000818152600160209081526040808320948a16835293905282902092909255517f2e1a7d4d00000000000000000000000000000000000000000000000000000000815260048101859052632e1a7d4d90602401600060405180830381600087803b158015610a1557600080fd5b505af1158015610a29573d6000803e3d6000fd5b50505050610a378484612c0b565b50505050565b6000805460405162db063b60e41b81523360048201526001600160a01b0390911690630db063b09060240160206040518083038186803b158015610a8057600080fd5b505afa158015610a94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab891906131d2565b610b045760405162461bcd60e51b815260206004820152602960248201526000805160206132e0833981519152604482015268151217d1905253115160ba1b606482015260840161027b565b6001600160a01b038085166000908152600460209081526040808320938716835292905220548490849015610b755760405162461bcd60e51b8152602060048201526023602482015260008051602061330083398151915260448201526224a7a760e91b606482015260840161027b565b6001600160a01b03808716600090815260036020908152604080832093891683529290522054610ba58186612bda565b6001600160a01b038089166000818152600360209081526040808320948c168352938152838220949094559081526006909252902054610be59086612bda565b6001600160a01b03888116600090815260066020526040908190209290925590517f9dc29fac0000000000000000000000000000000000000000000000000000000081528782166004820152602481018790527f000000000000000000000000000000000000000000000000000000000000000090911690639dc29fac90604401600060405180830381600087803b158015610c8057600080fd5b505af1158015610c94573d6000803e3d6000fd5b5050506001600160a01b038089166000908152600360209081526040808320938b16835292905220549450505050509392505050565b60005460405162db063b60e41b81523360048201526001600160a01b0390911690630db063b09060240160206040518083038186803b158015610d0c57600080fd5b505afa158015610d20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4491906131d2565b610d905760405162461bcd60e51b815260206004820152602960248201526000805160206132e0833981519152604482015268151217d1905253115160ba1b606482015260840161027b565b6001600160a01b03808a166000908152600460209081526040808320938c1683529290522054610e285760405162461bcd60e51b815260206004820152602860248201527f556e69742050726f746f636f6c3a204e4f545f5452494747455245445f4c495160448201527f5549444154494f4e000000000000000000000000000000000000000000000000606482015260840161027b565b6001600160a01b03808a166000908152600160209081526040808320938c1683529290529081205490610e6587610e5f848c612bda565b90612bda565b6001600160a01b03808d166000908152600260209081526040808320938f16835292905290812054919250610e9e88610e5f848d612bda565b9050600560008e6001600160a01b03166001600160a01b0316815260200190815260200160002060008d6001600160a01b03166001600160a01b0316815260200190815260200160002060009055600460008e6001600160a01b03166001600160a01b0316815260200190815260200160002060008d6001600160a01b03166001600160a01b0316815260200190815260200160002060009055600360008e6001600160a01b03166001600160a01b0316815260200190815260200160002060008d6001600160a01b03166001600160a01b0316815260200190815260200160002060009055600160008e6001600160a01b03166001600160a01b0316815260200190815260200160002060008d6001600160a01b03166001600160a01b0316815260200190815260200160002060009055600260008e6001600160a01b03166001600160a01b0316815260200190815260200160002060008d6001600160a01b03166001600160a01b03168152602001908152602001600020600090556110268d8d611aba565b858711156111985785156110e3576110e37f00000000000000000000000000000000000000000000000000000000000000008660008054906101000a90046001600160a01b03166001600160a01b03166341fbb0506040518163ffffffff1660e01b815260040160206040518083038186803b1580156110a557600080fd5b505afa1580156110b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110dd919061308e565b89612cf3565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016639dc29fac8661111d8a8a612bda565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801561117b57600080fd5b505af115801561118f573d6000803e3d6000fd5b5050505061124d565b861561124d5761124d7f00000000000000000000000000000000000000000000000000000000000000008660008054906101000a90046001600160a01b03166001600160a01b03166341fbb0506040518163ffffffff1660e01b815260040160206040518083038186803b15801561120f57600080fd5b505afa158015611223573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611247919061308e565b8a612cf3565b8a1561125e5761125e8d868d612e6a565b891561128f5761128f7f0000000000000000000000000000000000000000000000000000000000000000868c612e6a565b88156112a0576112a08d8d8b612e6a565b87156112d1576112d17f00000000000000000000000000000000000000000000000000000000000000008d8a612e6a565b8215611365576113658d60008054906101000a90046001600160a01b03166001600160a01b03166341fbb0506040518163ffffffff1660e01b815260040160206040518083038186803b15801561132757600080fd5b505afa15801561133b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061135f919061308e565b85612e6a565b8015611419576114197f000000000000000000000000000000000000000000000000000000000000000060008054906101000a90046001600160a01b03166001600160a01b03166341fbb0506040518163ffffffff1660e01b815260040160206040518083038186803b1580156113db57600080fd5b505afa1580156113ef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611413919061308e565b83612e6a565b50505050505050505050505050565b60005460405162db063b60e41b81523360048201526001600160a01b0390911690630db063b09060240160206040518083038186803b15801561146a57600080fd5b505afa15801561147e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a291906131d2565b6114ee5760405162461bcd60e51b815260206004820152602960248201526000805160206132e0833981519152604482015268151217d1905253115160ba1b606482015260840161027b565b6001600160a01b03808416600090815260046020908152604080832093861683529290522054839083901561155f5760405162461bcd60e51b8152602060048201526023602482015260008051602061330083398151915260448201526224a7a760e91b606482015260840161027b565b82156115f4576115f4858560008054906101000a90046001600160a01b03166001600160a01b03166341fbb0506040518163ffffffff1660e01b815260040160206040518083038186803b1580156115b657600080fd5b505afa1580156115ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ee919061308e565b86612cf3565b5050505050565b6000546040517ff3ae24150000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b039091169063f3ae24159060240160206040518083038186803b15801561165757600080fd5b505afa15801561166b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061168f91906131d2565b6117015760405162461bcd60e51b815260206004820152602660248201527f556e69742050726f746f636f6c3a206f6e6c794d616e6167657220415554485f60448201527f4641494c45440000000000000000000000000000000000000000000000000000606482015260840161027b565b6001600160a01b0392831660009081526009602090815260408083209490951682529290925291902055565b6000805460405162db063b60e41b81523360048201526001600160a01b0390911690630db063b09060240160206040518083038186803b15801561177057600080fd5b505afa158015611784573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a891906131d2565b6117f45760405162461bcd60e51b815260206004820152602960248201526000805160206132e0833981519152604482015268151217d1905253115160ba1b606482015260840161027b565b6001600160a01b0380851660009081526004602090815260408083209387168352929052205484908490156118655760405162461bcd60e51b8152602060048201526023602482015260008051602061330083398151915260448201526224a7a760e91b606482015260840161027b565b61186f868661236d565b6001600160a01b0380871660009081526003602090815260408083209389168352929052205461189f9085612fac565b6001600160a01b038088166000818152600360209081526040808320948b1683529381528382209490945590815260069092529020546118df9085612fac565b6001600160a01b03878116600081815260066020526040808220949094555492517ff2e323ba000000000000000000000000000000000000000000000000000000008152600481019190915291169063f2e323ba9060240160206040518083038186803b15801561194f57600080fd5b505afa158015611963573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061198791906131f2565b6001600160a01b03871660009081526006602052604090205411156119ee5760405162461bcd60e51b815260206004820152601f60248201527f556e69742050726f746f636f6c3a2041535345545f444542545f4c494d495400604482015260640161027b565b6040517f40c10f190000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152602482018690527f000000000000000000000000000000000000000000000000000000000000000016906340c10f1990604401600060405180830381600087803b158015611a7157600080fd5b505af1158015611a85573d6000803e3d6000fd5b5050506001600160a01b038088166000908152600360209081526040808320938a168352929052205493505050509392505050565b60005460405162db063b60e41b81523360048201526001600160a01b0390911690630db063b09060240160206040518083038186803b158015611afc57600080fd5b505afa158015611b10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b3491906131d2565b611b805760405162461bcd60e51b815260206004820152602960248201526000805160206132e0833981519152604482015268151217d1905253115160ba1b606482015260840161027b565b6001600160a01b038083166000908152600460209081526040808320938516835292905220548290829015611bf15760405162461bcd60e51b8152602060048201526023602482015260008051602061330083398151915260448201526224a7a760e91b606482015260840161027b565b50506001600160a01b03918216600081815260076020908152604080832094909516808352938152848220829055828252600981528482208483528152848220829055828252600a815284822084835281528482208290559181526008825283812092815291905290812055565b60005460405162db063b60e41b81523360048201526001600160a01b0390911690630db063b09060240160206040518083038186803b158015611ca157600080fd5b505afa158015611cb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd991906131d2565b611d255760405162461bcd60e51b815260206004820152602960248201526000805160206132e0833981519152604482015268151217d1905253115160ba1b606482015260840161027b565b6001600160a01b038084166000908152600460209081526040808320938616835292905220548390839015611d965760405162461bcd60e51b8152602060048201526023602482015260008051602061330083398151915260448201526224a7a760e91b606482015260840161027b565b611da0858561286f565b6001600160a01b039586166000818152600360209081526040808320989099168083529781528882209390935581815260048352878120878252835287812043905590815260058252868120958152949052505091902055565b6001600160a01b03808416600081815260076020908152604080832094871680845294825280832054938352600a8252808320948352939052918220548290611e44904290612bda565b9050611e6d620186a0611e676301e133808185611e618a89612fd8565b90612fd8565b90613019565b9695505050505050565b60005460405162db063b60e41b81523360048201526001600160a01b0390911690630db063b09060240160206040518083038186803b158015611eb957600080fd5b505afa158015611ecd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ef191906131d2565b611f3d5760405162461bcd60e51b815260206004820152602960248201526000805160206132e0833981519152604482015268151217d1905253115160ba1b606482015260840161027b565b6001600160a01b038084166000908152600460209081526040808320938616835292905220548390839015611fae5760405162461bcd60e51b8152602060048201526023602482015260008051602061330083398151915260448201526224a7a760e91b606482015260840161027b565b6001600160a01b03808616600090815260016020908152604080832093881683529290522054611fde9084612bda565b6001600160a01b038087166000908152600160209081526040808320938916835292905220556115f4858585612e6a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0381811660009081526004602090815260408083209386168352929052205482901561209f5760405162461bcd60e51b8152602060048201526023602482015260008051602061330083398151915260448201526224a7a760e91b606482015260840161027b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156120fa57600080fd5b505af115801561210e573d6000803e3d6000fd5b5050506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166000908152600160209081526040808320938916835292905220546121649250905034612fac565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600090815260016020908152604080832097909316825295909552909320929092555050565b60005460405162db063b60e41b81523360048201526001600160a01b0390911690630db063b09060240160206040518083038186803b1580156121f757600080fd5b505afa15801561220b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061222f91906131d2565b61227b5760405162461bcd60e51b815260206004820152602960248201526000805160206132e0833981519152604482015268151217d1905253115160ba1b606482015260840161027b565b6001600160a01b0380841660009081526004602090815260408083209386168352929052205483908390156122ec5760405162461bcd60e51b8152602060048201526023602482015260008051602061330083398151915260448201526224a7a760e91b606482015260840161027b565b6001600160a01b0380861660009081526002602090815260408083209388168352929052205461231c9084612bda565b6001600160a01b038087166000908152600260209081526040808320938916835292905220556115f47f00000000000000000000000000000000000000000000000000000000000000008585612e6a565b60005460405162db063b60e41b81523360048201526001600160a01b0390911690630db063b09060240160206040518083038186803b1580156123af57600080fd5b505afa1580156123c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123e791906131d2565b6124335760405162461bcd60e51b815260206004820152602960248201526000805160206132e0833981519152604482015268151217d1905253115160ba1b606482015260840161027b565b6001600160a01b0380831660009081526004602090815260408083209385168352929052205482908290156124a45760405162461bcd60e51b8152602060048201526023602482015260008051602061330083398151915260448201526224a7a760e91b606482015260840161027b565b60006124b0858561286f565b6001600160a01b038087166000818152600360209081526040808320948a168352938152838220549282526006905291909120549192506124fd9183916124f79190612bda565b90612fac565b6001600160a01b0386811660008181526006602090815260408083209590955560038152848220898516835290528381208590555492517f997a2572000000000000000000000000000000000000000000000000000000008152600481019190915291169063997a25729060240160206040518083038186803b15801561258357600080fd5b505afa158015612597573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125bb91906131f2565b6001600160a01b0386811660008181526007602090815260408083208a86168452909152808220949094555492517fc8023af4000000000000000000000000000000000000000000000000000000008152600481019190915291169063c8023af49060240160206040518083038186803b15801561263857600080fd5b505afa15801561264c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061267091906131f2565b6001600160a01b0395861660008181526008602090815260408083209890991680835297815288822093909355908152600a825286812095815294905250505020429055565b60005460405162db063b60e41b81523360048201526001600160a01b0390911690630db063b09060240160206040518083038186803b1580156126f857600080fd5b505afa15801561270c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061273091906131d2565b61277c5760405162461bcd60e51b815260206004820152602960248201526000805160206132e0833981519152604482015268151217d1905253115160ba1b606482015260840161027b565b6001600160a01b0380841660009081526004602090815260408083209386168352929052205483908390156127ed5760405162461bcd60e51b8152602060048201526023602482015260008051602061330083398151915260448201526224a7a760e91b606482015260840161027b565b6001600160a01b0380861660009081526002602090815260408083209388168352929052205461281d9084612fac565b6001600160a01b038087166000908152600260209081526040808320938916835292905220556115f47f0000000000000000000000000000000000000000000000000000000000000000853086612cf3565b6001600160a01b038083166000818152600360209081526040808320948616808452948252808320549383526004825280832094835293905291822054156128b85790506128d6565b60006128c5858584611dfa565b90506128d18282612fac565b925050505b92915050565b60005460405162db063b60e41b81523360048201526001600160a01b0390911690630db063b09060240160206040518083038186803b15801561291e57600080fd5b505afa158015612932573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061295691906131d2565b6129a25760405162461bcd60e51b815260206004820152602960248201526000805160206132e0833981519152604482015268151217d1905253115160ba1b606482015260840161027b565b6001600160a01b038083166000908152600460209081526040808320938516835292905220548290829015612a135760405162461bcd60e51b8152602060048201526023602482015260008051602061330083398151915260448201526224a7a760e91b606482015260840161027b565b50506001600160a01b0391821660009081526004602090815260408083209390941682529190915290812055565b60005460405162db063b60e41b81523360048201526001600160a01b0390911690630db063b09060240160206040518083038186803b158015612a8357600080fd5b505afa158015612a97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612abb91906131d2565b612b075760405162461bcd60e51b815260206004820152602960248201526000805160206132e0833981519152604482015268151217d1905253115160ba1b606482015260840161027b565b6001600160a01b038084166000908152600460209081526040808320938616835292905220548390839015612b785760405162461bcd60e51b8152602060048201526023602482015260008051602061330083398151915260448201526224a7a760e91b606482015260840161027b565b6001600160a01b03808616600090815260016020908152604080832093881683529290522054612ba89084612fac565b6001600160a01b038087166000908152600160209081526040808320938916835292905220556115f485853086612cf3565b600082821115612bfa57634e487b7160e01b600052600160045260246000fd5b612c04828461329a565b9392505050565b604080516000808252602082019092526001600160a01b038416908390604051612c35919061320a565b60006040518083038185875af1925050503d8060008114612c72576040519150601f19603f3d011682016040523d82523d6000602084013e612c77565b606091505b5050905080612cee5760405162461bcd60e51b815260206004820152602360248201527f5472616e7366657248656c7065723a204554485f5452414e534645525f46414960448201527f4c45440000000000000000000000000000000000000000000000000000000000606482015260840161027b565b505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd000000000000000000000000000000000000000000000000000000001790529151600092839290881691612d85919061320a565b6000604051808303816000865af19150503d8060008114612dc2576040519150601f19603f3d011682016040523d82523d6000602084013e612dc7565b606091505b5091509150818015612df1575080511580612df1575080806020019051810190612df191906131d2565b612e625760405162461bcd60e51b8152602060048201526024808201527f5472616e7366657248656c7065723a205452414e534645525f46524f4d5f464160448201527f494c454400000000000000000000000000000000000000000000000000000000606482015260840161027b565b505050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790529151600092839290871691612ef4919061320a565b6000604051808303816000865af19150503d8060008114612f31576040519150601f19603f3d011682016040523d82523d6000602084013e612f36565b606091505b5091509150818015612f60575080511580612f60575080806020019051810190612f6091906131d2565b6115f45760405162461bcd60e51b815260206004820152601f60248201527f5472616e7366657248656c7065723a205452414e534645525f4641494c454400604482015260640161027b565b6000612fb88284613243565b9050828110156128d657634e487b7160e01b600052600160045260246000fd5b600082612fe7575060006128d6565b612ff1828461327b565b905081612ffe848361325b565b146128d657634e487b7160e01b600052600160045260246000fd5b6000816130685760405162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015260640161027b565b612c04828461325b565b600060208284031215613083578081fd5b8135612c04816132c7565b60006020828403121561309f578081fd5b8151612c04816132c7565b600080604083850312156130bc578081fd5b82356130c7816132c7565b946020939093013593505050565b600080604083850312156130e7578182fd5b82356130f2816132c7565b91506020830135613102816132c7565b809150509250929050565b600080600060608486031215613121578081fd5b833561312c816132c7565b9250602084013561313c816132c7565b929592945050506040919091013590565b60008060008060008060008060006101208a8c03121561316b578485fd5b8935613176816132c7565b985060208a0135613186816132c7565b975060408a0135965060608a0135955060808a0135945060a08a0135935060c08a0135925060e08a013591506101008a01356131c1816132c7565b809150509295985092959850929598565b6000602082840312156131e3578081fd5b81518015158114612c04578182fd5b600060208284031215613203578081fd5b5051919050565b60008251815b8181101561322a5760208186018101518583015201613210565b818111156132385782828501525b509190910192915050565b60008219821115613256576132566132b1565b500190565b60008261327657634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615613295576132956132b1565b500290565b6000828210156132ac576132ac6132b1565b500390565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03811681146132dc57600080fd5b5056fe556e69742050726f746f636f6c3a206861735661756c74416363657373204155556e69742050726f746f636f6c3a204c49515549444154494e475f504f534954a2646970667358221220b2458bef86d07a59a4bff602c82c57e2e20c7791bc22573bf838caea089f809f64736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106102025760003560e01c806388ad7a611161011d578063c1a3b9a6116100b0578063d6446d431161007f578063e51e119e11610064578063e51e119e14610751578063ee18359e14610789578063f190439e146107a957600080fd5b8063d6446d4314610711578063e0ede1cd1461073157600080fd5b8063c1a3b9a614610679578063c640752d14610699578063d3511d6f146106b9578063d4b93dbe146106d957600080fd5b8063aa9c2c16116100ec578063aa9c2c16146105d6578063aca345ee1461060e578063ad9d4ba31461062e578063b4da092c1461064157600080fd5b806388ad7a61146105335780638d7cad881461056b578063971182c61461058b578063a78695b0146105a257600080fd5b806340f626e31161019557806362b40f9f1161016457806362b40f9f1461049f578063742a326e146104bf57806374e6076c146104df5780637ca87cb61461051357600080fd5b806340f626e31461041257806347ba94f9146104275780634ac1c33d146104475780635224372c1461047f57600080fd5b806330c77c7e116101d157806330c77c7e1461034e5780633ba0af81146103865780633d1aa963146103a65780633fc8cef3146103c657600080fd5b80630fbac4e61461028b5780631b9a91a4146102d65780631ce4b4a7146102f65780631da649cf1461032e57600080fd5b3661028657336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146102845760405162461bcd60e51b815260206004820152601960248201527f556e69742050726f746f636f6c3a20524553545249435445440000000000000060448201526064015b60405180910390fd5b005b600080fd5b34801561029757600080fd5b506102c36102a63660046130d5565b600560209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b3480156102e257600080fd5b506102846102f13660046130aa565b6107d6565b34801561030257600080fd5b506102c36103113660046130d5565b600460209081526000928352604080842090915290825290205481565b34801561033a57600080fd5b506102c361034936600461310d565b610a3d565b34801561035a57600080fd5b506102c36103693660046130d5565b600960209081526000928352604080842090915290825290205481565b34801561039257600080fd5b506102846103a136600461314d565b610cca565b3480156103b257600080fd5b506102846103c136600461310d565b611428565b3480156103d257600080fd5b506103fa7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016102cd565b34801561041e57600080fd5b506102c3606481565b34801561043357600080fd5b5061028461044236600461310d565b6115fb565b34801561045357600080fd5b506102c36104623660046130d5565b600360209081526000928352604080842090915290825290205481565b34801561048b57600080fd5b506102c361049a36600461310d565b61172d565b3480156104ab57600080fd5b506102846104ba3660046130d5565b611aba565b3480156104cb57600080fd5b506102846104da36600461310d565b611c5f565b3480156104eb57600080fd5b506103fa7f000000000000000000000000000000000000000000000000000000000000000081565b34801561051f57600080fd5b506102c361052e36600461310d565b611dfa565b34801561053f57600080fd5b506102c361054e3660046130d5565b600a60209081526000928352604080842090915290825290205481565b34801561057757600080fd5b5061028461058636600461310d565b611e77565b34801561059757600080fd5b506102c3620186a081565b3480156105ae57600080fd5b506103fa7f000000000000000000000000000000000000000000000000000000000000000081565b3480156105e257600080fd5b506102c36105f13660046130d5565b600860209081526000928352604080842090915290825290205481565b34801561061a57600080fd5b506000546103fa906001600160a01b031681565b61028461063c366004613072565b61200f565b34801561064d57600080fd5b506102c361065c3660046130d5565b600260209081526000928352604080842090915290825290205481565b34801561068557600080fd5b5061028461069436600461310d565b6121b5565b3480156106a557600080fd5b506102846106b43660046130d5565b61236d565b3480156106c557600080fd5b506102846106d436600461310d565b6126b6565b3480156106e557600080fd5b506102c36106f43660046130d5565b600760209081526000928352604080842090915290825290205481565b34801561071d57600080fd5b506102c361072c3660046130d5565b61286f565b34801561073d57600080fd5b5061028461074c3660046130d5565b6128dc565b34801561075d57600080fd5b506102c361076c3660046130d5565b600160209081526000928352604080842090915290825290205481565b34801561079557600080fd5b506102846107a436600461310d565b612a41565b3480156107b557600080fd5b506102c36107c4366004613072565b60066020526000908152604090205481565b60005460405162db063b60e41b81523360048201526001600160a01b0390911690630db063b09060240160206040518083038186803b15801561081857600080fd5b505afa15801561082c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085091906131d2565b61089c5760405162461bcd60e51b815260206004820152602960248201526000805160206132e0833981519152604482015268151217d1905253115160ba1b606482015260840161027b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0381811660009081526004602090815260408083209387168352929052205483901561092c5760405162461bcd60e51b8152602060048201526023602482015260008051602061330083398151915260448201526224a7a760e91b606482015260840161027b565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660009081526001602090815260408083209388168352929052205461097c9084612bda565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166000818152600160209081526040808320948a16835293905282902092909255517f2e1a7d4d00000000000000000000000000000000000000000000000000000000815260048101859052632e1a7d4d90602401600060405180830381600087803b158015610a1557600080fd5b505af1158015610a29573d6000803e3d6000fd5b50505050610a378484612c0b565b50505050565b6000805460405162db063b60e41b81523360048201526001600160a01b0390911690630db063b09060240160206040518083038186803b158015610a8057600080fd5b505afa158015610a94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab891906131d2565b610b045760405162461bcd60e51b815260206004820152602960248201526000805160206132e0833981519152604482015268151217d1905253115160ba1b606482015260840161027b565b6001600160a01b038085166000908152600460209081526040808320938716835292905220548490849015610b755760405162461bcd60e51b8152602060048201526023602482015260008051602061330083398151915260448201526224a7a760e91b606482015260840161027b565b6001600160a01b03808716600090815260036020908152604080832093891683529290522054610ba58186612bda565b6001600160a01b038089166000818152600360209081526040808320948c168352938152838220949094559081526006909252902054610be59086612bda565b6001600160a01b03888116600090815260066020526040908190209290925590517f9dc29fac0000000000000000000000000000000000000000000000000000000081528782166004820152602481018790527f000000000000000000000000000000000000000000000000000000000000000090911690639dc29fac90604401600060405180830381600087803b158015610c8057600080fd5b505af1158015610c94573d6000803e3d6000fd5b5050506001600160a01b038089166000908152600360209081526040808320938b16835292905220549450505050509392505050565b60005460405162db063b60e41b81523360048201526001600160a01b0390911690630db063b09060240160206040518083038186803b158015610d0c57600080fd5b505afa158015610d20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4491906131d2565b610d905760405162461bcd60e51b815260206004820152602960248201526000805160206132e0833981519152604482015268151217d1905253115160ba1b606482015260840161027b565b6001600160a01b03808a166000908152600460209081526040808320938c1683529290522054610e285760405162461bcd60e51b815260206004820152602860248201527f556e69742050726f746f636f6c3a204e4f545f5452494747455245445f4c495160448201527f5549444154494f4e000000000000000000000000000000000000000000000000606482015260840161027b565b6001600160a01b03808a166000908152600160209081526040808320938c1683529290529081205490610e6587610e5f848c612bda565b90612bda565b6001600160a01b03808d166000908152600260209081526040808320938f16835292905290812054919250610e9e88610e5f848d612bda565b9050600560008e6001600160a01b03166001600160a01b0316815260200190815260200160002060008d6001600160a01b03166001600160a01b0316815260200190815260200160002060009055600460008e6001600160a01b03166001600160a01b0316815260200190815260200160002060008d6001600160a01b03166001600160a01b0316815260200190815260200160002060009055600360008e6001600160a01b03166001600160a01b0316815260200190815260200160002060008d6001600160a01b03166001600160a01b0316815260200190815260200160002060009055600160008e6001600160a01b03166001600160a01b0316815260200190815260200160002060008d6001600160a01b03166001600160a01b0316815260200190815260200160002060009055600260008e6001600160a01b03166001600160a01b0316815260200190815260200160002060008d6001600160a01b03166001600160a01b03168152602001908152602001600020600090556110268d8d611aba565b858711156111985785156110e3576110e37f00000000000000000000000000000000000000000000000000000000000000008660008054906101000a90046001600160a01b03166001600160a01b03166341fbb0506040518163ffffffff1660e01b815260040160206040518083038186803b1580156110a557600080fd5b505afa1580156110b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110dd919061308e565b89612cf3565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016639dc29fac8661111d8a8a612bda565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801561117b57600080fd5b505af115801561118f573d6000803e3d6000fd5b5050505061124d565b861561124d5761124d7f00000000000000000000000000000000000000000000000000000000000000008660008054906101000a90046001600160a01b03166001600160a01b03166341fbb0506040518163ffffffff1660e01b815260040160206040518083038186803b15801561120f57600080fd5b505afa158015611223573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611247919061308e565b8a612cf3565b8a1561125e5761125e8d868d612e6a565b891561128f5761128f7f0000000000000000000000000000000000000000000000000000000000000000868c612e6a565b88156112a0576112a08d8d8b612e6a565b87156112d1576112d17f00000000000000000000000000000000000000000000000000000000000000008d8a612e6a565b8215611365576113658d60008054906101000a90046001600160a01b03166001600160a01b03166341fbb0506040518163ffffffff1660e01b815260040160206040518083038186803b15801561132757600080fd5b505afa15801561133b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061135f919061308e565b85612e6a565b8015611419576114197f000000000000000000000000000000000000000000000000000000000000000060008054906101000a90046001600160a01b03166001600160a01b03166341fbb0506040518163ffffffff1660e01b815260040160206040518083038186803b1580156113db57600080fd5b505afa1580156113ef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611413919061308e565b83612e6a565b50505050505050505050505050565b60005460405162db063b60e41b81523360048201526001600160a01b0390911690630db063b09060240160206040518083038186803b15801561146a57600080fd5b505afa15801561147e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a291906131d2565b6114ee5760405162461bcd60e51b815260206004820152602960248201526000805160206132e0833981519152604482015268151217d1905253115160ba1b606482015260840161027b565b6001600160a01b03808416600090815260046020908152604080832093861683529290522054839083901561155f5760405162461bcd60e51b8152602060048201526023602482015260008051602061330083398151915260448201526224a7a760e91b606482015260840161027b565b82156115f4576115f4858560008054906101000a90046001600160a01b03166001600160a01b03166341fbb0506040518163ffffffff1660e01b815260040160206040518083038186803b1580156115b657600080fd5b505afa1580156115ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ee919061308e565b86612cf3565b5050505050565b6000546040517ff3ae24150000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b039091169063f3ae24159060240160206040518083038186803b15801561165757600080fd5b505afa15801561166b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061168f91906131d2565b6117015760405162461bcd60e51b815260206004820152602660248201527f556e69742050726f746f636f6c3a206f6e6c794d616e6167657220415554485f60448201527f4641494c45440000000000000000000000000000000000000000000000000000606482015260840161027b565b6001600160a01b0392831660009081526009602090815260408083209490951682529290925291902055565b6000805460405162db063b60e41b81523360048201526001600160a01b0390911690630db063b09060240160206040518083038186803b15801561177057600080fd5b505afa158015611784573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a891906131d2565b6117f45760405162461bcd60e51b815260206004820152602960248201526000805160206132e0833981519152604482015268151217d1905253115160ba1b606482015260840161027b565b6001600160a01b0380851660009081526004602090815260408083209387168352929052205484908490156118655760405162461bcd60e51b8152602060048201526023602482015260008051602061330083398151915260448201526224a7a760e91b606482015260840161027b565b61186f868661236d565b6001600160a01b0380871660009081526003602090815260408083209389168352929052205461189f9085612fac565b6001600160a01b038088166000818152600360209081526040808320948b1683529381528382209490945590815260069092529020546118df9085612fac565b6001600160a01b03878116600081815260066020526040808220949094555492517ff2e323ba000000000000000000000000000000000000000000000000000000008152600481019190915291169063f2e323ba9060240160206040518083038186803b15801561194f57600080fd5b505afa158015611963573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061198791906131f2565b6001600160a01b03871660009081526006602052604090205411156119ee5760405162461bcd60e51b815260206004820152601f60248201527f556e69742050726f746f636f6c3a2041535345545f444542545f4c494d495400604482015260640161027b565b6040517f40c10f190000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152602482018690527f000000000000000000000000000000000000000000000000000000000000000016906340c10f1990604401600060405180830381600087803b158015611a7157600080fd5b505af1158015611a85573d6000803e3d6000fd5b5050506001600160a01b038088166000908152600360209081526040808320938a168352929052205493505050509392505050565b60005460405162db063b60e41b81523360048201526001600160a01b0390911690630db063b09060240160206040518083038186803b158015611afc57600080fd5b505afa158015611b10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b3491906131d2565b611b805760405162461bcd60e51b815260206004820152602960248201526000805160206132e0833981519152604482015268151217d1905253115160ba1b606482015260840161027b565b6001600160a01b038083166000908152600460209081526040808320938516835292905220548290829015611bf15760405162461bcd60e51b8152602060048201526023602482015260008051602061330083398151915260448201526224a7a760e91b606482015260840161027b565b50506001600160a01b03918216600081815260076020908152604080832094909516808352938152848220829055828252600981528482208483528152848220829055828252600a815284822084835281528482208290559181526008825283812092815291905290812055565b60005460405162db063b60e41b81523360048201526001600160a01b0390911690630db063b09060240160206040518083038186803b158015611ca157600080fd5b505afa158015611cb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd991906131d2565b611d255760405162461bcd60e51b815260206004820152602960248201526000805160206132e0833981519152604482015268151217d1905253115160ba1b606482015260840161027b565b6001600160a01b038084166000908152600460209081526040808320938616835292905220548390839015611d965760405162461bcd60e51b8152602060048201526023602482015260008051602061330083398151915260448201526224a7a760e91b606482015260840161027b565b611da0858561286f565b6001600160a01b039586166000818152600360209081526040808320989099168083529781528882209390935581815260048352878120878252835287812043905590815260058252868120958152949052505091902055565b6001600160a01b03808416600081815260076020908152604080832094871680845294825280832054938352600a8252808320948352939052918220548290611e44904290612bda565b9050611e6d620186a0611e676301e133808185611e618a89612fd8565b90612fd8565b90613019565b9695505050505050565b60005460405162db063b60e41b81523360048201526001600160a01b0390911690630db063b09060240160206040518083038186803b158015611eb957600080fd5b505afa158015611ecd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ef191906131d2565b611f3d5760405162461bcd60e51b815260206004820152602960248201526000805160206132e0833981519152604482015268151217d1905253115160ba1b606482015260840161027b565b6001600160a01b038084166000908152600460209081526040808320938616835292905220548390839015611fae5760405162461bcd60e51b8152602060048201526023602482015260008051602061330083398151915260448201526224a7a760e91b606482015260840161027b565b6001600160a01b03808616600090815260016020908152604080832093881683529290522054611fde9084612bda565b6001600160a01b038087166000908152600160209081526040808320938916835292905220556115f4858585612e6a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0381811660009081526004602090815260408083209386168352929052205482901561209f5760405162461bcd60e51b8152602060048201526023602482015260008051602061330083398151915260448201526224a7a760e91b606482015260840161027b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156120fa57600080fd5b505af115801561210e573d6000803e3d6000fd5b5050506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166000908152600160209081526040808320938916835292905220546121649250905034612fac565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600090815260016020908152604080832097909316825295909552909320929092555050565b60005460405162db063b60e41b81523360048201526001600160a01b0390911690630db063b09060240160206040518083038186803b1580156121f757600080fd5b505afa15801561220b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061222f91906131d2565b61227b5760405162461bcd60e51b815260206004820152602960248201526000805160206132e0833981519152604482015268151217d1905253115160ba1b606482015260840161027b565b6001600160a01b0380841660009081526004602090815260408083209386168352929052205483908390156122ec5760405162461bcd60e51b8152602060048201526023602482015260008051602061330083398151915260448201526224a7a760e91b606482015260840161027b565b6001600160a01b0380861660009081526002602090815260408083209388168352929052205461231c9084612bda565b6001600160a01b038087166000908152600260209081526040808320938916835292905220556115f47f00000000000000000000000000000000000000000000000000000000000000008585612e6a565b60005460405162db063b60e41b81523360048201526001600160a01b0390911690630db063b09060240160206040518083038186803b1580156123af57600080fd5b505afa1580156123c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123e791906131d2565b6124335760405162461bcd60e51b815260206004820152602960248201526000805160206132e0833981519152604482015268151217d1905253115160ba1b606482015260840161027b565b6001600160a01b0380831660009081526004602090815260408083209385168352929052205482908290156124a45760405162461bcd60e51b8152602060048201526023602482015260008051602061330083398151915260448201526224a7a760e91b606482015260840161027b565b60006124b0858561286f565b6001600160a01b038087166000818152600360209081526040808320948a168352938152838220549282526006905291909120549192506124fd9183916124f79190612bda565b90612fac565b6001600160a01b0386811660008181526006602090815260408083209590955560038152848220898516835290528381208590555492517f997a2572000000000000000000000000000000000000000000000000000000008152600481019190915291169063997a25729060240160206040518083038186803b15801561258357600080fd5b505afa158015612597573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125bb91906131f2565b6001600160a01b0386811660008181526007602090815260408083208a86168452909152808220949094555492517fc8023af4000000000000000000000000000000000000000000000000000000008152600481019190915291169063c8023af49060240160206040518083038186803b15801561263857600080fd5b505afa15801561264c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061267091906131f2565b6001600160a01b0395861660008181526008602090815260408083209890991680835297815288822093909355908152600a825286812095815294905250505020429055565b60005460405162db063b60e41b81523360048201526001600160a01b0390911690630db063b09060240160206040518083038186803b1580156126f857600080fd5b505afa15801561270c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061273091906131d2565b61277c5760405162461bcd60e51b815260206004820152602960248201526000805160206132e0833981519152604482015268151217d1905253115160ba1b606482015260840161027b565b6001600160a01b0380841660009081526004602090815260408083209386168352929052205483908390156127ed5760405162461bcd60e51b8152602060048201526023602482015260008051602061330083398151915260448201526224a7a760e91b606482015260840161027b565b6001600160a01b0380861660009081526002602090815260408083209388168352929052205461281d9084612fac565b6001600160a01b038087166000908152600260209081526040808320938916835292905220556115f47f0000000000000000000000000000000000000000000000000000000000000000853086612cf3565b6001600160a01b038083166000818152600360209081526040808320948616808452948252808320549383526004825280832094835293905291822054156128b85790506128d6565b60006128c5858584611dfa565b90506128d18282612fac565b925050505b92915050565b60005460405162db063b60e41b81523360048201526001600160a01b0390911690630db063b09060240160206040518083038186803b15801561291e57600080fd5b505afa158015612932573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061295691906131d2565b6129a25760405162461bcd60e51b815260206004820152602960248201526000805160206132e0833981519152604482015268151217d1905253115160ba1b606482015260840161027b565b6001600160a01b038083166000908152600460209081526040808320938516835292905220548290829015612a135760405162461bcd60e51b8152602060048201526023602482015260008051602061330083398151915260448201526224a7a760e91b606482015260840161027b565b50506001600160a01b0391821660009081526004602090815260408083209390941682529190915290812055565b60005460405162db063b60e41b81523360048201526001600160a01b0390911690630db063b09060240160206040518083038186803b158015612a8357600080fd5b505afa158015612a97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612abb91906131d2565b612b075760405162461bcd60e51b815260206004820152602960248201526000805160206132e0833981519152604482015268151217d1905253115160ba1b606482015260840161027b565b6001600160a01b038084166000908152600460209081526040808320938616835292905220548390839015612b785760405162461bcd60e51b8152602060048201526023602482015260008051602061330083398151915260448201526224a7a760e91b606482015260840161027b565b6001600160a01b03808616600090815260016020908152604080832093881683529290522054612ba89084612fac565b6001600160a01b038087166000908152600160209081526040808320938916835292905220556115f485853086612cf3565b600082821115612bfa57634e487b7160e01b600052600160045260246000fd5b612c04828461329a565b9392505050565b604080516000808252602082019092526001600160a01b038416908390604051612c35919061320a565b60006040518083038185875af1925050503d8060008114612c72576040519150601f19603f3d011682016040523d82523d6000602084013e612c77565b606091505b5050905080612cee5760405162461bcd60e51b815260206004820152602360248201527f5472616e7366657248656c7065723a204554485f5452414e534645525f46414960448201527f4c45440000000000000000000000000000000000000000000000000000000000606482015260840161027b565b505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd000000000000000000000000000000000000000000000000000000001790529151600092839290881691612d85919061320a565b6000604051808303816000865af19150503d8060008114612dc2576040519150601f19603f3d011682016040523d82523d6000602084013e612dc7565b606091505b5091509150818015612df1575080511580612df1575080806020019051810190612df191906131d2565b612e625760405162461bcd60e51b8152602060048201526024808201527f5472616e7366657248656c7065723a205452414e534645525f46524f4d5f464160448201527f494c454400000000000000000000000000000000000000000000000000000000606482015260840161027b565b505050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790529151600092839290871691612ef4919061320a565b6000604051808303816000865af19150503d8060008114612f31576040519150601f19603f3d011682016040523d82523d6000602084013e612f36565b606091505b5091509150818015612f60575080511580612f60575080806020019051810190612f6091906131d2565b6115f45760405162461bcd60e51b815260206004820152601f60248201527f5472616e7366657248656c7065723a205452414e534645525f4641494c454400604482015260640161027b565b6000612fb88284613243565b9050828110156128d657634e487b7160e01b600052600160045260246000fd5b600082612fe7575060006128d6565b612ff1828461327b565b905081612ffe848361325b565b146128d657634e487b7160e01b600052600160045260246000fd5b6000816130685760405162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015260640161027b565b612c04828461325b565b600060208284031215613083578081fd5b8135612c04816132c7565b60006020828403121561309f578081fd5b8151612c04816132c7565b600080604083850312156130bc578081fd5b82356130c7816132c7565b946020939093013593505050565b600080604083850312156130e7578182fd5b82356130f2816132c7565b91506020830135613102816132c7565b809150509250929050565b600080600060608486031215613121578081fd5b833561312c816132c7565b9250602084013561313c816132c7565b929592945050506040919091013590565b60008060008060008060008060006101208a8c03121561316b578485fd5b8935613176816132c7565b985060208a0135613186816132c7565b975060408a0135965060608a0135955060808a0135945060a08a0135935060c08a0135925060e08a013591506101008a01356131c1816132c7565b809150509295985092959850929598565b6000602082840312156131e3578081fd5b81518015158114612c04578182fd5b600060208284031215613203578081fd5b5051919050565b60008251815b8181101561322a5760208186018101518583015201613210565b818111156132385782828501525b509190910192915050565b60008219821115613256576132566132b1565b500190565b60008261327657634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615613295576132956132b1565b500290565b6000828210156132ac576132ac6132b1565b500390565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03811681146132dc57600080fd5b5056fe556e69742050726f746f636f6c3a206861735661756c74416363657373204155556e69742050726f746f636f6c3a204c49515549444154494e475f504f534954a2646970667358221220b2458bef86d07a59a4bff602c82c57e2e20c7791bc22573bf838caea089f809f64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "borrow(address,address,uint256)": {
        "notice": "no, one debt for [asset][user]"
      },
      "calculateFee(address,address,uint256)": {
        "notice": "No, any call of valult.update would calc fee in debt and restart fee timer"
      },
      "changeOracleType(address,address,uint256)": {
        "notice": "any time"
      },
      "chargeFee(address,address,uint256)": {
        "notice": "this is just tranfer function, manager calc fees"
      },
      "col()": {
        "notice": "yes"
      },
      "collaterals(address,address)": {
        "notice": "No, it's how much user had stacked collaterael asset == collaterals[asset][user], i.e deposits"
      },
      "constructor": {
        "notice": "YES"
      },
      "debts(address,address)": {
        "notice": "Yes, in stablecoin amount, == debts[asset][user]"
      },
      "destroy(address,address)": {
        "notice": "only destroy debt info, exit -> _repay -> destroy if debt == 0"
      },
      "getTotalDebt(address,address)": {
        "notice": "they don't use it in practice"
      },
      "lastUpdate(address,address)": {
        "notice": "everything before lastUpdates is already calced in the debt. all data such as fees are from lastUpdate only"
      },
      "liquidate(address,address,uint256,uint256,uint256,uint256,uint256,uint256,address)": {
        "notice": "please see https://ratiofinance.medium.com/ratio-risk-lesson-2-cascading-liquidations-e91e04050f47"
      },
      "liquidationBlock(address,address)": {
        "notice": "Yes ,  liquidationBlock[asset][user]"
      },
      "liquidationFee(address,address)": {
        "notice": "Penalty during liquidation"
      },
      "liquidationPrice(address,address)": {
        "notice": "see line 287 triggerLiquidation: liquidationPrice[asset][positionOwner] = initialPrice;"
      },
      "oracleType(address,address)": {
        "notice": "ID of oracle contact for oracleType[asset][user]"
      },
      "repay(address,address,uint256)": {
        "notice": "return for the debt"
      },
      "spawn(address,address)": {
        "notice": "all implementation are numbered"
      },
      "stabilityFee(address,address)": {
        "notice": "current interest that user pay for stabilityFee[asset][user]"
      },
      "tokenDebts(address)": {
        "notice": "How much stablecoin was borrowed against particular asset == tokenDebts[asset]  "
      },
      "triggerLiquidation(address,address,uint256)": {
        "notice": "it's Vault so Manager does tells it what to do."
      },
      "update(address,address)": {
        "notice": "when user borrows more "
      },
      "weth()": {
        "notice": "yes"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4935,
        "contract": "contracts/SuVault.sol:SuVault",
        "label": "vaultParameters",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(SuVaultParameters)5244"
      },
      {
        "astId": 3618,
        "contract": "contracts/SuVault.sol:SuVault",
        "label": "collaterals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 3624,
        "contract": "contracts/SuVault.sol:SuVault",
        "label": "colToken",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 3631,
        "contract": "contracts/SuVault.sol:SuVault",
        "label": "debts",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 3638,
        "contract": "contracts/SuVault.sol:SuVault",
        "label": "liquidationBlock",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 3645,
        "contract": "contracts/SuVault.sol:SuVault",
        "label": "liquidationPrice",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 3650,
        "contract": "contracts/SuVault.sol:SuVault",
        "label": "tokenDebts",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3657,
        "contract": "contracts/SuVault.sol:SuVault",
        "label": "stabilityFee",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 3664,
        "contract": "contracts/SuVault.sol:SuVault",
        "label": "liquidationFee",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 3671,
        "contract": "contracts/SuVault.sol:SuVault",
        "label": "oracleType",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 3678,
        "contract": "contracts/SuVault.sol:SuVault",
        "label": "lastUpdate",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(SuVaultParameters)5244": {
        "encoding": "inplace",
        "label": "contract SuVaultParameters",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}