{
  "address": "0x4D220328C12639A0136949AaaFf491BC088eAF85",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "BadAccessControlSingleton",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAdminError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAlerterError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyCDPAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyDAOError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyDisablerAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyLiquidationAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyMintAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyProxyActionsError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyRewardAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyRoleError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyVaultAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyVotingEscrowError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "onlyAuctionAccessRole",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "DisableContract",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        }
      ],
      "name": "InitializeCollateralType",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "what",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "data",
          "type": "uint256"
        }
      ],
      "name": "ModifyParameters",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "what",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "data",
          "type": "uint256"
        }
      ],
      "name": "ModifyParameters",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "what",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "data",
          "type": "address"
        }
      ],
      "name": "ModifyParameters",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "name": "TaxSingle",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACCESS_CONTROL_SINGLETON",
      "outputs": [
        {
          "internalType": "contract ISuAccessControl",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ALERTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "AUCTION_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CDP_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DAO_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DISABLER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIQUIDATION_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINT_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROXY_ACTIONS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARD_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VOTING_ESCROW_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "base",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "collateralTypes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "stabilityFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "latestUpdateTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractEnabled",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disableContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "accessControl",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "safeEngine_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        }
      ],
      "name": "initializeCollateralType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "what",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "data",
          "type": "address"
        }
      ],
      "name": "modifyParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "what",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "data",
          "type": "uint256"
        }
      ],
      "name": "modifyParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "what",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "data",
          "type": "uint256"
        }
      ],
      "name": "modifyParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "primaryTaxReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "safeEngine",
      "outputs": [
        {
          "internalType": "contract ISafeEngine",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        }
      ],
      "name": "taxSingle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "8f84b6f1e4072e92a972e80f9a9e23c6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BadAccessControlSingleton\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAdminError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAlerterError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyCDPAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyDAOError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyDisablerAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyLiquidationAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyMintAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyProxyActionsError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRewardAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRoleError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyVaultAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyVotingEscrowError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"onlyAuctionAccessRole\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DisableContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"}],\"name\":\"InitializeCollateralType\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"ModifyParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"ModifyParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"name\":\"ModifyParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"TaxSingle\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACCESS_CONTROL_SINGLETON\",\"outputs\":[{\"internalType\":\"contract ISuAccessControl\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ALERTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AUCTION_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CDP_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAO_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DISABLER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDATION_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROXY_ACTIONS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VOTING_ESCROW_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"base\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"collateralTypes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stabilityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"latestUpdateTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractEnabled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"accessControl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"safeEngine_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"}],\"name\":\"initializeCollateralType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"primaryTaxReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeEngine\",\"outputs\":[{\"internalType\":\"contract ISafeEngine\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"}],\"name\":\"taxSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"custom:changes\":\"Replaced MakerDAO\\u2019s `authorizedAccounts` with `SuAuthenticated`.                 Removed `LibNote` for event logging, requiring custom events (TODO).                 Added `ITaxCollector` interface and moved `CollateralType` struct there.                 Simplified math functions (`_rpow`, `_rmul`, `_add`, `_diff`) for gas efficiency.\",\"custom:events\":\"No events are defined; custom events need to be added (as noted in FIXME).                Placeholder events (e.g., `DisableContract`) are included in comments but not defined.\",\"custom:security\":\"Only authorized accounts (DAO, Admin, DisablerAccess) can modify parameters or disable the contract.                 Fee calculations rely on SafeEngine\\u2019s rate updates, and `taxSingle` requires up-to-date timestamps.                 The contract assumes `primaryTaxReceiver` is a valid address (e.g., AccountingEngine).\",\"custom:usage\":\"- **Initialization**: Deploy with access control and SafeEngine addresses.   ```solidity   TaxCollector taxCollector = new TaxCollector(accessControlAddress, safeEngineAddress);   ``` - **Collateral Type Setup**: Initialize a collateral type\\u2019s fee parameters.   ```solidity   taxCollector.initializeCollateralType(\\\"ETH-A\\\");   ``` - **Fee Collection**: Trigger fee calculation for a collateral type.   ```solidity   uint256 newRate = taxCollector.taxSingle(\\\"ETH-A\\\"); // Update fees for ETH-A   ``` - **Parameter Modification**: DAO updates stability fees, base fee, or tax receiver.   ```solidity   taxCollector.modifyParameters(\\\"ETH-A\\\", \\\"stabilityFee\\\", newFee); // Update collateral fee   taxCollector.modifyParameters(\\\"base\\\", newBaseFee); // Update global base fee   taxCollector.modifyParameters(\\\"primaryTaxReceiver\\\", newReceiver); // Update tax receiver   ``` - **Disabling**: DisablerAccess accounts can disable the contract.   ```solidity   taxCollector.disableContract(); // Halt operations   ```\",\"details\":\"Calculates and applies per-second stability fees to Safes, updating accumulated rates in SafeEngine.      Supports a global base fee and per-collateral-type fees, with surplus directed to a primary tax receiver      (e.g., AccountingEngine). Uses SuAuthenticated for access control. Integrates with SafeEngine      to adjust debt balances based on accrued fees. This contract is a fork of MakerDAO\\u2019s TaxCollector.sol, adapted      for StableUnit with simplified math and custom access control.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"disableContract()\":{\"custom:access\":\"OnlyDisablerAccess\",\"details\":\"Sets `contractEnabled` to 0 and emits a placeholder event. Only callable by DisablerAccess accounts.\"},\"initialize(address,address)\":{\"details\":\"Sets the SafeEngine reference and inherits access control from SuAuthenticated.\",\"params\":{\"accessControl\":\"Address of the access control singleton contract.\",\"safeEngine_\":\"Address of the SafeEngine contract.\"}},\"initializeCollateralType(bytes32)\":{\"custom:access\":\"OnlyAdmin\",\"details\":\"Sets initial stability fee to ONE (no fee) and records the current timestamp.      Reverts if already initialized. Only callable by Admin.\",\"params\":{\"collateralType\":\"Unique identifier for the collateral type (e.g., \\\"ETH-A\\\").\"}},\"modifyParameters(bytes32,address)\":{\"custom:access\":\"OnlyDAO\",\"details\":\"Updates the address receiving collected fees (e.g., AccountingEngine). Only callable by DAO.\",\"params\":{\"data\":\"New receiver address.\",\"what\":\"Parameter to modify (must be \\\"primaryTaxReceiver\\\").\"}},\"modifyParameters(bytes32,bytes32,uint256)\":{\"custom:access\":\"OnlyDAO\",\"details\":\"Updates the stability fee, requiring the collateral type\\u2019s timestamp to be up-to-date.      Only callable by DAO.\",\"params\":{\"collateralType\":\"Unique identifier for the collateral type.\",\"data\":\"New stability fee value [ray].\",\"what\":\"Parameter to modify (must be \\\"stabilityFee\\\").\"}},\"modifyParameters(bytes32,uint256)\":{\"custom:access\":\"OnlyDAO\",\"details\":\"Updates the global base stability fee. Only callable by DAO.\",\"params\":{\"data\":\"New base fee value [ray].\",\"what\":\"Parameter to modify (must be \\\"base\\\").\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"taxSingle(bytes32)\":{\"details\":\"Calculates the new accumulated rate based on elapsed time and combined stability fees      (base + collateral-specific). Updates SafeEngine and records the current timestamp.\",\"params\":{\"collateralType\":\"Unique identifier for the collateral type.\"},\"returns\":{\"rate\":\"New accumulated rate for the collateral type [ray].\"}}},\"title\":\"TaxCollector\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"base()\":{\"notice\":\"Global per-second stability fee contribution applied to all collateral types [ray].\"},\"collateralTypes(bytes32)\":{\"notice\":\"Maps collateral types to their stability fee configurations.\"},\"contractEnabled()\":{\"notice\":\"Tracks whether the contract is enabled (0) or disabled (non-zero).\"},\"disableContract()\":{\"notice\":\"Disables the contract, preventing further state-changing operations.\"},\"initialize(address,address)\":{\"notice\":\"Initializes the TaxCollector with access control and SafeEngine addresses.\"},\"initializeCollateralType(bytes32)\":{\"notice\":\"Initializes a new collateral type for stability fee collection.\"},\"modifyParameters(bytes32,address)\":{\"notice\":\"Modifies the primary tax receiver address.\"},\"modifyParameters(bytes32,bytes32,uint256)\":{\"notice\":\"Modifies stability fee for a specific collateral type.\"},\"modifyParameters(bytes32,uint256)\":{\"notice\":\"Modifies global protocol parameters.\"},\"primaryTaxReceiver()\":{\"notice\":\"Address receiving collected stability fees (e.g., AccountingEngine).\"},\"safeEngine()\":{\"notice\":\"Reference to the SafeEngine contract for rate updates.\"},\"taxSingle(bytes32)\":{\"notice\":\"Collects stability fees for a collateral type and updates SafeEngine rates.\"}},\"notice\":\"Manages stability fees for collateral types in the StableUnit protocol.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/makerdao/core/TaxCollector.sol\":\"TaxCollector\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/exchange/contracts/periphery/contracts/access-control/SuAccessRoles.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title SuAccessRoles Library\\n * @dev SuAuthenticated and SuAccessControlSingleton need to have this constants\\n * Hierarchy:\\n *      1. DAO - can give admins and system roles\\n *      2.1. Admin - can set Alerters\\n *      2.2. System - includes Minter, Liquidation, Reward and Disabler roles, don't have access to give some roles.\\n *      3. Alerter - can send alerts and trigger rate limits, don't have access to give some roles.\\n */\\nabstract contract SuAccessRoles {\\n    bytes32 public constant ADMIN_ROLE = 0x00;\\n\\n    bytes32 public constant DAO_ROLE = keccak256(\\\"DAO_ROLE\\\");\\n\\n    bytes32 public constant ALERTER_ROLE = keccak256(\\\"ALERTER_ROLE\\\");\\n\\n    // system roles\\n    bytes32 public constant MINT_ACCESS_ROLE = keccak256(\\\"MINT_ACCESS_ROLE\\\");\\n    bytes32 public constant AUCTION_ACCESS_ROLE = keccak256(\\\"AUCTION_ACCESS_ROLE\\\");\\n    bytes32 public constant LIQUIDATION_ACCESS_ROLE = keccak256(\\\"LIQUIDATION_ACCESS_ROLE\\\");\\n    bytes32 public constant REWARD_ACCESS_ROLE = keccak256(\\\"REWARD_ACCESS_ROLE\\\");\\n    // bytes32 public constant SYSTEM_ROLE = keccak256(\\\"SYSTEM_ROLE\\\");\\n    bytes32 public constant DISABLER_ROLE = keccak256(\\\"DISABLER_ROLE\\\");\\n    bytes32 public constant CDP_ACCESS_ROLE = keccak256(\\\"CDP_ACCESS_ROLE\\\");\\n    bytes32 public constant VOTING_ESCROW_ROLE = keccak256(\\\"VOTING_ESCROW_ROLE\\\");\\n    bytes32 public constant PROXY_ACTIONS_ROLE = keccak256(\\\"PROXY_ACTIONS_ROLE\\\");\\n}\\n\",\"keccak256\":\"0x6702597d2d879605a4f25e71c348b4c7f84f4618ca799ba0fcb4a5ad994b788c\",\"license\":\"BSL 1.1\"},\"contracts/exchange/contracts/periphery/contracts/access-control/SuAuthenticated.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/access-control/ISuAccessControl.sol\\\";\\nimport \\\"./SuAccessRoles.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @title SuAuthenticated\\n * @dev other contracts should inherit to be authenticated.\\n * The address of SuAccessControlSingleton should be one for all contract that inherits SuAuthenticated\\n */\\nabstract contract SuAuthenticated is Initializable, SuAccessRoles, IERC165Upgradeable {\\n    ISuAccessControl public ACCESS_CONTROL_SINGLETON;\\n\\n    error OnlyDAOError();\\n    error OnlyAdminError();\\n    error OnlyAlerterError();\\n    error OnlyVaultAccessError();\\n    error OnlyLiquidationAccessError();\\n    error OnlyMintAccessError();\\n    error OnlyRewardAccessError();\\n    error OnlyDisablerAccessError();\\n    error OnlyVotingEscrowError();\\n    error OnlyProxyActionsError();\\n    error OnlyRoleError();\\n    error OnlyCDPAccessError();\\n    error BadAccessControlSingleton();\\n    error onlyAuctionAccessRole();\\n\\n    /**\\n     * @dev should be passed in constructor\\n     */\\n    function __suAuthenticatedInit(address _accessControlSingleton) internal onlyInitializing {\\n        ACCESS_CONTROL_SINGLETON = ISuAccessControl(_accessControlSingleton);\\n        if (\\n            _accessControlSingleton == address(0) ||\\n            !ISuAccessControl(_accessControlSingleton).supportsInterface(type(IAccessControlUpgradeable).interfaceId)\\n        ) revert BadAccessControlSingleton();\\n    }\\n\\n    /** CORE ROLES */\\n\\n    modifier onlyDAO() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(DAO_ROLE, msg.sender)) revert OnlyDAOError();\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(ADMIN_ROLE, msg.sender)) revert OnlyAdminError();\\n        _;\\n    }\\n\\n    modifier onlyAlerter() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(ALERTER_ROLE, msg.sender)) revert OnlyAlerterError();\\n        _;\\n    }\\n\\n    /** SYSTEM ROLES */\\n\\n    modifier onlyLiquidationAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(LIQUIDATION_ACCESS_ROLE, msg.sender)) revert OnlyLiquidationAccessError();\\n        _;\\n    }\\n\\n    modifier onlyAuctionAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(AUCTION_ACCESS_ROLE, msg.sender)) revert OnlyLiquidationAccessError();\\n        _;\\n    }\\n\\n    modifier onlyMintAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(MINT_ACCESS_ROLE, msg.sender)) revert OnlyMintAccessError();\\n        _;\\n    }\\n\\n    modifier onlyRewardAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(REWARD_ACCESS_ROLE, msg.sender)) revert OnlyRewardAccessError();\\n        _;\\n    }\\n\\n    modifier onlyRewardOrAdminAccess() {\\n        if (\\n            !ACCESS_CONTROL_SINGLETON.hasRole(REWARD_ACCESS_ROLE, msg.sender) &&\\n            !ACCESS_CONTROL_SINGLETON.hasRole(ADMIN_ROLE, msg.sender)\\n        ) revert OnlyRewardAccessError();\\n        _;\\n    }\\n\\n    // @notice This modifier check if user/contract have access to \\\"disable\\\" contracts.\\n    // All main contracts in our lending protocol have disableContract() method that stops contracts main functions.\\n    modifier onlyDisablerAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(DISABLER_ROLE, msg.sender)) revert OnlyDisablerAccessError();\\n        _;\\n    }\\n\\n    modifier onlyCDPAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(CDP_ACCESS_ROLE, msg.sender)) revert OnlyCDPAccessError();\\n        _;\\n    }\\n\\n    modifier onlyVotingEscrow() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(VOTING_ESCROW_ROLE, msg.sender)) revert OnlyVotingEscrowError();\\n        _;\\n    }\\n\\n    modifier onlyProxyActions() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(PROXY_ACTIONS_ROLE, msg.sender)) revert OnlyProxyActionsError();\\n        _;\\n    }\\n\\n    // syntax sugar under ACCESS_CONTROL_SINGLETON\\n    modifier onlyRole(bytes32 role) {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(role, msg.sender)) revert OnlyRoleError();\\n        _;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return ACCESS_CONTROL_SINGLETON.supportsInterface(interfaceId);\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xc27fc434b09e69804160c93896d39da4f9890d21e2ca1002eb53ebf1234e4d91\",\"license\":\"BSL 1.1\"},\"contracts/exchange/contracts/periphery/contracts/interfaces/access-control/ISuAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\nimport \\\"../../access-control/SuAccessRoles.sol\\\";\\n\\n/**\\n * @notice Access control for contracts\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n **/\\ninterface ISuAccessControl is IAccessControlUpgradeable, IERC165Upgradeable {\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\\n}\\n\",\"keccak256\":\"0x25724ac502fd6418ccd38273b276de4b2fdecd023d723c5d80c9f0a27c407bcd\",\"license\":\"MIT\"},\"contracts/makerdao/core/TaxCollector.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\n/// TaxCollector.sol -- StablePro Lending Rate\\n\\n// This contract is forked from MakerDAO's jug.sol\\n\\n// Copyright (C) 2018 Rain <rainbreak@riseup.net>\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/ISafeEngine.sol\\\";\\nimport \\\"../interfaces/ITaxCollector.sol\\\";\\nimport \\\"../../exchange/contracts/periphery/contracts/access-control/SuAuthenticated.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n// FIXME: This contract was altered compared to the production version.\\n// It doesn't use LibNote anymore.\\n// New deployments of this contract will need to include custom events (TO DO).\\n\\n// CHANGED: added interface and moved struct there.\\n// Added SuAuthenticated instead of authorizedAccounts\\n\\n/**\\n * @title TaxCollector\\n * @notice Manages stability fees for collateral types in the StableUnit protocol.\\n * @dev Calculates and applies per-second stability fees to Safes, updating accumulated rates in SafeEngine.\\n *      Supports a global base fee and per-collateral-type fees, with surplus directed to a primary tax receiver\\n *      (e.g., AccountingEngine). Uses SuAuthenticated for access control. Integrates with SafeEngine\\n *      to adjust debt balances based on accrued fees. This contract is a fork of MakerDAO\\u2019s TaxCollector.sol, adapted\\n *      for StableUnit with simplified math and custom access control.\\n * @custom:usage\\n * - **Initialization**: Deploy with access control and SafeEngine addresses.\\n *   ```solidity\\n *   TaxCollector taxCollector = new TaxCollector(accessControlAddress, safeEngineAddress);\\n *   ```\\n * - **Collateral Type Setup**: Initialize a collateral type\\u2019s fee parameters.\\n *   ```solidity\\n *   taxCollector.initializeCollateralType(\\\"ETH-A\\\");\\n *   ```\\n * - **Fee Collection**: Trigger fee calculation for a collateral type.\\n *   ```solidity\\n *   uint256 newRate = taxCollector.taxSingle(\\\"ETH-A\\\"); // Update fees for ETH-A\\n *   ```\\n * - **Parameter Modification**: DAO updates stability fees, base fee, or tax receiver.\\n *   ```solidity\\n *   taxCollector.modifyParameters(\\\"ETH-A\\\", \\\"stabilityFee\\\", newFee); // Update collateral fee\\n *   taxCollector.modifyParameters(\\\"base\\\", newBaseFee); // Update global base fee\\n *   taxCollector.modifyParameters(\\\"primaryTaxReceiver\\\", newReceiver); // Update tax receiver\\n *   ```\\n * - **Disabling**: DisablerAccess accounts can disable the contract.\\n *   ```solidity\\n *   taxCollector.disableContract(); // Halt operations\\n *   ```\\n * @custom:security Only authorized accounts (DAO, Admin, DisablerAccess) can modify parameters or disable the contract.\\n *                 Fee calculations rely on SafeEngine\\u2019s rate updates, and `taxSingle` requires up-to-date timestamps.\\n *                 The contract assumes `primaryTaxReceiver` is a valid address (e.g., AccountingEngine).\\n * @custom:changes Replaced MakerDAO\\u2019s `authorizedAccounts` with `SuAuthenticated`.\\n *                 Removed `LibNote` for event logging, requiring custom events (TODO).\\n *                 Added `ITaxCollector` interface and moved `CollateralType` struct there.\\n *                 Simplified math functions (`_rpow`, `_rmul`, `_add`, `_diff`) for gas efficiency.\\n * @custom:events No events are defined; custom events need to be added (as noted in FIXME).\\n *                Placeholder events (e.g., `DisableContract`) are included in comments but not defined.\\n */\\ncontract TaxCollector is ITaxCollector, SuAuthenticated {\\n    /// @notice Maps collateral types to their stability fee configurations.\\n    mapping (bytes32 => CollateralType) public collateralTypes;\\n    /// @notice Reference to the SafeEngine contract for rate updates.\\n    ISafeEngine public safeEngine; // CDP Engine\\n    /// @notice Address receiving collected stability fees (e.g., AccountingEngine).\\n    address public primaryTaxReceiver; // Debt Engine\\n    /// @notice Global per-second stability fee contribution applied to all collateral types [ray].\\n    uint256 public base; // Global, per-second stability fee contribution [ray]\\n\\n\\n    // --- Init ---\\n    /**\\n     * @notice Initializes the TaxCollector with access control and SafeEngine addresses.\\n     * @dev Sets the SafeEngine reference and inherits access control from SuAuthenticated.\\n     * @param accessControl Address of the access control singleton contract.\\n     * @param safeEngine_ Address of the SafeEngine contract.\\n     */\\n    function initialize(address accessControl, address safeEngine_) public initializer {\\n        __suAuthenticatedInit(accessControl);\\n\\n        safeEngine = ISafeEngine(safeEngine_);\\n    }\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    // --- Disable ---\\n    /// @notice Tracks whether the contract is enabled (0) or disabled (non-zero).\\n    uint public contractEnabled;\\n\\n    /**\\n     * @notice Disables the contract, preventing further state-changing operations.\\n     * @dev Sets `contractEnabled` to 0 and emits a placeholder event. Only callable by DisablerAccess accounts.\\n     * @custom:access OnlyDisablerAccess\\n     */\\n    function disableContract() external onlyDisablerAccess {\\n        contractEnabled = 0;\\n        // TODO: Define and emit custom event\\n        emit DisableContract();\\n    }\\n\\n    // --- Math ---\\n    /**\\n     * @notice Calculates x raised to the power n, divided by base b, with precision handling.\\n     * @dev Uses assembly for gas-efficient exponentiation, suitable for stability fee calculations.\\n     *      Reverts on overflow or division errors.\\n     * @param x Base value [ray].\\n     * @param n Exponent (time delta in seconds).\\n     * @param b Denominator for precision scaling [ray].\\n     * @return z Result of (x^n) / b [ray].\\n     */\\n    function _rpow(uint x, uint n, uint b) internal pure returns (uint z) {\\n      assembly {\\n        switch x case 0 {switch n case 0 {z := b} default {z := 0}}\\n        default {\\n          switch mod(n, 2) case 0 { z := b } default { z := x }\\n          let half := div(b, 2) // for rounding.\\n          for { n := div(n, 2) } n { n := div(n,2) } {\\n            let xx := mul(x, x)\\n            if iszero(eq(div(xx, x), x)) { revert(0,0) } // Check for overflow\\n            let xxRound := add(xx, half)\\n            if lt(xxRound, xx) { revert(0,0) } // Check for rounding overflow\\n            x := div(xxRound, b)\\n            if mod(n,2) {\\n              let zx := mul(z, x)\\n              if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) { revert(0,0) } // Check for overflow\\n              let zxRound := add(zx, half)\\n              if lt(zxRound, zx) { revert(0,0) } // Check for rounding overflow\\n              z := div(zxRound, b)\\n            }\\n          }\\n        }\\n      }\\n    }\\n\\n    /// @notice Constant for ray precision (10^27).\\n    uint256 constant ONE = 10 ** 27;\\n\\n    /**\\n     * @notice Adds two unsigned integers, reverting on overflow.\\n     * @dev Ensures safe addition for stability fee calculations.\\n     * @param x First operand.\\n     * @param y Second operand.\\n     * @return z Sum of x and y.\\n     */\\n    function _add(uint x, uint y) internal pure returns (uint z) {\\n        z = x + y;\\n        require(z >= x);\\n    }\\n\\n    /**\\n     * @notice Subtracts two unsigned integers, returning the signed difference.\\n     * @dev Ensures non-negative inputs for rate difference calculations.\\n     * @param x First operand.\\n     * @param y Second operand.\\n     * @return z Difference of x and y (signed).\\n     */\\n    function _diff(uint x, uint y) internal pure returns (int z) {\\n        z = int(x) - int(y);\\n        require(int(x) >= 0 && int(y) >= 0);\\n    }\\n\\n    /**\\n     * @notice Multiplies two unsigned integers in ray precision, scaling down by ONE.\\n     * @dev Ensures safe multiplication and division for rate calculations.\\n     * @param x First operand [ray].\\n     * @param y Second operand [ray].\\n     * @return z Product of x and y, divided by ONE [ray].\\n     */\\n    function _rmul(uint x, uint y) internal pure returns (uint z) {\\n        z = x * y;\\n        require(y == 0 || z / y == x); // Check for overflow\\n        z = z / ONE;\\n    }\\n\\n    // --- Administration ---\\n    /**\\n     * @notice Initializes a new collateral type for stability fee collection.\\n     * @dev Sets initial stability fee to ONE (no fee) and records the current timestamp.\\n     *      Reverts if already initialized. Only callable by Admin.\\n     * @param collateralType Unique identifier for the collateral type (e.g., \\\"ETH-A\\\").\\n     * @custom:access OnlyAdmin\\n     */\\n    function initializeCollateralType(bytes32 collateralType) external onlyAdmin {\\n        CollateralType storage i = collateralTypes[collateralType];\\n        require(i.stabilityFee == 0, \\\"TaxCollector/collateralType-already-init\\\");\\n        i.stabilityFee = ONE; // 1e27 (no fee)\\n        i.latestUpdateTime = block.timestamp;\\n\\n        emit InitializeCollateralType(collateralType);\\n    }\\n\\n    /**\\n     * @notice Modifies stability fee for a specific collateral type.\\n     * @dev Updates the stability fee, requiring the collateral type\\u2019s timestamp to be up-to-date.\\n     *      Only callable by DAO.\\n     * @param collateralType Unique identifier for the collateral type.\\n     * @param what Parameter to modify (must be \\\"stabilityFee\\\").\\n     * @param data New stability fee value [ray].\\n     * @custom:access OnlyDAO\\n     */\\n    function modifyParameters(bytes32 collateralType, bytes32 what, uint data) external onlyDAO {\\n        require(\\n            block.timestamp == collateralTypes[collateralType].latestUpdateTime,\\n            \\\"TaxCollector/latestUpdateTime-not-updated\\\"\\n        );\\n        if (what == \\\"stabilityFee\\\") collateralTypes[collateralType].stabilityFee = data;\\n        else revert(\\\"TaxCollector/modifyParameters-unrecognized-param\\\");\\n\\n        emit ModifyParameters(collateralType, what, data);\\n    }\\n\\n    /**\\n     * @notice Modifies global protocol parameters.\\n     * @dev Updates the global base stability fee. Only callable by DAO.\\n     * @param what Parameter to modify (must be \\\"base\\\").\\n     * @param data New base fee value [ray].\\n     * @custom:access OnlyDAO\\n     */\\n    function modifyParameters(bytes32 what, uint data) external onlyDAO {\\n        if (what == \\\"base\\\") base = data;\\n        else revert(\\\"TaxCollector/modifyParameters-unrecognized-param\\\");\\n\\n        emit ModifyParameters(what, data);\\n    }\\n\\n    /**\\n     * @notice Modifies the primary tax receiver address.\\n     * @dev Updates the address receiving collected fees (e.g., AccountingEngine). Only callable by DAO.\\n     * @param what Parameter to modify (must be \\\"primaryTaxReceiver\\\").\\n     * @param data New receiver address.\\n     * @custom:access OnlyDAO\\n     */\\n    function modifyParameters(bytes32 what, address data) external onlyDAO {\\n        if (what == \\\"primaryTaxReceiver\\\") primaryTaxReceiver = data;\\n        else revert(\\\"TaxCollector/modifyParameters-unrecognized-param\\\");\\n    }\\n\\n    /**\\n     * @notice Collects stability fees for a collateral type and updates SafeEngine rates.\\n     * @dev Calculates the new accumulated rate based on elapsed time and combined stability fees\\n     *      (base + collateral-specific). Updates SafeEngine and records the current timestamp.\\n     * @param collateralType Unique identifier for the collateral type.\\n     * @return rate New accumulated rate for the collateral type [ray].\\n     */\\n    function taxSingle(bytes32 collateralType) external returns (uint rate) {\\n        require(\\n            block.timestamp >= collateralTypes[collateralType].latestUpdateTime,\\n            \\\"TaxCollector/invalid-block-timestamp\\\"\\n        );\\n        (, uint prevRate,,,,,,) = safeEngine.collateralTypes(collateralType);\\n        // Calculate new rate: prevRate * (1 + (base + stabilityFee))^(time delta)\\n        rate = _rmul(\\n            _rpow(\\n                _add(base, collateralTypes[collateralType].stabilityFee),\\n                block.timestamp - collateralTypes[collateralType].latestUpdateTime,\\n                ONE\\n            ),\\n            prevRate\\n        );\\n        // Update SafeEngine with rate difference\\n        safeEngine.updateAccumulatedRate(collateralType, primaryTaxReceiver, _diff(rate, prevRate));\\n        // Record update time\\n        collateralTypes[collateralType].latestUpdateTime = block.timestamp;\\n\\n        emit TaxSingle(collateralType, rate);\\n    }\\n}\",\"keccak256\":\"0x4532338686652755c9e928e7a4cdd91a8757500d1590c5d44ada289819314e57\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/makerdao/interfaces/IDisable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\ninterface IDisable {\\n    event DisableContract();\\n\\n    function disableContract() external;\\n}\\n\",\"keccak256\":\"0xcf4b5ac43556af77a174aa3a3a9b51c4fc89b933ef875797650542bf686b8405\",\"license\":\"UNLICENSED\"},\"contracts/makerdao/interfaces/ISafeEngine.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// TODO: check how to operate with license and use one for all contracts\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IDisable.sol\\\";\\n\\n/**\\n * @title SafeEngine\\n * @notice The single source of truth for the Maker Protocol. It contains the accounting system of the core Vault,\\n * Internal StablePro balances, and collateral state. It houses the public interface for Vault management,\\n * allowing safe(= CDP or Vault) owners to adjust their Vault state balances. It also contains the public interface\\n * for Vault fungibility, allowing safe (Vault) owners to transfer, split, and merge Vaults.\\n * Excluding these interfaces, SAFEEngine is accessed through trusted smart contract modules.\\n **/\\ninterface ISafeEngine is IDisable {\\n\\n          // --- Events ---\\n    event InitializeCollateralType(bytes32 collateralType);\\n    event ModifyParameters(bytes32 what, uint256 data);\\n    event ModifyParameters(bytes32 collateralType, bytes32 what, uint256 data);\\n    event ModifyCollateralBalance(bytes32 collateralType, address usr, int256 wad);\\n    event TransferCollateral(bytes32 collateralType, address src, address dst, uint256 wad);\\n    event TransferInternalCoins(address src, address dst, uint256 rad);\\n    event ModifySAFECollateralization(\\n        bytes32 collateralType,\\n        address cdp,\\n        address collateralSource,\\n        address debtDestination,\\n        int256 deltaCollateral,\\n        int256 deltaDebt,\\n        uint256 lockedCollateral,\\n        uint256 generatedDebt,\\n        uint256 globalDebt\\n    );\\n    event TransferSAFECollateralAndDebt(\\n        bytes32 collateralType,\\n        address src,\\n        address dst,\\n        int256 deltaCollateral,\\n        int256 deltaDebt,\\n        uint256 srcLockedCollateral,\\n        uint256 srcGeneratedDebt,\\n        uint256 dstLockedCollateral,\\n        uint256 dstGeneratedDebt\\n    );\\n    event ConfiscateSAFECollateralAndDebt(\\n        bytes32 collateralType,\\n        address cdp,\\n        address collateralCounterparty,\\n        address debtCounterparty,\\n        int256 deltaCollateral,\\n        int256 deltaDebt,\\n        uint256 globalUnbackedDebt\\n    );\\n    event SettleDebt(address account, uint256 rad, uint256 debtBalance, uint256 coinBalance, uint256 globalUnbackedDebt, uint256 globalDebt);\\n    event CreateUnbackedDebt(\\n        address debtDestination,\\n        address coinDestination,\\n        uint256 rad,\\n        uint256 debtBalance,\\n        uint256 coinBalance,\\n        uint256 globalUnbackedDebt,\\n        uint256 globalDebt\\n    );\\n    event UpdateAccumulatedRate(bytes32 collateralType, address surplusDst, int256 accumulatedRate, uint256 globalDebt);\\n    event ApproveSAFEModification(address sender, address usr);\\n    event DenySAFEModification(address sender, address usr);\\n    event UpdateSafetyPrice(bytes32 collateralType, uint256 safetyPrice);\\n\\n    /* ==================== METHODS ==================== */\\n\\n    // --- Data ---\\n    struct CollateralType {\\n        uint256 debtAmount;        // Total debt issued for this specific collateral type                          [wad]\\n        uint256 accumulatedRate;   // Accumulator for interest accrued on this collateral type                     [ray]\\n        uint256 debtCeiling;       // Maximum amount of debt that can be generated with this collateral type       [rad]\\n        uint256 debtFloor;         // Minimum amount of debt that must be generated by a CDP using this collateral [rad]\\n        uint256 safetyPrice;       // Floor price at which a CDP is allowed to generate debt                       [ray]\\n        uint256 liquidationRatio;  // Liquidation ratio to calculate safety price                                  [ray]\\n        address collateralAddress; // Address of collateral\\n        uint256 safetyPriceBlockNumber; // Block when safetyPrice was updated\\n    }\\n    struct SAFE {\\n        uint256 lockedCollateral; // Total amount of collateral locked in a SAFE/CDP  [wad]\\n        uint256 generatedDebt;    // Total amount of debt generated by a SAFE/CDP     [wad]\\n    }\\n\\n    // --- VARS ---\\n\\n    function safes(bytes32, address) external view returns (uint, uint);\\n\\n    function collateralTypes(bytes32) external view returns (\\n        uint256 debtAmount,       // [wad]\\n        uint256 accumulatedRate,  // [ray]\\n        uint256 debtCeiling,      // [rad]\\n        uint256 debtFloor,        // [rad]\\n        uint256 safetyPrice,      // [ray]\\n        uint256 liquidationRatio, // [ray]\\n        address collateralAddress,\\n        uint256 safetyPriceBlockNumber\\n);\\n\\n    function tokenCollateral(bytes32, address) external view returns (uint256);\\n\\n    function coinBalance(address) external view returns (uint256);\\n\\n    function debtBalance(address) external view returns (uint256);\\n\\n    function cdpRights(address, address) external view returns (uint256);\\n\\n    function globalDebtCeiling() external view returns (uint256);\\n\\n    function globalDebt() external view returns (uint256);\\n\\n    // --- Auth ---\\n    /**\\n     * @notice Allow an address to modify your CDP.\\n     * For example coinAdapter should be able to modify your CDP to withdraw all correctly.\\n     * @param usr Account to give CDP permissions to\\n     */\\n    function approveSAFEModification(address usr) external;\\n\\n    /**\\n     * @notice Deny an address the rights to modify your CDP\\n     * @param usr Account to give CDP permissions to\\n     */\\n    function denySAFEModification(address usr) external;\\n\\n    // --- Administration ---\\n\\n    function initializeCollateralType(bytes32 collateralType, address collateralAddress) external;\\n\\n    /**\\n     * @notice Method to modify some global variables\\n     * @param what - name of variable we want to change\\n     * @param data - new value of this variable\\n     */\\n    function modifyParameters(bytes32 what, uint data) external;\\n    /**\\n     * @notice Method to modify values in struct of collateralTypes\\n     * @param collateralType - collateral type we want to modify (collateralTypes[collateralType])\\n     * @param what - name of variable in struct we want to change\\n     * @param data - new value of this variable\\n     */\\n    function modifyParameters(bytes32 collateralType, bytes32 what, uint data) external;\\n\\n    // --- Fungibility ---\\n    function modifyCollateralBalance(bytes32 collateralType, address usr, int256 wad) external;\\n    function transferCollateral(bytes32 collateralType, address src, address dst, uint256 wad) external;\\n    function transferInternalCoins(address src, address dst, uint256 rad) external;\\n\\n    // --- SafetyPrice Manipulation ---\\n    /**\\n     * @notice Method to update safetyPrice, it's called each time, when function need actual safetyPrice\\n     * @param collateralType - safetyPrice's collateral type we want to update\\n     */\\n    function updateSafetyPrice(bytes32 collateralType) external;\\n\\n    // --- CDP Manipulation ---\\n    /**\\n     * @notice Add/remove collateral or put back/generate more debt in a CDP\\n     * @param collateralType Type of collateral to withdraw/deposit in and from the CDP\\n     * @param cdp Target CDP\\n     * @param collateralSource Account we take collateral from/put collateral into\\n     * @param debtDestination Account from which we credit/debit coins and debt\\n     * @param deltaCollateral Amount of collateral added/extract from the CDP\\n     * @param deltaDebt Amount of debt to generate/repay\\n     */\\n    function modifySAFECollateralization(\\n        bytes32 collateralType,\\n        address cdp,\\n        address collateralSource,\\n        address debtDestination,\\n        int deltaCollateral,\\n        int deltaDebt\\n    ) external;\\n\\n    // --- CDP Fungibility ---\\n    /**\\n     * @notice Transfer collateral and/or debt between CDPs\\n     * @param collateralType Collateral type transferred between CDPs\\n     * @param src Source CDP\\n     * @param dst Destination CDP\\n     * @param deltaCollateral Amount of collateral to take/add into src and give/take from dst\\n     * @param deltaDebt Amount of debt to take/add into src and give/take from dst\\n     */\\n    function transferSAFECollateralAndDebt(\\n        bytes32 collateralType,\\n        address src,\\n        address dst,\\n        int deltaCollateral,\\n        int deltaDebt\\n    ) external;\\n\\n    // --- CDP Confiscation ---\\n    /**\\n     * @notice Normally used by the LiquidationEngine in order to confiscate collateral and\\n       debt from a CDP and give them to someone else\\n     * @param collateralType Collateral type the CDP has locked inside\\n     * @param cdp Target CDP\\n     * @param collateralCounterparty Who we take/give collateral to\\n     * @param debtCounterparty Who we take/give debt to\\n     * @param deltaCollateral Amount of collateral taken/added into the CDP\\n     * @param deltaDebt Amount of debt taken/added into the CDP\\n     */\\n    function confiscateSAFECollateralAndDebt(\\n        bytes32 collateralType,\\n        address cdp,\\n        address collateralCounterparty,\\n        address debtCounterparty,\\n        int deltaCollateral,\\n        int deltaDebt\\n    ) external;\\n\\n    // --- Settlement ---\\n    /**\\n     * @notice Nullify an amount of coins with an equal amount of debt\\n     * @param rad Amount of debt & coins to destroy (expressed as a number with 45 decimals)\\n     */\\n    function settleDebt(uint rad) external;\\n\\n    /**\\n     * @notice Usually called by CoinSavingsAccount in order to create unbacked debt\\n     * @param debtDestination Usually AccountingEngine that can settle decreaseSoldAmount with surplus\\n     * @param coinDestination Usually CoinSavingsAccount who passes the new coins to depositors\\n     * @param rad Amount of debt to create (expressed as a number with 45 decimals)\\n     */\\n    function createUnbackedDebt(address debtDestination, address coinDestination, uint rad) external;\\n\\n    // --- Rates ---\\n    /**\\n     * @notice Usually called by TaxCollector in order to accrue interest on a specific collateral type\\n     * @param collateralType Collateral type we accrue interest for\\n     * @param surplusDst Destination for amount of surplus created by applying the interest rate\\n       to debt created by CDPs with 'collateralType'\\n     * @param accumulatedRate Multiplier applied to the debtAmount in order to calculate the surplus\\n     */\\n    function updateAccumulatedRate(bytes32 collateralType, address surplusDst, int accumulatedRate) external;\\n}\\n\",\"keccak256\":\"0x02d5c0dbf9eada0f29652f21159e2d9abfa7dd37c55c136c88b3ced857629f85\",\"license\":\"UNLICENSED\"},\"contracts/makerdao/interfaces/ITaxCollector.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ITaxCollector\\n **/\\ninterface ITaxCollector {\\n    /* ==================== EVENTS ==================== */\\n    event DisableContract();\\n    event InitializeCollateralType(bytes32 collateralType);\\n    event ModifyParameters(bytes32 collateralType, bytes32 what, uint256 data);\\n    event ModifyParameters(bytes32 what, uint256 data);\\n    event ModifyParameters(bytes32 what, address data);\\n    event TaxSingle(bytes32 collateralType, uint256 rate);\\n\\n    /* ==================== STRUCTS ==================== */\\n\\n    struct CollateralType {\\n        uint256 stabilityFee;      // Collateral-specific, per-second stability fee contribution [ray]\\n        uint256 latestUpdateTime;  // Time of last taxSingle [unix epoch time]\\n    }\\n\\n\\n    /* ==================== METHODS ==================== */\\n\\n    // --- Administration ---\\n    function initializeCollateralType(bytes32 collateralType) external;\\n    function modifyParameters(bytes32 collateralType, bytes32 what, uint data) external;\\n    function modifyParameters(bytes32 what, uint data) external;\\n    function modifyParameters(bytes32 what, address data) external;\\n\\n\\n    // --- Stability Fee Collection ---\\n    /**\\n     * @notice Collect tax from a single collateral type\\n     * @param collateralType Collateral type to tax\\n     */\\n    function taxSingle(bytes32 collateralType) external returns (uint rate);\\n\\n    /**\\n     * @notice Disable this contract (normally called by Global Settlement)\\n     * @dev When we disable, the contract tries to settle as much debt as possible (if there's any) with\\n            any surplus that's left in the system. After erasing debt, the contract will either transfer any\\n            remaining surplus right away (if disableCooldown == 0) or will only record the timestamp when\\n            it was disabled\\n    **/\\n    function disableContract() external;\\n}\\n\",\"keccak256\":\"0xd1c2a2f60b781502a6a48b71f1536fc77ecc62c16af5bed0516e98bf7df3cc10\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "custom:changes": "Replaced MakerDAO’s `authorizedAccounts` with `SuAuthenticated`.                 Removed `LibNote` for event logging, requiring custom events (TODO).                 Added `ITaxCollector` interface and moved `CollateralType` struct there.                 Simplified math functions (`_rpow`, `_rmul`, `_add`, `_diff`) for gas efficiency.",
    "custom:events": "No events are defined; custom events need to be added (as noted in FIXME).                Placeholder events (e.g., `DisableContract`) are included in comments but not defined.",
    "custom:security": "Only authorized accounts (DAO, Admin, DisablerAccess) can modify parameters or disable the contract.                 Fee calculations rely on SafeEngine’s rate updates, and `taxSingle` requires up-to-date timestamps.                 The contract assumes `primaryTaxReceiver` is a valid address (e.g., AccountingEngine).",
    "custom:usage": "- **Initialization**: Deploy with access control and SafeEngine addresses.   ```solidity   TaxCollector taxCollector = new TaxCollector(accessControlAddress, safeEngineAddress);   ``` - **Collateral Type Setup**: Initialize a collateral type’s fee parameters.   ```solidity   taxCollector.initializeCollateralType(\"ETH-A\");   ``` - **Fee Collection**: Trigger fee calculation for a collateral type.   ```solidity   uint256 newRate = taxCollector.taxSingle(\"ETH-A\"); // Update fees for ETH-A   ``` - **Parameter Modification**: DAO updates stability fees, base fee, or tax receiver.   ```solidity   taxCollector.modifyParameters(\"ETH-A\", \"stabilityFee\", newFee); // Update collateral fee   taxCollector.modifyParameters(\"base\", newBaseFee); // Update global base fee   taxCollector.modifyParameters(\"primaryTaxReceiver\", newReceiver); // Update tax receiver   ``` - **Disabling**: DisablerAccess accounts can disable the contract.   ```solidity   taxCollector.disableContract(); // Halt operations   ```",
    "details": "Calculates and applies per-second stability fees to Safes, updating accumulated rates in SafeEngine.      Supports a global base fee and per-collateral-type fees, with surplus directed to a primary tax receiver      (e.g., AccountingEngine). Uses SuAuthenticated for access control. Integrates with SafeEngine      to adjust debt balances based on accrued fees. This contract is a fork of MakerDAO’s TaxCollector.sol, adapted      for StableUnit with simplified math and custom access control.",
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "disableContract()": {
        "custom:access": "OnlyDisablerAccess",
        "details": "Sets `contractEnabled` to 0 and emits a placeholder event. Only callable by DisablerAccess accounts."
      },
      "initialize(address,address)": {
        "details": "Sets the SafeEngine reference and inherits access control from SuAuthenticated.",
        "params": {
          "accessControl": "Address of the access control singleton contract.",
          "safeEngine_": "Address of the SafeEngine contract."
        }
      },
      "initializeCollateralType(bytes32)": {
        "custom:access": "OnlyAdmin",
        "details": "Sets initial stability fee to ONE (no fee) and records the current timestamp.      Reverts if already initialized. Only callable by Admin.",
        "params": {
          "collateralType": "Unique identifier for the collateral type (e.g., \"ETH-A\")."
        }
      },
      "modifyParameters(bytes32,address)": {
        "custom:access": "OnlyDAO",
        "details": "Updates the address receiving collected fees (e.g., AccountingEngine). Only callable by DAO.",
        "params": {
          "data": "New receiver address.",
          "what": "Parameter to modify (must be \"primaryTaxReceiver\")."
        }
      },
      "modifyParameters(bytes32,bytes32,uint256)": {
        "custom:access": "OnlyDAO",
        "details": "Updates the stability fee, requiring the collateral type’s timestamp to be up-to-date.      Only callable by DAO.",
        "params": {
          "collateralType": "Unique identifier for the collateral type.",
          "data": "New stability fee value [ray].",
          "what": "Parameter to modify (must be \"stabilityFee\")."
        }
      },
      "modifyParameters(bytes32,uint256)": {
        "custom:access": "OnlyDAO",
        "details": "Updates the global base stability fee. Only callable by DAO.",
        "params": {
          "data": "New base fee value [ray].",
          "what": "Parameter to modify (must be \"base\")."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      },
      "taxSingle(bytes32)": {
        "details": "Calculates the new accumulated rate based on elapsed time and combined stability fees      (base + collateral-specific). Updates SafeEngine and records the current timestamp.",
        "params": {
          "collateralType": "Unique identifier for the collateral type."
        },
        "returns": {
          "rate": "New accumulated rate for the collateral type [ray]."
        }
      }
    },
    "title": "TaxCollector",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "base()": {
        "notice": "Global per-second stability fee contribution applied to all collateral types [ray]."
      },
      "collateralTypes(bytes32)": {
        "notice": "Maps collateral types to their stability fee configurations."
      },
      "contractEnabled()": {
        "notice": "Tracks whether the contract is enabled (0) or disabled (non-zero)."
      },
      "disableContract()": {
        "notice": "Disables the contract, preventing further state-changing operations."
      },
      "initialize(address,address)": {
        "notice": "Initializes the TaxCollector with access control and SafeEngine addresses."
      },
      "initializeCollateralType(bytes32)": {
        "notice": "Initializes a new collateral type for stability fee collection."
      },
      "modifyParameters(bytes32,address)": {
        "notice": "Modifies the primary tax receiver address."
      },
      "modifyParameters(bytes32,bytes32,uint256)": {
        "notice": "Modifies stability fee for a specific collateral type."
      },
      "modifyParameters(bytes32,uint256)": {
        "notice": "Modifies global protocol parameters."
      },
      "primaryTaxReceiver()": {
        "notice": "Address receiving collected stability fees (e.g., AccountingEngine)."
      },
      "safeEngine()": {
        "notice": "Reference to the SafeEngine contract for rate updates."
      },
      "taxSingle(bytes32)": {
        "notice": "Collects stability fees for a collateral type and updates SafeEngine rates."
      }
    },
    "notice": "Manages stability fees for collateral types in the StableUnit protocol.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1226,
        "contract": "contracts/makerdao/core/TaxCollector.sol:TaxCollector",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 1229,
        "contract": "contracts/makerdao/core/TaxCollector.sol:TaxCollector",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 25605,
        "contract": "contracts/makerdao/core/TaxCollector.sol:TaxCollector",
        "label": "ACCESS_CONTROL_SINGLETON",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(ISuAccessControl)32864"
      },
      {
        "astId": 25893,
        "contract": "contracts/makerdao/core/TaxCollector.sol:TaxCollector",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 90186,
        "contract": "contracts/makerdao/core/TaxCollector.sol:TaxCollector",
        "label": "collateralTypes",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_bytes32,t_struct(CollateralType)97388_storage)"
      },
      {
        "astId": 90190,
        "contract": "contracts/makerdao/core/TaxCollector.sol:TaxCollector",
        "label": "safeEngine",
        "offset": 0,
        "slot": "52",
        "type": "t_contract(ISafeEngine)97348"
      },
      {
        "astId": 90193,
        "contract": "contracts/makerdao/core/TaxCollector.sol:TaxCollector",
        "label": "primaryTaxReceiver",
        "offset": 0,
        "slot": "53",
        "type": "t_address"
      },
      {
        "astId": 90196,
        "contract": "contracts/makerdao/core/TaxCollector.sol:TaxCollector",
        "label": "base",
        "offset": 0,
        "slot": "54",
        "type": "t_uint256"
      },
      {
        "astId": 90228,
        "contract": "contracts/makerdao/core/TaxCollector.sol:TaxCollector",
        "label": "contractEnabled",
        "offset": 0,
        "slot": "55",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ISafeEngine)97348": {
        "encoding": "inplace",
        "label": "contract ISafeEngine",
        "numberOfBytes": "20"
      },
      "t_contract(ISuAccessControl)32864": {
        "encoding": "inplace",
        "label": "contract ISuAccessControl",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_struct(CollateralType)97388_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct ITaxCollector.CollateralType)",
        "numberOfBytes": "32",
        "value": "t_struct(CollateralType)97388_storage"
      },
      "t_struct(CollateralType)97388_storage": {
        "encoding": "inplace",
        "label": "struct ITaxCollector.CollateralType",
        "members": [
          {
            "astId": 97385,
            "contract": "contracts/makerdao/core/TaxCollector.sol:TaxCollector",
            "label": "stabilityFee",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 97387,
            "contract": "contracts/makerdao/core/TaxCollector.sol:TaxCollector",
            "label": "latestUpdateTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}