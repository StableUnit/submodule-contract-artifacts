{
  "address": "0x2876D68A718981a6c8EE5D99A9A007a2b08681e5",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "BadAccessControlSingleton",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAdminError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAlerterError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyCDPAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyDAOError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyDisablerAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyLiquidationAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyMintAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyProxyActionsError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyRewardAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyRoleError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyVaultAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyVotingEscrowError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "onlyAuctionAccessRole",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "usr",
          "type": "address"
        }
      ],
      "name": "AddAuthorization",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "DisableContract",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "cdp",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockedCollateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "generatedDebt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "due",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "LiquidateCDP",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "what",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "data",
          "type": "uint256"
        }
      ],
      "name": "ModifyParameters",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "what",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "data",
          "type": "address"
        }
      ],
      "name": "ModifyParameters",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "what",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "data",
          "type": "uint256"
        }
      ],
      "name": "ModifyParameters",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "what",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        }
      ],
      "name": "ModifyParameters",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rad",
          "type": "uint256"
        }
      ],
      "name": "ReduceActiveLiquidationAmount",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "usr",
          "type": "address"
        }
      ],
      "name": "RemoveAuthorization",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "newDiscountType",
          "type": "uint8"
        }
      ],
      "name": "SetLiquidationDiscountType",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACCESS_CONTROL_SINGLETON",
      "outputs": [
        {
          "internalType": "contract ISuAccessControl",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ALERTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "AUCTION_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ActiveLiquidationAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CDP_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DAO_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DISABLER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GlobalLiquidationLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIQUIDATION_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LiquidatorReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINT_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROXY_ACTIONS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARD_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VOTING_ESCROW_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accountingEngine",
      "outputs": [
        {
          "internalType": "contract IAccountingEngine",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralAuctionHouse",
      "outputs": [
        {
          "internalType": "contract CollateralAuctionHouseLike",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "collateralTypes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidationPenalty",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidationLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "activeLiquidationAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "collateralAuctionHouse",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractEnabled",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disableContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "accessControl",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "safeEngine_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "cdp",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "incentivesReceiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "collateralJoin",
          "type": "address"
        }
      ],
      "name": "liquidateCDP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationDiscountType",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        }
      ],
      "name": "liquidationPenalty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "what",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "data",
          "type": "address"
        }
      ],
      "name": "modifyParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "what",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "data",
          "type": "uint256"
        }
      ],
      "name": "modifyParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "what",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "data",
          "type": "uint256"
        }
      ],
      "name": "modifyParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "rad",
          "type": "uint256"
        }
      ],
      "name": "reduceActiveLiquidationAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "safeEngine",
      "outputs": [
        {
          "internalType": "contract ISafeEngine",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "newDiscountType",
          "type": "uint8"
        }
      ],
      "name": "setLiquidationDiscountType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "8f84b6f1e4072e92a972e80f9a9e23c6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BadAccessControlSingleton\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAdminError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAlerterError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyCDPAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyDAOError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyDisablerAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyLiquidationAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyMintAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyProxyActionsError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRewardAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRoleError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyVaultAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyVotingEscrowError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"onlyAuctionAccessRole\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"AddAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DisableContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cdp\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedCollateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"generatedDebt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"due\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"LiquidateCDP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"ModifyParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"name\":\"ModifyParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"ModifyParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"}],\"name\":\"ModifyParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rad\",\"type\":\"uint256\"}],\"name\":\"ReduceActiveLiquidationAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"RemoveAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"newDiscountType\",\"type\":\"uint8\"}],\"name\":\"SetLiquidationDiscountType\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACCESS_CONTROL_SINGLETON\",\"outputs\":[{\"internalType\":\"contract ISuAccessControl\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ALERTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AUCTION_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ActiveLiquidationAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CDP_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAO_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DISABLER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GlobalLiquidationLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDATION_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LiquidatorReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROXY_ACTIONS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VOTING_ESCROW_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accountingEngine\",\"outputs\":[{\"internalType\":\"contract IAccountingEngine\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralAuctionHouse\",\"outputs\":[{\"internalType\":\"contract CollateralAuctionHouseLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"collateralTypes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidationPenalty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activeLiquidationAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collateralAuctionHouse\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractEnabled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"accessControl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"safeEngine_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"cdp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"incentivesReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralJoin\",\"type\":\"address\"}],\"name\":\"liquidateCDP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationDiscountType\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"}],\"name\":\"liquidationPenalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"rad\",\"type\":\"uint256\"}],\"name\":\"reduceActiveLiquidationAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeEngine\",\"outputs\":[{\"internalType\":\"contract ISafeEngine\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newDiscountType\",\"type\":\"uint8\"}],\"name\":\"setLiquidationDiscountType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"disableContract()\":{\"details\":\"Sets `contractEnabled` to 0 and emits a placeholder event. Only callable by DisablerAccess.\"},\"initialize(address,address)\":{\"details\":\"Sets the SafeEngine reference, enables the contract, and sets default discount type.      Emits a placeholder authorization event (can be removed).\",\"params\":{\"accessControl\":\"Address of the access control singleton.\",\"safeEngine_\":\"Address of the SafeEngine contract.\"}},\"liquidateCDP(bytes32,address,address,address)\":{\"details\":\"Confiscates collateral and debt, rewards the liquidator, and auctions remaining collateral via Exchange.      Pushes debt to AccountingEngine. Ensures limits and safety conditions are met.\",\"params\":{\"cdp\":\"Address of the Safe to liquidate.\",\"collateralJoin\":\"Address of the CollateralJoin contract.\",\"collateralType\":\"Unique identifier for the collateral type.\",\"incentivesReceiver\":\"Address to receive liquidator reward.\"},\"returns\":{\"id\":\"Unique identifier of the Exchange order.\"}},\"liquidationPenalty(bytes32)\":{\"params\":{\"collateralType\":\"Unique identifier for the collateral type.\"},\"returns\":{\"_0\":\"Liquidation penalty [wad].\"}},\"modifyParameters(bytes32,address)\":{\"details\":\"Updates AccountingEngine or Exchange module address. Only callable by DAO.\",\"params\":{\"data\":\"New contract address.\",\"what\":\"Parameter to modify (\\\"accountingEngine\\\" or \\\"liquidator\\\").\"}},\"modifyParameters(bytes32,bytes32,uint256)\":{\"details\":\"Updates liquidation penalty or limit for a collateral type. Only callable by DAO.\",\"params\":{\"collateralType\":\"Unique identifier for the collateral type.\",\"data\":\"New parameter value.\",\"what\":\"Parameter to modify (\\\"liquidationPenalty\\\" or \\\"liquidationLimit\\\").\"}},\"modifyParameters(bytes32,uint256)\":{\"details\":\"Updates global liquidation limit or liquidator reward. Only callable by DAO.\",\"params\":{\"data\":\"New parameter value.\",\"what\":\"Parameter to modify (\\\"GlobalLiquidationLimit\\\" or \\\"LiquidatorReward\\\").\"}},\"reduceActiveLiquidationAmount(bytes32,uint256)\":{\"details\":\"Updates global and collateral-specific liquidation amounts. Only callable by LiquidationAccess.\",\"params\":{\"collateralType\":\"Unique identifier for the collateral type.\",\"rad\":\"Amount to reduce [rad].\"}},\"setLiquidationDiscountType(uint8)\":{\"details\":\"Updates the auction discount type. Only callable by Admin.\",\"params\":{\"newDiscountType\":\"New discount type (e.g., 0 for aggressive).\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"ActiveLiquidationAmount()\":{\"notice\":\"Current StablePro debt for active auctions [rad].\"},\"GlobalLiquidationLimit()\":{\"notice\":\"Maximum StablePro debt for active auctions [rad].\"},\"LiquidatorReward()\":{\"notice\":\"Reward percentage for liquidators [wad].\"},\"accountingEngine()\":{\"notice\":\"Reference to the AccountingEngine for debt queuing.\"},\"collateralTypes(bytes32)\":{\"notice\":\"Maps collateral types to their liquidation configurations.\"},\"contractEnabled()\":{\"notice\":\"Flag indicating if the contract is enabled (1) or disabled (0).\"},\"disableContract()\":{\"notice\":\"Disables the contract, halting liquidations.\"},\"initialize(address,address)\":{\"notice\":\"Initializes the LiquidationEngine with access control and SafeEngine addresses.\"},\"liquidateCDP(bytes32,address,address,address)\":{\"notice\":\"Liquidates an undercollateralized Safe.\"},\"liquidationDiscountType()\":{\"notice\":\"Discount type for liquidation auctions (e.g., 0 for aggressive).\"},\"liquidationPenalty(bytes32)\":{\"notice\":\"Retrieves the liquidation penalty for a collateral type.\"},\"liquidator()\":{\"notice\":\"Address of the Exchange module for auctions.\"},\"modifyParameters(bytes32,address)\":{\"notice\":\"Modifies contract addresses.\"},\"modifyParameters(bytes32,bytes32,uint256)\":{\"notice\":\"Modifies collateral type parameters.\"},\"modifyParameters(bytes32,uint256)\":{\"notice\":\"Modifies global parameters.\"},\"reduceActiveLiquidationAmount(bytes32,uint256)\":{\"notice\":\"Reduces active liquidation amounts after an auction completes.\"},\"safeEngine()\":{\"notice\":\"Reference to the SafeEngine contract for Safe operations.\"},\"setLiquidationDiscountType(uint8)\":{\"notice\":\"Sets the discount type for liquidation auctions.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/makerdao/externalContracts/LiquidationEngine.sol\":\"LiquidationEngine\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"contracts/exchange/contracts/interfaces/IExchange.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\npragma solidity ^0.8.0;\\n\\nstruct Order {\\n    address token2sell;\\n    address token2buy;\\n    address beneficiary;\\n    address caller;\\n    uint256 amountLeft;\\n    uint256 token2buyAmount;\\n    uint64 creationTimestamp;\\n    uint8 discountType;\\n}\\n\\nstruct OrderWithId {\\n    Order order;\\n    uint256 orderId;\\n}\\n\\ninterface IExchange {\\n    /* ===================== ERRORS ===================== */\\n    error OnlyAdminError();\\n    error OrderExist(uint256 orderId);\\n    error OrderNotExist(uint256 orderId);\\n    error IncorrectToken(address orderToken2buy, address inToken);\\n    error SmallAmountLeft();\\n    error BadOutAmount();\\n    error UserIsNotBeneficiary();\\n    error IsNotTopStaker(address staker);\\n    error IsNotStaker(address staker);\\n    error OrderNotForThisStaker(uint256 orderId, address staker);\\n    error NotEnoughReturnValue();\\n    error CallbackError();\\n    error ZeroPriceError();\\n    error InvalidDiscountType();\\n    error InvalidAddress();\\n    error InvalidTokens();\\n    error InvalidAmount();\\n    error IsNotWhitelisted();\\n    error MaxDiscountTooHigh();\\n    error NoStakersAvailable();\\n    error ZeroRecipient();\\n\\n    /* ======================== EVENTS ========================= */\\n    event PriceCurveChanged();\\n    event OrderAdded(uint256 orderId);\\n    event OrderCanceled(uint256 orderId);\\n    event OrderFilled(uint256 orderId);\\n    event OrderFilledPartially(uint256 orderId);\\n    event LpOrdersAdded(address LPToken, uint256[] orderIds);\\n    event DustThresholdChanged(uint256 oldValue, uint256 newValue);\\n    event WhitelistUpdated(address user, bool isWhitelisted);\\n    event MaxDiscountPercentChanged(uint256 oldMaxDiscountPercent, uint256 newMaxDiscountPercent);\\n    event EmergencyWithdraw(address indexed token, address indexed recipient, uint256 amount);\\n\\n    /* ==================== MUTABLE METHODS ==================== */\\n\\n    /**\\n      * @notice Add order to swap {token2sell} to {token2buy}.\\n      * @dev This swap is async, because depends on how arbitrage bots will fill this order. Emits OrderAdded() event.\\n      * Before addOrder user needs to approve token2sell for exchange contract\\n      * @param token2sell - Address of token to sell\\n      * @param amount2sell - Amount of {token2sell} to sell\\n      * @param token2buy - Address of token to buy\\n      * @param beneficiary - Address that will receive {token2buy} after filling order.\\n      * @param discountType - Speed of decreasing swap price. { 0 - aggressive, 1 - middle, 2 - conservative }\\n      * @param collateralJoin - address of collateral adapter\\n     **/\\n    function addOrder (\\n        address token2sell,\\n        uint256 amount2sell,\\n        address token2buy,\\n        address beneficiary,\\n        uint8 discountType,\\n        address collateralJoin\\n    ) external returns (uint256);\\n\\n    /**\\n      * @notice Only user who place order or who is beneficiary can cancelOrder();\\n      * @param orderId - Id of order to cancel.\\n     **/\\n    function cancelOrder (uint256 orderId) external;\\n\\n    /**\\n      * @notice Fill order with flash-loan like logic\\n      * @dev Caller contract receive orders {token2sell} and after that his stableunitFillOrderCallback() is called.\\n      * At the end of thi callback contract should send some amount of another token back to Exchange contract.\\n      * @dev We don't need slippage protection because:\\n      * 1. Prices are determined by Oracle, not DEX market conditions\\n      * 2. Output amount is calculated deterministically at execution time\\n      * @param orderId - Id of order to fill.\\n      * @param inAmount - Amount of {token2sell} to receive\\n      * @param data - encoded data to pass to callback function\\n     **/\\n    function fillOrderAsFlashLoan (\\n        uint256 orderId,\\n        uint256 inAmount,\\n        bytes memory data\\n    ) external returns (uint256 outAmount);\\n\\n    /**\\n      * @notice Fill order without a flash-loan\\n      * @dev Caller contract send tokens and receive another tokens depends on the order\\n      * @param orderId - Id of order to fill.\\n      * @param inAmount - Amount of {token2sell} to receive\\n     **/\\n    function fillOrderSimple(uint256 orderId, uint256 inAmount) external returns (uint256 outAmount);\\n\\n    /**\\n     * @notice Updates the maximum allowed discount percentage for all order types\\n     * @dev This function can only be called by the contract owner\\n     * @param newMaxDiscountPercent New maximum discount value (in percentage points).\\n     *        Value is bounded to 90% to prevent configuration mistakes\\n     */\\n    function setMaxDiscountPercent(uint256 newMaxDiscountPercent) external;\\n\\n    /**\\n      * @notice Add or remove user from whitelist\\n      * @param user - address of user\\n      * @param isWhitelisted - bool, false if we want to remove, true if we want to add user to whitelist.\\n     **/\\n    function updateWhitelistUser(address user, bool isWhitelisted) external;\\n\\n    /**\\n      * @notice Function to update price curve - how fast {token2sell} price will decrease/increase\\n      * @param discountType - discount type to change\\n      * @param newPriceCurve - parameters of formula\\n     **/\\n    function setPriceCurve(uint8 discountType, uint256[2] calldata newPriceCurve) external;\\n\\n    /**\\n      * @notice Function to update dust threshold\\n      * @param newThreshold - new dust threshold\\n     **/\\n    function setDustThreshold(uint256 newThreshold) external;\\n\\n    /* ==================== VIEW METHODS ==================== */\\n    /**\\n      * @return The amount of outcome that caller will receive if he will fill {orderId} with {inAmount} of {token2sell}\\n     **/\\n    function getExpectedOrderOutcome (uint256 orderId, uint256 inAmount) external view returns (uint256);\\n\\n    /**\\n      * @return Order with id = {orderId}\\n     **/\\n    function getOrder (uint256 orderId) external view returns (Order memory);\\n\\n    /**\\n      * @return The amount of not full-filled orders\\n     **/\\n    function getOrdersCount () external view returns (uint256);\\n\\n    /**\\n      * @return The array of all not-filled orders. May be deleted after adding GraphQL for orderIds\\n     **/\\n    function getAllOrders (uint256 offset, uint256 limit) external view returns (OrderWithId[] memory);\\n\\n    /**\\n     * @notice Returns the address of the staker assigned to an order during grace period\\n     * @param orderId The ID of the order to check\\n     * @return assignedStaker The address of the assigned staker, or zero address if:\\n     *         - Order doesn't exist\\n     *         - Order is past grace period\\n     *         - No top stakers available\\n     */\\n    function getAssignedStaker(uint256 orderId) external view returns (address);\\n\\n    /**\\n  * @notice Emergency withdraw in case contract have some tokens, that can be transferred by default functions\\n     **/\\n    function emergencyWithdraw(address token, address recipient, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xd984d6b394172dd53590c46c8e8f6449559a2c280b44a70bec23e5c2478cb52c\",\"license\":\"BSL 1.1\"},\"contracts/exchange/contracts/periphery/contracts/access-control/SuAccessRoles.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title SuAccessRoles Library\\n * @dev SuAuthenticated and SuAccessControlSingleton need to have this constants\\n * Hierarchy:\\n *      1. DAO - can give admins and system roles\\n *      2.1. Admin - can set Alerters\\n *      2.2. System - includes Minter, Liquidation, Reward and Disabler roles, don't have access to give some roles.\\n *      3. Alerter - can send alerts and trigger rate limits, don't have access to give some roles.\\n */\\nabstract contract SuAccessRoles {\\n    bytes32 public constant ADMIN_ROLE = 0x00;\\n\\n    bytes32 public constant DAO_ROLE = keccak256(\\\"DAO_ROLE\\\");\\n\\n    bytes32 public constant ALERTER_ROLE = keccak256(\\\"ALERTER_ROLE\\\");\\n\\n    // system roles\\n    bytes32 public constant MINT_ACCESS_ROLE = keccak256(\\\"MINT_ACCESS_ROLE\\\");\\n    bytes32 public constant AUCTION_ACCESS_ROLE = keccak256(\\\"AUCTION_ACCESS_ROLE\\\");\\n    bytes32 public constant LIQUIDATION_ACCESS_ROLE = keccak256(\\\"LIQUIDATION_ACCESS_ROLE\\\");\\n    bytes32 public constant REWARD_ACCESS_ROLE = keccak256(\\\"REWARD_ACCESS_ROLE\\\");\\n    // bytes32 public constant SYSTEM_ROLE = keccak256(\\\"SYSTEM_ROLE\\\");\\n    bytes32 public constant DISABLER_ROLE = keccak256(\\\"DISABLER_ROLE\\\");\\n    bytes32 public constant CDP_ACCESS_ROLE = keccak256(\\\"CDP_ACCESS_ROLE\\\");\\n    bytes32 public constant VOTING_ESCROW_ROLE = keccak256(\\\"VOTING_ESCROW_ROLE\\\");\\n    bytes32 public constant PROXY_ACTIONS_ROLE = keccak256(\\\"PROXY_ACTIONS_ROLE\\\");\\n}\\n\",\"keccak256\":\"0x6702597d2d879605a4f25e71c348b4c7f84f4618ca799ba0fcb4a5ad994b788c\",\"license\":\"BSL 1.1\"},\"contracts/exchange/contracts/periphery/contracts/access-control/SuAuthenticated.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/access-control/ISuAccessControl.sol\\\";\\nimport \\\"./SuAccessRoles.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @title SuAuthenticated\\n * @dev other contracts should inherit to be authenticated.\\n * The address of SuAccessControlSingleton should be one for all contract that inherits SuAuthenticated\\n */\\nabstract contract SuAuthenticated is Initializable, SuAccessRoles, IERC165Upgradeable {\\n    ISuAccessControl public ACCESS_CONTROL_SINGLETON;\\n\\n    error OnlyDAOError();\\n    error OnlyAdminError();\\n    error OnlyAlerterError();\\n    error OnlyVaultAccessError();\\n    error OnlyLiquidationAccessError();\\n    error OnlyMintAccessError();\\n    error OnlyRewardAccessError();\\n    error OnlyDisablerAccessError();\\n    error OnlyVotingEscrowError();\\n    error OnlyProxyActionsError();\\n    error OnlyRoleError();\\n    error OnlyCDPAccessError();\\n    error BadAccessControlSingleton();\\n    error onlyAuctionAccessRole();\\n\\n    /**\\n     * @dev should be passed in constructor\\n     */\\n    function __suAuthenticatedInit(address _accessControlSingleton) internal onlyInitializing {\\n        ACCESS_CONTROL_SINGLETON = ISuAccessControl(_accessControlSingleton);\\n        if (\\n            _accessControlSingleton == address(0) ||\\n            !ISuAccessControl(_accessControlSingleton).supportsInterface(type(IAccessControlUpgradeable).interfaceId)\\n        ) revert BadAccessControlSingleton();\\n    }\\n\\n    /** CORE ROLES */\\n\\n    modifier onlyDAO() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(DAO_ROLE, msg.sender)) revert OnlyDAOError();\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(ADMIN_ROLE, msg.sender)) revert OnlyAdminError();\\n        _;\\n    }\\n\\n    modifier onlyAlerter() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(ALERTER_ROLE, msg.sender)) revert OnlyAlerterError();\\n        _;\\n    }\\n\\n    /** SYSTEM ROLES */\\n\\n    modifier onlyLiquidationAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(LIQUIDATION_ACCESS_ROLE, msg.sender)) revert OnlyLiquidationAccessError();\\n        _;\\n    }\\n\\n    modifier onlyAuctionAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(AUCTION_ACCESS_ROLE, msg.sender)) revert OnlyLiquidationAccessError();\\n        _;\\n    }\\n\\n    modifier onlyMintAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(MINT_ACCESS_ROLE, msg.sender)) revert OnlyMintAccessError();\\n        _;\\n    }\\n\\n    modifier onlyRewardAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(REWARD_ACCESS_ROLE, msg.sender)) revert OnlyRewardAccessError();\\n        _;\\n    }\\n\\n    modifier onlyRewardOrAdminAccess() {\\n        if (\\n            !ACCESS_CONTROL_SINGLETON.hasRole(REWARD_ACCESS_ROLE, msg.sender) &&\\n            !ACCESS_CONTROL_SINGLETON.hasRole(ADMIN_ROLE, msg.sender)\\n        ) revert OnlyRewardAccessError();\\n        _;\\n    }\\n\\n    // @notice This modifier check if user/contract have access to \\\"disable\\\" contracts.\\n    // All main contracts in our lending protocol have disableContract() method that stops contracts main functions.\\n    modifier onlyDisablerAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(DISABLER_ROLE, msg.sender)) revert OnlyDisablerAccessError();\\n        _;\\n    }\\n\\n    modifier onlyCDPAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(CDP_ACCESS_ROLE, msg.sender)) revert OnlyCDPAccessError();\\n        _;\\n    }\\n\\n    modifier onlyVotingEscrow() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(VOTING_ESCROW_ROLE, msg.sender)) revert OnlyVotingEscrowError();\\n        _;\\n    }\\n\\n    modifier onlyProxyActions() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(PROXY_ACTIONS_ROLE, msg.sender)) revert OnlyProxyActionsError();\\n        _;\\n    }\\n\\n    // syntax sugar under ACCESS_CONTROL_SINGLETON\\n    modifier onlyRole(bytes32 role) {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(role, msg.sender)) revert OnlyRoleError();\\n        _;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return ACCESS_CONTROL_SINGLETON.supportsInterface(interfaceId);\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xc27fc434b09e69804160c93896d39da4f9890d21e2ca1002eb53ebf1234e4d91\",\"license\":\"BSL 1.1\"},\"contracts/exchange/contracts/periphery/contracts/interfaces/access-control/ISuAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\nimport \\\"../../access-control/SuAccessRoles.sol\\\";\\n\\n/**\\n * @notice Access control for contracts\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n **/\\ninterface ISuAccessControl is IAccessControlUpgradeable, IERC165Upgradeable {\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\\n}\\n\",\"keccak256\":\"0x25724ac502fd6418ccd38273b276de4b2fdecd023d723c5d80c9f0a27c407bcd\",\"license\":\"MIT\"},\"contracts/makerdao/externalContracts/LiquidationEngine.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\n/// dog.sol -- StablePro liquidation module 2.0\\n\\n// This contract is forked from MakerDAO's cat.sol\\n// Copyright (C) 2020-2022 Dai Foundation\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\n// Manages Safe liquidations in the StableUnit protocol\\n// Difference: Renamed to LiquidationEngine.sol for StableUnit, reflecting its role in StablePro liquidations. Adapted for Exchange-based auctions and global liquidator reward.\\npragma solidity ^0.8.0;\\n// -  pragma solidity >=0.5.12;\\n// Difference: Updated to Solidity ^0.8.0 for improved safety and features like safe math by default.\\n\\n// Import interface defining LiquidationEngine functions and structs\\n// + import (structs defined inline)\\nimport \\\"../interfaces/ILiquidationEngine.sol\\\";\\n// Difference: StableUnit moves structs to ILiquidationEngine interface for modularity and clarity.\\n\\n// Import SafeEngine interface for Safe operations\\n// + import (uses VatLike interface)\\nimport \\\"../interfaces/ISafeEngine.sol\\\";\\n// Difference: StableUnit uses ISafeEngine for SafeEngine interactions, replacing MakerDAO's VatLike.\\n\\n// Import CollateralJoin interface for collateral operations\\n// + import\\nimport \\\"../interfaces/ICollateralJoin.sol\\\";\\n// Difference: StableUnit adds ICollateralJoin for collateral handling during auctions.\\n\\n// Import Exchange interface for auctions\\n// + import (uses Kicker interface)\\nimport \\\"../../exchange/contracts/interfaces/IExchange.sol\\\";\\n// Difference: StableUnit uses IExchange for auctions, replacing MakerDAO's Kicker.\\n\\n// Import role-based access control\\n// + import (uses wards mapping)\\nimport \\\"../../exchange/contracts/periphery/contracts/access-control/SuAuthenticated.sol\\\";\\n// Difference: StableUnit uses SuAuthenticated for role-based access control, replacing MakerDAO's wards.\\n\\n// Import AccountingEngine interface for debt queuing\\n// + import (uses VowLike interface)\\nimport \\\"../interfaces/IAccountingEngine.sol\\\";\\n// Difference: StableUnit uses IAccountingEngine, replacing MakerDAO's VowLike.\\n\\n// Import safe math operations\\n// + import (uses inline math functions)\\nimport {Math} from \\\"../utils/Math.sol\\\";\\n// Difference: StableUnit imports Math.sol for reusable safe math operations, replacing MakerDAO's inline math.\\n\\n// Note: Custom events need to be defined for logging state changes (TODO)\\n// -  // FIXME: This contract was altered compared to the production version. It doesn't use LibNote anymore.\\n// Difference: Both note the removal of LibNote for event logging, but StableUnit explicitly plans custom events.\\n// CHANGED (from dog.sol): added Whitelist behaviour to add order correctly.\\n// Added SuAuthenticated instead of authorizedAccounts\\n// Added Math to move Math behaviour.\\n// Added interface and moved struct there.\\n// Added AddAuthorization call in constructor (can be removed).\\n// Added LiquidatorReward\\n// Moved Liquidator from CollateralType struct to global var, because it's one for all collaterals\\n// Calculate rewardCollateral in liquidateCDP\\n// Use addOrder instead of startAuction in liquidateCDP\\n\\n/**\\n * @title LiquidationEngine\\n * @notice Manages Safe liquidations in the StableUnit protocol.\\n * @dev Identifies undercollateralized Safes, confiscates collateral and debt, and auctions collateral via the Exchange\\n *      module. Supports global and per-collateral-type liquidation limits, a liquidator reward, and a discount type for\\n *      auctions. Integrates with SafeEngine for Safe operations and AccountingEngine for debt queuing. This contract is a\\n *      fork of MakerDAO\\u2019s Dog.sol, adapted for StableUnit with Exchange-based auctions and a global liquidator.\\n * @custom:usage\\n * - **Initialization**: Deploy with access control and SafeEngine addresses.\\n *   ```solidity\\n *   LiquidationEngine liquidationEngine = new LiquidationEngine(accessControl, safeEngine);\\n *   ```\\n * - **Collateral Type Setup**: Configure liquidation parameters for a collateral type.\\n *   ```solidity\\n *   liquidationEngine.modifyParameters(\\\"ETH-A\\\", \\\"liquidationPenalty\\\", penalty);\\n *   liquidationEngine.modifyParameters(\\\"ETH-A\\\", \\\"liquidationLimit\\\", limit);\\n *   ```\\n * - **Liquidation**: Liquidate an undercollateralized Safe.\\n *   ```solidity\\n *   uint orderId = liquidationEngine.liquidateCDP(\\\"ETH-A\\\", safeAddress, incentivesReceiver, collateralJoin);\\n *   ```\\n * - **Parameter Modification**: Update global or contract-level parameters.\\n *   ```solidity\\n *   liquidationEngine.modifyParameters(\\\"GlobalLiquidationLimit\\\", newLimit);\\n *   liquidationEngine.modifyParameters(\\\"liquidator\\\", newExchangeAddress);\\n *   ```\\n * - **Disabling**: Disable the contract to halt liquidations.\\n *   ```solidity\\n *   liquidationEngine.disableContract();\\n *   ```\\n * @custom:security Only authorized accounts (DAO, Admin, DisablerAccess, LiquidationAccess) can call state-changing functions.\\n *                 Liquidations require sufficient limits and valid safety prices. Rewards are calculated to incentivize liquidators.\\n * @custom:changes Renamed from Dog.sol to LiquidationEngine.sol. Replaced auction houses with Exchange module. Added global\\n *                 liquidator and reward. Used SuAuthenticated for access control. Moved struct to ILiquidationEngine.\\n * @custom:events Emits `AddAuthorization`, `DisableContract`, `ModifyParameters`, `LiquidateCDP`, `ReduceActiveLiquidationAmount`.\\n */\\n\\n// Manages Safe liquidations in the StableUnit protocol\\n// -  contract Cat {\\n\\ninterface CollateralAuctionHouseLike {\\n    function startAuction(\\n        bytes32 collateralType,\\n        address collateralJoin,\\n        address debtReceiver,\\n        uint256 collateralAmount,\\n        address incentivesReceiver\\n    ) external returns (uint256);\\n}\\ncontract LiquidationEngine is SuAuthenticated, ILiquidationEngine, Math {\\n    // --- Data ---\\n    /// @notice Reference to the SafeEngine contract for Safe operations.\\n    // -  VatLike public vat;    // CDP Engine\\n    ISafeEngine public safeEngine; // CDP Engine\\n    // Difference: Renamed to safeEngine and uses ISafeEngine interface for type safety and clarity.\\n\\n    /// @notice Maps collateral types to their liquidation configurations.\\n    // -  struct Ilk { address flip; uint256 chop; uint256 dunk; }\\n    // -  mapping (bytes32 => Ilk) public ilks;\\n    mapping (bytes32 => CollateralType) public collateralTypes;\\n    // Difference: Renamed to collateralTypes and uses CollateralType struct (defined in ILiquidationEngine). Removes flip (liquidator) field, as StableUnit uses a global liquidator.\\n\\n    /// @notice Reference to the AccountingEngine for debt queuing.\\n    // -  VowLike public vow;    // Debt Engine\\n    IAccountingEngine public accountingEngine; // Debt Engine\\n    // Difference: Renamed to accountingEngine and uses IAccountingEngine interface for clarity.\\n\\n    /// @notice Maximum StablePro debt for active auctions [rad].\\n    // -  uint256 public box;    // Max Dai out for liquidation [rad]\\n    uint256 public GlobalLiquidationLimit; // Max StablePro needed to cover debt+fees of active auctions [rad]\\n    // Difference: Renamed to GlobalLiquidationLimit for clarity, but functionality is identical.\\n\\n    /// @notice Current StablePro debt for active auctions [rad].\\n    // -  uint256 public litter; // Balance of Dai out for liquidation [rad]\\n    uint256 public ActiveLiquidationAmount; // Amt StablePro needed to cover debt+fees of active auctions [rad]\\n    // Difference: Renamed to ActiveLiquidationAmount for clarity, but functionality is identical.\\n\\n    /// @notice Reward percentage for liquidators [wad].\\n    // +\\n    uint256 public LiquidatorReward; // Reward in percent (1e18 == 1) for liquidation [wad]\\n    // Difference: StableUnit adds LiquidatorReward for global liquidator incentives, not present in MakerDAO.\\n\\n    /// @notice Address of the Exchange module for auctions.\\n    // + (liquidator in Ilk struct)\\n    address public liquidator; // Liquidator, Exchange module\\n    // Difference: StableUnit uses a global liquidator (Exchange module) instead of per-collateral flip addresses.\\n\\n    /// @notice Discount type for liquidation auctions (e.g., 0 for aggressive).\\n    // +\\n    uint8 public liquidationDiscountType; // DiscountType, that will be used in liquidations\\n    // Difference: StableUnit adds liquidationDiscountType for auction configuration.\\n\\n    //@notice address for collateral auction house\\n    CollateralAuctionHouseLike public collateralAuctionHouse;\\n\\n    // --- Init ---\\n    /**\\n     * @notice Initializes the LiquidationEngine with access control and SafeEngine addresses.\\n     * @dev Sets the SafeEngine reference, enables the contract, and sets default discount type.\\n     *      Emits a placeholder authorization event (can be removed).\\n     * @param accessControl Address of the access control singleton.\\n     * @param safeEngine_ Address of the SafeEngine contract.\\n     */\\n    // -  constructor(address vat_) public { ... }\\n    function initialize(address accessControl, address safeEngine_) initializer public {\\n        // -  wards[msg.sender] = 1;\\n        __suAuthenticatedInit(accessControl); // Set up role-based access control\\n        // -  vat = VatLike(vat_);\\n        safeEngine = ISafeEngine(safeEngine_); // Assign SafeEngine contract\\n        // -  live = 1;\\n        contractEnabled = 1; // Enable the contract\\n        liquidationDiscountType = 0; // Set default discount type to aggressive\\n\\n        emit AddAuthorization(msg.sender); // Emit placeholder authorization event (can be removed)\\n        // Difference: StableUnit uses initializer for upgradeability, SuAuthenticated for access control, and adds liquidationDiscountType.\\n    }\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    // +\\n    constructor() {\\n        _disableInitializers(); // Disable initializers for safety\\n        // Difference: StableUnit adds constructor for upgradeability, not present in MakerDAO.\\n    }\\n\\n    // --- Disable ---\\n    /// @notice Flag indicating if the contract is enabled (1) or disabled (0).\\n    // -  uint256 public live;   // Active Flag\\n    uint public contractEnabled;\\n    // Difference: Renamed to contractEnabled for clarity, but functionality is identical.\\n\\n    /**\\n     * @notice Disables the contract, halting liquidations.\\n     * @dev Sets `contractEnabled` to 0 and emits a placeholder event. Only callable by DisablerAccess.\\n     */\\n    // -  function cage() external auth { live = 0; }\\n    function disableContract() external onlyDisablerAccess {\\n        // -  live = 0;\\n        contractEnabled = 0; // Disable the contract\\n        emit DisableContract(); // Emit event for contract disablement\\n        // Difference: Renamed to disableContract, uses onlyDisablerAccess instead of auth, and plans to emit a custom event.\\n    }\\n\\n    // --- Administration ---\\n    /**\\n     * @notice Modifies contract addresses.\\n     * @dev Updates AccountingEngine or Exchange module address. Only callable by DAO.\\n     * @param what Parameter to modify (\\\"accountingEngine\\\" or \\\"liquidator\\\").\\n     * @param data New contract address.\\n     */\\n    // -  function file(bytes32 what, address data) external auth { ... }\\n    function modifyParameters(bytes32 what, address data) external onlyDAO {\\n        // -  if (what == \\\"vow\\\") vow = VowLike(data);\\n        if (what == \\\"accountingEngine\\\") {\\n            accountingEngine = IAccountingEngine(data); // Update AccountingEngine\\n        } else if (what == \\\"collateralAuctionHouse\\\") {\\n            safeEngine.denySAFEModification(address(collateralAuctionHouse));\\n            collateralAuctionHouse = CollateralAuctionHouseLike(data);\\n            safeEngine.approveSAFEModification(data);\\n        } else if (what == \\\"liquidator\\\") { // -  else revert(\\\"Cat/file-unrecognized-param\\\");\\n            liquidator = data; // Update liquidator (Exchange module)\\n        } else revert(\\\"LiquidationEngine/file-unrecognized-param\\\"); // Revert for unrecognized parameter\\n        emit ModifyParameters(what, data); // Emit event for parameter modification\\n        // Difference: StableUnit renames vow to accountingEngine, adds liquidator, and uses onlyDAO instead of auth.\\n    }\\n\\n    /**\\n     * @notice Modifies global parameters.\\n     * @dev Updates global liquidation limit or liquidator reward. Only callable by DAO.\\n     * @param what Parameter to modify (\\\"GlobalLiquidationLimit\\\" or \\\"LiquidatorReward\\\").\\n     * @param data New parameter value.\\n     */\\n    // -  function file(bytes32 what, uint256 data) external auth { ... }\\n    function modifyParameters(bytes32 what, uint256 data) external onlyDAO {\\n        // -  if (what == \\\"box\\\") box = data;\\n        if (what == \\\"GlobalLiquidationLimit\\\") GlobalLiquidationLimit = data; // Update global liquidation limit\\n        // -  else revert(\\\"Cat/file-unrecognized-param\\\");\\n        else if (what == \\\"LiquidatorReward\\\") LiquidatorReward = data; // Update liquidator reward\\n        else revert(\\\"LiquidationEngine/file-unrecognized-param\\\"); // Revert for unrecognized parameter\\n        emit ModifyParameters(what, data); // Emit event for parameter modification\\n        // Difference: StableUnit renames box to GlobalLiquidationLimit, adds LiquidatorReward, and uses onlyDAO.\\n    }\\n\\n    /**\\n     * @notice Modifies collateral type parameters.\\n     * @dev Updates liquidation penalty or limit for a collateral type. Only callable by DAO.\\n     * @param collateralType Unique identifier for the collateral type.\\n     * @param what Parameter to modify (\\\"liquidationPenalty\\\" or \\\"liquidationLimit\\\").\\n     * @param data New parameter value.\\n     */\\n    // -  function file(bytes32 ilk, bytes32 what, uint256 data) external auth { ... }\\n    function modifyParameters(bytes32 collateralType, bytes32 what, uint256 data) external onlyDAO {\\n        // -  if (what == \\\"chop\\\") ilks[ilk].chop = data;\\n        if (what == \\\"liquidationPenalty\\\") {\\n            // + require\\n            require(data >= WAD, \\\"LiquidationEngine/file-liquidationPenalty-lt-WAD\\\"); // Ensure penalty is at least 1\\n            collateralTypes[collateralType].liquidationPenalty = data; // Update liquidation penalty\\n        }\\n        // -  else if (what == \\\"dunk\\\") ilks[ilk].dunk = data;\\n        else if (what == \\\"liquidationLimit\\\") collateralTypes[collateralType].liquidationLimit = data; // Update liquidation limit\\n        // -  else revert(\\\"Cat/file-unrecognized-param\\\");\\n        else revert(\\\"LiquidationEngine/file-unrecognized-param\\\"); // Revert for unrecognized parameter\\n        emit ModifyParameters(collateralType, what, data); // Emit event for parameter modification\\n        // Difference: StableUnit renames chop to liquidationPenalty and dunk to liquidationLimit, adds penalty check, and uses onlyDAO.\\n    }\\n    /**\\n     * @notice Retrieves the liquidation penalty for a collateral type.\\n     * @param collateralType Unique identifier for the collateral type.\\n     * @return Liquidation penalty [wad].\\n     */\\n    // +\\n    function liquidationPenalty(bytes32 collateralType) external view returns (uint256) {\\n        return collateralTypes[collateralType].liquidationPenalty; // Return liquidation penalty\\n        // Difference: StableUnit adds liquidationPenalty function for transparency.\\n    }\\n\\n    /**\\n     * @notice Sets the discount type for liquidation auctions.\\n     * @dev Updates the auction discount type. Only callable by Admin.\\n     * @param newDiscountType New discount type (e.g., 0 for aggressive).\\n     */\\n    // +\\n    function setLiquidationDiscountType(uint8 newDiscountType) external onlyAdmin {\\n        liquidationDiscountType = newDiscountType; // Update discount type\\n        // Difference: StableUnit adds setLiquidationDiscountType for auction configuration.\\n        emit SetLiquidationDiscountType(newDiscountType);\\n    }\\n\\n    /**\\n     * @notice Liquidates an undercollateralized Safe.\\n     * @dev Confiscates collateral and debt, rewards the liquidator, and auctions remaining collateral via Exchange.\\n     *      Pushes debt to AccountingEngine. Ensures limits and safety conditions are met.\\n     * @param collateralType Unique identifier for the collateral type.\\n     * @param cdp Address of the Safe to liquidate.\\n     * @param incentivesReceiver Address to receive liquidator reward.\\n     * @param collateralJoin Address of the CollateralJoin contract.\\n     * @return id Unique identifier of the Exchange order.\\n     */\\n    // -  function bite(bytes32 ilk, address urn) external returns (uint256 id) { ... }\\n    function liquidateCDP(\\n        bytes32 collateralType,\\n        address cdp,\\n        address incentivesReceiver,\\n        address collateralJoin\\n    ) external returns (uint256 id) {\\n        // -  require(live == 1, \\\"Cat/not-live\\\");\\n        require(contractEnabled == 1, \\\"LiquidationEngine/not-contractEnabled\\\"); // Ensure contract is enabled\\n        // -  (,uint256 rate,uint256 spot,,uint256 dust) = vat.ilks(ilk);\\n        // -  (uint256 ink, uint256 art) = vat.urns(ilk, urn);\\n        safeEngine.updateSafetyPrice(collateralType); // Refresh safety price from oracle\\n        (uint256 collateralAmount, uint256 generatedDebt) = safeEngine.safes(collateralType, cdp); // Load Safe state\\n        // -  Ilk memory milk = ilks[ilk];\\n        CollateralType memory _cType = collateralTypes[collateralType]; // Load collateral type\\n        uint256 deltaGeneratedDebt; // Debt to liquidate\\n        uint256 accumulatedRate; // Accumulated rate for debt calculation\\n        uint256 debtFloor; // Minimum debt requirement\\n        {\\n            // -  (,uint256 rate,uint256 spot,,uint256 dust) = vat.ilks(ilk);\\n            uint256 safetyPrice; // Safety price for collateral\\n            (, accumulatedRate,, debtFloor, safetyPrice,,,) = safeEngine.collateralTypes(collateralType); // Load collateral type data\\n            // -  require(spot > 0 && mul(ink, spot) < mul(art, rate), \\\"Cat/not-unsafe\\\");\\n            require(\\n                safetyPrice > 0 && _mul(collateralAmount, safetyPrice) < _mul(generatedDebt, accumulatedRate),\\n                \\\"LiquidationEngine/not-unsafe\\\"\\n            ); // Ensure Safe is undercollateralized\\n            // -  uint256 room = sub(box, litter);\\n            // -  require(litter < box && room >= dust, \\\"Cat/liquidation-limit-hit\\\");\\n            // Get the minimum value between:\\n            // 1) Remaining space in the general GlobalLiquidationLimit\\n            // 2) Remaining space in the collateral liquidationLimit\\n            require(\\n                GlobalLiquidationLimit > ActiveLiquidationAmount\\n                    && _cType.liquidationLimit > _cType.activeLiquidationAmount,\\n                \\\"LiquidationEngine/liquidation-limit-hit\\\"\\n            ); // Check liquidation limits\\n            // -  dart = min(art, mul(min(milk.dunk, room), WAD) / rate / milk.chop);\\n            uint256 room = min(\\n                GlobalLiquidationLimit - ActiveLiquidationAmount,\\n                _cType.liquidationLimit - _cType.activeLiquidationAmount\\n            ); // Calculate available liquidation capacity\\n            deltaGeneratedDebt = min(generatedDebt, _mul(room, WAD) / accumulatedRate / _cType.liquidationPenalty); // Calculate debt to liquidate\\n            // + partial liquidation logic\\n            if (generatedDebt > deltaGeneratedDebt) {\\n                if (_mul(generatedDebt - deltaGeneratedDebt, accumulatedRate) < debtFloor) {\\n\\n                    // If the leftover Vault would be dusty, just liquidate it entirely.\\n                    // This will result in at least one of activeLiquidationAmount_i > liquidationLimit_i or\\n                    // ActiveLiquidationAmount > GlobalLiquidationLimit becoming true.\\n                    // The amount of excess will be bounded above by ceiling(debtFloor_i * liquidationPenalty_i / WAD).\\n                    // This deviation is assumed to be small compared to both liquidationLimit_i and\\n                    // GlobalLiquidationLimit, so that the extra amount of target StablePro over the limits\\n                    // intended is not of economic concern.\\n                    deltaGeneratedDebt = generatedDebt;\\n                    // Liquidate entire Safe if remainder is dusty\\n                } else {\\n                    require(\\n                        _mul(deltaGeneratedDebt, accumulatedRate) >= debtFloor,\\n                        \\\"LiquidationEngine/dusty-auction-from-partial-liquidation\\\"\\n                    ); // Ensure partial liquidation is non-dusty\\n                }\\n            }\\n        }\\n        // -  uint256 dink = min(ink, mul(ink, dart) / art);\\n        uint256 deltaCollateral = _mul(collateralAmount, deltaGeneratedDebt) / generatedDebt; // Calculate collateral to liquidate\\n        // -  require(dart > 0 && dink > 0, \\\"Cat/null-auction\\\");\\n        require(deltaCollateral > 0, \\\"LiquidationEngine/null-auction\\\"); // Ensure non-zero auction\\n        // -  require(dart <= 2**255 && dink <= 2**255, \\\"Cat/overflow\\\");\\n        require(deltaGeneratedDebt <= 2**255 && deltaCollateral <= 2**255, \\\"LiquidationEngine/overflow\\\"); // Prevent overflow\\n        // + reward calculation\\n        uint256 collateral2sell = deltaCollateral; // Calculate collateral to auction after reward\\n        // -  vat.grab(ilk, urn, address(this), address(vow), -int256(dink), -int256(dart));\\n\\n         // Confiscate collateral to balance of liqiuidationEngine\\n        safeEngine.confiscateSAFECollateralAndDebt(\\n            collateralType,\\n            cdp,\\n            address(this),\\n            address(accountingEngine),\\n            -int256(collateral2sell),\\n            -int256(deltaGeneratedDebt)\\n        ); // Confiscate auction collateral and debt\\n        // -  vow.fess(mul(dart, rate));\\n        accountingEngine.pushDebtToQueue(_mul(deltaGeneratedDebt, accumulatedRate)); // Queue debt in AccountingEngine\\n        // -  uint256 tab = mul(mul(dart, rate), milk.chop) / WAD;\\n        // -  litter = add(litter, tab);\\n        // -  id = Kicker(milk.flip).kick({ urn: urn, gal: address(vow), tab: tab, lot: dink, bid: 0 });\\n        {\\n            id = _createOrder(_mul(deltaGeneratedDebt, accumulatedRate), collateralType, collateralJoin, collateral2sell, incentivesReceiver); // Create auction order\\n        }\\n        // -  emit Bite(ilk, urn, dink, dart, mul(dart, rate), milk.flip, id);\\n        emit LiquidateCDP(collateralType, cdp, deltaCollateral, deltaGeneratedDebt, _mul(deltaGeneratedDebt, accumulatedRate), address(this), id); // Emit liquidation event\\n        // Difference: Renamed to liquidateCDP, uses Exchange module instead of flip, adds liquidator reward, and includes partial liquidation logic.\\n    }\\n\\n    // Creates an auction order for liquidated collateral\\n    // + (handled within bite)\\n    function _createOrder(uint256 due, bytes32 collateralType, address collateralJoin, uint256 collateral2sell, address incentivesReceiver) internal returns (uint256 id) {\\n        // -  uint256 tab = mul(mul(dart, rate), milk.chop) / WAD;\\n        CollateralType memory _cType = collateralTypes[collateralType]; // Load collateral type\\n                    // This calcuation will overflow if deltaGeneratedDebt*rate exceeds ~10^14\\n        uint256 amountToRaise = _mul(due, _cType.liquidationPenalty) / WAD; // Calculate amount to raise with penalty\\n        // -  litter = add(litter, tab);\\n        ActiveLiquidationAmount = _add(ActiveLiquidationAmount, amountToRaise); // Commented out\\n        collateralTypes[collateralType].activeLiquidationAmount =\\n                        _add(_cType.activeLiquidationAmount, amountToRaise); // Update collateral-specific liquidation amount\\n        // -  id = Kicker(milk.flip).kick({ urn: urn, gal: address(vow), tab: tab, lot: dink, bid: 0 });\\n\\n        id = collateralAuctionHouse.startAuction(\\n            collateralType,\\n            collateralJoin,\\n            address(accountingEngine),\\n            collateral2sell,\\n            incentivesReceiver\\n        );\\n        /// Now we nee to use our \\\"auction\\\" with Exchange module, that mean we need to add order\\n        /// id is needed only for event, so it's not necessary to store it\\n        /// But we don't use amountToRaise (=minAmount), so in future we may need to use it\\n        /// Also we send some tokens to incentivesReceiver previously, so we don't need it more\\n    }\\n\\n    /**\\n     * @notice Reduces active liquidation amounts after an auction completes.\\n     * @dev Updates global and collateral-specific liquidation amounts. Only callable by LiquidationAccess.\\n     * @param collateralType Unique identifier for the collateral type.\\n     * @param rad Amount to reduce [rad].\\n     */\\n    // -  function claw(uint256 rad) external auth { litter = sub(litter, rad); }\\n    function reduceActiveLiquidationAmount(bytes32 collateralType, uint256 rad) external onlyLiquidationAccess {\\n        // -  litter = sub(litter, rad);\\n        ActiveLiquidationAmount = _sub(ActiveLiquidationAmount, rad); // Reduce global liquidation amount\\n        collateralTypes[collateralType].activeLiquidationAmount =\\n                        _sub(collateralTypes[collateralType].activeLiquidationAmount, rad); // Reduce collateral-specific liquidation amount\\n        emit ReduceActiveLiquidationAmount(collateralType, rad); // Emit event for reduction\\n        // Difference: Renamed to reduceActiveLiquidationAmount, uses onlyLiquidationAccess, and updates both global and collateral-specific amounts.\\n    }\\n}\",\"keccak256\":\"0x3c6a925163f1dd46ff7b113acf8aa5d84338f6d9f076d9dc1988920e3f53b399\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/makerdao/interfaces/IAccountingEngine.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IAccountingEngine\\n **/\\ninterface IAccountingEngine {\\n    /* ==================== EVENTS ===============-===== */\\n    event StableProSwapped(uint256 amount);\\n    event DisableContract();\\n\\n    event AuctionDebt(uint256 indexed id, uint256 totalOnAuctionDebt, uint256 debtBalance);\\n    event AuctionSurplus(uint256 indexed id, uint256 coinBalance);\\n\\n    event Initialize(address indexed accountingEngine);\\n    event PushDebtToQueue(uint256 era, uint256 amountToRaise, uint256 totalQueuedDebt);\\n    event PopDebtFromQueue(uint256 era, uint256 totalQueuedDebt);\\n    event SettleDebt(uint256 rad, uint256 coinBalance, uint256 debtBalance);\\n    event CancelAuctionedDebtWithSurplus(uint256 rad, uint256 totalOnAuctionDebt);\\n    event JoinStablePro(uint256 amount, uint256 totalOnAuctionDebt);\\n    event GetRealStablePro(uint256 amount);\\n    event RefillStablecoin(address stablecoin, uint256 amount);\\n    event SwapStableProToStablecoin(address stablecoinToken, uint256 stableProAmountE18, uint256 stablecoinAmountEDecimal);\\n    event AddWhitelistStablecoin(address stablecoin);\\n    event RemoveWhitelistStablecoin(address stablecoin);\\n    event SetStablecoinToSwap(address stablecoin);\\n    event ModifyParameters(bytes32 what, uint256 data);\\n    event ModifyParameters(bytes32 what, address data);\\n\\n    /* ==================== ERRORS ===============-===== */\\n    error ContractDisabled();\\n    error BadModifyParameters();\\n    error BadStablecoin(address asset);\\n    error BadRewardToken();\\n    error DebtNotZero();\\n    error SurplusNotZero();\\n    error InsufficientDebt();\\n    error InsufficientSurplus();\\n    error NotEnoughAsh();\\n    error PopDebtDelayNotFinished();\\n    error StablecoinNotExist(address asset);\\n    error StablecoinExists(address asset);\\n\\n    /* ====================== VARS ===================== */\\n\\n    function stablecoinToSwap() external view returns (address);\\n\\n    /* ==================== MUTABLE METHODS ==================== */\\n\\n    /**\\n     * @notice Push debt (that the system tries to cover with collateral auctions) to a queue\\n     * @dev Debt is locked in a queue to give the system enough time to auction collateral\\n     *      and gather surplus\\n     * @param amountToRaise Amount of debt to push\\n     */\\n    function pushDebtToQueue(uint amountToRaise) external;\\n\\n    /**\\n     * @notice A block of debt can be popped from the queue after popDebtDelay seconds passed since it was\\n     *         added there\\n     * @param era Timestamp of the block of debt that should be popped out\\n     */\\n    function popDebtFromQueue(uint era) external;\\n\\n    // Debt settlement\\n    /**\\n     * @notice Destroy an equal amount of coins and debt\\n     * @dev We can only destroy debt that is not locked in the queue and also not in a debt auction\\n     * @param rad Amount of coins/debt to destroy (number with 45 decimals)\\n    **/\\n    function settleDebt(uint rad) external;\\n\\n    /**\\n     * @notice Use surplus coins to destroy debt that is/was in a debt auction\\n     * @param rad Amount of coins/debt to destroy (number with 45 decimals)\\n    **/\\n    function cancelAuctionedDebtWithSurplus(uint rad) external;\\n\\n    /**\\n     * @notice Start a debt auction (we have debt = x$, token2sell with value of y$, where y >= x)\\n     * @dev We can only auction debt that is not already being auctioned and is not locked in the debt queue.\\n     * Firstly, we should donate token2sell (it's collateral or stablecoin) by refillStablecoin\\n    **/\\n    function auctionDebt(\\n        address token2sell,\\n        uint256 amountToSell,\\n        uint256 auctionDebt\\n    ) external returns (uint orderId);\\n\\n    /**\\n     * @notice Start a surplus auction\\n     * @dev We can only auction surplus if we wait at least 'surplusAuctionDelay' seconds since the last\\n     *      auction trigger, if we keep enough surplus in the buffer and if there is no bad debt to settle\\n    **/\\n    function auctionSurplus(uint256 surplusAmount) external returns (uint orderId);\\n\\n    /**\\n     * @notice Disable this contract (normally called by Global Settlement)\\n     * @dev When we disable, the contract tries to settle as much debt as possible (if there's any) with\\n            any surplus that's left in the system. After erasing debt, the contract will either transfer any\\n            remaining surplus right away (if disableCooldown == 0) or will only record the timestamp when\\n            it was disabled\\n    **/\\n    function disableContract() external;\\n\\n    /* ================= Stablecoin Whitelist ================== */\\n\\n    /**\\n     * @notice Add new stablecoin to whitelist of stablecoins protocol works with\\n    **/\\n    function addWhitelistStablecoin(address stablecoin) external;\\n\\n    /**\\n     * @notice Remove stablecoin from whitelist of stablecoins protocol works with\\n    **/\\n    function removeWhitelistStablecoin(address stablecoin) external;\\n\\n    /**\\n     * @notice Check if give token is in stablecoins whitelist\\n    **/\\n    function hasWhitelistStablecoin(address stablecoin) external view returns (bool);\\n\\n    /**\\n     * @notice Change var stablecoinToSwap, that is used in liquidation process\\n    **/\\n    function setStablecoinToSwap(address stablecoin) external;\\n\\n    /* =================== MANUAL FUNCTIONS ==================== */\\n    /**\\n     * @notice Admin function to join protocol using real StablePro (= join in coinJoin)\\n    **/\\n    function joinStablePro(uint256 amount) external;\\n\\n    /**\\n     * @notice Admin function to get real StablePro tokens instead of records in protocol (= exit from coinJoin)\\n    **/\\n    function getRealStablePro(uint256 amount) external;\\n\\n    /**\\n     * @notice Function to send stablecoin to AccountingEngine contract\\n    **/\\n    function refillStablecoin(address stablecoin, uint256 amount) external;\\n\\n    /**\\n     * @notice Admin function to distribute surplus after getting it\\n    **/\\n    //function distributeSurplus(uint256 amount) external;\\n\\n    /**\\n     * @notice Function to swap sender's stablePro to stablecoin that is in whitelist\\n    **/\\n    function swapStableProToStablecoin(address stablecoinToken, uint256 stableProAmountE18) external;\\n\\n    function totalQueuedDebt() external view returns (uint256);\\n\\n    function totalOnAuctionDebt() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x73a93f81de06b67f700e810945a09b9be6edf82854cbac40240aedf413a8dc5c\",\"license\":\"UNLICENSED\"},\"contracts/makerdao/interfaces/ICollateralJoin.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {IDisable} from \\\"./IDisable.sol\\\";\\n\\n/**\\n * @title ITaxCollector\\n **/\\ninterface ICollateralJoin is IDisable {\\n\\n    /* ===================== EVENTS ===================== */\\n\\n    event Join(address indexed usr, uint256 wad);\\n    event Exit(address indexed usr, uint256 wad);\\n\\n    /* ====================== VARS ===================== */\\n    function decimals() external returns (uint);\\n    function collateral() external view returns(IERC20Metadata);\\n\\n    /* ==================== METHODS ==================== */\\n\\n    /**\\n    * @notice Join collateral in the system\\n    * @param usr Account from which we transferFrom collateral and add it in the system\\n    * @param wad Amount of collateral to transfer in the system (represented as a number with 18 decimals)\\n    **/\\n    function join(address usr, uint wad) external;\\n\\n    /**\\n    * @notice Exit collateral from the system\\n    * @param usr Account to which we transfer the collateral\\n    * @param wad Amount of collateral to transfer to 'account' (represented as a number with 18 decimals)\\n    **/\\n    function exit(address usr, uint wad) external;\\n}\\n\",\"keccak256\":\"0xb276834f1935ca409ecca5542ef257f9b68e1e91c53b9bdc6b73f0db63210c07\",\"license\":\"UNLICENSED\"},\"contracts/makerdao/interfaces/IDisable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\ninterface IDisable {\\n    event DisableContract();\\n\\n    function disableContract() external;\\n}\\n\",\"keccak256\":\"0xcf4b5ac43556af77a174aa3a3a9b51c4fc89b933ef875797650542bf686b8405\",\"license\":\"UNLICENSED\"},\"contracts/makerdao/interfaces/ILiquidationEngine.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ITaxCollector\\n **/\\ninterface ILiquidationEngine {\\n    /* ==================== STRUCTS ==================== */\\n\\n    struct CollateralType {\\n        uint256 liquidationPenalty;  // Liquidation Penalty [wad]\\n        uint256 liquidationLimit;  // Max StablePro needed to cover debt+fees of active auctions per cType [rad]\\n        uint256 activeLiquidationAmount;  // Amt StablePro needed to cover debt+fees of active auctions per cType [rad]\\n        address collateralAuctionHouse; // collateral auction house\\n    }\\n\\n    /* ==================== EVENTS ===============-===== */\\n\\n    event DisableContract();\\n\\n    event AddAuthorization(address indexed usr);\\n    event RemoveAuthorization(address indexed usr);\\n\\n    event ModifyParameters(bytes32 indexed what, uint256 data);\\n    event ModifyParameters(bytes32 indexed what, address data);\\n    event ModifyParameters(bytes32 indexed collateralType, bytes32 indexed what, uint256 data);\\n    event ModifyParameters(bytes32 indexed collateralType, bytes32 indexed what, address liquidator);\\n    event SetLiquidationDiscountType(uint8 newDiscountType);\\n\\n    event LiquidateCDP(\\n        bytes32 indexed collateralType,\\n        address indexed cdp,\\n        uint256 lockedCollateral,\\n        uint256 generatedDebt,\\n        uint256 due,\\n        address liquidator,\\n        uint256 indexed id\\n    );\\n    event ReduceActiveLiquidationAmount(bytes32 indexed collateralType, uint256 rad);\\n\\n    /* ==================== MUTABLE METHODS ==================== */\\n\\n    // --- Administration ---\\n    function modifyParameters(bytes32 what, uint data) external;\\n    function modifyParameters(bytes32 what, address data) external;\\n    function modifyParameters(bytes32 collateralType, bytes32 what, uint data) external;\\n\\n    function setLiquidationDiscountType(uint8 newDiscountType) external;\\n\\n    /**\\n      * @notice Liquidate a Vault and start a Dutch auction to sell its collateral for StablePro.\\n      * @dev The entire Vault will be liquidated except when the target amount of StablePro to be raised in\\n      * the resulting auction (debt of Vault + liquidation penalty) causes either ActiveLiquidationAmount to exceed\\n      * GlobalLiquidationLimit or collateralType.activeLiquidationAmount to exceed collateralType.liquidationLimit\\n      * by an economically significant amount. In that case, a partial liquidation is performed to respect the global\\n      * and per-collateralType limits on outstanding StablePro target. The one exception is if the resulting auction\\n      * would likely have too little collateral to be interesting to Keepers\\n      * (debt taken from Vault < collateralType.debtFloor),\\n      * in which case the function reverts. Please refer to the code and comments within if more detail is desired.\\n      * @param collateralType - collateral type\\n      * @param cdp - address of cdp position\\n      * @param incentivesReceiver - address that will receive the liquidation reward, if any.\\n      * @param collateralJoin - address of collateral adapter\\n    **/\\n    function liquidateCDP(\\n        bytes32 collateralType,\\n        address cdp,\\n        address incentivesReceiver,\\n        address collateralJoin\\n    ) external returns (uint256 id);\\n\\n    function reduceActiveLiquidationAmount(bytes32 collateralType, uint256 rad) external;\\n\\n    /* ==================== VIEW METHODS ==================== */\\n\\n    function liquidationPenalty(bytes32 collateralType) external view returns (uint256);\\n\\n    /**\\n     * @notice Disable this contract (normally called by Global Settlement)\\n     * @dev When we disable, the contract tries to settle as much debt as possible (if there's any) with\\n            any surplus that's left in the system. After erasing debt, the contract will either transfer any\\n            remaining surplus right away (if disableCooldown == 0) or will only record the timestamp when\\n            it was disabled\\n    **/\\n    function disableContract() external;\\n}\\n\",\"keccak256\":\"0x3fb57bc5bfda5faec0a72ebab8a37f1e503b691ef2c54d6227bcbfe4e6ee0253\",\"license\":\"UNLICENSED\"},\"contracts/makerdao/interfaces/ISafeEngine.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// TODO: check how to operate with license and use one for all contracts\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IDisable.sol\\\";\\n\\n/**\\n * @title SafeEngine\\n * @notice The single source of truth for the Maker Protocol. It contains the accounting system of the core Vault,\\n * Internal StablePro balances, and collateral state. It houses the public interface for Vault management,\\n * allowing safe(= CDP or Vault) owners to adjust their Vault state balances. It also contains the public interface\\n * for Vault fungibility, allowing safe (Vault) owners to transfer, split, and merge Vaults.\\n * Excluding these interfaces, SAFEEngine is accessed through trusted smart contract modules.\\n **/\\ninterface ISafeEngine is IDisable {\\n\\n          // --- Events ---\\n    event InitializeCollateralType(bytes32 collateralType);\\n    event ModifyParameters(bytes32 what, uint256 data);\\n    event ModifyParameters(bytes32 collateralType, bytes32 what, uint256 data);\\n    event ModifyCollateralBalance(bytes32 collateralType, address usr, int256 wad);\\n    event TransferCollateral(bytes32 collateralType, address src, address dst, uint256 wad);\\n    event TransferInternalCoins(address src, address dst, uint256 rad);\\n    event ModifySAFECollateralization(\\n        bytes32 collateralType,\\n        address cdp,\\n        address collateralSource,\\n        address debtDestination,\\n        int256 deltaCollateral,\\n        int256 deltaDebt,\\n        uint256 lockedCollateral,\\n        uint256 generatedDebt,\\n        uint256 globalDebt\\n    );\\n    event TransferSAFECollateralAndDebt(\\n        bytes32 collateralType,\\n        address src,\\n        address dst,\\n        int256 deltaCollateral,\\n        int256 deltaDebt,\\n        uint256 srcLockedCollateral,\\n        uint256 srcGeneratedDebt,\\n        uint256 dstLockedCollateral,\\n        uint256 dstGeneratedDebt\\n    );\\n    event ConfiscateSAFECollateralAndDebt(\\n        bytes32 collateralType,\\n        address cdp,\\n        address collateralCounterparty,\\n        address debtCounterparty,\\n        int256 deltaCollateral,\\n        int256 deltaDebt,\\n        uint256 globalUnbackedDebt\\n    );\\n    event SettleDebt(address account, uint256 rad, uint256 debtBalance, uint256 coinBalance, uint256 globalUnbackedDebt, uint256 globalDebt);\\n    event CreateUnbackedDebt(\\n        address debtDestination,\\n        address coinDestination,\\n        uint256 rad,\\n        uint256 debtBalance,\\n        uint256 coinBalance,\\n        uint256 globalUnbackedDebt,\\n        uint256 globalDebt\\n    );\\n    event UpdateAccumulatedRate(bytes32 collateralType, address surplusDst, int256 accumulatedRate, uint256 globalDebt);\\n    event ApproveSAFEModification(address sender, address usr);\\n    event DenySAFEModification(address sender, address usr);\\n    event UpdateSafetyPrice(bytes32 collateralType, uint256 safetyPrice);\\n\\n    /* ==================== METHODS ==================== */\\n\\n    // --- Data ---\\n    struct CollateralType {\\n        uint256 debtAmount;        // Total debt issued for this specific collateral type                          [wad]\\n        uint256 accumulatedRate;   // Accumulator for interest accrued on this collateral type                     [ray]\\n        uint256 debtCeiling;       // Maximum amount of debt that can be generated with this collateral type       [rad]\\n        uint256 debtFloor;         // Minimum amount of debt that must be generated by a CDP using this collateral [rad]\\n        uint256 safetyPrice;       // Floor price at which a CDP is allowed to generate debt                       [ray]\\n        uint256 liquidationRatio;  // Liquidation ratio to calculate safety price                                  [ray]\\n        address collateralAddress; // Address of collateral\\n        uint256 safetyPriceBlockNumber; // Block when safetyPrice was updated\\n    }\\n    struct SAFE {\\n        uint256 lockedCollateral; // Total amount of collateral locked in a SAFE/CDP  [wad]\\n        uint256 generatedDebt;    // Total amount of debt generated by a SAFE/CDP     [wad]\\n    }\\n\\n    // --- VARS ---\\n\\n    function safes(bytes32, address) external view returns (uint, uint);\\n\\n    function collateralTypes(bytes32) external view returns (\\n        uint256 debtAmount,       // [wad]\\n        uint256 accumulatedRate,  // [ray]\\n        uint256 debtCeiling,      // [rad]\\n        uint256 debtFloor,        // [rad]\\n        uint256 safetyPrice,      // [ray]\\n        uint256 liquidationRatio, // [ray]\\n        address collateralAddress,\\n        uint256 safetyPriceBlockNumber\\n);\\n\\n    function tokenCollateral(bytes32, address) external view returns (uint256);\\n\\n    function coinBalance(address) external view returns (uint256);\\n\\n    function debtBalance(address) external view returns (uint256);\\n\\n    function cdpRights(address, address) external view returns (uint256);\\n\\n    function globalDebtCeiling() external view returns (uint256);\\n\\n    function globalDebt() external view returns (uint256);\\n\\n    // --- Auth ---\\n    /**\\n     * @notice Allow an address to modify your CDP.\\n     * For example coinAdapter should be able to modify your CDP to withdraw all correctly.\\n     * @param usr Account to give CDP permissions to\\n     */\\n    function approveSAFEModification(address usr) external;\\n\\n    /**\\n     * @notice Deny an address the rights to modify your CDP\\n     * @param usr Account to give CDP permissions to\\n     */\\n    function denySAFEModification(address usr) external;\\n\\n    // --- Administration ---\\n\\n    function initializeCollateralType(bytes32 collateralType, address collateralAddress) external;\\n\\n    /**\\n     * @notice Method to modify some global variables\\n     * @param what - name of variable we want to change\\n     * @param data - new value of this variable\\n     */\\n    function modifyParameters(bytes32 what, uint data) external;\\n    /**\\n     * @notice Method to modify values in struct of collateralTypes\\n     * @param collateralType - collateral type we want to modify (collateralTypes[collateralType])\\n     * @param what - name of variable in struct we want to change\\n     * @param data - new value of this variable\\n     */\\n    function modifyParameters(bytes32 collateralType, bytes32 what, uint data) external;\\n\\n    // --- Fungibility ---\\n    function modifyCollateralBalance(bytes32 collateralType, address usr, int256 wad) external;\\n    function transferCollateral(bytes32 collateralType, address src, address dst, uint256 wad) external;\\n    function transferInternalCoins(address src, address dst, uint256 rad) external;\\n\\n    // --- SafetyPrice Manipulation ---\\n    /**\\n     * @notice Method to update safetyPrice, it's called each time, when function need actual safetyPrice\\n     * @param collateralType - safetyPrice's collateral type we want to update\\n     */\\n    function updateSafetyPrice(bytes32 collateralType) external;\\n\\n    // --- CDP Manipulation ---\\n    /**\\n     * @notice Add/remove collateral or put back/generate more debt in a CDP\\n     * @param collateralType Type of collateral to withdraw/deposit in and from the CDP\\n     * @param cdp Target CDP\\n     * @param collateralSource Account we take collateral from/put collateral into\\n     * @param debtDestination Account from which we credit/debit coins and debt\\n     * @param deltaCollateral Amount of collateral added/extract from the CDP\\n     * @param deltaDebt Amount of debt to generate/repay\\n     */\\n    function modifySAFECollateralization(\\n        bytes32 collateralType,\\n        address cdp,\\n        address collateralSource,\\n        address debtDestination,\\n        int deltaCollateral,\\n        int deltaDebt\\n    ) external;\\n\\n    // --- CDP Fungibility ---\\n    /**\\n     * @notice Transfer collateral and/or debt between CDPs\\n     * @param collateralType Collateral type transferred between CDPs\\n     * @param src Source CDP\\n     * @param dst Destination CDP\\n     * @param deltaCollateral Amount of collateral to take/add into src and give/take from dst\\n     * @param deltaDebt Amount of debt to take/add into src and give/take from dst\\n     */\\n    function transferSAFECollateralAndDebt(\\n        bytes32 collateralType,\\n        address src,\\n        address dst,\\n        int deltaCollateral,\\n        int deltaDebt\\n    ) external;\\n\\n    // --- CDP Confiscation ---\\n    /**\\n     * @notice Normally used by the LiquidationEngine in order to confiscate collateral and\\n       debt from a CDP and give them to someone else\\n     * @param collateralType Collateral type the CDP has locked inside\\n     * @param cdp Target CDP\\n     * @param collateralCounterparty Who we take/give collateral to\\n     * @param debtCounterparty Who we take/give debt to\\n     * @param deltaCollateral Amount of collateral taken/added into the CDP\\n     * @param deltaDebt Amount of debt taken/added into the CDP\\n     */\\n    function confiscateSAFECollateralAndDebt(\\n        bytes32 collateralType,\\n        address cdp,\\n        address collateralCounterparty,\\n        address debtCounterparty,\\n        int deltaCollateral,\\n        int deltaDebt\\n    ) external;\\n\\n    // --- Settlement ---\\n    /**\\n     * @notice Nullify an amount of coins with an equal amount of debt\\n     * @param rad Amount of debt & coins to destroy (expressed as a number with 45 decimals)\\n     */\\n    function settleDebt(uint rad) external;\\n\\n    /**\\n     * @notice Usually called by CoinSavingsAccount in order to create unbacked debt\\n     * @param debtDestination Usually AccountingEngine that can settle decreaseSoldAmount with surplus\\n     * @param coinDestination Usually CoinSavingsAccount who passes the new coins to depositors\\n     * @param rad Amount of debt to create (expressed as a number with 45 decimals)\\n     */\\n    function createUnbackedDebt(address debtDestination, address coinDestination, uint rad) external;\\n\\n    // --- Rates ---\\n    /**\\n     * @notice Usually called by TaxCollector in order to accrue interest on a specific collateral type\\n     * @param collateralType Collateral type we accrue interest for\\n     * @param surplusDst Destination for amount of surplus created by applying the interest rate\\n       to debt created by CDPs with 'collateralType'\\n     * @param accumulatedRate Multiplier applied to the debtAmount in order to calculate the surplus\\n     */\\n    function updateAccumulatedRate(bytes32 collateralType, address surplusDst, int accumulatedRate) external;\\n}\\n\",\"keccak256\":\"0x02d5c0dbf9eada0f29652f21159e2d9abfa7dd37c55c136c88b3ced857629f85\",\"license\":\"UNLICENSED\"},\"contracts/makerdao/utils/Math.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nabstract contract Math {\\n    uint256 constant ONE = 10 ** 27;\\n    uint256 constant WAD = 10 ** 18;\\n\\n    /**\\n    * @notice Calculates the sum of an unsigned integer and a signed integer\\n    * @param  x Unsigned integer\\n    * @param  y Signed integer\\n    * @return z Unsigned sum of `x` and `y`\\n    */\\n    function _add(uint x, int y) internal pure returns (uint z) {\\n        if (y >= 0) {\\n            z = x + uint256(y);\\n        } else {\\n            z = x - uint256(-y);\\n        }\\n        require(y >= 0 || z <= x);\\n        require(y <= 0 || z >= x);\\n    }\\n\\n    /**\\n    * @notice Calculates the substraction of an unsigned integer and a signed integer\\n    * @param  x Unsigned integer\\n    * @param  y Signed integer\\n    * @return z Unsigned substraction of `x` and `y`\\n    */\\n    function _sub(uint x, int y) internal pure returns (uint z) {\\n        if (y >= 0) {\\n            z = x - uint256(y);\\n        } else {\\n            z = x + uint256(-y);\\n        }\\n        require(y <= 0 || z <= x);\\n        require(y >= 0 || z >= x);\\n    }\\n    function _mul(uint x, int y) internal pure returns (int z) {\\n        z = int(x) * y;\\n        require(int(x) >= 0);\\n        require(y == 0 || z / y == int(x));\\n    }\\n\\n    function _rdiv(uint x, uint y) internal pure returns (uint z) {\\n        z = _mul(x, ONE) / y;\\n    }\\n\\n    function _add(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x + y) >= x);\\n    }\\n    function _sub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) <= x);\\n    }\\n    function _mul(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x);\\n    }\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x <= y ? x : y;\\n    }\\n\\n    function either(bool x, bool y) internal pure returns (bool z) {\\n        assembly{ z := or(x, y)}\\n    }\\n    function both(bool x, bool y) internal pure returns (bool z) {\\n        assembly{ z := and(x, y)}\\n    }\\n}\\n\",\"keccak256\":\"0xd2215ec58e4792d9e68d66f17c0181e4931fd83dc4f4a433d727978997e4ba24\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001961001e565b6100dd565b600054610100900460ff161561008a5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff908116146100db576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b611c02806100ec6000396000f3fe608060405234801561001057600080fd5b50600436106101805760003560e01c806301ffc9a71461018557806303ee9f22146101ad57806318e81571146101d3578063340517c9146102015780634046ebae1461022857806341b3a0d91461023b578063438280dd14610244578063485cc9551461026b57806351a8cd8714610280578063556617c7146102895780636614f0101461029257806367aea313146102a55780636efb72ce146102b857806371d0fb41146102cb57806375b238fc146102f2578063894ba833146102fa5780638e5313e014610302578063961d45c414610329578063b38234f31461033c578063b64864b314610363578063bd5f5be614610376578063c4e906981461039d578063d07900bb146103b0578063d0e8fa82146103fe578063d2351cee14610425578063d4b9311d1461043a578063dbec7dd41461044d578063dc97e84e14610473578063e8d769a714610488578063e9c2651814610491578063eb9ff0b4146104a6578063fe4f5890146104b9575b600080fd5b61019861019336600461185d565b6104cc565b60405190151581526020015b60405180910390f35b6000546101c6906201000090046001600160a01b031681565b6040516101a49190611887565b6101f36101e136600461189b565b60009081526034602052604090205490565b6040519081526020016101a4565b6101f37f014f8da3222812608c449a44f4705585c5ce052eeb6f9af0af9209c64b0ba2de81565b6039546101c6906001600160a01b031681565b6101f3603b5481565b6101f37f39f61ca2a1a28fee144218173ec637b649a353e4026b2738c673800e5bf1437b81565b61027e6102793660046118c9565b610549565b005b6101f360365481565b6101f360375481565b61027e6102a0366004611902565b6106ba565b6033546101c6906001600160a01b031681565b61027e6102c6366004611927565b610965565b6101f37f880a91047114272656e533301261260c75e4d11543ac7303d6fe4204579ec72781565b6101f3600081565b61027e610a7a565b6101f37fe453bacb314e78dcd5192e6b1a2b1f0e7c76e92f6b7e429a6a90f04e39db3b7681565b6035546101c6906001600160a01b031681565b6101f37fd83f5343da19b478b15a140c301a868be9e02603958f38fbd822b9d5c0a2891681565b603a546101c6906001600160a01b031681565b6101f37f4f14c8366fa999817edc9f29824eb88a00cc31225e2156f399da4bc91049eb1081565b61027e6103ab366004611949565b610b4d565b6103ee6103be36600461189b565b6034602052600090815260409020805460018201546002830154600390930154919290916001600160a01b031684565b6040516101a4949392919061196c565b6101f37f76d0567582f23e1e9d7a13eeba60f9aea9d69b8da87ca27a8bf3698b35c653db81565b6101f3600080516020611bd683398151915281565b61027e610448366004611990565b610c36565b60395461046190600160a01b900460ff1681565b60405160ff90911681526020016101a4565b6101f3600080516020611bb683398151915281565b6101f360385481565b6101f3600080516020611b9683398151915281565b6101f36104b43660046119bc565b610deb565b61027e6104c7366004611927565b611455565b600080546040516301ffc9a760e01b8152620100009091046001600160a01b0316906301ffc9a790610502908590600401611a0f565b602060405180830381865afa15801561051f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105439190611a24565b92915050565b600054610100900460ff16158080156105695750600054600160ff909116105b806105835750303b158015610583575060005460ff166001145b6105eb5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff19166001179055801561060e576000805461ff0019166101001790555b61061783611574565b603380546001600160a01b0319166001600160a01b0384161790556001603b556039805460ff60a01b1916905560405133907f599a298163e1678bb1c676052a8930bf0b8a1261ed6e01b8a2391e55f700010290600090a280156106b5576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b600054604051632474521560e21b8152620100009091046001600160a01b0316906391d14854906106ff90600080516020611b96833981519152903390600401611a46565b602060405180830381865afa15801561071c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107409190611a24565b61075d5760405163599a6c3360e11b815260040160405180910390fd5b816f6163636f756e74696e67456e67696e6560801b0361079757603580546001600160a01b0319166001600160a01b038316179055610929565b8175636f6c6c61746572616c41756374696f6e486f75736560501b0361089b57603354603a5460405163d49d786760e01b81526001600160a01b039283169263d49d7867926107eb92911690600401611887565b600060405180830381600087803b15801561080557600080fd5b505af1158015610819573d6000803e3d6000fd5b5050603a80546001600160a01b0319166001600160a01b0385811691909117909155603354604051631b29a84160e31b81529116925063d94d42089150610864908490600401611887565b600060405180830381600087803b15801561087e57600080fd5b505af1158015610892573d6000803e3d6000fd5b50505050610929565b81693634b8bab4b230ba37b960b11b036108cf57603980546001600160a01b0319166001600160a01b038316179055610929565b60405162461bcd60e51b815260206004820152602960248201527f4c69717569646174696f6e456e67696e652f66696c652d756e7265636f676e696044820152687a65642d706172616d60b81b60648201526084016105e2565b817fd91f38cf03346b5dc15fb60f9076f866295231ad3c3841a1051f8443f25170d1826040516109599190611887565b60405180910390a25050565b600054604051632474521560e21b8152620100009091046001600160a01b0316906391d14854906109aa90600080516020611bb6833981519152903390600401611a46565b602060405180830381865afa1580156109c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109eb9190611a24565b610a085760405163200ab6d960e01b815260040160405180910390fd5b610a14603754826116a5565b603755600082815260346020526040902060020154610a3390826116a5565b600083815260346020908152604091829020600201929092555182815283917f78430dc03266569e2b73ec40d7107a5bc7047f2244bbca5d04294edb4a6f6ae39101610959565b600054604051632474521560e21b8152620100009091046001600160a01b0316906391d1485490610abf90600080516020611bd6833981519152903390600401611a46565b602060405180830381865afa158015610adc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b009190611a24565b610b1d5760405163bb0684b760e01b815260040160405180910390fd5b6000603b8190556040517f2d4b4ecff7bd7503135271925520a2f6c0d98c9473ffc1a1e72c92502f51b25e9190a1565b60008054604051632474521560e21b8152620100009091046001600160a01b0316916391d1485491610b8491903390600401611a46565b602060405180830381865afa158015610ba1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc59190611a24565b610be257604051631886ea7d60e11b815260040160405180910390fd5b6039805460ff60a01b1916600160a01b60ff8416908102919091179091556040519081527f1a66ae503bf4d11021cd53bd51d904ee5fa7d34fc88d51ee1425fe54bc0950ba9060200160405180910390a150565b600054604051632474521560e21b8152620100009091046001600160a01b0316906391d1485490610c7b90600080516020611b96833981519152903390600401611a46565b602060405180830381865afa158015610c98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cbc9190611a24565b610cd95760405163599a6c3360e11b815260040160405180910390fd5b81716c69717569646174696f6e50656e616c747960701b03610d7c57670de0b6b3a7640000811015610d665760405162461bcd60e51b815260206004820152603060248201527f4c69717569646174696f6e456e67696e652f66696c652d6c697175696461746960448201526f1bdb94195b985b1d1e4b5b1d0b55d05160821b60648201526084016105e2565b6000838152603460205260409020819055610dab565b816f1b1a5c5d5a59185d1a5bdb931a5b5a5d60821b036108cf5760008381526034602052604090206001018190555b81837fc59b1109b54f213212d2f5af5c1dae5e887f9daa63b595578fae847cb048e8f483604051610dde91815260200190565b60405180910390a3505050565b6000603b54600114610e4d5760405162461bcd60e51b815260206004820152602560248201527f4c69717569646174696f6e456e67696e652f6e6f742d636f6e7472616374456e60448201526418589b195960da1b60648201526084016105e2565b60335460405163e401f2e760e01b8152600481018790526001600160a01b039091169063e401f2e790602401600060405180830381600087803b158015610e9357600080fd5b505af1158015610ea7573d6000803e3d6000fd5b5050603354604051630f50894160e21b8152600093508392506001600160a01b0390911690633d42250490610ee2908a908a90600401611a46565b6040805180830381865afa158015610efe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f229190611a5d565b6000898152603460209081526040808320815160808101835281548152600182015493810193909352600281015483830152600301546001600160a01b039081166060840152603354915163d07900bb60e01b8152600481018e905295975093955090939192839283928392169063d07900bb9060240161010060405180830381865afa158015610fb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fdb9190611a81565b509498509196509450505082158015925090506110095750610ffd86846116c0565b61100788836116c0565b105b6110545760405162461bcd60e51b815260206004820152601c60248201527b4c69717569646174696f6e456e67696e652f6e6f742d756e7361666560201b60448201526064016105e2565b60375460365411801561106e575084604001518560200151115b6110ca5760405162461bcd60e51b815260206004820152602760248201527f4c69717569646174696f6e456e67696e652f6c69717569646174696f6e2d6c696044820152661b5a5d0b5a1a5d60ca1b60648201526084016105e2565b60006110f86037546036546110df9190611b01565b876040015188602001516110f39190611b01565b6116ed565b905061112a8787600001518661111685670de0b6b3a76400006116c0565b6111209190611b14565b6110f39190611b14565b9450848711156111d05782611148611142878a611b01565b866116c0565b1015611156578694506111d0565b8261116186866116c0565b10156111d05760405162461bcd60e51b815260206004820152603860248201527f4c69717569646174696f6e456e67696e652f64757374792d61756374696f6e2d604482015277333937b696b830b93a34b0b616b634b8bab4b230ba34b7b760411b60648201526084016105e2565b50506000856111df88866116c0565b6111e99190611b14565b90506000811161123b5760405162461bcd60e51b815260206004820152601e60248201527f4c69717569646174696f6e456e67696e652f6e756c6c2d61756374696f6e000060448201526064016105e2565b600160ff1b84111580156112535750600160ff1b8111155b61129c5760405162461bcd60e51b815260206004820152601a6024820152794c69717569646174696f6e456e67696e652f6f766572666c6f7760301b60448201526064016105e2565b6000819050603360009054906101000a90046001600160a01b03166001600160a01b0316634e14a9678e8e30603560009054906101000a90046001600160a01b0316866112e890611b36565b6112f18c611b36565b6040516001600160e01b031960e089901b16815260048101969096526001600160a01b039485166024870152928416604486015292166064840152608483019190915260a482015260c401600060405180830381600087803b15801561135657600080fd5b505af115801561136a573d6000803e3d6000fd5b50506035546001600160a01b0316915063a8b30a9f905061138b87876116c0565b6040518263ffffffff1660e01b81526004016113a991815260200190565b600060405180830381600087803b1580156113c357600080fd5b505af11580156113d7573d6000803e3d6000fd5b505050506113f16113e886866116c0565b8e8c848f611706565b9850888c6001600160a01b03168e7f3e68ae8e518de004a5c7f6407b51d7b729e26ddb6bcd135fe2f9e58df1b75b45858961142c8b8b6116c0565b3060405161143d949392919061196c565b60405180910390a45050505050505050949350505050565b600054604051632474521560e21b8152620100009091046001600160a01b0316906391d148549061149a90600080516020611b96833981519152903390600401611a46565b602060405180830381865afa1580156114b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114db9190611a24565b6114f85760405163599a6c3360e11b815260040160405180910390fd5b817511db1bd8985b131a5c5d5a59185d1a5bdb931a5b5a5d60521b03611522576036819055611542565b816f131a5c5d5a59185d1bdc94995dd85c9960821b036108cf5760388190555b817fac7c5c1afaef770ec56ac6268cd3f2fbb1035858ead2601d6553157c33036c3a8260405161095991815260200190565b600054610100900460ff166115df5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016105e2565b6000805462010000600160b01b031916620100006001600160a01b03841690810291909117909155158061168457506040516301ffc9a760e01b81526001600160a01b038216906301ffc9a79061164190637965db0b60e01b90600401611a0f565b602060405180830381865afa15801561165e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116829190611a24565b155b156116a2576040516384d942fd60e01b815260040160405180910390fd5b50565b6000826116b28382611b01565b915081111561054357600080fd5b60008115806116e4575082826116d68183611b52565b92506116e29083611b14565b145b61054357600080fd5b6000818311156116fd57816116ff565b825b9392505050565b600084815260346020908152604080832081516080810183528154808252600183015494820194909452600282015492810192909252600301546001600160a01b03166060820152908290670de0b6b3a764000090611766908a906116c0565b6117709190611b14565b905061177e60375482611842565b60375560408201516117909082611842565b6000888152603460205260409081902060020191909155603a5460355491516354da2ca160e11b8152600481018a90526001600160a01b038981166024830152928316604482015260648101889052868316608482015291169063a9b459429060a4016020604051808303816000875af1158015611812573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118369190611b69565b98975050505050505050565b60008261184f8382611b82565b915081101561054357600080fd5b60006020828403121561186f57600080fd5b81356001600160e01b0319811681146116ff57600080fd5b6001600160a01b0391909116815260200190565b6000602082840312156118ad57600080fd5b5035919050565b6001600160a01b03811681146116a257600080fd5b600080604083850312156118dc57600080fd5b82356118e7816118b4565b915060208301356118f7816118b4565b809150509250929050565b6000806040838503121561191557600080fd5b8235915060208301356118f7816118b4565b6000806040838503121561193a57600080fd5b50508035926020909101359150565b60006020828403121561195b57600080fd5b813560ff811681146116ff57600080fd5b938452602084019290925260408301526001600160a01b0316606082015260800190565b6000806000606084860312156119a557600080fd5b505081359360208301359350604090920135919050565b600080600080608085870312156119d257600080fd5b8435935060208501356119e4816118b4565b925060408501356119f4816118b4565b91506060850135611a04816118b4565b939692955090935050565b6001600160e01b031991909116815260200190565b600060208284031215611a3657600080fd5b815180151581146116ff57600080fd5b9182526001600160a01b0316602082015260400190565b60008060408385031215611a7057600080fd5b505080516020909101519092909150565b600080600080600080600080610100898b031215611a9e57600080fd5b885197506020890151965060408901519550606089015194506080890151935060a0890151925060c0890151611ad3816118b4565b8092505060e089015190509295985092959890939650565b634e487b7160e01b600052601160045260246000fd5b8181038181111561054357610543611aeb565b600082611b3157634e487b7160e01b600052601260045260246000fd5b500490565b6000600160ff1b8201611b4b57611b4b611aeb565b5060000390565b808202811582820484141761054357610543611aeb565b600060208284031215611b7b57600080fd5b5051919050565b8082018082111561054357610543611aeb56fe3b5d4cc60d3ec3516ee8ae083bd60934f6eb2a6c54b1229985c41bfb092b26039a9aef7c1247d5fc769b0185c052913e39673da29a880317dfd20ebf86f26a49b0fdd1623e42dbffda4acd8bd643e1cb69f00f0e83abeaa8150ee42cf0fd105ea164736f6c6343000811000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101805760003560e01c806301ffc9a71461018557806303ee9f22146101ad57806318e81571146101d3578063340517c9146102015780634046ebae1461022857806341b3a0d91461023b578063438280dd14610244578063485cc9551461026b57806351a8cd8714610280578063556617c7146102895780636614f0101461029257806367aea313146102a55780636efb72ce146102b857806371d0fb41146102cb57806375b238fc146102f2578063894ba833146102fa5780638e5313e014610302578063961d45c414610329578063b38234f31461033c578063b64864b314610363578063bd5f5be614610376578063c4e906981461039d578063d07900bb146103b0578063d0e8fa82146103fe578063d2351cee14610425578063d4b9311d1461043a578063dbec7dd41461044d578063dc97e84e14610473578063e8d769a714610488578063e9c2651814610491578063eb9ff0b4146104a6578063fe4f5890146104b9575b600080fd5b61019861019336600461185d565b6104cc565b60405190151581526020015b60405180910390f35b6000546101c6906201000090046001600160a01b031681565b6040516101a49190611887565b6101f36101e136600461189b565b60009081526034602052604090205490565b6040519081526020016101a4565b6101f37f014f8da3222812608c449a44f4705585c5ce052eeb6f9af0af9209c64b0ba2de81565b6039546101c6906001600160a01b031681565b6101f3603b5481565b6101f37f39f61ca2a1a28fee144218173ec637b649a353e4026b2738c673800e5bf1437b81565b61027e6102793660046118c9565b610549565b005b6101f360365481565b6101f360375481565b61027e6102a0366004611902565b6106ba565b6033546101c6906001600160a01b031681565b61027e6102c6366004611927565b610965565b6101f37f880a91047114272656e533301261260c75e4d11543ac7303d6fe4204579ec72781565b6101f3600081565b61027e610a7a565b6101f37fe453bacb314e78dcd5192e6b1a2b1f0e7c76e92f6b7e429a6a90f04e39db3b7681565b6035546101c6906001600160a01b031681565b6101f37fd83f5343da19b478b15a140c301a868be9e02603958f38fbd822b9d5c0a2891681565b603a546101c6906001600160a01b031681565b6101f37f4f14c8366fa999817edc9f29824eb88a00cc31225e2156f399da4bc91049eb1081565b61027e6103ab366004611949565b610b4d565b6103ee6103be36600461189b565b6034602052600090815260409020805460018201546002830154600390930154919290916001600160a01b031684565b6040516101a4949392919061196c565b6101f37f76d0567582f23e1e9d7a13eeba60f9aea9d69b8da87ca27a8bf3698b35c653db81565b6101f3600080516020611bd683398151915281565b61027e610448366004611990565b610c36565b60395461046190600160a01b900460ff1681565b60405160ff90911681526020016101a4565b6101f3600080516020611bb683398151915281565b6101f360385481565b6101f3600080516020611b9683398151915281565b6101f36104b43660046119bc565b610deb565b61027e6104c7366004611927565b611455565b600080546040516301ffc9a760e01b8152620100009091046001600160a01b0316906301ffc9a790610502908590600401611a0f565b602060405180830381865afa15801561051f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105439190611a24565b92915050565b600054610100900460ff16158080156105695750600054600160ff909116105b806105835750303b158015610583575060005460ff166001145b6105eb5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff19166001179055801561060e576000805461ff0019166101001790555b61061783611574565b603380546001600160a01b0319166001600160a01b0384161790556001603b556039805460ff60a01b1916905560405133907f599a298163e1678bb1c676052a8930bf0b8a1261ed6e01b8a2391e55f700010290600090a280156106b5576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b600054604051632474521560e21b8152620100009091046001600160a01b0316906391d14854906106ff90600080516020611b96833981519152903390600401611a46565b602060405180830381865afa15801561071c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107409190611a24565b61075d5760405163599a6c3360e11b815260040160405180910390fd5b816f6163636f756e74696e67456e67696e6560801b0361079757603580546001600160a01b0319166001600160a01b038316179055610929565b8175636f6c6c61746572616c41756374696f6e486f75736560501b0361089b57603354603a5460405163d49d786760e01b81526001600160a01b039283169263d49d7867926107eb92911690600401611887565b600060405180830381600087803b15801561080557600080fd5b505af1158015610819573d6000803e3d6000fd5b5050603a80546001600160a01b0319166001600160a01b0385811691909117909155603354604051631b29a84160e31b81529116925063d94d42089150610864908490600401611887565b600060405180830381600087803b15801561087e57600080fd5b505af1158015610892573d6000803e3d6000fd5b50505050610929565b81693634b8bab4b230ba37b960b11b036108cf57603980546001600160a01b0319166001600160a01b038316179055610929565b60405162461bcd60e51b815260206004820152602960248201527f4c69717569646174696f6e456e67696e652f66696c652d756e7265636f676e696044820152687a65642d706172616d60b81b60648201526084016105e2565b817fd91f38cf03346b5dc15fb60f9076f866295231ad3c3841a1051f8443f25170d1826040516109599190611887565b60405180910390a25050565b600054604051632474521560e21b8152620100009091046001600160a01b0316906391d14854906109aa90600080516020611bb6833981519152903390600401611a46565b602060405180830381865afa1580156109c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109eb9190611a24565b610a085760405163200ab6d960e01b815260040160405180910390fd5b610a14603754826116a5565b603755600082815260346020526040902060020154610a3390826116a5565b600083815260346020908152604091829020600201929092555182815283917f78430dc03266569e2b73ec40d7107a5bc7047f2244bbca5d04294edb4a6f6ae39101610959565b600054604051632474521560e21b8152620100009091046001600160a01b0316906391d1485490610abf90600080516020611bd6833981519152903390600401611a46565b602060405180830381865afa158015610adc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b009190611a24565b610b1d5760405163bb0684b760e01b815260040160405180910390fd5b6000603b8190556040517f2d4b4ecff7bd7503135271925520a2f6c0d98c9473ffc1a1e72c92502f51b25e9190a1565b60008054604051632474521560e21b8152620100009091046001600160a01b0316916391d1485491610b8491903390600401611a46565b602060405180830381865afa158015610ba1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc59190611a24565b610be257604051631886ea7d60e11b815260040160405180910390fd5b6039805460ff60a01b1916600160a01b60ff8416908102919091179091556040519081527f1a66ae503bf4d11021cd53bd51d904ee5fa7d34fc88d51ee1425fe54bc0950ba9060200160405180910390a150565b600054604051632474521560e21b8152620100009091046001600160a01b0316906391d1485490610c7b90600080516020611b96833981519152903390600401611a46565b602060405180830381865afa158015610c98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cbc9190611a24565b610cd95760405163599a6c3360e11b815260040160405180910390fd5b81716c69717569646174696f6e50656e616c747960701b03610d7c57670de0b6b3a7640000811015610d665760405162461bcd60e51b815260206004820152603060248201527f4c69717569646174696f6e456e67696e652f66696c652d6c697175696461746960448201526f1bdb94195b985b1d1e4b5b1d0b55d05160821b60648201526084016105e2565b6000838152603460205260409020819055610dab565b816f1b1a5c5d5a59185d1a5bdb931a5b5a5d60821b036108cf5760008381526034602052604090206001018190555b81837fc59b1109b54f213212d2f5af5c1dae5e887f9daa63b595578fae847cb048e8f483604051610dde91815260200190565b60405180910390a3505050565b6000603b54600114610e4d5760405162461bcd60e51b815260206004820152602560248201527f4c69717569646174696f6e456e67696e652f6e6f742d636f6e7472616374456e60448201526418589b195960da1b60648201526084016105e2565b60335460405163e401f2e760e01b8152600481018790526001600160a01b039091169063e401f2e790602401600060405180830381600087803b158015610e9357600080fd5b505af1158015610ea7573d6000803e3d6000fd5b5050603354604051630f50894160e21b8152600093508392506001600160a01b0390911690633d42250490610ee2908a908a90600401611a46565b6040805180830381865afa158015610efe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f229190611a5d565b6000898152603460209081526040808320815160808101835281548152600182015493810193909352600281015483830152600301546001600160a01b039081166060840152603354915163d07900bb60e01b8152600481018e905295975093955090939192839283928392169063d07900bb9060240161010060405180830381865afa158015610fb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fdb9190611a81565b509498509196509450505082158015925090506110095750610ffd86846116c0565b61100788836116c0565b105b6110545760405162461bcd60e51b815260206004820152601c60248201527b4c69717569646174696f6e456e67696e652f6e6f742d756e7361666560201b60448201526064016105e2565b60375460365411801561106e575084604001518560200151115b6110ca5760405162461bcd60e51b815260206004820152602760248201527f4c69717569646174696f6e456e67696e652f6c69717569646174696f6e2d6c696044820152661b5a5d0b5a1a5d60ca1b60648201526084016105e2565b60006110f86037546036546110df9190611b01565b876040015188602001516110f39190611b01565b6116ed565b905061112a8787600001518661111685670de0b6b3a76400006116c0565b6111209190611b14565b6110f39190611b14565b9450848711156111d05782611148611142878a611b01565b866116c0565b1015611156578694506111d0565b8261116186866116c0565b10156111d05760405162461bcd60e51b815260206004820152603860248201527f4c69717569646174696f6e456e67696e652f64757374792d61756374696f6e2d604482015277333937b696b830b93a34b0b616b634b8bab4b230ba34b7b760411b60648201526084016105e2565b50506000856111df88866116c0565b6111e99190611b14565b90506000811161123b5760405162461bcd60e51b815260206004820152601e60248201527f4c69717569646174696f6e456e67696e652f6e756c6c2d61756374696f6e000060448201526064016105e2565b600160ff1b84111580156112535750600160ff1b8111155b61129c5760405162461bcd60e51b815260206004820152601a6024820152794c69717569646174696f6e456e67696e652f6f766572666c6f7760301b60448201526064016105e2565b6000819050603360009054906101000a90046001600160a01b03166001600160a01b0316634e14a9678e8e30603560009054906101000a90046001600160a01b0316866112e890611b36565b6112f18c611b36565b6040516001600160e01b031960e089901b16815260048101969096526001600160a01b039485166024870152928416604486015292166064840152608483019190915260a482015260c401600060405180830381600087803b15801561135657600080fd5b505af115801561136a573d6000803e3d6000fd5b50506035546001600160a01b0316915063a8b30a9f905061138b87876116c0565b6040518263ffffffff1660e01b81526004016113a991815260200190565b600060405180830381600087803b1580156113c357600080fd5b505af11580156113d7573d6000803e3d6000fd5b505050506113f16113e886866116c0565b8e8c848f611706565b9850888c6001600160a01b03168e7f3e68ae8e518de004a5c7f6407b51d7b729e26ddb6bcd135fe2f9e58df1b75b45858961142c8b8b6116c0565b3060405161143d949392919061196c565b60405180910390a45050505050505050949350505050565b600054604051632474521560e21b8152620100009091046001600160a01b0316906391d148549061149a90600080516020611b96833981519152903390600401611a46565b602060405180830381865afa1580156114b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114db9190611a24565b6114f85760405163599a6c3360e11b815260040160405180910390fd5b817511db1bd8985b131a5c5d5a59185d1a5bdb931a5b5a5d60521b03611522576036819055611542565b816f131a5c5d5a59185d1bdc94995dd85c9960821b036108cf5760388190555b817fac7c5c1afaef770ec56ac6268cd3f2fbb1035858ead2601d6553157c33036c3a8260405161095991815260200190565b600054610100900460ff166115df5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016105e2565b6000805462010000600160b01b031916620100006001600160a01b03841690810291909117909155158061168457506040516301ffc9a760e01b81526001600160a01b038216906301ffc9a79061164190637965db0b60e01b90600401611a0f565b602060405180830381865afa15801561165e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116829190611a24565b155b156116a2576040516384d942fd60e01b815260040160405180910390fd5b50565b6000826116b28382611b01565b915081111561054357600080fd5b60008115806116e4575082826116d68183611b52565b92506116e29083611b14565b145b61054357600080fd5b6000818311156116fd57816116ff565b825b9392505050565b600084815260346020908152604080832081516080810183528154808252600183015494820194909452600282015492810192909252600301546001600160a01b03166060820152908290670de0b6b3a764000090611766908a906116c0565b6117709190611b14565b905061177e60375482611842565b60375560408201516117909082611842565b6000888152603460205260409081902060020191909155603a5460355491516354da2ca160e11b8152600481018a90526001600160a01b038981166024830152928316604482015260648101889052868316608482015291169063a9b459429060a4016020604051808303816000875af1158015611812573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118369190611b69565b98975050505050505050565b60008261184f8382611b82565b915081101561054357600080fd5b60006020828403121561186f57600080fd5b81356001600160e01b0319811681146116ff57600080fd5b6001600160a01b0391909116815260200190565b6000602082840312156118ad57600080fd5b5035919050565b6001600160a01b03811681146116a257600080fd5b600080604083850312156118dc57600080fd5b82356118e7816118b4565b915060208301356118f7816118b4565b809150509250929050565b6000806040838503121561191557600080fd5b8235915060208301356118f7816118b4565b6000806040838503121561193a57600080fd5b50508035926020909101359150565b60006020828403121561195b57600080fd5b813560ff811681146116ff57600080fd5b938452602084019290925260408301526001600160a01b0316606082015260800190565b6000806000606084860312156119a557600080fd5b505081359360208301359350604090920135919050565b600080600080608085870312156119d257600080fd5b8435935060208501356119e4816118b4565b925060408501356119f4816118b4565b91506060850135611a04816118b4565b939692955090935050565b6001600160e01b031991909116815260200190565b600060208284031215611a3657600080fd5b815180151581146116ff57600080fd5b9182526001600160a01b0316602082015260400190565b60008060408385031215611a7057600080fd5b505080516020909101519092909150565b600080600080600080600080610100898b031215611a9e57600080fd5b885197506020890151965060408901519550606089015194506080890151935060a0890151925060c0890151611ad3816118b4565b8092505060e089015190509295985092959890939650565b634e487b7160e01b600052601160045260246000fd5b8181038181111561054357610543611aeb565b600082611b3157634e487b7160e01b600052601260045260246000fd5b500490565b6000600160ff1b8201611b4b57611b4b611aeb565b5060000390565b808202811582820484141761054357610543611aeb565b600060208284031215611b7b57600080fd5b5051919050565b8082018082111561054357610543611aeb56fe3b5d4cc60d3ec3516ee8ae083bd60934f6eb2a6c54b1229985c41bfb092b26039a9aef7c1247d5fc769b0185c052913e39673da29a880317dfd20ebf86f26a49b0fdd1623e42dbffda4acd8bd643e1cb69f00f0e83abeaa8150ee42cf0fd105ea164736f6c6343000811000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "disableContract()": {
        "details": "Sets `contractEnabled` to 0 and emits a placeholder event. Only callable by DisablerAccess."
      },
      "initialize(address,address)": {
        "details": "Sets the SafeEngine reference, enables the contract, and sets default discount type.      Emits a placeholder authorization event (can be removed).",
        "params": {
          "accessControl": "Address of the access control singleton.",
          "safeEngine_": "Address of the SafeEngine contract."
        }
      },
      "liquidateCDP(bytes32,address,address,address)": {
        "details": "Confiscates collateral and debt, rewards the liquidator, and auctions remaining collateral via Exchange.      Pushes debt to AccountingEngine. Ensures limits and safety conditions are met.",
        "params": {
          "cdp": "Address of the Safe to liquidate.",
          "collateralJoin": "Address of the CollateralJoin contract.",
          "collateralType": "Unique identifier for the collateral type.",
          "incentivesReceiver": "Address to receive liquidator reward."
        },
        "returns": {
          "id": "Unique identifier of the Exchange order."
        }
      },
      "liquidationPenalty(bytes32)": {
        "params": {
          "collateralType": "Unique identifier for the collateral type."
        },
        "returns": {
          "_0": "Liquidation penalty [wad]."
        }
      },
      "modifyParameters(bytes32,address)": {
        "details": "Updates AccountingEngine or Exchange module address. Only callable by DAO.",
        "params": {
          "data": "New contract address.",
          "what": "Parameter to modify (\"accountingEngine\" or \"liquidator\")."
        }
      },
      "modifyParameters(bytes32,bytes32,uint256)": {
        "details": "Updates liquidation penalty or limit for a collateral type. Only callable by DAO.",
        "params": {
          "collateralType": "Unique identifier for the collateral type.",
          "data": "New parameter value.",
          "what": "Parameter to modify (\"liquidationPenalty\" or \"liquidationLimit\")."
        }
      },
      "modifyParameters(bytes32,uint256)": {
        "details": "Updates global liquidation limit or liquidator reward. Only callable by DAO.",
        "params": {
          "data": "New parameter value.",
          "what": "Parameter to modify (\"GlobalLiquidationLimit\" or \"LiquidatorReward\")."
        }
      },
      "reduceActiveLiquidationAmount(bytes32,uint256)": {
        "details": "Updates global and collateral-specific liquidation amounts. Only callable by LiquidationAccess.",
        "params": {
          "collateralType": "Unique identifier for the collateral type.",
          "rad": "Amount to reduce [rad]."
        }
      },
      "setLiquidationDiscountType(uint8)": {
        "details": "Updates the auction discount type. Only callable by Admin.",
        "params": {
          "newDiscountType": "New discount type (e.g., 0 for aggressive)."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "ActiveLiquidationAmount()": {
        "notice": "Current StablePro debt for active auctions [rad]."
      },
      "GlobalLiquidationLimit()": {
        "notice": "Maximum StablePro debt for active auctions [rad]."
      },
      "LiquidatorReward()": {
        "notice": "Reward percentage for liquidators [wad]."
      },
      "accountingEngine()": {
        "notice": "Reference to the AccountingEngine for debt queuing."
      },
      "collateralTypes(bytes32)": {
        "notice": "Maps collateral types to their liquidation configurations."
      },
      "contractEnabled()": {
        "notice": "Flag indicating if the contract is enabled (1) or disabled (0)."
      },
      "disableContract()": {
        "notice": "Disables the contract, halting liquidations."
      },
      "initialize(address,address)": {
        "notice": "Initializes the LiquidationEngine with access control and SafeEngine addresses."
      },
      "liquidateCDP(bytes32,address,address,address)": {
        "notice": "Liquidates an undercollateralized Safe."
      },
      "liquidationDiscountType()": {
        "notice": "Discount type for liquidation auctions (e.g., 0 for aggressive)."
      },
      "liquidationPenalty(bytes32)": {
        "notice": "Retrieves the liquidation penalty for a collateral type."
      },
      "liquidator()": {
        "notice": "Address of the Exchange module for auctions."
      },
      "modifyParameters(bytes32,address)": {
        "notice": "Modifies contract addresses."
      },
      "modifyParameters(bytes32,bytes32,uint256)": {
        "notice": "Modifies collateral type parameters."
      },
      "modifyParameters(bytes32,uint256)": {
        "notice": "Modifies global parameters."
      },
      "reduceActiveLiquidationAmount(bytes32,uint256)": {
        "notice": "Reduces active liquidation amounts after an auction completes."
      },
      "safeEngine()": {
        "notice": "Reference to the SafeEngine contract for Safe operations."
      },
      "setLiquidationDiscountType(uint8)": {
        "notice": "Sets the discount type for liquidation auctions."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1226,
        "contract": "contracts/makerdao/externalContracts/LiquidationEngine.sol:LiquidationEngine",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 1229,
        "contract": "contracts/makerdao/externalContracts/LiquidationEngine.sol:LiquidationEngine",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 25605,
        "contract": "contracts/makerdao/externalContracts/LiquidationEngine.sol:LiquidationEngine",
        "label": "ACCESS_CONTROL_SINGLETON",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(ISuAccessControl)32864"
      },
      {
        "astId": 25893,
        "contract": "contracts/makerdao/externalContracts/LiquidationEngine.sol:LiquidationEngine",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 95150,
        "contract": "contracts/makerdao/externalContracts/LiquidationEngine.sol:LiquidationEngine",
        "label": "safeEngine",
        "offset": 0,
        "slot": "51",
        "type": "t_contract(ISafeEngine)97348"
      },
      {
        "astId": 95156,
        "contract": "contracts/makerdao/externalContracts/LiquidationEngine.sol:LiquidationEngine",
        "label": "collateralTypes",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_bytes32,t_struct(CollateralType)96807_storage)"
      },
      {
        "astId": 95160,
        "contract": "contracts/makerdao/externalContracts/LiquidationEngine.sol:LiquidationEngine",
        "label": "accountingEngine",
        "offset": 0,
        "slot": "53",
        "type": "t_contract(IAccountingEngine)96345"
      },
      {
        "astId": 95163,
        "contract": "contracts/makerdao/externalContracts/LiquidationEngine.sol:LiquidationEngine",
        "label": "GlobalLiquidationLimit",
        "offset": 0,
        "slot": "54",
        "type": "t_uint256"
      },
      {
        "astId": 95166,
        "contract": "contracts/makerdao/externalContracts/LiquidationEngine.sol:LiquidationEngine",
        "label": "ActiveLiquidationAmount",
        "offset": 0,
        "slot": "55",
        "type": "t_uint256"
      },
      {
        "astId": 95169,
        "contract": "contracts/makerdao/externalContracts/LiquidationEngine.sol:LiquidationEngine",
        "label": "LiquidatorReward",
        "offset": 0,
        "slot": "56",
        "type": "t_uint256"
      },
      {
        "astId": 95172,
        "contract": "contracts/makerdao/externalContracts/LiquidationEngine.sol:LiquidationEngine",
        "label": "liquidator",
        "offset": 0,
        "slot": "57",
        "type": "t_address"
      },
      {
        "astId": 95175,
        "contract": "contracts/makerdao/externalContracts/LiquidationEngine.sol:LiquidationEngine",
        "label": "liquidationDiscountType",
        "offset": 20,
        "slot": "57",
        "type": "t_uint8"
      },
      {
        "astId": 95178,
        "contract": "contracts/makerdao/externalContracts/LiquidationEngine.sol:LiquidationEngine",
        "label": "collateralAuctionHouse",
        "offset": 0,
        "slot": "58",
        "type": "t_contract(CollateralAuctionHouseLike)95140"
      },
      {
        "astId": 95223,
        "contract": "contracts/makerdao/externalContracts/LiquidationEngine.sol:LiquidationEngine",
        "label": "contractEnabled",
        "offset": 0,
        "slot": "59",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(CollateralAuctionHouseLike)95140": {
        "encoding": "inplace",
        "label": "contract CollateralAuctionHouseLike",
        "numberOfBytes": "20"
      },
      "t_contract(IAccountingEngine)96345": {
        "encoding": "inplace",
        "label": "contract IAccountingEngine",
        "numberOfBytes": "20"
      },
      "t_contract(ISafeEngine)97348": {
        "encoding": "inplace",
        "label": "contract ISafeEngine",
        "numberOfBytes": "20"
      },
      "t_contract(ISuAccessControl)32864": {
        "encoding": "inplace",
        "label": "contract ISuAccessControl",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_struct(CollateralType)96807_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct ILiquidationEngine.CollateralType)",
        "numberOfBytes": "32",
        "value": "t_struct(CollateralType)96807_storage"
      },
      "t_struct(CollateralType)96807_storage": {
        "encoding": "inplace",
        "label": "struct ILiquidationEngine.CollateralType",
        "members": [
          {
            "astId": 96800,
            "contract": "contracts/makerdao/externalContracts/LiquidationEngine.sol:LiquidationEngine",
            "label": "liquidationPenalty",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 96802,
            "contract": "contracts/makerdao/externalContracts/LiquidationEngine.sol:LiquidationEngine",
            "label": "liquidationLimit",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 96804,
            "contract": "contracts/makerdao/externalContracts/LiquidationEngine.sol:LiquidationEngine",
            "label": "activeLiquidationAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 96806,
            "contract": "contracts/makerdao/externalContracts/LiquidationEngine.sol:LiquidationEngine",
            "label": "collateralAuctionHouse",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}