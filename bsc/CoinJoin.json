{
  "address": "0x78F63E5deA3e28CF1622B7F222846B447ab51B3f",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "BadAccessControlSingleton",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BadLockupPeriod",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidProxy",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidProxyOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAdminError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAlerterError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyCDPAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyDAOError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyDisablerAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyLiquidationAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyMintAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyProxyActionsError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyRewardAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyRoleError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyVaultAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyVotingEscrowError",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "collateralType",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DecreaseAmountFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "DisableContract",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "usr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "Exit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "usr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "ExitNoReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "collateralType",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockupPeriodSeconds",
          "type": "uint256"
        }
      ],
      "name": "IncreaseAmountFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "usr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "Join",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "usr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "JoinNoReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "UpdateRewardChef",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACCESS_CONTROL_SINGLETON",
      "outputs": [
        {
          "internalType": "contract ISuAccessControl",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ALERTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CDP_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DAO_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DISABLER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIQUIDATION_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINT_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROXY_ACTIONS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARD_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VOTING_ESCROW_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "collateralAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractEnabled",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disableContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "lockupPeriodSeconds",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "cdp",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "exit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cdp",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "exitNoReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "accessControlSingleton",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "safeEngine_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "systemCoin_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_collateralType",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_collateralAddress",
          "type": "address"
        }
      ],
      "name": "initializeCollateralType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "cdp",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "join",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cdp",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "joinNoReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "safeEngine",
      "outputs": [
        {
          "internalType": "contract ISafeEngine",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "systemCoin",
      "outputs": [
        {
          "internalType": "contract ICoin",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "8c060bc8c39a7272c2849a174b3b4791",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BadAccessControlSingleton\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BadLockupPeriod\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidProxy\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidProxyOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAdminError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAlerterError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyCDPAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyDAOError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyDisablerAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyLiquidationAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyMintAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyProxyActionsError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRewardAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRoleError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyVaultAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyVotingEscrowError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateralType\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DecreaseAmountFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DisableContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Exit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"ExitNoReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateralType\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockupPeriodSeconds\",\"type\":\"uint256\"}],\"name\":\"IncreaseAmountFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Join\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"JoinNoReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"UpdateRewardChef\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACCESS_CONTROL_SINGLETON\",\"outputs\":[{\"internalType\":\"contract ISuAccessControl\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ALERTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CDP_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAO_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DISABLER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDATION_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROXY_ACTIONS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VOTING_ESCROW_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"collateralAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractEnabled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockupPeriodSeconds\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"cdp\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cdp\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"exitNoReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"accessControlSingleton\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"safeEngine_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"systemCoin_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_collateralAddress\",\"type\":\"address\"}],\"name\":\"initializeCollateralType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cdp\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"join\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cdp\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"joinNoReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeEngine\",\"outputs\":[{\"internalType\":\"contract ISafeEngine\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"systemCoin\",\"outputs\":[{\"internalType\":\"contract ICoin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"custom:changes\":\"Split from MakerDAO\\u2019s join.sol and renamed to CoinJoin.sol. Replaced authorizedAccounts with                 SuAuthenticated. Commented out RewardChef integration. Added collateral type mapping.\",\"custom:events\":\"Emits `Join`, `JoinNoReward`, `Exit`, `ExitNoReward`, `DisableContract`, and commented-out                 `DecreaseAmountFailed`, `IncreaseAmountFailed`, `UpdateRewardChef` for operations and errors.\",\"custom:security\":\"Only authorized accounts (Admin, DisablerAccess, ProxyOwner) can call state-changing functions.                 Token transfers require user approval, and SafeEngine enforces balance updates. Reward system integration                 is commented out, reducing external dependencies.\",\"custom:usage\":\"- **Initialization**: Deploy with access control, SafeEngine, and StablePro token addresses.   ```solidity   CoinJoin coinJoin = new CoinJoin(accessControl, safeEngine, stablePro);   ``` - **Deposit StablePro**: Join external StablePro tokens into a Safe.   ```solidity   coinJoin.join(collateralType, user, cdp, amount);   ``` - **Withdraw StablePro**: Exit internal StablePro coins to external tokens.   ```solidity   coinJoin.exit(collateralType, user, lockupPeriod, cdp, amount);   ``` - **No-Reward Operations**: Join or exit without reward system interaction.   ```solidity   coinJoin.joinNoReward(cdp, amount);   coinJoin.exitNoReward(cdp, amount);   ``` - **Disabling**: Disable the contract to halt operations.   ```solidity   coinJoin.disableContract();   ```\",\"details\":\"Bridges SafeEngine\\u2019s internal RAD-precision coins with external WAD-precision StablePro tokens, handling minting,      burning, and reward system integration (commented out). Supports collateral type mapping for reward tracking.      This contract is a fork of MakerDAO\\u2019s join.sol, split and renamed for clarity, with SuAuthenticated access control.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"disableContract()\":{\"details\":\"Sets `contractEnabled` to 0 and emits an event. Only callable by DisablerAccess.\"},\"exit(bytes32,address,uint256,address,uint256)\":{\"details\":\"Transfers internal coins to this contract, mints external tokens, and updates rewards (commented out).      Requires ProxyOwner authorization and contract to be enabled.\",\"params\":{\"cdp\":\"Address to receive the external StablePro tokens.\",\"collateralType\":\"Type of collateral associated with the operation.\",\"lockupPeriodSeconds\":\"Lockup period for reward system integration (if enabled).\",\"user\":\"Address of the user performing the exit operation.\",\"wad\":\"Amount of internal coins to convert [wad, 18 decimals].\"}},\"exitNoReward(address,uint256)\":{\"details\":\"Transfers internal coins to this contract and mints external tokens. Requires contract to be enabled.\",\"params\":{\"cdp\":\"Address to receive the external StablePro tokens.\",\"wad\":\"Amount of internal coins to convert [wad, 18 decimals].\"}},\"initialize(address,address,address)\":{\"details\":\"Sets up references, enables the contract, and initializes commented-out RewardChef (if applicable).\",\"params\":{\"accessControlSingleton\":\"Address of the access control singleton.\",\"safeEngine_\":\"Address of the SafeEngine contract.\",\"systemCoin_\":\"Address of the external StablePro token contract.\"}},\"initializeCollateralType(bytes32,address)\":{\"details\":\"Maps the collateral type to its address for reward tracking (if enabled). Only callable by Admin.\",\"params\":{\"_collateralAddress\":\"Contract address of the collateral token.\",\"_collateralType\":\"Unique identifier for the collateral type.\"}},\"join(bytes32,address,address,uint256)\":{\"details\":\"Burns external tokens, transfers internal coins to the Safe, and updates rewards (commented out).      Requires ProxyOwner authorization for the user.\",\"params\":{\"cdp\":\"Address to receive the internal coins (Safe handler).\",\"collateralType\":\"Type of collateral associated with the operation.\",\"user\":\"Address of the user performing the join operation.\",\"wad\":\"Amount of external StablePro to convert [wad, 18 decimals].\"}},\"joinNoReward(address,uint256)\":{\"details\":\"Burns external tokens and transfers internal coins to the Safe.\",\"params\":{\"cdp\":\"Address to receive the internal coins (Safe handler).\",\"wad\":\"Amount of external StablePro to convert [wad, 18 decimals].\"}},\"supportsInterface(bytes4)\":{\"details\":\"Verifies support for ICoinJoin, IERC165Upgradeable, or access control interfaces.\",\"params\":{\"interfaceId\":\"Interface identifier to check.\"},\"returns\":{\"_0\":\"True if the interface is supported, false otherwise.\"}}},\"title\":\"CoinJoin\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"collateralAddress(bytes32)\":{\"notice\":\"Maps collateral type identifiers to their corresponding token contract addresses.\"},\"contractEnabled()\":{\"notice\":\"Contract operational status flag (1 = enabled, 0 = disabled).\"},\"disableContract()\":{\"notice\":\"Disables the contract, halting further operations.\"},\"exit(bytes32,address,uint256,address,uint256)\":{\"notice\":\"Converts internal SafeEngine coins to external StablePro tokens with reward adjustments.\"},\"exitNoReward(address,uint256)\":{\"notice\":\"Converts internal SafeEngine coins to external StablePro tokens without reward interaction.\"},\"initialize(address,address,address)\":{\"notice\":\"Initializes the CoinJoin contract with required parameters.\"},\"initializeCollateralType(bytes32,address)\":{\"notice\":\"Associates a collateral type with its token contract address.\"},\"join(bytes32,address,address,uint256)\":{\"notice\":\"Converts external StablePro tokens to internal SafeEngine coins with reward adjustments.\"},\"joinNoReward(address,uint256)\":{\"notice\":\"Converts external StablePro tokens to internal SafeEngine coins without reward interaction.\"},\"safeEngine()\":{\"notice\":\"Reference to the SafeEngine contract for internal coin operations.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Checks if the contract supports a specific interface.\"},\"systemCoin()\":{\"notice\":\"External ERC20 representation of the system coin (StablePro).\"}},\"notice\":\"Adapter contract for converting between internal StablePro coins (SafeEngine) and external ERC20 tokens in the StableUnit protocol.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/makerdao/core/adapters/CoinJoin.sol\":\"CoinJoin\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"contracts/exchange/contracts/periphery/contracts/access-control/SuAccessRoles.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title SuAccessRoles Library\\n * @dev SuAuthenticated and SuAccessControlSingleton need to have this constants\\n * Hierarchy:\\n *      1. DAO - can give admins and system roles\\n *      2.1. Admin - can set Alerters\\n *      2.2. System - includes Minter, Liquidation, Reward and Disabler roles, don't have access to give some roles.\\n *      3. Alerter - can send alerts and trigger rate limits, don't have access to give some roles.\\n */\\nabstract contract SuAccessRoles {\\n    bytes32 public constant ADMIN_ROLE = 0x00;\\n\\n    bytes32 public constant DAO_ROLE = keccak256(\\\"DAO_ROLE\\\");\\n\\n    bytes32 public constant ALERTER_ROLE = keccak256(\\\"ALERTER_ROLE\\\");\\n\\n    // system roles\\n    bytes32 public constant MINT_ACCESS_ROLE = keccak256(\\\"MINT_ACCESS_ROLE\\\");\\n    bytes32 public constant LIQUIDATION_ACCESS_ROLE = keccak256(\\\"LIQUIDATION_ACCESS_ROLE\\\");\\n    bytes32 public constant REWARD_ACCESS_ROLE = keccak256(\\\"REWARD_ACCESS_ROLE\\\");\\n    // bytes32 public constant SYSTEM_ROLE = keccak256(\\\"SYSTEM_ROLE\\\");\\n    bytes32 public constant DISABLER_ROLE = keccak256(\\\"DISABLER_ROLE\\\");\\n    bytes32 public constant CDP_ACCESS_ROLE = keccak256(\\\"CDP_ACCESS_ROLE\\\");\\n    bytes32 public constant VOTING_ESCROW_ROLE = keccak256(\\\"VOTING_ESCROW_ROLE\\\");\\n    bytes32 public constant PROXY_ACTIONS_ROLE = keccak256(\\\"PROXY_ACTIONS_ROLE\\\");\\n}\\n\",\"keccak256\":\"0x76c6b55446c0e7b40405cd0b642650c64a842e5dd71d5c5307f0b2def8898a1b\",\"license\":\"BSL 1.1\"},\"contracts/exchange/contracts/periphery/contracts/access-control/SuAuthenticated.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/access-control/ISuAccessControl.sol\\\";\\nimport \\\"./SuAccessRoles.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @title SuAuthenticated\\n * @dev other contracts should inherit to be authenticated.\\n * The address of SuAccessControlSingleton should be one for all contract that inherits SuAuthenticated\\n */\\nabstract contract SuAuthenticated is Initializable, SuAccessRoles, IERC165Upgradeable {\\n    ISuAccessControl public ACCESS_CONTROL_SINGLETON;\\n\\n    error OnlyDAOError();\\n    error OnlyAdminError();\\n    error OnlyAlerterError();\\n    error OnlyVaultAccessError();\\n    error OnlyLiquidationAccessError();\\n    error OnlyMintAccessError();\\n    error OnlyRewardAccessError();\\n    error OnlyDisablerAccessError();\\n    error OnlyVotingEscrowError();\\n    error OnlyProxyActionsError();\\n    error OnlyRoleError();\\n    error OnlyCDPAccessError();\\n    error BadAccessControlSingleton();\\n\\n    /**\\n     * @dev should be passed in constructor\\n     */\\n    function __suAuthenticatedInit(address _accessControlSingleton) internal onlyInitializing {\\n        ACCESS_CONTROL_SINGLETON = ISuAccessControl(_accessControlSingleton);\\n        if (\\n            _accessControlSingleton == address(0) ||\\n            !ISuAccessControl(_accessControlSingleton).supportsInterface(type(IAccessControlUpgradeable).interfaceId)\\n        ) revert BadAccessControlSingleton();\\n    }\\n\\n    /** CORE ROLES */\\n\\n    modifier onlyDAO() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(DAO_ROLE, msg.sender)) revert OnlyDAOError();\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(ADMIN_ROLE, msg.sender)) revert OnlyAdminError();\\n        _;\\n    }\\n\\n    modifier onlyAlerter() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(ALERTER_ROLE, msg.sender)) revert OnlyAlerterError();\\n        _;\\n    }\\n\\n    /** SYSTEM ROLES */\\n\\n    modifier onlyLiquidationAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(LIQUIDATION_ACCESS_ROLE, msg.sender)) revert OnlyLiquidationAccessError();\\n        _;\\n    }\\n\\n    modifier onlyMintAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(MINT_ACCESS_ROLE, msg.sender)) revert OnlyMintAccessError();\\n        _;\\n    }\\n\\n    modifier onlyRewardAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(REWARD_ACCESS_ROLE, msg.sender)) revert OnlyRewardAccessError();\\n        _;\\n    }\\n\\n    modifier onlyRewardOrAdminAccess() {\\n        if (\\n            !ACCESS_CONTROL_SINGLETON.hasRole(REWARD_ACCESS_ROLE, msg.sender) &&\\n            !ACCESS_CONTROL_SINGLETON.hasRole(ADMIN_ROLE, msg.sender)\\n        ) revert OnlyRewardAccessError();\\n        _;\\n    }\\n\\n    // @notice This modifier check if user/contract have access to \\\"disable\\\" contracts.\\n    // All main contracts in our lending protocol have disableContract() method that stops contracts main functions.\\n    modifier onlyDisablerAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(DISABLER_ROLE, msg.sender)) revert OnlyDisablerAccessError();\\n        _;\\n    }\\n\\n    modifier onlyCDPAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(CDP_ACCESS_ROLE, msg.sender)) revert OnlyCDPAccessError();\\n        _;\\n    }\\n\\n    modifier onlyVotingEscrow() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(VOTING_ESCROW_ROLE, msg.sender)) revert OnlyVotingEscrowError();\\n        _;\\n    }\\n\\n    modifier onlyProxyActions() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(PROXY_ACTIONS_ROLE, msg.sender)) revert OnlyProxyActionsError();\\n        _;\\n    }\\n\\n    // syntax sugar under ACCESS_CONTROL_SINGLETON\\n    modifier onlyRole(bytes32 role) {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(role, msg.sender)) revert OnlyRoleError();\\n        _;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return ACCESS_CONTROL_SINGLETON.supportsInterface(interfaceId);\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcfde5118b09a0dd37d9b4d3c34459b2e2650f59f247ddb9b116733b03ad80d21\",\"license\":\"BSL 1.1\"},\"contracts/exchange/contracts/periphery/contracts/interfaces/access-control/ISuAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\nimport \\\"../../access-control/SuAccessRoles.sol\\\";\\n\\n/**\\n * @notice Access control for contracts\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n **/\\ninterface ISuAccessControl is IAccessControlUpgradeable, IERC165Upgradeable {\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\\n}\\n\",\"keccak256\":\"0x25724ac502fd6418ccd38273b276de4b2fdecd023d723c5d80c9f0a27c407bcd\",\"license\":\"MIT\"},\"contracts/makerdao/core/adapters/CoinJoin.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\n//import \\\"../../../interfaces/IRewardChefV2.sol\\\";\\nimport \\\"../../../exchange/contracts/periphery/contracts/access-control/SuAuthenticated.sol\\\";\\nimport \\\"../../interfaces/ICoin.sol\\\";\\nimport \\\"../../interfaces/ICoinJoin.sol\\\";\\nimport \\\"../../interfaces/ICollateralJoin.sol\\\";\\nimport \\\"../../interfaces/ISafeEngine.sol\\\";\\nimport {ProxyOwner} from \\\"../../utils/ProxyOwner.sol\\\";\\n\\n// CHANGED: in dss all joins contracts are in join.sol. We split and rename them to read this better.\\n// Added SuAuthenticated instead of authorizedAccounts.\\n\\n/**\\n * @title CoinJoin\\n * @notice Adapter contract for converting between internal StablePro coins (SafeEngine) and external ERC20 tokens in the StableUnit protocol.\\n * @dev Bridges SafeEngine\\u2019s internal RAD-precision coins with external WAD-precision StablePro tokens, handling minting,\\n *      burning, and reward system integration (commented out). Supports collateral type mapping for reward tracking.\\n *      This contract is a fork of MakerDAO\\u2019s join.sol, split and renamed for clarity, with SuAuthenticated access control.\\n * @custom:usage\\n * - **Initialization**: Deploy with access control, SafeEngine, and StablePro token addresses.\\n *   ```solidity\\n *   CoinJoin coinJoin = new CoinJoin(accessControl, safeEngine, stablePro);\\n *   ```\\n * - **Deposit StablePro**: Join external StablePro tokens into a Safe.\\n *   ```solidity\\n *   coinJoin.join(collateralType, user, cdp, amount);\\n *   ```\\n * - **Withdraw StablePro**: Exit internal StablePro coins to external tokens.\\n *   ```solidity\\n *   coinJoin.exit(collateralType, user, lockupPeriod, cdp, amount);\\n *   ```\\n * - **No-Reward Operations**: Join or exit without reward system interaction.\\n *   ```solidity\\n *   coinJoin.joinNoReward(cdp, amount);\\n *   coinJoin.exitNoReward(cdp, amount);\\n *   ```\\n * - **Disabling**: Disable the contract to halt operations.\\n *   ```solidity\\n *   coinJoin.disableContract();\\n *   ```\\n * @custom:security Only authorized accounts (Admin, DisablerAccess, ProxyOwner) can call state-changing functions.\\n *                 Token transfers require user approval, and SafeEngine enforces balance updates. Reward system integration\\n *                 is commented out, reducing external dependencies.\\n * @custom:changes Split from MakerDAO\\u2019s join.sol and renamed to CoinJoin.sol. Replaced authorizedAccounts with\\n *                 SuAuthenticated. Commented out RewardChef integration. Added collateral type mapping.\\n * @custom:events Emits `Join`, `JoinNoReward`, `Exit`, `ExitNoReward`, `DisableContract`, and commented-out\\n *                 `DecreaseAmountFailed`, `IncreaseAmountFailed`, `UpdateRewardChef` for operations and errors.\\n */\\ncontract CoinJoin is ICoinJoin, SuAuthenticated, ProxyOwner {\\n    /*address public rewardChef;*/ // Commented-out RewardChef reference\\n    /// @notice Reference to the SafeEngine contract for internal coin operations.\\n    ISafeEngine public safeEngine;\\n    /// @notice External ERC20 representation of the system coin (StablePro).\\n    ICoin public systemCoin;\\n    /// @notice Maps collateral type identifiers to their corresponding token contract addresses.\\n    mapping (bytes32 => address) public collateralAddress; // CollateralType => address of collateral\\n\\n    /**\\n     * @notice Initializes the CoinJoin contract with required parameters.\\n     * @dev Sets up references, enables the contract, and initializes commented-out RewardChef (if applicable).\\n     * @param accessControlSingleton Address of the access control singleton.\\n     * @param safeEngine_ Address of the SafeEngine contract.\\n     * @param systemCoin_ Address of the external StablePro token contract.\\n     */\\n    function initialize(address accessControlSingleton, address safeEngine_, address systemCoin_/*, address rewardChef_*/)\\n    public initializer {\\n\\n        __suAuthenticatedInit(accessControlSingleton);\\n\\n        contractEnabled = 1; // Enable contract operations\\n        safeEngine = ISafeEngine(safeEngine_); // Initialize SafeEngine reference\\n        systemCoin = ICoin(systemCoin_); // Initialize StablePro token reference\\n        //rewardChef = rewardChef_; // Commented-out RewardChef initialization\\n    }\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @notice Contract operational status flag (1 = enabled, 0 = disabled).\\n    uint public contractEnabled;\\n\\n    /**\\n     * @notice Disables the contract, halting further operations.\\n     * @dev Sets `contractEnabled` to 0 and emits an event. Only callable by DisablerAccess.\\n     */\\n    function disableContract() external onlyDisablerAccess {\\n        contractEnabled = 0; // Disable contract\\n        emit DisableContract(); // Notify external systems\\n    }\\n\\n    /// @notice RAY precision constant (10^27) for internal system calculations.\\n    uint constant ONE = 10 ** 27;\\n\\n    /**\\n     * @notice Performs safe multiplication with overflow protection.\\n     * @dev Ensures the product does not overflow by verifying division consistency.\\n     * @param x First operand.\\n     * @param y Second operand.\\n     * @return z Product of x and y.\\n     */\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x); // Prevent overflow\\n    }\\n\\n    /*function updateRewardChef(address rewardChef_) external onlyDAO {\\n        rewardChef = rewardChef_; // Commented-out RewardChef update\\n        emit UpdateRewardChef(); // Notify external systems\\n    }*/\\n\\n    /**\\n     * @notice Associates a collateral type with its token contract address.\\n     * @dev Maps the collateral type to its address for reward tracking (if enabled). Only callable by Admin.\\n     * @param _collateralType Unique identifier for the collateral type.\\n     * @param _collateralAddress Contract address of the collateral token.\\n     */\\n    function initializeCollateralType(bytes32 _collateralType, address _collateralAddress) external onlyAdmin {\\n        collateralAddress[_collateralType] = _collateralAddress; // Map collateral type to address\\n    }\\n\\n    /**\\n     * @notice Converts external StablePro tokens to internal SafeEngine coins with reward adjustments.\\n     * @dev Burns external tokens, transfers internal coins to the Safe, and updates rewards (commented out).\\n     *      Requires ProxyOwner authorization for the user.\\n     * @param collateralType Type of collateral associated with the operation.\\n     * @param user Address of the user performing the join operation.\\n     * @param cdp Address to receive the internal coins (Safe handler).\\n     * @param wad Amount of external StablePro to convert [wad, 18 decimals].\\n     */\\n    function join(bytes32 collateralType, address user, address cdp, uint wad) external onlyProxyOwner(user) {\\n        safeEngine.transferInternalCoins(address(this), cdp, mul(ONE, wad)); // Transfer internal coins (RAD precision)\\n        systemCoin.burn(msg.sender, wad); // Burn external StablePro tokens\\n\\n        //address colAddr = collateralAddress[collateralType]; // Commented-out reward logic\\n        /*(bool success,) = rewardChef.call(\\n            abi.encodeWithSignature(\\\"decreaseAmount(address,address,uint256)\\\", colAddr, user, wad)\\n        );\\n        if (!success) {\\n            emit DecreaseAmountFailed(colAddr, user, wad);\\n        }*/\\n\\n        emit Join(cdp, wad); // Log operation\\n    }\\n\\n    /**\\n     * @notice Converts external StablePro tokens to internal SafeEngine coins without reward interaction.\\n     * @dev Burns external tokens and transfers internal coins to the Safe.\\n     * @param cdp Address to receive the internal coins (Safe handler).\\n     * @param wad Amount of external StablePro to convert [wad, 18 decimals].\\n     */\\n    function joinNoReward(address cdp, uint wad) external {\\n        safeEngine.transferInternalCoins(address(this), cdp, mul(ONE, wad)); // Transfer internal coins (RAD precision)\\n        systemCoin.burn(msg.sender, wad); // Burn external StablePro tokens\\n        emit JoinNoReward(cdp, wad); // Log operation\\n    }\\n\\n    /**\\n     * @notice Converts internal SafeEngine coins to external StablePro tokens with reward adjustments.\\n     * @dev Transfers internal coins to this contract, mints external tokens, and updates rewards (commented out).\\n     *      Requires ProxyOwner authorization and contract to be enabled.\\n     * @param collateralType Type of collateral associated with the operation.\\n     * @param user Address of the user performing the exit operation.\\n     * @param lockupPeriodSeconds Lockup period for reward system integration (if enabled).\\n     * @param cdp Address to receive the external StablePro tokens.\\n     * @param wad Amount of internal coins to convert [wad, 18 decimals].\\n     */\\n    function exit(\\n        bytes32 collateralType, address user, uint256 lockupPeriodSeconds, address cdp, uint wad\\n    ) external onlyProxyOwner(user) {\\n        require(contractEnabled == 1, \\\"CoinJoin/not-contractEnabled\\\"); // Ensure contract is enabled\\n        safeEngine.transferInternalCoins(msg.sender, address(this), mul(ONE, wad)); // Transfer internal coins (RAD precision)\\n        systemCoin.mint(cdp, wad); // Mint external StablePro tokens\\n\\n        /*address colAddr = collateralAddress[collateralType]; // Commented-out reward logic\\n        uint256 userLockupPeriod = IRewardChefV2(rewardChef).getUserLockupPeriodsSeconds(colAddr, user);\\n        if (userLockupPeriod != 0 && userLockupPeriod != lockupPeriodSeconds) revert BadLockupPeriod();\\n        (bool success,) = rewardChef.call(\\n            abi.encodeWithSignature(\\n                \\\"increaseAmount(address,address,uint256,uint256)\\\", colAddr, user, wad, lockupPeriodSeconds\\n            )\\n        );\\n        if (!success) {\\n            emit IncreaseAmountFailed(colAddr, user, wad, 1);\\n        }*/\\n\\n        emit Exit(cdp, wad); // Log operation\\n    }\\n\\n    /**\\n     * @notice Converts internal SafeEngine coins to external StablePro tokens without reward interaction.\\n     * @dev Transfers internal coins to this contract and mints external tokens. Requires contract to be enabled.\\n     * @param cdp Address to receive the external StablePro tokens.\\n     * @param wad Amount of internal coins to convert [wad, 18 decimals].\\n     */\\n    function exitNoReward(address cdp, uint wad) external {\\n        require(contractEnabled == 1, \\\"CoinJoin/not-contractEnabled\\\"); // Ensure contract is enabled\\n        safeEngine.transferInternalCoins(msg.sender, address(this), mul(ONE, wad)); // Transfer internal coins (RAD precision)\\n        systemCoin.mint(cdp, wad); // Mint external StablePro tokens\\n        emit ExitNoReward(cdp, wad); // Log operation\\n    }\\n\\n    /**\\n     * @notice Checks if the contract supports a specific interface.\\n     * @dev Verifies support for ICoinJoin, IERC165Upgradeable, or access control interfaces.\\n     * @param interfaceId Interface identifier to check.\\n     * @return True if the interface is supported, false otherwise.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(ICoinJoin).interfaceId || // CoinJoin interface\\n               interfaceId == type(IERC165Upgradeable).interfaceId || // ERC165 interface\\n               ACCESS_CONTROL_SINGLETON.supportsInterface(interfaceId); // Access control interfaces\\n    }\\n}\",\"keccak256\":\"0x35a537230063ad91af6914be5f30bbb6c8045c07fbcda01ee1ab37ec02a30d6c\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/makerdao/interfaces/ICoin.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ICoin is IERC20 {\\n    function mint(address account, uint256 amount) external;\\n    function burn(address account, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x4552a784b9f87c84a4badb298c1d007873304f0f1da6b896defac2df25325f1b\",\"license\":\"UNLICENSED\"},\"contracts/makerdao/interfaces/ICoinJoin.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport {IDisable} from \\\"./IDisable.sol\\\";\\nimport {ICoin} from \\\"./ICoin.sol\\\";\\n\\n/**\\n * @title ITaxCollector\\n **/\\ninterface ICoinJoin is IDisable {\\n    /* ==================== EVENTS ==================== */\\n    event Join(address indexed usr, uint256 wad);\\n    event JoinNoReward(address indexed usr, uint256 wad);\\n    event Exit(address indexed usr, uint256 wad);\\n    event ExitNoReward(address indexed usr, uint256 wad);\\n    event UpdateRewardChef();\\n    event DecreaseAmountFailed(address indexed collateralType, address indexed user, uint amount);\\n    event IncreaseAmountFailed(\\n        address indexed collateralType,\\n        address indexed user,\\n        uint amount,\\n        uint256 lockupPeriodSeconds\\n    );\\n\\n    /* ===================== ERRORS ==================== */\\n    error BadLockupPeriod();\\n\\n    /* ====================== VARS ===================== */\\n    function systemCoin() external returns (ICoin);\\n\\n    /* ==================== METHODS ==================== */\\n\\n    /**\\n    * @notice Join pegged-coins in the system\\n    * @dev Exited coins have 18 decimals but inside the system they have 45 (rad) decimals.\\n           When we join, the amount (wad) is multiplied by 10**27 (ray).\\n           Can only be called by authorized contracts.\\n    * @param collateralType Collateral that will be used for borrow\\n    * @param user Account that call borrow/repay function and will receive rewards in RewardChef\\n    * @param cdp Account that will receive the joined coins\\n    * @param wad Amount of external coins to join (18 decimal number)\\n    **/\\n    function join(bytes32 collateralType, address user, address cdp, uint wad) external;\\n\\n    /**\\n    * @notice Simple version of join(). Don't have Rewards, it is useful for our smart-contracts.\\n    * @param cdp Account that will receive the joined coins\\n    * @param wad Amount of external coins to join (18 decimal number)\\n    **/\\n    function joinNoReward(address cdp, uint wad) external;\\n\\n    /**\\n    * @notice Exit pegged-coins from the system and inside 'Coin.sol'\\n    * @dev Inside the system, coins have 45 (rad) decimals but outside they have 18 decimals (wad).\\n           When we exit, we specify a wad amount of coins and then the contract automatically multiplies\\n           wad by 10**27 to move the correct 45 decimal coin amount to this adapter.\\n           Can only be called by authorized contracts.\\n    * @param collateralType Collateral that will be used for repay\\n    * @param user Account that call borrow/repay function and will receive rewards in RewardChef\\n    * @param lockupPeriodSeconds Lockup period for rewardChef that calculate user rewards\\n    * @param cdp Account that will receive the exited coins\\n    * @param wad Amount of internal coins to join (18 decimal number that will be multiplied by ray)\\n    **/\\n    function exit(bytes32 collateralType, address user, uint256 lockupPeriodSeconds, address cdp, uint wad) external;\\n\\n    /**\\n    * @notice Simple version of exit(). Don't have Rewards, it is useful for our smart-contracts.\\n    * @param cdp Account that will receive the joined coins\\n    * @param wad Amount of external coins to join (18 decimal number)\\n    **/\\n    function exitNoReward(address cdp, uint wad) external;\\n\\n    /**\\n    * @notice We use rewardChef to increaseAmount/decreaseAmount during join and exit,\\n    * so admin should be able to change RewardChef contract's address.\\n    * @param rewardChef New address of RewardChef contract.\\n    **/\\n    //function updateRewardChef(address rewardChef) external;\\n\\n    /**\\n    * @notice We need to save mapping of collateralType => collateralAddress to work with RewardChef.\\n    * @param _collateralType Collateral type as bytes32, that we use in our protocol.\\n    * @param _collateralAddress Address of collateral\\n    **/\\n    function initializeCollateralType(bytes32 _collateralType, address _collateralAddress) external;\\n}\\n\",\"keccak256\":\"0x5d275a80f44bb2dc7d1c13696f40a2f7a52a638b07c4a4221fef96e5e72e4cef\",\"license\":\"UNLICENSED\"},\"contracts/makerdao/interfaces/ICollateralJoin.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {IDisable} from \\\"./IDisable.sol\\\";\\n\\n/**\\n * @title ITaxCollector\\n **/\\ninterface ICollateralJoin is IDisable {\\n\\n    /* ===================== EVENTS ===================== */\\n\\n    event Join(address indexed usr, uint256 wad);\\n    event Exit(address indexed usr, uint256 wad);\\n\\n    /* ====================== VARS ===================== */\\n    function decimals() external returns (uint);\\n    function collateral() external view returns(IERC20Metadata);\\n\\n    /* ==================== METHODS ==================== */\\n\\n    /**\\n    * @notice Join collateral in the system\\n    * @param usr Account from which we transferFrom collateral and add it in the system\\n    * @param wad Amount of collateral to transfer in the system (represented as a number with 18 decimals)\\n    **/\\n    function join(address usr, uint wad) external;\\n\\n    /**\\n    * @notice Exit collateral from the system\\n    * @param usr Account to which we transfer the collateral\\n    * @param wad Amount of collateral to transfer to 'account' (represented as a number with 18 decimals)\\n    **/\\n    function exit(address usr, uint wad) external;\\n}\\n\",\"keccak256\":\"0xb276834f1935ca409ecca5542ef257f9b68e1e91c53b9bdc6b73f0db63210c07\",\"license\":\"UNLICENSED\"},\"contracts/makerdao/interfaces/IDisable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\ninterface IDisable {\\n    event DisableContract();\\n\\n    function disableContract() external;\\n}\\n\",\"keccak256\":\"0xcf4b5ac43556af77a174aa3a3a9b51c4fc89b933ef875797650542bf686b8405\",\"license\":\"UNLICENSED\"},\"contracts/makerdao/interfaces/ISafeEngine.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// TODO: check how to operate with license and use one for all contracts\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IDisable.sol\\\";\\n\\n/**\\n * @title SafeEngine\\n * @notice The single source of truth for the Maker Protocol. It contains the accounting system of the core Vault,\\n * Internal StablePro balances, and collateral state. It houses the public interface for Vault management,\\n * allowing safe(= CDP or Vault) owners to adjust their Vault state balances. It also contains the public interface\\n * for Vault fungibility, allowing safe (Vault) owners to transfer, split, and merge Vaults.\\n * Excluding these interfaces, SAFEEngine is accessed through trusted smart contract modules.\\n **/\\ninterface ISafeEngine is IDisable {\\n    /* ==================== METHODS ==================== */\\n\\n    // --- Data ---\\n    struct CollateralType {\\n        uint256 debtAmount;        // Total debt issued for this specific collateral type                          [wad]\\n        uint256 accumulatedRate;   // Accumulator for interest accrued on this collateral type                     [ray]\\n        uint256 debtCeiling;       // Maximum amount of debt that can be generated with this collateral type       [rad]\\n        uint256 debtFloor;         // Minimum amount of debt that must be generated by a CDP using this collateral [rad]\\n        uint256 safetyPrice;       // Floor price at which a CDP is allowed to generate debt                       [ray]\\n        uint256 liquidationRatio;  // Liquidation ratio to calculate safety price                                  [ray]\\n        address collateralAddress; // Address of collateral\\n        uint256 safetyPriceBlockNumber; // Block when safetyPrice was updated\\n    }\\n    struct SAFE {\\n        uint256 lockedCollateral; // Total amount of collateral locked in a SAFE/CDP  [wad]\\n        uint256 generatedDebt;    // Total amount of debt generated by a SAFE/CDP     [wad]\\n    }\\n\\n    // --- VARS ---\\n\\n    function safes(bytes32, address) external view returns (uint, uint);\\n\\n    function collateralTypes(bytes32) external view returns (\\n        uint256 debtAmount,       // [wad]\\n        uint256 accumulatedRate,  // [ray]\\n        uint256 debtCeiling,      // [rad]\\n        uint256 debtFloor,        // [rad]\\n        uint256 safetyPrice,      // [ray]\\n        uint256 liquidationRatio, // [ray]\\n        address collateralAddress,\\n        uint256 safetyPriceBlockNumber\\n);\\n\\n    function tokenCollateral(bytes32, address) external view returns (uint256);\\n\\n    function coinBalance(address) external view returns (uint256);\\n\\n    function debtBalance(address) external view returns (uint256);\\n\\n    function cdpRights(address, address) external view returns (uint256);\\n\\n    function globalDebtCeiling() external view returns (uint256);\\n\\n    function globalDebt() external view returns (uint256);\\n\\n    // --- Auth ---\\n    /**\\n     * @notice Allow an address to modify your CDP.\\n     * For example coinAdapter should be able to modify your CDP to withdraw all correctly.\\n     * @param usr Account to give CDP permissions to\\n     */\\n    function approveSAFEModification(address usr) external;\\n\\n    /**\\n     * @notice Deny an address the rights to modify your CDP\\n     * @param usr Account to give CDP permissions to\\n     */\\n    function denySAFEModification(address usr) external;\\n\\n    // --- Administration ---\\n\\n    function initializeCollateralType(bytes32 collateralType, address collateralAddress) external;\\n\\n    /**\\n     * @notice Method to modify some global variables\\n     * @param what - name of variable we want to change\\n     * @param data - new value of this variable\\n     */\\n    function modifyParameters(bytes32 what, uint data) external;\\n    /**\\n     * @notice Method to modify values in struct of collateralTypes\\n     * @param collateralType - collateral type we want to modify (collateralTypes[collateralType])\\n     * @param what - name of variable in struct we want to change\\n     * @param data - new value of this variable\\n     */\\n    function modifyParameters(bytes32 collateralType, bytes32 what, uint data) external;\\n\\n    // --- Fungibility ---\\n    function modifyCollateralBalance(bytes32 collateralType, address usr, int256 wad) external;\\n    function transferCollateral(bytes32 collateralType, address src, address dst, uint256 wad) external;\\n    function transferInternalCoins(address src, address dst, uint256 rad) external;\\n\\n    // --- SafetyPrice Manipulation ---\\n    /**\\n     * @notice Method to update safetyPrice, it's called each time, when function need actual safetyPrice\\n     * @param collateralType - safetyPrice's collateral type we want to update\\n     */\\n    function updateSafetyPrice(bytes32 collateralType) external;\\n\\n    // --- CDP Manipulation ---\\n    /**\\n     * @notice Add/remove collateral or put back/generate more debt in a CDP\\n     * @param collateralType Type of collateral to withdraw/deposit in and from the CDP\\n     * @param cdp Target CDP\\n     * @param collateralSource Account we take collateral from/put collateral into\\n     * @param debtDestination Account from which we credit/debit coins and debt\\n     * @param deltaCollateral Amount of collateral added/extract from the CDP\\n     * @param deltaDebt Amount of debt to generate/repay\\n     */\\n    function modifySAFECollateralization(\\n        bytes32 collateralType,\\n        address cdp,\\n        address collateralSource,\\n        address debtDestination,\\n        int deltaCollateral,\\n        int deltaDebt\\n    ) external;\\n\\n    // --- CDP Fungibility ---\\n    /**\\n     * @notice Transfer collateral and/or debt between CDPs\\n     * @param collateralType Collateral type transferred between CDPs\\n     * @param src Source CDP\\n     * @param dst Destination CDP\\n     * @param deltaCollateral Amount of collateral to take/add into src and give/take from dst\\n     * @param deltaDebt Amount of debt to take/add into src and give/take from dst\\n     */\\n    function transferSAFECollateralAndDebt(\\n        bytes32 collateralType,\\n        address src,\\n        address dst,\\n        int deltaCollateral,\\n        int deltaDebt\\n    ) external;\\n\\n    // --- CDP Confiscation ---\\n    /**\\n     * @notice Normally used by the LiquidationEngine in order to confiscate collateral and\\n       debt from a CDP and give them to someone else\\n     * @param collateralType Collateral type the CDP has locked inside\\n     * @param cdp Target CDP\\n     * @param collateralCounterparty Who we take/give collateral to\\n     * @param debtCounterparty Who we take/give debt to\\n     * @param deltaCollateral Amount of collateral taken/added into the CDP\\n     * @param deltaDebt Amount of debt taken/added into the CDP\\n     */\\n    function confiscateSAFECollateralAndDebt(\\n        bytes32 collateralType,\\n        address cdp,\\n        address collateralCounterparty,\\n        address debtCounterparty,\\n        int deltaCollateral,\\n        int deltaDebt\\n    ) external;\\n\\n    // --- Settlement ---\\n    /**\\n     * @notice Nullify an amount of coins with an equal amount of debt\\n     * @param rad Amount of debt & coins to destroy (expressed as a number with 45 decimals)\\n     */\\n    function settleDebt(uint rad) external;\\n\\n    /**\\n     * @notice Usually called by CoinSavingsAccount in order to create unbacked debt\\n     * @param debtDestination Usually AccountingEngine that can settle decreaseSoldAmount with surplus\\n     * @param coinDestination Usually CoinSavingsAccount who passes the new coins to depositors\\n     * @param rad Amount of debt to create (expressed as a number with 45 decimals)\\n     */\\n    function createUnbackedDebt(address debtDestination, address coinDestination, uint rad) external;\\n\\n    // --- Rates ---\\n    /**\\n     * @notice Usually called by TaxCollector in order to accrue interest on a specific collateral type\\n     * @param collateralType Collateral type we accrue interest for\\n     * @param surplusDst Destination for amount of surplus created by applying the interest rate\\n       to debt created by CDPs with 'collateralType'\\n     * @param accumulatedRate Multiplier applied to the debtAmount in order to calculate the surplus\\n     */\\n    function updateAccumulatedRate(bytes32 collateralType, address surplusDst, int accumulatedRate) external;\\n}\\n\",\"keccak256\":\"0x005803105e8f4777342c15159835863376d16f95f909489af8c58894931530bf\",\"license\":\"UNLICENSED\"},\"contracts/makerdao/utils/ProxyOwner.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nabstract contract ProxyOwner {\\n    error InvalidProxyOwner();\\n    error InvalidProxy();\\n\\n    // User through Proxy call exit function, so only owner can be the real user\\n    modifier onlyProxyOwner(address user) {\\n        // Check if msg.sender is contract\\n        if (msg.sender.code.length == 0) revert InvalidProxy();\\n\\n        // Check if msg.sender's contract can get owner\\n        (bool success, bytes memory data) = msg.sender.call(abi.encodeWithSignature(\\\"owner()\\\"));\\n        if (!success) revert InvalidProxy();\\n        address proxyOwner = abi.decode(data, (address));\\n\\n        // Check Proxy owner is user\\n        if (proxyOwner != user) revert InvalidProxyOwner();\\n        _;\\n    }\\n}\",\"keccak256\":\"0x4b56710b151a16de8496237241ffed5de19f8a06c90ac399dfd8019765b39c38\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604081815260048036101561001557600080fd5b600092833560e01c90816301ffc9a714610dd45750806303ee9f2214610da85780630a09b59114610d7657806312db6f5f14610c5e57806319b6fb0114610ab757806320d8a59f14610a0357806341b3a0d9146109e4578063438280dd146109a95780634ba95718146107e057806367aea313146107b757806371d0fb411461077c57806375b238fc14610761578063894ba8331461069a5780638e5313e01461065f578063a7e9445514610636578063b38234f3146105fb578063bd5f5be6146105c0578063c0c53b8b1461033e578063d0e8fa8214610303578063d2351cee146102da578063dc97e84e1461029f578063e9c26518146102645763ef32e6dc1461012057600080fd5b3461023a578160031936011261023a57610138610ea2565b906024359261014b60016036541461106d565b6033546001600160a01b03928691841661016487610ffe565b90803b15610260578451633beaf2b760e21b815291849183918290849082906101919030338b8501610fc1565b03925af180156102565790839161023e575b50508360345416803b1561023a5786839187836101d4958851968795869485936340c10f1960e01b85528401610fe3565b03925af1801561023057610214575b50505192835216907fb8c03d8cff6c18be1283cd376bee133c5f9370f38ef86d25777c1b8e5d6542ba90602090a280f35b61022090939293610ee4565b61022c579084386101e3565b8480fd5b83513d84823e3d90fd5b8280fd5b61024790610ee4565b6102525781386101a3565b5080fd5b84513d85823e3d90fd5b8380fd5b505034610252578160031936011261025257602090517f3b5d4cc60d3ec3516ee8ae083bd60934f6eb2a6c54b1229985c41bfb092b26038152f35b505034610252578160031936011261025257602090517f9a9aef7c1247d5fc769b0185c052913e39673da29a880317dfd20ebf86f26a498152f35b505034610252578160031936011261025257602090516000805160206110b98339815191528152f35b505034610252578160031936011261025257602090517f76d0567582f23e1e9d7a13eeba60f9aea9d69b8da87ca27a8bf3698b35c653db8152f35b503461023a57606036600319011261023a57610358610ea2565b91610361610eb8565b9161036a610ece565b9285549160ff8360081c1615928380946105b3575b801561059c575b156105425760ff198116600117885583610531575b5086549460ff8660081c16156104da5762010000600160b01b03601088901b1662010000600160b01b0319871681178955966001600160a01b03929083168015908115610466575b50610458575060016036558160018060a01b0319931683603354161760335516906034541617603455610414578380f35b610100600160b01b0319909116909117825551600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a13880808380f35b85516384d942fd60e01b8152fd5b87516301ffc9a760e01b8152637965db0b60e01b848201529150602090829060249082905afa9081156104d0578a916104a2575b5015386103e3565b6104c3915060203d81116104c9575b6104bb8183610f28565b810190610f4b565b3861049a565b503d6104b1565b87513d8c823e3d90fd5b845162461bcd60e51b8152602081840152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b61ffff19166101011787553861039b565b845162461bcd60e51b8152602081840152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b1580156103865750600160ff821614610386565b50600160ff82161061037f565b505034610252578160031936011261025257602090517f4f14c8366fa999817edc9f29824eb88a00cc31225e2156f399da4bc91049eb108152f35b505034610252578160031936011261025257602090517fd83f5343da19b478b15a140c301a868be9e02603958f38fbd822b9d5c0a289168152f35b50503461025257816003193601126102525760345490516001600160a01b039091168152602090f35b505034610252578160031936011261025257602090517fe453bacb314e78dcd5192e6b1a2b1f0e7c76e92f6b7e429a6a90f04e39db3b768152f35b50903461023a578260031936011261023a5782548151632474521560e21b81526000805160206110b983398151915284820152336024820152906020908290604490829060101c6001600160a01b03165afa908115610757578491610739575b501561072c5782806036557f2d4b4ecff7bd7503135271925520a2f6c0d98c9473ffc1a1e72c92502f51b25e8180a180f35b5163bb0684b760e01b8152fd5b610751915060203d81116104c9576104bb8183610f28565b386106fa565b82513d86823e3d90fd5b50503461025257816003193601126102525751908152602090f35b505034610252578160031936011261025257602090517f880a91047114272656e533301261260c75e4d11543ac7303d6fe4204579ec7278152f35b50503461025257816003193601126102525760335490516001600160a01b039091168152602090f35b50903461023a5760a036600319011261023a576107fb610eb8565b6001600160a01b0360643581811694929392918582036109a45760843594333b1561099457878086516020810190638da5cb5b60e01b825287815261083f81610f0d565b519082335af161084d610f63565b90156109845782610868826020808495518301019101610fa2565b16911603610974579086929161088260016036541461106d565b806033541661089087610ffe565b90803b15610970578651633beaf2b760e21b815291869183918290849082906108bd9030338d8501610fc1565b03925af1801561096657908591610952575b50506034541691823b15610260576109009284928388938851968795869485936340c10f1960e01b85528401610fe3565b03925af180156102305761093e575b50507f22d324652c93739755cf4581508b60875ebdd78c20c0cff5cf8e23452b2996319160209151908152a280f35b61094790610ee4565b61026057833861090f565b61095b90610ee4565b6102605783386108cf565b86513d87823e3d90fd5b8580fd5b835163074b52c960e01b81528390fd5b8551632e7973df60e21b81528590fd5b8451632e7973df60e21b81528490fd5b600080fd5b505034610252578160031936011261025257602090517f39f61ca2a1a28fee144218173ec637b649a353e4026b2738c673800e5bf1437b8152f35b5050346102525781600319360112610252576020906036549051908152f35b503461023a578160031936011261023a57610a1c610eb8565b9160018060a01b03916044602084875460101c16845192838092632474521560e21b82528a878301523360248301525afa908115610aad578691610a8f575b5015610a81573584526035602052832080546001600160a01b0319169190921617905580f35b9051631886ea7d60e11b8152fd5b610aa7915060203d81116104c9576104bb8183610f28565b38610a5b565b83513d88823e3d90fd5b503461023a57608036600319011261023a57610ad1610eb8565b91610ada610ece565b9160643593333b15610c4f57858084516020810190638da5cb5b60e01b8252858152610b0581610f0d565b519082335af1610b13610f63565b9015610c3f5780516001600160a01b039493929185918291610b3d91810160209081019101610fa2565b16911603610c315785908360335416610b5587610ffe565b90803b15610260578451633beaf2b760e21b81529184918391829084908290610b82908d308b8501610fc1565b03925af1801561025657908391610c1d575b50508360345416803b1561023a57868391610bc593838751809681958294632770a7eb60e21b845233908401610fe3565b03925af1801561023057610c05575b50505192835216907fb4e09949657f21548b58afe74e7b86cd2295da5ff1598ae1e5faecb1cf19ca9590602090a280f35b610c1190939293610ee4565b61022c57908438610bd4565b610c2690610ee4565b610252578138610b94565b905163074b52c960e01b8152fd5b8351632e7973df60e21b81528390fd5b509051632e7973df60e21b8152fd5b503461023a578160031936011261023a57610c77610ea2565b6033546024359391926001600160a01b03929186908416610c9787610ffe565b813b1561023a578291610cc0918651948580948193633beaf2b760e21b83528c308b8501610fc1565b03925af18015610d6c57610d59575b5085908360345416803b1561023a57868391610d0193838751809681958294632770a7eb60e21b845233908401610fe3565b03925af1801561023057610d41575b50505192835216907f0df2be71fcb03c1f59e496559e59727ef26ff117e1f022aa699bb79afdb4c55090602090a280f35b610d4d90939293610ee4565b61022c57908438610d10565b610d6590969196610ee4565b9438610ccf565b83513d89823e3d90fd5b503461023a57602036600319011261023a5735825260356020908152918190205490516001600160a01b039091168152f35b5050346102525781600319360112610252579054905160109190911c6001600160a01b03168152602090f35b84939150346102605760203660031901126102605782359263ffffffff60e01b841680940361022c5763028c7c4560e41b8414938415610e91575b8415610e22575b60208585519015158152f35b85546301ffc9a760e01b845291830152919250906020908290602490829060101c6001600160a01b03165afa908115610e855760209391610e68575b5090838080610e16565b610e7f9150833d81116104c9576104bb8183610f28565b83610e5e565b505051903d90823e3d90fd5b6301ffc9a760e01b81149450610e0f565b600435906001600160a01b03821682036109a457565b602435906001600160a01b03821682036109a457565b604435906001600160a01b03821682036109a457565b6001600160401b038111610ef757604052565b634e487b7160e01b600052604160045260246000fd5b604081019081106001600160401b03821117610ef757604052565b601f909101601f19168101906001600160401b03821190821017610ef757604052565b908160209103126109a4575180151581036109a45790565b3d15610f9d573d906001600160401b038211610ef75760405191610f91601f8201601f191660200184610f28565b82523d6000602084013e565b606090565b908160209103126109a457516001600160a01b03811681036109a45790565b6001600160a01b03918216815291166020820152604081019190915260600190565b6001600160a01b039091168152602081019190915260400190565b90600091600090801590811561101b575b50156110185750565b80fd5b909350676765c793fa10079d601b1b9081810282810482036110595780956110455704143861100f565b634e487b7160e01b84526012600452602484fd5b634e487b7160e01b84526011600452602484fd5b1561107457565b60405162461bcd60e51b815260206004820152601c60248201527b10dbda5b929bda5b8bdb9bdd0b58dbdb9d1c9858dd115b98589b195960221b6044820152606490fdfeb0fdd1623e42dbffda4acd8bd643e1cb69f00f0e83abeaa8150ee42cf0fd105ea264697066735822122070d5a69305b1a1cf623126e85b2f618dc121b982319f389c647c3caca155ec3764736f6c63430008110033",
  "devdoc": {
    "custom:changes": "Split from MakerDAO’s join.sol and renamed to CoinJoin.sol. Replaced authorizedAccounts with                 SuAuthenticated. Commented out RewardChef integration. Added collateral type mapping.",
    "custom:events": "Emits `Join`, `JoinNoReward`, `Exit`, `ExitNoReward`, `DisableContract`, and commented-out                 `DecreaseAmountFailed`, `IncreaseAmountFailed`, `UpdateRewardChef` for operations and errors.",
    "custom:security": "Only authorized accounts (Admin, DisablerAccess, ProxyOwner) can call state-changing functions.                 Token transfers require user approval, and SafeEngine enforces balance updates. Reward system integration                 is commented out, reducing external dependencies.",
    "custom:usage": "- **Initialization**: Deploy with access control, SafeEngine, and StablePro token addresses.   ```solidity   CoinJoin coinJoin = new CoinJoin(accessControl, safeEngine, stablePro);   ``` - **Deposit StablePro**: Join external StablePro tokens into a Safe.   ```solidity   coinJoin.join(collateralType, user, cdp, amount);   ``` - **Withdraw StablePro**: Exit internal StablePro coins to external tokens.   ```solidity   coinJoin.exit(collateralType, user, lockupPeriod, cdp, amount);   ``` - **No-Reward Operations**: Join or exit without reward system interaction.   ```solidity   coinJoin.joinNoReward(cdp, amount);   coinJoin.exitNoReward(cdp, amount);   ``` - **Disabling**: Disable the contract to halt operations.   ```solidity   coinJoin.disableContract();   ```",
    "details": "Bridges SafeEngine’s internal RAD-precision coins with external WAD-precision StablePro tokens, handling minting,      burning, and reward system integration (commented out). Supports collateral type mapping for reward tracking.      This contract is a fork of MakerDAO’s join.sol, split and renamed for clarity, with SuAuthenticated access control.",
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "disableContract()": {
        "details": "Sets `contractEnabled` to 0 and emits an event. Only callable by DisablerAccess."
      },
      "exit(bytes32,address,uint256,address,uint256)": {
        "details": "Transfers internal coins to this contract, mints external tokens, and updates rewards (commented out).      Requires ProxyOwner authorization and contract to be enabled.",
        "params": {
          "cdp": "Address to receive the external StablePro tokens.",
          "collateralType": "Type of collateral associated with the operation.",
          "lockupPeriodSeconds": "Lockup period for reward system integration (if enabled).",
          "user": "Address of the user performing the exit operation.",
          "wad": "Amount of internal coins to convert [wad, 18 decimals]."
        }
      },
      "exitNoReward(address,uint256)": {
        "details": "Transfers internal coins to this contract and mints external tokens. Requires contract to be enabled.",
        "params": {
          "cdp": "Address to receive the external StablePro tokens.",
          "wad": "Amount of internal coins to convert [wad, 18 decimals]."
        }
      },
      "initialize(address,address,address)": {
        "details": "Sets up references, enables the contract, and initializes commented-out RewardChef (if applicable).",
        "params": {
          "accessControlSingleton": "Address of the access control singleton.",
          "safeEngine_": "Address of the SafeEngine contract.",
          "systemCoin_": "Address of the external StablePro token contract."
        }
      },
      "initializeCollateralType(bytes32,address)": {
        "details": "Maps the collateral type to its address for reward tracking (if enabled). Only callable by Admin.",
        "params": {
          "_collateralAddress": "Contract address of the collateral token.",
          "_collateralType": "Unique identifier for the collateral type."
        }
      },
      "join(bytes32,address,address,uint256)": {
        "details": "Burns external tokens, transfers internal coins to the Safe, and updates rewards (commented out).      Requires ProxyOwner authorization for the user.",
        "params": {
          "cdp": "Address to receive the internal coins (Safe handler).",
          "collateralType": "Type of collateral associated with the operation.",
          "user": "Address of the user performing the join operation.",
          "wad": "Amount of external StablePro to convert [wad, 18 decimals]."
        }
      },
      "joinNoReward(address,uint256)": {
        "details": "Burns external tokens and transfers internal coins to the Safe.",
        "params": {
          "cdp": "Address to receive the internal coins (Safe handler).",
          "wad": "Amount of external StablePro to convert [wad, 18 decimals]."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Verifies support for ICoinJoin, IERC165Upgradeable, or access control interfaces.",
        "params": {
          "interfaceId": "Interface identifier to check."
        },
        "returns": {
          "_0": "True if the interface is supported, false otherwise."
        }
      }
    },
    "title": "CoinJoin",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "collateralAddress(bytes32)": {
        "notice": "Maps collateral type identifiers to their corresponding token contract addresses."
      },
      "contractEnabled()": {
        "notice": "Contract operational status flag (1 = enabled, 0 = disabled)."
      },
      "disableContract()": {
        "notice": "Disables the contract, halting further operations."
      },
      "exit(bytes32,address,uint256,address,uint256)": {
        "notice": "Converts internal SafeEngine coins to external StablePro tokens with reward adjustments."
      },
      "exitNoReward(address,uint256)": {
        "notice": "Converts internal SafeEngine coins to external StablePro tokens without reward interaction."
      },
      "initialize(address,address,address)": {
        "notice": "Initializes the CoinJoin contract with required parameters."
      },
      "initializeCollateralType(bytes32,address)": {
        "notice": "Associates a collateral type with its token contract address."
      },
      "join(bytes32,address,address,uint256)": {
        "notice": "Converts external StablePro tokens to internal SafeEngine coins with reward adjustments."
      },
      "joinNoReward(address,uint256)": {
        "notice": "Converts external StablePro tokens to internal SafeEngine coins without reward interaction."
      },
      "safeEngine()": {
        "notice": "Reference to the SafeEngine contract for internal coin operations."
      },
      "supportsInterface(bytes4)": {
        "notice": "Checks if the contract supports a specific interface."
      },
      "systemCoin()": {
        "notice": "External ERC20 representation of the system coin (StablePro)."
      }
    },
    "notice": "Adapter contract for converting between internal StablePro coins (SafeEngine) and external ERC20 tokens in the StableUnit protocol.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1226,
        "contract": "contracts/makerdao/core/adapters/CoinJoin.sol:CoinJoin",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 1229,
        "contract": "contracts/makerdao/core/adapters/CoinJoin.sol:CoinJoin",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 24747,
        "contract": "contracts/makerdao/core/adapters/CoinJoin.sol:CoinJoin",
        "label": "ACCESS_CONTROL_SINGLETON",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(ISuAccessControl)31989"
      },
      {
        "astId": 25018,
        "contract": "contracts/makerdao/core/adapters/CoinJoin.sol:CoinJoin",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 48806,
        "contract": "contracts/makerdao/core/adapters/CoinJoin.sol:CoinJoin",
        "label": "safeEngine",
        "offset": 0,
        "slot": "51",
        "type": "t_contract(ISafeEngine)53684"
      },
      {
        "astId": 48810,
        "contract": "contracts/makerdao/core/adapters/CoinJoin.sol:CoinJoin",
        "label": "systemCoin",
        "offset": 0,
        "slot": "52",
        "type": "t_contract(ICoin)52954"
      },
      {
        "astId": 48815,
        "contract": "contracts/makerdao/core/adapters/CoinJoin.sol:CoinJoin",
        "label": "collateralAddress",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 48859,
        "contract": "contracts/makerdao/core/adapters/CoinJoin.sol:CoinJoin",
        "label": "contractEnabled",
        "offset": 0,
        "slot": "54",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ICoin)52954": {
        "encoding": "inplace",
        "label": "contract ICoin",
        "numberOfBytes": "20"
      },
      "t_contract(ISafeEngine)53684": {
        "encoding": "inplace",
        "label": "contract ISafeEngine",
        "numberOfBytes": "20"
      },
      "t_contract(ISuAccessControl)31989": {
        "encoding": "inplace",
        "label": "contract ISuAccessControl",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}