{
  "address": "0x52048965Dd3126f134F780Aa2ddAf0802222Cb6e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ve",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "blockContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "isBlocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ve",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x66725e3cca12130e79f7501bb9895323a44c83399998f0489758957cef5aa08c",
  "receipt": {
    "to": null,
    "from": "0xbd39bed6F15Ea5D1eF198Fcbb53285c7CCccbBe4",
    "contractAddress": "0x52048965Dd3126f134F780Aa2ddAf0802222Cb6e",
    "transactionIndex": 66,
    "gasUsed": "203396",
    "logsBloom": "0x
    "blockHash": "0x37b2b421ff7ea9d7d1bc9dbc47c732b8023e31b670f72435f87e02e2ada4d2af",
    "transactionHash": "0x66725e3cca12130e79f7501bb9895323a44c83399998f0489758957cef5aa08c",
    "logs": [],
    "blockNumber": 55170107,
    "cumulativeGasUsed": "8682476",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xbd39bed6F15Ea5D1eF198Fcbb53285c7CCccbBe4",
    "0xe337e46e0384ae3FB04B77eaAa508F20524799b5"
  ],
  "numDeployments": 1,
  "solcInputHash": "82e45e96aa5184ebf4623be56fe14269",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ve\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"blockContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isBlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Blocking can be circumvented by a deterministically created (create2) contract that selfdestructs after execution of instructions In such a scenario the Blocklist may have to be replaced with new one that also supports blocking of addresses in general\",\"kind\":\"dev\",\"methods\":{\"blockContract(address)\":{\"details\":\"Is only callable by the Blocklist owner Allows blocklisting only of contracts\",\"params\":{\"addr\":\"The contract address to blocklist\"}},\"constructor\":{\"params\":{\"_manager\":\"Owner of the blocklist contract\",\"_ve\":\"Address of the `VotingEscrow` contract\"}},\"isBlocked(address)\":{\"details\":\"This method will be called by the VotingEscrow contract\",\"params\":{\"addr\":\"The contract address to check\"},\"returns\":{\"_0\":\"Whether `addr` is blocked or not\"}}},\"title\":\"A blocklist for contracts\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"blockContract(address)\":{\"notice\":\"Add address to blocklist\"},\"constructor\":{\"notice\":\"Initializes state\"},\"isBlocked(address)\":{\"notice\":\"Check an address\"}},\"notice\":\"Allows blocking of contracts. Blocking a contract also forces the undelegation of that lock in the VotingEscrow contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/exchange/contracts/staking/Blocklist.sol\":\"Blocklist\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"contracts/exchange/contracts/interfaces/IVotingEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.3;\\n\\ninterface IVotingEscrow {\\n    function createLock(uint256 _value, uint256 _unlockTime) external;\\n\\n    function increaseAmount(uint256 _value) external;\\n\\n    function increaseUnlockTime(uint256 _unlockTime) external;\\n\\n    function withdraw() external;\\n\\n    function delegate(address _addr) external;\\n\\n    function quitLock() external;\\n\\n    function balanceOf(address _owner) external view returns (uint256);\\n\\n    function balanceOfAt(address _owner, uint256 _blockNumber) external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function totalSupplyAt(uint256 _blockNumber) external view returns (uint256);\\n\\n    function forceUndelegate(address _addr) external;\\n}\\n\",\"keccak256\":\"0x8f8542df2050d4711697e930976df0acae493845f5ce16e29af844faa710b383\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/exchange/contracts/staking/Blocklist.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.3;\\n\\nimport { IVotingEscrow } from \\\"../interfaces/IVotingEscrow.sol\\\";\\n\\n/// @title A blocklist for contracts\\n/// @notice Allows blocking of contracts. Blocking a contract also\\n/// forces the undelegation of that lock in the VotingEscrow contract\\n/// @dev Blocking can be circumvented by a deterministically created\\n/// (create2) contract that selfdestructs after execution of instructions\\n/// In such a scenario the Blocklist may have to be replaced with new\\n/// one that also supports blocking of addresses in general\\ncontract Blocklist {\\n    mapping(address => bool) private _blocklist;\\n    address public immutable manager;\\n    address public immutable ve;\\n\\n    /// @notice Initializes state\\n    /// @param _manager Owner of the blocklist contract\\n    /// @param _ve Address of the `VotingEscrow` contract\\n    constructor(address _manager, address _ve) {\\n        manager = _manager;\\n        ve = _ve;\\n    }\\n\\n    /// @notice Add address to blocklist\\n    /// @param addr The contract address to blocklist\\n    /// @dev Is only callable by the Blocklist owner\\n    /// Allows blocklisting only of contracts\\n    function blockContract(address addr) external {\\n        require(msg.sender == manager, \\\"Only manager\\\");\\n        require(addr.code.length > 0, \\\"Only contracts\\\");\\n        _blocklist[addr] = true;\\n        IVotingEscrow(ve).forceUndelegate(addr);\\n    }\\n\\n    /// @notice Check an address\\n    /// @param addr The contract address to check\\n    /// @return Whether `addr` is blocked or not\\n    /// @dev This method will be called by the VotingEscrow contract\\n    function isBlocked(address addr) external view returns (bool) {\\n        return _blocklist[addr];\\n    }\\n}\",\"keccak256\":\"0x1483a92ae0a968b8fcdb9bc6b2612afa72f555677fc369d74e53ae3a06a7e698\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b5060405161037338038061037383398101604081905261002f91610062565b6001600160a01b039182166080521660a052610095565b80516001600160a01b038116811461005d57600080fd5b919050565b6000806040838503121561007557600080fd5b61007e83610046565b915061008c60208401610046565b90509250929050565b60805160a0516102ad6100c660003960008181605601526101f00152600081816093015261011101526102ad6000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80631f85071614610051578063481c6a751461008e578063aba129b6146100b5578063fbac3951146100ca575b600080fd5b6100787f000000000000000000000000000000000000000000000000000000000000000081565b604051610085919061025c565b60405180910390f35b6100787f000000000000000000000000000000000000000000000000000000000000000081565b6100c86100c3366004610270565b610106565b005b6100f66100d8366004610270565b6001600160a01b031660009081526020819052604090205460ff1690565b6040519015158152602001610085565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146101725760405162461bcd60e51b815260206004820152600c60248201526b27b7363c9036b0b730b3b2b960a11b60448201526064015b60405180910390fd5b6000816001600160a01b03163b116101bd5760405162461bcd60e51b815260206004820152600e60248201526d4f6e6c7920636f6e74726163747360901b6044820152606401610169565b6001600160a01b0380821660009081526020819052604090819020805460ff1916600117905551631c8e64fb60e11b81527f00000000000000000000000000000000000000000000000000000000000000009091169063391cc9f69061022790849060040161025c565b600060405180830381600087803b15801561024157600080fd5b505af1158015610255573d6000803e3d6000fd5b5050505050565b6001600160a01b0391909116815260200190565b60006020828403121561028257600080fd5b81356001600160a01b038116811461029957600080fd5b939250505056fea164736f6c6343000811000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80631f85071614610051578063481c6a751461008e578063aba129b6146100b5578063fbac3951146100ca575b600080fd5b6100787f000000000000000000000000000000000000000000000000000000000000000081565b604051610085919061025c565b60405180910390f35b6100787f000000000000000000000000000000000000000000000000000000000000000081565b6100c86100c3366004610270565b610106565b005b6100f66100d8366004610270565b6001600160a01b031660009081526020819052604090205460ff1690565b6040519015158152602001610085565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146101725760405162461bcd60e51b815260206004820152600c60248201526b27b7363c9036b0b730b3b2b960a11b60448201526064015b60405180910390fd5b6000816001600160a01b03163b116101bd5760405162461bcd60e51b815260206004820152600e60248201526d4f6e6c7920636f6e74726163747360901b6044820152606401610169565b6001600160a01b0380821660009081526020819052604090819020805460ff1916600117905551631c8e64fb60e11b81527f00000000000000000000000000000000000000000000000000000000000000009091169063391cc9f69061022790849060040161025c565b600060405180830381600087803b15801561024157600080fd5b505af1158015610255573d6000803e3d6000fd5b5050505050565b6001600160a01b0391909116815260200190565b60006020828403121561028257600080fd5b81356001600160a01b038116811461029957600080fd5b939250505056fea164736f6c6343000811000a",
  "devdoc": {
    "details": "Blocking can be circumvented by a deterministically created (create2) contract that selfdestructs after execution of instructions In such a scenario the Blocklist may have to be replaced with new one that also supports blocking of addresses in general",
    "kind": "dev",
    "methods": {
      "blockContract(address)": {
        "details": "Is only callable by the Blocklist owner Allows blocklisting only of contracts",
        "params": {
          "addr": "The contract address to blocklist"
        }
      },
      "constructor": {
        "params": {
          "_manager": "Owner of the blocklist contract",
          "_ve": "Address of the `VotingEscrow` contract"
        }
      },
      "isBlocked(address)": {
        "details": "This method will be called by the VotingEscrow contract",
        "params": {
          "addr": "The contract address to check"
        },
        "returns": {
          "_0": "Whether `addr` is blocked or not"
        }
      }
    },
    "title": "A blocklist for contracts",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "blockContract(address)": {
        "notice": "Add address to blocklist"
      },
      "constructor": {
        "notice": "Initializes state"
      },
      "isBlocked(address)": {
        "notice": "Check an address"
      }
    },
    "notice": "Allows blocking of contracts. Blocking a contract also forces the undelegation of that lock in the VotingEscrow contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 81277,
        "contract": "contracts/exchange/contracts/staking/Blocklist.sol:Blocklist",
        "label": "_blocklist",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}