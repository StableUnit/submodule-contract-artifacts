{
  "address": "0xc7D0B572f7CeCAa0847EBC1C48fB036Be912D31C",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "usr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "own",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        }
      ],
      "name": "NewCdp",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "usr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "ok",
          "type": "uint256"
        }
      ],
      "name": "allowHandler",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "usr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "ok",
          "type": "uint256"
        }
      ],
      "name": "cdpAllow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "cdpCan",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "cdpCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cdpi",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "collateralTypes",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        }
      ],
      "name": "enter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "firstCdpId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "handlerCan",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "safeEngine_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastCdpId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "list",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "prev",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "next",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "deltaCollateral",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "deltaDebt",
          "type": "int256"
        }
      ],
      "name": "modifySAFECollateralization",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cdpSrc",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cdpDst",
          "type": "uint256"
        }
      ],
      "name": "moveSAFE",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "usr",
          "type": "address"
        }
      ],
      "name": "openSafe",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "owns",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        }
      ],
      "name": "quit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "safeEngine",
      "outputs": [
        {
          "internalType": "contract ISafeEngine",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "safes",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "transferCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "ilk",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "transferCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rad",
          "type": "uint256"
        }
      ],
      "name": "transferInternalCoins",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        }
      ],
      "name": "transferSafeOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "8c060bc8c39a7272c2849a174b3b4791",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"own\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"}],\"name\":\"NewCdp\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ok\",\"type\":\"uint256\"}],\"name\":\"allowHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ok\",\"type\":\"uint256\"}],\"name\":\"cdpAllow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cdpCan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cdpCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cdpi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"collateralTypes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"}],\"name\":\"enter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"firstCdpId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"handlerCan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"safeEngine_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastCdpId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"list\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"prev\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"next\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"deltaCollateral\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"deltaDebt\",\"type\":\"int256\"}],\"name\":\"modifySAFECollateralization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cdpSrc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cdpDst\",\"type\":\"uint256\"}],\"name\":\"moveSAFE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"openSafe\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owns\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"}],\"name\":\"quit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeEngine\",\"outputs\":[{\"internalType\":\"contract ISafeEngine\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"safes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transferCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transferCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rad\",\"type\":\"uint256\"}],\"name\":\"transferInternalCoins\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"}],\"name\":\"transferSafeOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"custom:changes\":\"Added `IDssCdpManager` interface, moving structs and events there.                 Simplified permission model with `cdpCan` and `handlerCan` mappings.\",\"custom:events\":\"Emits `NewCdp` when creating a Safe; other events are defined in `IDssCdpManager`.\",\"custom:security\":\"Only authorized users (owners or permitted addresses) can operate on Safes or handlers.                 Relies on SafeEngine for core logic and state management.                 CdpHandler proxies ensure isolation of Safe operations.\",\"custom:usage\":\"- **Initialization**: Deploy with SafeEngine address.   ```solidity   DssCdpManager cdpManager = new DssCdpManager(safeEngineAddress);   ``` - **Safe Creation**: Open a new Safe for a user with a collateral type.   ```solidity   uint cdpId = cdpManager.openSafe(\\\"ETH-A\\\", userAddress);   ``` - **Safe Modification**: Adjust collateral or debt for a Safe.   ```solidity   cdpManager.modifySAFECollateralization(cdpId, deltaCollateral, deltaDebt);   ``` - **Ownership Transfer**: Transfer a Safe to another user.   ```solidity   cdpManager.transferSafeOwnership(cdpId, newOwner);   ``` - **Safe Merging**: Move collateral and debt between Safes or to/from external addresses.   ```solidity   cdpManager.moveSAFE(cdpIdSrc, cdpIdDst); // Merge two Safes   cdpManager.quit(cdpId, dstAddress); // Exit Safe to external address   ```\",\"details\":\"Tracks Safe ownership, permissions, and state via a double-linked list per user. Interacts with SafeEngine      to perform collateral and debt operations through CdpHandler proxies. Supports Safe creation, ownership transfer,      collateral/debt modification, and Safe merging. This contract is a fork of MakerDAO\\u2019s DssCdpManager.sol, adapted      for StableUnit with a custom interface and simplified permission model.\",\"kind\":\"dev\",\"methods\":{\"allowHandler(address,uint256)\":{\"details\":\"Updates `handlerCan` mapping for the caller\\u2019s handler.\",\"params\":{\"ok\":\"Permission status (1 for allowed, 0 for denied).\",\"usr\":\"Address to grant/revoke permission.\"}},\"cdpAllow(uint256,address,uint256)\":{\"details\":\"Updates `cdpCan` mapping for the Safe\\u2019s owner. Requires caller to be authorized.\",\"params\":{\"cdp\":\"Safe ID to modify permissions for.\",\"ok\":\"Permission status (1 for allowed, 0 for denied).\",\"usr\":\"Address to grant/revoke permission.\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"enter(address,uint256)\":{\"details\":\"Transfers all collateral and debt from the source address to the Safe\\u2019s handler. Requires caller to be authorized for both source handler and Safe.\",\"params\":{\"cdp\":\"Safe ID to receive collateral and debt.\",\"src\":\"Source address to transfer collateral and debt from.\"}},\"initialize(address)\":{\"details\":\"Sets the SafeEngine reference for Safe operations.\",\"params\":{\"safeEngine_\":\"Address of the SafeEngine contract.\"}},\"modifySAFECollateralization(uint256,int256,int256)\":{\"details\":\"Calls SafeEngine\\u2019s `modifySAFECollateralization` using the Safe\\u2019s handler. Requires caller to be authorized.\",\"params\":{\"cdp\":\"Safe ID to modify.\",\"deltaCollateral\":\"Amount to add (positive) or remove (negative) collateral [wad].\",\"deltaDebt\":\"Amount to add (positive) or remove (negative) debt [wad].\"}},\"moveSAFE(uint256,uint256)\":{\"details\":\"Transfers all collateral and debt from the source Safe to the destination Safe. Requires both Safes to have the same collateral type and caller to be authorized for both.\",\"params\":{\"cdpDst\":\"Destination Safe ID.\",\"cdpSrc\":\"Source Safe ID.\"}},\"openSafe(bytes32,address)\":{\"details\":\"Deploys a CdpHandler, assigns ownership, and updates the double-linked list.      Emits a `NewCdp` event.\",\"params\":{\"collateralType\":\"Unique identifier for the collateral type (e.g., \\\"ETH-A\\\").\",\"usr\":\"Address to own the new Safe.\"},\"returns\":{\"_0\":\"Safe ID (CDP ID) of the created Safe.\"}},\"quit(uint256,address)\":{\"details\":\"Transfers all collateral and debt to the destination address via SafeEngine. Requires caller to be authorized for both Safe and destination handler.\",\"params\":{\"cdp\":\"Safe ID to exit.\",\"dst\":\"Destination address to receive collateral and debt.\"}},\"transferCollateral(bytes32,uint256,address,uint256)\":{\"details\":\"Calls SafeEngine\\u2019s `transferCollateral`. Requires caller to be authorized.\",\"params\":{\"cdp\":\"Safe ID to transfer collateral from.\",\"dst\":\"Destination address to receive collateral.\",\"ilk\":\"Collateral type to use for transfer.\",\"wad\":\"Amount of collateral to transfer [wad].\"}},\"transferCollateral(uint256,address,uint256)\":{\"details\":\"Calls SafeEngine\\u2019s `transferCollateral`. Requires caller to be authorized.\",\"params\":{\"cdp\":\"Safe ID to transfer collateral from.\",\"dst\":\"Destination address to receive collateral.\",\"wad\":\"Amount of collateral to transfer [wad].\"}},\"transferInternalCoins(uint256,address,uint256)\":{\"details\":\"Calls SafeEngine\\u2019s `transferInternalCoins`. Requires caller to be authorized.\",\"params\":{\"cdp\":\"Safe ID to transfer coins from.\",\"dst\":\"Destination address to receive coins.\",\"rad\":\"Amount of StablePro coins to transfer [rad].\"}},\"transferSafeOwnership(uint256,address)\":{\"details\":\"Updates the double-linked list for both the old and new owners. Requires caller to be authorized.\",\"params\":{\"cdp\":\"Safe ID to transfer.\",\"dst\":\"New owner address.\"}}},\"title\":\"DssCdpManager\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allowHandler(address,uint256)\":{\"notice\":\"Grants or revokes permission for an address to modify the caller\\u2019s CdpHandler.\"},\"cdpAllow(uint256,address,uint256)\":{\"notice\":\"Grants or revokes permission for an address to modify a Safe.\"},\"cdpCan(address,uint256,address)\":{\"notice\":\"Maps owners to Safe IDs to allowed addresses with modification permissions.\"},\"cdpCount(address)\":{\"notice\":\"Maps owner addresses to their total number of Safes.\"},\"cdpi()\":{\"notice\":\"Auto-incrementing counter for Safe IDs (CDP IDs).\"},\"collateralTypes(uint256)\":{\"notice\":\"Maps Safe IDs to their collateral types (e.g., \\\"ETH-A\\\").\"},\"enter(address,uint256)\":{\"notice\":\"Imports collateral and debt from an external address into a Safe.\"},\"firstCdpId(address)\":{\"notice\":\"Maps owner addresses to their first Safe ID.\"},\"handlerCan(address,address)\":{\"notice\":\"Maps CdpHandler addresses to allowed addresses with modification permissions.\"},\"initialize(address)\":{\"notice\":\"Initializes the DssCdpManager with a SafeEngine address.\"},\"lastCdpId(address)\":{\"notice\":\"Maps owner addresses to their last Safe ID.\"},\"list(uint256)\":{\"notice\":\"Maps Safe IDs to their previous and next IDs in the owner\\u2019s double-linked list.\"},\"modifySAFECollateralization(uint256,int256,int256)\":{\"notice\":\"Modifies a Safe\\u2019s collateral and debt through SafeEngine.\"},\"moveSAFE(uint256,uint256)\":{\"notice\":\"Merges collateral and debt from one Safe to another.\"},\"openSafe(bytes32,address)\":{\"notice\":\"Creates a new Safe for a user with a specified collateral type.\"},\"owns(uint256)\":{\"notice\":\"Maps Safe IDs to their owner addresses.\"},\"quit(uint256,address)\":{\"notice\":\"Exits a Safe\\u2019s collateral and debt to an external address.\"},\"safeEngine()\":{\"notice\":\"Reference to the SafeEngine contract for Safe operations.\"},\"safes(uint256)\":{\"notice\":\"Maps Safe IDs to their CdpHandler proxy addresses.\"},\"transferCollateral(bytes32,uint256,address,uint256)\":{\"notice\":\"Transfers collateral from a Safe to an address using a specified collateral type.\"},\"transferCollateral(uint256,address,uint256)\":{\"notice\":\"Transfers collateral from a Safe to an address using the Safe\\u2019s collateral type.\"},\"transferInternalCoins(uint256,address,uint256)\":{\"notice\":\"Transfers internal StablePro coins from a Safe to an address.\"},\"transferSafeOwnership(uint256,address)\":{\"notice\":\"Transfers ownership of a Safe to another address.\"}},\"notice\":\"Manages Safes (CDPs) for users in the StableUnit protocol, facilitating Safe creation and operations.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/makerdao/core/DssCdpManager.sol\":\"DssCdpManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"contracts/makerdao/core/DssCdpManager.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\n/// DssCdpManager.sol\\n\\n// Copyright (C) 2018-2020 Maker Ecosystem Growth Holdings, INC.\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/ISafeEngine.sol\\\";\\nimport \\\"../interfaces/IDssCdpManager.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n// CHANGED: interface created and struct and events moved there\\n\\n/**\\n * @title CdpHandler\\n * @notice Proxy contract for managing a Safe\\u2019s interactions with SafeEngine.\\n * @dev Created per Safe to handle collateral and debt operations, granting the DssCdpManager permission to modify it.\\n * @custom:usage Deployed automatically by DssCdpManager when creating a new Safe.\\n *   ```solidity\\n *   CdpHandler handler = new CdpHandler(safeEngine);\\n *   ```\\n * @custom:security Grants SafeEngine modification rights to the DssCdpManager upon creation.\\n */\\ncontract CdpHandler {\\n    /**\\n     * @notice Initializes the CdpHandler with a SafeEngine reference.\\n     * @dev Approves the creator (DssCdpManager) to modify the handler\\u2019s Safe in SafeEngine.\\n     * @param safeEngine Address of the SafeEngine contract.\\n     */\\n    constructor(ISafeEngine safeEngine) public {\\n        safeEngine.approveSAFEModification(msg.sender);\\n    }\\n}\\n\\n/**\\n * @title DssCdpManager\\n * @notice Manages Safes (CDPs) for users in the StableUnit protocol, facilitating Safe creation and operations.\\n * @dev Tracks Safe ownership, permissions, and state via a double-linked list per user. Interacts with SafeEngine\\n *      to perform collateral and debt operations through CdpHandler proxies. Supports Safe creation, ownership transfer,\\n *      collateral/debt modification, and Safe merging. This contract is a fork of MakerDAO\\u2019s DssCdpManager.sol, adapted\\n *      for StableUnit with a custom interface and simplified permission model.\\n * @custom:usage\\n * - **Initialization**: Deploy with SafeEngine address.\\n *   ```solidity\\n *   DssCdpManager cdpManager = new DssCdpManager(safeEngineAddress);\\n *   ```\\n * - **Safe Creation**: Open a new Safe for a user with a collateral type.\\n *   ```solidity\\n *   uint cdpId = cdpManager.openSafe(\\\"ETH-A\\\", userAddress);\\n *   ```\\n * - **Safe Modification**: Adjust collateral or debt for a Safe.\\n *   ```solidity\\n *   cdpManager.modifySAFECollateralization(cdpId, deltaCollateral, deltaDebt);\\n *   ```\\n * - **Ownership Transfer**: Transfer a Safe to another user.\\n *   ```solidity\\n *   cdpManager.transferSafeOwnership(cdpId, newOwner);\\n *   ```\\n * - **Safe Merging**: Move collateral and debt between Safes or to/from external addresses.\\n *   ```solidity\\n *   cdpManager.moveSAFE(cdpIdSrc, cdpIdDst); // Merge two Safes\\n *   cdpManager.quit(cdpId, dstAddress); // Exit Safe to external address\\n *   ```\\n * @custom:security Only authorized users (owners or permitted addresses) can operate on Safes or handlers.\\n *                 Relies on SafeEngine for core logic and state management.\\n *                 CdpHandler proxies ensure isolation of Safe operations.\\n * @custom:changes Added `IDssCdpManager` interface, moving structs and events there.\\n *                 Simplified permission model with `cdpCan` and `handlerCan` mappings.\\n * @custom:events Emits `NewCdp` when creating a Safe; other events are defined in `IDssCdpManager`.\\n */\\ncontract DssCdpManager is IDssCdpManager, Initializable {\\n    /// @notice Reference to the SafeEngine contract for Safe operations.\\n    ISafeEngine public safeEngine;\\n    /// @notice Auto-incrementing counter for Safe IDs (CDP IDs).\\n    uint public cdpi; // Auto incremental\\n    /// @notice Maps Safe IDs to their CdpHandler proxy addresses.\\n    mapping (uint => address) public safes; // CDPId => CdpHandler\\n    /// @notice Maps Safe IDs to their previous and next IDs in the owner\\u2019s double-linked list.\\n    mapping (uint => List) public list; // CDPId => Prev & Next CDPIds (double linked list)\\n    /// @notice Maps Safe IDs to their owner addresses.\\n    mapping (uint => address) public owns; // CDPId => Owner\\n    /// @notice Maps Safe IDs to their collateral types (e.g., \\\"ETH-A\\\").\\n    mapping (uint => bytes32) public collateralTypes; // CDPId => CollateralType\\n\\n    /// @notice Maps owner addresses to their first Safe ID.\\n    mapping (address => uint) public firstCdpId; // Owner => First CDPId\\n    /// @notice Maps owner addresses to their last Safe ID.\\n    mapping (address => uint) public lastCdpId; // Owner => Last CDPId\\n    /// @notice Maps owner addresses to their total number of Safes.\\n    mapping (address => uint) public cdpCount; // Owner => Amount of CDPs\\n\\n    /// @notice Maps owners to Safe IDs to allowed addresses with modification permissions.\\n    mapping (\\n        address => mapping (\\n            uint => mapping (\\n                address => uint\\n            )\\n        )\\n    ) public cdpCan; // Owner => CDPId => Allowed Addr => True/False\\n\\n    /// @notice Maps CdpHandler addresses to allowed addresses with modification permissions.\\n    mapping (\\n        address => mapping (\\n            address => uint\\n        )\\n    ) public handlerCan; // Cdp => Allowed Addr => True/False\\n\\n    /**\\n     * @notice Restricts function access to the Safe owner or permitted addresses.\\n     * @dev Reverts if the caller is neither the owner nor has permission for the Safe.\\n     * @param cdpId Safe ID to check permissions for.\\n     */\\n    modifier cdpAllowed(uint cdpId) {\\n        require(msg.sender == owns[cdpId] || cdpCan[owns[cdpId]][cdpId][msg.sender] == 1, \\\"cdp-not-allowed\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Restricts function access to the handler address or permitted addresses.\\n     * @dev Reverts if the caller is neither the handler nor has permission for the handler.\\n     * @param urn CdpHandler address to check permissions for.\\n     */\\n    modifier handlerAllowed(address urn) {\\n        require(msg.sender == urn || handlerCan[urn][msg.sender] == 1, \\\"urn-not-allowed\\\");\\n        _;\\n    }\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @notice Initializes the DssCdpManager with a SafeEngine address.\\n     * @dev Sets the SafeEngine reference for Safe operations.\\n     * @param safeEngine_ Address of the SafeEngine contract.\\n     */\\n\\n    function initialize(address safeEngine_) public initializer {\\n        safeEngine = ISafeEngine(safeEngine_);\\n    }\\n\\n    /**\\n     * @notice Adds two unsigned integers, reverting on overflow.\\n     * @dev Ensures safe addition for Safe ID and count calculations.\\n     * @param x First operand.\\n     * @param y Second operand.\\n     * @return z Sum of x and y.\\n     */\\n    function _add(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x + y) >= x);\\n    }\\n\\n    /**\\n     * @notice Subtracts two unsigned integers, reverting on underflow.\\n     * @dev Ensures safe subtraction for Safe count calculations.\\n     * @param x First operand.\\n     * @param y Second operand.\\n     * @return z Difference of x and y.\\n     */\\n    function _sub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) <= x);\\n    }\\n\\n    /**\\n     * @notice Converts an unsigned integer to a signed integer.\\n     * @dev Ensures non-negative input for SafeEngine compatibility.\\n     * @param x Unsigned integer to convert.\\n     * @return y Signed integer result.\\n     */\\n    function toInt(uint x) internal pure returns (int y) {\\n        y = int(x);\\n        require(y >= 0);\\n    }\\n\\n    /**\\n     * @notice Grants or revokes permission for an address to modify a Safe.\\n     * @dev Updates `cdpCan` mapping for the Safe\\u2019s owner. Requires caller to be authorized.\\n     * @param cdp Safe ID to modify permissions for.\\n     * @param usr Address to grant/revoke permission.\\n     * @param ok Permission status (1 for allowed, 0 for denied).\\n     */\\n    function cdpAllow(uint cdp, address usr, uint ok) public cdpAllowed(cdp) {\\n        cdpCan[owns[cdp]][cdp][usr] = ok;\\n    }\\n\\n    /**\\n     * @notice Grants or revokes permission for an address to modify the caller\\u2019s CdpHandler.\\n     * @dev Updates `handlerCan` mapping for the caller\\u2019s handler.\\n     * @param usr Address to grant/revoke permission.\\n     * @param ok Permission status (1 for allowed, 0 for denied).\\n     */\\n    function allowHandler(address usr, uint ok) public {\\n        handlerCan[msg.sender][usr] = ok;\\n    }\\n\\n    /**\\n     * @notice Creates a new Safe for a user with a specified collateral type.\\n     * @dev Deploys a CdpHandler, assigns ownership, and updates the double-linked list.\\n     *      Emits a `NewCdp` event.\\n     * @param collateralType Unique identifier for the collateral type (e.g., \\\"ETH-A\\\").\\n     * @param usr Address to own the new Safe.\\n     * @return Safe ID (CDP ID) of the created Safe.\\n     */\\n    function openSafe(bytes32 collateralType, address usr) public returns (uint) {\\n        require(usr != address(0), \\\"usr-address-0\\\");\\n\\n        // Increment Safe ID\\n        cdpi = _add(cdpi, 1);\\n        // Deploy CdpHandler\\n        safes[cdpi] = address(new CdpHandler(safeEngine));\\n        // Assign ownership\\n        owns[cdpi] = usr;\\n        collateralTypes[cdpi] = collateralType;\\n\\n        // Update double-linked list\\n        if (firstCdpId[usr] == 0) {\\n            firstCdpId[usr] = cdpi; // Set as first Safe if none exist\\n        }\\n        if (lastCdpId[usr] != 0) {\\n            list[cdpi].prev = lastCdpId[usr]; // Link to previous Safe\\n            list[lastCdpId[usr]].next = cdpi; // Update previous Safe\\u2019s next pointer\\n        }\\n        lastCdpId[usr] = cdpi; // Set as last Safe\\n        cdpCount[usr] = _add(cdpCount[usr], 1); // Increment Safe count\\n\\n        emit NewCdp(msg.sender, usr, cdpi);\\n        return cdpi;\\n    }\\n\\n    /**\\n     * @notice Transfers ownership of a Safe to another address.\\n     * @dev Updates the double-linked list for both the old and new owners. Requires caller to be authorized.\\n     * @param cdp Safe ID to transfer.\\n     * @param dst New owner address.\\n     */\\n    function transferSafeOwnership(uint cdp, address dst) public cdpAllowed(cdp) {\\n        require(dst != address(0), \\\"dst-address-0\\\");\\n        require(dst != owns[cdp], \\\"dst-already-owner\\\");\\n\\n        // Remove from old owner\\u2019s list\\n        if (list[cdp].prev != 0) {\\n            list[list[cdp].prev].next = list[cdp].next; // Update previous Safe\\u2019s next pointer\\n        }\\n        if (list[cdp].next != 0) {\\n            list[list[cdp].next].prev = list[cdp].prev; // Update next Safe\\u2019s previous pointer\\n        } else {\\n            lastCdpId[owns[cdp]] = list[cdp].prev; // Update last Safe ID if this was the last\\n        }\\n        if (firstCdpId[owns[cdp]] == cdp) {\\n            firstCdpId[owns[cdp]] = list[cdp].next; // Update first Safe ID if this was the first\\n        }\\n        cdpCount[owns[cdp]] = _sub(cdpCount[owns[cdp]], 1); // Decrement old owner\\u2019s Safe count\\n\\n        // Transfer ownership\\n        owns[cdp] = dst;\\n\\n        // Add to new owner\\u2019s list\\n        list[cdp].prev = lastCdpId[dst]; // Link to new owner\\u2019s last Safe\\n        list[cdp].next = 0; // Clear next pointer\\n        if (lastCdpId[dst] != 0) {\\n            list[lastCdpId[dst]].next = cdp; // Update previous Safe\\u2019s next pointer\\n        }\\n        if (firstCdpId[dst] == 0) {\\n            firstCdpId[dst] = cdp; // Set as first Safe if none exist\\n        }\\n        lastCdpId[dst] = cdp; // Set as last Safe\\n        cdpCount[dst] = _add(cdpCount[dst], 1); // Increment new owner\\u2019s Safe count\\n    }\\n\\n    /**\\n     * @notice Modifies a Safe\\u2019s collateral and debt through SafeEngine.\\n     * @dev Calls SafeEngine\\u2019s `modifySAFECollateralization` using the Safe\\u2019s handler. Requires caller to be authorized.\\n     * @param cdp Safe ID to modify.\\n     * @param deltaCollateral Amount to add (positive) or remove (negative) collateral [wad].\\n     * @param deltaDebt Amount to add (positive) or remove (negative) debt [wad].\\n     */\\n    function modifySAFECollateralization(\\n        uint cdp,\\n        int deltaCollateral,\\n        int deltaDebt\\n    ) public cdpAllowed(cdp) {\\n        address urn = safes[cdp];\\n        safeEngine.modifySAFECollateralization(\\n            collateralTypes[cdp],\\n            urn,\\n            urn,\\n            urn,\\n            deltaCollateral,\\n            deltaDebt\\n        );\\n    }\\n\\n    /**\\n     * @notice Transfers collateral from a Safe to an address using the Safe\\u2019s collateral type.\\n     * @dev Calls SafeEngine\\u2019s `transferCollateral`. Requires caller to be authorized.\\n     * @param cdp Safe ID to transfer collateral from.\\n     * @param dst Destination address to receive collateral.\\n     * @param wad Amount of collateral to transfer [wad].\\n     */\\n    function transferCollateral(\\n        uint cdp,\\n        address dst,\\n        uint wad\\n    ) public cdpAllowed(cdp) {\\n        safeEngine.transferCollateral(collateralTypes[cdp], safes[cdp], dst, wad);\\n    }\\n\\n    /**\\n     * @notice Transfers collateral from a Safe to an address using a specified collateral type.\\n     * @dev Calls SafeEngine\\u2019s `transferCollateral`. Requires caller to be authorized.\\n     * @param ilk Collateral type to use for transfer.\\n     * @param cdp Safe ID to transfer collateral from.\\n     * @param dst Destination address to receive collateral.\\n     * @param wad Amount of collateral to transfer [wad].\\n     */\\n    function transferCollateral(\\n        bytes32 ilk,\\n        uint cdp,\\n        address dst,\\n        uint wad\\n    ) public cdpAllowed(cdp) {\\n        safeEngine.transferCollateral(ilk, safes[cdp], dst, wad);\\n    }\\n\\n    /**\\n     * @notice Transfers internal StablePro coins from a Safe to an address.\\n     * @dev Calls SafeEngine\\u2019s `transferInternalCoins`. Requires caller to be authorized.\\n     * @param cdp Safe ID to transfer coins from.\\n     * @param dst Destination address to receive coins.\\n     * @param rad Amount of StablePro coins to transfer [rad].\\n     */\\n    function transferInternalCoins(uint cdp, address dst, uint rad) public cdpAllowed(cdp) {\\n        safeEngine.transferInternalCoins(safes[cdp], dst, rad);\\n    }\\n\\n    /**\\n     * @notice Exits a Safe\\u2019s collateral and debt to an external address.\\n     * @dev Transfers all collateral and debt to the destination address via SafeEngine. Requires caller to be authorized for both Safe and destination handler.\\n     * @param cdp Safe ID to exit.\\n     * @param dst Destination address to receive collateral and debt.\\n     */\\n    function quit(uint cdp, address dst) public cdpAllowed(cdp) handlerAllowed(dst) {\\n        (uint lockedCollateral, uint generatedDebt) = safeEngine.safes(collateralTypes[cdp], safes[cdp]);\\n        safeEngine.transferSAFECollateralAndDebt(\\n            collateralTypes[cdp],\\n            safes[cdp],\\n            dst,\\n            toInt(lockedCollateral),\\n            toInt(generatedDebt)\\n        );\\n    }\\n\\n    /**\\n     * @notice Imports collateral and debt from an external address into a Safe.\\n     * @dev Transfers all collateral and debt from the source address to the Safe\\u2019s handler. Requires caller to be authorized for both source handler and Safe.\\n     * @param src Source address to transfer collateral and debt from.\\n     * @param cdp Safe ID to receive collateral and debt.\\n     */\\n    function enter(address src, uint cdp) public handlerAllowed(src) cdpAllowed(cdp) {\\n        (uint lockedCollateral, uint generatedDebt) = safeEngine.safes(collateralTypes[cdp], src);\\n        safeEngine.transferSAFECollateralAndDebt(\\n            collateralTypes[cdp],\\n            src,\\n            safes[cdp],\\n            toInt(lockedCollateral),\\n            toInt(generatedDebt)\\n        );\\n    }\\n\\n    /**\\n     * @notice Merges collateral and debt from one Safe to another.\\n     * @dev Transfers all collateral and debt from the source Safe to the destination Safe. Requires both Safes to have the same collateral type and caller to be authorized for both.\\n     * @param cdpSrc Source Safe ID.\\n     * @param cdpDst Destination Safe ID.\\n     */\\n    function moveSAFE(uint cdpSrc, uint cdpDst) public cdpAllowed(cdpSrc) cdpAllowed(cdpDst) {\\n        require(collateralTypes[cdpSrc] == collateralTypes[cdpDst], \\\"non-matching-cdps\\\");\\n        (uint lockedCollateral, uint generatedDebt) = safeEngine.safes(collateralTypes[cdpSrc], safes[cdpSrc]);\\n        safeEngine.transferSAFECollateralAndDebt(\\n            collateralTypes[cdpSrc],\\n            safes[cdpSrc],\\n            safes[cdpDst],\\n            toInt(lockedCollateral),\\n            toInt(generatedDebt)\\n        );\\n    }\\n}\",\"keccak256\":\"0x02d6bade73f6f1c7584fa2a0c5f879ddc45431ceef3731e4895cc2dafc84bc5b\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/makerdao/interfaces/IDisable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\ninterface IDisable {\\n    event DisableContract();\\n\\n    function disableContract() external;\\n}\\n\",\"keccak256\":\"0xcf4b5ac43556af77a174aa3a3a9b51c4fc89b933ef875797650542bf686b8405\",\"license\":\"UNLICENSED\"},\"contracts/makerdao/interfaces/IDssCdpManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/ISafeEngine.sol\\\";\\n\\n/**\\n * @title IDssMiddleware\\n **/\\ninterface IDssCdpManager {\\n\\n    /* ==================== STRUCTS ==================== */\\n\\n    struct List {\\n        uint prev;\\n        uint next;\\n    }\\n\\n    /* ==================== EVENTS ===================== */\\n\\n    event NewCdp(address indexed usr, address indexed own, uint indexed cdp);\\n\\n\\n    /* ===================== VARS ====================== */\\n\\n    // @notice CDPId => CollateralType\\n    function collateralTypes(uint cdp) external view returns (bytes32);\\n    // @notice CDPId => CdpHandler\\n    function safes(uint cdp) external view returns (address);\\n    // @notice Address of safeEngine\\n    function safeEngine() external view returns (ISafeEngine);\\n    // @notice CDPId => Owner\\n    function owns(uint cdp) external view returns (address);\\n    // @notice Owner => CDPId => Allowed Addr => True/False\\n    function cdpCan(address owner, uint cdp, address allowedAddress) external view returns (uint);\\n    // @notice Owner => Amount of CDPs\\n    function cdpCount(address owner) external view returns (uint);\\n    // @notice Owner => First CDPId\\n    function firstCdpId(address owner) external view returns (uint);\\n    // @notice Owner => Last CDPId\\n    function lastCdpId(address owner) external view returns (uint);\\n    // @notice CDPId => Prev & Next CDPIds (double linked list)\\n    function list(uint cdp) external view returns (uint prev, uint next);\\n\\n    /* ==================== METHODS ==================== */\\n\\n    // @notice Allow/disallow a usr address to manage the cdp.\\n    function cdpAllow(uint cdp, address usr, uint ok) external;\\n\\n    // @notice Allow/disallow a usr address to quit to the the sender urn.\\n    function allowHandler(address usr, uint ok) external;\\n\\n    // @notice Open a new cdp for a given usr address.\\n    function openSafe(bytes32 collateralType, address usr) external returns (uint);\\n\\n    // @notice Give the cdp ownership to a dst address.\\n    function transferSafeOwnership(uint cdp, address dst) external;\\n\\n    // @notice Modify the cdp keeping the generated StablePro or collateral freed in the cdp urn address.\\n    function modifySAFECollateralization(uint cdp, int deltaCollateral, int deltaDebt) external;\\n\\n    // @notice Transfer wad amount of cdp collateral from the cdp address to a dst address.\\n    function transferCollateral(uint cdp, address dst, uint wad) external;\\n\\n    // @notice Transfer wad amount of any type of collateral (ilk) from the cdp address to a dst address.\\n    // This function has the purpose to take away collateral from the system that doesn't correspond to the cdp\\n    // but was sent there wrongly.\\n    function transferCollateral(bytes32 ilk, uint cdp, address dst, uint wad) external;\\n\\n    // @notice Transfer wad amount of StablePro from the cdp address to a dst address.\\n    function transferInternalCoins(uint cdp, address dst, uint rad) external;\\n\\n    // @notice Quit the system, migrating the cdp (lockedCollateral, generatedDebt) to a different dst urn\\n    function quit(uint cdp, address dst) external;\\n\\n    // @notice Import a position from src urn to the urn owned by cdp\\n    function enter(address src, uint cdp) external;\\n\\n    // @notice Move a position from cdpSrc urn to the cdpDst urn\\n    function moveSAFE(uint cdpSrc, uint cdpDst) external;\\n}\\n\",\"keccak256\":\"0x55c641947b4cefe2e1dbc413e579b960d64bd55351942b2e88494bb21913fb39\",\"license\":\"UNLICENSED\"},\"contracts/makerdao/interfaces/ISafeEngine.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// TODO: check how to operate with license and use one for all contracts\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IDisable.sol\\\";\\n\\n/**\\n * @title SafeEngine\\n * @notice The single source of truth for the Maker Protocol. It contains the accounting system of the core Vault,\\n * Internal StablePro balances, and collateral state. It houses the public interface for Vault management,\\n * allowing safe(= CDP or Vault) owners to adjust their Vault state balances. It also contains the public interface\\n * for Vault fungibility, allowing safe (Vault) owners to transfer, split, and merge Vaults.\\n * Excluding these interfaces, SAFEEngine is accessed through trusted smart contract modules.\\n **/\\ninterface ISafeEngine is IDisable {\\n    /* ==================== METHODS ==================== */\\n\\n    // --- Data ---\\n    struct CollateralType {\\n        uint256 debtAmount;        // Total debt issued for this specific collateral type                          [wad]\\n        uint256 accumulatedRate;   // Accumulator for interest accrued on this collateral type                     [ray]\\n        uint256 debtCeiling;       // Maximum amount of debt that can be generated with this collateral type       [rad]\\n        uint256 debtFloor;         // Minimum amount of debt that must be generated by a CDP using this collateral [rad]\\n        uint256 safetyPrice;       // Floor price at which a CDP is allowed to generate debt                       [ray]\\n        uint256 liquidationRatio;  // Liquidation ratio to calculate safety price                                  [ray]\\n        address collateralAddress; // Address of collateral\\n        uint256 safetyPriceBlockNumber; // Block when safetyPrice was updated\\n    }\\n    struct SAFE {\\n        uint256 lockedCollateral; // Total amount of collateral locked in a SAFE/CDP  [wad]\\n        uint256 generatedDebt;    // Total amount of debt generated by a SAFE/CDP     [wad]\\n    }\\n\\n    // --- VARS ---\\n\\n    function safes(bytes32, address) external view returns (uint, uint);\\n\\n    function collateralTypes(bytes32) external view returns (\\n        uint256 debtAmount,       // [wad]\\n        uint256 accumulatedRate,  // [ray]\\n        uint256 debtCeiling,      // [rad]\\n        uint256 debtFloor,        // [rad]\\n        uint256 safetyPrice,      // [ray]\\n        uint256 liquidationRatio, // [ray]\\n        address collateralAddress,\\n        uint256 safetyPriceBlockNumber\\n);\\n\\n    function tokenCollateral(bytes32, address) external view returns (uint256);\\n\\n    function coinBalance(address) external view returns (uint256);\\n\\n    function debtBalance(address) external view returns (uint256);\\n\\n    function cdpRights(address, address) external view returns (uint256);\\n\\n    function globalDebtCeiling() external view returns (uint256);\\n\\n    function globalDebt() external view returns (uint256);\\n\\n    // --- Auth ---\\n    /**\\n     * @notice Allow an address to modify your CDP.\\n     * For example coinAdapter should be able to modify your CDP to withdraw all correctly.\\n     * @param usr Account to give CDP permissions to\\n     */\\n    function approveSAFEModification(address usr) external;\\n\\n    /**\\n     * @notice Deny an address the rights to modify your CDP\\n     * @param usr Account to give CDP permissions to\\n     */\\n    function denySAFEModification(address usr) external;\\n\\n    // --- Administration ---\\n\\n    function initializeCollateralType(bytes32 collateralType, address collateralAddress) external;\\n\\n    /**\\n     * @notice Method to modify some global variables\\n     * @param what - name of variable we want to change\\n     * @param data - new value of this variable\\n     */\\n    function modifyParameters(bytes32 what, uint data) external;\\n    /**\\n     * @notice Method to modify values in struct of collateralTypes\\n     * @param collateralType - collateral type we want to modify (collateralTypes[collateralType])\\n     * @param what - name of variable in struct we want to change\\n     * @param data - new value of this variable\\n     */\\n    function modifyParameters(bytes32 collateralType, bytes32 what, uint data) external;\\n\\n    // --- Fungibility ---\\n    function modifyCollateralBalance(bytes32 collateralType, address usr, int256 wad) external;\\n    function transferCollateral(bytes32 collateralType, address src, address dst, uint256 wad) external;\\n    function transferInternalCoins(address src, address dst, uint256 rad) external;\\n\\n    // --- SafetyPrice Manipulation ---\\n    /**\\n     * @notice Method to update safetyPrice, it's called each time, when function need actual safetyPrice\\n     * @param collateralType - safetyPrice's collateral type we want to update\\n     */\\n    function updateSafetyPrice(bytes32 collateralType) external;\\n\\n    // --- CDP Manipulation ---\\n    /**\\n     * @notice Add/remove collateral or put back/generate more debt in a CDP\\n     * @param collateralType Type of collateral to withdraw/deposit in and from the CDP\\n     * @param cdp Target CDP\\n     * @param collateralSource Account we take collateral from/put collateral into\\n     * @param debtDestination Account from which we credit/debit coins and debt\\n     * @param deltaCollateral Amount of collateral added/extract from the CDP\\n     * @param deltaDebt Amount of debt to generate/repay\\n     */\\n    function modifySAFECollateralization(\\n        bytes32 collateralType,\\n        address cdp,\\n        address collateralSource,\\n        address debtDestination,\\n        int deltaCollateral,\\n        int deltaDebt\\n    ) external;\\n\\n    // --- CDP Fungibility ---\\n    /**\\n     * @notice Transfer collateral and/or debt between CDPs\\n     * @param collateralType Collateral type transferred between CDPs\\n     * @param src Source CDP\\n     * @param dst Destination CDP\\n     * @param deltaCollateral Amount of collateral to take/add into src and give/take from dst\\n     * @param deltaDebt Amount of debt to take/add into src and give/take from dst\\n     */\\n    function transferSAFECollateralAndDebt(\\n        bytes32 collateralType,\\n        address src,\\n        address dst,\\n        int deltaCollateral,\\n        int deltaDebt\\n    ) external;\\n\\n    // --- CDP Confiscation ---\\n    /**\\n     * @notice Normally used by the LiquidationEngine in order to confiscate collateral and\\n       debt from a CDP and give them to someone else\\n     * @param collateralType Collateral type the CDP has locked inside\\n     * @param cdp Target CDP\\n     * @param collateralCounterparty Who we take/give collateral to\\n     * @param debtCounterparty Who we take/give debt to\\n     * @param deltaCollateral Amount of collateral taken/added into the CDP\\n     * @param deltaDebt Amount of debt taken/added into the CDP\\n     */\\n    function confiscateSAFECollateralAndDebt(\\n        bytes32 collateralType,\\n        address cdp,\\n        address collateralCounterparty,\\n        address debtCounterparty,\\n        int deltaCollateral,\\n        int deltaDebt\\n    ) external;\\n\\n    // --- Settlement ---\\n    /**\\n     * @notice Nullify an amount of coins with an equal amount of debt\\n     * @param rad Amount of debt & coins to destroy (expressed as a number with 45 decimals)\\n     */\\n    function settleDebt(uint rad) external;\\n\\n    /**\\n     * @notice Usually called by CoinSavingsAccount in order to create unbacked debt\\n     * @param debtDestination Usually AccountingEngine that can settle decreaseSoldAmount with surplus\\n     * @param coinDestination Usually CoinSavingsAccount who passes the new coins to depositors\\n     * @param rad Amount of debt to create (expressed as a number with 45 decimals)\\n     */\\n    function createUnbackedDebt(address debtDestination, address coinDestination, uint rad) external;\\n\\n    // --- Rates ---\\n    /**\\n     * @notice Usually called by TaxCollector in order to accrue interest on a specific collateral type\\n     * @param collateralType Collateral type we accrue interest for\\n     * @param surplusDst Destination for amount of surplus created by applying the interest rate\\n       to debt created by CDPs with 'collateralType'\\n     * @param accumulatedRate Multiplier applied to the debtAmount in order to calculate the surplus\\n     */\\n    function updateAccumulatedRate(bytes32 collateralType, address surplusDst, int accumulatedRate) external;\\n}\\n\",\"keccak256\":\"0x005803105e8f4777342c15159835863376d16f95f909489af8c58894931530bf\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608080604052346100c1576000549060ff8260081c1661006f575060ff80821603610034575b60405161156b90816100c78239f35b60ff90811916176000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160ff8152a138610025565b62461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b6064820152608490fd5b600080fdfe60406080815260048036101561001457600080fd5b600091823560e01c8063018477a5146110565780630b63fb6214610fbf578381631b0dbf7214610e4e575080632516c46f14610e16578063391735c114610dd7578063434efcbd14610da45780635aebb46014610d4b57838163660e160714610c885750806367aea31314610c5c578063730abfa214610aa7578063782c549c14610a6f578381637e348b7d146108ea5750806380c9419e146108b85780638161b1201461088657838163871581a2146107d357508063918b7cfe146107ab57838163aa1d8d81146106db57508063b3d178f2146106bc578063b77b80e314610684578063c4d66de81461053657838163c78101f81461043257508063ce05264d146103e05763ce34aae91461012957600080fd5b346103dc57806003193601126103dc578135610143611253565b81855260209084825260018060a01b038091818689205416331480156103ac575b61016d906112bf565b1692831561037957808752858352818588205416841461034257808752600383528487205461032b575b808752600191828689200154151560001461030f57818852600384528588208054908401548952868920555b8188528684528086892054168852600684528186892054146102ea575b818852868452858820548116885260088452858820546000198101919082116102d75782895287855286892054168852600884528588205580875285835284872080546001600160a01b03191685179055838752600780845285882054828952600385528689205585882083018890558488528352848720546102c1575b8387526006835284872054156102b7575b60078352848720556008825283862054908101948582116102a25750841061029d5760089185525282205580f35b600080fd5b601190634e487b7160e01b6000525260246000fd5b808588205561026f565b848720548752600383528082868920015561025e565b634e487b7160e01b895260118852602489fd5b8188526003845282868920015487855281878a205416895260068552868920556101e0565b8588205487855281878a205416895260078552868920556101c3565b848720600181810154915489528689200155610197565b845162461bcd60e51b815280870184905260116024820152703239ba16b0b63932b0b23c96b7bbb732b960791b6044820152606490fd5b845162461bcd60e51b8152808701849052600d60248201526c06473742d616464726573732d3609c1b6044820152606490fd5b50818689205416885260098452858820858952845285882033600052845261016d60018760002054149050610164565b8280fd5b83823461042e578060031936011261042e576020916103fd611269565b82610406611253565b6001600160a01b039283168452600a8652922091166000908152908352819020549051908152f35b5080fd5b808484346105325760603660031901126105325781358084526020838152828520546001600160a01b03949290851633148015610502575b610473906112bf565b855260028152600584848720541694865460101c1691528285205490803b156104fe5785928360c492865197889586946399bec31560e01b86528501528060248501528060448501526064840152602435608484015260443560a48401525af19081156104f557506104e25750f35b6104eb90611328565b6104f25780f35b80fd5b513d84823e3d90fd5b8580fd5b5084848720541686526009825283862081875282528386203360005282526104736001856000205414905061046a565b5050fd5b50346103dc5760203660031901126103dc57610550611269565b90835460ff8160081c161593848095610677575b8015610660575b15610606575060ff1981166001178555836105f5575b50835462010000600160b01b0319811660109390931b62010000600160b01b0316928317855591926105b1578380f35b610100600160b01b0319909116909117825551600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a13880808380f35b61ffff191661010117845538610581565b608490602084519162461bcd60e51b8352820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152fd5b50303b15801561056b5750600160ff83161461056b565b50600160ff831610610564565b83823461042e57602036600319011261042e5760209181906001600160a01b036106ac611269565b1681526008845220549051908152f35b83823461042e578160031936011261042e576020906001549051908152f35b80848434610532576080366003190112610532576024356106fa61127f565b928185528060205260018060a01b0380848720541633148015610778575b610721906112bf565b80865460101c169286526002602052838620541691803b156104fe576107659486809486519788958694859363272888d360e11b8552606435928035908601611374565b03925af19081156104f557506104e25750f35b50808487205416865260096020528386208387526020528386203360005260205261072160018560002054149050610718565b5090346103dc5760203660031901126103dc5760209282913581526005845220549051908152f35b80848434610532576107e436611295565b909391808652602083815260018060a01b0380868920541633148015610856575b61080e906112bf565b80885460101c16928852600582526002868920549252858820541692823b1561085257879461076586928851998a978896879563272888d360e11b87528601611374565b8780fd5b50808689205416885260098252858820838952825285882033600052825261080e60018760002054149050610805565b5090346103dc5760203660031901126103dc57803583526020908152918190205490516001600160a01b039091168152f35b5090346103dc5760203660031901126103dc579181923581526003602052206001815491015482519182526020820152f35b80848434610532578060031936011261053257610979610908611269565b6001600160a01b036024358282163381148015610a4d575b61092a915061139c565b80875260209086825282868920541633148015610a1d575b61094b906112bf565b82885460101c1692818952600583528685818b205482519889928392630f50894160e21b84528d84016113f0565b0381875afa918215610a135789968a936109de575b508952600583526002878a205493528689205416968886126109da578882126109da57833b156109da57610765899692879389519a8b988997889663476bb6ef60e01b88528701611409565b8880fd5b909250610a02919650873d8911610a0c575b6109fa8183611351565b8101906113da565b959095918b61098e565b503d6109f0565b87513d8b823e3d90fd5b50828689205416885260098252858820818952825285882033600052825261094b60018760002054149050610942565b508752600a6020528487203360005260205261092a6001866000205414610920565b83823461042e57602036600319011261042e5760209181906001600160a01b03610a97611269565b1681526006845220549051908152f35b5091903461042e578260031936011261042e576001600160a01b039283610acc611253565b16918215610c2a57600190610ae182546112fd565b825584548351969060fc8089019160101c8316906001600160401b0383118a841017610c17579089929161143a84398152602098899103019087f0908115610c0d5783548752600288528487209060018060a01b031992168282541617905582548652818752848487209182541617905581548552600586523582852055828452600685528184205415610c02575b6007855281842054610bd4575b8054838552600786528285205560088552610b9a828520546112fd565b83855260088652828520555491829151937fd6be0bc178658a382ff4f91c8c68b542aa6b71685b8fe427966b87745c3ea7a2339180a48152f35b8184205481548552600386528285205580548385526007865282852054855260038652818386200155610b7d565b805482852055610b70565b84513d88823e3d90fd5b634e487b7160e01b895260418552602489fd5b6020606492519162461bcd60e51b8352820152600d60248201526c07573722d616464726573732d3609c1b6044820152fd5b83823461042e578160031936011261042e579054905160109190911c6001600160a01b03168152602090f35b8084843461053257610c9936611295565b82865260208590528386205491946001600160a01b0392831633148015610d18575b610cc4906112bf565b82875460101c16938752600260205282858820541692843b1561085257879460649386928851998a978896633beaf2b760e21b885287015216602485015260448401525af19081156104f557506104e25750f35b508285882054168752600960205284872084885260205284872033600052602052610cc460018660002054149050610cbb565b83823461042e57606036600319011261042e57602091610d69611269565b82610d7261127f565b6001600160a01b0392831684526009865281842060243585528652922091166000908152908352819020549051908152f35b5090346103dc5760203660031901126103dc5735825260026020908152918190205490516001600160a01b039091168152f35b83823461042e578060031936011261042e57610df1611269565b338352600a6020528183209060018060a01b0316600052602052602435906000205580f35b83823461042e57602036600319011261042e5760209181906001600160a01b03610e3e611269565b1681526007845220549051908152f35b80848434610532578060031936011261053257610ee9823592610e6f611253565b84865260208281528487205491956001600160a01b0392831633148015610f8f575b610e9a906112bf565b8287168033148015610f6f575b610eb1915061139c565b82885460101c16928189526005835286808a20546002855282828c2054169082519889928392630f50894160e21b84528a84016113f0565b0381875afa918215610a135789968a93610f4a575b508952600583526002878a205493528689205416938886126109da578882126109da57833b156109da57610765899692879389519a8b988997889663476bb6ef60e01b88528701611409565b909250610f65919650873d8911610a0c576109fa8183611351565b959095918b610efe565b508852600a8252858820336000528252610eb16001876000205414610ea7565b508286892054168852600982528588208189528252858820336000528252610e9a60018760002054149050610e91565b50346103dc57610fce36611295565b8286526020858152848720549195929390926001600160a01b0392831633148015611026575b610ffd906112bf565b818852835281858820541687526009835284872090875282528386209216600052526000205580f35b508286892054168852600984528588208289528452858820336000528452610ffd60018760002054149050610ff4565b5090346103dc57816003193601126103dc578035808452602082815283852054602435936001600160a01b03939184163314801561122a575b611098906112bf565b84875280835283868820541633148015611201575b6110b6906112bf565b818752600583528587205485885286882054036111ca5791839161110f9695938895865460101c16938287526005845287808820546002865282828a2054169082519b8c928392630f50894160e21b84528784016113f0565b0381885afa9283156111c0578799889461119b575b5087526005845260028888205494528088882054169587528787205416978681126111975786831261119757843b156111975786926111779189519a8b988997889663476bb6ef60e01b88528701611409565b03925af19081156104f5575061118b575080f35b61119490611328565b80f35b8680fd5b9093506111b6919950883d8a11610a0c576109fa8183611351565b9890989238611124565b88513d89823e3d90fd5b855162461bcd60e51b815290810183905260116024820152706e6f6e2d6d61746368696e672d6364707360781b6044820152606490fd5b5085872054841687526009835285872085885283528587203388528352858720546001146110ad565b50858720548416875260098352858720828852835285872033885283528587205460011461108f565b602435906001600160a01b038216820361029d57565b600435906001600160a01b038216820361029d57565b604435906001600160a01b038216820361029d57565b606090600319011261029d57600435906024356001600160a01b038116810361029d579060443590565b156112c657565b60405162461bcd60e51b815260206004820152600f60248201526e18d91c0b5b9bdd0b585b1b1bddd959608a1b6044820152606490fd5b90600182019182811161131257821061029d57565b634e487b7160e01b600052601160045260246000fd5b6001600160401b03811161133b57604052565b634e487b7160e01b600052604160045260246000fd5b601f909101601f19168101906001600160401b0382119082101761133b57604052565b9081526001600160a01b03918216602082015291166040820152606081019190915260800190565b156113a357565b60405162461bcd60e51b815260206004820152600f60248201526e1d5c9b8b5b9bdd0b585b1b1bddd959608a1b6044820152606490fd5b919082604091031261029d576020825192015190565b9081526001600160a01b03909116602082015260400190565b9081526001600160a01b039182166020820152911660408201526060810191909152608081019190915260a0019056fe60803460bc576001600160401b0390601f6100fc38819003918201601f191683019184831184841017609a5780849260209460405283398101031260bc57516001600160a01b038116919082900360bc57813b1560bc5760008092602460405180958193631b29a84160e31b83523360048401525af1801560b057608c575b604051603a90816100c28239f35b8111609a576040523880607e565b634e487b7160e01b600052604160045260246000fd5b6040513d6000823e3d90fd5b600080fdfe600080fdfea26469706673582212208e7fb299b7a9a326f7e1dc75c492e89277df71e8eadb52f8e3f70f67016e783f64736f6c63430008110033a264697066735822122019a4012c667256c9b82876369e89782c0a39a62287f742afd4f40f6535e2e36264736f6c63430008110033",
  "deployedBytecode": "0x60406080815260048036101561001457600080fd5b600091823560e01c8063018477a5146110565780630b63fb6214610fbf578381631b0dbf7214610e4e575080632516c46f14610e16578063391735c114610dd7578063434efcbd14610da45780635aebb46014610d4b57838163660e160714610c885750806367aea31314610c5c578063730abfa214610aa7578063782c549c14610a6f578381637e348b7d146108ea5750806380c9419e146108b85780638161b1201461088657838163871581a2146107d357508063918b7cfe146107ab57838163aa1d8d81146106db57508063b3d178f2146106bc578063b77b80e314610684578063c4d66de81461053657838163c78101f81461043257508063ce05264d146103e05763ce34aae91461012957600080fd5b346103dc57806003193601126103dc578135610143611253565b81855260209084825260018060a01b038091818689205416331480156103ac575b61016d906112bf565b1692831561037957808752858352818588205416841461034257808752600383528487205461032b575b808752600191828689200154151560001461030f57818852600384528588208054908401548952868920555b8188528684528086892054168852600684528186892054146102ea575b818852868452858820548116885260088452858820546000198101919082116102d75782895287855286892054168852600884528588205580875285835284872080546001600160a01b03191685179055838752600780845285882054828952600385528689205585882083018890558488528352848720546102c1575b8387526006835284872054156102b7575b60078352848720556008825283862054908101948582116102a25750841061029d5760089185525282205580f35b600080fd5b601190634e487b7160e01b6000525260246000fd5b808588205561026f565b848720548752600383528082868920015561025e565b634e487b7160e01b895260118852602489fd5b8188526003845282868920015487855281878a205416895260068552868920556101e0565b8588205487855281878a205416895260078552868920556101c3565b848720600181810154915489528689200155610197565b845162461bcd60e51b815280870184905260116024820152703239ba16b0b63932b0b23c96b7bbb732b960791b6044820152606490fd5b845162461bcd60e51b8152808701849052600d60248201526c06473742d616464726573732d3609c1b6044820152606490fd5b50818689205416885260098452858820858952845285882033600052845261016d60018760002054149050610164565b8280fd5b83823461042e578060031936011261042e576020916103fd611269565b82610406611253565b6001600160a01b039283168452600a8652922091166000908152908352819020549051908152f35b5080fd5b808484346105325760603660031901126105325781358084526020838152828520546001600160a01b03949290851633148015610502575b610473906112bf565b855260028152600584848720541694865460101c1691528285205490803b156104fe5785928360c492865197889586946399bec31560e01b86528501528060248501528060448501526064840152602435608484015260443560a48401525af19081156104f557506104e25750f35b6104eb90611328565b6104f25780f35b80fd5b513d84823e3d90fd5b8580fd5b5084848720541686526009825283862081875282528386203360005282526104736001856000205414905061046a565b5050fd5b50346103dc5760203660031901126103dc57610550611269565b90835460ff8160081c161593848095610677575b8015610660575b15610606575060ff1981166001178555836105f5575b50835462010000600160b01b0319811660109390931b62010000600160b01b0316928317855591926105b1578380f35b610100600160b01b0319909116909117825551600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a13880808380f35b61ffff191661010117845538610581565b608490602084519162461bcd60e51b8352820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152fd5b50303b15801561056b5750600160ff83161461056b565b50600160ff831610610564565b83823461042e57602036600319011261042e5760209181906001600160a01b036106ac611269565b1681526008845220549051908152f35b83823461042e578160031936011261042e576020906001549051908152f35b80848434610532576080366003190112610532576024356106fa61127f565b928185528060205260018060a01b0380848720541633148015610778575b610721906112bf565b80865460101c169286526002602052838620541691803b156104fe576107659486809486519788958694859363272888d360e11b8552606435928035908601611374565b03925af19081156104f557506104e25750f35b50808487205416865260096020528386208387526020528386203360005260205261072160018560002054149050610718565b5090346103dc5760203660031901126103dc5760209282913581526005845220549051908152f35b80848434610532576107e436611295565b909391808652602083815260018060a01b0380868920541633148015610856575b61080e906112bf565b80885460101c16928852600582526002868920549252858820541692823b1561085257879461076586928851998a978896879563272888d360e11b87528601611374565b8780fd5b50808689205416885260098252858820838952825285882033600052825261080e60018760002054149050610805565b5090346103dc5760203660031901126103dc57803583526020908152918190205490516001600160a01b039091168152f35b5090346103dc5760203660031901126103dc579181923581526003602052206001815491015482519182526020820152f35b80848434610532578060031936011261053257610979610908611269565b6001600160a01b036024358282163381148015610a4d575b61092a915061139c565b80875260209086825282868920541633148015610a1d575b61094b906112bf565b82885460101c1692818952600583528685818b205482519889928392630f50894160e21b84528d84016113f0565b0381875afa918215610a135789968a936109de575b508952600583526002878a205493528689205416968886126109da578882126109da57833b156109da57610765899692879389519a8b988997889663476bb6ef60e01b88528701611409565b8880fd5b909250610a02919650873d8911610a0c575b6109fa8183611351565b8101906113da565b959095918b61098e565b503d6109f0565b87513d8b823e3d90fd5b50828689205416885260098252858820818952825285882033600052825261094b60018760002054149050610942565b508752600a6020528487203360005260205261092a6001866000205414610920565b83823461042e57602036600319011261042e5760209181906001600160a01b03610a97611269565b1681526006845220549051908152f35b5091903461042e578260031936011261042e576001600160a01b039283610acc611253565b16918215610c2a57600190610ae182546112fd565b825584548351969060fc8089019160101c8316906001600160401b0383118a841017610c17579089929161143a84398152602098899103019087f0908115610c0d5783548752600288528487209060018060a01b031992168282541617905582548652818752848487209182541617905581548552600586523582852055828452600685528184205415610c02575b6007855281842054610bd4575b8054838552600786528285205560088552610b9a828520546112fd565b83855260088652828520555491829151937fd6be0bc178658a382ff4f91c8c68b542aa6b71685b8fe427966b87745c3ea7a2339180a48152f35b8184205481548552600386528285205580548385526007865282852054855260038652818386200155610b7d565b805482852055610b70565b84513d88823e3d90fd5b634e487b7160e01b895260418552602489fd5b6020606492519162461bcd60e51b8352820152600d60248201526c07573722d616464726573732d3609c1b6044820152fd5b83823461042e578160031936011261042e579054905160109190911c6001600160a01b03168152602090f35b8084843461053257610c9936611295565b82865260208590528386205491946001600160a01b0392831633148015610d18575b610cc4906112bf565b82875460101c16938752600260205282858820541692843b1561085257879460649386928851998a978896633beaf2b760e21b885287015216602485015260448401525af19081156104f557506104e25750f35b508285882054168752600960205284872084885260205284872033600052602052610cc460018660002054149050610cbb565b83823461042e57606036600319011261042e57602091610d69611269565b82610d7261127f565b6001600160a01b0392831684526009865281842060243585528652922091166000908152908352819020549051908152f35b5090346103dc5760203660031901126103dc5735825260026020908152918190205490516001600160a01b039091168152f35b83823461042e578060031936011261042e57610df1611269565b338352600a6020528183209060018060a01b0316600052602052602435906000205580f35b83823461042e57602036600319011261042e5760209181906001600160a01b03610e3e611269565b1681526007845220549051908152f35b80848434610532578060031936011261053257610ee9823592610e6f611253565b84865260208281528487205491956001600160a01b0392831633148015610f8f575b610e9a906112bf565b8287168033148015610f6f575b610eb1915061139c565b82885460101c16928189526005835286808a20546002855282828c2054169082519889928392630f50894160e21b84528a84016113f0565b0381875afa918215610a135789968a93610f4a575b508952600583526002878a205493528689205416938886126109da578882126109da57833b156109da57610765899692879389519a8b988997889663476bb6ef60e01b88528701611409565b909250610f65919650873d8911610a0c576109fa8183611351565b959095918b610efe565b508852600a8252858820336000528252610eb16001876000205414610ea7565b508286892054168852600982528588208189528252858820336000528252610e9a60018760002054149050610e91565b50346103dc57610fce36611295565b8286526020858152848720549195929390926001600160a01b0392831633148015611026575b610ffd906112bf565b818852835281858820541687526009835284872090875282528386209216600052526000205580f35b508286892054168852600984528588208289528452858820336000528452610ffd60018760002054149050610ff4565b5090346103dc57816003193601126103dc578035808452602082815283852054602435936001600160a01b03939184163314801561122a575b611098906112bf565b84875280835283868820541633148015611201575b6110b6906112bf565b818752600583528587205485885286882054036111ca5791839161110f9695938895865460101c16938287526005845287808820546002865282828a2054169082519b8c928392630f50894160e21b84528784016113f0565b0381885afa9283156111c0578799889461119b575b5087526005845260028888205494528088882054169587528787205416978681126111975786831261119757843b156111975786926111779189519a8b988997889663476bb6ef60e01b88528701611409565b03925af19081156104f5575061118b575080f35b61119490611328565b80f35b8680fd5b9093506111b6919950883d8a11610a0c576109fa8183611351565b9890989238611124565b88513d89823e3d90fd5b855162461bcd60e51b815290810183905260116024820152706e6f6e2d6d61746368696e672d6364707360781b6044820152606490fd5b5085872054841687526009835285872085885283528587203388528352858720546001146110ad565b50858720548416875260098352858720828852835285872033885283528587205460011461108f565b602435906001600160a01b038216820361029d57565b600435906001600160a01b038216820361029d57565b604435906001600160a01b038216820361029d57565b606090600319011261029d57600435906024356001600160a01b038116810361029d579060443590565b156112c657565b60405162461bcd60e51b815260206004820152600f60248201526e18d91c0b5b9bdd0b585b1b1bddd959608a1b6044820152606490fd5b90600182019182811161131257821061029d57565b634e487b7160e01b600052601160045260246000fd5b6001600160401b03811161133b57604052565b634e487b7160e01b600052604160045260246000fd5b601f909101601f19168101906001600160401b0382119082101761133b57604052565b9081526001600160a01b03918216602082015291166040820152606081019190915260800190565b156113a357565b60405162461bcd60e51b815260206004820152600f60248201526e1d5c9b8b5b9bdd0b585b1b1bddd959608a1b6044820152606490fd5b919082604091031261029d576020825192015190565b9081526001600160a01b03909116602082015260400190565b9081526001600160a01b039182166020820152911660408201526060810191909152608081019190915260a0019056fe60803460bc576001600160401b0390601f6100fc38819003918201601f191683019184831184841017609a5780849260209460405283398101031260bc57516001600160a01b038116919082900360bc57813b1560bc5760008092602460405180958193631b29a84160e31b83523360048401525af1801560b057608c575b604051603a90816100c28239f35b8111609a576040523880607e565b634e487b7160e01b600052604160045260246000fd5b6040513d6000823e3d90fd5b600080fdfe600080fdfea26469706673582212208e7fb299b7a9a326f7e1dc75c492e89277df71e8eadb52f8e3f70f67016e783f64736f6c63430008110033a264697066735822122019a4012c667256c9b82876369e89782c0a39a62287f742afd4f40f6535e2e36264736f6c63430008110033",
  "devdoc": {
    "custom:changes": "Added `IDssCdpManager` interface, moving structs and events there.                 Simplified permission model with `cdpCan` and `handlerCan` mappings.",
    "custom:events": "Emits `NewCdp` when creating a Safe; other events are defined in `IDssCdpManager`.",
    "custom:security": "Only authorized users (owners or permitted addresses) can operate on Safes or handlers.                 Relies on SafeEngine for core logic and state management.                 CdpHandler proxies ensure isolation of Safe operations.",
    "custom:usage": "- **Initialization**: Deploy with SafeEngine address.   ```solidity   DssCdpManager cdpManager = new DssCdpManager(safeEngineAddress);   ``` - **Safe Creation**: Open a new Safe for a user with a collateral type.   ```solidity   uint cdpId = cdpManager.openSafe(\"ETH-A\", userAddress);   ``` - **Safe Modification**: Adjust collateral or debt for a Safe.   ```solidity   cdpManager.modifySAFECollateralization(cdpId, deltaCollateral, deltaDebt);   ``` - **Ownership Transfer**: Transfer a Safe to another user.   ```solidity   cdpManager.transferSafeOwnership(cdpId, newOwner);   ``` - **Safe Merging**: Move collateral and debt between Safes or to/from external addresses.   ```solidity   cdpManager.moveSAFE(cdpIdSrc, cdpIdDst); // Merge two Safes   cdpManager.quit(cdpId, dstAddress); // Exit Safe to external address   ```",
    "details": "Tracks Safe ownership, permissions, and state via a double-linked list per user. Interacts with SafeEngine      to perform collateral and debt operations through CdpHandler proxies. Supports Safe creation, ownership transfer,      collateral/debt modification, and Safe merging. This contract is a fork of MakerDAO’s DssCdpManager.sol, adapted      for StableUnit with a custom interface and simplified permission model.",
    "kind": "dev",
    "methods": {
      "allowHandler(address,uint256)": {
        "details": "Updates `handlerCan` mapping for the caller’s handler.",
        "params": {
          "ok": "Permission status (1 for allowed, 0 for denied).",
          "usr": "Address to grant/revoke permission."
        }
      },
      "cdpAllow(uint256,address,uint256)": {
        "details": "Updates `cdpCan` mapping for the Safe’s owner. Requires caller to be authorized.",
        "params": {
          "cdp": "Safe ID to modify permissions for.",
          "ok": "Permission status (1 for allowed, 0 for denied).",
          "usr": "Address to grant/revoke permission."
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "enter(address,uint256)": {
        "details": "Transfers all collateral and debt from the source address to the Safe’s handler. Requires caller to be authorized for both source handler and Safe.",
        "params": {
          "cdp": "Safe ID to receive collateral and debt.",
          "src": "Source address to transfer collateral and debt from."
        }
      },
      "initialize(address)": {
        "details": "Sets the SafeEngine reference for Safe operations.",
        "params": {
          "safeEngine_": "Address of the SafeEngine contract."
        }
      },
      "modifySAFECollateralization(uint256,int256,int256)": {
        "details": "Calls SafeEngine’s `modifySAFECollateralization` using the Safe’s handler. Requires caller to be authorized.",
        "params": {
          "cdp": "Safe ID to modify.",
          "deltaCollateral": "Amount to add (positive) or remove (negative) collateral [wad].",
          "deltaDebt": "Amount to add (positive) or remove (negative) debt [wad]."
        }
      },
      "moveSAFE(uint256,uint256)": {
        "details": "Transfers all collateral and debt from the source Safe to the destination Safe. Requires both Safes to have the same collateral type and caller to be authorized for both.",
        "params": {
          "cdpDst": "Destination Safe ID.",
          "cdpSrc": "Source Safe ID."
        }
      },
      "openSafe(bytes32,address)": {
        "details": "Deploys a CdpHandler, assigns ownership, and updates the double-linked list.      Emits a `NewCdp` event.",
        "params": {
          "collateralType": "Unique identifier for the collateral type (e.g., \"ETH-A\").",
          "usr": "Address to own the new Safe."
        },
        "returns": {
          "_0": "Safe ID (CDP ID) of the created Safe."
        }
      },
      "quit(uint256,address)": {
        "details": "Transfers all collateral and debt to the destination address via SafeEngine. Requires caller to be authorized for both Safe and destination handler.",
        "params": {
          "cdp": "Safe ID to exit.",
          "dst": "Destination address to receive collateral and debt."
        }
      },
      "transferCollateral(bytes32,uint256,address,uint256)": {
        "details": "Calls SafeEngine’s `transferCollateral`. Requires caller to be authorized.",
        "params": {
          "cdp": "Safe ID to transfer collateral from.",
          "dst": "Destination address to receive collateral.",
          "ilk": "Collateral type to use for transfer.",
          "wad": "Amount of collateral to transfer [wad]."
        }
      },
      "transferCollateral(uint256,address,uint256)": {
        "details": "Calls SafeEngine’s `transferCollateral`. Requires caller to be authorized.",
        "params": {
          "cdp": "Safe ID to transfer collateral from.",
          "dst": "Destination address to receive collateral.",
          "wad": "Amount of collateral to transfer [wad]."
        }
      },
      "transferInternalCoins(uint256,address,uint256)": {
        "details": "Calls SafeEngine’s `transferInternalCoins`. Requires caller to be authorized.",
        "params": {
          "cdp": "Safe ID to transfer coins from.",
          "dst": "Destination address to receive coins.",
          "rad": "Amount of StablePro coins to transfer [rad]."
        }
      },
      "transferSafeOwnership(uint256,address)": {
        "details": "Updates the double-linked list for both the old and new owners. Requires caller to be authorized.",
        "params": {
          "cdp": "Safe ID to transfer.",
          "dst": "New owner address."
        }
      }
    },
    "title": "DssCdpManager",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "allowHandler(address,uint256)": {
        "notice": "Grants or revokes permission for an address to modify the caller’s CdpHandler."
      },
      "cdpAllow(uint256,address,uint256)": {
        "notice": "Grants or revokes permission for an address to modify a Safe."
      },
      "cdpCan(address,uint256,address)": {
        "notice": "Maps owners to Safe IDs to allowed addresses with modification permissions."
      },
      "cdpCount(address)": {
        "notice": "Maps owner addresses to their total number of Safes."
      },
      "cdpi()": {
        "notice": "Auto-incrementing counter for Safe IDs (CDP IDs)."
      },
      "collateralTypes(uint256)": {
        "notice": "Maps Safe IDs to their collateral types (e.g., \"ETH-A\")."
      },
      "enter(address,uint256)": {
        "notice": "Imports collateral and debt from an external address into a Safe."
      },
      "firstCdpId(address)": {
        "notice": "Maps owner addresses to their first Safe ID."
      },
      "handlerCan(address,address)": {
        "notice": "Maps CdpHandler addresses to allowed addresses with modification permissions."
      },
      "initialize(address)": {
        "notice": "Initializes the DssCdpManager with a SafeEngine address."
      },
      "lastCdpId(address)": {
        "notice": "Maps owner addresses to their last Safe ID."
      },
      "list(uint256)": {
        "notice": "Maps Safe IDs to their previous and next IDs in the owner’s double-linked list."
      },
      "modifySAFECollateralization(uint256,int256,int256)": {
        "notice": "Modifies a Safe’s collateral and debt through SafeEngine."
      },
      "moveSAFE(uint256,uint256)": {
        "notice": "Merges collateral and debt from one Safe to another."
      },
      "openSafe(bytes32,address)": {
        "notice": "Creates a new Safe for a user with a specified collateral type."
      },
      "owns(uint256)": {
        "notice": "Maps Safe IDs to their owner addresses."
      },
      "quit(uint256,address)": {
        "notice": "Exits a Safe’s collateral and debt to an external address."
      },
      "safeEngine()": {
        "notice": "Reference to the SafeEngine contract for Safe operations."
      },
      "safes(uint256)": {
        "notice": "Maps Safe IDs to their CdpHandler proxy addresses."
      },
      "transferCollateral(bytes32,uint256,address,uint256)": {
        "notice": "Transfers collateral from a Safe to an address using a specified collateral type."
      },
      "transferCollateral(uint256,address,uint256)": {
        "notice": "Transfers collateral from a Safe to an address using the Safe’s collateral type."
      },
      "transferInternalCoins(uint256,address,uint256)": {
        "notice": "Transfers internal StablePro coins from a Safe to an address."
      },
      "transferSafeOwnership(uint256,address)": {
        "notice": "Transfers ownership of a Safe to another address."
      }
    },
    "notice": "Manages Safes (CDPs) for users in the StableUnit protocol, facilitating Safe creation and operations.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1226,
        "contract": "contracts/makerdao/core/DssCdpManager.sol:DssCdpManager",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 1229,
        "contract": "contracts/makerdao/core/DssCdpManager.sol:DssCdpManager",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 46333,
        "contract": "contracts/makerdao/core/DssCdpManager.sol:DssCdpManager",
        "label": "safeEngine",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(ISafeEngine)53684"
      },
      {
        "astId": 46336,
        "contract": "contracts/makerdao/core/DssCdpManager.sol:DssCdpManager",
        "label": "cdpi",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 46341,
        "contract": "contracts/makerdao/core/DssCdpManager.sol:DssCdpManager",
        "label": "safes",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 46347,
        "contract": "contracts/makerdao/core/DssCdpManager.sol:DssCdpManager",
        "label": "list",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(List)53131_storage)"
      },
      {
        "astId": 46352,
        "contract": "contracts/makerdao/core/DssCdpManager.sol:DssCdpManager",
        "label": "owns",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 46357,
        "contract": "contracts/makerdao/core/DssCdpManager.sol:DssCdpManager",
        "label": "collateralTypes",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 46362,
        "contract": "contracts/makerdao/core/DssCdpManager.sol:DssCdpManager",
        "label": "firstCdpId",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 46367,
        "contract": "contracts/makerdao/core/DssCdpManager.sol:DssCdpManager",
        "label": "lastCdpId",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 46372,
        "contract": "contracts/makerdao/core/DssCdpManager.sol:DssCdpManager",
        "label": "cdpCount",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 46381,
        "contract": "contracts/makerdao/core/DssCdpManager.sol:DssCdpManager",
        "label": "cdpCan",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_uint256)))"
      },
      {
        "astId": 46388,
        "contract": "contracts/makerdao/core/DssCdpManager.sol:DssCdpManager",
        "label": "handlerCan",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ISafeEngine)53684": {
        "encoding": "inplace",
        "label": "contract ISafeEngine",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => mapping(address => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(List)53131_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IDssCdpManager.List)",
        "numberOfBytes": "32",
        "value": "t_struct(List)53131_storage"
      },
      "t_struct(List)53131_storage": {
        "encoding": "inplace",
        "label": "struct IDssCdpManager.List",
        "members": [
          {
            "astId": 53128,
            "contract": "contracts/makerdao/core/DssCdpManager.sol:DssCdpManager",
            "label": "prev",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 53130,
            "contract": "contracts/makerdao/core/DssCdpManager.sol:DssCdpManager",
            "label": "next",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}