{
  "address": "0xa7261Fc93Fc92C2Ab9CeB77CeBAba516915CdC53",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "BadAccessControlSingleton",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "BadDecimals",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BadMainUnderlyingToken",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "IsNotLP",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LPOracleNotReady",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "exchangeRate",
          "type": "int256"
        }
      ],
      "name": "MarketExchangeRateBelowOne",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MarketExpired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MarketProportionMustNotEqualOne",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "rateScalar",
          "type": "int256"
        }
      ],
      "name": "MarketRateScalarBelowZero",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "totalPt",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "totalAsset",
          "type": "int256"
        }
      ],
      "name": "MarketZeroTotalPtOrTotalAsset",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAdminError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAlerterError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyCDPAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyDAOError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyDisablerAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyLiquidationAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyMintAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyProxyActionsError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyRewardAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyRoleError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyVaultAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyVotingEscrowError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OracleNotReady",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "expected",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "received",
          "type": "uint256"
        }
      ],
      "name": "SlippageExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenOutNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroRecipient",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "onlyAuctionAccessRole",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "lp",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "mainUnderlyingToken",
          "type": "address"
        }
      ],
      "name": "TokenRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "lp",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "mainUnderlyingToken",
          "type": "address"
        }
      ],
      "name": "TokenRegisteredRepeat",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACCESS_CONTROL_SINGLETON",
      "outputs": [
        {
          "internalType": "contract ISuAccessControl",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ALERTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "AUCTION_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CDP_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DAO_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DISABLER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIQUIDATION_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINT_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ORACLE",
      "outputs": [
        {
          "internalType": "contract ISuOracleAggregator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PENDLE_ORACLE",
      "outputs": [
        {
          "internalType": "contract IPPYLpOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROXY_ACTIONS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARD_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TWAP_WINDOW",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VOTING_ESCROW_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getFiatPrice1e18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "cardinality",
          "type": "uint16"
        }
      ],
      "name": "increaseObservationCardinality",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_authControl",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pendleOracle",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "isAdapterLP",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lps",
      "outputs": [
        {
          "internalType": "contract IPMarket",
          "name": "market",
          "type": "address"
        },
        {
          "internalType": "contract IStandardizedYield",
          "name": "SY",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "mainUnderlyingToken",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lp",
          "type": "address"
        },
        {
          "internalType": "contract IPMarket",
          "name": "market",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "mainUnderlyingToken",
          "type": "address"
        }
      ],
      "name": "registerLP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_twapWindow",
          "type": "uint32"
        }
      ],
      "name": "setTwapWindow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxSlippageBps",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct WithdrawResult[]",
          "name": "results",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "8f84b6f1e4072e92a972e80f9a9e23c6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BadAccessControlSingleton\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"BadDecimals\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BadMainUnderlyingToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"IsNotLP\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LPOracleNotReady\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"exchangeRate\",\"type\":\"int256\"}],\"name\":\"MarketExchangeRateBelowOne\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MarketExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MarketProportionMustNotEqualOne\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"rateScalar\",\"type\":\"int256\"}],\"name\":\"MarketRateScalarBelowZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"totalPt\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"totalAsset\",\"type\":\"int256\"}],\"name\":\"MarketZeroTotalPtOrTotalAsset\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAdminError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAlerterError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyCDPAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyDAOError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyDisablerAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyLiquidationAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyMintAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyProxyActionsError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRewardAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRoleError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyVaultAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyVotingEscrowError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OracleNotReady\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"received\",\"type\":\"uint256\"}],\"name\":\"SlippageExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenOutNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroRecipient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"onlyAuctionAccessRole\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mainUnderlyingToken\",\"type\":\"address\"}],\"name\":\"TokenRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mainUnderlyingToken\",\"type\":\"address\"}],\"name\":\"TokenRegisteredRepeat\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACCESS_CONTROL_SINGLETON\",\"outputs\":[{\"internalType\":\"contract ISuAccessControl\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ALERTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AUCTION_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CDP_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAO_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DISABLER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDATION_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ORACLE\",\"outputs\":[{\"internalType\":\"contract ISuOracleAggregator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PENDLE_ORACLE\",\"outputs\":[{\"internalType\":\"contract IPPYLpOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROXY_ACTIONS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TWAP_WINDOW\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VOTING_ESCROW_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getFiatPrice1e18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"cardinality\",\"type\":\"uint16\"}],\"name\":\"increaseObservationCardinality\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_authControl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pendleOracle\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"isAdapterLP\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lps\",\"outputs\":[{\"internalType\":\"contract IPMarket\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"contract IStandardizedYield\",\"name\":\"SY\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mainUnderlyingToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"internalType\":\"contract IPMarket\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mainUnderlyingToken\",\"type\":\"address\"}],\"name\":\"registerLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_twapWindow\",\"type\":\"uint32\"}],\"name\":\"setTwapWindow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSlippageBps\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct WithdrawResult[]\",\"name\":\"results\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See ILPAdapter interface for full details.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"emergencyWithdraw(address[],address)\":{\"details\":\"This function is restricted to the admin and allows for emergency withdrawal of tokens.\",\"params\":{\"receiver\":\"Address of the receiver to receive the tokens.\",\"tokens\":\"List of tokens to withdraw.\"}},\"increaseObservationCardinality(address,uint16)\":{\"details\":\"This sets the target cardinality that the oracle will grow to as new observations are written. The actual cardinality will increase gradually with each new observation until it reaches this target. This must be called before registering an LP token to ensure enough price observations for TWAP calculations. After increaseObservationCardinality call you must wai at least 20 min to allow the oracle to accumulate enough price observations For 1200 seconds (20 min) cardinality = 1200 / blockTime. Also we can * 1.2 to have buffer for safety. For mainnet (12 seconds for block) cardinality = 120, for Arbitrum (0.3 sec for block) = 4800.\",\"params\":{\"cardinality\":\"The target number of observations the oracle should maintain\",\"market\":\"The address of the Pendle market whose oracle cardinality should be increased\"}},\"isAdapterLP(address)\":{\"params\":{\"asset\":\"- address of LP token to check*\"}},\"registerLP(address,address,address)\":{\"details\":\"In case when oracle is not ready, you should call market.increaseObservationsCardinalityNext(t)      and wait 20 minutes to register LP      [IMPORTANT] - Before register admin should check that SY contract don't have callbacks.      It should be very rare to have a SY with a callback function, but need to pay attention on it.\",\"params\":{\"lp\":\"address of LP token\",\"market\":\"market for LP token*\"}},\"setTwapWindow(uint32)\":{\"params\":{\"_twapWindow\":\"New TWAP window in seconds\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"title\":\"PendleLPAdapter\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"emergencyWithdraw(address[],address)\":{\"notice\":\"Withdraw tokens from the adapter in case of emergency.\"},\"getFiatPrice1e18(address)\":{\"notice\":\"Idea of this implementation was in Pendle example*\"},\"increaseObservationCardinality(address,uint16)\":{\"notice\":\"Helper function to increases the oracle observation cardinality for a Pendle market\"},\"isAdapterLP(address)\":{\"notice\":\"Returns if asset ig Balancer LP token, registered in our adapter\"},\"registerLP(address,address,address)\":{\"notice\":\"Register the given LP token address and set the LP info\"},\"setTwapWindow(uint32)\":{\"notice\":\"Set the TWAP window for price calculation\"},\"withdraw(address,uint256,uint256)\":{\"notice\":\"Pendle unwrap LP only to 1 token, but our ILPAdapter is more general, so we need to return here the array of WithdrawResult.*\"}},\"notice\":\"Adapter for Pendle LP token.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/exchange/contracts/periphery/contracts/adapters/Pendle/PendleLPAdapter.sol\":\"PendleLPAdapter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@pendle/core-v2/contracts/core/Market/MarketMathCore.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport \\\"../libraries/math/PMath.sol\\\";\\nimport \\\"../libraries/math/LogExpMath.sol\\\";\\n\\nimport \\\"../StandardizedYield/PYIndex.sol\\\";\\nimport \\\"../libraries/MiniHelpers.sol\\\";\\nimport \\\"../libraries/Errors.sol\\\";\\n\\nstruct MarketState {\\n    int256 totalPt;\\n    int256 totalSy;\\n    int256 totalLp;\\n    address treasury;\\n    /// immutable variables ///\\n    int256 scalarRoot;\\n    uint256 expiry;\\n    /// fee data ///\\n    uint256 lnFeeRateRoot;\\n    uint256 reserveFeePercent; // base 100\\n    /// last trade data ///\\n    uint256 lastLnImpliedRate;\\n}\\n\\n// params that are expensive to compute, therefore we pre-compute them\\nstruct MarketPreCompute {\\n    int256 rateScalar;\\n    int256 totalAsset;\\n    int256 rateAnchor;\\n    int256 feeRate;\\n}\\n\\n// solhint-disable ordering\\nlibrary MarketMathCore {\\n    using PMath for uint256;\\n    using PMath for int256;\\n    using LogExpMath for int256;\\n    using PYIndexLib for PYIndex;\\n\\n    int256 internal constant MINIMUM_LIQUIDITY = 10 ** 3;\\n    int256 internal constant PERCENTAGE_DECIMALS = 100;\\n    uint256 internal constant DAY = 86400;\\n    uint256 internal constant IMPLIED_RATE_TIME = 365 * DAY;\\n\\n    int256 internal constant MAX_MARKET_PROPORTION = (1e18 * 96) / 100;\\n\\n    using PMath for uint256;\\n    using PMath for int256;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                UINT FUNCTIONS TO PROXY TO CORE FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function addLiquidity(\\n        MarketState memory market,\\n        uint256 syDesired,\\n        uint256 ptDesired,\\n        uint256 blockTime\\n    ) internal pure returns (uint256 lpToReserve, uint256 lpToAccount, uint256 syUsed, uint256 ptUsed) {\\n        (int256 _lpToReserve, int256 _lpToAccount, int256 _syUsed, int256 _ptUsed) = addLiquidityCore(\\n            market,\\n            syDesired.Int(),\\n            ptDesired.Int(),\\n            blockTime\\n        );\\n\\n        lpToReserve = _lpToReserve.Uint();\\n        lpToAccount = _lpToAccount.Uint();\\n        syUsed = _syUsed.Uint();\\n        ptUsed = _ptUsed.Uint();\\n    }\\n\\n    function removeLiquidity(\\n        MarketState memory market,\\n        uint256 lpToRemove\\n    ) internal pure returns (uint256 netSyToAccount, uint256 netPtToAccount) {\\n        (int256 _syToAccount, int256 _ptToAccount) = removeLiquidityCore(market, lpToRemove.Int());\\n\\n        netSyToAccount = _syToAccount.Uint();\\n        netPtToAccount = _ptToAccount.Uint();\\n    }\\n\\n    function swapExactPtForSy(\\n        MarketState memory market,\\n        PYIndex index,\\n        uint256 exactPtToMarket,\\n        uint256 blockTime\\n    ) internal pure returns (uint256 netSyToAccount, uint256 netSyFee, uint256 netSyToReserve) {\\n        (int256 _netSyToAccount, int256 _netSyFee, int256 _netSyToReserve) = executeTradeCore(\\n            market,\\n            index,\\n            exactPtToMarket.neg(),\\n            blockTime\\n        );\\n\\n        netSyToAccount = _netSyToAccount.Uint();\\n        netSyFee = _netSyFee.Uint();\\n        netSyToReserve = _netSyToReserve.Uint();\\n    }\\n\\n    function swapSyForExactPt(\\n        MarketState memory market,\\n        PYIndex index,\\n        uint256 exactPtToAccount,\\n        uint256 blockTime\\n    ) internal pure returns (uint256 netSyToMarket, uint256 netSyFee, uint256 netSyToReserve) {\\n        (int256 _netSyToAccount, int256 _netSyFee, int256 _netSyToReserve) = executeTradeCore(\\n            market,\\n            index,\\n            exactPtToAccount.Int(),\\n            blockTime\\n        );\\n\\n        netSyToMarket = _netSyToAccount.neg().Uint();\\n        netSyFee = _netSyFee.Uint();\\n        netSyToReserve = _netSyToReserve.Uint();\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    CORE FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function addLiquidityCore(\\n        MarketState memory market,\\n        int256 syDesired,\\n        int256 ptDesired,\\n        uint256 blockTime\\n    ) internal pure returns (int256 lpToReserve, int256 lpToAccount, int256 syUsed, int256 ptUsed) {\\n        /// ------------------------------------------------------------\\n        /// CHECKS\\n        /// ------------------------------------------------------------\\n        if (syDesired == 0 || ptDesired == 0) revert Errors.MarketZeroAmountsInput();\\n        if (MiniHelpers.isExpired(market.expiry, blockTime)) revert Errors.MarketExpired();\\n\\n        /// ------------------------------------------------------------\\n        /// MATH\\n        /// ------------------------------------------------------------\\n        if (market.totalLp == 0) {\\n            lpToAccount = PMath.sqrt((syDesired * ptDesired).Uint()).Int() - MINIMUM_LIQUIDITY;\\n            lpToReserve = MINIMUM_LIQUIDITY;\\n            syUsed = syDesired;\\n            ptUsed = ptDesired;\\n        } else {\\n            int256 netLpByPt = (ptDesired * market.totalLp) / market.totalPt;\\n            int256 netLpBySy = (syDesired * market.totalLp) / market.totalSy;\\n            if (netLpByPt < netLpBySy) {\\n                lpToAccount = netLpByPt;\\n                ptUsed = ptDesired;\\n                syUsed = (market.totalSy * lpToAccount).rawDivUp(market.totalLp);\\n            } else {\\n                lpToAccount = netLpBySy;\\n                syUsed = syDesired;\\n                ptUsed = (market.totalPt * lpToAccount).rawDivUp(market.totalLp);\\n            }\\n        }\\n\\n        if (lpToAccount <= 0 || syUsed <= 0 || ptUsed <= 0) revert Errors.MarketZeroAmountsOutput();\\n\\n        /// ------------------------------------------------------------\\n        /// WRITE\\n        /// ------------------------------------------------------------\\n        market.totalSy += syUsed;\\n        market.totalPt += ptUsed;\\n        market.totalLp += lpToAccount + lpToReserve;\\n    }\\n\\n    function removeLiquidityCore(\\n        MarketState memory market,\\n        int256 lpToRemove\\n    ) internal pure returns (int256 netSyToAccount, int256 netPtToAccount) {\\n        /// ------------------------------------------------------------\\n        /// CHECKS\\n        /// ------------------------------------------------------------\\n        if (lpToRemove == 0) revert Errors.MarketZeroAmountsInput();\\n\\n        /// ------------------------------------------------------------\\n        /// MATH\\n        /// ------------------------------------------------------------\\n        netSyToAccount = (lpToRemove * market.totalSy) / market.totalLp;\\n        netPtToAccount = (lpToRemove * market.totalPt) / market.totalLp;\\n\\n        if (netSyToAccount == 0 && netPtToAccount == 0) revert Errors.MarketZeroAmountsOutput();\\n\\n        /// ------------------------------------------------------------\\n        /// WRITE\\n        /// ------------------------------------------------------------\\n        market.totalLp = market.totalLp.subNoNeg(lpToRemove);\\n        market.totalPt = market.totalPt.subNoNeg(netPtToAccount);\\n        market.totalSy = market.totalSy.subNoNeg(netSyToAccount);\\n    }\\n\\n    function executeTradeCore(\\n        MarketState memory market,\\n        PYIndex index,\\n        int256 netPtToAccount,\\n        uint256 blockTime\\n    ) internal pure returns (int256 netSyToAccount, int256 netSyFee, int256 netSyToReserve) {\\n        /// ------------------------------------------------------------\\n        /// CHECKS\\n        /// ------------------------------------------------------------\\n        if (MiniHelpers.isExpired(market.expiry, blockTime)) revert Errors.MarketExpired();\\n        if (market.totalPt <= netPtToAccount)\\n            revert Errors.MarketInsufficientPtForTrade(market.totalPt, netPtToAccount);\\n\\n        /// ------------------------------------------------------------\\n        /// MATH\\n        /// ------------------------------------------------------------\\n        MarketPreCompute memory comp = getMarketPreCompute(market, index, blockTime);\\n\\n        (netSyToAccount, netSyFee, netSyToReserve) = calcTrade(market, comp, index, netPtToAccount);\\n\\n        /// ------------------------------------------------------------\\n        /// WRITE\\n        /// ------------------------------------------------------------\\n        _setNewMarketStateTrade(market, comp, index, netPtToAccount, netSyToAccount, netSyToReserve, blockTime);\\n    }\\n\\n    function getMarketPreCompute(\\n        MarketState memory market,\\n        PYIndex index,\\n        uint256 blockTime\\n    ) internal pure returns (MarketPreCompute memory res) {\\n        if (MiniHelpers.isExpired(market.expiry, blockTime)) revert Errors.MarketExpired();\\n\\n        uint256 timeToExpiry = market.expiry - blockTime;\\n\\n        res.rateScalar = _getRateScalar(market, timeToExpiry);\\n        res.totalAsset = index.syToAsset(market.totalSy);\\n\\n        if (market.totalPt == 0 || res.totalAsset == 0)\\n            revert Errors.MarketZeroTotalPtOrTotalAsset(market.totalPt, res.totalAsset);\\n\\n        res.rateAnchor = _getRateAnchor(\\n            market.totalPt,\\n            market.lastLnImpliedRate,\\n            res.totalAsset,\\n            res.rateScalar,\\n            timeToExpiry\\n        );\\n        res.feeRate = _getExchangeRateFromImpliedRate(market.lnFeeRateRoot, timeToExpiry);\\n    }\\n\\n    function calcTrade(\\n        MarketState memory market,\\n        MarketPreCompute memory comp,\\n        PYIndex index,\\n        int256 netPtToAccount\\n    ) internal pure returns (int256 netSyToAccount, int256 netSyFee, int256 netSyToReserve) {\\n        int256 preFeeExchangeRate = _getExchangeRate(\\n            market.totalPt,\\n            comp.totalAsset,\\n            comp.rateScalar,\\n            comp.rateAnchor,\\n            netPtToAccount\\n        );\\n\\n        int256 preFeeAssetToAccount = netPtToAccount.divDown(preFeeExchangeRate).neg();\\n        int256 fee = comp.feeRate;\\n\\n        if (netPtToAccount > 0) {\\n            int256 postFeeExchangeRate = preFeeExchangeRate.divDown(fee);\\n            if (postFeeExchangeRate < PMath.IONE) revert Errors.MarketExchangeRateBelowOne(postFeeExchangeRate);\\n\\n            fee = preFeeAssetToAccount.mulDown(PMath.IONE - fee);\\n        } else {\\n            fee = ((preFeeAssetToAccount * (PMath.IONE - fee)) / fee).neg();\\n        }\\n\\n        int256 netAssetToReserve = (fee * market.reserveFeePercent.Int()) / PERCENTAGE_DECIMALS;\\n        int256 netAssetToAccount = preFeeAssetToAccount - fee;\\n\\n        netSyToAccount = netAssetToAccount < 0\\n            ? index.assetToSyUp(netAssetToAccount)\\n            : index.assetToSy(netAssetToAccount);\\n        netSyFee = index.assetToSy(fee);\\n        netSyToReserve = index.assetToSy(netAssetToReserve);\\n    }\\n\\n    function _setNewMarketStateTrade(\\n        MarketState memory market,\\n        MarketPreCompute memory comp,\\n        PYIndex index,\\n        int256 netPtToAccount,\\n        int256 netSyToAccount,\\n        int256 netSyToReserve,\\n        uint256 blockTime\\n    ) internal pure {\\n        uint256 timeToExpiry = market.expiry - blockTime;\\n\\n        market.totalPt = market.totalPt.subNoNeg(netPtToAccount);\\n        market.totalSy = market.totalSy.subNoNeg(netSyToAccount + netSyToReserve);\\n\\n        market.lastLnImpliedRate = _getLnImpliedRate(\\n            market.totalPt,\\n            index.syToAsset(market.totalSy),\\n            comp.rateScalar,\\n            comp.rateAnchor,\\n            timeToExpiry\\n        );\\n\\n        if (market.lastLnImpliedRate == 0) revert Errors.MarketZeroLnImpliedRate();\\n    }\\n\\n    function _getRateAnchor(\\n        int256 totalPt,\\n        uint256 lastLnImpliedRate,\\n        int256 totalAsset,\\n        int256 rateScalar,\\n        uint256 timeToExpiry\\n    ) internal pure returns (int256 rateAnchor) {\\n        int256 newExchangeRate = _getExchangeRateFromImpliedRate(lastLnImpliedRate, timeToExpiry);\\n\\n        if (newExchangeRate < PMath.IONE) revert Errors.MarketExchangeRateBelowOne(newExchangeRate);\\n\\n        {\\n            int256 proportion = totalPt.divDown(totalPt + totalAsset);\\n\\n            int256 lnProportion = _logProportion(proportion);\\n\\n            rateAnchor = newExchangeRate - lnProportion.divDown(rateScalar);\\n        }\\n    }\\n\\n    /// @notice Calculates the current market implied rate.\\n    /// @return lnImpliedRate the implied rate\\n    function _getLnImpliedRate(\\n        int256 totalPt,\\n        int256 totalAsset,\\n        int256 rateScalar,\\n        int256 rateAnchor,\\n        uint256 timeToExpiry\\n    ) internal pure returns (uint256 lnImpliedRate) {\\n        // This will check for exchange rates < PMath.IONE\\n        int256 exchangeRate = _getExchangeRate(totalPt, totalAsset, rateScalar, rateAnchor, 0);\\n\\n        // exchangeRate >= 1 so its ln >= 0\\n        uint256 lnRate = exchangeRate.ln().Uint();\\n\\n        lnImpliedRate = (lnRate * IMPLIED_RATE_TIME) / timeToExpiry;\\n    }\\n\\n    /// @notice Converts an implied rate to an exchange rate given a time to expiry. The\\n    /// formula is E = e^rt\\n    function _getExchangeRateFromImpliedRate(\\n        uint256 lnImpliedRate,\\n        uint256 timeToExpiry\\n    ) internal pure returns (int256 exchangeRate) {\\n        uint256 rt = (lnImpliedRate * timeToExpiry) / IMPLIED_RATE_TIME;\\n\\n        exchangeRate = LogExpMath.exp(rt.Int());\\n    }\\n\\n    function _getExchangeRate(\\n        int256 totalPt,\\n        int256 totalAsset,\\n        int256 rateScalar,\\n        int256 rateAnchor,\\n        int256 netPtToAccount\\n    ) internal pure returns (int256 exchangeRate) {\\n        int256 numerator = totalPt.subNoNeg(netPtToAccount);\\n\\n        int256 proportion = (numerator.divDown(totalPt + totalAsset));\\n\\n        if (proportion > MAX_MARKET_PROPORTION)\\n            revert Errors.MarketProportionTooHigh(proportion, MAX_MARKET_PROPORTION);\\n\\n        int256 lnProportion = _logProportion(proportion);\\n\\n        exchangeRate = lnProportion.divDown(rateScalar) + rateAnchor;\\n\\n        if (exchangeRate < PMath.IONE) revert Errors.MarketExchangeRateBelowOne(exchangeRate);\\n    }\\n\\n    function _logProportion(int256 proportion) internal pure returns (int256 res) {\\n        if (proportion == PMath.IONE) revert Errors.MarketProportionMustNotEqualOne();\\n\\n        int256 logitP = proportion.divDown(PMath.IONE - proportion);\\n\\n        res = logitP.ln();\\n    }\\n\\n    function _getRateScalar(MarketState memory market, uint256 timeToExpiry) internal pure returns (int256 rateScalar) {\\n        rateScalar = (market.scalarRoot * IMPLIED_RATE_TIME.Int()) / timeToExpiry.Int();\\n        if (rateScalar <= 0) revert Errors.MarketRateScalarBelowZero(rateScalar);\\n    }\\n\\n    function setInitialLnImpliedRate(\\n        MarketState memory market,\\n        PYIndex index,\\n        int256 initialAnchor,\\n        uint256 blockTime\\n    ) internal pure {\\n        /// ------------------------------------------------------------\\n        /// CHECKS\\n        /// ------------------------------------------------------------\\n        if (MiniHelpers.isExpired(market.expiry, blockTime)) revert Errors.MarketExpired();\\n\\n        /// ------------------------------------------------------------\\n        /// MATH\\n        /// ------------------------------------------------------------\\n        int256 totalAsset = index.syToAsset(market.totalSy);\\n        uint256 timeToExpiry = market.expiry - blockTime;\\n        int256 rateScalar = _getRateScalar(market, timeToExpiry);\\n\\n        /// ------------------------------------------------------------\\n        /// WRITE\\n        /// ------------------------------------------------------------\\n        market.lastLnImpliedRate = _getLnImpliedRate(\\n            market.totalPt,\\n            totalAsset,\\n            rateScalar,\\n            initialAnchor,\\n            timeToExpiry\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xc9229208355d2e853ebb026231f79625b73df3a9576e71dfe96a9a92b4e101e5\",\"license\":\"GPL-3.0-or-later\"},\"@pendle/core-v2/contracts/core/StandardizedYield/PYIndex.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\nimport \\\"../../interfaces/IPYieldToken.sol\\\";\\nimport \\\"../../interfaces/IPPrincipalToken.sol\\\";\\n\\nimport \\\"./SYUtils.sol\\\";\\nimport \\\"../libraries/math/PMath.sol\\\";\\n\\ntype PYIndex is uint256;\\n\\nlibrary PYIndexLib {\\n    using PMath for uint256;\\n    using PMath for int256;\\n\\n    function newIndex(IPYieldToken YT) internal returns (PYIndex) {\\n        return PYIndex.wrap(YT.pyIndexCurrent());\\n    }\\n\\n    function syToAsset(PYIndex index, uint256 syAmount) internal pure returns (uint256) {\\n        return SYUtils.syToAsset(PYIndex.unwrap(index), syAmount);\\n    }\\n\\n    function assetToSy(PYIndex index, uint256 assetAmount) internal pure returns (uint256) {\\n        return SYUtils.assetToSy(PYIndex.unwrap(index), assetAmount);\\n    }\\n\\n    function assetToSyUp(PYIndex index, uint256 assetAmount) internal pure returns (uint256) {\\n        return SYUtils.assetToSyUp(PYIndex.unwrap(index), assetAmount);\\n    }\\n\\n    function syToAssetUp(PYIndex index, uint256 syAmount) internal pure returns (uint256) {\\n        uint256 _index = PYIndex.unwrap(index);\\n        return SYUtils.syToAssetUp(_index, syAmount);\\n    }\\n\\n    function syToAsset(PYIndex index, int256 syAmount) internal pure returns (int256) {\\n        int256 sign = syAmount < 0 ? int256(-1) : int256(1);\\n        return sign * (SYUtils.syToAsset(PYIndex.unwrap(index), syAmount.abs())).Int();\\n    }\\n\\n    function assetToSy(PYIndex index, int256 assetAmount) internal pure returns (int256) {\\n        int256 sign = assetAmount < 0 ? int256(-1) : int256(1);\\n        return sign * (SYUtils.assetToSy(PYIndex.unwrap(index), assetAmount.abs())).Int();\\n    }\\n\\n    function assetToSyUp(PYIndex index, int256 assetAmount) internal pure returns (int256) {\\n        int256 sign = assetAmount < 0 ? int256(-1) : int256(1);\\n        return sign * (SYUtils.assetToSyUp(PYIndex.unwrap(index), assetAmount.abs())).Int();\\n    }\\n}\\n\",\"keccak256\":\"0x1d4bb00cc66f73f51eee668d9b0eb90981f5183f126b1226cd6f6260eafa1768\",\"license\":\"GPL-3.0-or-later\"},\"@pendle/core-v2/contracts/core/StandardizedYield/SYUtils.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nlibrary SYUtils {\\n    uint256 internal constant ONE = 1e18;\\n\\n    function syToAsset(uint256 exchangeRate, uint256 syAmount) internal pure returns (uint256) {\\n        return (syAmount * exchangeRate) / ONE;\\n    }\\n\\n    function syToAssetUp(uint256 exchangeRate, uint256 syAmount) internal pure returns (uint256) {\\n        return (syAmount * exchangeRate + ONE - 1) / ONE;\\n    }\\n\\n    function assetToSy(uint256 exchangeRate, uint256 assetAmount) internal pure returns (uint256) {\\n        return (assetAmount * ONE) / exchangeRate;\\n    }\\n\\n    function assetToSyUp(uint256 exchangeRate, uint256 assetAmount) internal pure returns (uint256) {\\n        return (assetAmount * ONE + exchangeRate - 1) / exchangeRate;\\n    }\\n}\\n\",\"keccak256\":\"0xd3bc20ce8f41cd07513beb669eda02f0c5e9cafb74406cd4c89019525399d4dd\",\"license\":\"GPL-3.0-or-later\"},\"@pendle/core-v2/contracts/core/libraries/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nlibrary Errors {\\n    // BulkSeller\\n    error BulkInsufficientSyForTrade(uint256 currentAmount, uint256 requiredAmount);\\n    error BulkInsufficientTokenForTrade(uint256 currentAmount, uint256 requiredAmount);\\n    error BulkInSufficientSyOut(uint256 actualSyOut, uint256 requiredSyOut);\\n    error BulkInSufficientTokenOut(uint256 actualTokenOut, uint256 requiredTokenOut);\\n    error BulkInsufficientSyReceived(uint256 actualBalance, uint256 requiredBalance);\\n    error BulkNotMaintainer();\\n    error BulkNotAdmin();\\n    error BulkSellerAlreadyExisted(address token, address SY, address bulk);\\n    error BulkSellerInvalidToken(address token, address SY);\\n    error BulkBadRateTokenToSy(uint256 actualRate, uint256 currentRate, uint256 eps);\\n    error BulkBadRateSyToToken(uint256 actualRate, uint256 currentRate, uint256 eps);\\n\\n    // APPROX\\n    error ApproxFail();\\n    error ApproxParamsInvalid(uint256 guessMin, uint256 guessMax, uint256 eps);\\n    error ApproxBinarySearchInputInvalid(\\n        uint256 approxGuessMin,\\n        uint256 approxGuessMax,\\n        uint256 minGuessMin,\\n        uint256 maxGuessMax\\n    );\\n\\n    // MARKET + MARKET MATH CORE\\n    error MarketExpired();\\n    error MarketZeroAmountsInput();\\n    error MarketZeroAmountsOutput();\\n    error MarketZeroLnImpliedRate();\\n    error MarketInsufficientPtForTrade(int256 currentAmount, int256 requiredAmount);\\n    error MarketInsufficientPtReceived(uint256 actualBalance, uint256 requiredBalance);\\n    error MarketInsufficientSyReceived(uint256 actualBalance, uint256 requiredBalance);\\n    error MarketZeroTotalPtOrTotalAsset(int256 totalPt, int256 totalAsset);\\n    error MarketExchangeRateBelowOne(int256 exchangeRate);\\n    error MarketProportionMustNotEqualOne();\\n    error MarketRateScalarBelowZero(int256 rateScalar);\\n    error MarketScalarRootBelowZero(int256 scalarRoot);\\n    error MarketProportionTooHigh(int256 proportion, int256 maxProportion);\\n\\n    error OracleUninitialized();\\n    error OracleTargetTooOld(uint32 target, uint32 oldest);\\n    error OracleZeroCardinality();\\n\\n    error MarketFactoryExpiredPt();\\n    error MarketFactoryInvalidPt();\\n    error MarketFactoryMarketExists();\\n\\n    error MarketFactoryLnFeeRateRootTooHigh(uint80 lnFeeRateRoot, uint256 maxLnFeeRateRoot);\\n    error MarketFactoryOverriddenFeeTooHigh(uint80 overriddenFee, uint256 marketLnFeeRateRoot);\\n    error MarketFactoryReserveFeePercentTooHigh(uint8 reserveFeePercent, uint8 maxReserveFeePercent);\\n    error MarketFactoryZeroTreasury();\\n    error MarketFactoryInitialAnchorTooLow(int256 initialAnchor, int256 minInitialAnchor);\\n    error MFNotPendleMarket(address addr);\\n\\n    // ROUTER\\n    error RouterInsufficientLpOut(uint256 actualLpOut, uint256 requiredLpOut);\\n    error RouterInsufficientSyOut(uint256 actualSyOut, uint256 requiredSyOut);\\n    error RouterInsufficientPtOut(uint256 actualPtOut, uint256 requiredPtOut);\\n    error RouterInsufficientYtOut(uint256 actualYtOut, uint256 requiredYtOut);\\n    error RouterInsufficientPYOut(uint256 actualPYOut, uint256 requiredPYOut);\\n    error RouterInsufficientTokenOut(uint256 actualTokenOut, uint256 requiredTokenOut);\\n    error RouterInsufficientSyRepay(uint256 actualSyRepay, uint256 requiredSyRepay);\\n    error RouterInsufficientPtRepay(uint256 actualPtRepay, uint256 requiredPtRepay);\\n    error RouterNotAllSyUsed(uint256 netSyDesired, uint256 netSyUsed);\\n\\n    error RouterTimeRangeZero();\\n    error RouterCallbackNotPendleMarket(address caller);\\n    error RouterInvalidAction(bytes4 selector);\\n    error RouterInvalidFacet(address facet);\\n\\n    error RouterKyberSwapDataZero();\\n\\n    error SimulationResults(bool success, bytes res);\\n\\n    // YIELD CONTRACT\\n    error YCExpired();\\n    error YCNotExpired();\\n    error YieldContractInsufficientSy(uint256 actualSy, uint256 requiredSy);\\n    error YCNothingToRedeem();\\n    error YCPostExpiryDataNotSet();\\n    error YCNoFloatingSy();\\n\\n    // YieldFactory\\n    error YCFactoryInvalidExpiry();\\n    error YCFactoryYieldContractExisted();\\n    error YCFactoryZeroExpiryDivisor();\\n    error YCFactoryZeroTreasury();\\n    error YCFactoryInterestFeeRateTooHigh(uint256 interestFeeRate, uint256 maxInterestFeeRate);\\n    error YCFactoryRewardFeeRateTooHigh(uint256 newRewardFeeRate, uint256 maxRewardFeeRate);\\n\\n    // SY\\n    error SYInvalidTokenIn(address token);\\n    error SYInvalidTokenOut(address token);\\n    error SYZeroDeposit();\\n    error SYZeroRedeem();\\n    error SYInsufficientSharesOut(uint256 actualSharesOut, uint256 requiredSharesOut);\\n    error SYInsufficientTokenOut(uint256 actualTokenOut, uint256 requiredTokenOut);\\n\\n    // SY-specific\\n    error SYQiTokenMintFailed(uint256 errCode);\\n    error SYQiTokenRedeemFailed(uint256 errCode);\\n    error SYQiTokenRedeemRewardsFailed(uint256 rewardAccruedType0, uint256 rewardAccruedType1);\\n    error SYQiTokenBorrowRateTooHigh(uint256 borrowRate, uint256 borrowRateMax);\\n\\n    error SYCurveInvalidPid();\\n    error SYCurve3crvPoolNotFound();\\n\\n    error SYApeDepositAmountTooSmall(uint256 amountDeposited);\\n    error SYBalancerInvalidPid();\\n    error SYInvalidRewardToken(address token);\\n\\n    error SYStargateRedeemCapExceeded(uint256 amountLpDesired, uint256 amountLpRedeemable);\\n\\n    error SYBalancerReentrancy();\\n\\n    error NotFromTrustedRemote(uint16 srcChainId, bytes path);\\n\\n    error ApxETHNotEnoughBuffer();\\n\\n    // Liquidity Mining\\n    error VCInactivePool(address pool);\\n    error VCPoolAlreadyActive(address pool);\\n    error VCZeroVePendle(address user);\\n    error VCExceededMaxWeight(uint256 totalWeight, uint256 maxWeight);\\n    error VCEpochNotFinalized(uint256 wTime);\\n    error VCPoolAlreadyAddAndRemoved(address pool);\\n\\n    error VEInvalidNewExpiry(uint256 newExpiry);\\n    error VEExceededMaxLockTime();\\n    error VEInsufficientLockTime();\\n    error VENotAllowedReduceExpiry();\\n    error VEZeroAmountLocked();\\n    error VEPositionNotExpired();\\n    error VEZeroPosition();\\n    error VEZeroSlope(uint128 bias, uint128 slope);\\n    error VEReceiveOldSupply(uint256 msgTime);\\n\\n    error GCNotPendleMarket(address caller);\\n    error GCNotVotingController(address caller);\\n\\n    error InvalidWTime(uint256 wTime);\\n    error ExpiryInThePast(uint256 expiry);\\n    error ChainNotSupported(uint256 chainId);\\n\\n    error FDTotalAmountFundedNotMatch(uint256 actualTotalAmount, uint256 expectedTotalAmount);\\n    error FDEpochLengthMismatch();\\n    error FDInvalidPool(address pool);\\n    error FDPoolAlreadyExists(address pool);\\n    error FDInvalidNewFinishedEpoch(uint256 oldFinishedEpoch, uint256 newFinishedEpoch);\\n    error FDInvalidStartEpoch(uint256 startEpoch);\\n    error FDInvalidWTimeFund(uint256 lastFunded, uint256 wTime);\\n    error FDFutureFunding(uint256 lastFunded, uint256 currentWTime);\\n\\n    error BDInvalidEpoch(uint256 epoch, uint256 startTime);\\n\\n    // Cross-Chain\\n    error MsgNotFromSendEndpoint(uint16 srcChainId, bytes path);\\n    error MsgNotFromReceiveEndpoint(address sender);\\n    error InsufficientFeeToSendMsg(uint256 currentFee, uint256 requiredFee);\\n    error ApproxDstExecutionGasNotSet();\\n    error InvalidRetryData();\\n\\n    // GENERIC MSG\\n    error ArrayLengthMismatch();\\n    error ArrayEmpty();\\n    error ArrayOutOfBounds();\\n    error ZeroAddress();\\n    error FailedToSendEther();\\n    error InvalidMerkleProof();\\n\\n    error OnlyLayerZeroEndpoint();\\n    error OnlyYT();\\n    error OnlyYCFactory();\\n    error OnlyWhitelisted();\\n\\n    // Swap Aggregator\\n    error SAInsufficientTokenIn(address tokenIn, uint256 amountExpected, uint256 amountActual);\\n    error UnsupportedSelector(uint256 aggregatorType, bytes4 selector);\\n}\\n\",\"keccak256\":\"0xbebc9cfdfaa88bbf1e53d31c5f5c89265dac4c7ba31920d98b7b7bbd74c4345d\",\"license\":\"GPL-3.0-or-later\"},\"@pendle/core-v2/contracts/core/libraries/MiniHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nlibrary MiniHelpers {\\n    function isCurrentlyExpired(uint256 expiry) internal view returns (bool) {\\n        return (expiry <= block.timestamp);\\n    }\\n\\n    function isExpired(uint256 expiry, uint256 blockTime) internal pure returns (bool) {\\n        return (expiry <= blockTime);\\n    }\\n\\n    function isTimeInThePast(uint256 timestamp) internal view returns (bool) {\\n        return (timestamp <= block.timestamp); // same definition as isCurrentlyExpired\\n    }\\n}\\n\",\"keccak256\":\"0xfcd8768e3e9970df6d6375ff3f43caca7fa3a02cc43afd8f3e56bbde463a3bf5\",\"license\":\"GPL-3.0-or-later\"},\"@pendle/core-v2/contracts/core/libraries/math/LogExpMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\\n// documentation files (the \\u201cSoftware\\u201d), to deal in the Software without restriction, including without limitation the\\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\\n// permit persons to whom the Software is furnished to do so, subject to the following conditions:\\n\\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the\\n// Software.\\n\\n// THE SOFTWARE IS PROVIDED \\u201cAS IS\\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\\n// WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n\\npragma solidity ^0.8.0;\\n\\n/* solhint-disable */\\n\\n/**\\n * @dev Exponentiation and logarithm functions for 18 decimal fixed point numbers (both base and exponent/argument).\\n *\\n * Exponentiation and logarithm with arbitrary bases (x^y and log_x(y)) are implemented by conversion to natural\\n * exponentiation and logarithm (where the base is Euler's number).\\n *\\n * @author Fernando Martinelli - @fernandomartinelli\\n * @author Sergio Yuhjtman - @sergioyuhjtman\\n * @author Daniel Fernandez - @dmf7z\\n */\\nlibrary LogExpMath {\\n    // All fixed point multiplications and divisions are inlined. This means we need to divide by ONE when multiplying\\n    // two numbers, and multiply by ONE when dividing them.\\n\\n    // All arguments and return values are 18 decimal fixed point numbers.\\n    int256 constant ONE_18 = 1e18;\\n\\n    // Internally, intermediate values are computed with higher precision as 20 decimal fixed point numbers, and in the\\n    // case of ln36, 36 decimals.\\n    int256 constant ONE_20 = 1e20;\\n    int256 constant ONE_36 = 1e36;\\n\\n    // The domain of natural exponentiation is bound by the word size and number of decimals used.\\n    //\\n    // Because internally the result will be stored using 20 decimals, the largest possible result is\\n    // (2^255 - 1) / 10^20, which makes the largest exponent ln((2^255 - 1) / 10^20) = 130.700829182905140221.\\n    // The smallest possible result is 10^(-18), which makes largest negative argument\\n    // ln(10^(-18)) = -41.446531673892822312.\\n    // We use 130.0 and -41.0 to have some safety margin.\\n    int256 constant MAX_NATURAL_EXPONENT = 130e18;\\n    int256 constant MIN_NATURAL_EXPONENT = -41e18;\\n\\n    // Bounds for ln_36's argument. Both ln(0.9) and ln(1.1) can be represented with 36 decimal places in a fixed point\\n    // 256 bit integer.\\n    int256 constant LN_36_LOWER_BOUND = ONE_18 - 1e17;\\n    int256 constant LN_36_UPPER_BOUND = ONE_18 + 1e17;\\n\\n    uint256 constant MILD_EXPONENT_BOUND = 2 ** 254 / uint256(ONE_20);\\n\\n    // 18 decimal constants\\n    int256 constant x0 = 128000000000000000000; // 2\\u02c67\\n    int256 constant a0 = 38877084059945950922200000000000000000000000000000000000; // e\\u02c6(x0) (no decimals)\\n    int256 constant x1 = 64000000000000000000; // 2\\u02c66\\n    int256 constant a1 = 6235149080811616882910000000; // e\\u02c6(x1) (no decimals)\\n\\n    // 20 decimal constants\\n    int256 constant x2 = 3200000000000000000000; // 2\\u02c65\\n    int256 constant a2 = 7896296018268069516100000000000000; // e\\u02c6(x2)\\n    int256 constant x3 = 1600000000000000000000; // 2\\u02c64\\n    int256 constant a3 = 888611052050787263676000000; // e\\u02c6(x3)\\n    int256 constant x4 = 800000000000000000000; // 2\\u02c63\\n    int256 constant a4 = 298095798704172827474000; // e\\u02c6(x4)\\n    int256 constant x5 = 400000000000000000000; // 2\\u02c62\\n    int256 constant a5 = 5459815003314423907810; // e\\u02c6(x5)\\n    int256 constant x6 = 200000000000000000000; // 2\\u02c61\\n    int256 constant a6 = 738905609893065022723; // e\\u02c6(x6)\\n    int256 constant x7 = 100000000000000000000; // 2\\u02c60\\n    int256 constant a7 = 271828182845904523536; // e\\u02c6(x7)\\n    int256 constant x8 = 50000000000000000000; // 2\\u02c6-1\\n    int256 constant a8 = 164872127070012814685; // e\\u02c6(x8)\\n    int256 constant x9 = 25000000000000000000; // 2\\u02c6-2\\n    int256 constant a9 = 128402541668774148407; // e\\u02c6(x9)\\n    int256 constant x10 = 12500000000000000000; // 2\\u02c6-3\\n    int256 constant a10 = 113314845306682631683; // e\\u02c6(x10)\\n    int256 constant x11 = 6250000000000000000; // 2\\u02c6-4\\n    int256 constant a11 = 106449445891785942956; // e\\u02c6(x11)\\n\\n    /**\\n     * @dev Natural exponentiation (e^x) with signed 18 decimal fixed point exponent.\\n     *\\n     * Reverts if `x` is smaller than MIN_NATURAL_EXPONENT, or larger than `MAX_NATURAL_EXPONENT`.\\n     */\\n    function exp(int256 x) internal pure returns (int256) {\\n        unchecked {\\n            require(x >= MIN_NATURAL_EXPONENT && x <= MAX_NATURAL_EXPONENT, \\\"Invalid exponent\\\");\\n\\n            if (x < 0) {\\n                // We only handle positive exponents: e^(-x) is computed as 1 / e^x. We can safely make x positive since it\\n                // fits in the signed 256 bit range (as it is larger than MIN_NATURAL_EXPONENT).\\n                // Fixed point division requires multiplying by ONE_18.\\n                return ((ONE_18 * ONE_18) / exp(-x));\\n            }\\n\\n            // First, we use the fact that e^(x+y) = e^x * e^y to decompose x into a sum of powers of two, which we call x_n,\\n            // where x_n == 2^(7 - n), and e^x_n = a_n has been precomputed. We choose the first x_n, x0, to equal 2^7\\n            // because all larger powers are larger than MAX_NATURAL_EXPONENT, and therefore not present in the\\n            // decomposition.\\n            // At the end of this process we will have the product of all e^x_n = a_n that apply, and the remainder of this\\n            // decomposition, which will be lower than the smallest x_n.\\n            // exp(x) = k_0 * a_0 * k_1 * a_1 * ... + k_n * a_n * exp(remainder), where each k_n equals either 0 or 1.\\n            // We mutate x by subtracting x_n, making it the remainder of the decomposition.\\n\\n            // The first two a_n (e^(2^7) and e^(2^6)) are too large if stored as 18 decimal numbers, and could cause\\n            // intermediate overflows. Instead we store them as plain integers, with 0 decimals.\\n            // Additionally, x0 + x1 is larger than MAX_NATURAL_EXPONENT, which means they will not both be present in the\\n            // decomposition.\\n\\n            // For each x_n, we test if that term is present in the decomposition (if x is larger than it), and if so deduct\\n            // it and compute the accumulated product.\\n\\n            int256 firstAN;\\n            if (x >= x0) {\\n                x -= x0;\\n                firstAN = a0;\\n            } else if (x >= x1) {\\n                x -= x1;\\n                firstAN = a1;\\n            } else {\\n                firstAN = 1; // One with no decimal places\\n            }\\n\\n            // We now transform x into a 20 decimal fixed point number, to have enhanced precision when computing the\\n            // smaller terms.\\n            x *= 100;\\n\\n            // `product` is the accumulated product of all a_n (except a0 and a1), which starts at 20 decimal fixed point\\n            // one. Recall that fixed point multiplication requires dividing by ONE_20.\\n            int256 product = ONE_20;\\n\\n            if (x >= x2) {\\n                x -= x2;\\n                product = (product * a2) / ONE_20;\\n            }\\n            if (x >= x3) {\\n                x -= x3;\\n                product = (product * a3) / ONE_20;\\n            }\\n            if (x >= x4) {\\n                x -= x4;\\n                product = (product * a4) / ONE_20;\\n            }\\n            if (x >= x5) {\\n                x -= x5;\\n                product = (product * a5) / ONE_20;\\n            }\\n            if (x >= x6) {\\n                x -= x6;\\n                product = (product * a6) / ONE_20;\\n            }\\n            if (x >= x7) {\\n                x -= x7;\\n                product = (product * a7) / ONE_20;\\n            }\\n            if (x >= x8) {\\n                x -= x8;\\n                product = (product * a8) / ONE_20;\\n            }\\n            if (x >= x9) {\\n                x -= x9;\\n                product = (product * a9) / ONE_20;\\n            }\\n\\n            // x10 and x11 are unnecessary here since we have high enough precision already.\\n\\n            // Now we need to compute e^x, where x is small (in particular, it is smaller than x9). We use the Taylor series\\n            // expansion for e^x: 1 + x + (x^2 / 2!) + (x^3 / 3!) + ... + (x^n / n!).\\n\\n            int256 seriesSum = ONE_20; // The initial one in the sum, with 20 decimal places.\\n            int256 term; // Each term in the sum, where the nth term is (x^n / n!).\\n\\n            // The first term is simply x.\\n            term = x;\\n            seriesSum += term;\\n\\n            // Each term (x^n / n!) equals the previous one times x, divided by n. Since x is a fixed point number,\\n            // multiplying by it requires dividing by ONE_20, but dividing by the non-fixed point n values does not.\\n\\n            term = ((term * x) / ONE_20) / 2;\\n            seriesSum += term;\\n\\n            term = ((term * x) / ONE_20) / 3;\\n            seriesSum += term;\\n\\n            term = ((term * x) / ONE_20) / 4;\\n            seriesSum += term;\\n\\n            term = ((term * x) / ONE_20) / 5;\\n            seriesSum += term;\\n\\n            term = ((term * x) / ONE_20) / 6;\\n            seriesSum += term;\\n\\n            term = ((term * x) / ONE_20) / 7;\\n            seriesSum += term;\\n\\n            term = ((term * x) / ONE_20) / 8;\\n            seriesSum += term;\\n\\n            term = ((term * x) / ONE_20) / 9;\\n            seriesSum += term;\\n\\n            term = ((term * x) / ONE_20) / 10;\\n            seriesSum += term;\\n\\n            term = ((term * x) / ONE_20) / 11;\\n            seriesSum += term;\\n\\n            term = ((term * x) / ONE_20) / 12;\\n            seriesSum += term;\\n\\n            // 12 Taylor terms are sufficient for 18 decimal precision.\\n\\n            // We now have the first a_n (with no decimals), and the product of all other a_n present, and the Taylor\\n            // approximation of the exponentiation of the remainder (both with 20 decimals). All that remains is to multiply\\n            // all three (one 20 decimal fixed point multiplication, dividing by ONE_20, and one integer multiplication),\\n            // and then drop two digits to return an 18 decimal value.\\n\\n            return (((product * seriesSum) / ONE_20) * firstAN) / 100;\\n        }\\n    }\\n\\n    /**\\n     * @dev Natural logarithm (ln(a)) with signed 18 decimal fixed point argument.\\n     */\\n    function ln(int256 a) internal pure returns (int256) {\\n        unchecked {\\n            // The real natural logarithm is not defined for negative numbers or zero.\\n            require(a > 0, \\\"out of bounds\\\");\\n            if (LN_36_LOWER_BOUND < a && a < LN_36_UPPER_BOUND) {\\n                return _ln_36(a) / ONE_18;\\n            } else {\\n                return _ln(a);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Exponentiation (x^y) with unsigned 18 decimal fixed point base and exponent.\\n     *\\n     * Reverts if ln(x) * y is smaller than `MIN_NATURAL_EXPONENT`, or larger than `MAX_NATURAL_EXPONENT`.\\n     */\\n    function pow(uint256 x, uint256 y) internal pure returns (uint256) {\\n        unchecked {\\n            if (y == 0) {\\n                // We solve the 0^0 indetermination by making it equal one.\\n                return uint256(ONE_18);\\n            }\\n\\n            if (x == 0) {\\n                return 0;\\n            }\\n\\n            // Instead of computing x^y directly, we instead rely on the properties of logarithms and exponentiation to\\n            // arrive at that r`esult. In particular, exp(ln(x)) = x, and ln(x^y) = y * ln(x). This means\\n            // x^y = exp(y * ln(x)).\\n\\n            // The ln function takes a signed value, so we need to make sure x fits in the signed 256 bit range.\\n            require(x < 2 ** 255, \\\"x out of bounds\\\");\\n            int256 x_int256 = int256(x);\\n\\n            // We will compute y * ln(x) in a single step. Depending on the value of x, we can either use ln or ln_36. In\\n            // both cases, we leave the division by ONE_18 (due to fixed point multiplication) to the end.\\n\\n            // This prevents y * ln(x) from overflowing, and at the same time guarantees y fits in the signed 256 bit range.\\n            require(y < MILD_EXPONENT_BOUND, \\\"y out of bounds\\\");\\n            int256 y_int256 = int256(y);\\n\\n            int256 logx_times_y;\\n            if (LN_36_LOWER_BOUND < x_int256 && x_int256 < LN_36_UPPER_BOUND) {\\n                int256 ln_36_x = _ln_36(x_int256);\\n\\n                // ln_36_x has 36 decimal places, so multiplying by y_int256 isn't as straightforward, since we can't just\\n                // bring y_int256 to 36 decimal places, as it might overflow. Instead, we perform two 18 decimal\\n                // multiplications and add the results: one with the first 18 decimals of ln_36_x, and one with the\\n                // (downscaled) last 18 decimals.\\n                logx_times_y = ((ln_36_x / ONE_18) * y_int256 + ((ln_36_x % ONE_18) * y_int256) / ONE_18);\\n            } else {\\n                logx_times_y = _ln(x_int256) * y_int256;\\n            }\\n            logx_times_y /= ONE_18;\\n\\n            // Finally, we compute exp(y * ln(x)) to arrive at x^y\\n            require(\\n                MIN_NATURAL_EXPONENT <= logx_times_y && logx_times_y <= MAX_NATURAL_EXPONENT,\\n                \\\"product out of bounds\\\"\\n            );\\n\\n            return uint256(exp(logx_times_y));\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal natural logarithm (ln(a)) with signed 18 decimal fixed point argument.\\n     */\\n    function _ln(int256 a) private pure returns (int256) {\\n        unchecked {\\n            if (a < ONE_18) {\\n                // Since ln(a^k) = k * ln(a), we can compute ln(a) as ln(a) = ln((1/a)^(-1)) = - ln((1/a)). If a is less\\n                // than one, 1/a will be greater than one, and this if statement will not be entered in the recursive call.\\n                // Fixed point division requires multiplying by ONE_18.\\n                return (-_ln((ONE_18 * ONE_18) / a));\\n            }\\n\\n            // First, we use the fact that ln^(a * b) = ln(a) + ln(b) to decompose ln(a) into a sum of powers of two, which\\n            // we call x_n, where x_n == 2^(7 - n), which are the natural logarithm of precomputed quantities a_n (that is,\\n            // ln(a_n) = x_n). We choose the first x_n, x0, to equal 2^7 because the exponential of all larger powers cannot\\n            // be represented as 18 fixed point decimal numbers in 256 bits, and are therefore larger than a.\\n            // At the end of this process we will have the sum of all x_n = ln(a_n) that apply, and the remainder of this\\n            // decomposition, which will be lower than the smallest a_n.\\n            // ln(a) = k_0 * x_0 + k_1 * x_1 + ... + k_n * x_n + ln(remainder), where each k_n equals either 0 or 1.\\n            // We mutate a by subtracting a_n, making it the remainder of the decomposition.\\n\\n            // For reasons related to how `exp` works, the first two a_n (e^(2^7) and e^(2^6)) are not stored as fixed point\\n            // numbers with 18 decimals, but instead as plain integers with 0 decimals, so we need to multiply them by\\n            // ONE_18 to convert them to fixed point.\\n            // For each a_n, we test if that term is present in the decomposition (if a is larger than it), and if so divide\\n            // by it and compute the accumulated sum.\\n\\n            int256 sum = 0;\\n            if (a >= a0 * ONE_18) {\\n                a /= a0; // Integer, not fixed point division\\n                sum += x0;\\n            }\\n\\n            if (a >= a1 * ONE_18) {\\n                a /= a1; // Integer, not fixed point division\\n                sum += x1;\\n            }\\n\\n            // All other a_n and x_n are stored as 20 digit fixed point numbers, so we convert the sum and a to this format.\\n            sum *= 100;\\n            a *= 100;\\n\\n            // Because further a_n are  20 digit fixed point numbers, we multiply by ONE_20 when dividing by them.\\n\\n            if (a >= a2) {\\n                a = (a * ONE_20) / a2;\\n                sum += x2;\\n            }\\n\\n            if (a >= a3) {\\n                a = (a * ONE_20) / a3;\\n                sum += x3;\\n            }\\n\\n            if (a >= a4) {\\n                a = (a * ONE_20) / a4;\\n                sum += x4;\\n            }\\n\\n            if (a >= a5) {\\n                a = (a * ONE_20) / a5;\\n                sum += x5;\\n            }\\n\\n            if (a >= a6) {\\n                a = (a * ONE_20) / a6;\\n                sum += x6;\\n            }\\n\\n            if (a >= a7) {\\n                a = (a * ONE_20) / a7;\\n                sum += x7;\\n            }\\n\\n            if (a >= a8) {\\n                a = (a * ONE_20) / a8;\\n                sum += x8;\\n            }\\n\\n            if (a >= a9) {\\n                a = (a * ONE_20) / a9;\\n                sum += x9;\\n            }\\n\\n            if (a >= a10) {\\n                a = (a * ONE_20) / a10;\\n                sum += x10;\\n            }\\n\\n            if (a >= a11) {\\n                a = (a * ONE_20) / a11;\\n                sum += x11;\\n            }\\n\\n            // a is now a small number (smaller than a_11, which roughly equals 1.06). This means we can use a Taylor series\\n            // that converges rapidly for values of `a` close to one - the same one used in ln_36.\\n            // Let z = (a - 1) / (a + 1).\\n            // ln(a) = 2 * (z + z^3 / 3 + z^5 / 5 + z^7 / 7 + ... + z^(2 * n + 1) / (2 * n + 1))\\n\\n            // Recall that 20 digit fixed point division requires multiplying by ONE_20, and multiplication requires\\n            // division by ONE_20.\\n            int256 z = ((a - ONE_20) * ONE_20) / (a + ONE_20);\\n            int256 z_squared = (z * z) / ONE_20;\\n\\n            // num is the numerator of the series: the z^(2 * n + 1) term\\n            int256 num = z;\\n\\n            // seriesSum holds the accumulated sum of each term in the series, starting with the initial z\\n            int256 seriesSum = num;\\n\\n            // In each step, the numerator is multiplied by z^2\\n            num = (num * z_squared) / ONE_20;\\n            seriesSum += num / 3;\\n\\n            num = (num * z_squared) / ONE_20;\\n            seriesSum += num / 5;\\n\\n            num = (num * z_squared) / ONE_20;\\n            seriesSum += num / 7;\\n\\n            num = (num * z_squared) / ONE_20;\\n            seriesSum += num / 9;\\n\\n            num = (num * z_squared) / ONE_20;\\n            seriesSum += num / 11;\\n\\n            // 6 Taylor terms are sufficient for 36 decimal precision.\\n\\n            // Finally, we multiply by 2 (non fixed point) to compute ln(remainder)\\n            seriesSum *= 2;\\n\\n            // We now have the sum of all x_n present, and the Taylor approximation of the logarithm of the remainder (both\\n            // with 20 decimals). All that remains is to sum these two, and then drop two digits to return a 18 decimal\\n            // value.\\n\\n            return (sum + seriesSum) / 100;\\n        }\\n    }\\n\\n    /**\\n     * @dev Intrnal high precision (36 decimal places) natural logarithm (ln(x)) with signed 18 decimal fixed point argument,\\n     * for x close to one.\\n     *\\n     * Should only be used if x is between LN_36_LOWER_BOUND and LN_36_UPPER_BOUND.\\n     */\\n    function _ln_36(int256 x) private pure returns (int256) {\\n        unchecked {\\n            // Since ln(1) = 0, a value of x close to one will yield a very small result, which makes using 36 digits\\n            // worthwhile.\\n\\n            // First, we transform x to a 36 digit fixed point value.\\n            x *= ONE_18;\\n\\n            // We will use the following Taylor expansion, which converges very rapidly. Let z = (x - 1) / (x + 1).\\n            // ln(x) = 2 * (z + z^3 / 3 + z^5 / 5 + z^7 / 7 + ... + z^(2 * n + 1) / (2 * n + 1))\\n\\n            // Recall that 36 digit fixed point division requires multiplying by ONE_36, and multiplication requires\\n            // division by ONE_36.\\n            int256 z = ((x - ONE_36) * ONE_36) / (x + ONE_36);\\n            int256 z_squared = (z * z) / ONE_36;\\n\\n            // num is the numerator of the series: the z^(2 * n + 1) term\\n            int256 num = z;\\n\\n            // seriesSum holds the accumulated sum of each term in the series, starting with the initial z\\n            int256 seriesSum = num;\\n\\n            // In each step, the numerator is multiplied by z^2\\n            num = (num * z_squared) / ONE_36;\\n            seriesSum += num / 3;\\n\\n            num = (num * z_squared) / ONE_36;\\n            seriesSum += num / 5;\\n\\n            num = (num * z_squared) / ONE_36;\\n            seriesSum += num / 7;\\n\\n            num = (num * z_squared) / ONE_36;\\n            seriesSum += num / 9;\\n\\n            num = (num * z_squared) / ONE_36;\\n            seriesSum += num / 11;\\n\\n            num = (num * z_squared) / ONE_36;\\n            seriesSum += num / 13;\\n\\n            num = (num * z_squared) / ONE_36;\\n            seriesSum += num / 15;\\n\\n            // 8 Taylor terms are sufficient for 36 decimal precision.\\n\\n            // All that remains is multiplying by 2 (non fixed point).\\n            return seriesSum * 2;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x844f812a1d2528fbe65c1fbaf1c2fe022658b3ecc29385217b6517715d801b94\",\"license\":\"GPL-3.0-or-later\"},\"@pendle/core-v2/contracts/core/libraries/math/PMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\n/* solhint-disable private-vars-leading-underscore, reason-string */\\n\\nlibrary PMath {\\n    uint256 internal constant ONE = 1e18; // 18 decimal places\\n    int256 internal constant IONE = 1e18; // 18 decimal places\\n\\n    function subMax0(uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            return (a >= b ? a - b : 0);\\n        }\\n    }\\n\\n    function subNoNeg(int256 a, int256 b) internal pure returns (int256) {\\n        require(a >= b, \\\"negative\\\");\\n        return a - b; // no unchecked since if b is very negative, a - b might overflow\\n    }\\n\\n    function mulDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 product = a * b;\\n        unchecked {\\n            return product / ONE;\\n        }\\n    }\\n\\n    function mulDown(int256 a, int256 b) internal pure returns (int256) {\\n        int256 product = a * b;\\n        unchecked {\\n            return product / IONE;\\n        }\\n    }\\n\\n    function divDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 aInflated = a * ONE;\\n        unchecked {\\n            return aInflated / b;\\n        }\\n    }\\n\\n    function divDown(int256 a, int256 b) internal pure returns (int256) {\\n        int256 aInflated = a * IONE;\\n        unchecked {\\n            return aInflated / b;\\n        }\\n    }\\n\\n    function rawDivUp(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a + b - 1) / b;\\n    }\\n\\n    function rawDivUp(int256 a, int256 b) internal pure returns (int256) {\\n        return (a + b - 1) / b;\\n    }\\n\\n    function tweakUp(uint256 a, uint256 factor) internal pure returns (uint256) {\\n        return mulDown(a, ONE + factor);\\n    }\\n\\n    function tweakDown(uint256 a, uint256 factor) internal pure returns (uint256) {\\n        return mulDown(a, ONE - factor);\\n    }\\n\\n    /// @return res = min(a + b, bound)\\n    /// @dev This function should handle arithmetic operation and bound check without overflow/underflow\\n    function addWithUpperBound(uint256 a, uint256 b, uint256 bound) internal pure returns (uint256 res) {\\n        unchecked {\\n            if (type(uint256).max - b < a) res = bound;\\n            else res = min(bound, a + b);\\n        }\\n    }\\n\\n    /// @return res = max(a - b, bound)\\n    /// @dev This function should handle arithmetic operation and bound check without overflow/underflow\\n    function subWithLowerBound(uint256 a, uint256 b, uint256 bound) internal pure returns (uint256 res) {\\n        unchecked {\\n            if (b > a) res = bound;\\n            else res = max(a - b, bound);\\n        }\\n    }\\n\\n    function clamp(uint256 x, uint256 lower, uint256 upper) internal pure returns (uint256 res) {\\n        res = x;\\n        if (x < lower) res = lower;\\n        else if (x > upper) res = upper;\\n    }\\n\\n    // @author Uniswap\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    function square(uint256 x) internal pure returns (uint256) {\\n        return x * x;\\n    }\\n\\n    function squareDown(uint256 x) internal pure returns (uint256) {\\n        return mulDown(x, x);\\n    }\\n\\n    function abs(int256 x) internal pure returns (uint256) {\\n        return uint256(x > 0 ? x : -x);\\n    }\\n\\n    function neg(int256 x) internal pure returns (int256) {\\n        return x * (-1);\\n    }\\n\\n    function neg(uint256 x) internal pure returns (int256) {\\n        return Int(x) * (-1);\\n    }\\n\\n    function max(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return (x > y ? x : y);\\n    }\\n\\n    function max(int256 x, int256 y) internal pure returns (int256) {\\n        return (x > y ? x : y);\\n    }\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return (x < y ? x : y);\\n    }\\n\\n    function min(int256 x, int256 y) internal pure returns (int256) {\\n        return (x < y ? x : y);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                               SIGNED CASTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function Int(uint256 x) internal pure returns (int256) {\\n        require(x <= uint256(type(int256).max));\\n        return int256(x);\\n    }\\n\\n    function Int128(int256 x) internal pure returns (int128) {\\n        require(type(int128).min <= x && x <= type(int128).max);\\n        return int128(x);\\n    }\\n\\n    function Int128(uint256 x) internal pure returns (int128) {\\n        return Int128(Int(x));\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                               UNSIGNED CASTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function Uint(int256 x) internal pure returns (uint256) {\\n        require(x >= 0);\\n        return uint256(x);\\n    }\\n\\n    function Uint32(uint256 x) internal pure returns (uint32) {\\n        require(x <= type(uint32).max);\\n        return uint32(x);\\n    }\\n\\n    function Uint64(uint256 x) internal pure returns (uint64) {\\n        require(x <= type(uint64).max);\\n        return uint64(x);\\n    }\\n\\n    function Uint112(uint256 x) internal pure returns (uint112) {\\n        require(x <= type(uint112).max);\\n        return uint112(x);\\n    }\\n\\n    function Uint96(uint256 x) internal pure returns (uint96) {\\n        require(x <= type(uint96).max);\\n        return uint96(x);\\n    }\\n\\n    function Uint128(uint256 x) internal pure returns (uint128) {\\n        require(x <= type(uint128).max);\\n        return uint128(x);\\n    }\\n\\n    function Uint192(uint256 x) internal pure returns (uint192) {\\n        require(x <= type(uint192).max);\\n        return uint192(x);\\n    }\\n\\n    function Uint80(uint256 x) internal pure returns (uint80) {\\n        require(x <= type(uint80).max);\\n        return uint80(x);\\n    }\\n\\n    function isAApproxB(uint256 a, uint256 b, uint256 eps) internal pure returns (bool) {\\n        return mulDown(b, ONE - eps) <= a && a <= mulDown(b, ONE + eps);\\n    }\\n\\n    function isAGreaterApproxB(uint256 a, uint256 b, uint256 eps) internal pure returns (bool) {\\n        return a >= b && a <= mulDown(b, ONE + eps);\\n    }\\n\\n    function isASmallerApproxB(uint256 a, uint256 b, uint256 eps) internal pure returns (bool) {\\n        return a <= b && a >= mulDown(b, ONE - eps);\\n    }\\n}\\n\",\"keccak256\":\"0x6855d7a34d6b4a8eacb1675ce0cbd61bed3385a9c31828088558afb48eec48d3\",\"license\":\"GPL-3.0-or-later\"},\"@pendle/core-v2/contracts/interfaces/IPGauge.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\ninterface IPGauge {\\n    function totalActiveSupply() external view returns (uint256);\\n\\n    function activeBalance(address user) external view returns (uint256);\\n\\n    // only available for newer factories. please check the verified contracts\\n    event RedeemRewards(address indexed user, uint256[] rewardsOut);\\n}\\n\",\"keccak256\":\"0x4ccb46450af0aa70f556b3e9e15c06a50ddbc9fe3543a013577839f2e43322c4\",\"license\":\"GPL-3.0-or-later\"},\"@pendle/core-v2/contracts/interfaces/IPInterestManagerYT.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\ninterface IPInterestManagerYT {\\n    event CollectInterestFee(uint256 amountInterestFee);\\n\\n    function userInterest(address user) external view returns (uint128 lastPYIndex, uint128 accruedInterest);\\n}\\n\",\"keccak256\":\"0x56228298c383a030df33bcf4430ec63ea9ed7e96c5bbf2f8195f179bc958841a\",\"license\":\"GPL-3.0-or-later\"},\"@pendle/core-v2/contracts/interfaces/IPMarket.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./IPPrincipalToken.sol\\\";\\nimport \\\"./IPYieldToken.sol\\\";\\nimport \\\"./IStandardizedYield.sol\\\";\\nimport \\\"./IPGauge.sol\\\";\\nimport \\\"../core/Market/MarketMathCore.sol\\\";\\n\\ninterface IPMarket is IERC20Metadata, IPGauge {\\n    event Mint(address indexed receiver, uint256 netLpMinted, uint256 netSyUsed, uint256 netPtUsed);\\n\\n    event Burn(\\n        address indexed receiverSy,\\n        address indexed receiverPt,\\n        uint256 netLpBurned,\\n        uint256 netSyOut,\\n        uint256 netPtOut\\n    );\\n\\n    event Swap(\\n        address indexed caller,\\n        address indexed receiver,\\n        int256 netPtOut,\\n        int256 netSyOut,\\n        uint256 netSyFee,\\n        uint256 netSyToReserve\\n    );\\n\\n    event UpdateImpliedRate(uint256 indexed timestamp, uint256 lnLastImpliedRate);\\n\\n    event IncreaseObservationCardinalityNext(\\n        uint16 observationCardinalityNextOld,\\n        uint16 observationCardinalityNextNew\\n    );\\n\\n    function mint(\\n        address receiver,\\n        uint256 netSyDesired,\\n        uint256 netPtDesired\\n    ) external returns (uint256 netLpOut, uint256 netSyUsed, uint256 netPtUsed);\\n\\n    function burn(\\n        address receiverSy,\\n        address receiverPt,\\n        uint256 netLpToBurn\\n    ) external returns (uint256 netSyOut, uint256 netPtOut);\\n\\n    function swapExactPtForSy(\\n        address receiver,\\n        uint256 exactPtIn,\\n        bytes calldata data\\n    ) external returns (uint256 netSyOut, uint256 netSyFee);\\n\\n    function swapSyForExactPt(\\n        address receiver,\\n        uint256 exactPtOut,\\n        bytes calldata data\\n    ) external returns (uint256 netSyIn, uint256 netSyFee);\\n\\n    function redeemRewards(address user) external returns (uint256[] memory);\\n\\n    function readState(address router) external view returns (MarketState memory market);\\n\\n    function observe(uint32[] memory secondsAgos) external view returns (uint216[] memory lnImpliedRateCumulative);\\n\\n    function increaseObservationsCardinalityNext(uint16 cardinalityNext) external;\\n\\n    function readTokens() external view returns (IStandardizedYield _SY, IPPrincipalToken _PT, IPYieldToken _YT);\\n\\n    function getRewardTokens() external view returns (address[] memory);\\n\\n    function isExpired() external view returns (bool);\\n\\n    function expiry() external view returns (uint256);\\n\\n    function observations(\\n        uint256 index\\n    ) external view returns (uint32 blockTimestamp, uint216 lnImpliedRateCumulative, bool initialized);\\n\\n    function _storage()\\n        external\\n        view\\n        returns (\\n            int128 totalPt,\\n            int128 totalSy,\\n            uint96 lastLnImpliedRate,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext\\n        );\\n}\\n\",\"keccak256\":\"0xcae6ee152a68790029af41459c47cdd44964467f47a855caee78394ea09ad8df\",\"license\":\"GPL-3.0-or-later\"},\"@pendle/core-v2/contracts/interfaces/IPPYLpOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\ninterface IPPYLpOracle {\\n    event SetBlockCycleNumerator(uint16 newBlockCycleNumerator);\\n\\n    function getPtToAssetRate(address market, uint32 duration) external view returns (uint256);\\n\\n    function getYtToAssetRate(address market, uint32 duration) external view returns (uint256);\\n\\n    function getLpToAssetRate(address market, uint32 duration) external view returns (uint256);\\n\\n    function getPtToSyRate(address market, uint32 duration) external view returns (uint256);\\n\\n    function getYtToSyRate(address market, uint32 duration) external view returns (uint256);\\n\\n    function getLpToSyRate(address market, uint32 duration) external view returns (uint256);\\n\\n    function getOracleState(\\n        address market,\\n        uint32 duration\\n    )\\n        external\\n        view\\n        returns (bool increaseCardinalityRequired, uint16 cardinalityRequired, bool oldestObservationSatisfied);\\n\\n    function blockCycleNumerator() external view returns (uint16);\\n}\\n\",\"keccak256\":\"0xa7f26472f4f85a2cb991bbffd0f42be8ea4cc35b9c87d4570629a70b431b091c\",\"license\":\"GPL-3.0-or-later\"},\"@pendle/core-v2/contracts/interfaces/IPPrincipalToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IPPrincipalToken is IERC20Metadata {\\n    function burnByYT(address user, uint256 amount) external;\\n\\n    function mintByYT(address user, uint256 amount) external;\\n\\n    function initialize(address _YT) external;\\n\\n    function SY() external view returns (address);\\n\\n    function YT() external view returns (address);\\n\\n    function factory() external view returns (address);\\n\\n    function expiry() external view returns (uint256);\\n\\n    function isExpired() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0879ef0ffafe2ed731c7fe2a0281b602840c4bc715acf4e701ca51a17876fd0f\",\"license\":\"GPL-3.0-or-later\"},\"@pendle/core-v2/contracts/interfaces/IPYieldToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./IRewardManager.sol\\\";\\nimport \\\"./IPInterestManagerYT.sol\\\";\\n\\ninterface IPYieldToken is IERC20Metadata, IRewardManager, IPInterestManagerYT {\\n    event NewInterestIndex(uint256 indexed newIndex);\\n\\n    event Mint(\\n        address indexed caller,\\n        address indexed receiverPT,\\n        address indexed receiverYT,\\n        uint256 amountSyToMint,\\n        uint256 amountPYOut\\n    );\\n\\n    event Burn(address indexed caller, address indexed receiver, uint256 amountPYToRedeem, uint256 amountSyOut);\\n\\n    event RedeemRewards(address indexed user, uint256[] amountRewardsOut);\\n\\n    event RedeemInterest(address indexed user, uint256 interestOut);\\n\\n    event CollectRewardFee(address indexed rewardToken, uint256 amountRewardFee);\\n\\n    function mintPY(address receiverPT, address receiverYT) external returns (uint256 amountPYOut);\\n\\n    function redeemPY(address receiver) external returns (uint256 amountSyOut);\\n\\n    function redeemPYMulti(\\n        address[] calldata receivers,\\n        uint256[] calldata amountPYToRedeems\\n    ) external returns (uint256[] memory amountSyOuts);\\n\\n    function redeemDueInterestAndRewards(\\n        address user,\\n        bool redeemInterest,\\n        bool redeemRewards\\n    ) external returns (uint256 interestOut, uint256[] memory rewardsOut);\\n\\n    function rewardIndexesCurrent() external returns (uint256[] memory);\\n\\n    function pyIndexCurrent() external returns (uint256);\\n\\n    function pyIndexStored() external view returns (uint256);\\n\\n    function getRewardTokens() external view returns (address[] memory);\\n\\n    function SY() external view returns (address);\\n\\n    function PT() external view returns (address);\\n\\n    function factory() external view returns (address);\\n\\n    function expiry() external view returns (uint256);\\n\\n    function isExpired() external view returns (bool);\\n\\n    function doCacheIndexSameBlock() external view returns (bool);\\n\\n    function pyIndexLastUpdatedBlock() external view returns (uint128);\\n}\\n\",\"keccak256\":\"0xcf0a3e1860a9f7b979723d8585196664dc0aa0258a9f4d71170d86e1ffdfb93d\",\"license\":\"GPL-3.0-or-later\"},\"@pendle/core-v2/contracts/interfaces/IRewardManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\ninterface IRewardManager {\\n    function userReward(address token, address user) external view returns (uint128 index, uint128 accrued);\\n}\\n\",\"keccak256\":\"0x8dfa58280700390049f9bdc27bcc6daa9f34aa53fba2d47a5c5bb3d1462ca604\",\"license\":\"GPL-3.0-or-later\"},\"@pendle/core-v2/contracts/interfaces/IStandardizedYield.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n/*\\n * MIT License\\n * ===========\\n *\\n * Permission is hereby granted, free of charge, to any person obtaining a copy\\n * of this software and associated documentation files (the \\\"Software\\\"), to deal\\n * in the Software without restriction, including without limitation the rights\\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n * copies of the Software, and to permit persons to whom the Software is\\n * furnished to do so, subject to the following conditions:\\n *\\n * The above copyright notice and this permission notice shall be included in all\\n * copies or substantial portions of the Software.\\n *\\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n */\\n\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IStandardizedYield is IERC20Metadata {\\n    /// @dev Emitted when any base tokens is deposited to mint shares\\n    event Deposit(\\n        address indexed caller,\\n        address indexed receiver,\\n        address indexed tokenIn,\\n        uint256 amountDeposited,\\n        uint256 amountSyOut\\n    );\\n\\n    /// @dev Emitted when any shares are redeemed for base tokens\\n    event Redeem(\\n        address indexed caller,\\n        address indexed receiver,\\n        address indexed tokenOut,\\n        uint256 amountSyToRedeem,\\n        uint256 amountTokenOut\\n    );\\n\\n    /// @dev check `assetInfo()` for more information\\n    enum AssetType {\\n        TOKEN,\\n        LIQUIDITY\\n    }\\n\\n    /// @dev Emitted when (`user`) claims their rewards\\n    event ClaimRewards(address indexed user, address[] rewardTokens, uint256[] rewardAmounts);\\n\\n    /**\\n     * @notice mints an amount of shares by depositing a base token.\\n     * @param receiver shares recipient address\\n     * @param tokenIn address of the base tokens to mint shares\\n     * @param amountTokenToDeposit amount of base tokens to be transferred from (`msg.sender`)\\n     * @param minSharesOut reverts if amount of shares minted is lower than this\\n     * @return amountSharesOut amount of shares minted\\n     * @dev Emits a {Deposit} event\\n     *\\n     * Requirements:\\n     * - (`tokenIn`) must be a valid base token.\\n     */\\n    function deposit(\\n        address receiver,\\n        address tokenIn,\\n        uint256 amountTokenToDeposit,\\n        uint256 minSharesOut\\n    ) external payable returns (uint256 amountSharesOut);\\n\\n    /**\\n     * @notice redeems an amount of base tokens by burning some shares\\n     * @param receiver recipient address\\n     * @param amountSharesToRedeem amount of shares to be burned\\n     * @param tokenOut address of the base token to be redeemed\\n     * @param minTokenOut reverts if amount of base token redeemed is lower than this\\n     * @param burnFromInternalBalance if true, burns from balance of `address(this)`, otherwise burns from `msg.sender`\\n     * @return amountTokenOut amount of base tokens redeemed\\n     * @dev Emits a {Redeem} event\\n     *\\n     * Requirements:\\n     * - (`tokenOut`) must be a valid base token.\\n     */\\n    function redeem(\\n        address receiver,\\n        uint256 amountSharesToRedeem,\\n        address tokenOut,\\n        uint256 minTokenOut,\\n        bool burnFromInternalBalance\\n    ) external returns (uint256 amountTokenOut);\\n\\n    /**\\n     * @notice exchangeRate * syBalance / 1e18 must return the asset balance of the account\\n     * @notice vice-versa, if a user uses some amount of tokens equivalent to X asset, the amount of sy\\n     he can mint must be X * exchangeRate / 1e18\\n     * @dev SYUtils's assetToSy & syToAsset should be used instead of raw multiplication\\n     & division\\n     */\\n    function exchangeRate() external view returns (uint256 res);\\n\\n    /**\\n     * @notice claims reward for (`user`)\\n     * @param user the user receiving their rewards\\n     * @return rewardAmounts an array of reward amounts in the same order as `getRewardTokens`\\n     * @dev\\n     * Emits a `ClaimRewards` event\\n     * See {getRewardTokens} for list of reward tokens\\n     */\\n    function claimRewards(address user) external returns (uint256[] memory rewardAmounts);\\n\\n    /**\\n     * @notice get the amount of unclaimed rewards for (`user`)\\n     * @param user the user to check for\\n     * @return rewardAmounts an array of reward amounts in the same order as `getRewardTokens`\\n     */\\n    function accruedRewards(address user) external view returns (uint256[] memory rewardAmounts);\\n\\n    function rewardIndexesCurrent() external returns (uint256[] memory indexes);\\n\\n    function rewardIndexesStored() external view returns (uint256[] memory indexes);\\n\\n    /**\\n     * @notice returns the list of reward token addresses\\n     */\\n    function getRewardTokens() external view returns (address[] memory);\\n\\n    /**\\n     * @notice returns the address of the underlying yield token\\n     */\\n    function yieldToken() external view returns (address);\\n\\n    /**\\n     * @notice returns all tokens that can mint this SY\\n     */\\n    function getTokensIn() external view returns (address[] memory res);\\n\\n    /**\\n     * @notice returns all tokens that can be redeemed by this SY\\n     */\\n    function getTokensOut() external view returns (address[] memory res);\\n\\n    function isValidTokenIn(address token) external view returns (bool);\\n\\n    function isValidTokenOut(address token) external view returns (bool);\\n\\n    function previewDeposit(\\n        address tokenIn,\\n        uint256 amountTokenToDeposit\\n    ) external view returns (uint256 amountSharesOut);\\n\\n    function previewRedeem(\\n        address tokenOut,\\n        uint256 amountSharesToRedeem\\n    ) external view returns (uint256 amountTokenOut);\\n\\n    /**\\n     * @notice This function contains information to interpret what the asset is\\n     * @return assetType the type of the asset (0 for ERC20 tokens, 1 for AMM liquidity tokens,\\n        2 for bridged yield bearing tokens like wstETH, rETH on Arbi whose the underlying asset doesn't exist on the chain)\\n     * @return assetAddress the address of the asset\\n     * @return assetDecimals the decimals of the asset\\n     */\\n    function assetInfo() external view returns (AssetType assetType, address assetAddress, uint8 assetDecimals);\\n}\\n\",\"keccak256\":\"0xe85f1526becc30e49ec0d4a42f01c54cc655fb1f815df2c71684fb76c9214ba5\",\"license\":\"GPL-3.0-or-later\"},\"@pendle/core-v2/contracts/oracles/PtYtLpOracle/PendleLpOracleLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport \\\"./PendlePYOracleLib.sol\\\";\\n\\nlibrary PendleLpOracleLib {\\n    using PendlePYOracleLib for IPMarket;\\n    using PMath for uint256;\\n    using PMath for int256;\\n    using MarketMathCore for MarketState;\\n\\n    /**\\n      * This function returns the approximated twap rate LP/asset on market, but take into account the current rate of SY\\n     This is to account for special cases where underlying asset becomes insolvent and has decreasing exchangeRate\\n     * @param market market to get rate from\\n     * @param duration twap duration\\n     */\\n    function getLpToAssetRate(IPMarket market, uint32 duration) internal view returns (uint256) {\\n        (uint256 syIndex, uint256 pyIndex) = market.getSYandPYIndexCurrent();\\n        uint256 lpToAssetRateRaw = _getLpToAssetRateRaw(market, duration, pyIndex);\\n        if (syIndex >= pyIndex) {\\n            return lpToAssetRateRaw;\\n        } else {\\n            return (lpToAssetRateRaw * syIndex) / pyIndex;\\n        }\\n    }\\n\\n    /**\\n      * This function returns the approximated twap rate LP/asset on market, but take into account the current rate of SY\\n     This is to account for special cases where underlying asset becomes insolvent and has decreasing exchangeRate\\n     * @param market market to get rate from\\n     * @param duration twap duration\\n     */\\n    function getLpToSyRate(IPMarket market, uint32 duration) internal view returns (uint256) {\\n        (uint256 syIndex, uint256 pyIndex) = market.getSYandPYIndexCurrent();\\n        uint256 lpToAssetRateRaw = _getLpToAssetRateRaw(market, duration, pyIndex);\\n        if (syIndex >= pyIndex) {\\n            return lpToAssetRateRaw.divDown(syIndex);\\n        } else {\\n            return lpToAssetRateRaw.divDown(pyIndex);\\n        }\\n    }\\n\\n    function _getLpToAssetRateRaw(\\n        IPMarket market,\\n        uint32 duration,\\n        uint256 pyIndex\\n    ) private view returns (uint256 lpToAssetRateRaw) {\\n        MarketState memory state = market.readState(address(0));\\n\\n        int256 totalHypotheticalAsset;\\n        if (state.expiry <= block.timestamp) {\\n            // 1 PT = 1 Asset post-expiry\\n            totalHypotheticalAsset = state.totalPt + PYIndexLib.syToAsset(PYIndex.wrap(pyIndex), state.totalSy);\\n        } else {\\n            MarketPreCompute memory comp = state.getMarketPreCompute(PYIndex.wrap(pyIndex), block.timestamp);\\n\\n            (int256 rateOracle, int256 rateHypTrade) = _getPtRatesRaw(market, state, duration);\\n            int256 cParam = LogExpMath.exp(comp.rateScalar.mulDown((rateOracle - comp.rateAnchor)));\\n\\n            int256 tradeSize = (cParam.mulDown(comp.totalAsset) - state.totalPt).divDown(\\n                PMath.IONE + cParam.divDown(rateHypTrade)\\n            );\\n\\n            totalHypotheticalAsset =\\n                comp.totalAsset -\\n                tradeSize.divDown(rateHypTrade) +\\n                (state.totalPt + tradeSize).divDown(rateOracle);\\n        }\\n\\n        lpToAssetRateRaw = totalHypotheticalAsset.divDown(state.totalLp).Uint();\\n    }\\n\\n    function _getPtRatesRaw(\\n        IPMarket market,\\n        MarketState memory state,\\n        uint32 duration\\n    ) private view returns (int256 rateOracle, int256 rateHypTrade) {\\n        uint256 lnImpliedRate = market.getMarketLnImpliedRate(duration);\\n        uint256 timeToExpiry = state.expiry - block.timestamp;\\n        rateOracle = MarketMathCore._getExchangeRateFromImpliedRate(lnImpliedRate, timeToExpiry);\\n\\n        int256 rateLastTrade = MarketMathCore._getExchangeRateFromImpliedRate(state.lastLnImpliedRate, timeToExpiry);\\n        rateHypTrade = (rateLastTrade + rateOracle) / 2;\\n    }\\n}\\n\",\"keccak256\":\"0xe3593acbbe7120bb2ee12591b57e2a53ae8f41d74e824ca9ede58b053cd28a8b\",\"license\":\"GPL-3.0-or-later\"},\"@pendle/core-v2/contracts/oracles/PtYtLpOracle/PendlePYOracleLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IPMarket.sol\\\";\\nimport \\\"../../core/libraries/math/PMath.sol\\\";\\n\\n// This library can & should be integrated directly for optimal gas usage.\\n// If you prefer not to integrate it directly, the PendlePtOracle contract (a pre-deployed version of this contract) can be used.\\nlibrary PendlePYOracleLib {\\n    using PMath for uint256;\\n    using PMath for int256;\\n\\n    /**\\n     * This function returns the twap rate PT/Asset on market, but take into account the current rate of SY\\n     This is to account for special cases where underlying asset becomes insolvent and has decreasing exchangeRate\\n     * @param market market to get rate from\\n     * @param duration twap duration\\n     */\\n    function getPtToAssetRate(IPMarket market, uint32 duration) internal view returns (uint256) {\\n        (uint256 syIndex, uint256 pyIndex) = getSYandPYIndexCurrent(market);\\n        if (syIndex >= pyIndex) {\\n            return getPtToAssetRateRaw(market, duration);\\n        } else {\\n            return (getPtToAssetRateRaw(market, duration) * syIndex) / pyIndex;\\n        }\\n    }\\n\\n    /**\\n     * This function returns the twap rate YT/Asset on market, but take into account the current rate of SY\\n     This is to account for special cases where underlying asset becomes insolvent and has decreasing exchangeRate\\n     * @param market market to get rate from\\n     * @param duration twap duration\\n     */\\n    function getYtToAssetRate(IPMarket market, uint32 duration) internal view returns (uint256) {\\n        (uint256 syIndex, uint256 pyIndex) = getSYandPYIndexCurrent(market);\\n        if (syIndex >= pyIndex) {\\n            return getYtToAssetRateRaw(market, duration);\\n        } else {\\n            return (getYtToAssetRateRaw(market, duration) * syIndex) / pyIndex;\\n        }\\n    }\\n\\n    /// @notice Similar to getPtToAsset but returns the rate in SY instead\\n    function getPtToSyRate(IPMarket market, uint32 duration) internal view returns (uint256) {\\n        (uint256 syIndex, uint256 pyIndex) = getSYandPYIndexCurrent(market);\\n        if (syIndex >= pyIndex) {\\n            return getPtToAssetRateRaw(market, duration).divDown(syIndex);\\n        } else {\\n            return getPtToAssetRateRaw(market, duration).divDown(pyIndex);\\n        }\\n    }\\n\\n    /// @notice Similar to getPtToAsset but returns the rate in SY instead\\n    function getYtToSyRate(IPMarket market, uint32 duration) internal view returns (uint256) {\\n        (uint256 syIndex, uint256 pyIndex) = getSYandPYIndexCurrent(market);\\n        if (syIndex >= pyIndex) {\\n            return getYtToAssetRateRaw(market, duration).divDown(syIndex);\\n        } else {\\n            return getYtToAssetRateRaw(market, duration).divDown(pyIndex);\\n        }\\n    }\\n\\n    /// @notice returns the raw rate without taking into account whether SY is solvent\\n    function getPtToAssetRateRaw(IPMarket market, uint32 duration) internal view returns (uint256) {\\n        uint256 expiry = market.expiry();\\n\\n        if (expiry <= block.timestamp) {\\n            return PMath.ONE;\\n        } else {\\n            uint256 lnImpliedRate = getMarketLnImpliedRate(market, duration);\\n            uint256 timeToExpiry = expiry - block.timestamp;\\n            uint256 assetToPtRate = MarketMathCore._getExchangeRateFromImpliedRate(lnImpliedRate, timeToExpiry).Uint();\\n            return PMath.ONE.divDown(assetToPtRate);\\n        }\\n    }\\n\\n    /// @notice returns the raw rate without taking into account whether SY is solvent\\n    function getYtToAssetRateRaw(IPMarket market, uint32 duration) internal view returns (uint256) {\\n        return PMath.ONE - getPtToAssetRateRaw(market, duration);\\n    }\\n\\n    function getSYandPYIndexCurrent(IPMarket market) internal view returns (uint256 syIndex, uint256 pyIndex) {\\n        (IStandardizedYield SY, , IPYieldToken YT) = market.readTokens();\\n\\n        syIndex = SY.exchangeRate();\\n        uint256 pyIndexStored = YT.pyIndexStored();\\n\\n        if (YT.doCacheIndexSameBlock() && YT.pyIndexLastUpdatedBlock() == block.number) {\\n            pyIndex = pyIndexStored;\\n        } else {\\n            pyIndex = PMath.max(syIndex, pyIndexStored);\\n        }\\n    }\\n\\n    function getMarketLnImpliedRate(IPMarket market, uint32 duration) internal view returns (uint256) {\\n        uint32[] memory durations = new uint32[](2);\\n        durations[0] = duration;\\n\\n        uint216[] memory lnImpliedRateCumulative = market.observe(durations);\\n        return (lnImpliedRateCumulative[1] - lnImpliedRateCumulative[0]) / duration;\\n    }\\n}\\n\",\"keccak256\":\"0x8cca665b27e417003db05a3e3508eae39acae2af8824422b0605c1abbf80d081\",\"license\":\"GPL-3.0-or-later\"},\"@pendle/core-v2/contracts/oracles/PtYtLpOracle/samples/BoringLpSeller.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\nimport \\\"../../../interfaces/IPMarket.sol\\\";\\n\\nabstract contract BoringLpSeller {\\n    bytes internal constant EMPTY_BYTES = abi.encode();\\n\\n    constructor() {}\\n\\n    /// @dev slippage control should be done on a higher level with the returned parameter\\n    /// @param market market address\\n    /// @param netLpIn amount of Lp to sell\\n    /// @param tokenOut should be included in SY.getTokensOut()\\n    /// @return netTokenOut amount of token out\\n    function _sellLpForToken(address market, uint256 netLpIn, address tokenOut) internal returns (uint256 netTokenOut) {\\n        (IStandardizedYield SY, IPPrincipalToken PT, IPYieldToken YT) = IPMarket(market).readTokens();\\n\\n        IPMarket(market).transfer(market, netLpIn);\\n\\n        uint256 netSyToRedeem;\\n\\n        if (PT.isExpired()) {\\n            (uint256 netSyRemoved, ) = IPMarket(market).burn(address(SY), address(YT), netLpIn);\\n            uint256 netSyFromPt = YT.redeemPY(address(SY));\\n            netSyToRedeem = netSyRemoved + netSyFromPt;\\n        } else {\\n            (uint256 netSyRemoved, uint256 netPtRemoved) = IPMarket(market).burn(address(SY), market, netLpIn);\\n            (uint256 netSySwappedOut, ) = IPMarket(market).swapExactPtForSy(address(SY), netPtRemoved, EMPTY_BYTES);\\n            netSyToRedeem = netSyRemoved + netSySwappedOut;\\n        }\\n\\n        netTokenOut = SY.redeem(address(this), netSyToRedeem, tokenOut, 0, true);\\n    }\\n}\\n\",\"keccak256\":\"0xb9529d6b75678a2fb2e0b152d81f52e9f81947ba55102c84db46f86e5bd857f3\",\"license\":\"GPL-3.0-or-later\"},\"contracts/exchange/contracts/periphery/contracts/access-control/SuAccessRoles.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title SuAccessRoles Library\\n * @dev SuAuthenticated and SuAccessControlSingleton need to have this constants\\n * Hierarchy:\\n *      1. DAO - can give admins and system roles\\n *      2.1. Admin - can set Alerters\\n *      2.2. System - includes Minter, Liquidation, Reward and Disabler roles, don't have access to give some roles.\\n *      3. Alerter - can send alerts and trigger rate limits, don't have access to give some roles.\\n */\\nabstract contract SuAccessRoles {\\n    bytes32 public constant ADMIN_ROLE = 0x00;\\n\\n    bytes32 public constant DAO_ROLE = keccak256(\\\"DAO_ROLE\\\");\\n\\n    bytes32 public constant ALERTER_ROLE = keccak256(\\\"ALERTER_ROLE\\\");\\n\\n    // system roles\\n    bytes32 public constant MINT_ACCESS_ROLE = keccak256(\\\"MINT_ACCESS_ROLE\\\");\\n    bytes32 public constant AUCTION_ACCESS_ROLE = keccak256(\\\"AUCTION_ACCESS_ROLE\\\");\\n    bytes32 public constant LIQUIDATION_ACCESS_ROLE = keccak256(\\\"LIQUIDATION_ACCESS_ROLE\\\");\\n    bytes32 public constant REWARD_ACCESS_ROLE = keccak256(\\\"REWARD_ACCESS_ROLE\\\");\\n    // bytes32 public constant SYSTEM_ROLE = keccak256(\\\"SYSTEM_ROLE\\\");\\n    bytes32 public constant DISABLER_ROLE = keccak256(\\\"DISABLER_ROLE\\\");\\n    bytes32 public constant CDP_ACCESS_ROLE = keccak256(\\\"CDP_ACCESS_ROLE\\\");\\n    bytes32 public constant VOTING_ESCROW_ROLE = keccak256(\\\"VOTING_ESCROW_ROLE\\\");\\n    bytes32 public constant PROXY_ACTIONS_ROLE = keccak256(\\\"PROXY_ACTIONS_ROLE\\\");\\n}\\n\",\"keccak256\":\"0x6702597d2d879605a4f25e71c348b4c7f84f4618ca799ba0fcb4a5ad994b788c\",\"license\":\"BSL 1.1\"},\"contracts/exchange/contracts/periphery/contracts/access-control/SuAuthenticated.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/access-control/ISuAccessControl.sol\\\";\\nimport \\\"./SuAccessRoles.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @title SuAuthenticated\\n * @dev other contracts should inherit to be authenticated.\\n * The address of SuAccessControlSingleton should be one for all contract that inherits SuAuthenticated\\n */\\nabstract contract SuAuthenticated is Initializable, SuAccessRoles, IERC165Upgradeable {\\n    ISuAccessControl public ACCESS_CONTROL_SINGLETON;\\n\\n    error OnlyDAOError();\\n    error OnlyAdminError();\\n    error OnlyAlerterError();\\n    error OnlyVaultAccessError();\\n    error OnlyLiquidationAccessError();\\n    error OnlyMintAccessError();\\n    error OnlyRewardAccessError();\\n    error OnlyDisablerAccessError();\\n    error OnlyVotingEscrowError();\\n    error OnlyProxyActionsError();\\n    error OnlyRoleError();\\n    error OnlyCDPAccessError();\\n    error BadAccessControlSingleton();\\n    error onlyAuctionAccessRole();\\n\\n    /**\\n     * @dev should be passed in constructor\\n     */\\n    function __suAuthenticatedInit(address _accessControlSingleton) internal onlyInitializing {\\n        ACCESS_CONTROL_SINGLETON = ISuAccessControl(_accessControlSingleton);\\n        if (\\n            _accessControlSingleton == address(0) ||\\n            !ISuAccessControl(_accessControlSingleton).supportsInterface(type(IAccessControlUpgradeable).interfaceId)\\n        ) revert BadAccessControlSingleton();\\n    }\\n\\n    /** CORE ROLES */\\n\\n    modifier onlyDAO() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(DAO_ROLE, msg.sender)) revert OnlyDAOError();\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(ADMIN_ROLE, msg.sender)) revert OnlyAdminError();\\n        _;\\n    }\\n\\n    modifier onlyAlerter() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(ALERTER_ROLE, msg.sender)) revert OnlyAlerterError();\\n        _;\\n    }\\n\\n    /** SYSTEM ROLES */\\n\\n    modifier onlyLiquidationAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(LIQUIDATION_ACCESS_ROLE, msg.sender)) revert OnlyLiquidationAccessError();\\n        _;\\n    }\\n\\n    modifier onlyAuctionAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(AUCTION_ACCESS_ROLE, msg.sender)) revert OnlyLiquidationAccessError();\\n        _;\\n    }\\n\\n    modifier onlyMintAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(MINT_ACCESS_ROLE, msg.sender)) revert OnlyMintAccessError();\\n        _;\\n    }\\n\\n    modifier onlyRewardAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(REWARD_ACCESS_ROLE, msg.sender)) revert OnlyRewardAccessError();\\n        _;\\n    }\\n\\n    modifier onlyRewardOrAdminAccess() {\\n        if (\\n            !ACCESS_CONTROL_SINGLETON.hasRole(REWARD_ACCESS_ROLE, msg.sender) &&\\n            !ACCESS_CONTROL_SINGLETON.hasRole(ADMIN_ROLE, msg.sender)\\n        ) revert OnlyRewardAccessError();\\n        _;\\n    }\\n\\n    // @notice This modifier check if user/contract have access to \\\"disable\\\" contracts.\\n    // All main contracts in our lending protocol have disableContract() method that stops contracts main functions.\\n    modifier onlyDisablerAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(DISABLER_ROLE, msg.sender)) revert OnlyDisablerAccessError();\\n        _;\\n    }\\n\\n    modifier onlyCDPAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(CDP_ACCESS_ROLE, msg.sender)) revert OnlyCDPAccessError();\\n        _;\\n    }\\n\\n    modifier onlyVotingEscrow() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(VOTING_ESCROW_ROLE, msg.sender)) revert OnlyVotingEscrowError();\\n        _;\\n    }\\n\\n    modifier onlyProxyActions() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(PROXY_ACTIONS_ROLE, msg.sender)) revert OnlyProxyActionsError();\\n        _;\\n    }\\n\\n    // syntax sugar under ACCESS_CONTROL_SINGLETON\\n    modifier onlyRole(bytes32 role) {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(role, msg.sender)) revert OnlyRoleError();\\n        _;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return ACCESS_CONTROL_SINGLETON.supportsInterface(interfaceId);\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xc27fc434b09e69804160c93896d39da4f9890d21e2ca1002eb53ebf1234e4d91\",\"license\":\"BSL 1.1\"},\"contracts/exchange/contracts/periphery/contracts/adapters/Pendle/PendleLPAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@pendle/core-v2/contracts/oracles/PtYtLpOracle/samples/BoringLpSeller.sol\\\";\\nimport \\\"@pendle/core-v2/contracts/oracles/PtYtLpOracle/PendleLpOracleLib.sol\\\";\\nimport \\\"@pendle/core-v2/contracts/interfaces/IPPYLpOracle.sol\\\";\\n\\nimport \\\"../../access-control/SuAuthenticated.sol\\\";\\nimport \\\"../../interfaces/adapters/IPendleLPAdapter.sol\\\";\\nimport \\\"../../interfaces/oracle/ISuOracleAggregator.sol\\\";\\n\\n/**\\n * @title PendleLPAdapter\\n * @notice Adapter for Pendle LP token.\\n * @dev See ILPAdapter interface for full details.\\n */\\ncontract PendleLPAdapter is SuAuthenticated, IPendleLPAdapter, BoringLpSeller {\\n    using PendleLpOracleLib for IPMarket;\\n    using SafeERC20 for IERC20;\\n\\n    mapping(address => PendleLPInfo) public lps; // Mapping from LP token to pool\\n    ISuOracleAggregator public ORACLE;\\n    IPPYLpOracle public PENDLE_ORACLE;\\n\\n    uint256 internal constant MAX_BPS = 10000; // 100% in basis points\\n    uint32 public TWAP_WINDOW;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(address _authControl, address _oracle, address _pendleOracle) public initializer {\\n        __suAuthenticatedInit(_authControl);\\n        ORACLE = ISuOracleAggregator(_oracle);\\n        PENDLE_ORACLE = IPPYLpOracle(_pendleOracle);\\n        TWAP_WINDOW = 1200; // TWAPDuration is 20min\\n    }\\n\\n    function setTwapWindow(uint32 _twapWindow) external onlyAdmin {\\n        TWAP_WINDOW = _twapWindow;\\n    }\\n\\n    function registerLP(address lp, IPMarket market, address mainUnderlyingToken) external onlyAdmin {\\n        if (IERC20Metadata(lp).decimals() != 18) revert BadDecimals(lp);\\n        bool wasRegistered = lps[lp].mainUnderlyingToken != address(0);\\n        // If admin make mistake in this function, for example he pass wrong market,\\n        // then he should be able to fix it by repeating register call with correct arguments.\\n        // if (wasRegistered) revert AlreadyRegistered(lp);\\n\\n        /**\\n            By default, Pendle markets\\u2019 oracles are un-initialized. It could lead to incorrect price calculations\\n            due to the low cardinality and lack of observations.\\n            Here we check for oracle initialization before registration\\n        */\\n        (bool increaseCardinalityRequired,, bool oldestObservationSatisfied) =\\n                            PENDLE_ORACLE.getOracleState(address(market), TWAP_WINDOW);\\n\\n        if (increaseCardinalityRequired || !oldestObservationSatisfied) {\\n            revert OracleNotReady();\\n        }\\n\\n        lps[lp].market = market;\\n        (lps[lp].SY, /*PT*/, /*YT*/) = market.readTokens();\\n        lps[lp].underlyingTokens = lps[lp].SY.getTokensOut();\\n\\n        (,address realMainUnderlyingToken,) = lps[lp].SY.assetInfo();\\n        if (realMainUnderlyingToken != mainUnderlyingToken) revert BadMainUnderlyingToken();\\n        lps[lp].mainUnderlyingToken = mainUnderlyingToken;\\n\\n        if (wasRegistered) {\\n            emit TokenRegisteredRepeat(lp, address(market), mainUnderlyingToken);\\n        } else {\\n            emit TokenRegistered(lp, address(market), mainUnderlyingToken);\\n        }\\n    }\\n\\n    function increaseObservationCardinality(address market, uint16 cardinality) external {\\n        IPMarket(market).increaseObservationsCardinalityNext(cardinality);\\n    }\\n\\n    function isAdapterLP(address asset) public view returns (bool) {\\n        return lps[asset].underlyingTokens.length != 0;\\n    }\\n\\n    /**\\n     * @notice Idea of this implementation was in Pendle example\\n    **/\\n    function getFiatPrice1e18(address asset) external view returns (uint256) {\\n        if (!isAdapterLP(asset)) revert IsNotLP(asset);\\n        PendleLPInfo memory lpInfo = lps[asset];\\n\\n        uint256 lpRate = lpInfo.market.getLpToAssetRate(TWAP_WINDOW); // in base 10^d\\n        uint256 assetPrice = ORACLE.getFiatPrice1e18(lpInfo.mainUnderlyingToken); // in base 10^(36 - d)\\n\\n        // Decimals check , we should receive decimals = 18:\\n        // (36 - d) + d - X = 18 => X = 18\\n        return assetPrice * lpRate / 1e18;\\n    }\\n\\n    /**\\n     * @notice Pendle unwrap LP only to 1 token, but our ILPAdapter is more general,\\n     * so we need to return here the array of WithdrawResult.\\n    **/\\n    function withdraw(\\n        address asset,\\n        uint256 amount,\\n        uint256 maxSlippageBps\\n    ) external returns (WithdrawResult[] memory results) {\\n        if (!isAdapterLP(asset)) revert IsNotLP(asset);\\n        IERC20(asset).safeTransferFrom(msg.sender, address(this), amount);\\n        PendleLPInfo memory lpInfo = lps[asset];\\n\\n        uint256 nTokens = lpInfo.underlyingTokens.length;\\n        results = new WithdrawResult[](1);\\n\\n        // In other adapters there is the method that unwrap LP to all underlyingTokens,\\n        // but here we have Pendle library, that can swap LP only for one token.\\n        // So we need to check what token will have the best USD value. For that we need to multiply token price and\\n        // amount we could receive after this swap.\\n        // This swap in depth is doing by lpInfo.SY, so there is previewRedeem function to check this amount after swap.\\n        address bestTokenOut;\\n        uint256 bestTokenAmountOut1e18;\\n        uint256 expectedAmount;\\n        for (uint256 i = 0; i < nTokens; ++i) {\\n            address tokenToPreview = lpInfo.underlyingTokens[i];\\n            if (ORACLE.hasPriceForAsset(tokenToPreview)) {\\n                // previewRedeem is in base 10^d (in default in returns second arg)\\n                uint256 previewRedeem =  lpInfo.SY.previewRedeem(tokenToPreview, amount);\\n                uint256 tokenPrice = ORACLE.getSafeFiatPrice1e18(tokenToPreview); // with base 10^(36 - d)\\n                uint256 previewAmount1e18 = previewRedeem * tokenPrice / 1e18; // with base 10^(d + 36 - d);\\n                if (previewAmount1e18 > bestTokenAmountOut1e18) {\\n                    bestTokenAmountOut1e18 = previewAmount1e18;\\n                    bestTokenOut = tokenToPreview;\\n                    expectedAmount = previewRedeem;\\n                }\\n            }\\n        }\\n        if (bestTokenOut == address(0)) revert TokenOutNotFound();\\n\\n        uint256 netTokenOut = _sellLpForToken(address(lpInfo.market), amount, bestTokenOut);\\n\\n        // Calculate minimum acceptable amount based on slippage\\n        uint256 minAcceptableAmount = (expectedAmount * (MAX_BPS - maxSlippageBps)) / MAX_BPS;\\n        if (netTokenOut < minAcceptableAmount) {\\n            revert SlippageExceeded(expectedAmount, netTokenOut);\\n        }\\n\\n        results[0] = WithdrawResult({ token: bestTokenOut, amount: netTokenOut });\\n        IERC20(bestTokenOut).safeTransfer(msg.sender, netTokenOut);\\n\\n        emit Withdraw(asset, amount);\\n    }\\n\\n    function emergencyWithdraw(address[] calldata tokens, address receiver) external onlyAdmin {\\n        if (receiver == address(0)) revert ZeroRecipient();\\n\\n        for(uint256 i = 0; i < tokens.length; i++) {\\n            address token = tokens[i];\\n            uint256 balance = IERC20(token).balanceOf(address(this));\\n            if (balance > 0) {\\n                IERC20(token).safeTransfer(receiver, balance);\\n                emit EmergencyWithdraw(token, balance, receiver);\\n            }\\n        }\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x19367f14e9ffedac97978a1e6b9a9c4a643da279cc334223ff5891a7f6b8945e\",\"license\":\"BSL 1.1\"},\"contracts/exchange/contracts/periphery/contracts/interfaces/access-control/ISuAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\nimport \\\"../../access-control/SuAccessRoles.sol\\\";\\n\\n/**\\n * @notice Access control for contracts\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n **/\\ninterface ISuAccessControl is IAccessControlUpgradeable, IERC165Upgradeable {\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\\n}\\n\",\"keccak256\":\"0x25724ac502fd6418ccd38273b276de4b2fdecd023d723c5d80c9f0a27c407bcd\",\"license\":\"MIT\"},\"contracts/exchange/contracts/periphery/contracts/interfaces/adapters/ILPAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"../oracle/ISuOracle.sol\\\";\\n\\nstruct WithdrawResult {\\n    address token;\\n    uint256 amount;\\n}\\n\\ninterface ILPAdapter is ISuOracle {\\n    /* ======================== ERRORS ======================== */\\n    error IsNotLP(address asset);\\n    error LPOracleNotReady();\\n    error BadMainUnderlyingToken();\\n    error BadDecimals(address asset);\\n    error ZeroRecipient();\\n\\n    /* ========================= EVENTS ========================= */\\n    event EmergencyWithdraw(address indexed token, uint256 amount, address receiver);\\n\\n    /* ==================== MUTABLE METHODS ==================== */\\n    /**\\n      * @notice Unwrap LP token with depth 2 (if underlying token is LP, it's also unwrapping) with slippage protection\\n      * @param asset - address of LP token to withdraw/unwrap\\n      * @param amount - amount of asset to withdraw/unwrap\\n      * @param maxSlippageBps Maximum allowed slippage in basis points (1 = 0.01%)\\n     **/\\n    function withdraw(address asset, uint256 amount, uint256 maxSlippageBps) external returns (WithdrawResult[] memory);\\n\\n    /**\\n     * @notice Withdraw tokens from the adapter in case of emergency.\\n     * @dev This function is restricted to the admin and allows for emergency withdrawal of tokens.\\n     * @param tokens List of tokens to withdraw.\\n     * @param receiver Address of the receiver to receive the tokens.\\n     */\\n    function emergencyWithdraw(address[] calldata tokens, address receiver) external;\\n\\n    /* ====================== VIEW METHODS ==================== */\\n    /**\\n      * @notice Returns if asset ig Balancer LP token, registered in our adapter\\n      * @param asset - address of LP token to check\\n     **/\\n    function isAdapterLP(address asset) external returns (bool);\\n}\",\"keccak256\":\"0x6b173310065afa386f75f4c548ca483b3db8a2464331da73a5d2092ff0f1aff8\",\"license\":\"BSL 1.1\"},\"contracts/exchange/contracts/periphery/contracts/interfaces/adapters/IPendleLPAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@pendle/core-v2/contracts/interfaces/IPMarket.sol\\\";\\nimport \\\"./ILPAdapter.sol\\\";\\n\\n/**\\n * @title IPendleLPAdapter\\n * @notice Interface for PendleLPAdapter contract.\\n */\\ninterface IPendleLPAdapter is ILPAdapter {\\n    /**\\n     * @title PendleLPInfo\\n     * @notice Struct with info about each  Pendle LP\\n     * @param market - address of LPs market (maybe can be removed, because LP address == market address)\\n     * @param SY - StandardizedYield, we need it to get underlyingTokens and best token to get after unwrap\\n     * @param underlyingTokens - all tokens that we can receive after unwrapping LP\\n     * @param mainUnderlyingToken - main LPs underlying token, rate in getFiatPrice is calculated in this token\\n     */\\n    struct PendleLPInfo {\\n        IPMarket market;\\n        IStandardizedYield SY;\\n        address[] underlyingTokens;\\n        address mainUnderlyingToken;\\n    }\\n\\n    error OracleNotReady();\\n    error SlippageExceeded(uint256 expected, uint256 received);\\n    error TokenOutNotFound();\\n\\n    event TokenRegisteredRepeat(address lp, address market, address mainUnderlyingToken);\\n    event TokenRegistered(address lp, address market, address mainUnderlyingToken);\\n    event Withdraw(address asset, uint256 amount);\\n\\n    /* ==================== MUTABLE METHODS ==================== */\\n    /**\\n      * @notice Register the given LP token address and set the LP info\\n      * @dev In case when oracle is not ready, you should call market.increaseObservationsCardinalityNext(t)\\n      *      and wait 20 minutes to register LP\\n      *      [IMPORTANT] - Before register admin should check that SY contract don't have callbacks.\\n      *      It should be very rare to have a SY with a callback function, but need to pay attention on it.\\n      * @param lp address of LP token\\n      * @param market market for LP token\\n     **/\\n    function registerLP(address lp, IPMarket market, address mainUnderlyingToken) external;\\n\\n    /**\\n     * @notice Helper function to increases the oracle observation cardinality for a Pendle market\\n     * @dev This sets the target cardinality that the oracle will grow to as new observations are written.\\n     * The actual cardinality will increase gradually with each new observation until it reaches this target.\\n     *\\n     * This must be called before registering an LP token to ensure enough price observations for TWAP calculations.\\n     * After increaseObservationCardinality call you must wai at least 20 min to allow the oracle\\n     * to accumulate enough price observations\\n     *\\n     * For 1200 seconds (20 min) cardinality = 1200 / blockTime. Also we can * 1.2 to have buffer for safety.\\n     * For mainnet (12 seconds for block) cardinality = 120, for Arbitrum (0.3 sec for block) = 4800.\\n     *\\n     * @param market The address of the Pendle market whose oracle cardinality should be increased\\n     * @param cardinality The target number of observations the oracle should maintain\\n     */\\n    function increaseObservationCardinality(address market, uint16 cardinality) external;\\n\\n    /**\\n     * @notice Set the TWAP window for price calculation\\n     * @param _twapWindow New TWAP window in seconds\\n     */\\n    function setTwapWindow(uint32 _twapWindow) external;\\n}\",\"keccak256\":\"0x6181f01354d2a936c9ac8840773ce5625e7311c0cbad03e3664419de879e4fe9\",\"license\":\"BSL 1.1\"},\"contracts/exchange/contracts/periphery/contracts/interfaces/oracle/ISuOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\n// solhint-disable compiler-version\\npragma solidity >=0.7.6;\\n\\ninterface ISuOracle {\\n    /**\\n     * @notice WARNING! Read this description very carefully!\\n     *     function getFiatPrice1e18(address asset) returns (uint256) that:\\n     *         basicAmountOfAsset * getFiatPrice1e18(asset) / 1e18 === $$ * 1e18\\n     *     in other words, it doesn't matter what's the erc20.decimals is,\\n     *     you just multiply token balance in basic units on value from oracle and get dollar amount multiplied on 1e18.\\n     *\\n     * different assets have different deviation threshold (errors)\\n     *     for wBTC it's <= 0.5%, read more https://data.chain.link/ethereum/mainnet/crypto-usd/btc-usd\\n     *     for other asset is can be larger based on particular oracle implementation.\\n     *\\n     * examples:\\n     *     market price of btc = $30k,\\n     *     for 0.1 wBTC the unit256 amount is 0.1 * 1e18\\n     *     0.1 * 1e18 * (price1e18 / 1e18) == $3000 == uint256(3000*1e18)\\n     *     => price1e18 = 30000 * 1e18;\\n     *\\n     *     market price of usdt = $0.97,\\n     *     for 1 usdt uint256 = 1 * 1e6\\n     *     so 1*1e6 * price1e18 / 1e18 == $0.97 == uint256(0.97*1e18)\\n     *     => 1*1e6 * (price1e18 / 1e18) / (0.97*1e18)   = 1\\n     *     =>  price1e18 = 0.97 * (1e18/1e6) * 1e18\\n     *\\n     *    assume market price of wBTC = $31,503.77, oracle error = $158\\n     *\\n     *     case #1: small amount of wBTC\\n     *         we have 0.0,000,001 wBTC that is worth v = $0.00315 \\u00b1 $0.00001 = 0.00315*1e18 = 315*1e13 \\u00b1 1*1e13\\n     *         actual balance on the asset b = wBTC.balanceOf() =  0.0000001*1e18 = 1e11\\n     *         oracle should return or = oracle.getFiatPrice1e18(wBTC) <=>\\n     *         <=> b*or = v => v/b = 315*1e13 / 1e11 = 315*1e2 \\u00b1 1e2\\n     *         error = or.error * b = 1e2 * 1e11 = 1e13 => 1e13/1e18 usd = 1e-5 = 0.00001 usd\\n     *\\n     *     case #2: large amount of wBTC\\n     *         v = 2,000,000 wBTC = $31,503.77 * 2m \\u00b1 158*2m = $63,007,540,000 \\u00b1 $316,000,000 = 63,007*1e24 \\u00b1 316*1e24\\n     *         for calc convenience we increase error on 0.05 and have v = 63,000*24 \\u00b1 300*1e24 = (630 \\u00b1 3)*1e26\\n     *         b = 2*1e6 * 1e18 = 2*1e24\\n     *         or = v/b = (630 \\u00b1 3)*1e26 / 2*1e24 = 315*1e2 \\u00b1 1.5*1e2\\n     *         error = or.error * b = 1.5*100 * 2*1e24 = 3*1e26 = 3*1e8*1e18 = $300,000,000 ~ $316,000,000\\n     *\\n     *     assume the market price of USDT = $0.97 \\u00b1 $0.00485,\\n     *\\n     *     case #3: little amount of USDT\\n     *         v = USDT amount 0.005 = 0.005*(0.97 \\u00b1 0.00485) = 0.00485*1e18 \\u00b1 0.00002425*1e18 = 485*1e13 \\u00b1 3*1e13\\n     *         we rounded error up on (3000-2425)/2425 ~= +24% for calculation convenience.\\n     *         b = USDT.balanceOf() = 0.005*1e6 = 5*1e3\\n     *         b*or = v => or = v/b = (485*1e13 \\u00b1 3*1e13) / 5*1e3 = 970*1e9 \\u00b1 6*1e9\\n     *         error = 6*1e9 * 5*1e3 / 1e18 = 30*1e12/1e18 = 3*1e-5 = $0,00005\\n     *\\n     *     case #4: lot of USDT\\n     *         v = we have 100,000,000,000 USDT = $97B = 97*1e9*1e18 \\u00b1 0.5*1e9*1e18\\n     *         b = USDT.balanceOf() = 1e11*1e6 = 1e17\\n     *         or = v/b = (97*1e9*1e18 \\u00b1 0.5*1e9*1e18) / 1e17 = 970*1e9 \\u00b1 5*1e9\\n     *         error = 5*1e9 * 1e17 = 5*1e26 = 0.5 * 1e8*1e18\\n     *\\n     * @param asset - address of erc20 token contract\\n     * @return usdPrice1e18 such that asset.balanceOf() * getFiatPrice1e18(asset) / 1e18 == $$ * 1e18\\n     **/\\n    function getFiatPrice1e18(address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa56b9cc86ef5935efecc276e6a3188d518f1a99cad960083a8de35849c997687\",\"license\":\"UNLICENSED\"},\"contracts/exchange/contracts/periphery/contracts/interfaces/oracle/ISuOracleAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ISuOracle.sol\\\";\\n\\ninterface ISuOracleAggregator is ISuOracle {\\n    /* ===================== STRUCT ===================== */\\n    struct AssetLimitation {\\n        uint256 lowerBound;\\n        uint256 upperBound;\\n    }\\n\\n    /* ===================== EVENTS ===================== */\\n    event OracleLowerBoundWarning(address indexed asset, uint256 price, uint256 lowerBound);\\n    event OracleUpperBoundWarning(address indexed asset, uint256 price, uint256 upperBound);\\n\\n    event OracleLowerBoundUpdated(address asset, uint256 newBound);\\n    event OracleUpperBoundUpdated(address asset, uint256 newBound);\\n\\n    /* ===================== ERRORS ===================== */\\n    error NoOracleFound(address asset);\\n    error NoOracleImplementation();\\n    error BadOracleId();\\n    error PriceBelowLowerBound(address asset, uint256 price, uint256 bound);\\n    error PriceAboveUpperBound(address asset, uint256 price, uint256 bound);\\n\\n    /* ====================== VARS ====================== */\\n    function assetToOracle (address asset) external view returns ( uint256 );\\n    function oracleImplementations (uint256 oracleId) external view returns ( ISuOracle );\\n\\n    /* ==================== METHODS ==================== */\\n\\n    /**\\n    * @notice Like getFiatPrice1e18 from ISuOracle, but also checks bounds and emit event if there is an error.\\n    * We should call it in non-view method where we need safePrice from Oracle.\\n    * @param asset - address of asset\\n    **/\\n    function getSafeFiatPrice1e18(address asset) external returns (uint256);\\n\\n    /**\\n    * @notice Change lower bound of asset\\n    * @param asset - address of asset\\n    * @param newLowerBound - new value of lower bound\\n    **/\\n    function setLowerBound(address asset, uint256 newLowerBound) external;\\n\\n    /**\\n    * @notice Change upper bound of asset\\n    * @param asset - address of asset\\n    * @param newUpperBound - new value of upper bound\\n    **/\\n    function setUpperBound(address asset, uint256 newUpperBound) external;\\n\\n    /**\\n       * @notice assign address of oracle implementation to the oracleId\\n    * @param oracleId - number 0,1, etc to assign the oracle\\n    * @param oracleImplementation - an address with ISuOracle implementation contract\\n    **/\\n    function setOracleImplementation(uint256 oracleId, ISuOracle oracleImplementation) external;\\n\\n    /**\\n    * @notice specify what oracleId should be used for each assets. Checks that oracleId has an implementation\\n    **/\\n    function setOracleIdForAssets(address[] memory assets, uint256 oracleId) external;\\n\\n    /* ==================== VIEW METHODS ==================== */\\n    /**\\n    * @return true if oracle is set to this asset, false otherwise\\n    **/\\n    function hasPriceForAsset(address asset) external view returns(bool);\\n}\\n\",\"keccak256\":\"0xb73f938c5cb6d1295d61e94f86704c7777998ef50e0030480047fa96ce7a5535\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000022565b620000e3565b600054610100900460ff16156200008f5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811614620000e1576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b61380d80620000f36000396000f3fe608060405234801561001057600080fd5b50600436106101335760003560e01c806301ffc9a71461013857806303ee9f2214610160578063340517c91461018657806338013f02146101bb578063438280dd146101ce57806351362117146101f55780635f5535451461020857806371d0fb411461021d57806375b238fc1461024457806383839a501461024c5780638e5313e01461025f5780639c977cf014610286578063b38234f314610299578063b5c5f672146102c0578063b9ac2b38146102e0578063bd5f5be6146102f3578063c0c53b8b1461031a578063c7c7ab6d1461032d578063d0e8fa8214610340578063d12e733214610367578063d1dff44f146103b2578063d2351cee146103c5578063dc97e84e146103ec578063e2c1d1d114610413578063e9c265181461043f575b600080fd5b61014b610146366004612ec4565b610466565b60405190151581526020015b60405180910390f35b600054610179906201000090046001600160a01b031681565b6040516101579190612eee565b6101ad7f014f8da3222812608c449a44f4705585c5ce052eeb6f9af0af9209c64b0ba2de81565b604051908152602001610157565b603454610179906001600160a01b031681565b6101ad7f39f61ca2a1a28fee144218173ec637b649a353e4026b2738c673800e5bf1437b81565b61014b610203366004612f17565b6104e3565b61021b610216366004612f34565b610503565b005b6101ad7f880a91047114272656e533301261260c75e4d11543ac7303d6fe4204579ec72781565b6101ad600081565b61021b61025a366004612f6a565b6105be565b6101ad7fe453bacb314e78dcd5192e6b1a2b1f0e7c76e92f6b7e429a6a90f04e39db3b7681565b603554610179906001600160a01b031681565b6101ad7fd83f5343da19b478b15a140c301a868be9e02603958f38fbd822b9d5c0a2891681565b6102d36102ce366004612fa3565b61061f565b6040516101579190612fd8565b6101ad6102ee366004612f17565b610a59565b6101ad7f4f14c8366fa999817edc9f29824eb88a00cc31225e2156f399da4bc91049eb1081565b61021b610328366004613030565b610bfb565b61021b61033b366004613030565b610d56565b6101ad7f76d0567582f23e1e9d7a13eeba60f9aea9d69b8da87ca27a8bf3698b35c653db81565b6103a3610375366004612f17565b6033602052600090815260409020805460018201546003909201546001600160a01b03918216928216911683565b6040516101579392919061307b565b61021b6103c036600461309e565b6111fa565b6101ad7fb0fdd1623e42dbffda4acd8bd643e1cb69f00f0e83abeaa8150ee42cf0fd105e81565b6101ad7f9a9aef7c1247d5fc769b0185c052913e39673da29a880317dfd20ebf86f26a4981565b60355461042a90600160a01b900463ffffffff1681565b60405163ffffffff9091168152602001610157565b6101ad7f3b5d4cc60d3ec3516ee8ae083bd60934f6eb2a6c54b1229985c41bfb092b260381565b600080546040516301ffc9a760e01b8152620100009091046001600160a01b0316906301ffc9a79061049c908590600401613118565b602060405180830381865afa1580156104b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104dd919061313d565b92915050565b6001600160a01b0316600090815260336020526040902060020154151590565b60008054604051632474521560e21b8152620100009091046001600160a01b0316916391d148549161053a91903390600401613158565b602060405180830381865afa158015610557573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057b919061313d565b61059857604051631886ea7d60e11b815260040160405180910390fd5b6035805463ffffffff909216600160a01b0263ffffffff60a01b19909216919091179055565b604051631bea2f1d60e11b815261ffff821660048201526001600160a01b038316906337d45e3a90602401600060405180830381600087803b15801561060357600080fd5b505af1158015610617573d6000803e3d6000fd5b505050505050565b606061062a846104e3565b6106525783604051631e489be560e01b81526004016106499190612eee565b60405180910390fd5b6106676001600160a01b0385163330866113d0565b6001600160a01b038085166000908152603360209081526040808320815160808101835281548616815260018201549095168584015260028101805483518186028101860185528181529596959294938601938301828280156106f357602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116106d5575b5050509183525050600391909101546001600160a01b03166020918201526040828101515181516001808252818401909352939450929182015b604080518082019091526000808252602082015281526020019060019003908161072d57905050925060008080805b848110156109375760008660400151828151811061077c5761077c613185565b602090810291909101015160345460405163a780f13360e01b81529192506001600160a01b03169063a780f133906107b8908490600401612eee565b602060405180830381865afa1580156107d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f9919061313d565b1561092657602087015160405163cbe52ae360e01b81526000916001600160a01b03169063cbe52ae3906108339085908f9060040161319b565b602060405180830381865afa158015610850573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087491906131b4565b603454604051632a5001c960e01b81529192506000916001600160a01b0390911690632a5001c9906108aa908690600401612eee565b6020604051808303816000875af11580156108c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ed91906131b4565b90506000670de0b6b3a764000061090483856131e3565b61090e9190613210565b905086811115610922578096508397508295505b5050505b5061093081613224565b905061075c565b506001600160a01b03831661095f57604051631b250a0960e21b815260040160405180910390fd5b600061097086600001518a86611428565b905060006127106109818a8261323d565b61098b90856131e3565b6109959190613210565b9050808210156109c2576040516371c4efed60e01b81526004810184905260248101839052604401610649565b6040518060400160405280866001600160a01b0316815260200183815250886000815181106109f3576109f3613185565b6020908102919091010152610a126001600160a01b0386163384611811565b7f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243648b8b604051610a4392919061319b565b60405180910390a1505050505050509392505050565b6000610a64826104e3565b610a835781604051631e489be560e01b81526004016106499190612eee565b6001600160a01b03808316600090815260336020908152604080832081516080810183528154861681526001820154909516858401526002810180548351818602810186018552818152959695929493860193830182828015610b0f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610af1575b5050509183525050600391909101546001600160a01b039081166020909201919091526035548251929350600092610b5992169063ffffffff600160a01b90910481169061183516565b6034546060840151604051631735856760e31b81529293506000926001600160a01b039092169163b9ac2b3891610b9291600401612eee565b602060405180830381865afa158015610baf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd391906131b4565b9050670de0b6b3a7640000610be883836131e3565b610bf29190613210565b95945050505050565b600054610100900460ff1615808015610c1b5750600054600160ff909116105b80610c3c5750610c2a3061188f565b158015610c3c575060005460ff166001145b610c9f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610649565b6000805460ff191660011790558015610cc2576000805461ff0019166101001790555b610ccb8461189e565b603480546001600160a01b0319166001600160a01b0385811691909117909155603580549184166001600160c01b031990921691909117604b60a41b1790558015610d50576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b60008054604051632474521560e21b8152620100009091046001600160a01b0316916391d1485491610d8d91903390600401613158565b602060405180830381865afa158015610daa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dce919061313d565b610deb57604051631886ea7d60e11b815260040160405180910390fd5b826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4d9190613261565b60ff16601214610e72578260405163144a426560e31b81526004016106499190612eee565b6001600160a01b0383811660009081526033602052604080822060030154603554915162439f4b60e91b81528685166004820152600160a01b830463ffffffff1660248201529084161515938392169063873e960090604401606060405180830381865afa158015610ee8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0c919061327c565b92505091508180610f1b575080155b15610f395760405163370aafe360e11b815260040160405180910390fd5b6001600160a01b038681166000908152603360205260409081902080546001600160a01b03191692881692831790558051630b2339af60e21b81529051632c8ce6bc916004808201926060929091908290030181865afa158015610fa1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc591906132c1565b50506001600160a01b0387811660009081526033602052604080822060010180546001600160a01b03191694909316938417909255815163071bc3c960e01b8152915163071bc3c99260048082019392918290030181865afa15801561102f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611057919081019061338a565b6001600160a01b03871660009081526033602090815260409091208251611088936002909201929190910190612e53565b506001600160a01b03808716600090815260336020526040808220600101548151630a40bee560e41b815291519293169163a40bee50916004808201926060929091908290030181865afa1580156110e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611108919061341d565b50915050846001600160a01b0316816001600160a01b03161461113e5760405163ad2da8fd60e01b815260040160405180910390fd5b6001600160a01b03878116600090815260336020526040902060030180546001600160a01b03191691871691909117905583156111b5577f63158a2ba74dcc8fbe165d0f7bdd9908d7627a717c167d58c0c8f809696572528787876040516111a89392919061307b565b60405180910390a16111f1565b7f8c768b5da89e637b23caac626ccd760ef89b9e8eaa2f45bbf8c9d68e231dabef8787876040516111e89392919061307b565b60405180910390a15b50505050505050565b60008054604051632474521560e21b8152620100009091046001600160a01b0316916391d148549161123191903390600401613158565b602060405180830381865afa15801561124e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611272919061313d565b61128f57604051631886ea7d60e11b815260040160405180910390fd5b6001600160a01b0381166112b65760405163d27b444360e01b815260040160405180910390fd5b60005b82811015610d505760008484838181106112d5576112d5613185565b90506020020160208101906112ea9190612f17565b90506000816001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161131a9190612eee565b602060405180830381865afa158015611337573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061135b91906131b4565b905080156113bb576113776001600160a01b0383168583611811565b816001600160a01b03167faaeda929aa102e867049528ec7cd2499e3a2f8846e736ae7935f234dfbf500d982866040516113b2929190613158565b60405180910390a25b505080806113c890613224565b9150506112b9565b610d50846323b872dd60e01b8585856040516024016113f193929190613460565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526119cf565b600080600080866001600160a01b0316632c8ce6bc6040518163ffffffff1660e01b8152600401606060405180830381865afa15801561146c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061149091906132c1565b925092509250866001600160a01b031663a9059cbb88886040518363ffffffff1660e01b81526004016114c492919061319b565b6020604051808303816000875af11580156114e3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611507919061313d565b506000826001600160a01b0316632f13b60c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611548573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061156c919061313d565b1561166f57604051633dae446f60e21b81526000906001600160a01b038a169063f6b911bc906115a490889087908d90600401613460565b60408051808303816000875af11580156115c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e69190613484565b5090506000836001600160a01b031663bcb7ea5d876040518263ffffffff1660e01b81526004016116179190612eee565b6020604051808303816000875af1158015611636573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061165a91906131b4565b905061166681836134a8565b9250505061177e565b600080896001600160a01b031663f6b911bc878c8c6040518463ffffffff1660e01b81526004016116a293929190613460565b60408051808303816000875af11580156116c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e49190613484565b60408051600080825260208201928390526329910b1160e01b909252929450909250906001600160a01b038c16906329910b1190611729908a9086906024810161350b565b60408051808303816000875af1158015611747573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061176b9190613484565b50905061177881846134a8565b93505050505b60405163769f8e5d60e01b8152306004820152602481018290526001600160a01b038781166044830152600060648301526001608483015285169063769f8e5d9060a4016020604051808303816000875af11580156117e1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061180591906131b4565b98975050505050505050565b6118308363a9059cbb60e01b84846040516024016113f192919061319b565b505050565b600080600061184c856001600160a01b0316611aa4565b91509150600061185d868684611cd4565b90508183106118705792506104dd915050565b8161187b84836131e3565b6118859190613210565b9695505050505050565b6001600160a01b03163b151590565b600054610100900460ff166119095760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610649565b6000805462010000600160b01b031916620100006001600160a01b0384169081029190911790915515806119ae57506040516301ffc9a760e01b81526001600160a01b038216906301ffc9a79061196b90637965db0b60e01b90600401613118565b602060405180830381865afa158015611988573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ac919061313d565b155b156119cc576040516384d942fd60e01b815260040160405180910390fd5b50565b6000611a24826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611e619092919063ffffffff16565b9050805160001480611a45575080806020019051810190611a45919061313d565b6118305760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610649565b600080600080846001600160a01b0316632c8ce6bc6040518163ffffffff1660e01b8152600401606060405180830381865afa158015611ae8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b0c91906132c1565b9250509150816001600160a01b0316633ba0b9a96040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b7391906131b4565b93506000816001600160a01b031663d2a3584e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611bb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bd991906131b4565b9050816001600160a01b031663516399df6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c3d919061313d565b8015611cb2575043826001600160a01b03166360e0a9e16040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ca79190613532565b6001600160801b0316145b15611cbf57809350611ccc565b611cc98582611e78565b93505b505050915091565b600080846001600160a01b031663794052f360006040518263ffffffff1660e01b8152600401611d049190612eee565b61012060405180830381865afa158015611d22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d46919061355b565b90506000428260a0015111611d7657611d63848360200151611e90565b8251611d6f91906135dd565b9050611e42565b6000611d83838642611ecc565b9050600080611d9389868a611fcd565b915091506000611dbc611db7856040015185611daf9190613605565b86519061203c565b61205f565b90506000611e01611dcd8385612474565b611ddf90670de0b6b3a76400006135dd565b88516020880151611df190869061203c565b611dfb9190613605565b90612474565b9050611e1784828960000151611dfb91906135dd565b611e218285612474565b8660200151611e309190613605565b611e3a91906135dd565b955050505050505b611885611e5c83604001518361247490919063ffffffff16565b61249a565b6060611e7084846000856124ad565b949350505050565b6000818311611e875781611e89565b825b9392505050565b60008060008312611ea2576001611ea6565b6000195b9050611ec2611ebd85611eb886612588565b61259f565b6125be565b611e70908261362c565b611ef76040518060800160405280600081526020016000815260200160008152602001600081525090565b60a08401518210611f1b5760405163b2094b5960e01b815260040160405180910390fd5b6000828560a00151611f2d919061323d565b9050611f3985826125d4565b82526020850151611f4b908590611e90565b602083015284511580611f6057506020820151155b15611f8e578451602083015160405163b1c4aefb60e01b815260048101929092526024820152604401610649565b611fac85600001518661010001518460200151856000015185612630565b604083015260c0850151611fc090826126b1565b6060830152509392505050565b60008080611fe46001600160a01b038716856126e5565b90506000428660a00151611ff8919061323d565b905061200482826126b1565b93506000612017876101000151836126b1565b9050600261202586836135dd565b61202f919061365c565b9350505050935093915050565b600080612049838561362c565b9050670de0b6b3a7640000815b05949350505050565b6000680238fd42c5cf03ffff198212158015612084575068070c1cc73b00c800008213155b6120c35760405162461bcd60e51b815260206004820152601060248201526f125b9d985b1a5908195e1c1bdb995b9d60821b6044820152606401610649565b60008212156120fb576120d88260000361205f565b6a0c097ce7bc90715b34b9f160241b816120f4576120f46131fa565b0592915050565b60006806f05b59d3b2000000831261213957506806f05b59d3b1ffffff199091019072195e54c5dd42177f53a27172fa9ec63026282760241b61216f565b6803782dace9d9000000831261216b57506803782dace9d8ffffff19909101906b1425982cf597cd205cef738061216f565b5060015b6064929092029168056bc75e2d6310000068ad78ebc5ac6200000084126121bf5768ad78ebc5ac61ffffff199093019268056bc75e2d631000006e01855144814a7ff805980ff008400082020590505b6856bc75e2d63100000084126121fb576856bc75e2d630ffffff199093019268056bc75e2d631000006b02df0ab5a80a22c61ab5a70082020590505b682b5e3af16b18800000841261223557682b5e3af16b187fffff199093019268056bc75e2d63100000693f1fce3da636ea5cf85082020590505b6815af1d78b58c400000841261226f576815af1d78b58c3fffff199093019268056bc75e2d63100000690127fa27722cc06cc5e282020590505b680ad78ebc5ac620000084126122a857680ad78ebc5ac61fffff199093019268056bc75e2d6310000068280e60114edb805d0382020590505b68056bc75e2d6310000084126122e15768056bc75e2d630fffff199093019268056bc75e2d63100000680ebc5fb4174612111082020590505b6802b5e3af16b1880000841261231a576802b5e3af16b187ffff199093019268056bc75e2d631000006808f00f760a4b2db55d82020590505b68015af1d78b58c4000084126123535768015af1d78b58c3ffff199093019268056bc75e2d631000006806f5f177578893793782020590505b68056bc75e2d631000008481019085906002908280020505918201919050600368056bc75e2d631000008783020505918201919050600468056bc75e2d631000008783020505918201919050600568056bc75e2d631000008783020505918201919050600668056bc75e2d631000008783020505918201919050600768056bc75e2d631000008783020505918201919050600868056bc75e2d631000008783020505918201919050600968056bc75e2d631000008783020505918201919050600a68056bc75e2d631000008783020505918201919050600b68056bc75e2d631000008783020505918201919050600c68056bc75e2d631000008783020505918201919050606468056bc75e2d63100000848402058502059695505050505050565b600080612489670de0b6b3a76400008561362c565b9050828181612056576120566131fa565b6000808212156124a957600080fd5b5090565b60608247101561250e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610649565b600080866001600160a01b0316858760405161252a919061368a565b60006040518083038185875af1925050503d8060008114612567576040519150601f19603f3d011682016040523d82523d6000602084013e61256c565b606091505b509150915061257d8783838761280c565b979650505050505050565b60008082136124a95761259a826136a6565b6104dd565b6000670de0b6b3a76400006125b484846131e3565b611e899190613210565b60006001600160ff1b038211156124a957600080fd5b60006125df826125be565b6125f1611ebd6201518061016d6131e3565b8460800151612600919061362c565b61260a919061365c565b9050600081136104dd57604051630e520c3b60e11b815260048101829052602401610649565b60008061263d86846126b1565b9050670de0b6b3a764000081121561266b5760405163329e322960e21b815260048101829052602401610649565b600061268161267a878a6135dd565b8990612474565b9050600061268e82612883565b905061269a8187612474565b6126a49084613605565b9998505050505050505050565b6000806126c36201518061016d6131e3565b6126cd84866131e3565b6126d79190613210565b9050611e70611db7826125be565b60408051600280825260608201835260009283929190602083019080368337019050509050828160008151811061271e5761271e613185565b63ffffffff9092166020928302919091019091015260405163883bdbfd60e01b81526000906001600160a01b0386169063883bdbfd906127629085906004016136c2565b600060405180830381865afa15801561277f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526127a7919081019061370c565b90508363ffffffff16816000815181106127c3576127c3613185565b6020026020010151826001815181106127de576127de613185565b60200260200101516127f091906137a7565b6127fa91906137c7565b6001600160d81b031695945050505050565b60608315612879578251600003612872576128268561188f565b6128725760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610649565b5081611e70565b611e7083836128d6565b6000670de0b6b3a764000082036128ad5760405163a9c8b14d60e01b815260040160405180910390fd5b60006128cb6128c484670de0b6b3a7640000613605565b8490612474565b9050611e8981612900565b8151156128e65781518083602001fd5b8060405162461bcd60e51b815260040161064991906137ed565b60008082136129415760405162461bcd60e51b815260206004820152600d60248201526c6f7574206f6620626f756e647360981b6044820152606401610649565b670c7d713b49da00008213801561295f5750670f43fc2c04ee000082125b1561298357670de0b6b3a764000061297683612991565b816120f4576120f46131fa565b6104dd82612ab0565b919050565b670de0b6b3a7640000026000806a0c097ce7bc90715b34b9f160241b808401906ec097ce7bc90715b34b9f0fffffffff19850102816129d2576129d26131fa565b05905060006a0c097ce7bc90715b34b9f160241b82800205905081806a0c097ce7bc90715b34b9f160241b81840205915060038205016a0c097ce7bc90715b34b9f160241b82840205915060058205016a0c097ce7bc90715b34b9f160241b82840205915060078205016a0c097ce7bc90715b34b9f160241b82840205915060098205016a0c097ce7bc90715b34b9f160241b828402059150600b8205016a0c097ce7bc90715b34b9f160241b828402059150600d8205016a0c097ce7bc90715b34b9f160241b828402059150600f82050160020295945050505050565b6000670de0b6b3a7640000821215612af157612ae8826a0c097ce7bc90715b34b9f160241b81612ae257612ae26131fa565b05612ab0565b60000392915050565b6000775803bcc5cb9634ba4cfb2213f784019318ed4dcb6017880f60361b8312612b3c5772195e54c5dd42177f53a27172fa9ec63026282760241b830592506806f05b59d3b2000000015b6f8bcc0026baae9e45e470190267a230cf60191b8312612b73576b1425982cf597cd205cef7380830592506803782dace9d9000000015b606492830292026e01855144814a7ff805980ff00840008312612bbb576e01855144814a7ff805980ff008400068056bc75e2d63100000840205925068ad78ebc5ac62000000015b6b02df0ab5a80a22c61ab5a7008312612bf6576b02df0ab5a80a22c61ab5a70068056bc75e2d6310000084020592506856bc75e2d631000000015b693f1fce3da636ea5cf8508312612c2d57693f1fce3da636ea5cf85068056bc75e2d631000008402059250682b5e3af16b18800000015b690127fa27722cc06cc5e28312612c6457690127fa27722cc06cc5e268056bc75e2d6310000084020592506815af1d78b58c400000015b68280e60114edb805d038312612c995768280e60114edb805d0368056bc75e2d631000008402059250680ad78ebc5ac6200000015b680ebc5fb417461211108312612cc457680ebc5fb4174612111068056bc75e2d631000009384020592015b6808f00f760a4b2db55d8312612cf9576808f00f760a4b2db55d68056bc75e2d6310000084020592506802b5e3af16b1880000015b6806f5f17757889379378312612d2e576806f5f177578893793768056bc75e2d63100000840205925068015af1d78b58c40000015b6806248f33704b2866038312612d62576806248f33704b28660368056bc75e2d63100000840205925067ad78ebc5ac620000015b6805c548670b9510e7ac8312612d96576805c548670b9510e7ac68056bc75e2d6310000084020592506756bc75e2d6310000015b600068056bc75e2d63100000840168056bc75e2d631000008086030281612dbf57612dbf6131fa565b059050600068056bc75e2d63100000828002059050818068056bc75e2d63100000818402059150600382050168056bc75e2d63100000828402059150600582050168056bc75e2d63100000828402059150600782050168056bc75e2d63100000828402059150600982050168056bc75e2d63100000828402059150600b820501600202606485820105979650505050505050565b828054828255906000526020600020908101928215612ea8579160200282015b82811115612ea857825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190612e73565b506124a99291505b808211156124a95760008155600101612eb0565b600060208284031215612ed657600080fd5b81356001600160e01b031981168114611e8957600080fd5b6001600160a01b0391909116815260200190565b6001600160a01b03811681146119cc57600080fd5b600060208284031215612f2957600080fd5b8135611e8981612f02565b600060208284031215612f4657600080fd5b813563ffffffff81168114611e8957600080fd5b61ffff811681146119cc57600080fd5b60008060408385031215612f7d57600080fd5b8235612f8881612f02565b91506020830135612f9881612f5a565b809150509250929050565b600080600060608486031215612fb857600080fd5b8335612fc381612f02565b95602085013595506040909401359392505050565b602080825282518282018190526000919060409081850190868401855b8281101561302357815180516001600160a01b03168552860151868501529284019290850190600101612ff5565b5091979650505050505050565b60008060006060848603121561304557600080fd5b833561305081612f02565b9250602084013561306081612f02565b9150604084013561307081612f02565b809150509250925092565b6001600160a01b0393841681529183166020830152909116604082015260600190565b6000806000604084860312156130b357600080fd5b83356001600160401b03808211156130ca57600080fd5b818601915086601f8301126130de57600080fd5b8135818111156130ed57600080fd5b8760208260051b850101111561310257600080fd5b6020928301955093505084013561307081612f02565b6001600160e01b031991909116815260200190565b8051801515811461298c57600080fd5b60006020828403121561314f57600080fd5b611e898261312d565b9182526001600160a01b0316602082015260400190565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6001600160a01b03929092168252602082015260400190565b6000602082840312156131c657600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176104dd576104dd6131cd565b634e487b7160e01b600052601260045260246000fd5b60008261321f5761321f6131fa565b500490565b600060018201613236576132366131cd565b5060010190565b818103818111156104dd576104dd6131cd565b805160ff8116811461298c57600080fd5b60006020828403121561327357600080fd5b611e8982613250565b60008060006060848603121561329157600080fd5b61329a8461312d565b925060208401516132aa81612f5a565b91506132b86040850161312d565b90509250925092565b6000806000606084860312156132d657600080fd5b83516132e181612f02565b60208501519093506132f281612f02565b604085015190925061307081612f02565b60405161012081016001600160401b03811182821017156133265761332661316f565b60405290565b604051601f8201601f191681016001600160401b03811182821017156133545761335461316f565b604052919050565b60006001600160401b038211156133755761337561316f565b5060051b60200190565b805161298c81612f02565b6000602080838503121561339d57600080fd5b82516001600160401b038111156133b357600080fd5b8301601f810185136133c457600080fd5b80516133d76133d28261335c565b61332c565b81815260059190911b820183019083810190878311156133f657600080fd5b928401925b8284101561257d57835161340e81612f02565b825292840192908401906133fb565b60008060006060848603121561343257600080fd5b83516002811061344157600080fd5b602085015190935061345281612f02565b91506132b860408501613250565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6000806040838503121561349757600080fd5b505080516020909101519092909150565b808201808211156104dd576104dd6131cd565b60005b838110156134d65781810151838201526020016134be565b50506000910152565b600081518084526134f78160208601602086016134bb565b601f01601f19169290920160200192915050565b60018060a01b0384168152826020820152606060408201526000610bf260608301846134df565b60006020828403121561354457600080fd5b81516001600160801b0381168114611e8957600080fd5b6000610120828403121561356e57600080fd5b613576613303565b82518152602083015160208201526040830151604082015261359a6060840161337f565b60608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e08201526101008084015181830152508091505092915050565b80820182811260008312801582168215821617156135fd576135fd6131cd565b505092915050565b8181036000831280158383131683831282161715613625576136256131cd565b5092915050565b80820260008212600160ff1b84141615613648576136486131cd565b81810583148215176104dd576104dd6131cd565b60008261366b5761366b6131fa565b600160ff1b821460001984141615613685576136856131cd565b500590565b6000825161369c8184602087016134bb565b9190910192915050565b6000600160ff1b82016136bb576136bb6131cd565b5060000390565b6020808252825182820181905260009190848201906040850190845b8181101561370057835163ffffffff16835292840192918401916001016136de565b50909695505050505050565b6000602080838503121561371f57600080fd5b82516001600160401b0381111561373557600080fd5b8301601f8101851361374657600080fd5b80516137546133d28261335c565b81815260059190911b8201830190838101908783111561377357600080fd5b928401925b8284101561257d5783516001600160d81b03811681146137985760008081fd5b82529284019290840190613778565b6001600160d81b03828116828216039080821115613625576136256131cd565b60006001600160d81b03838116806137e1576137e16131fa565b92169190910492915050565b602081526000611e8960208301846134df56fea164736f6c6343000811000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101335760003560e01c806301ffc9a71461013857806303ee9f2214610160578063340517c91461018657806338013f02146101bb578063438280dd146101ce57806351362117146101f55780635f5535451461020857806371d0fb411461021d57806375b238fc1461024457806383839a501461024c5780638e5313e01461025f5780639c977cf014610286578063b38234f314610299578063b5c5f672146102c0578063b9ac2b38146102e0578063bd5f5be6146102f3578063c0c53b8b1461031a578063c7c7ab6d1461032d578063d0e8fa8214610340578063d12e733214610367578063d1dff44f146103b2578063d2351cee146103c5578063dc97e84e146103ec578063e2c1d1d114610413578063e9c265181461043f575b600080fd5b61014b610146366004612ec4565b610466565b60405190151581526020015b60405180910390f35b600054610179906201000090046001600160a01b031681565b6040516101579190612eee565b6101ad7f014f8da3222812608c449a44f4705585c5ce052eeb6f9af0af9209c64b0ba2de81565b604051908152602001610157565b603454610179906001600160a01b031681565b6101ad7f39f61ca2a1a28fee144218173ec637b649a353e4026b2738c673800e5bf1437b81565b61014b610203366004612f17565b6104e3565b61021b610216366004612f34565b610503565b005b6101ad7f880a91047114272656e533301261260c75e4d11543ac7303d6fe4204579ec72781565b6101ad600081565b61021b61025a366004612f6a565b6105be565b6101ad7fe453bacb314e78dcd5192e6b1a2b1f0e7c76e92f6b7e429a6a90f04e39db3b7681565b603554610179906001600160a01b031681565b6101ad7fd83f5343da19b478b15a140c301a868be9e02603958f38fbd822b9d5c0a2891681565b6102d36102ce366004612fa3565b61061f565b6040516101579190612fd8565b6101ad6102ee366004612f17565b610a59565b6101ad7f4f14c8366fa999817edc9f29824eb88a00cc31225e2156f399da4bc91049eb1081565b61021b610328366004613030565b610bfb565b61021b61033b366004613030565b610d56565b6101ad7f76d0567582f23e1e9d7a13eeba60f9aea9d69b8da87ca27a8bf3698b35c653db81565b6103a3610375366004612f17565b6033602052600090815260409020805460018201546003909201546001600160a01b03918216928216911683565b6040516101579392919061307b565b61021b6103c036600461309e565b6111fa565b6101ad7fb0fdd1623e42dbffda4acd8bd643e1cb69f00f0e83abeaa8150ee42cf0fd105e81565b6101ad7f9a9aef7c1247d5fc769b0185c052913e39673da29a880317dfd20ebf86f26a4981565b60355461042a90600160a01b900463ffffffff1681565b60405163ffffffff9091168152602001610157565b6101ad7f3b5d4cc60d3ec3516ee8ae083bd60934f6eb2a6c54b1229985c41bfb092b260381565b600080546040516301ffc9a760e01b8152620100009091046001600160a01b0316906301ffc9a79061049c908590600401613118565b602060405180830381865afa1580156104b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104dd919061313d565b92915050565b6001600160a01b0316600090815260336020526040902060020154151590565b60008054604051632474521560e21b8152620100009091046001600160a01b0316916391d148549161053a91903390600401613158565b602060405180830381865afa158015610557573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057b919061313d565b61059857604051631886ea7d60e11b815260040160405180910390fd5b6035805463ffffffff909216600160a01b0263ffffffff60a01b19909216919091179055565b604051631bea2f1d60e11b815261ffff821660048201526001600160a01b038316906337d45e3a90602401600060405180830381600087803b15801561060357600080fd5b505af1158015610617573d6000803e3d6000fd5b505050505050565b606061062a846104e3565b6106525783604051631e489be560e01b81526004016106499190612eee565b60405180910390fd5b6106676001600160a01b0385163330866113d0565b6001600160a01b038085166000908152603360209081526040808320815160808101835281548616815260018201549095168584015260028101805483518186028101860185528181529596959294938601938301828280156106f357602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116106d5575b5050509183525050600391909101546001600160a01b03166020918201526040828101515181516001808252818401909352939450929182015b604080518082019091526000808252602082015281526020019060019003908161072d57905050925060008080805b848110156109375760008660400151828151811061077c5761077c613185565b602090810291909101015160345460405163a780f13360e01b81529192506001600160a01b03169063a780f133906107b8908490600401612eee565b602060405180830381865afa1580156107d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f9919061313d565b1561092657602087015160405163cbe52ae360e01b81526000916001600160a01b03169063cbe52ae3906108339085908f9060040161319b565b602060405180830381865afa158015610850573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087491906131b4565b603454604051632a5001c960e01b81529192506000916001600160a01b0390911690632a5001c9906108aa908690600401612eee565b6020604051808303816000875af11580156108c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ed91906131b4565b90506000670de0b6b3a764000061090483856131e3565b61090e9190613210565b905086811115610922578096508397508295505b5050505b5061093081613224565b905061075c565b506001600160a01b03831661095f57604051631b250a0960e21b815260040160405180910390fd5b600061097086600001518a86611428565b905060006127106109818a8261323d565b61098b90856131e3565b6109959190613210565b9050808210156109c2576040516371c4efed60e01b81526004810184905260248101839052604401610649565b6040518060400160405280866001600160a01b0316815260200183815250886000815181106109f3576109f3613185565b6020908102919091010152610a126001600160a01b0386163384611811565b7f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243648b8b604051610a4392919061319b565b60405180910390a1505050505050509392505050565b6000610a64826104e3565b610a835781604051631e489be560e01b81526004016106499190612eee565b6001600160a01b03808316600090815260336020908152604080832081516080810183528154861681526001820154909516858401526002810180548351818602810186018552818152959695929493860193830182828015610b0f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610af1575b5050509183525050600391909101546001600160a01b039081166020909201919091526035548251929350600092610b5992169063ffffffff600160a01b90910481169061183516565b6034546060840151604051631735856760e31b81529293506000926001600160a01b039092169163b9ac2b3891610b9291600401612eee565b602060405180830381865afa158015610baf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd391906131b4565b9050670de0b6b3a7640000610be883836131e3565b610bf29190613210565b95945050505050565b600054610100900460ff1615808015610c1b5750600054600160ff909116105b80610c3c5750610c2a3061188f565b158015610c3c575060005460ff166001145b610c9f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610649565b6000805460ff191660011790558015610cc2576000805461ff0019166101001790555b610ccb8461189e565b603480546001600160a01b0319166001600160a01b0385811691909117909155603580549184166001600160c01b031990921691909117604b60a41b1790558015610d50576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b60008054604051632474521560e21b8152620100009091046001600160a01b0316916391d1485491610d8d91903390600401613158565b602060405180830381865afa158015610daa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dce919061313d565b610deb57604051631886ea7d60e11b815260040160405180910390fd5b826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4d9190613261565b60ff16601214610e72578260405163144a426560e31b81526004016106499190612eee565b6001600160a01b0383811660009081526033602052604080822060030154603554915162439f4b60e91b81528685166004820152600160a01b830463ffffffff1660248201529084161515938392169063873e960090604401606060405180830381865afa158015610ee8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0c919061327c565b92505091508180610f1b575080155b15610f395760405163370aafe360e11b815260040160405180910390fd5b6001600160a01b038681166000908152603360205260409081902080546001600160a01b03191692881692831790558051630b2339af60e21b81529051632c8ce6bc916004808201926060929091908290030181865afa158015610fa1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc591906132c1565b50506001600160a01b0387811660009081526033602052604080822060010180546001600160a01b03191694909316938417909255815163071bc3c960e01b8152915163071bc3c99260048082019392918290030181865afa15801561102f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611057919081019061338a565b6001600160a01b03871660009081526033602090815260409091208251611088936002909201929190910190612e53565b506001600160a01b03808716600090815260336020526040808220600101548151630a40bee560e41b815291519293169163a40bee50916004808201926060929091908290030181865afa1580156110e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611108919061341d565b50915050846001600160a01b0316816001600160a01b03161461113e5760405163ad2da8fd60e01b815260040160405180910390fd5b6001600160a01b03878116600090815260336020526040902060030180546001600160a01b03191691871691909117905583156111b5577f63158a2ba74dcc8fbe165d0f7bdd9908d7627a717c167d58c0c8f809696572528787876040516111a89392919061307b565b60405180910390a16111f1565b7f8c768b5da89e637b23caac626ccd760ef89b9e8eaa2f45bbf8c9d68e231dabef8787876040516111e89392919061307b565b60405180910390a15b50505050505050565b60008054604051632474521560e21b8152620100009091046001600160a01b0316916391d148549161123191903390600401613158565b602060405180830381865afa15801561124e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611272919061313d565b61128f57604051631886ea7d60e11b815260040160405180910390fd5b6001600160a01b0381166112b65760405163d27b444360e01b815260040160405180910390fd5b60005b82811015610d505760008484838181106112d5576112d5613185565b90506020020160208101906112ea9190612f17565b90506000816001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161131a9190612eee565b602060405180830381865afa158015611337573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061135b91906131b4565b905080156113bb576113776001600160a01b0383168583611811565b816001600160a01b03167faaeda929aa102e867049528ec7cd2499e3a2f8846e736ae7935f234dfbf500d982866040516113b2929190613158565b60405180910390a25b505080806113c890613224565b9150506112b9565b610d50846323b872dd60e01b8585856040516024016113f193929190613460565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526119cf565b600080600080866001600160a01b0316632c8ce6bc6040518163ffffffff1660e01b8152600401606060405180830381865afa15801561146c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061149091906132c1565b925092509250866001600160a01b031663a9059cbb88886040518363ffffffff1660e01b81526004016114c492919061319b565b6020604051808303816000875af11580156114e3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611507919061313d565b506000826001600160a01b0316632f13b60c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611548573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061156c919061313d565b1561166f57604051633dae446f60e21b81526000906001600160a01b038a169063f6b911bc906115a490889087908d90600401613460565b60408051808303816000875af11580156115c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e69190613484565b5090506000836001600160a01b031663bcb7ea5d876040518263ffffffff1660e01b81526004016116179190612eee565b6020604051808303816000875af1158015611636573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061165a91906131b4565b905061166681836134a8565b9250505061177e565b600080896001600160a01b031663f6b911bc878c8c6040518463ffffffff1660e01b81526004016116a293929190613460565b60408051808303816000875af11580156116c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e49190613484565b60408051600080825260208201928390526329910b1160e01b909252929450909250906001600160a01b038c16906329910b1190611729908a9086906024810161350b565b60408051808303816000875af1158015611747573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061176b9190613484565b50905061177881846134a8565b93505050505b60405163769f8e5d60e01b8152306004820152602481018290526001600160a01b038781166044830152600060648301526001608483015285169063769f8e5d9060a4016020604051808303816000875af11580156117e1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061180591906131b4565b98975050505050505050565b6118308363a9059cbb60e01b84846040516024016113f192919061319b565b505050565b600080600061184c856001600160a01b0316611aa4565b91509150600061185d868684611cd4565b90508183106118705792506104dd915050565b8161187b84836131e3565b6118859190613210565b9695505050505050565b6001600160a01b03163b151590565b600054610100900460ff166119095760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610649565b6000805462010000600160b01b031916620100006001600160a01b0384169081029190911790915515806119ae57506040516301ffc9a760e01b81526001600160a01b038216906301ffc9a79061196b90637965db0b60e01b90600401613118565b602060405180830381865afa158015611988573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ac919061313d565b155b156119cc576040516384d942fd60e01b815260040160405180910390fd5b50565b6000611a24826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611e619092919063ffffffff16565b9050805160001480611a45575080806020019051810190611a45919061313d565b6118305760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610649565b600080600080846001600160a01b0316632c8ce6bc6040518163ffffffff1660e01b8152600401606060405180830381865afa158015611ae8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b0c91906132c1565b9250509150816001600160a01b0316633ba0b9a96040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b7391906131b4565b93506000816001600160a01b031663d2a3584e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611bb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bd991906131b4565b9050816001600160a01b031663516399df6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c3d919061313d565b8015611cb2575043826001600160a01b03166360e0a9e16040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ca79190613532565b6001600160801b0316145b15611cbf57809350611ccc565b611cc98582611e78565b93505b505050915091565b600080846001600160a01b031663794052f360006040518263ffffffff1660e01b8152600401611d049190612eee565b61012060405180830381865afa158015611d22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d46919061355b565b90506000428260a0015111611d7657611d63848360200151611e90565b8251611d6f91906135dd565b9050611e42565b6000611d83838642611ecc565b9050600080611d9389868a611fcd565b915091506000611dbc611db7856040015185611daf9190613605565b86519061203c565b61205f565b90506000611e01611dcd8385612474565b611ddf90670de0b6b3a76400006135dd565b88516020880151611df190869061203c565b611dfb9190613605565b90612474565b9050611e1784828960000151611dfb91906135dd565b611e218285612474565b8660200151611e309190613605565b611e3a91906135dd565b955050505050505b611885611e5c83604001518361247490919063ffffffff16565b61249a565b6060611e7084846000856124ad565b949350505050565b6000818311611e875781611e89565b825b9392505050565b60008060008312611ea2576001611ea6565b6000195b9050611ec2611ebd85611eb886612588565b61259f565b6125be565b611e70908261362c565b611ef76040518060800160405280600081526020016000815260200160008152602001600081525090565b60a08401518210611f1b5760405163b2094b5960e01b815260040160405180910390fd5b6000828560a00151611f2d919061323d565b9050611f3985826125d4565b82526020850151611f4b908590611e90565b602083015284511580611f6057506020820151155b15611f8e578451602083015160405163b1c4aefb60e01b815260048101929092526024820152604401610649565b611fac85600001518661010001518460200151856000015185612630565b604083015260c0850151611fc090826126b1565b6060830152509392505050565b60008080611fe46001600160a01b038716856126e5565b90506000428660a00151611ff8919061323d565b905061200482826126b1565b93506000612017876101000151836126b1565b9050600261202586836135dd565b61202f919061365c565b9350505050935093915050565b600080612049838561362c565b9050670de0b6b3a7640000815b05949350505050565b6000680238fd42c5cf03ffff198212158015612084575068070c1cc73b00c800008213155b6120c35760405162461bcd60e51b815260206004820152601060248201526f125b9d985b1a5908195e1c1bdb995b9d60821b6044820152606401610649565b60008212156120fb576120d88260000361205f565b6a0c097ce7bc90715b34b9f160241b816120f4576120f46131fa565b0592915050565b60006806f05b59d3b2000000831261213957506806f05b59d3b1ffffff199091019072195e54c5dd42177f53a27172fa9ec63026282760241b61216f565b6803782dace9d9000000831261216b57506803782dace9d8ffffff19909101906b1425982cf597cd205cef738061216f565b5060015b6064929092029168056bc75e2d6310000068ad78ebc5ac6200000084126121bf5768ad78ebc5ac61ffffff199093019268056bc75e2d631000006e01855144814a7ff805980ff008400082020590505b6856bc75e2d63100000084126121fb576856bc75e2d630ffffff199093019268056bc75e2d631000006b02df0ab5a80a22c61ab5a70082020590505b682b5e3af16b18800000841261223557682b5e3af16b187fffff199093019268056bc75e2d63100000693f1fce3da636ea5cf85082020590505b6815af1d78b58c400000841261226f576815af1d78b58c3fffff199093019268056bc75e2d63100000690127fa27722cc06cc5e282020590505b680ad78ebc5ac620000084126122a857680ad78ebc5ac61fffff199093019268056bc75e2d6310000068280e60114edb805d0382020590505b68056bc75e2d6310000084126122e15768056bc75e2d630fffff199093019268056bc75e2d63100000680ebc5fb4174612111082020590505b6802b5e3af16b1880000841261231a576802b5e3af16b187ffff199093019268056bc75e2d631000006808f00f760a4b2db55d82020590505b68015af1d78b58c4000084126123535768015af1d78b58c3ffff199093019268056bc75e2d631000006806f5f177578893793782020590505b68056bc75e2d631000008481019085906002908280020505918201919050600368056bc75e2d631000008783020505918201919050600468056bc75e2d631000008783020505918201919050600568056bc75e2d631000008783020505918201919050600668056bc75e2d631000008783020505918201919050600768056bc75e2d631000008783020505918201919050600868056bc75e2d631000008783020505918201919050600968056bc75e2d631000008783020505918201919050600a68056bc75e2d631000008783020505918201919050600b68056bc75e2d631000008783020505918201919050600c68056bc75e2d631000008783020505918201919050606468056bc75e2d63100000848402058502059695505050505050565b600080612489670de0b6b3a76400008561362c565b9050828181612056576120566131fa565b6000808212156124a957600080fd5b5090565b60608247101561250e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610649565b600080866001600160a01b0316858760405161252a919061368a565b60006040518083038185875af1925050503d8060008114612567576040519150601f19603f3d011682016040523d82523d6000602084013e61256c565b606091505b509150915061257d8783838761280c565b979650505050505050565b60008082136124a95761259a826136a6565b6104dd565b6000670de0b6b3a76400006125b484846131e3565b611e899190613210565b60006001600160ff1b038211156124a957600080fd5b60006125df826125be565b6125f1611ebd6201518061016d6131e3565b8460800151612600919061362c565b61260a919061365c565b9050600081136104dd57604051630e520c3b60e11b815260048101829052602401610649565b60008061263d86846126b1565b9050670de0b6b3a764000081121561266b5760405163329e322960e21b815260048101829052602401610649565b600061268161267a878a6135dd565b8990612474565b9050600061268e82612883565b905061269a8187612474565b6126a49084613605565b9998505050505050505050565b6000806126c36201518061016d6131e3565b6126cd84866131e3565b6126d79190613210565b9050611e70611db7826125be565b60408051600280825260608201835260009283929190602083019080368337019050509050828160008151811061271e5761271e613185565b63ffffffff9092166020928302919091019091015260405163883bdbfd60e01b81526000906001600160a01b0386169063883bdbfd906127629085906004016136c2565b600060405180830381865afa15801561277f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526127a7919081019061370c565b90508363ffffffff16816000815181106127c3576127c3613185565b6020026020010151826001815181106127de576127de613185565b60200260200101516127f091906137a7565b6127fa91906137c7565b6001600160d81b031695945050505050565b60608315612879578251600003612872576128268561188f565b6128725760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610649565b5081611e70565b611e7083836128d6565b6000670de0b6b3a764000082036128ad5760405163a9c8b14d60e01b815260040160405180910390fd5b60006128cb6128c484670de0b6b3a7640000613605565b8490612474565b9050611e8981612900565b8151156128e65781518083602001fd5b8060405162461bcd60e51b815260040161064991906137ed565b60008082136129415760405162461bcd60e51b815260206004820152600d60248201526c6f7574206f6620626f756e647360981b6044820152606401610649565b670c7d713b49da00008213801561295f5750670f43fc2c04ee000082125b1561298357670de0b6b3a764000061297683612991565b816120f4576120f46131fa565b6104dd82612ab0565b919050565b670de0b6b3a7640000026000806a0c097ce7bc90715b34b9f160241b808401906ec097ce7bc90715b34b9f0fffffffff19850102816129d2576129d26131fa565b05905060006a0c097ce7bc90715b34b9f160241b82800205905081806a0c097ce7bc90715b34b9f160241b81840205915060038205016a0c097ce7bc90715b34b9f160241b82840205915060058205016a0c097ce7bc90715b34b9f160241b82840205915060078205016a0c097ce7bc90715b34b9f160241b82840205915060098205016a0c097ce7bc90715b34b9f160241b828402059150600b8205016a0c097ce7bc90715b34b9f160241b828402059150600d8205016a0c097ce7bc90715b34b9f160241b828402059150600f82050160020295945050505050565b6000670de0b6b3a7640000821215612af157612ae8826a0c097ce7bc90715b34b9f160241b81612ae257612ae26131fa565b05612ab0565b60000392915050565b6000775803bcc5cb9634ba4cfb2213f784019318ed4dcb6017880f60361b8312612b3c5772195e54c5dd42177f53a27172fa9ec63026282760241b830592506806f05b59d3b2000000015b6f8bcc0026baae9e45e470190267a230cf60191b8312612b73576b1425982cf597cd205cef7380830592506803782dace9d9000000015b606492830292026e01855144814a7ff805980ff00840008312612bbb576e01855144814a7ff805980ff008400068056bc75e2d63100000840205925068ad78ebc5ac62000000015b6b02df0ab5a80a22c61ab5a7008312612bf6576b02df0ab5a80a22c61ab5a70068056bc75e2d6310000084020592506856bc75e2d631000000015b693f1fce3da636ea5cf8508312612c2d57693f1fce3da636ea5cf85068056bc75e2d631000008402059250682b5e3af16b18800000015b690127fa27722cc06cc5e28312612c6457690127fa27722cc06cc5e268056bc75e2d6310000084020592506815af1d78b58c400000015b68280e60114edb805d038312612c995768280e60114edb805d0368056bc75e2d631000008402059250680ad78ebc5ac6200000015b680ebc5fb417461211108312612cc457680ebc5fb4174612111068056bc75e2d631000009384020592015b6808f00f760a4b2db55d8312612cf9576808f00f760a4b2db55d68056bc75e2d6310000084020592506802b5e3af16b1880000015b6806f5f17757889379378312612d2e576806f5f177578893793768056bc75e2d63100000840205925068015af1d78b58c40000015b6806248f33704b2866038312612d62576806248f33704b28660368056bc75e2d63100000840205925067ad78ebc5ac620000015b6805c548670b9510e7ac8312612d96576805c548670b9510e7ac68056bc75e2d6310000084020592506756bc75e2d6310000015b600068056bc75e2d63100000840168056bc75e2d631000008086030281612dbf57612dbf6131fa565b059050600068056bc75e2d63100000828002059050818068056bc75e2d63100000818402059150600382050168056bc75e2d63100000828402059150600582050168056bc75e2d63100000828402059150600782050168056bc75e2d63100000828402059150600982050168056bc75e2d63100000828402059150600b820501600202606485820105979650505050505050565b828054828255906000526020600020908101928215612ea8579160200282015b82811115612ea857825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190612e73565b506124a99291505b808211156124a95760008155600101612eb0565b600060208284031215612ed657600080fd5b81356001600160e01b031981168114611e8957600080fd5b6001600160a01b0391909116815260200190565b6001600160a01b03811681146119cc57600080fd5b600060208284031215612f2957600080fd5b8135611e8981612f02565b600060208284031215612f4657600080fd5b813563ffffffff81168114611e8957600080fd5b61ffff811681146119cc57600080fd5b60008060408385031215612f7d57600080fd5b8235612f8881612f02565b91506020830135612f9881612f5a565b809150509250929050565b600080600060608486031215612fb857600080fd5b8335612fc381612f02565b95602085013595506040909401359392505050565b602080825282518282018190526000919060409081850190868401855b8281101561302357815180516001600160a01b03168552860151868501529284019290850190600101612ff5565b5091979650505050505050565b60008060006060848603121561304557600080fd5b833561305081612f02565b9250602084013561306081612f02565b9150604084013561307081612f02565b809150509250925092565b6001600160a01b0393841681529183166020830152909116604082015260600190565b6000806000604084860312156130b357600080fd5b83356001600160401b03808211156130ca57600080fd5b818601915086601f8301126130de57600080fd5b8135818111156130ed57600080fd5b8760208260051b850101111561310257600080fd5b6020928301955093505084013561307081612f02565b6001600160e01b031991909116815260200190565b8051801515811461298c57600080fd5b60006020828403121561314f57600080fd5b611e898261312d565b9182526001600160a01b0316602082015260400190565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6001600160a01b03929092168252602082015260400190565b6000602082840312156131c657600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176104dd576104dd6131cd565b634e487b7160e01b600052601260045260246000fd5b60008261321f5761321f6131fa565b500490565b600060018201613236576132366131cd565b5060010190565b818103818111156104dd576104dd6131cd565b805160ff8116811461298c57600080fd5b60006020828403121561327357600080fd5b611e8982613250565b60008060006060848603121561329157600080fd5b61329a8461312d565b925060208401516132aa81612f5a565b91506132b86040850161312d565b90509250925092565b6000806000606084860312156132d657600080fd5b83516132e181612f02565b60208501519093506132f281612f02565b604085015190925061307081612f02565b60405161012081016001600160401b03811182821017156133265761332661316f565b60405290565b604051601f8201601f191681016001600160401b03811182821017156133545761335461316f565b604052919050565b60006001600160401b038211156133755761337561316f565b5060051b60200190565b805161298c81612f02565b6000602080838503121561339d57600080fd5b82516001600160401b038111156133b357600080fd5b8301601f810185136133c457600080fd5b80516133d76133d28261335c565b61332c565b81815260059190911b820183019083810190878311156133f657600080fd5b928401925b8284101561257d57835161340e81612f02565b825292840192908401906133fb565b60008060006060848603121561343257600080fd5b83516002811061344157600080fd5b602085015190935061345281612f02565b91506132b860408501613250565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6000806040838503121561349757600080fd5b505080516020909101519092909150565b808201808211156104dd576104dd6131cd565b60005b838110156134d65781810151838201526020016134be565b50506000910152565b600081518084526134f78160208601602086016134bb565b601f01601f19169290920160200192915050565b60018060a01b0384168152826020820152606060408201526000610bf260608301846134df565b60006020828403121561354457600080fd5b81516001600160801b0381168114611e8957600080fd5b6000610120828403121561356e57600080fd5b613576613303565b82518152602083015160208201526040830151604082015261359a6060840161337f565b60608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e08201526101008084015181830152508091505092915050565b80820182811260008312801582168215821617156135fd576135fd6131cd565b505092915050565b8181036000831280158383131683831282161715613625576136256131cd565b5092915050565b80820260008212600160ff1b84141615613648576136486131cd565b81810583148215176104dd576104dd6131cd565b60008261366b5761366b6131fa565b600160ff1b821460001984141615613685576136856131cd565b500590565b6000825161369c8184602087016134bb565b9190910192915050565b6000600160ff1b82016136bb576136bb6131cd565b5060000390565b6020808252825182820181905260009190848201906040850190845b8181101561370057835163ffffffff16835292840192918401916001016136de565b50909695505050505050565b6000602080838503121561371f57600080fd5b82516001600160401b0381111561373557600080fd5b8301601f8101851361374657600080fd5b80516137546133d28261335c565b81815260059190911b8201830190838101908783111561377357600080fd5b928401925b8284101561257d5783516001600160d81b03811681146137985760008081fd5b82529284019290840190613778565b6001600160d81b03828116828216039080821115613625576136256131cd565b60006001600160d81b03838116806137e1576137e16131fa565b92169190910492915050565b602081526000611e8960208301846134df56fea164736f6c6343000811000a",
  "devdoc": {
    "details": "See ILPAdapter interface for full details.",
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "emergencyWithdraw(address[],address)": {
        "details": "This function is restricted to the admin and allows for emergency withdrawal of tokens.",
        "params": {
          "receiver": "Address of the receiver to receive the tokens.",
          "tokens": "List of tokens to withdraw."
        }
      },
      "increaseObservationCardinality(address,uint16)": {
        "details": "This sets the target cardinality that the oracle will grow to as new observations are written. The actual cardinality will increase gradually with each new observation until it reaches this target. This must be called before registering an LP token to ensure enough price observations for TWAP calculations. After increaseObservationCardinality call you must wai at least 20 min to allow the oracle to accumulate enough price observations For 1200 seconds (20 min) cardinality = 1200 / blockTime. Also we can * 1.2 to have buffer for safety. For mainnet (12 seconds for block) cardinality = 120, for Arbitrum (0.3 sec for block) = 4800.",
        "params": {
          "cardinality": "The target number of observations the oracle should maintain",
          "market": "The address of the Pendle market whose oracle cardinality should be increased"
        }
      },
      "isAdapterLP(address)": {
        "params": {
          "asset": "- address of LP token to check*"
        }
      },
      "registerLP(address,address,address)": {
        "details": "In case when oracle is not ready, you should call market.increaseObservationsCardinalityNext(t)      and wait 20 minutes to register LP      [IMPORTANT] - Before register admin should check that SY contract don't have callbacks.      It should be very rare to have a SY with a callback function, but need to pay attention on it.",
        "params": {
          "lp": "address of LP token",
          "market": "market for LP token*"
        }
      },
      "setTwapWindow(uint32)": {
        "params": {
          "_twapWindow": "New TWAP window in seconds"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      }
    },
    "title": "PendleLPAdapter",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "emergencyWithdraw(address[],address)": {
        "notice": "Withdraw tokens from the adapter in case of emergency."
      },
      "getFiatPrice1e18(address)": {
        "notice": "Idea of this implementation was in Pendle example*"
      },
      "increaseObservationCardinality(address,uint16)": {
        "notice": "Helper function to increases the oracle observation cardinality for a Pendle market"
      },
      "isAdapterLP(address)": {
        "notice": "Returns if asset ig Balancer LP token, registered in our adapter"
      },
      "registerLP(address,address,address)": {
        "notice": "Register the given LP token address and set the LP info"
      },
      "setTwapWindow(uint32)": {
        "notice": "Set the TWAP window for price calculation"
      },
      "withdraw(address,uint256,uint256)": {
        "notice": "Pendle unwrap LP only to 1 token, but our ILPAdapter is more general, so we need to return here the array of WithdrawResult.*"
      }
    },
    "notice": "Adapter for Pendle LP token.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1226,
        "contract": "contracts/exchange/contracts/periphery/contracts/adapters/Pendle/PendleLPAdapter.sol:PendleLPAdapter",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 1229,
        "contract": "contracts/exchange/contracts/periphery/contracts/adapters/Pendle/PendleLPAdapter.sol:PendleLPAdapter",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 25605,
        "contract": "contracts/exchange/contracts/periphery/contracts/adapters/Pendle/PendleLPAdapter.sol:PendleLPAdapter",
        "label": "ACCESS_CONTROL_SINGLETON",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(ISuAccessControl)32864"
      },
      {
        "astId": 25893,
        "contract": "contracts/exchange/contracts/periphery/contracts/adapters/Pendle/PendleLPAdapter.sol:PendleLPAdapter",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 30341,
        "contract": "contracts/exchange/contracts/periphery/contracts/adapters/Pendle/PendleLPAdapter.sol:PendleLPAdapter",
        "label": "lps",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_struct(PendleLPInfo)33442_storage)"
      },
      {
        "astId": 30344,
        "contract": "contracts/exchange/contracts/periphery/contracts/adapters/Pendle/PendleLPAdapter.sol:PendleLPAdapter",
        "label": "ORACLE",
        "offset": 0,
        "slot": "52",
        "type": "t_contract(ISuOracleAggregator)34007"
      },
      {
        "astId": 30347,
        "contract": "contracts/exchange/contracts/periphery/contracts/adapters/Pendle/PendleLPAdapter.sol:PendleLPAdapter",
        "label": "PENDLE_ORACLE",
        "offset": 0,
        "slot": "53",
        "type": "t_contract(IPPYLpOracle)13957"
      },
      {
        "astId": 30352,
        "contract": "contracts/exchange/contracts/periphery/contracts/adapters/Pendle/PendleLPAdapter.sol:PendleLPAdapter",
        "label": "TWAP_WINDOW",
        "offset": 20,
        "slot": "53",
        "type": "t_uint32"
      },
      {
        "astId": 30891,
        "contract": "contracts/exchange/contracts/periphery/contracts/adapters/Pendle/PendleLPAdapter.sol:PendleLPAdapter",
        "label": "__gap",
        "offset": 0,
        "slot": "54",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IPMarket)13878": {
        "encoding": "inplace",
        "label": "contract IPMarket",
        "numberOfBytes": "20"
      },
      "t_contract(IPPYLpOracle)13957": {
        "encoding": "inplace",
        "label": "contract IPPYLpOracle",
        "numberOfBytes": "20"
      },
      "t_contract(IStandardizedYield)14359": {
        "encoding": "inplace",
        "label": "contract IStandardizedYield",
        "numberOfBytes": "20"
      },
      "t_contract(ISuAccessControl)32864": {
        "encoding": "inplace",
        "label": "contract ISuAccessControl",
        "numberOfBytes": "20"
      },
      "t_contract(ISuOracleAggregator)34007": {
        "encoding": "inplace",
        "label": "contract ISuOracleAggregator",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(PendleLPInfo)33442_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IPendleLPAdapter.PendleLPInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(PendleLPInfo)33442_storage"
      },
      "t_struct(PendleLPInfo)33442_storage": {
        "encoding": "inplace",
        "label": "struct IPendleLPAdapter.PendleLPInfo",
        "members": [
          {
            "astId": 33433,
            "contract": "contracts/exchange/contracts/periphery/contracts/adapters/Pendle/PendleLPAdapter.sol:PendleLPAdapter",
            "label": "market",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IPMarket)13878"
          },
          {
            "astId": 33436,
            "contract": "contracts/exchange/contracts/periphery/contracts/adapters/Pendle/PendleLPAdapter.sol:PendleLPAdapter",
            "label": "SY",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IStandardizedYield)14359"
          },
          {
            "astId": 33439,
            "contract": "contracts/exchange/contracts/periphery/contracts/adapters/Pendle/PendleLPAdapter.sol:PendleLPAdapter",
            "label": "underlyingTokens",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 33441,
            "contract": "contracts/exchange/contracts/periphery/contracts/adapters/Pendle/PendleLPAdapter.sol:PendleLPAdapter",
            "label": "mainUnderlyingToken",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}