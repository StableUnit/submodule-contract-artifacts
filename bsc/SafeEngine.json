{
  "address": "0x55FCE353C25565D7b6E849B5A866386cD2bFd494",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "BadAccessControlSingleton",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAdminError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAlerterError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyCDPAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyDAOError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyDisablerAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyLiquidationAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyMintAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyProxyActionsError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyRewardAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyRoleError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyVaultAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyVotingEscrowError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "onlyAuctionAccessRole",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "usr",
          "type": "address"
        }
      ],
      "name": "ApproveSAFEModification",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "cdp",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "collateralCounterparty",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "debtCounterparty",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "deltaCollateral",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "deltaDebt",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "globalUnbackedDebt",
          "type": "uint256"
        }
      ],
      "name": "ConfiscateSAFECollateralAndDebt",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "debtDestination",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "coinDestination",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rad",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debtBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "coinBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "globalUnbackedDebt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "globalDebt",
          "type": "uint256"
        }
      ],
      "name": "CreateUnbackedDebt",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "usr",
          "type": "address"
        }
      ],
      "name": "DenySAFEModification",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "DisableContract",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        }
      ],
      "name": "InitializeCollateralType",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "usr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "wad",
          "type": "int256"
        }
      ],
      "name": "ModifyCollateralBalance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "what",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "data",
          "type": "uint256"
        }
      ],
      "name": "ModifyParameters",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "what",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "data",
          "type": "uint256"
        }
      ],
      "name": "ModifyParameters",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "cdp",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "collateralSource",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "debtDestination",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "deltaCollateral",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "deltaDebt",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockedCollateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "generatedDebt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "globalDebt",
          "type": "uint256"
        }
      ],
      "name": "ModifySAFECollateralization",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rad",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debtBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "coinBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "globalUnbackedDebt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "globalDebt",
          "type": "uint256"
        }
      ],
      "name": "SettleDebt",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "TransferCollateral",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rad",
          "type": "uint256"
        }
      ],
      "name": "TransferInternalCoins",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "deltaCollateral",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "deltaDebt",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "srcLockedCollateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "srcGeneratedDebt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dstLockedCollateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dstGeneratedDebt",
          "type": "uint256"
        }
      ],
      "name": "TransferSAFECollateralAndDebt",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "surplusDst",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "accumulatedRate",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "globalDebt",
          "type": "uint256"
        }
      ],
      "name": "UpdateAccumulatedRate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "safetyPrice",
          "type": "uint256"
        }
      ],
      "name": "UpdateSafetyPrice",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACCESS_CONTROL_SINGLETON",
      "outputs": [
        {
          "internalType": "contract ISuAccessControl",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ALERTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "AUCTION_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CDP_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DAO_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DISABLER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIQUIDATION_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINT_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ORACLE",
      "outputs": [
        {
          "internalType": "contract ISuOracleAggregator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROXY_ACTIONS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARD_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VOTING_ESCROW_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "usr",
          "type": "address"
        }
      ],
      "name": "approveSAFEModification",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "cdpRights",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "coinBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "collateralTypes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "debtAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accumulatedRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "debtCeiling",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "debtFloor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "safetyPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidationRatio",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "collateralAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "safetyPriceBlockNumber",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "cdp",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "collateralCounterparty",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "debtCounterparty",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "deltaCollateral",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "deltaDebt",
          "type": "int256"
        }
      ],
      "name": "confiscateSAFECollateralAndDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractEnabled",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "debtDestination",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "coinDestination",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rad",
          "type": "uint256"
        }
      ],
      "name": "createUnbackedDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "debtBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultLiquidationRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "usr",
          "type": "address"
        }
      ],
      "name": "denySAFEModification",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disableContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "globalDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "globalDebtCeiling",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "globalUnbackedDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "accessControl",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "collateralAddress",
          "type": "address"
        }
      ],
      "name": "initializeCollateralType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "usr",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "wad",
          "type": "int256"
        }
      ],
      "name": "modifyCollateralBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "what",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "data",
          "type": "uint256"
        }
      ],
      "name": "modifyParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "what",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "data",
          "type": "uint256"
        }
      ],
      "name": "modifyParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "cdp",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "collateralSource",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "debtDestination",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "deltaCollateral",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "deltaDebt",
          "type": "int256"
        }
      ],
      "name": "modifySAFECollateralization",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redemptionPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "safes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lockedCollateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "generatedDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "safetyPriceValidBlockAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rad",
          "type": "uint256"
        }
      ],
      "name": "settleDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "transferCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rad",
          "type": "uint256"
        }
      ],
      "name": "transferInternalCoins",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "deltaCollateral",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "deltaDebt",
          "type": "int256"
        }
      ],
      "name": "transferSAFECollateralAndDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "surplusDst",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "accumulatedRate",
          "type": "int256"
        }
      ],
      "name": "updateAccumulatedRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        }
      ],
      "name": "updateSafetyPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "8f84b6f1e4072e92a972e80f9a9e23c6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BadAccessControlSingleton\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAdminError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAlerterError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyCDPAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyDAOError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyDisablerAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyLiquidationAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyMintAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyProxyActionsError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRewardAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRoleError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyVaultAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyVotingEscrowError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"onlyAuctionAccessRole\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"ApproveSAFEModification\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"cdp\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collateralCounterparty\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"debtCounterparty\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"deltaCollateral\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"deltaDebt\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"globalUnbackedDebt\",\"type\":\"uint256\"}],\"name\":\"ConfiscateSAFECollateralAndDebt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"debtDestination\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"coinDestination\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rad\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coinBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"globalUnbackedDebt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"globalDebt\",\"type\":\"uint256\"}],\"name\":\"CreateUnbackedDebt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"DenySAFEModification\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DisableContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"}],\"name\":\"InitializeCollateralType\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"wad\",\"type\":\"int256\"}],\"name\":\"ModifyCollateralBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"ModifyParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"ModifyParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"cdp\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collateralSource\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"debtDestination\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"deltaCollateral\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"deltaDebt\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedCollateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"generatedDebt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"globalDebt\",\"type\":\"uint256\"}],\"name\":\"ModifySAFECollateralization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rad\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coinBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"globalUnbackedDebt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"globalDebt\",\"type\":\"uint256\"}],\"name\":\"SettleDebt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"TransferCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rad\",\"type\":\"uint256\"}],\"name\":\"TransferInternalCoins\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"deltaCollateral\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"deltaDebt\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"srcLockedCollateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"srcGeneratedDebt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dstLockedCollateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dstGeneratedDebt\",\"type\":\"uint256\"}],\"name\":\"TransferSAFECollateralAndDebt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"surplusDst\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"accumulatedRate\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"globalDebt\",\"type\":\"uint256\"}],\"name\":\"UpdateAccumulatedRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"safetyPrice\",\"type\":\"uint256\"}],\"name\":\"UpdateSafetyPrice\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACCESS_CONTROL_SINGLETON\",\"outputs\":[{\"internalType\":\"contract ISuAccessControl\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ALERTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AUCTION_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CDP_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAO_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DISABLER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDATION_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ORACLE\",\"outputs\":[{\"internalType\":\"contract ISuOracleAggregator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROXY_ACTIONS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VOTING_ESCROW_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"approveSAFEModification\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cdpRights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"coinBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"collateralTypes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"debtAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accumulatedRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtCeiling\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtFloor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"safetyPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationRatio\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collateralAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"safetyPriceBlockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"cdp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralCounterparty\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"debtCounterparty\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"deltaCollateral\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"deltaDebt\",\"type\":\"int256\"}],\"name\":\"confiscateSAFECollateralAndDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractEnabled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"debtDestination\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"coinDestination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rad\",\"type\":\"uint256\"}],\"name\":\"createUnbackedDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"debtBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultLiquidationRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"denySAFEModification\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalDebtCeiling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalUnbackedDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"accessControl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"collateralAddress\",\"type\":\"address\"}],\"name\":\"initializeCollateralType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"wad\",\"type\":\"int256\"}],\"name\":\"modifyCollateralBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"cdp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralSource\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"debtDestination\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"deltaCollateral\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"deltaDebt\",\"type\":\"int256\"}],\"name\":\"modifySAFECollateralization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redemptionPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"safes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockedCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"generatedDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safetyPriceValidBlockAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rad\",\"type\":\"uint256\"}],\"name\":\"settleDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transferCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rad\",\"type\":\"uint256\"}],\"name\":\"transferInternalCoins\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"deltaCollateral\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"deltaDebt\",\"type\":\"int256\"}],\"name\":\"transferSAFECollateralAndDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"surplusDst\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"accumulatedRate\",\"type\":\"int256\"}],\"name\":\"updateAccumulatedRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"}],\"name\":\"updateSafetyPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"custom:changes\":\"Replaced MakerDAO\\u2019s `authorizedAccounts` with `SuAuthenticatedNonUpgradeable` for access control.                 Removed `LibNote` for event logging, requiring custom events (TODO).                 Added `ISuOracleAggregator` integration for dynamic safety price updates.                 Introduced `redemptionPrice`, `safetyPriceValidBlockAmount`, and `defaultLiquidationRatio`.                 Moved structs to `ISafeEngine` interface.\",\"custom:events\":\"No events are defined; custom events need to be added (as noted in FIXME).                Example placeholder events are included in comments but not emitted due to lack of definition.\",\"custom:security\":\"Only enabled contracts (`contractEnabled == 1`) allow state-changing operations.                 Administrative functions are restricted by SuAuthenticatedNonUpgradeable roles (DAO, Admin, DisablerAccess).                 Only authorized users/contracts (via `cdpRights`) can modify specific Safes or balances.                 Safety price updates rely on ISuOracleAggregator, which must provide reliable price feeds.\",\"custom:usage\":\"- **Initialization**: Deploy with access control and oracle addresses.   ```solidity   SafeEngine safeEngine = new SafeEngine(accessControlAddress, oracleAddress);   ``` - **Collateral Type Setup**: Initialize a collateral type with its token address.   ```solidity   safeEngine.initializeCollateralType(\\\"ETH-A\\\", ethTokenAddress);   ``` - **Parameter Modification**: DAO updates debt ceilings, redemption price, or liquidation ratios.   ```solidity   safeEngine.modifyParameters(\\\"globalDebtCeiling\\\", newCeiling); // Update global debt ceiling   safeEngine.modifyParameters(\\\"ETH-A\\\", \\\"debtCeiling\\\", newCeiling); // Update collateral debt ceiling   ``` - **Safe Operations**: Users or adapters modify Safe collateral/debt via DssProxyActions or direct calls.   ```solidity   safeEngine.modifySAFECollateralization(\\\"ETH-A\\\", safe, collateralSrc, debtDst, deltaCollateral, deltaDebt);   ``` - **Price Updates**: Trigger safety price updates for a collateral type.   ```solidity   safeEngine.updateSafetyPrice(\\\"ETH-A\\\"); // Refresh safety price from oracle   ``` - **Disabling**: DisablerAccess accounts can disable the contract.   ```solidity   safeEngine.disableContract(); // Halt operations   ```\",\"details\":\"Manages collateral, debt, and StablePro coin balances for Safes, tracks global and per-collateral-type debt limits,      and enforces collateralization ratios using safety prices from an oracle. Supports operations like collateral      deposit/withdrawal, debt generation/repayment, liquidation, and settlement. Uses SuAuthenticatedNonUpgradeable for      access control and integrates with ISuOracleAggregator for price feeds. Can be disabled by authorized accounts to      halt operations. This contract is a fork of MakerDAO\\u2019s Vat.sol, adapted for StableUnit with features like dynamic      safety price updates and redemption price.\",\"kind\":\"dev\",\"methods\":{\"approveSAFEModification(address)\":{\"details\":\"Sets `cdpRights[msg.sender][usr] = 1`.\",\"params\":{\"usr\":\"Address to grant modification rights.\"}},\"confiscateSAFECollateralAndDebt(bytes32,address,address,address,int256,int256)\":{\"custom:access\":\"OnlyCDPAccess\",\"details\":\"Transfers collateral and debt to counterparties, typically for auctions. Requires CDP access permissions.\",\"params\":{\"cdp\":\"Address of the Safe to confiscate.\",\"collateralCounterparty\":\"Address to debit collateral from.\",\"collateralType\":\"Unique identifier for the collateral type.\",\"debtCounterparty\":\"Address to debit debt from.\",\"deltaCollateral\":\"Amount to confiscate collateral [wad].\",\"deltaDebt\":\"Amount to confiscate debt [wad].\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"createUnbackedDebt(address,address,uint256)\":{\"custom:access\":\"OnlyCDPAccess\",\"details\":\"Increases debt and coin balances for destination addresses. Requires CDP access permissions.\",\"params\":{\"coinDestination\":\"Address to assign the StablePro coins.\",\"debtDestination\":\"Address to assign the unbacked debt.\",\"rad\":\"Amount of unbacked debt to create [rad].\"}},\"denySAFEModification(address)\":{\"details\":\"Sets `cdpRights[msg.sender][usr] = 0`.\",\"params\":{\"usr\":\"Address to revoke modification rights.\"}},\"disableContract()\":{\"custom:access\":\"OnlyDisablerAccess\",\"details\":\"Sets `contractEnabled` to 0 and emits a placeholder event. Only callable by DisablerAccess accounts.\"},\"initialize(address,address)\":{\"details\":\"Sets initial state: contract enabled, redemption price to 1e27, safety price validity to 1 block,      and default liquidation ratio to 150%. Inherits access control from SuAuthenticatedNonUpgradeable.\",\"params\":{\"accessControl\":\"Address of the access control singleton contract.\",\"oracle\":\"Address of the ISuOracleAggregator contract.\"}},\"initializeCollateralType(bytes32,address)\":{\"custom:access\":\"OnlyAdmin\",\"details\":\"Sets accumulated rate to 1e27 and assigns the collateral token address and default liquidation ratio.      Reverts if already initialized. Only callable by Admin.\",\"params\":{\"collateralAddress\":\"Address of the collateral token contract.\",\"collateralType\":\"Unique identifier for the collateral type (e.g., \\\"ETH-A\\\").\"}},\"modifyCollateralBalance(bytes32,address,int256)\":{\"custom:access\":\"OnlyCDPAccess\",\"details\":\"Adds or subtracts collateral tokens, typically called by CollateralJoin adapters.      Requires caller to have CDP access permissions.\",\"params\":{\"collateralType\":\"Unique identifier for the collateral type.\",\"usr\":\"Address to modify the collateral balance for.\",\"wad\":\"Amount to add (positive) or subtract (negative) [wad].\"}},\"modifyParameters(bytes32,bytes32,uint256)\":{\"custom:access\":\"OnlyDAO\",\"details\":\"Updates parameters like debt ceiling, debt floor, or liquidation ratio.      Requires contract to be enabled. Only callable by DAO.\",\"params\":{\"collateralType\":\"Unique identifier for the collateral type.\",\"data\":\"New value for the parameter.\",\"what\":\"Parameter to modify (e.g., \\\"debtCeiling\\\", \\\"liquidationRatio\\\").\"}},\"modifyParameters(bytes32,uint256)\":{\"custom:access\":\"OnlyDAO\",\"details\":\"Updates parameters like global debt ceiling, redemption price, default liquidation ratio, or safety price validity.      Requires contract to be enabled. Only callable by DAO.\",\"params\":{\"data\":\"New value for the parameter.\",\"what\":\"Parameter to modify (e.g., \\\"globalDebtCeiling\\\", \\\"redemptionPrice\\\").\"}},\"modifySAFECollateralization(bytes32,address,address,address,int256,int256)\":{\"details\":\"Updates Safe state, checks debt ceilings, collateralization ratio, and permissions.      Requires contract to be enabled and collateral type to be initialized.\",\"params\":{\"cdp\":\"Address of the Safe to modify.\",\"collateralSource\":\"Address to debit/credit collateral.\",\"collateralType\":\"Unique identifier for the collateral type.\",\"debtDestination\":\"Address to debit/credit debt.\",\"deltaCollateral\":\"Amount to add (positive) or remove (negative) collateral [wad].\",\"deltaDebt\":\"Amount to add (positive) or remove (negative) debt [wad].\"}},\"settleDebt(uint256)\":{\"details\":\"Reduces debt and coin balances for the caller, typically used by AccountingEngine.\",\"params\":{\"rad\":\"Amount of debt to settle [rad].\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferCollateral(bytes32,address,address,uint256)\":{\"details\":\"Requires the caller to have permission to modify the source address\\u2019s Safe.\",\"params\":{\"collateralType\":\"Unique identifier for the collateral type.\",\"dst\":\"Destination address to credit collateral to.\",\"src\":\"Source address to debit collateral from.\",\"wad\":\"Amount of collateral to transfer [wad].\"}},\"transferInternalCoins(address,address,uint256)\":{\"details\":\"Requires the caller to have permission to modify the source address\\u2019s Safe.\",\"params\":{\"dst\":\"Destination address to credit coins to.\",\"rad\":\"Amount of StablePro coins to transfer [rad].\",\"src\":\"Source address to debit coins from.\"}},\"transferSAFECollateralAndDebt(bytes32,address,address,int256,int256)\":{\"details\":\"Updates source and destination Safe states, ensuring collateralization and debt floor requirements.      Requires caller to have permission for both Safes.\",\"params\":{\"collateralType\":\"Unique identifier for the collateral type.\",\"deltaCollateral\":\"Amount to transfer collateral [wad].\",\"deltaDebt\":\"Amount to transfer debt [wad].\",\"dst\":\"Address of the destination Safe.\",\"src\":\"Address of the source Safe.\"}},\"updateAccumulatedRate(bytes32,address,int256)\":{\"custom:access\":\"OnlyCDPAccess\",\"details\":\"Adjusts the collateral type\\u2019s rate and credits surplus to the destination address.      Requires contract to be enabled and CDP access permissions.\",\"params\":{\"accumulatedRate\":\"Change in accumulated rate [ray].\",\"collateralType\":\"Unique identifier for the collateral type.\",\"surplusDst\":\"Address to credit surplus StablePro coins.\"}},\"updateSafetyPrice(bytes32)\":{\"details\":\"Fetches the collateral\\u2019s fiat price from ISuOracleAggregator, adjusts for token decimals,      and calculates the safety price as (realPrice / redemptionPrice / liquidationRatio).      Only updates if the current safety price is unset or expired based on `safetyPriceValidBlockAmount`.\",\"params\":{\"collateralType\":\"Unique identifier for the collateral type.\"}}},\"title\":\"SafeEngine\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"ORACLE()\":{\"notice\":\"Oracle aggregator providing collateral price feeds.\"},\"approveSAFEModification(address)\":{\"notice\":\"Grants a user permission to modify the caller\\u2019s Safe.\"},\"cdpRights(address,address)\":{\"notice\":\"Maps Safe owners to operators with permission to modify their Safes.\"},\"coinBalance(address)\":{\"notice\":\"Tracks internal StablePro coin balances per user [rad].\"},\"collateralTypes(bytes32)\":{\"notice\":\"Maps collateral types to their configuration (e.g., debt ceiling, safety price).\"},\"confiscateSAFECollateralAndDebt(bytes32,address,address,address,int256,int256)\":{\"notice\":\"Confiscates collateral and debt from a Safe during liquidation.\"},\"contractEnabled()\":{\"notice\":\"Tracks whether the contract is enabled (1) or disabled (0).\"},\"createUnbackedDebt(address,address,uint256)\":{\"notice\":\"Creates unbacked debt, typically for bad debt handling.\"},\"debtBalance(address)\":{\"notice\":\"Tracks debt balances per user, offsetting coin balances [rad].\"},\"defaultLiquidationRatio()\":{\"notice\":\"Default liquidation ratio set for new collateral types (e.g., 150%) [ray].\"},\"denySAFEModification(address)\":{\"notice\":\"Revokes a user\\u2019s permission to modify the caller\\u2019s Safe.\"},\"disableContract()\":{\"notice\":\"Disables the contract, preventing further state-changing operations.\"},\"globalDebt()\":{\"notice\":\"Total debt issued across all Safes [rad].\"},\"globalDebtCeiling()\":{\"notice\":\"Maximum debt allowed across all Safes [rad].\"},\"globalUnbackedDebt()\":{\"notice\":\"Total unbacked debt not covered by collateral [rad].\"},\"initialize(address,address)\":{\"notice\":\"Initializes the SafeEngine with access control and oracle addresses.\"},\"initializeCollateralType(bytes32,address)\":{\"notice\":\"Initializes a new collateral type with its token address.\"},\"modifyCollateralBalance(bytes32,address,int256)\":{\"notice\":\"Modifies a user\\u2019s collateral balance for a collateral type.\"},\"modifyParameters(bytes32,bytes32,uint256)\":{\"notice\":\"Modifies parameters for a specific collateral type.\"},\"modifyParameters(bytes32,uint256)\":{\"notice\":\"Modifies global protocol parameters.\"},\"modifySAFECollateralization(bytes32,address,address,address,int256,int256)\":{\"notice\":\"Modifies a Safe\\u2019s collateral and debt, ensuring collateralization requirements.\"},\"redemptionPrice()\":{\"notice\":\"Reference price per StablePro, defaulting to 1e27 (1:1 USD) [ray].\"},\"safes(bytes32,address)\":{\"notice\":\"Maps collateral types and Safe addresses to their state (collateral and debt).\"},\"safetyPriceValidBlockAmount()\":{\"notice\":\"Number of blocks a safety price remains valid.\"},\"settleDebt(uint256)\":{\"notice\":\"Settles debt using available StablePro coin balance.\"},\"tokenCollateral(bytes32,address)\":{\"notice\":\"Tracks collateral balances per collateral type and user [wad].\"},\"transferCollateral(bytes32,address,address,uint256)\":{\"notice\":\"Transfers collateral between two addresses for a collateral type.\"},\"transferInternalCoins(address,address,uint256)\":{\"notice\":\"Transfers internal StablePro coins between two addresses.\"},\"transferSAFECollateralAndDebt(bytes32,address,address,int256,int256)\":{\"notice\":\"Transfers collateral and debt between two Safes.\"},\"updateAccumulatedRate(bytes32,address,int256)\":{\"notice\":\"Updates the accumulated stability fee rate for a collateral type.\"},\"updateSafetyPrice(bytes32)\":{\"notice\":\"Updates the safety price for a collateral type using oracle data.\"}},\"notice\":\"Core accounting and state management contract for collateralized debt positions (Safes) in the StableUnit protocol.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/makerdao/core/SafeEngine.sol\":\"SafeEngine\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"contracts/exchange/contracts/periphery/contracts/access-control/SuAccessRoles.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title SuAccessRoles Library\\n * @dev SuAuthenticated and SuAccessControlSingleton need to have this constants\\n * Hierarchy:\\n *      1. DAO - can give admins and system roles\\n *      2.1. Admin - can set Alerters\\n *      2.2. System - includes Minter, Liquidation, Reward and Disabler roles, don't have access to give some roles.\\n *      3. Alerter - can send alerts and trigger rate limits, don't have access to give some roles.\\n */\\nabstract contract SuAccessRoles {\\n    bytes32 public constant ADMIN_ROLE = 0x00;\\n\\n    bytes32 public constant DAO_ROLE = keccak256(\\\"DAO_ROLE\\\");\\n\\n    bytes32 public constant ALERTER_ROLE = keccak256(\\\"ALERTER_ROLE\\\");\\n\\n    // system roles\\n    bytes32 public constant MINT_ACCESS_ROLE = keccak256(\\\"MINT_ACCESS_ROLE\\\");\\n    bytes32 public constant AUCTION_ACCESS_ROLE = keccak256(\\\"AUCTION_ACCESS_ROLE\\\");\\n    bytes32 public constant LIQUIDATION_ACCESS_ROLE = keccak256(\\\"LIQUIDATION_ACCESS_ROLE\\\");\\n    bytes32 public constant REWARD_ACCESS_ROLE = keccak256(\\\"REWARD_ACCESS_ROLE\\\");\\n    // bytes32 public constant SYSTEM_ROLE = keccak256(\\\"SYSTEM_ROLE\\\");\\n    bytes32 public constant DISABLER_ROLE = keccak256(\\\"DISABLER_ROLE\\\");\\n    bytes32 public constant CDP_ACCESS_ROLE = keccak256(\\\"CDP_ACCESS_ROLE\\\");\\n    bytes32 public constant VOTING_ESCROW_ROLE = keccak256(\\\"VOTING_ESCROW_ROLE\\\");\\n    bytes32 public constant PROXY_ACTIONS_ROLE = keccak256(\\\"PROXY_ACTIONS_ROLE\\\");\\n}\\n\",\"keccak256\":\"0x6702597d2d879605a4f25e71c348b4c7f84f4618ca799ba0fcb4a5ad994b788c\",\"license\":\"BSL 1.1\"},\"contracts/exchange/contracts/periphery/contracts/access-control/SuAuthenticated.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/access-control/ISuAccessControl.sol\\\";\\nimport \\\"./SuAccessRoles.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @title SuAuthenticated\\n * @dev other contracts should inherit to be authenticated.\\n * The address of SuAccessControlSingleton should be one for all contract that inherits SuAuthenticated\\n */\\nabstract contract SuAuthenticated is Initializable, SuAccessRoles, IERC165Upgradeable {\\n    ISuAccessControl public ACCESS_CONTROL_SINGLETON;\\n\\n    error OnlyDAOError();\\n    error OnlyAdminError();\\n    error OnlyAlerterError();\\n    error OnlyVaultAccessError();\\n    error OnlyLiquidationAccessError();\\n    error OnlyMintAccessError();\\n    error OnlyRewardAccessError();\\n    error OnlyDisablerAccessError();\\n    error OnlyVotingEscrowError();\\n    error OnlyProxyActionsError();\\n    error OnlyRoleError();\\n    error OnlyCDPAccessError();\\n    error BadAccessControlSingleton();\\n    error onlyAuctionAccessRole();\\n\\n    /**\\n     * @dev should be passed in constructor\\n     */\\n    function __suAuthenticatedInit(address _accessControlSingleton) internal onlyInitializing {\\n        ACCESS_CONTROL_SINGLETON = ISuAccessControl(_accessControlSingleton);\\n        if (\\n            _accessControlSingleton == address(0) ||\\n            !ISuAccessControl(_accessControlSingleton).supportsInterface(type(IAccessControlUpgradeable).interfaceId)\\n        ) revert BadAccessControlSingleton();\\n    }\\n\\n    /** CORE ROLES */\\n\\n    modifier onlyDAO() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(DAO_ROLE, msg.sender)) revert OnlyDAOError();\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(ADMIN_ROLE, msg.sender)) revert OnlyAdminError();\\n        _;\\n    }\\n\\n    modifier onlyAlerter() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(ALERTER_ROLE, msg.sender)) revert OnlyAlerterError();\\n        _;\\n    }\\n\\n    /** SYSTEM ROLES */\\n\\n    modifier onlyLiquidationAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(LIQUIDATION_ACCESS_ROLE, msg.sender)) revert OnlyLiquidationAccessError();\\n        _;\\n    }\\n\\n    modifier onlyAuctionAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(AUCTION_ACCESS_ROLE, msg.sender)) revert OnlyLiquidationAccessError();\\n        _;\\n    }\\n\\n    modifier onlyMintAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(MINT_ACCESS_ROLE, msg.sender)) revert OnlyMintAccessError();\\n        _;\\n    }\\n\\n    modifier onlyRewardAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(REWARD_ACCESS_ROLE, msg.sender)) revert OnlyRewardAccessError();\\n        _;\\n    }\\n\\n    modifier onlyRewardOrAdminAccess() {\\n        if (\\n            !ACCESS_CONTROL_SINGLETON.hasRole(REWARD_ACCESS_ROLE, msg.sender) &&\\n            !ACCESS_CONTROL_SINGLETON.hasRole(ADMIN_ROLE, msg.sender)\\n        ) revert OnlyRewardAccessError();\\n        _;\\n    }\\n\\n    // @notice This modifier check if user/contract have access to \\\"disable\\\" contracts.\\n    // All main contracts in our lending protocol have disableContract() method that stops contracts main functions.\\n    modifier onlyDisablerAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(DISABLER_ROLE, msg.sender)) revert OnlyDisablerAccessError();\\n        _;\\n    }\\n\\n    modifier onlyCDPAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(CDP_ACCESS_ROLE, msg.sender)) revert OnlyCDPAccessError();\\n        _;\\n    }\\n\\n    modifier onlyVotingEscrow() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(VOTING_ESCROW_ROLE, msg.sender)) revert OnlyVotingEscrowError();\\n        _;\\n    }\\n\\n    modifier onlyProxyActions() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(PROXY_ACTIONS_ROLE, msg.sender)) revert OnlyProxyActionsError();\\n        _;\\n    }\\n\\n    // syntax sugar under ACCESS_CONTROL_SINGLETON\\n    modifier onlyRole(bytes32 role) {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(role, msg.sender)) revert OnlyRoleError();\\n        _;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return ACCESS_CONTROL_SINGLETON.supportsInterface(interfaceId);\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xc27fc434b09e69804160c93896d39da4f9890d21e2ca1002eb53ebf1234e4d91\",\"license\":\"BSL 1.1\"},\"contracts/exchange/contracts/periphery/contracts/interfaces/access-control/ISuAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\nimport \\\"../../access-control/SuAccessRoles.sol\\\";\\n\\n/**\\n * @notice Access control for contracts\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n **/\\ninterface ISuAccessControl is IAccessControlUpgradeable, IERC165Upgradeable {\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\\n}\\n\",\"keccak256\":\"0x25724ac502fd6418ccd38273b276de4b2fdecd023d723c5d80c9f0a27c407bcd\",\"license\":\"MIT\"},\"contracts/exchange/contracts/periphery/contracts/interfaces/oracle/ISuOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\n// solhint-disable compiler-version\\npragma solidity >=0.7.6;\\n\\ninterface ISuOracle {\\n    /**\\n     * @notice WARNING! Read this description very carefully!\\n     *     function getFiatPrice1e18(address asset) returns (uint256) that:\\n     *         basicAmountOfAsset * getFiatPrice1e18(asset) / 1e18 === $$ * 1e18\\n     *     in other words, it doesn't matter what's the erc20.decimals is,\\n     *     you just multiply token balance in basic units on value from oracle and get dollar amount multiplied on 1e18.\\n     *\\n     * different assets have different deviation threshold (errors)\\n     *     for wBTC it's <= 0.5%, read more https://data.chain.link/ethereum/mainnet/crypto-usd/btc-usd\\n     *     for other asset is can be larger based on particular oracle implementation.\\n     *\\n     * examples:\\n     *     market price of btc = $30k,\\n     *     for 0.1 wBTC the unit256 amount is 0.1 * 1e18\\n     *     0.1 * 1e18 * (price1e18 / 1e18) == $3000 == uint256(3000*1e18)\\n     *     => price1e18 = 30000 * 1e18;\\n     *\\n     *     market price of usdt = $0.97,\\n     *     for 1 usdt uint256 = 1 * 1e6\\n     *     so 1*1e6 * price1e18 / 1e18 == $0.97 == uint256(0.97*1e18)\\n     *     => 1*1e6 * (price1e18 / 1e18) / (0.97*1e18)   = 1\\n     *     =>  price1e18 = 0.97 * (1e18/1e6) * 1e18\\n     *\\n     *    assume market price of wBTC = $31,503.77, oracle error = $158\\n     *\\n     *     case #1: small amount of wBTC\\n     *         we have 0.0,000,001 wBTC that is worth v = $0.00315 \\u00b1 $0.00001 = 0.00315*1e18 = 315*1e13 \\u00b1 1*1e13\\n     *         actual balance on the asset b = wBTC.balanceOf() =  0.0000001*1e18 = 1e11\\n     *         oracle should return or = oracle.getFiatPrice1e18(wBTC) <=>\\n     *         <=> b*or = v => v/b = 315*1e13 / 1e11 = 315*1e2 \\u00b1 1e2\\n     *         error = or.error * b = 1e2 * 1e11 = 1e13 => 1e13/1e18 usd = 1e-5 = 0.00001 usd\\n     *\\n     *     case #2: large amount of wBTC\\n     *         v = 2,000,000 wBTC = $31,503.77 * 2m \\u00b1 158*2m = $63,007,540,000 \\u00b1 $316,000,000 = 63,007*1e24 \\u00b1 316*1e24\\n     *         for calc convenience we increase error on 0.05 and have v = 63,000*24 \\u00b1 300*1e24 = (630 \\u00b1 3)*1e26\\n     *         b = 2*1e6 * 1e18 = 2*1e24\\n     *         or = v/b = (630 \\u00b1 3)*1e26 / 2*1e24 = 315*1e2 \\u00b1 1.5*1e2\\n     *         error = or.error * b = 1.5*100 * 2*1e24 = 3*1e26 = 3*1e8*1e18 = $300,000,000 ~ $316,000,000\\n     *\\n     *     assume the market price of USDT = $0.97 \\u00b1 $0.00485,\\n     *\\n     *     case #3: little amount of USDT\\n     *         v = USDT amount 0.005 = 0.005*(0.97 \\u00b1 0.00485) = 0.00485*1e18 \\u00b1 0.00002425*1e18 = 485*1e13 \\u00b1 3*1e13\\n     *         we rounded error up on (3000-2425)/2425 ~= +24% for calculation convenience.\\n     *         b = USDT.balanceOf() = 0.005*1e6 = 5*1e3\\n     *         b*or = v => or = v/b = (485*1e13 \\u00b1 3*1e13) / 5*1e3 = 970*1e9 \\u00b1 6*1e9\\n     *         error = 6*1e9 * 5*1e3 / 1e18 = 30*1e12/1e18 = 3*1e-5 = $0,00005\\n     *\\n     *     case #4: lot of USDT\\n     *         v = we have 100,000,000,000 USDT = $97B = 97*1e9*1e18 \\u00b1 0.5*1e9*1e18\\n     *         b = USDT.balanceOf() = 1e11*1e6 = 1e17\\n     *         or = v/b = (97*1e9*1e18 \\u00b1 0.5*1e9*1e18) / 1e17 = 970*1e9 \\u00b1 5*1e9\\n     *         error = 5*1e9 * 1e17 = 5*1e26 = 0.5 * 1e8*1e18\\n     *\\n     * @param asset - address of erc20 token contract\\n     * @return usdPrice1e18 such that asset.balanceOf() * getFiatPrice1e18(asset) / 1e18 == $$ * 1e18\\n     **/\\n    function getFiatPrice1e18(address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa56b9cc86ef5935efecc276e6a3188d518f1a99cad960083a8de35849c997687\",\"license\":\"UNLICENSED\"},\"contracts/exchange/contracts/periphery/contracts/interfaces/oracle/ISuOracleAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ISuOracle.sol\\\";\\n\\ninterface ISuOracleAggregator is ISuOracle {\\n    /* ===================== STRUCT ===================== */\\n    struct AssetLimitation {\\n        uint256 lowerBound;\\n        uint256 upperBound;\\n    }\\n\\n    /* ===================== EVENTS ===================== */\\n    event OracleLowerBoundWarning(address indexed asset, uint256 price, uint256 lowerBound);\\n    event OracleUpperBoundWarning(address indexed asset, uint256 price, uint256 upperBound);\\n\\n    event OracleLowerBoundUpdated(address asset, uint256 newBound);\\n    event OracleUpperBoundUpdated(address asset, uint256 newBound);\\n\\n    /* ===================== ERRORS ===================== */\\n    error NoOracleFound(address asset);\\n    error NoOracleImplementation();\\n    error BadOracleId();\\n    error PriceBelowLowerBound(address asset, uint256 price, uint256 bound);\\n    error PriceAboveUpperBound(address asset, uint256 price, uint256 bound);\\n\\n    /* ====================== VARS ====================== */\\n    function assetToOracle (address asset) external view returns ( uint256 );\\n    function oracleImplementations (uint256 oracleId) external view returns ( ISuOracle );\\n\\n    /* ==================== METHODS ==================== */\\n\\n    /**\\n    * @notice Like getFiatPrice1e18 from ISuOracle, but also checks bounds and emit event if there is an error.\\n    * We should call it in non-view method where we need safePrice from Oracle.\\n    * @param asset - address of asset\\n    **/\\n    function getSafeFiatPrice1e18(address asset) external returns (uint256);\\n\\n    /**\\n    * @notice Change lower bound of asset\\n    * @param asset - address of asset\\n    * @param newLowerBound - new value of lower bound\\n    **/\\n    function setLowerBound(address asset, uint256 newLowerBound) external;\\n\\n    /**\\n    * @notice Change upper bound of asset\\n    * @param asset - address of asset\\n    * @param newUpperBound - new value of upper bound\\n    **/\\n    function setUpperBound(address asset, uint256 newUpperBound) external;\\n\\n    /**\\n       * @notice assign address of oracle implementation to the oracleId\\n    * @param oracleId - number 0,1, etc to assign the oracle\\n    * @param oracleImplementation - an address with ISuOracle implementation contract\\n    **/\\n    function setOracleImplementation(uint256 oracleId, ISuOracle oracleImplementation) external;\\n\\n    /**\\n    * @notice specify what oracleId should be used for each assets. Checks that oracleId has an implementation\\n    **/\\n    function setOracleIdForAssets(address[] memory assets, uint256 oracleId) external;\\n\\n    /* ==================== VIEW METHODS ==================== */\\n    /**\\n    * @return true if oracle is set to this asset, false otherwise\\n    **/\\n    function hasPriceForAsset(address asset) external view returns(bool);\\n}\\n\",\"keccak256\":\"0xb73f938c5cb6d1295d61e94f86704c7777998ef50e0030480047fa96ce7a5535\",\"license\":\"UNLICENSED\"},\"contracts/makerdao/core/SafeEngine.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\n/// SAFEEngine.sol -- StablePro CDP database\\n\\n// This contract is forked from MakerDAO's vat.sol\\n\\n// Copyright (C) 2018 Rain <rainbreak@riseup.net>\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\n// -pragma solidity ^0.6.12;\\npragma solidity ^0.8.0;\\n\\nimport {Math} from \\\"../utils/Math.sol\\\";\\nimport {ISafeEngine} from \\\"../interfaces/ISafeEngine.sol\\\";\\nimport \\\"../../exchange/contracts/periphery/contracts/access-control/SuAuthenticated.sol\\\";\\nimport \\\"../../exchange/contracts/periphery/contracts/interfaces/oracle/ISuOracleAggregator.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n// FIXME: This contract was altered compared to the production version.\\n// It doesn't use LibNote anymore.\\n// New deployments of this contract will need to include custom events (TO DO).\\n\\n// CHANGED: added interface, moved structs there.\\n// Maybe we'll need to add events in each method (need to discuss, in another branch dss has LogNote for that)\\n// Added SuAuthenticated instead of authorizedAccounts\\n// Added updating safetyPrice\\n\\n/**\\n * @title SafeEngine\\n * @notice Core accounting and state management contract for collateralized debt positions (Safes) in the StableUnit protocol.\\n * @dev Manages collateral, debt, and StablePro coin balances for Safes, tracks global and per-collateral-type debt limits,\\n *      and enforces collateralization ratios using safety prices from an oracle. Supports operations like collateral\\n *      deposit/withdrawal, debt generation/repayment, liquidation, and settlement. Uses SuAuthenticatedNonUpgradeable for\\n *      access control and integrates with ISuOracleAggregator for price feeds. Can be disabled by authorized accounts to\\n *      halt operations. This contract is a fork of MakerDAO\\u2019s Vat.sol, adapted for StableUnit with features like dynamic\\n *      safety price updates and redemption price.\\n * @custom:usage\\n * - **Initialization**: Deploy with access control and oracle addresses.\\n *   ```solidity\\n *   SafeEngine safeEngine = new SafeEngine(accessControlAddress, oracleAddress);\\n *   ```\\n * - **Collateral Type Setup**: Initialize a collateral type with its token address.\\n *   ```solidity\\n *   safeEngine.initializeCollateralType(\\\"ETH-A\\\", ethTokenAddress);\\n *   ```\\n * - **Parameter Modification**: DAO updates debt ceilings, redemption price, or liquidation ratios.\\n *   ```solidity\\n *   safeEngine.modifyParameters(\\\"globalDebtCeiling\\\", newCeiling); // Update global debt ceiling\\n *   safeEngine.modifyParameters(\\\"ETH-A\\\", \\\"debtCeiling\\\", newCeiling); // Update collateral debt ceiling\\n *   ```\\n * - **Safe Operations**: Users or adapters modify Safe collateral/debt via DssProxyActions or direct calls.\\n *   ```solidity\\n *   safeEngine.modifySAFECollateralization(\\\"ETH-A\\\", safe, collateralSrc, debtDst, deltaCollateral, deltaDebt);\\n *   ```\\n * - **Price Updates**: Trigger safety price updates for a collateral type.\\n *   ```solidity\\n *   safeEngine.updateSafetyPrice(\\\"ETH-A\\\"); // Refresh safety price from oracle\\n *   ```\\n * - **Disabling**: DisablerAccess accounts can disable the contract.\\n *   ```solidity\\n *   safeEngine.disableContract(); // Halt operations\\n *   ```\\n * @custom:security Only enabled contracts (`contractEnabled == 1`) allow state-changing operations.\\n *                 Administrative functions are restricted by SuAuthenticatedNonUpgradeable roles (DAO, Admin, DisablerAccess).\\n *                 Only authorized users/contracts (via `cdpRights`) can modify specific Safes or balances.\\n *                 Safety price updates rely on ISuOracleAggregator, which must provide reliable price feeds.\\n * @custom:changes Replaced MakerDAO\\u2019s `authorizedAccounts` with `SuAuthenticatedNonUpgradeable` for access control.\\n *                 Removed `LibNote` for event logging, requiring custom events (TODO).\\n *                 Added `ISuOracleAggregator` integration for dynamic safety price updates.\\n *                 Introduced `redemptionPrice`, `safetyPriceValidBlockAmount`, and `defaultLiquidationRatio`.\\n *                 Moved structs to `ISafeEngine` interface.\\n * @custom:events No events are defined; custom events need to be added (as noted in FIXME).\\n *                Example placeholder events are included in comments but not emitted due to lack of definition.\\n */\\ncontract SafeEngine is SuAuthenticated, Math, ISafeEngine {\\n    // --- Disable ---\\n    /// @notice Tracks whether the contract is enabled (1) or disabled (0).\\n    uint public contractEnabled;\\n\\n    /**\\n     * @notice Disables the contract, preventing further state-changing operations.\\n     * @dev Sets `contractEnabled` to 0 and emits a placeholder event. Only callable by DisablerAccess accounts.\\n     * @custom:access OnlyDisablerAccess\\n     */\\n    function disableContract() external onlyDisablerAccess {\\n        contractEnabled = 0;\\n\\n        emit DisableContract();\\n    }\\n\\n    // --- Auth ---\\n    // -// --- Auth ---\\n    // -mapping (address => uint) public wards;\\n    // -function rely(address usr) external auth { require(live == 1, \\\"Vat/not-live\\\"); wards[usr] = 1; }\\n    // -function deny(address usr) external auth { require(live == 1, \\\"Vat/not-live\\\"); wards[usr] = 0; }\\n    // -modifier auth {\\n    // -    require(wards[msg.sender] == 1, \\\"Vat/not-authorized\\\");\\n    // -    _;\\n    // -}\\n\\n    // Who can transfer collateral & debt in/out of a CDP\\n    /// @notice Maps Safe owners to operators with permission to modify their Safes.\\n    mapping(address => mapping (address => uint)) public cdpRights;\\n    // -mapping(address => mapping (address => uint)) public can;\\n\\n    /**\\n     * @notice Grants a user permission to modify the caller\\u2019s Safe.\\n     * @dev Sets `cdpRights[msg.sender][usr] = 1`.\\n     * @param usr Address to grant modification rights.\\n     */\\n    function approveSAFEModification(address usr) external {\\n        cdpRights[msg.sender][usr] = 1;\\n    }\\n    // -function hope(address usr) external { can[msg.sender][usr] = 1; }\\n\\n    /**\\n     * @notice Revokes a user\\u2019s permission to modify the caller\\u2019s Safe.\\n     * @dev Sets `cdpRights[msg.sender][usr] = 0`.\\n     * @param usr Address to revoke modification rights.\\n     */\\n    function denySAFEModification(address usr) external {\\n        cdpRights[msg.sender][usr] = 0;\\n    }\\n    // -function nope(address usr) external { can[msg.sender][usr] = 0; }\\n\\n    /**\\n     * @notice Checks if an account can modify a Safe.\\n     * @dev Returns true if the account is the Safe owner or has explicit permission.\\n     * @param cdp Address of the Safe.\\n     * @param account Address to check.\\n     * @return True if the account can modify the Safe.\\n     */\\n    function canModifySAFE(address cdp, address account) internal view returns (bool) {\\n        return either(cdp == account, cdpRights[cdp][account] == 1);\\n    }\\n    // -function wish(address bit, address usr) internal view returns (bool) {\\n    // -    return either(bit == usr, can[bit][usr] == 1);\\n    // -}\\n\\n    /// Total User Debt (drawn StablePro + stability fee accrued) = SAFE.generatedDebt * CollateralType.accumulatedRate\\n\\n    // --- Data ---\\n    // -struct Ilk {\\n    // -    uint256 Art;   // Total Normalised Debt     [wad]\\n    // -    uint256 rate;  // Accumulated Rates         [ray]\\n    // -    uint256 spot;  // Price with Safety Margin  [ray]\\n    // -    uint256 line;  // Debt Ceiling              [rad]\\n    // -    uint256 dust;  // Urn Debt Floor            [rad]\\n    // -}\\n    // -struct Urn {\\n    // -    uint256 ink;   // Locked Collateral  [wad]\\n    // -    uint256 art;   // Normalised Debt    [wad]\\n    // -}\\n\\n    // Data about each collateral type\\n    /// @notice Maps collateral types to their configuration (e.g., debt ceiling, safety price).\\n    mapping (bytes32 => CollateralType) public collateralTypes;\\n    // -mapping (bytes32 => Ilk)                       public ilks;\\n\\n    // Data about each SAFE\\n    /// @notice Maps collateral types and Safe addresses to their state (collateral and debt).\\n    mapping (bytes32 => mapping (address => SAFE)) public safes;\\n    // -mapping (bytes32 => mapping (address => Urn )) public urns;\\n\\n    // Balance of each collateral type\\n    /// @notice Tracks collateral balances per collateral type and user [wad].\\n    mapping (bytes32 => mapping (address => uint)) public tokenCollateral; // [wad]\\n    // -mapping (bytes32 => mapping (address => uint)) public gem;  // [wad]\\n\\n    // Internal balance of pegged-coins\\n    /// @notice Tracks internal StablePro coin balances per user [rad].\\n    mapping (address => uint256) public coinBalance; // [rad]\\n    // -mapping (address => uint256)                   public dai;  // [rad]\\n\\n    // Amount of debt held by an account. Coin & debt are like matter and antimatter. They nullify each other\\n    /// @notice Tracks debt balances per user, offsetting coin balances [rad].\\n    mapping (address => uint256) public debtBalance; // [rad]\\n    // -mapping (address => uint256)                   public sin;  // [rad]\\n\\n    /// @notice Oracle aggregator providing collateral price feeds.\\n    ISuOracleAggregator public ORACLE; // Total amount of debt (coins) currently issued [rad]\\n    /// @notice Total debt issued across all Safes [rad].\\n    uint256 public globalDebt; // Total amount of debt (coins) currently issued [rad]\\n    // -uint256 public debt;  // Total Dai Issued    [rad]\\n\\n    /// @notice Total unbacked debt not covered by collateral [rad].\\n    uint256 public globalUnbackedDebt; // 'Bad' debt that's not covered by collateral [rad]\\n    // -uint256 public vice;  // Total Unbacked Dai  [rad]\\n\\n    /// @notice Maximum debt allowed across all Safes [rad].\\n    uint256 public globalDebtCeiling; // Maximum amount of debt that can be issued [rad]\\n    // -uint256 public Line;  // Total Debt Ceiling  [rad]\\n\\n    /// @notice Reference price per StablePro, defaulting to 1e27 (1:1 USD) [ray].\\n    uint256 public redemptionPrice; // Reference value per StablePro, as default = 1e27, that mean 1:1 to USD [ray]\\n    /// @notice Number of blocks a safety price remains valid.\\n    uint256 public safetyPriceValidBlockAmount; // Amount of blocks during which safetyPrice is valid\\n    /// @notice Default liquidation ratio set for new collateral types (e.g., 150%) [ray].\\n    uint256 public defaultLiquidationRatio; // Liquidation ratio that is set in initializeCollateralType\\n    // -uint256 public live;  // Active Flag\\n\\n\\n    // --- Init ---\\n    /**\\n     * @notice Initializes the SafeEngine with access control and oracle addresses.\\n     * @dev Sets initial state: contract enabled, redemption price to 1e27, safety price validity to 1 block,\\n     *      and default liquidation ratio to 150%. Inherits access control from SuAuthenticatedNonUpgradeable.\\n     * @param accessControl Address of the access control singleton contract.\\n     * @param oracle Address of the ISuOracleAggregator contract.\\n     */\\n    function initialize(address accessControl, address oracle) public initializer {\\n        __suAuthenticatedInit(accessControl);\\n\\n        contractEnabled = 1;\\n        redemptionPrice = ONE; // 1e27\\n        safetyPriceValidBlockAmount = 1; // 2 = this block and 1 block after, 1 = only this block\\n        defaultLiquidationRatio = ONE * 15 / 10; // 150%\\n        ORACLE = ISuOracleAggregator(oracle);\\n    }\\n    // -constructor() public {\\n    // -    wards[msg.sender] = 1;\\n    // -    live = 1;\\n    // -}\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    // --- Math ---\\n    // -function _add(uint x, int y) internal pure returns (uint z) {\\n    // -    z = x + uint(y);\\n    // -    require(y >= 0 || z <= x);\\n    // -    require(y <= 0 || z >= x);\\n    // -}\\n    // -function _sub(uint x, int y) internal pure returns (uint z) {\\n    // -    z = x - uint(y);\\n    // -    require(y <= 0 || z <= x);\\n    // -    require(y >= 0 || z >= x);\\n    // -}\\n    // -function _mul(uint x, int y) internal pure returns (int z) {\\n    // -    z = int(x) * y;\\n    // -    require(int(x) >= 0);\\n    // -    require(y == 0 || z / y == int(x));\\n    // -}\\n    // -function _add(uint x, uint y) internal pure returns (uint z) {\\n    // -    require((z = x + y) >= x);\\n    // -}\\n    // -function _sub(uint x, uint y) internal pure returns (uint z) {\\n    // -    require((z = x - y) <= x);\\n    // -}\\n    // -function _mul(uint x, uint y) internal pure returns (uint z) {\\n    // -    require(y == 0 || (z = x * y) / y == x);\\n    // -}\\n\\n    // --- Administration ---\\n    /**\\n     * @notice Initializes a new collateral type with its token address.\\n     * @dev Sets accumulated rate to 1e27 and assigns the collateral token address and default liquidation ratio.\\n     *      Reverts if already initialized. Only callable by Admin.\\n     * @param collateralType Unique identifier for the collateral type (e.g., \\\"ETH-A\\\").\\n     * @param collateralAddress Address of the collateral token contract.\\n     * @custom:access OnlyAdmin\\n     */\\n    function initializeCollateralType(bytes32 collateralType, address collateralAddress) external onlyAdmin {\\n        require(collateralTypes[collateralType].accumulatedRate == 0, \\\"SafeEngine/collateral-type-already-init\\\");\\n        collateralTypes[collateralType].accumulatedRate = ONE; // 1e27\\n        collateralTypes[collateralType].collateralAddress = collateralAddress;\\n        collateralTypes[collateralType].liquidationRatio = defaultLiquidationRatio; // 150%\\n\\n        emit InitializeCollateralType(collateralType);\\n    }\\n    // -function init(bytes32 ilk) external auth {\\n    // -    require(ilks[ilk].rate == 0, \\\"Vat/ilk-already-init\\\");\\n    // -    ilks[ilk].rate = 10 ** 27;\\n    // -}\\n\\n    /**\\n     * @notice Modifies global protocol parameters.\\n     * @dev Updates parameters like global debt ceiling, redemption price, default liquidation ratio, or safety price validity.\\n     *      Requires contract to be enabled. Only callable by DAO.\\n     * @param what Parameter to modify (e.g., \\\"globalDebtCeiling\\\", \\\"redemptionPrice\\\").\\n     * @param data New value for the parameter.\\n     * @custom:access OnlyDAO\\n     */\\n    function modifyParameters(bytes32 what, uint data) external onlyDAO {\\n        require(contractEnabled == 1, \\\"SafeEngine/not-contractEnabled\\\");\\n        if (what == \\\"globalDebtCeiling\\\") globalDebtCeiling = data;\\n        else if (what == \\\"redemptionPrice\\\") redemptionPrice = data;\\n        else if (what == \\\"defaultLiquidationRatio\\\") defaultLiquidationRatio = data;\\n        else if (what == \\\"safetyPriceValidBlockAmount\\\") safetyPriceValidBlockAmount = data;\\n        else revert(\\\"SafeEngine/modifyParameters-unrecognized-param\\\");\\n\\n        emit ModifyParameters(what, data);\\n    }\\n    // -function file(bytes32 what, uint data) external auth {\\n    // -    require(live == 1, \\\"Vat/not-live\\\");\\n    // -    if (what == \\\"Line\\\") Line = data;\\n    // -    else revert(\\\"Vat/file-unrecognized-param\\\");\\n    // -}\\n\\n    /**\\n     * @notice Modifies parameters for a specific collateral type.\\n     * @dev Updates parameters like debt ceiling, debt floor, or liquidation ratio.\\n     *      Requires contract to be enabled. Only callable by DAO.\\n     * @param collateralType Unique identifier for the collateral type.\\n     * @param what Parameter to modify (e.g., \\\"debtCeiling\\\", \\\"liquidationRatio\\\").\\n     * @param data New value for the parameter.\\n     * @custom:access OnlyDAO\\n     */\\n    function modifyParameters(bytes32 collateralType, bytes32 what, uint data) external onlyDAO {\\n        require(contractEnabled == 1, \\\"SafeEngine/not-contractEnabled\\\");\\n        //if (what == \\\"safetyPrice\\\") collateralTypes[collateralType].safetyPrice = data; // Commented out\\n        if (what == \\\"debtCeiling\\\") collateralTypes[collateralType].debtCeiling = data;\\n        else if (what == \\\"debtFloor\\\") collateralTypes[collateralType].debtFloor = data;\\n        else if (what == \\\"liquidationRatio\\\") collateralTypes[collateralType].liquidationRatio = data;\\n        else revert(\\\"SafeEngine/modifyParameters-unrecognized-param\\\");\\n\\n        emit ModifyParameters(collateralType, what, data);\\n    }\\n    // -function file(bytes32 ilk, bytes32 what, uint data) external auth {\\n    // -    require(live == 1, \\\"Vat/not-live\\\");\\n    // -    if (what == \\\"spot\\\") ilks[ilk].spot = data;\\n    // -    else if (what == \\\"line\\\") ilks[ilk].line = data;\\n    // -    else if (what == \\\"dust\\\") ilks[ilk].dust = data;\\n    // -    else revert(\\\"Vat/file-unrecognized-param\\\");\\n    // -}\\n\\n    // -function cage() external auth {\\n    // -    live = 0;\\n    // -}\\n\\n    /**\\n     * @notice Updates the safety price for a collateral type using oracle data.\\n     * @dev Fetches the collateral\\u2019s fiat price from ISuOracleAggregator, adjusts for token decimals,\\n     *      and calculates the safety price as (realPrice / redemptionPrice / liquidationRatio).\\n     *      Only updates if the current safety price is unset or expired based on `safetyPriceValidBlockAmount`.\\n     * @param collateralType Unique identifier for the collateral type.\\n     */\\n    function updateSafetyPrice(bytes32 collateralType) public {\\n        // Skip update if safety price is valid\\n        if (collateralTypes[collateralType].safetyPriceBlockNumber == 0) {\\n            collateralTypes[collateralType].safetyPriceBlockNumber = block.number;\\n        } else if (\\n            collateralTypes[collateralType].safetyPriceBlockNumber + safetyPriceValidBlockAmount >= block.number\\n        ) return;\\n\\n        address collateralAddress = collateralTypes[collateralType].collateralAddress;\\n        uint256 decimals = IERC20Metadata(collateralAddress).decimals();\\n        // Adjust price for token decimals: realPriceE18 = oraclePrice / 10^(18-decimals)\\n        uint256 realPriceE18 = decimals == 18\\n            ? ORACLE.getSafeFiatPrice1e18(collateralAddress)\\n            : ORACLE.getSafeFiatPrice1e18(collateralAddress) / (10 ** (18 - decimals));\\n        // Safety price = (realPrice * 1e9 / redemptionPrice) / liquidationRatio [ray]\\n        collateralTypes[collateralType].safetyPrice = _rdiv(\\n            _rdiv(realPriceE18 * 1e9, redemptionPrice),\\n            collateralTypes[collateralType].liquidationRatio\\n        );\\n        collateralTypes[collateralType].safetyPriceBlockNumber = block.number;\\n\\n        emit UpdateSafetyPrice(collateralType, collateralTypes[collateralType].safetyPrice);\\n    }\\n\\n    // --- Fungibility ---\\n    /**\\n     * @notice Modifies a user\\u2019s collateral balance for a collateral type.\\n     * @dev Adds or subtracts collateral tokens, typically called by CollateralJoin adapters.\\n     *      Requires caller to have CDP access permissions.\\n     * @param collateralType Unique identifier for the collateral type.\\n     * @param usr Address to modify the collateral balance for.\\n     * @param wad Amount to add (positive) or subtract (negative) [wad].\\n     * @custom:access OnlyCDPAccess\\n     */\\n    function modifyCollateralBalance(bytes32 collateralType, address usr, int256 wad) external onlyCDPAccess {\\n        tokenCollateral[collateralType][usr] = _add(tokenCollateral[collateralType][usr], wad);\\n\\n        emit ModifyCollateralBalance(collateralType, usr, wad);\\n    }\\n    // -function slip(bytes32 ilk, address usr, int256 wad) external auth {\\n    // -    gem[ilk][usr] = _add(gem[ilk][usr], wad);\\n    // -}\\n\\n    /**\\n     * @notice Transfers collateral between two addresses for a collateral type.\\n     * @dev Requires the caller to have permission to modify the source address\\u2019s Safe.\\n     * @param collateralType Unique identifier for the collateral type.\\n     * @param src Source address to debit collateral from.\\n     * @param dst Destination address to credit collateral to.\\n     * @param wad Amount of collateral to transfer [wad].\\n     */\\n    function transferCollateral(bytes32 collateralType, address src, address dst, uint256 wad) external {\\n        require(canModifySAFE(src, msg.sender), \\\"SafeEngine/not-allowed\\\");\\n        tokenCollateral[collateralType][src] = _sub(tokenCollateral[collateralType][src], wad);\\n        tokenCollateral[collateralType][dst] = _add(tokenCollateral[collateralType][dst], wad);\\n\\n        emit TransferCollateral(collateralType, src, dst, wad);\\n    }\\n    // -function flux(bytes32 ilk, address src, address dst, uint256 wad) external {\\n    // -    require(wish(src, msg.sender), \\\"Vat/not-allowed\\\");\\n    // -    gem[ilk][src] = _sub(gem[ilk][src], wad);\\n    // -    gem[ilk][dst] = _add(gem[ilk][dst], wad);\\n    // -}\\n\\n    /**\\n     * @notice Transfers internal StablePro coins between two addresses.\\n     * @dev Requires the caller to have permission to modify the source address\\u2019s Safe.\\n     * @param src Source address to debit coins from.\\n     * @param dst Destination address to credit coins to.\\n     * @param rad Amount of StablePro coins to transfer [rad].\\n     */\\n    function transferInternalCoins(address src, address dst, uint256 rad) external {\\n        require(canModifySAFE(src, msg.sender), \\\"SafeEngine/not-allowed\\\");\\n        coinBalance[src] = _sub(coinBalance[src], rad);\\n        coinBalance[dst] = _add(coinBalance[dst], rad);\\n\\n        emit TransferInternalCoins(src, dst, rad);\\n    }\\n    // -function move(address src, address dst, uint256 rad) external {\\n    // -    require(wish(src, msg.sender), \\\"Vat/not-allowed\\\");\\n    // -    dai[src] = _sub(dai[src], rad);\\n    // -    dai[dst] = _add(dai[dst], rad);\\n    // -}\\n\\n    // -function either(bool x, bool y) internal pure returns (bool z) {\\n    // -    assembly{ z := or(x, y)}\\n    // -}\\n\\n    // -function both(bool x, bool y) internal pure returns (bool z) {\\n    // -    assembly{ z := and(x, y)}\\n    // -}\\n\\n    // --- CDP Manipulation ---\\n    /**\\n     * @notice Modifies a Safe\\u2019s collateral and debt, ensuring collateralization requirements.\\n     * @dev Updates Safe state, checks debt ceilings, collateralization ratio, and permissions.\\n     *      Requires contract to be enabled and collateral type to be initialized.\\n     * @param collateralType Unique identifier for the collateral type.\\n     * @param cdp Address of the Safe to modify.\\n     * @param collateralSource Address to debit/credit collateral.\\n     * @param debtDestination Address to debit/credit debt.\\n     * @param deltaCollateral Amount to add (positive) or remove (negative) collateral [wad].\\n     * @param deltaDebt Amount to add (positive) or remove (negative) debt [wad].\\n     */\\n    function modifySAFECollateralization(\\n        bytes32 collateralType,\\n        address cdp,\\n        address collateralSource,\\n        address debtDestination,\\n        int deltaCollateral,\\n        int deltaDebt\\n    ) external {\\n        // Check contract is enabled\\n        require(contractEnabled == 1, \\\"SafeEngine/not-contractEnabled\\\");\\n\\n        SAFE memory safe_ = safes[collateralType][cdp];\\n\\n        // Refresh safety price\\n        updateSafetyPrice(collateralType);\\n        CollateralType memory collateralType_ = collateralTypes[collateralType];\\n        // Check collateral type is initialized\\n        require(collateralType_.accumulatedRate != 0, \\\"SafeEngine/collateral-type-not-init\\\");\\n\\n        // Update Safe state\\n        safe_.lockedCollateral = _add(safe_.lockedCollateral, deltaCollateral);\\n        safe_.generatedDebt = _add(safe_.generatedDebt, deltaDebt);\\n        collateralType_.debtAmount = _add(collateralType_.debtAmount, deltaDebt);\\n\\n        // Calculate debt impact\\n        int dAmountToRaise = _mul(collateralType_.accumulatedRate, deltaDebt);\\n        uint amountToRaise = _mul(collateralType_.accumulatedRate, safe_.generatedDebt);\\n        globalDebt = _add(globalDebt, dAmountToRaise);\\n\\n        // Validate debt ceilings\\n        require(\\n            either(\\n                deltaDebt <= 0,\\n                both(\\n                    _mul(collateralType_.debtAmount, collateralType_.accumulatedRate) <= collateralType_.debtCeiling,\\n                    globalDebt <= globalDebtCeiling\\n                )\\n            ),\\n            \\\"SafeEngine/ceiling-exceeded\\\"\\n        );\\n        // Validate collateralization ratio\\n        require(\\n            either(\\n                both(deltaDebt <= 0, deltaCollateral >= 0),\\n                amountToRaise <= _mul(safe_.lockedCollateral, collateralType_.safetyPrice)\\n            ),\\n            \\\"SafeEngine/not-safe\\\"\\n        );\\n\\n        // Validate permissions\\n        require(\\n            either(both(deltaDebt <= 0, deltaCollateral >= 0), canModifySAFE(cdp, msg.sender)),\\n            \\\"SafeEngine/not-allowed-u\\\"\\n        );\\n        require(either(deltaCollateral <= 0, canModifySAFE(collateralSource, msg.sender)), \\\"SafeEngine/not-allowed-v\\\");\\n        require(either(deltaDebt >= 0, canModifySAFE(debtDestination, msg.sender)), \\\"SafeEngine/not-allowed-w\\\");\\n\\n        // Validate debt floor\\n        require(either(safe_.generatedDebt == 0, amountToRaise >= collateralType_.debtFloor), \\\"SafeEngine/debtFloor\\\");\\n\\n        // Update balances\\n        tokenCollateral[collateralType][collateralSource] =\\n                        _sub(tokenCollateral[collateralType][collateralSource], deltaCollateral);\\n        coinBalance[debtDestination] = _add(coinBalance[debtDestination], dAmountToRaise);\\n\\n        // Save state\\n        safes[collateralType][cdp] = safe_;\\n        collateralTypes[collateralType] = collateralType_;\\n\\n        emit ModifySAFECollateralization(\\n            collateralType,\\n            cdp,\\n            collateralSource,\\n            debtDestination,\\n            deltaCollateral,\\n            deltaDebt,\\n            safe_.lockedCollateral,\\n            safe_.generatedDebt,\\n            globalDebt\\n        );\\n    }\\n    // -function frob(bytes32 i, address u, address v, address w, int dink, int dart) external {\\n    // -    // system is live\\n    // -    require(live == 1, \\\"Vat/not-live\\\");\\n    // -\\n    // -    Urn memory urn = urns[i][u];\\n    // -    Ilk memory ilk = ilks[i];\\n    // -    // ilk has been initialised\\n    // -    require(ilk.rate != 0, \\\"Vat/ilk-not-init\\\");\\n    // -\\n    // -    urn.ink = _add(urn.ink, dink);\\n    // -    urn.art = _add(urn.art, dart);\\n    // -    ilk.Art = _add(ilk.Art, dart);\\n    // -\\n    // -    int dtab = _mul(ilk.rate, dart);\\n    // -    uint tab = _mul(ilk.rate, urn.art);\\n    // -    debt     = _add(debt, dtab);\\n    // -\\n    // -    // either debt has decreased, or debt ceilings are not exceeded\\n    // -    require(either(dart <= 0, both(_mul(ilk.Art, ilk.rate) <= ilk.line, debt <= Line)), \\\"Vat/ceiling-exceeded\\\");\\n    // -    // urn is either less risky than before, or it is safe\\n    // -    require(either(both(dart <= 0, dink >= 0), tab <= _mul(urn.ink, ilk.spot)), \\\"Vat/not-safe\\\");\\n    // -\\n    // -    // urn is either more safe, or the owner consents\\n    // -    require(either(both(dart <= 0, dink >= 0), wish(u, msg.sender)), \\\"Vat/not-allowed-u\\\");\\n    // -    // collateral src consents\\n    // -    require(either(dink <= 0, wish(v, msg.sender)), \\\"Vat/not-allowed-v\\\");\\n    // -    // debt dst consents\\n    // -    require(either(dart >= 0, wish(w, msg.sender)), \\\"Vat/not-allowed-w\\\");\\n    // -\\n    // -    // urn has no debt, or a non-dusty amount\\n    // -    require(either(urn.art == 0, tab >= ilk.dust), \\\"Vat/dust\\\");\\n    // -\\n    // -    gem[i][v] = _sub(gem[i][v], dink);\\n    // -    dai[w]    = _add(dai[w],    dtab);\\n    // -\\n    // -    urns[i][u] = urn;\\n    // -    ilks[i]    = ilk;\\n    // -}\\n\\n    // --- CDP Fungibility ---\\n    /**\\n     * @notice Transfers collateral and debt between two Safes.\\n     * @dev Updates source and destination Safe states, ensuring collateralization and debt floor requirements.\\n     *      Requires caller to have permission for both Safes.\\n     * @param collateralType Unique identifier for the collateral type.\\n     * @param src Address of the source Safe.\\n     * @param dst Address of the destination Safe.\\n     * @param deltaCollateral Amount to transfer collateral [wad].\\n     * @param deltaDebt Amount to transfer debt [wad].\\n     */\\n    function transferSAFECollateralAndDebt(\\n        bytes32 collateralType,\\n        address src,\\n        address dst,\\n        int deltaCollateral,\\n        int deltaDebt\\n    ) external {\\n        // Refresh safety price\\n        updateSafetyPrice(collateralType);\\n        SAFE storage srcCDP = safes[collateralType][src];\\n        SAFE storage dstCDP = safes[collateralType][dst];\\n        CollateralType storage col = collateralTypes[collateralType];\\n\\n        // Transfer collateral and debt\\n        srcCDP.lockedCollateral = _sub(srcCDP.lockedCollateral, deltaCollateral);\\n        srcCDP.generatedDebt = _sub(srcCDP.generatedDebt, deltaDebt);\\n        dstCDP.lockedCollateral = _add(dstCDP.lockedCollateral, deltaCollateral);\\n        dstCDP.generatedDebt = _add(dstCDP.generatedDebt, deltaDebt);\\n\\n        // Calculate debt values\\n        uint srcAmountToRaise = _mul(srcCDP.generatedDebt, col.accumulatedRate);\\n        uint dstAmountToRaise = _mul(dstCDP.generatedDebt, col.accumulatedRate);\\n\\n        // Validate permissions\\n        require(both(canModifySAFE(src, msg.sender), canModifySAFE(dst, msg.sender)), \\\"SafeEngine/not-allowed\\\");\\n\\n        // Validate collateralization\\n        require(srcAmountToRaise <= _mul(srcCDP.lockedCollateral, col.safetyPrice), \\\"SafeEngine/not-safe-src\\\");\\n        require(dstAmountToRaise <= _mul(dstCDP.lockedCollateral, col.safetyPrice), \\\"SafeEngine/not-safe-dst\\\");\\n\\n        // Validate debt floor\\n        require(either(srcAmountToRaise >= col.debtFloor, srcCDP.generatedDebt == 0), \\\"SafeEngine/debtFloor-src\\\");\\n        require(either(dstAmountToRaise >= col.debtFloor, dstCDP.generatedDebt == 0), \\\"SafeEngine/debtFloor-dst\\\");\\n\\n        emit TransferSAFECollateralAndDebt(\\n            collateralType,\\n            src,\\n            dst,\\n            deltaCollateral,\\n            deltaDebt,\\n            srcCDP.lockedCollateral,\\n            srcCDP.generatedDebt,\\n            dstCDP.lockedCollateral,\\n            dstCDP.generatedDebt\\n        );\\n    }\\n    // -function fork(bytes32 ilk, address src, address dst, int dink, int dart) external {\\n    // -    Urn storage u = urns[ilk][src];\\n    // -    Urn storage v = urns[ilk][dst];\\n    // -    Ilk storage i = ilks[ilk];\\n    // -\\n    // -    u.ink = _sub(u.ink, dink);\\n    // -    u.art = _sub(u.art, dart);\\n    // -    v.ink = _add(v.ink, dink);\\n    // -    v.art = _add(v.art, dart);\\n    // -\\n    // -    uint utab = _mul(u.art, i.rate);\\n    // -    uint vtab = _mul(v.art, i.rate);\\n    // -\\n    // -    // both sides consent\\n    // -    require(both(wish(src, msg.sender), wish(dst, msg.sender)), \\\"Vat/not-allowed\\\");\\n    // -\\n    // -    // both sides safe\\n    // -    require(utab <= _mul(u.ink, i.spot), \\\"Vat/not-safe-src\\\");\\n    // -    require(vtab <= _mul(v.ink, i.spot), \\\"Vat/not-safe-dst\\\");\\n    // -\\n    // -    // both sides non-dusty\\n    // -    require(either(utab >= i.dust, u.art == 0), \\\"Vat/dust-src\\\");\\n    // -    require(either(vtab >= i.dust, v.art == 0), \\\"Vat/dust-dst\\\");\\n    // -}\\n\\n    // --- CDP Confiscation ---\\n    /**\\n     * @notice Confiscates collateral and debt from a Safe during liquidation.\\n     * @dev Transfers collateral and debt to counterparties, typically for auctions. Requires CDP access permissions.\\n     * @param collateralType Unique identifier for the collateral type.\\n     * @param cdp Address of the Safe to confiscate.\\n     * @param collateralCounterparty Address to debit collateral from.\\n     * @param debtCounterparty Address to debit debt from.\\n     * @param deltaCollateral Amount to confiscate collateral [wad].\\n     * @param deltaDebt Amount to confiscate debt [wad].\\n     * @custom:access OnlyCDPAccess\\n     */\\n    function confiscateSAFECollateralAndDebt(\\n        bytes32 collateralType,\\n        address cdp,\\n        address collateralCounterparty,\\n        address debtCounterparty,\\n        int deltaCollateral,\\n        int deltaDebt\\n    ) external onlyCDPAccess {\\n        SAFE storage safe_ = safes[collateralType][cdp];\\n        CollateralType storage collateralType_ = collateralTypes[collateralType];\\n\\n        // Update Safe state\\n        safe_.lockedCollateral = _add(safe_.lockedCollateral, deltaCollateral);\\n        safe_.generatedDebt = _add(safe_.generatedDebt, deltaDebt);\\n        collateralType_.debtAmount = _add(collateralType_.debtAmount, deltaDebt);\\n\\n        // Calculate debt impact\\n        int deltaTotalIssuedDebt = _mul(collateralType_.accumulatedRate, deltaDebt);\\n\\n        // Update balances\\n        tokenCollateral[collateralType][collateralCounterparty] =\\n                        _sub(tokenCollateral[collateralType][collateralCounterparty], deltaCollateral);\\n        debtBalance[debtCounterparty] = _sub(debtBalance[debtCounterparty], deltaTotalIssuedDebt);\\n        globalUnbackedDebt = _sub(globalUnbackedDebt, deltaTotalIssuedDebt);\\n\\n        emit ConfiscateSAFECollateralAndDebt(\\n            collateralType,\\n            cdp,\\n            collateralCounterparty,\\n            debtCounterparty,\\n            deltaCollateral,\\n            deltaDebt,\\n            globalUnbackedDebt\\n        );\\n    }\\n    // -function grab(bytes32 i, address u, address v, address w, int dink, int dart) external auth {\\n    // -    Urn storage urn = urns[i][u];\\n    // -    Ilk storage ilk = ilks[i];\\n    // -\\n    // -    urn.ink = _add(urn.ink, dink);\\n    // -    urn.art = _add(urn.art, dart);\\n    // -    ilk.Art = _add(ilk.Art, dart);\\n    // -\\n    // -    int dtab = _mul(ilk.rate, dart);\\n    // -\\n    // -    gem[i][v] = _sub(gem[i][v], dink);\\n    // -    sin[w]    = _sub(sin[w],    dtab);\\n    // -    vice      = _sub(vice,      dtab);\\n    // -}\\n\\n    // --- Settlement ---\\n    /**\\n     * @notice Settles debt using available StablePro coin balance.\\n     * @dev Reduces debt and coin balances for the caller, typically used by AccountingEngine.\\n     * @param rad Amount of debt to settle [rad].\\n     */\\n    function settleDebt(uint rad) external {\\n        address account = msg.sender;\\n        debtBalance[account] = _sub(debtBalance[account], rad);\\n        coinBalance[account] = _sub(coinBalance[account], rad);\\n        globalUnbackedDebt = _sub(globalUnbackedDebt, rad);\\n        globalDebt = _sub(globalDebt, rad);\\n\\n        emit SettleDebt(account, rad, debtBalance[account], coinBalance[account], globalUnbackedDebt, globalDebt);\\n    }\\n    // -function heal(uint rad) external {\\n    // -    address u = msg.sender;\\n    // -    sin[u] = _sub(sin[u], rad);\\n    // -    dai[u] = _sub(dai[u], rad);\\n    // -    vice   = _sub(vice,   rad);\\n    // -    debt   = _sub(debt,   rad);\\n    // -}\\n\\n    /**\\n     * @notice Creates unbacked debt, typically for bad debt handling.\\n     * @dev Increases debt and coin balances for destination addresses. Requires CDP access permissions.\\n     * @param debtDestination Address to assign the unbacked debt.\\n     * @param coinDestination Address to assign the StablePro coins.\\n     * @param rad Amount of unbacked debt to create [rad].\\n     * @custom:access OnlyCDPAccess\\n     */\\n    function createUnbackedDebt(address debtDestination, address coinDestination, uint rad) external onlyCDPAccess {\\n        debtBalance[debtDestination] = _add(debtBalance[debtDestination], rad);\\n        coinBalance[coinDestination] = _add(coinBalance[coinDestination], rad);\\n        globalUnbackedDebt = _add(globalUnbackedDebt, rad);\\n        globalDebt = _add(globalDebt, rad);\\n\\n         emit CreateUnbackedDebt(\\n            debtDestination,\\n            coinDestination,\\n            rad,\\n            debtBalance[debtDestination],\\n            coinBalance[coinDestination],\\n            globalUnbackedDebt,\\n            globalDebt\\n        );\\n    }\\n    // -function suck(address u, address v, uint rad) external auth {\\n    // -    sin[u] = _add(sin[u], rad);\\n    // -    dai[v] = _add(dai[v], rad);\\n    // -    vice   = _add(vice,   rad);\\n    // -    debt   = _add(debt,   rad);\\n    // -}\\n\\n    // --- Rates ---\\n    /**\\n     * @notice Updates the accumulated stability fee rate for a collateral type.\\n     * @dev Adjusts the collateral type\\u2019s rate and credits surplus to the destination address.\\n     *      Requires contract to be enabled and CDP access permissions.\\n     * @param collateralType Unique identifier for the collateral type.\\n     * @param surplusDst Address to credit surplus StablePro coins.\\n     * @param accumulatedRate Change in accumulated rate [ray].\\n     * @custom:access OnlyCDPAccess\\n     */\\n    function updateAccumulatedRate(\\n        bytes32 collateralType,\\n        address surplusDst,\\n        int accumulatedRate\\n    ) external onlyCDPAccess {\\n        require(contractEnabled == 1, \\\"SafeEngine/not-contractEnabled\\\");\\n        CollateralType storage collateralType_ = collateralTypes[collateralType];\\n        collateralType_.accumulatedRate = _add(collateralType_.accumulatedRate, accumulatedRate);\\n        int deltaSurplus = _mul(collateralType_.debtAmount, accumulatedRate);\\n        coinBalance[surplusDst] = _add(coinBalance[surplusDst], deltaSurplus);\\n        globalDebt = _add(globalDebt, deltaSurplus);\\n\\n        emit UpdateAccumulatedRate(collateralType, surplusDst, accumulatedRate, globalDebt);\\n    }\\n    // -function fold(bytes32 i, address u, int rate) external auth {\\n    // -    require(live == 1, \\\"Vat/not-live\\\");\\n    // -    Ilk storage ilk = ilks[i];\\n    // -    ilk.rate = _add(ilk.rate, rate);\\n    // -    int rad  = _mul(ilk.Art, rate);\\n    // -    dai[u]   = _add(dai[u], rad);\\n    // -    debt     = _add(debt,   rad);\\n    // -}\\n}\",\"keccak256\":\"0xcbc47a73a746acd601178e76b444478ce2558d2ae2ef5d3006317362bd93d819\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/makerdao/interfaces/IDisable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\ninterface IDisable {\\n    event DisableContract();\\n\\n    function disableContract() external;\\n}\\n\",\"keccak256\":\"0xcf4b5ac43556af77a174aa3a3a9b51c4fc89b933ef875797650542bf686b8405\",\"license\":\"UNLICENSED\"},\"contracts/makerdao/interfaces/ISafeEngine.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// TODO: check how to operate with license and use one for all contracts\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IDisable.sol\\\";\\n\\n/**\\n * @title SafeEngine\\n * @notice The single source of truth for the Maker Protocol. It contains the accounting system of the core Vault,\\n * Internal StablePro balances, and collateral state. It houses the public interface for Vault management,\\n * allowing safe(= CDP or Vault) owners to adjust their Vault state balances. It also contains the public interface\\n * for Vault fungibility, allowing safe (Vault) owners to transfer, split, and merge Vaults.\\n * Excluding these interfaces, SAFEEngine is accessed through trusted smart contract modules.\\n **/\\ninterface ISafeEngine is IDisable {\\n\\n          // --- Events ---\\n    event InitializeCollateralType(bytes32 collateralType);\\n    event ModifyParameters(bytes32 what, uint256 data);\\n    event ModifyParameters(bytes32 collateralType, bytes32 what, uint256 data);\\n    event ModifyCollateralBalance(bytes32 collateralType, address usr, int256 wad);\\n    event TransferCollateral(bytes32 collateralType, address src, address dst, uint256 wad);\\n    event TransferInternalCoins(address src, address dst, uint256 rad);\\n    event ModifySAFECollateralization(\\n        bytes32 collateralType,\\n        address cdp,\\n        address collateralSource,\\n        address debtDestination,\\n        int256 deltaCollateral,\\n        int256 deltaDebt,\\n        uint256 lockedCollateral,\\n        uint256 generatedDebt,\\n        uint256 globalDebt\\n    );\\n    event TransferSAFECollateralAndDebt(\\n        bytes32 collateralType,\\n        address src,\\n        address dst,\\n        int256 deltaCollateral,\\n        int256 deltaDebt,\\n        uint256 srcLockedCollateral,\\n        uint256 srcGeneratedDebt,\\n        uint256 dstLockedCollateral,\\n        uint256 dstGeneratedDebt\\n    );\\n    event ConfiscateSAFECollateralAndDebt(\\n        bytes32 collateralType,\\n        address cdp,\\n        address collateralCounterparty,\\n        address debtCounterparty,\\n        int256 deltaCollateral,\\n        int256 deltaDebt,\\n        uint256 globalUnbackedDebt\\n    );\\n    event SettleDebt(address account, uint256 rad, uint256 debtBalance, uint256 coinBalance, uint256 globalUnbackedDebt, uint256 globalDebt);\\n    event CreateUnbackedDebt(\\n        address debtDestination,\\n        address coinDestination,\\n        uint256 rad,\\n        uint256 debtBalance,\\n        uint256 coinBalance,\\n        uint256 globalUnbackedDebt,\\n        uint256 globalDebt\\n    );\\n    event UpdateAccumulatedRate(bytes32 collateralType, address surplusDst, int256 accumulatedRate, uint256 globalDebt);\\n    event ApproveSAFEModification(address sender, address usr);\\n    event DenySAFEModification(address sender, address usr);\\n    event UpdateSafetyPrice(bytes32 collateralType, uint256 safetyPrice);\\n\\n    /* ==================== METHODS ==================== */\\n\\n    // --- Data ---\\n    struct CollateralType {\\n        uint256 debtAmount;        // Total debt issued for this specific collateral type                          [wad]\\n        uint256 accumulatedRate;   // Accumulator for interest accrued on this collateral type                     [ray]\\n        uint256 debtCeiling;       // Maximum amount of debt that can be generated with this collateral type       [rad]\\n        uint256 debtFloor;         // Minimum amount of debt that must be generated by a CDP using this collateral [rad]\\n        uint256 safetyPrice;       // Floor price at which a CDP is allowed to generate debt                       [ray]\\n        uint256 liquidationRatio;  // Liquidation ratio to calculate safety price                                  [ray]\\n        address collateralAddress; // Address of collateral\\n        uint256 safetyPriceBlockNumber; // Block when safetyPrice was updated\\n    }\\n    struct SAFE {\\n        uint256 lockedCollateral; // Total amount of collateral locked in a SAFE/CDP  [wad]\\n        uint256 generatedDebt;    // Total amount of debt generated by a SAFE/CDP     [wad]\\n    }\\n\\n    // --- VARS ---\\n\\n    function safes(bytes32, address) external view returns (uint, uint);\\n\\n    function collateralTypes(bytes32) external view returns (\\n        uint256 debtAmount,       // [wad]\\n        uint256 accumulatedRate,  // [ray]\\n        uint256 debtCeiling,      // [rad]\\n        uint256 debtFloor,        // [rad]\\n        uint256 safetyPrice,      // [ray]\\n        uint256 liquidationRatio, // [ray]\\n        address collateralAddress,\\n        uint256 safetyPriceBlockNumber\\n);\\n\\n    function tokenCollateral(bytes32, address) external view returns (uint256);\\n\\n    function coinBalance(address) external view returns (uint256);\\n\\n    function debtBalance(address) external view returns (uint256);\\n\\n    function cdpRights(address, address) external view returns (uint256);\\n\\n    function globalDebtCeiling() external view returns (uint256);\\n\\n    function globalDebt() external view returns (uint256);\\n\\n    // --- Auth ---\\n    /**\\n     * @notice Allow an address to modify your CDP.\\n     * For example coinAdapter should be able to modify your CDP to withdraw all correctly.\\n     * @param usr Account to give CDP permissions to\\n     */\\n    function approveSAFEModification(address usr) external;\\n\\n    /**\\n     * @notice Deny an address the rights to modify your CDP\\n     * @param usr Account to give CDP permissions to\\n     */\\n    function denySAFEModification(address usr) external;\\n\\n    // --- Administration ---\\n\\n    function initializeCollateralType(bytes32 collateralType, address collateralAddress) external;\\n\\n    /**\\n     * @notice Method to modify some global variables\\n     * @param what - name of variable we want to change\\n     * @param data - new value of this variable\\n     */\\n    function modifyParameters(bytes32 what, uint data) external;\\n    /**\\n     * @notice Method to modify values in struct of collateralTypes\\n     * @param collateralType - collateral type we want to modify (collateralTypes[collateralType])\\n     * @param what - name of variable in struct we want to change\\n     * @param data - new value of this variable\\n     */\\n    function modifyParameters(bytes32 collateralType, bytes32 what, uint data) external;\\n\\n    // --- Fungibility ---\\n    function modifyCollateralBalance(bytes32 collateralType, address usr, int256 wad) external;\\n    function transferCollateral(bytes32 collateralType, address src, address dst, uint256 wad) external;\\n    function transferInternalCoins(address src, address dst, uint256 rad) external;\\n\\n    // --- SafetyPrice Manipulation ---\\n    /**\\n     * @notice Method to update safetyPrice, it's called each time, when function need actual safetyPrice\\n     * @param collateralType - safetyPrice's collateral type we want to update\\n     */\\n    function updateSafetyPrice(bytes32 collateralType) external;\\n\\n    // --- CDP Manipulation ---\\n    /**\\n     * @notice Add/remove collateral or put back/generate more debt in a CDP\\n     * @param collateralType Type of collateral to withdraw/deposit in and from the CDP\\n     * @param cdp Target CDP\\n     * @param collateralSource Account we take collateral from/put collateral into\\n     * @param debtDestination Account from which we credit/debit coins and debt\\n     * @param deltaCollateral Amount of collateral added/extract from the CDP\\n     * @param deltaDebt Amount of debt to generate/repay\\n     */\\n    function modifySAFECollateralization(\\n        bytes32 collateralType,\\n        address cdp,\\n        address collateralSource,\\n        address debtDestination,\\n        int deltaCollateral,\\n        int deltaDebt\\n    ) external;\\n\\n    // --- CDP Fungibility ---\\n    /**\\n     * @notice Transfer collateral and/or debt between CDPs\\n     * @param collateralType Collateral type transferred between CDPs\\n     * @param src Source CDP\\n     * @param dst Destination CDP\\n     * @param deltaCollateral Amount of collateral to take/add into src and give/take from dst\\n     * @param deltaDebt Amount of debt to take/add into src and give/take from dst\\n     */\\n    function transferSAFECollateralAndDebt(\\n        bytes32 collateralType,\\n        address src,\\n        address dst,\\n        int deltaCollateral,\\n        int deltaDebt\\n    ) external;\\n\\n    // --- CDP Confiscation ---\\n    /**\\n     * @notice Normally used by the LiquidationEngine in order to confiscate collateral and\\n       debt from a CDP and give them to someone else\\n     * @param collateralType Collateral type the CDP has locked inside\\n     * @param cdp Target CDP\\n     * @param collateralCounterparty Who we take/give collateral to\\n     * @param debtCounterparty Who we take/give debt to\\n     * @param deltaCollateral Amount of collateral taken/added into the CDP\\n     * @param deltaDebt Amount of debt taken/added into the CDP\\n     */\\n    function confiscateSAFECollateralAndDebt(\\n        bytes32 collateralType,\\n        address cdp,\\n        address collateralCounterparty,\\n        address debtCounterparty,\\n        int deltaCollateral,\\n        int deltaDebt\\n    ) external;\\n\\n    // --- Settlement ---\\n    /**\\n     * @notice Nullify an amount of coins with an equal amount of debt\\n     * @param rad Amount of debt & coins to destroy (expressed as a number with 45 decimals)\\n     */\\n    function settleDebt(uint rad) external;\\n\\n    /**\\n     * @notice Usually called by CoinSavingsAccount in order to create unbacked debt\\n     * @param debtDestination Usually AccountingEngine that can settle decreaseSoldAmount with surplus\\n     * @param coinDestination Usually CoinSavingsAccount who passes the new coins to depositors\\n     * @param rad Amount of debt to create (expressed as a number with 45 decimals)\\n     */\\n    function createUnbackedDebt(address debtDestination, address coinDestination, uint rad) external;\\n\\n    // --- Rates ---\\n    /**\\n     * @notice Usually called by TaxCollector in order to accrue interest on a specific collateral type\\n     * @param collateralType Collateral type we accrue interest for\\n     * @param surplusDst Destination for amount of surplus created by applying the interest rate\\n       to debt created by CDPs with 'collateralType'\\n     * @param accumulatedRate Multiplier applied to the debtAmount in order to calculate the surplus\\n     */\\n    function updateAccumulatedRate(bytes32 collateralType, address surplusDst, int accumulatedRate) external;\\n}\\n\",\"keccak256\":\"0x02d5c0dbf9eada0f29652f21159e2d9abfa7dd37c55c136c88b3ced857629f85\",\"license\":\"UNLICENSED\"},\"contracts/makerdao/utils/Math.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nabstract contract Math {\\n    uint256 constant ONE = 10 ** 27;\\n    uint256 constant WAD = 10 ** 18;\\n\\n    /**\\n    * @notice Calculates the sum of an unsigned integer and a signed integer\\n    * @param  x Unsigned integer\\n    * @param  y Signed integer\\n    * @return z Unsigned sum of `x` and `y`\\n    */\\n    function _add(uint x, int y) internal pure returns (uint z) {\\n        if (y >= 0) {\\n            z = x + uint256(y);\\n        } else {\\n            z = x - uint256(-y);\\n        }\\n        require(y >= 0 || z <= x);\\n        require(y <= 0 || z >= x);\\n    }\\n\\n    /**\\n    * @notice Calculates the substraction of an unsigned integer and a signed integer\\n    * @param  x Unsigned integer\\n    * @param  y Signed integer\\n    * @return z Unsigned substraction of `x` and `y`\\n    */\\n    function _sub(uint x, int y) internal pure returns (uint z) {\\n        if (y >= 0) {\\n            z = x - uint256(y);\\n        } else {\\n            z = x + uint256(-y);\\n        }\\n        require(y <= 0 || z <= x);\\n        require(y >= 0 || z >= x);\\n    }\\n    function _mul(uint x, int y) internal pure returns (int z) {\\n        z = int(x) * y;\\n        require(int(x) >= 0);\\n        require(y == 0 || z / y == int(x));\\n    }\\n\\n    function _rdiv(uint x, uint y) internal pure returns (uint z) {\\n        z = _mul(x, ONE) / y;\\n    }\\n\\n    function _add(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x + y) >= x);\\n    }\\n    function _sub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) <= x);\\n    }\\n    function _mul(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x);\\n    }\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x <= y ? x : y;\\n    }\\n\\n    function either(bool x, bool y) internal pure returns (bool z) {\\n        assembly{ z := or(x, y)}\\n    }\\n    function both(bool x, bool y) internal pure returns (bool z) {\\n        assembly{ z := and(x, y)}\\n    }\\n}\\n\",\"keccak256\":\"0xd2215ec58e4792d9e68d66f17c0181e4931fd83dc4f4a433d727978997e4ba24\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000022565b620000e3565b600054610100900460ff16156200008f5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811614620000e1576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b612c1280620000f36000396000f3fe608060405234801561001057600080fd5b50600436106102045760003560e01c806301ffc9a71461020957806303ee9f22146102315780630e9e11d31461025757806311005b071461026c5780631b1428201461029a5780631d2a783d146102ad57806320d8a59f146102b657806327a0bb33146102c95780632efcc866146102dc578063340517c9146102e557806338013f021461030c5780633d4225041461031f57806341b3a0d914610366578063438280dd1461036f578063476bb6ef14610396578063485cc955146103a95780634a11825e146103bc5780634e14a967146103cf5780634e5111a6146103e257806362a1e17b146103f557806371d0fb41146103fe57806375b238fc1461042557806376e0b4ca1461042d5780638543d5e014610458578063894ba833146104615780638e5313e01461046957806399bec31514610490578063a39b5580146104a3578063b38234f3146104ac578063bd5f5be6146104d3578063c5b748c0146104e8578063d07900bb146104f1578063d0e8fa8214610592578063d2351cee146105b9578063d49d7867146105ce578063d4b9311d14610605578063d94d420814610618578063da49bada14610650578063dc97e84e1461067b578063e401f2e7146106a2578063e9c26518146106b5578063efabcadc146106ca578063fabde80c146106dd578063fe4f5890146106fd575b600080fd5b61021c610217366004612649565b610710565b60405190151581526020015b60405180910390f35b60005461024a906201000090046001600160a01b031681565b6040516102289190612673565b61026a6102653660046126a3565b61078d565b005b61028c61027a3660046126d8565b60396020526000908152604090205481565b604051908152602001610228565b61026a6102a83660046126f3565b610933565b61028c603c5481565b61026a6102c436600461271f565b610afa565b61026a6102d736600461274b565b610c7b565b61028c603d5481565b61028c7f014f8da3222812608c449a44f4705585c5ce052eeb6f9af0af9209c64b0ba2de81565b603a5461024a906001600160a01b031681565b61035161032d36600461271f565b60366020908152600092835260408084209091529082529020805460019091015482565b60408051928352602083019190915201610228565b61028c60335481565b61028c7f39f61ca2a1a28fee144218173ec637b649a353e4026b2738c673800e5bf1437b81565b61026a6103a4366004612764565b610d78565b61026a6103b73660046127b2565b61106e565b61026a6103ca3660046126a3565b6111d2565b61026a6103dd3660046127dc565b611307565b61026a6103f036600461283b565b611522565b61028c60405481565b61028c7f880a91047114272656e533301261260c75e4d11543ac7303d6fe4204579ec72781565b61028c600081565b61028c61043b36600461271f565b603760209081526000928352604080842090915290825290205481565b61028c603b5481565b61026a611626565b61028c7fe453bacb314e78dcd5192e6b1a2b1f0e7c76e92f6b7e429a6a90f04e39db3b7681565b61026a61049e3660046127dc565b6116f9565b61028c603f5481565b61028c7fd83f5343da19b478b15a140c301a868be9e02603958f38fbd822b9d5c0a2891681565b61028c600080516020612bc683398151915281565b61028c603e5481565b61054e6104ff36600461274b565b603560205260009081526040902080546001820154600283015460038401546004850154600586015460068701546007909701549596949593949293919290916001600160a01b039091169088565b604080519889526020890197909752958701949094526060860192909252608085015260a08401526001600160a01b031660c083015260e082015261010001610228565b61028c7f76d0567582f23e1e9d7a13eeba60f9aea9d69b8da87ca27a8bf3698b35c653db81565b61028c600080516020612be683398151915281565b61026a6105dc3660046126d8565b3360009081526034602090815260408083206001600160a01b0394909416835292905290812055565b61026a61061336600461287f565b611c8c565b61026a6106263660046126d8565b3360009081526034602090815260408083206001600160a01b039490941683529290522060019055565b61028c61065e3660046127b2565b603460209081526000928352604080842090915290825290205481565b61028c7f9a9aef7c1247d5fc769b0185c052913e39673da29a880317dfd20ebf86f26a4981565b61026a6106b036600461274b565b611e7b565b61028c600080516020612ba683398151915281565b61026a6106d83660046126f3565b6120f6565b61028c6106eb3660046126d8565b60386020526000908152604090205481565b61026a61070b3660046128ab565b6121ca565b600080546040516301ffc9a760e01b8152620100009091046001600160a01b0316906301ffc9a7906107469085906004016128cd565b602060405180830381865afa158015610763573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078791906128e2565b92915050565b600054604051632474521560e21b8152620100009091046001600160a01b0316906391d14854906107d290600080516020612bc6833981519152903390600401612904565b602060405180830381865afa1580156107ef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081391906128e2565b61083057604051635e9e090760e01b815260040160405180910390fd5b60335460011461085b5760405162461bcd60e51b81526004016108529061291b565b60405180910390fd5b600083815260356020526040902060018101546108789083612363565b6001820155805460009061088c90846123c5565b6001600160a01b0385166000908152603860205260409020549091506108b29082612363565b6001600160a01b038516600090815260386020526040902055603b546108d89082612363565b603b819055604080518781526001600160a01b03871660208201528082018690526060810192909252517fa77efa51558e27733220e3837e76992ab5f66f58c470d442e01b460a37df79ef9181900360800190a15050505050565b600054604051632474521560e21b8152620100009091046001600160a01b0316906391d148549061097890600080516020612bc6833981519152903390600401612904565b602060405180830381865afa158015610995573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b991906128e2565b6109d657604051635e9e090760e01b815260040160405180910390fd5b6001600160a01b0383166000908152603960205260409020546109f990826123fe565b6001600160a01b03808516600090815260396020908152604080832094909455918516815260389091522054610a2f90826123fe565b6001600160a01b038316600090815260386020526040902055603c54610a5590826123fe565b603c55603b54610a6590826123fe565b603b8190556001600160a01b03848116600081815260396020908152604080832054948816808452603883529281902054603c5482519586529285019390935283018690526060830193909352608082015260a081019190915260c08101919091527fede723541c3aae745504c3732f6a7161031353ddf05caba15d48b1edd35646b99060e0015b60405180910390a1505050565b60008054604051632474521560e21b8152620100009091046001600160a01b0316916391d1485491610b3191903390600401612904565b602060405180830381865afa158015610b4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7291906128e2565b610b8f57604051631886ea7d60e11b815260040160405180910390fd5b60008281526035602052604090206001015415610bfe5760405162461bcd60e51b815260206004820152602760248201527f53616665456e67696e652f636f6c6c61746572616c2d747970652d616c726561604482015266191e4b5a5b9a5d60ca1b6064820152608401610852565b600082815260356020908152604091829020676765c793fa10079d601b1b60018201556006810180546001600160a01b0319166001600160a01b038616179055825460059091015590518381527f715b265758bcd4ecd311bede8dcca05c4b5819e0a2a5c4103abd702862ae2c3591015b60405180910390a15050565b33600081815260396020526040902054610c959083612419565b6001600160a01b038216600090815260396020908152604080832093909355603890522054610cc49083612419565b6001600160a01b038216600090815260386020526040902055603c54610cea9083612419565b603c55603b54610cfa9083612419565b603b8190556001600160a01b038216600081815260396020908152604080832054603883529281902054603c548251958652928501889052908401929092526060830191909152608082015260a08101919091527f11000f3497809a546a9de313df16f9ce615e1c65098ba758180e1cac823ed4159060c001610c6f565b610d8185611e7b565b60008581526036602090815260408083206001600160a01b0388811685529083528184209087168452818420898552603590935292208254610dc39086612434565b83556001830154610dd49085612434565b60018401558154610de59086612363565b82556001820154610df69085612363565b82600101819055506000610e1284600101548360010154612495565b90506000610e2884600101548460010154612495565b9050610e45610e378a336124b7565b610e418a336124b7565b1690565b610e615760405162461bcd60e51b815260040161085290612952565b610e7385600001548460040154612495565b821115610ebc5760405162461bcd60e51b815260206004820152601760248201527653616665456e67696e652f6e6f742d736166652d73726360481b6044820152606401610852565b610ece84600001548460040154612495565b811115610f175760405162461bcd60e51b815260206004820152601760248201527614d85999515b99da5b994bdb9bdd0b5cd859994b591cdd604a1b6044820152606401610852565b60038301546001860154159083101517610f6e5760405162461bcd60e51b815260206004820152601860248201527753616665456e67696e652f64656274466c6f6f722d73726360401b6044820152606401610852565b60038301546001850154159082101517610fc55760405162461bcd60e51b815260206004820152601860248201527714d85999515b99da5b994bd919589d119b1bdbdc8b591cdd60421b6044820152606401610852565b7f4b49cc19514005253f36d0517c21b92404f50cc0d9e0c070af00b96e296b08358a8a8a8a8a8a600001548b600101548b600001548c6001015460405161105a999897969594939291909889526001600160a01b0397881660208a01529590961660408801526060870193909352608086019190915260a085015260c084015260e08301919091526101008201526101200190565b60405180910390a150505050505050505050565b600054610100900460ff161580801561108e5750600054600160ff909116105b806110a85750303b1580156110a8575060005460ff166001145b61110b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610852565b6000805460ff19166001179055801561112e576000805461ff0019166101001790555b611137836124f6565b60016033819055676765c793fa10079d601b1b603e819055603f91909155600a9061116390600f612998565b61116d91906129c5565b604055603a80546001600160a01b0319166001600160a01b03841617905580156111cd576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610aed565b505050565b600054604051632474521560e21b8152620100009091046001600160a01b0316906391d148549061121790600080516020612bc6833981519152903390600401612904565b602060405180830381865afa158015611234573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125891906128e2565b61127557604051635e9e090760e01b815260040160405180910390fd5b60008381526037602090815260408083206001600160a01b03861684529091529020546112a29082612363565b60008481526037602090815260408083206001600160a01b03871680855290835292819020939093558251868152908101919091529081018290527f488ac1e40bb6e5ee1f88b998568d1de4cb595e9ce0e0d4e4d4cc4c202053f10790606001610aed565b600054604051632474521560e21b8152620100009091046001600160a01b0316906391d148549061134c90600080516020612bc6833981519152903390600401612904565b602060405180830381865afa158015611369573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138d91906128e2565b6113aa57604051635e9e090760e01b815260040160405180910390fd5b60008681526036602090815260408083206001600160a01b03891684528252808320898452603590925290912081546113e39085612363565b825560018201546113f49084612363565b600183015580546114059084612363565b8155600181015460009061141990856123c5565b60008a81526037602090815260408083206001600160a01b038c1684529091529020549091506114499086612434565b60008a81526037602090815260408083206001600160a01b03808d1685529083528184209490945592891682526039905220546114869082612434565b6001600160a01b038716600090815260396020526040902055603c546114ac9082612434565b603c819055604080518b81526001600160a01b038b811660208301528a811682840152891660608201526080810188905260a0810187905260c0810192909252517f9bef7b734be54aaed05e906c2ccf923767f44a93d136b674e212ce858a6d031c9181900360e00190a1505050505050505050565b61152c83336124b7565b6115485760405162461bcd60e51b815260040161085290612952565b60008481526037602090815260408083206001600160a01b03871684529091529020546115759082612419565b60008581526037602090815260408083206001600160a01b0388811685529252808320939093558416815220546115ac90826123fe565b60008581526037602090815260408083206001600160a01b038781168086529184529382902094909455805188815292871691830191909152810191909152606081018290527fb08760a077e71005cf3651212fdbd4028d6ebc8e1844c0475f36000f2756c0d7906080015b60405180910390a150505050565b600054604051632474521560e21b8152620100009091046001600160a01b0316906391d148549061166b90600080516020612be6833981519152903390600401612904565b602060405180830381865afa158015611688573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ac91906128e2565b6116c95760405163bb0684b760e01b815260040160405180910390fd5b600060338190556040517f2d4b4ecff7bd7503135271925520a2f6c0d98c9473ffc1a1e72c92502f51b25e9190a1565b60335460011461171b5760405162461bcd60e51b81526004016108529061291b565b60008681526036602090815260408083206001600160a01b0389168452825291829020825180840190935280548352600101549082015261175b87611e7b565b60008781526035602090815260408083208151610100810183528154815260018201549381018490526002820154928101929092526003810154606083015260048101546080830152600581015460a083015260068101546001600160a01b031660c08301526007015460e082015291036118245760405162461bcd60e51b815260206004820152602360248201527f53616665456e67696e652f636f6c6c61746572616c2d747970652d6e6f742d696044820152621b9a5d60ea1b6064820152608401610852565b81516118309085612363565b825260208201516118419084612363565b602083015280516118529084612363565b8152602081015160009061186690856123c5565b9050600061187c83602001518560200151612495565b905061188a603b5483612363565b603b819055506118c460008613156118c085604001516118b287600001518860200151612495565b1115603d54603b5411151690565b1790565b61190e5760405162461bcd60e51b815260206004820152601b60248201527a14d85999515b99da5b994bd8d95a5b1a5b99cb595e18d959591959602a1b6044820152606401610852565b61193b611922600087131560008912151690565b61193486600001518660800151612495565b8311151790565b61197d5760405162461bcd60e51b815260206004820152601360248201527253616665456e67696e652f6e6f742d7361666560681b6044820152606401610852565b61199b611991600087131560008912151690565b6118c08b336124b7565b6119e25760405162461bcd60e51b815260206004820152601860248201527753616665456e67696e652f6e6f742d616c6c6f7765642d7560401b6044820152606401610852565b6119f460008713156118c08a336124b7565b611a3b5760405162461bcd60e51b815260206004820152601860248201527729b0b332a2b733b4b73297b737ba16b0b63637bbb2b216bb60411b6044820152606401610852565b611a4d60008612156118c089336124b7565b611a945760405162461bcd60e51b815260206004820152601860248201527753616665456e67696e652f6e6f742d616c6c6f7765642d7760401b6044820152606401610852565b60208401516060840151821015901517611ae75760405162461bcd60e51b815260206004820152601460248201527329b0b332a2b733b4b73297b232b13a233637b7b960611b6044820152606401610852565b60008a81526037602090815260408083206001600160a01b038c168452909152902054611b149087612434565b60008b81526037602090815260408083206001600160a01b03808e16855290835281842094909455928a168252603890522054611b519083612363565b6001600160a01b038089166000908152603860209081526040808320949094558d8252603681528382208d8416835281528382208851815588820180516001928301558f84526035835292859020885181559188015190820155868401516002820155606087015160038201556080870151600482015560a0870151600582015560c0870151600682018054919094166001600160a01b03199091161790925560e086015160079092019190915585519051603b5492517f182725621f9c0d485fb256f86699c82616bd6e4670325087fd08f643cab7d9179361105a938f938f938f938f938f938f93919290919889526001600160a01b0397881660208a01529587166040890152939095166060870152608086019190915260a085015260c084019290925260e08301919091526101008201526101200190565b600054604051632474521560e21b8152620100009091046001600160a01b0316906391d1485490611cd190600080516020612ba6833981519152903390600401612904565b602060405180830381865afa158015611cee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d1291906128e2565b611d2f5760405163599a6c3360e11b815260040160405180910390fd5b603354600114611d515760405162461bcd60e51b81526004016108529061291b565b816a646562744365696c696e6760a81b03611d7f576000838152603560205260409020600201819055611e3d565b81683232b13a233637b7b960b91b03611dab576000838152603560205260409020600301819055611e3d565b816f6c69717569646174696f6e526174696f60801b03611dde576000838152603560205260409020600501819055611e3d565b60405162461bcd60e51b815260206004820152602e60248201527f53616665456e67696e652f6d6f64696679506172616d65746572732d756e726560448201526d636f676e697a65642d706172616d60901b6064820152608401610852565b60408051848152602081018490529081018290527fc59b1109b54f213212d2f5af5c1dae5e887f9daa63b595578fae847cb048e8f490606001610aed565b6000818152603560205260408120600701549003611ead57600081815260356020526040902043600790910155611ed5565b603f546000828152603560205260409020600701544391611ecd916129d9565b10611ed55750565b600081815260356020908152604080832060060154815163313ce56760e01b815291516001600160a01b039091169392849263313ce56792600480830193928290030181865afa158015611f2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f5191906129ec565b60ff169050600081601214611ff857611f6b826012612a0f565b611f7690600a612b06565b603a54604051632a5001c960e01b81526001600160a01b0390911690632a5001c990611fa6908790600401612673565b6020604051808303816000875af1158015611fc5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fe99190612b12565b611ff391906129c5565b61206b565b603a54604051632a5001c960e01b81526001600160a01b0390911690632a5001c990612028908690600401612673565b6020604051808303816000875af1158015612047573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061206b9190612b12565b90506120a061208961208183633b9aca00612998565b603e54612627565b600086815260356020526040902060050154612627565b600085815260356020526040908190206004810183905543600790910155517fc01d52afff4ef74ce150388c74343e4ab251d73f3d74ad8ab6365320a229c7279161161891879190918252602082015260400190565b61210083336124b7565b61211c5760405162461bcd60e51b815260040161085290612952565b6001600160a01b03831660009081526038602052604090205461213f9082612419565b6001600160a01b03808516600090815260386020526040808220939093559084168152205461216e90826123fe565b6001600160a01b038381166000818152603860209081526040918290209490945580519287168352928201529081018290527f4cd53b0b754082a31f5a6f3dc965c36d1d901c309830e0b4c17949aff97f0b1490606001610aed565b600054604051632474521560e21b8152620100009091046001600160a01b0316906391d148549061220f90600080516020612ba6833981519152903390600401612904565b602060405180830381865afa15801561222c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061225091906128e2565b61226d5760405163599a6c3360e11b815260040160405180910390fd5b60335460011461228f5760405162461bcd60e51b81526004016108529061291b565b8170676c6f62616c446562744365696c696e6760781b036122b457603d81905561232d565b816e726564656d7074696f6e507269636560881b036122d757603e81905561232d565b817664656661756c744c69717569646174696f6e526174696f60481b0361230257604081905561232d565b817a1cd859995d1e541c9a58d955985b1a59109b1bd8dad05b5bdd5b9d602a1b03611dde57603f8190555b60408051838152602081018390527fac7c5c1afaef770ec56ac6268cd3f2fbb1035858ead2601d6553157c33036c3a9101610c6f565b600080821261237d5761237682846129d9565b9050612393565b61238682612b2b565b6123909084612a0f565b90505b6000821215806123a35750828111155b6123ac57600080fd5b6000821315806123bc5750828110155b61078757600080fd5b60006123d18284612b47565b905060008312156123e157600080fd5b8115806123bc5750826123f48383612b77565b1461078757600080fd5b60008261240b83826129d9565b915081101561078757600080fd5b6000826124268382612a0f565b915081111561078757600080fd5b600080821261244e576124478284612a0f565b9050612464565b61245782612b2b565b61246190846129d9565b90505b6000821315806124745750828111155b61247d57600080fd5b6000821215806123bc57508281101561078757600080fd5b60008115806123bc575082826124ab8183612998565b92506123f490836129c5565b6001600160a01b0382811660008181526034602090815260408083209486168084529490915281205490926124ef9214906001141790565b9392505050565b600054610100900460ff166125615760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610852565b6000805462010000600160b01b031916620100006001600160a01b03841690810291909117909155158061260657506040516301ffc9a760e01b81526001600160a01b038216906301ffc9a7906125c390637965db0b60e01b906004016128cd565b602060405180830381865afa1580156125e0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061260491906128e2565b155b15612624576040516384d942fd60e01b815260040160405180910390fd5b50565b60008161263f84676765c793fa10079d601b1b612495565b6124ef91906129c5565b60006020828403121561265b57600080fd5b81356001600160e01b0319811681146124ef57600080fd5b6001600160a01b0391909116815260200190565b80356001600160a01b038116811461269e57600080fd5b919050565b6000806000606084860312156126b857600080fd5b833592506126c860208501612687565b9150604084013590509250925092565b6000602082840312156126ea57600080fd5b6124ef82612687565b60008060006060848603121561270857600080fd5b61271184612687565b92506126c860208501612687565b6000806040838503121561273257600080fd5b8235915061274260208401612687565b90509250929050565b60006020828403121561275d57600080fd5b5035919050565b600080600080600060a0868803121561277c57600080fd5b8535945061278c60208701612687565b935061279a60408701612687565b94979396509394606081013594506080013592915050565b600080604083850312156127c557600080fd5b6127ce83612687565b915061274260208401612687565b60008060008060008060c087890312156127f557600080fd5b8635955061280560208801612687565b945061281360408801612687565b935061282160608801612687565b92506080870135915060a087013590509295509295509295565b6000806000806080858703121561285157600080fd5b8435935061286160208601612687565b925061286f60408601612687565b9396929550929360600135925050565b60008060006060848603121561289457600080fd5b505081359360208301359350604090920135919050565b600080604083850312156128be57600080fd5b50508035926020909101359150565b6001600160e01b031991909116815260200190565b6000602082840312156128f457600080fd5b815180151581146124ef57600080fd5b9182526001600160a01b0316602082015260400190565b6020808252601e908201527f53616665456e67696e652f6e6f742d636f6e7472616374456e61626c65640000604082015260600190565b60208082526016908201527514d85999515b99da5b994bdb9bdd0b585b1b1bddd95960521b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761078757610787612982565b634e487b7160e01b600052601260045260246000fd5b6000826129d4576129d46129af565b500490565b8082018082111561078757610787612982565b6000602082840312156129fe57600080fd5b815160ff811681146124ef57600080fd5b8181038181111561078757610787612982565b600181815b80851115612a5d578160001904821115612a4357612a43612982565b80851615612a5057918102915b93841c9390800290612a27565b509250929050565b600082612a7457506001610787565b81612a8157506000610787565b8160018114612a975760028114612aa157612abd565b6001915050610787565b60ff841115612ab257612ab2612982565b50506001821b610787565b5060208310610133831016604e8410600b8410161715612ae0575081810a610787565b612aea8383612a22565b8060001904821115612afe57612afe612982565b029392505050565b60006124ef8383612a65565b600060208284031215612b2457600080fd5b5051919050565b6000600160ff1b8201612b4057612b40612982565b5060000390565b80820260008212600160ff1b84141615612b6357612b63612982565b818105831482151761078757610787612982565b600082612b8657612b866129af565b600160ff1b821460001984141615612ba057612ba0612982565b50059056fe3b5d4cc60d3ec3516ee8ae083bd60934f6eb2a6c54b1229985c41bfb092b26034f14c8366fa999817edc9f29824eb88a00cc31225e2156f399da4bc91049eb10b0fdd1623e42dbffda4acd8bd643e1cb69f00f0e83abeaa8150ee42cf0fd105ea164736f6c6343000811000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102045760003560e01c806301ffc9a71461020957806303ee9f22146102315780630e9e11d31461025757806311005b071461026c5780631b1428201461029a5780631d2a783d146102ad57806320d8a59f146102b657806327a0bb33146102c95780632efcc866146102dc578063340517c9146102e557806338013f021461030c5780633d4225041461031f57806341b3a0d914610366578063438280dd1461036f578063476bb6ef14610396578063485cc955146103a95780634a11825e146103bc5780634e14a967146103cf5780634e5111a6146103e257806362a1e17b146103f557806371d0fb41146103fe57806375b238fc1461042557806376e0b4ca1461042d5780638543d5e014610458578063894ba833146104615780638e5313e01461046957806399bec31514610490578063a39b5580146104a3578063b38234f3146104ac578063bd5f5be6146104d3578063c5b748c0146104e8578063d07900bb146104f1578063d0e8fa8214610592578063d2351cee146105b9578063d49d7867146105ce578063d4b9311d14610605578063d94d420814610618578063da49bada14610650578063dc97e84e1461067b578063e401f2e7146106a2578063e9c26518146106b5578063efabcadc146106ca578063fabde80c146106dd578063fe4f5890146106fd575b600080fd5b61021c610217366004612649565b610710565b60405190151581526020015b60405180910390f35b60005461024a906201000090046001600160a01b031681565b6040516102289190612673565b61026a6102653660046126a3565b61078d565b005b61028c61027a3660046126d8565b60396020526000908152604090205481565b604051908152602001610228565b61026a6102a83660046126f3565b610933565b61028c603c5481565b61026a6102c436600461271f565b610afa565b61026a6102d736600461274b565b610c7b565b61028c603d5481565b61028c7f014f8da3222812608c449a44f4705585c5ce052eeb6f9af0af9209c64b0ba2de81565b603a5461024a906001600160a01b031681565b61035161032d36600461271f565b60366020908152600092835260408084209091529082529020805460019091015482565b60408051928352602083019190915201610228565b61028c60335481565b61028c7f39f61ca2a1a28fee144218173ec637b649a353e4026b2738c673800e5bf1437b81565b61026a6103a4366004612764565b610d78565b61026a6103b73660046127b2565b61106e565b61026a6103ca3660046126a3565b6111d2565b61026a6103dd3660046127dc565b611307565b61026a6103f036600461283b565b611522565b61028c60405481565b61028c7f880a91047114272656e533301261260c75e4d11543ac7303d6fe4204579ec72781565b61028c600081565b61028c61043b36600461271f565b603760209081526000928352604080842090915290825290205481565b61028c603b5481565b61026a611626565b61028c7fe453bacb314e78dcd5192e6b1a2b1f0e7c76e92f6b7e429a6a90f04e39db3b7681565b61026a61049e3660046127dc565b6116f9565b61028c603f5481565b61028c7fd83f5343da19b478b15a140c301a868be9e02603958f38fbd822b9d5c0a2891681565b61028c600080516020612bc683398151915281565b61028c603e5481565b61054e6104ff36600461274b565b603560205260009081526040902080546001820154600283015460038401546004850154600586015460068701546007909701549596949593949293919290916001600160a01b039091169088565b604080519889526020890197909752958701949094526060860192909252608085015260a08401526001600160a01b031660c083015260e082015261010001610228565b61028c7f76d0567582f23e1e9d7a13eeba60f9aea9d69b8da87ca27a8bf3698b35c653db81565b61028c600080516020612be683398151915281565b61026a6105dc3660046126d8565b3360009081526034602090815260408083206001600160a01b0394909416835292905290812055565b61026a61061336600461287f565b611c8c565b61026a6106263660046126d8565b3360009081526034602090815260408083206001600160a01b039490941683529290522060019055565b61028c61065e3660046127b2565b603460209081526000928352604080842090915290825290205481565b61028c7f9a9aef7c1247d5fc769b0185c052913e39673da29a880317dfd20ebf86f26a4981565b61026a6106b036600461274b565b611e7b565b61028c600080516020612ba683398151915281565b61026a6106d83660046126f3565b6120f6565b61028c6106eb3660046126d8565b60386020526000908152604090205481565b61026a61070b3660046128ab565b6121ca565b600080546040516301ffc9a760e01b8152620100009091046001600160a01b0316906301ffc9a7906107469085906004016128cd565b602060405180830381865afa158015610763573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078791906128e2565b92915050565b600054604051632474521560e21b8152620100009091046001600160a01b0316906391d14854906107d290600080516020612bc6833981519152903390600401612904565b602060405180830381865afa1580156107ef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081391906128e2565b61083057604051635e9e090760e01b815260040160405180910390fd5b60335460011461085b5760405162461bcd60e51b81526004016108529061291b565b60405180910390fd5b600083815260356020526040902060018101546108789083612363565b6001820155805460009061088c90846123c5565b6001600160a01b0385166000908152603860205260409020549091506108b29082612363565b6001600160a01b038516600090815260386020526040902055603b546108d89082612363565b603b819055604080518781526001600160a01b03871660208201528082018690526060810192909252517fa77efa51558e27733220e3837e76992ab5f66f58c470d442e01b460a37df79ef9181900360800190a15050505050565b600054604051632474521560e21b8152620100009091046001600160a01b0316906391d148549061097890600080516020612bc6833981519152903390600401612904565b602060405180830381865afa158015610995573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b991906128e2565b6109d657604051635e9e090760e01b815260040160405180910390fd5b6001600160a01b0383166000908152603960205260409020546109f990826123fe565b6001600160a01b03808516600090815260396020908152604080832094909455918516815260389091522054610a2f90826123fe565b6001600160a01b038316600090815260386020526040902055603c54610a5590826123fe565b603c55603b54610a6590826123fe565b603b8190556001600160a01b03848116600081815260396020908152604080832054948816808452603883529281902054603c5482519586529285019390935283018690526060830193909352608082015260a081019190915260c08101919091527fede723541c3aae745504c3732f6a7161031353ddf05caba15d48b1edd35646b99060e0015b60405180910390a1505050565b60008054604051632474521560e21b8152620100009091046001600160a01b0316916391d1485491610b3191903390600401612904565b602060405180830381865afa158015610b4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7291906128e2565b610b8f57604051631886ea7d60e11b815260040160405180910390fd5b60008281526035602052604090206001015415610bfe5760405162461bcd60e51b815260206004820152602760248201527f53616665456e67696e652f636f6c6c61746572616c2d747970652d616c726561604482015266191e4b5a5b9a5d60ca1b6064820152608401610852565b600082815260356020908152604091829020676765c793fa10079d601b1b60018201556006810180546001600160a01b0319166001600160a01b038616179055825460059091015590518381527f715b265758bcd4ecd311bede8dcca05c4b5819e0a2a5c4103abd702862ae2c3591015b60405180910390a15050565b33600081815260396020526040902054610c959083612419565b6001600160a01b038216600090815260396020908152604080832093909355603890522054610cc49083612419565b6001600160a01b038216600090815260386020526040902055603c54610cea9083612419565b603c55603b54610cfa9083612419565b603b8190556001600160a01b038216600081815260396020908152604080832054603883529281902054603c548251958652928501889052908401929092526060830191909152608082015260a08101919091527f11000f3497809a546a9de313df16f9ce615e1c65098ba758180e1cac823ed4159060c001610c6f565b610d8185611e7b565b60008581526036602090815260408083206001600160a01b0388811685529083528184209087168452818420898552603590935292208254610dc39086612434565b83556001830154610dd49085612434565b60018401558154610de59086612363565b82556001820154610df69085612363565b82600101819055506000610e1284600101548360010154612495565b90506000610e2884600101548460010154612495565b9050610e45610e378a336124b7565b610e418a336124b7565b1690565b610e615760405162461bcd60e51b815260040161085290612952565b610e7385600001548460040154612495565b821115610ebc5760405162461bcd60e51b815260206004820152601760248201527653616665456e67696e652f6e6f742d736166652d73726360481b6044820152606401610852565b610ece84600001548460040154612495565b811115610f175760405162461bcd60e51b815260206004820152601760248201527614d85999515b99da5b994bdb9bdd0b5cd859994b591cdd604a1b6044820152606401610852565b60038301546001860154159083101517610f6e5760405162461bcd60e51b815260206004820152601860248201527753616665456e67696e652f64656274466c6f6f722d73726360401b6044820152606401610852565b60038301546001850154159082101517610fc55760405162461bcd60e51b815260206004820152601860248201527714d85999515b99da5b994bd919589d119b1bdbdc8b591cdd60421b6044820152606401610852565b7f4b49cc19514005253f36d0517c21b92404f50cc0d9e0c070af00b96e296b08358a8a8a8a8a8a600001548b600101548b600001548c6001015460405161105a999897969594939291909889526001600160a01b0397881660208a01529590961660408801526060870193909352608086019190915260a085015260c084015260e08301919091526101008201526101200190565b60405180910390a150505050505050505050565b600054610100900460ff161580801561108e5750600054600160ff909116105b806110a85750303b1580156110a8575060005460ff166001145b61110b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610852565b6000805460ff19166001179055801561112e576000805461ff0019166101001790555b611137836124f6565b60016033819055676765c793fa10079d601b1b603e819055603f91909155600a9061116390600f612998565b61116d91906129c5565b604055603a80546001600160a01b0319166001600160a01b03841617905580156111cd576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610aed565b505050565b600054604051632474521560e21b8152620100009091046001600160a01b0316906391d148549061121790600080516020612bc6833981519152903390600401612904565b602060405180830381865afa158015611234573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125891906128e2565b61127557604051635e9e090760e01b815260040160405180910390fd5b60008381526037602090815260408083206001600160a01b03861684529091529020546112a29082612363565b60008481526037602090815260408083206001600160a01b03871680855290835292819020939093558251868152908101919091529081018290527f488ac1e40bb6e5ee1f88b998568d1de4cb595e9ce0e0d4e4d4cc4c202053f10790606001610aed565b600054604051632474521560e21b8152620100009091046001600160a01b0316906391d148549061134c90600080516020612bc6833981519152903390600401612904565b602060405180830381865afa158015611369573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138d91906128e2565b6113aa57604051635e9e090760e01b815260040160405180910390fd5b60008681526036602090815260408083206001600160a01b03891684528252808320898452603590925290912081546113e39085612363565b825560018201546113f49084612363565b600183015580546114059084612363565b8155600181015460009061141990856123c5565b60008a81526037602090815260408083206001600160a01b038c1684529091529020549091506114499086612434565b60008a81526037602090815260408083206001600160a01b03808d1685529083528184209490945592891682526039905220546114869082612434565b6001600160a01b038716600090815260396020526040902055603c546114ac9082612434565b603c819055604080518b81526001600160a01b038b811660208301528a811682840152891660608201526080810188905260a0810187905260c0810192909252517f9bef7b734be54aaed05e906c2ccf923767f44a93d136b674e212ce858a6d031c9181900360e00190a1505050505050505050565b61152c83336124b7565b6115485760405162461bcd60e51b815260040161085290612952565b60008481526037602090815260408083206001600160a01b03871684529091529020546115759082612419565b60008581526037602090815260408083206001600160a01b0388811685529252808320939093558416815220546115ac90826123fe565b60008581526037602090815260408083206001600160a01b038781168086529184529382902094909455805188815292871691830191909152810191909152606081018290527fb08760a077e71005cf3651212fdbd4028d6ebc8e1844c0475f36000f2756c0d7906080015b60405180910390a150505050565b600054604051632474521560e21b8152620100009091046001600160a01b0316906391d148549061166b90600080516020612be6833981519152903390600401612904565b602060405180830381865afa158015611688573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ac91906128e2565b6116c95760405163bb0684b760e01b815260040160405180910390fd5b600060338190556040517f2d4b4ecff7bd7503135271925520a2f6c0d98c9473ffc1a1e72c92502f51b25e9190a1565b60335460011461171b5760405162461bcd60e51b81526004016108529061291b565b60008681526036602090815260408083206001600160a01b0389168452825291829020825180840190935280548352600101549082015261175b87611e7b565b60008781526035602090815260408083208151610100810183528154815260018201549381018490526002820154928101929092526003810154606083015260048101546080830152600581015460a083015260068101546001600160a01b031660c08301526007015460e082015291036118245760405162461bcd60e51b815260206004820152602360248201527f53616665456e67696e652f636f6c6c61746572616c2d747970652d6e6f742d696044820152621b9a5d60ea1b6064820152608401610852565b81516118309085612363565b825260208201516118419084612363565b602083015280516118529084612363565b8152602081015160009061186690856123c5565b9050600061187c83602001518560200151612495565b905061188a603b5483612363565b603b819055506118c460008613156118c085604001516118b287600001518860200151612495565b1115603d54603b5411151690565b1790565b61190e5760405162461bcd60e51b815260206004820152601b60248201527a14d85999515b99da5b994bd8d95a5b1a5b99cb595e18d959591959602a1b6044820152606401610852565b61193b611922600087131560008912151690565b61193486600001518660800151612495565b8311151790565b61197d5760405162461bcd60e51b815260206004820152601360248201527253616665456e67696e652f6e6f742d7361666560681b6044820152606401610852565b61199b611991600087131560008912151690565b6118c08b336124b7565b6119e25760405162461bcd60e51b815260206004820152601860248201527753616665456e67696e652f6e6f742d616c6c6f7765642d7560401b6044820152606401610852565b6119f460008713156118c08a336124b7565b611a3b5760405162461bcd60e51b815260206004820152601860248201527729b0b332a2b733b4b73297b737ba16b0b63637bbb2b216bb60411b6044820152606401610852565b611a4d60008612156118c089336124b7565b611a945760405162461bcd60e51b815260206004820152601860248201527753616665456e67696e652f6e6f742d616c6c6f7765642d7760401b6044820152606401610852565b60208401516060840151821015901517611ae75760405162461bcd60e51b815260206004820152601460248201527329b0b332a2b733b4b73297b232b13a233637b7b960611b6044820152606401610852565b60008a81526037602090815260408083206001600160a01b038c168452909152902054611b149087612434565b60008b81526037602090815260408083206001600160a01b03808e16855290835281842094909455928a168252603890522054611b519083612363565b6001600160a01b038089166000908152603860209081526040808320949094558d8252603681528382208d8416835281528382208851815588820180516001928301558f84526035835292859020885181559188015190820155868401516002820155606087015160038201556080870151600482015560a0870151600582015560c0870151600682018054919094166001600160a01b03199091161790925560e086015160079092019190915585519051603b5492517f182725621f9c0d485fb256f86699c82616bd6e4670325087fd08f643cab7d9179361105a938f938f938f938f938f938f93919290919889526001600160a01b0397881660208a01529587166040890152939095166060870152608086019190915260a085015260c084019290925260e08301919091526101008201526101200190565b600054604051632474521560e21b8152620100009091046001600160a01b0316906391d1485490611cd190600080516020612ba6833981519152903390600401612904565b602060405180830381865afa158015611cee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d1291906128e2565b611d2f5760405163599a6c3360e11b815260040160405180910390fd5b603354600114611d515760405162461bcd60e51b81526004016108529061291b565b816a646562744365696c696e6760a81b03611d7f576000838152603560205260409020600201819055611e3d565b81683232b13a233637b7b960b91b03611dab576000838152603560205260409020600301819055611e3d565b816f6c69717569646174696f6e526174696f60801b03611dde576000838152603560205260409020600501819055611e3d565b60405162461bcd60e51b815260206004820152602e60248201527f53616665456e67696e652f6d6f64696679506172616d65746572732d756e726560448201526d636f676e697a65642d706172616d60901b6064820152608401610852565b60408051848152602081018490529081018290527fc59b1109b54f213212d2f5af5c1dae5e887f9daa63b595578fae847cb048e8f490606001610aed565b6000818152603560205260408120600701549003611ead57600081815260356020526040902043600790910155611ed5565b603f546000828152603560205260409020600701544391611ecd916129d9565b10611ed55750565b600081815260356020908152604080832060060154815163313ce56760e01b815291516001600160a01b039091169392849263313ce56792600480830193928290030181865afa158015611f2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f5191906129ec565b60ff169050600081601214611ff857611f6b826012612a0f565b611f7690600a612b06565b603a54604051632a5001c960e01b81526001600160a01b0390911690632a5001c990611fa6908790600401612673565b6020604051808303816000875af1158015611fc5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fe99190612b12565b611ff391906129c5565b61206b565b603a54604051632a5001c960e01b81526001600160a01b0390911690632a5001c990612028908690600401612673565b6020604051808303816000875af1158015612047573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061206b9190612b12565b90506120a061208961208183633b9aca00612998565b603e54612627565b600086815260356020526040902060050154612627565b600085815260356020526040908190206004810183905543600790910155517fc01d52afff4ef74ce150388c74343e4ab251d73f3d74ad8ab6365320a229c7279161161891879190918252602082015260400190565b61210083336124b7565b61211c5760405162461bcd60e51b815260040161085290612952565b6001600160a01b03831660009081526038602052604090205461213f9082612419565b6001600160a01b03808516600090815260386020526040808220939093559084168152205461216e90826123fe565b6001600160a01b038381166000818152603860209081526040918290209490945580519287168352928201529081018290527f4cd53b0b754082a31f5a6f3dc965c36d1d901c309830e0b4c17949aff97f0b1490606001610aed565b600054604051632474521560e21b8152620100009091046001600160a01b0316906391d148549061220f90600080516020612ba6833981519152903390600401612904565b602060405180830381865afa15801561222c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061225091906128e2565b61226d5760405163599a6c3360e11b815260040160405180910390fd5b60335460011461228f5760405162461bcd60e51b81526004016108529061291b565b8170676c6f62616c446562744365696c696e6760781b036122b457603d81905561232d565b816e726564656d7074696f6e507269636560881b036122d757603e81905561232d565b817664656661756c744c69717569646174696f6e526174696f60481b0361230257604081905561232d565b817a1cd859995d1e541c9a58d955985b1a59109b1bd8dad05b5bdd5b9d602a1b03611dde57603f8190555b60408051838152602081018390527fac7c5c1afaef770ec56ac6268cd3f2fbb1035858ead2601d6553157c33036c3a9101610c6f565b600080821261237d5761237682846129d9565b9050612393565b61238682612b2b565b6123909084612a0f565b90505b6000821215806123a35750828111155b6123ac57600080fd5b6000821315806123bc5750828110155b61078757600080fd5b60006123d18284612b47565b905060008312156123e157600080fd5b8115806123bc5750826123f48383612b77565b1461078757600080fd5b60008261240b83826129d9565b915081101561078757600080fd5b6000826124268382612a0f565b915081111561078757600080fd5b600080821261244e576124478284612a0f565b9050612464565b61245782612b2b565b61246190846129d9565b90505b6000821315806124745750828111155b61247d57600080fd5b6000821215806123bc57508281101561078757600080fd5b60008115806123bc575082826124ab8183612998565b92506123f490836129c5565b6001600160a01b0382811660008181526034602090815260408083209486168084529490915281205490926124ef9214906001141790565b9392505050565b600054610100900460ff166125615760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610852565b6000805462010000600160b01b031916620100006001600160a01b03841690810291909117909155158061260657506040516301ffc9a760e01b81526001600160a01b038216906301ffc9a7906125c390637965db0b60e01b906004016128cd565b602060405180830381865afa1580156125e0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061260491906128e2565b155b15612624576040516384d942fd60e01b815260040160405180910390fd5b50565b60008161263f84676765c793fa10079d601b1b612495565b6124ef91906129c5565b60006020828403121561265b57600080fd5b81356001600160e01b0319811681146124ef57600080fd5b6001600160a01b0391909116815260200190565b80356001600160a01b038116811461269e57600080fd5b919050565b6000806000606084860312156126b857600080fd5b833592506126c860208501612687565b9150604084013590509250925092565b6000602082840312156126ea57600080fd5b6124ef82612687565b60008060006060848603121561270857600080fd5b61271184612687565b92506126c860208501612687565b6000806040838503121561273257600080fd5b8235915061274260208401612687565b90509250929050565b60006020828403121561275d57600080fd5b5035919050565b600080600080600060a0868803121561277c57600080fd5b8535945061278c60208701612687565b935061279a60408701612687565b94979396509394606081013594506080013592915050565b600080604083850312156127c557600080fd5b6127ce83612687565b915061274260208401612687565b60008060008060008060c087890312156127f557600080fd5b8635955061280560208801612687565b945061281360408801612687565b935061282160608801612687565b92506080870135915060a087013590509295509295509295565b6000806000806080858703121561285157600080fd5b8435935061286160208601612687565b925061286f60408601612687565b9396929550929360600135925050565b60008060006060848603121561289457600080fd5b505081359360208301359350604090920135919050565b600080604083850312156128be57600080fd5b50508035926020909101359150565b6001600160e01b031991909116815260200190565b6000602082840312156128f457600080fd5b815180151581146124ef57600080fd5b9182526001600160a01b0316602082015260400190565b6020808252601e908201527f53616665456e67696e652f6e6f742d636f6e7472616374456e61626c65640000604082015260600190565b60208082526016908201527514d85999515b99da5b994bdb9bdd0b585b1b1bddd95960521b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761078757610787612982565b634e487b7160e01b600052601260045260246000fd5b6000826129d4576129d46129af565b500490565b8082018082111561078757610787612982565b6000602082840312156129fe57600080fd5b815160ff811681146124ef57600080fd5b8181038181111561078757610787612982565b600181815b80851115612a5d578160001904821115612a4357612a43612982565b80851615612a5057918102915b93841c9390800290612a27565b509250929050565b600082612a7457506001610787565b81612a8157506000610787565b8160018114612a975760028114612aa157612abd565b6001915050610787565b60ff841115612ab257612ab2612982565b50506001821b610787565b5060208310610133831016604e8410600b8410161715612ae0575081810a610787565b612aea8383612a22565b8060001904821115612afe57612afe612982565b029392505050565b60006124ef8383612a65565b600060208284031215612b2457600080fd5b5051919050565b6000600160ff1b8201612b4057612b40612982565b5060000390565b80820260008212600160ff1b84141615612b6357612b63612982565b818105831482151761078757610787612982565b600082612b8657612b866129af565b600160ff1b821460001984141615612ba057612ba0612982565b50059056fe3b5d4cc60d3ec3516ee8ae083bd60934f6eb2a6c54b1229985c41bfb092b26034f14c8366fa999817edc9f29824eb88a00cc31225e2156f399da4bc91049eb10b0fdd1623e42dbffda4acd8bd643e1cb69f00f0e83abeaa8150ee42cf0fd105ea164736f6c6343000811000a",
  "devdoc": {
    "custom:changes": "Replaced MakerDAO’s `authorizedAccounts` with `SuAuthenticatedNonUpgradeable` for access control.                 Removed `LibNote` for event logging, requiring custom events (TODO).                 Added `ISuOracleAggregator` integration for dynamic safety price updates.                 Introduced `redemptionPrice`, `safetyPriceValidBlockAmount`, and `defaultLiquidationRatio`.                 Moved structs to `ISafeEngine` interface.",
    "custom:events": "No events are defined; custom events need to be added (as noted in FIXME).                Example placeholder events are included in comments but not emitted due to lack of definition.",
    "custom:security": "Only enabled contracts (`contractEnabled == 1`) allow state-changing operations.                 Administrative functions are restricted by SuAuthenticatedNonUpgradeable roles (DAO, Admin, DisablerAccess).                 Only authorized users/contracts (via `cdpRights`) can modify specific Safes or balances.                 Safety price updates rely on ISuOracleAggregator, which must provide reliable price feeds.",
    "custom:usage": "- **Initialization**: Deploy with access control and oracle addresses.   ```solidity   SafeEngine safeEngine = new SafeEngine(accessControlAddress, oracleAddress);   ``` - **Collateral Type Setup**: Initialize a collateral type with its token address.   ```solidity   safeEngine.initializeCollateralType(\"ETH-A\", ethTokenAddress);   ``` - **Parameter Modification**: DAO updates debt ceilings, redemption price, or liquidation ratios.   ```solidity   safeEngine.modifyParameters(\"globalDebtCeiling\", newCeiling); // Update global debt ceiling   safeEngine.modifyParameters(\"ETH-A\", \"debtCeiling\", newCeiling); // Update collateral debt ceiling   ``` - **Safe Operations**: Users or adapters modify Safe collateral/debt via DssProxyActions or direct calls.   ```solidity   safeEngine.modifySAFECollateralization(\"ETH-A\", safe, collateralSrc, debtDst, deltaCollateral, deltaDebt);   ``` - **Price Updates**: Trigger safety price updates for a collateral type.   ```solidity   safeEngine.updateSafetyPrice(\"ETH-A\"); // Refresh safety price from oracle   ``` - **Disabling**: DisablerAccess accounts can disable the contract.   ```solidity   safeEngine.disableContract(); // Halt operations   ```",
    "details": "Manages collateral, debt, and StablePro coin balances for Safes, tracks global and per-collateral-type debt limits,      and enforces collateralization ratios using safety prices from an oracle. Supports operations like collateral      deposit/withdrawal, debt generation/repayment, liquidation, and settlement. Uses SuAuthenticatedNonUpgradeable for      access control and integrates with ISuOracleAggregator for price feeds. Can be disabled by authorized accounts to      halt operations. This contract is a fork of MakerDAO’s Vat.sol, adapted for StableUnit with features like dynamic      safety price updates and redemption price.",
    "kind": "dev",
    "methods": {
      "approveSAFEModification(address)": {
        "details": "Sets `cdpRights[msg.sender][usr] = 1`.",
        "params": {
          "usr": "Address to grant modification rights."
        }
      },
      "confiscateSAFECollateralAndDebt(bytes32,address,address,address,int256,int256)": {
        "custom:access": "OnlyCDPAccess",
        "details": "Transfers collateral and debt to counterparties, typically for auctions. Requires CDP access permissions.",
        "params": {
          "cdp": "Address of the Safe to confiscate.",
          "collateralCounterparty": "Address to debit collateral from.",
          "collateralType": "Unique identifier for the collateral type.",
          "debtCounterparty": "Address to debit debt from.",
          "deltaCollateral": "Amount to confiscate collateral [wad].",
          "deltaDebt": "Amount to confiscate debt [wad]."
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "createUnbackedDebt(address,address,uint256)": {
        "custom:access": "OnlyCDPAccess",
        "details": "Increases debt and coin balances for destination addresses. Requires CDP access permissions.",
        "params": {
          "coinDestination": "Address to assign the StablePro coins.",
          "debtDestination": "Address to assign the unbacked debt.",
          "rad": "Amount of unbacked debt to create [rad]."
        }
      },
      "denySAFEModification(address)": {
        "details": "Sets `cdpRights[msg.sender][usr] = 0`.",
        "params": {
          "usr": "Address to revoke modification rights."
        }
      },
      "disableContract()": {
        "custom:access": "OnlyDisablerAccess",
        "details": "Sets `contractEnabled` to 0 and emits a placeholder event. Only callable by DisablerAccess accounts."
      },
      "initialize(address,address)": {
        "details": "Sets initial state: contract enabled, redemption price to 1e27, safety price validity to 1 block,      and default liquidation ratio to 150%. Inherits access control from SuAuthenticatedNonUpgradeable.",
        "params": {
          "accessControl": "Address of the access control singleton contract.",
          "oracle": "Address of the ISuOracleAggregator contract."
        }
      },
      "initializeCollateralType(bytes32,address)": {
        "custom:access": "OnlyAdmin",
        "details": "Sets accumulated rate to 1e27 and assigns the collateral token address and default liquidation ratio.      Reverts if already initialized. Only callable by Admin.",
        "params": {
          "collateralAddress": "Address of the collateral token contract.",
          "collateralType": "Unique identifier for the collateral type (e.g., \"ETH-A\")."
        }
      },
      "modifyCollateralBalance(bytes32,address,int256)": {
        "custom:access": "OnlyCDPAccess",
        "details": "Adds or subtracts collateral tokens, typically called by CollateralJoin adapters.      Requires caller to have CDP access permissions.",
        "params": {
          "collateralType": "Unique identifier for the collateral type.",
          "usr": "Address to modify the collateral balance for.",
          "wad": "Amount to add (positive) or subtract (negative) [wad]."
        }
      },
      "modifyParameters(bytes32,bytes32,uint256)": {
        "custom:access": "OnlyDAO",
        "details": "Updates parameters like debt ceiling, debt floor, or liquidation ratio.      Requires contract to be enabled. Only callable by DAO.",
        "params": {
          "collateralType": "Unique identifier for the collateral type.",
          "data": "New value for the parameter.",
          "what": "Parameter to modify (e.g., \"debtCeiling\", \"liquidationRatio\")."
        }
      },
      "modifyParameters(bytes32,uint256)": {
        "custom:access": "OnlyDAO",
        "details": "Updates parameters like global debt ceiling, redemption price, default liquidation ratio, or safety price validity.      Requires contract to be enabled. Only callable by DAO.",
        "params": {
          "data": "New value for the parameter.",
          "what": "Parameter to modify (e.g., \"globalDebtCeiling\", \"redemptionPrice\")."
        }
      },
      "modifySAFECollateralization(bytes32,address,address,address,int256,int256)": {
        "details": "Updates Safe state, checks debt ceilings, collateralization ratio, and permissions.      Requires contract to be enabled and collateral type to be initialized.",
        "params": {
          "cdp": "Address of the Safe to modify.",
          "collateralSource": "Address to debit/credit collateral.",
          "collateralType": "Unique identifier for the collateral type.",
          "debtDestination": "Address to debit/credit debt.",
          "deltaCollateral": "Amount to add (positive) or remove (negative) collateral [wad].",
          "deltaDebt": "Amount to add (positive) or remove (negative) debt [wad]."
        }
      },
      "settleDebt(uint256)": {
        "details": "Reduces debt and coin balances for the caller, typically used by AccountingEngine.",
        "params": {
          "rad": "Amount of debt to settle [rad]."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      },
      "transferCollateral(bytes32,address,address,uint256)": {
        "details": "Requires the caller to have permission to modify the source address’s Safe.",
        "params": {
          "collateralType": "Unique identifier for the collateral type.",
          "dst": "Destination address to credit collateral to.",
          "src": "Source address to debit collateral from.",
          "wad": "Amount of collateral to transfer [wad]."
        }
      },
      "transferInternalCoins(address,address,uint256)": {
        "details": "Requires the caller to have permission to modify the source address’s Safe.",
        "params": {
          "dst": "Destination address to credit coins to.",
          "rad": "Amount of StablePro coins to transfer [rad].",
          "src": "Source address to debit coins from."
        }
      },
      "transferSAFECollateralAndDebt(bytes32,address,address,int256,int256)": {
        "details": "Updates source and destination Safe states, ensuring collateralization and debt floor requirements.      Requires caller to have permission for both Safes.",
        "params": {
          "collateralType": "Unique identifier for the collateral type.",
          "deltaCollateral": "Amount to transfer collateral [wad].",
          "deltaDebt": "Amount to transfer debt [wad].",
          "dst": "Address of the destination Safe.",
          "src": "Address of the source Safe."
        }
      },
      "updateAccumulatedRate(bytes32,address,int256)": {
        "custom:access": "OnlyCDPAccess",
        "details": "Adjusts the collateral type’s rate and credits surplus to the destination address.      Requires contract to be enabled and CDP access permissions.",
        "params": {
          "accumulatedRate": "Change in accumulated rate [ray].",
          "collateralType": "Unique identifier for the collateral type.",
          "surplusDst": "Address to credit surplus StablePro coins."
        }
      },
      "updateSafetyPrice(bytes32)": {
        "details": "Fetches the collateral’s fiat price from ISuOracleAggregator, adjusts for token decimals,      and calculates the safety price as (realPrice / redemptionPrice / liquidationRatio).      Only updates if the current safety price is unset or expired based on `safetyPriceValidBlockAmount`.",
        "params": {
          "collateralType": "Unique identifier for the collateral type."
        }
      }
    },
    "title": "SafeEngine",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "ORACLE()": {
        "notice": "Oracle aggregator providing collateral price feeds."
      },
      "approveSAFEModification(address)": {
        "notice": "Grants a user permission to modify the caller’s Safe."
      },
      "cdpRights(address,address)": {
        "notice": "Maps Safe owners to operators with permission to modify their Safes."
      },
      "coinBalance(address)": {
        "notice": "Tracks internal StablePro coin balances per user [rad]."
      },
      "collateralTypes(bytes32)": {
        "notice": "Maps collateral types to their configuration (e.g., debt ceiling, safety price)."
      },
      "confiscateSAFECollateralAndDebt(bytes32,address,address,address,int256,int256)": {
        "notice": "Confiscates collateral and debt from a Safe during liquidation."
      },
      "contractEnabled()": {
        "notice": "Tracks whether the contract is enabled (1) or disabled (0)."
      },
      "createUnbackedDebt(address,address,uint256)": {
        "notice": "Creates unbacked debt, typically for bad debt handling."
      },
      "debtBalance(address)": {
        "notice": "Tracks debt balances per user, offsetting coin balances [rad]."
      },
      "defaultLiquidationRatio()": {
        "notice": "Default liquidation ratio set for new collateral types (e.g., 150%) [ray]."
      },
      "denySAFEModification(address)": {
        "notice": "Revokes a user’s permission to modify the caller’s Safe."
      },
      "disableContract()": {
        "notice": "Disables the contract, preventing further state-changing operations."
      },
      "globalDebt()": {
        "notice": "Total debt issued across all Safes [rad]."
      },
      "globalDebtCeiling()": {
        "notice": "Maximum debt allowed across all Safes [rad]."
      },
      "globalUnbackedDebt()": {
        "notice": "Total unbacked debt not covered by collateral [rad]."
      },
      "initialize(address,address)": {
        "notice": "Initializes the SafeEngine with access control and oracle addresses."
      },
      "initializeCollateralType(bytes32,address)": {
        "notice": "Initializes a new collateral type with its token address."
      },
      "modifyCollateralBalance(bytes32,address,int256)": {
        "notice": "Modifies a user’s collateral balance for a collateral type."
      },
      "modifyParameters(bytes32,bytes32,uint256)": {
        "notice": "Modifies parameters for a specific collateral type."
      },
      "modifyParameters(bytes32,uint256)": {
        "notice": "Modifies global protocol parameters."
      },
      "modifySAFECollateralization(bytes32,address,address,address,int256,int256)": {
        "notice": "Modifies a Safe’s collateral and debt, ensuring collateralization requirements."
      },
      "redemptionPrice()": {
        "notice": "Reference price per StablePro, defaulting to 1e27 (1:1 USD) [ray]."
      },
      "safes(bytes32,address)": {
        "notice": "Maps collateral types and Safe addresses to their state (collateral and debt)."
      },
      "safetyPriceValidBlockAmount()": {
        "notice": "Number of blocks a safety price remains valid."
      },
      "settleDebt(uint256)": {
        "notice": "Settles debt using available StablePro coin balance."
      },
      "tokenCollateral(bytes32,address)": {
        "notice": "Tracks collateral balances per collateral type and user [wad]."
      },
      "transferCollateral(bytes32,address,address,uint256)": {
        "notice": "Transfers collateral between two addresses for a collateral type."
      },
      "transferInternalCoins(address,address,uint256)": {
        "notice": "Transfers internal StablePro coins between two addresses."
      },
      "transferSAFECollateralAndDebt(bytes32,address,address,int256,int256)": {
        "notice": "Transfers collateral and debt between two Safes."
      },
      "updateAccumulatedRate(bytes32,address,int256)": {
        "notice": "Updates the accumulated stability fee rate for a collateral type."
      },
      "updateSafetyPrice(bytes32)": {
        "notice": "Updates the safety price for a collateral type using oracle data."
      }
    },
    "notice": "Core accounting and state management contract for collateralized debt positions (Safes) in the StableUnit protocol.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1226,
        "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 1229,
        "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 25605,
        "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
        "label": "ACCESS_CONTROL_SINGLETON",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(ISuAccessControl)32864"
      },
      {
        "astId": 25893,
        "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 88812,
        "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
        "label": "contractEnabled",
        "offset": 0,
        "slot": "51",
        "type": "t_uint256"
      },
      {
        "astId": 88833,
        "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
        "label": "cdpRights",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 88895,
        "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
        "label": "collateralTypes",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_bytes32,t_struct(CollateralType)97124_storage)"
      },
      {
        "astId": 88903,
        "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
        "label": "safes",
        "offset": 0,
        "slot": "54",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_struct(SAFE)97129_storage))"
      },
      {
        "astId": 88910,
        "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
        "label": "tokenCollateral",
        "offset": 0,
        "slot": "55",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 88915,
        "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
        "label": "coinBalance",
        "offset": 0,
        "slot": "56",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 88920,
        "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
        "label": "debtBalance",
        "offset": 0,
        "slot": "57",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 88924,
        "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
        "label": "ORACLE",
        "offset": 0,
        "slot": "58",
        "type": "t_contract(ISuOracleAggregator)34007"
      },
      {
        "astId": 88927,
        "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
        "label": "globalDebt",
        "offset": 0,
        "slot": "59",
        "type": "t_uint256"
      },
      {
        "astId": 88930,
        "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
        "label": "globalUnbackedDebt",
        "offset": 0,
        "slot": "60",
        "type": "t_uint256"
      },
      {
        "astId": 88933,
        "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
        "label": "globalDebtCeiling",
        "offset": 0,
        "slot": "61",
        "type": "t_uint256"
      },
      {
        "astId": 88936,
        "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
        "label": "redemptionPrice",
        "offset": 0,
        "slot": "62",
        "type": "t_uint256"
      },
      {
        "astId": 88939,
        "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
        "label": "safetyPriceValidBlockAmount",
        "offset": 0,
        "slot": "63",
        "type": "t_uint256"
      },
      {
        "astId": 88942,
        "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
        "label": "defaultLiquidationRatio",
        "offset": 0,
        "slot": "64",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ISuAccessControl)32864": {
        "encoding": "inplace",
        "label": "contract ISuAccessControl",
        "numberOfBytes": "20"
      },
      "t_contract(ISuOracleAggregator)34007": {
        "encoding": "inplace",
        "label": "contract ISuOracleAggregator",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(SAFE)97129_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ISafeEngine.SAFE)",
        "numberOfBytes": "32",
        "value": "t_struct(SAFE)97129_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_struct(SAFE)97129_storage))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => struct ISafeEngine.SAFE))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(SAFE)97129_storage)"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_bytes32,t_struct(CollateralType)97124_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct ISafeEngine.CollateralType)",
        "numberOfBytes": "32",
        "value": "t_struct(CollateralType)97124_storage"
      },
      "t_struct(CollateralType)97124_storage": {
        "encoding": "inplace",
        "label": "struct ISafeEngine.CollateralType",
        "members": [
          {
            "astId": 97109,
            "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
            "label": "debtAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 97111,
            "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
            "label": "accumulatedRate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 97113,
            "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
            "label": "debtCeiling",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 97115,
            "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
            "label": "debtFloor",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 97117,
            "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
            "label": "safetyPrice",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 97119,
            "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
            "label": "liquidationRatio",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 97121,
            "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
            "label": "collateralAddress",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 97123,
            "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
            "label": "safetyPriceBlockNumber",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(SAFE)97129_storage": {
        "encoding": "inplace",
        "label": "struct ISafeEngine.SAFE",
        "members": [
          {
            "astId": 97126,
            "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
            "label": "lockedCollateral",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 97128,
            "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
            "label": "generatedDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}