{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable2Step.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Ownable.sol\";\n\n/**\n * @dev Contract module which provides access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership} and {acceptOwnership}.\n *\n * This module is used through inheritance. It will make available all functions\n * from parent (Ownable).\n */\nabstract contract Ownable2Step is Ownable {\n    address private _pendingOwner;\n\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Returns the address of the pending owner.\n     */\n    function pendingOwner() public view virtual returns (address) {\n        return _pendingOwner;\n    }\n\n    /**\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\n        _pendingOwner = newOwner;\n        emit OwnershipTransferStarted(owner(), newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual override {\n        delete _pendingOwner;\n        super._transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev The new owner accepts the ownership transfer.\n     */\n    function acceptOwnership() public virtual {\n        address sender = _msgSender();\n        require(pendingOwner() == sender, \"Ownable2Step: caller is not the new owner\");\n        _transferOwnership(sender);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/exchange/contracts/interfaces/ITopStakers.sol": {
      "content": "// SPDX-License-Identifier: BSL 1.1\npragma solidity ^0.8.0;\n\ninterface ITopStakers {\n    /* ===================== ERRORS ===================== */\n    error NotStakerFound();\n    error SubscriptionDelayError();\n    error AmountMustBeMoreThatMinimum();\n    error InsufficientStake(uint256 available, uint256 requested);\n    error LockExpired();\n    error TokensDelegated();\n    error AlreadyInTop();\n    error OnlyAdminError();\n    error InvalidAddress();\n    error OutOfBounds();\n\n    /* ===================== EVENTS ===================== */\n\n    event SubscriptionRequested(address indexed user, uint256 amount, uint256 activationTime);\n    event TopStakersMaxCountUpdated(uint256 newTopStakersCount);\n    event VeTokenUpdated(address _veToken);\n    event MinStakingAmountUpdated(uint256 newAmount);\n    event SubscriptionDelayUpdated(uint256 newDelay);\n    event SubscriptionRemoved(address user);\n\n    /* ========================= VARS ========================== */\n\n    function maxTopStakersCount() external view returns(uint256);\n\n    /* ==================== MUTABLE METHODS ==================== */\n\n    /**\n      * @notice Admin function to change number of top stakers\n     **/\n    function changeMaxTopStakersCount(uint256 newTopStakersCount) external;\n\n    /**\n      * @notice Admin function to change veToken address\n     **/\n    function changeVeToken(address veToken) external;\n\n    /**\n      * @notice Admin function to change minStakingAmount\n     **/\n    function changeMinStakingAmount(uint256 minStakingAmount) external;\n\n    /**\n     * @notice Admin function to change subscriptionDelay\n     **/\n    function changeSubscriptionDelay(uint256 minStakingAmount) external;\n\n    /**\n      * @notice User function to add yourself in stakers list to be able to be topStaker for liquidation\n     **/\n    function subscribe() external;\n\n    /**\n      * @notice User function to remove yourself from stakers list\n     **/\n    function unsubscribe() external;\n\n    /* ==================== VIEW METHODS ==================== */\n\n    /**\n      * @notice Returns if user is top staker or not\n     **/\n    function isTopStaker(address staker) external view returns(bool);\n\n\n    /**\n      * @notice Returns if user is staker with not expired stake\n     **/\n    function isStaker(address user) external view returns(bool);\n\n    /**\n      * @notice Returns the list of users that are topStakers\n     **/\n    function getTopStakers() external view returns(address[] memory);\n\n    /**\n      * @notice Returns the amount of subscribed users (stakers list length)\n     **/\n    function getTopStakersLength() external view returns(uint256);\n\n    /**\n     * @notice Returns the address of staker in {index} place\n     **/\n    function getStakerAt(uint256 index) external view returns(address);\n\n    /**\n     * @notice Returns the time left in seconds, before user can call subscribe/unsubscribe\n     **/\n    function getTimeUntilNextSubscribe(address user) external view returns(uint256);\n}"
    },
    "contracts/exchange/contracts/staking/TopStakers.sol": {
      "content": "// SPDX-License-Identifier: BSL 1.1\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable2Step.sol\";\nimport \"../interfaces/ITopStakers.sol\";\n\nstruct LockedBalance {\n    int128 amount;\n    int128 delegated;\n    uint256 end;\n    address delegatee;\n}\n\ninterface IVeToken {\n    function balanceOf(address _owner) external view returns (uint256);\n    function locked(address user) external view returns (LockedBalance memory);\n}\n\n/**\n  * @title TopStakers\n  * @notice Contract that have functionality to work with Top Stakers.\n  * They need to have veToken and call subscribe to participate in this list.\n **/\ncontract TopStakers is ITopStakers, Ownable2Step {\n    address public admin;\n    address[] public topStakers;\n    uint256 public maxTopStakersCount; // Max number of stakers we want to store on the top\n    uint256 public minStakingAmount; // minimal amount of staked token to be able to subscribe in the list\n    uint256 public subscriptionDelay;\n    IVeToken public veToken; // Address(interface) of vested escrow token\n    mapping(address => uint256) public lastOperationTime;\n    mapping(address => bool) public isStaker;\n\n    constructor(address _veToken) {\n        veToken = IVeToken(_veToken);\n        maxTopStakersCount = 5;\n        minStakingAmount = 0;\n        subscriptionDelay = 30;\n    }\n\n    modifier checkDelay() {\n        if (block.timestamp <= lastOperationTime[msg.sender] + subscriptionDelay) revert SubscriptionDelayError();\n        _;\n        lastOperationTime[msg.sender] = block.timestamp;\n    }\n\n    function changeMaxTopStakersCount(uint256 newMaxTopStakersCount) external onlyOwner {\n        maxTopStakersCount = newMaxTopStakersCount;\n        emit TopStakersMaxCountUpdated(newMaxTopStakersCount);\n    }\n\n    function changeVeToken(address _veToken) external onlyOwner {\n        veToken = IVeToken(_veToken);\n        emit VeTokenUpdated(_veToken);\n    }\n\n    function changeMinStakingAmount(uint256 _minStakingAmount) external onlyOwner {\n        minStakingAmount = _minStakingAmount;\n        emit MinStakingAmountUpdated(_minStakingAmount);\n    }\n\n    function changeSubscriptionDelay(uint256 newDelay) external onlyOwner {\n        subscriptionDelay = newDelay;\n        emit SubscriptionDelayUpdated(newDelay);\n    }\n\n    /**\n      * @notice Finds an expired staker to replace or the staker with minimum balance if no expired stakers found\n      * @dev Important: Returns immediately upon finding first expired staker.\n      *      Expired stakers are not automatically removed from the list - they remain until:\n      *      1. They are replaced by a new staker (they are given priority for replacement), or\n      *      2. They manually unsubscribe\n      *      If no expired stakers are found, returns position of the staker with minimum balance.\n      * @param user Address to check against the top stakers list\n      * @return minPosition Position of either:\n      *         - First found expired staker (priority for replacement)\n      *         - Minimum balance holder (if no expired stakers)\n      * @return minBalance The balance (0 if expired staker found, otherwise minimum balance among active stakers)\n      */\n    function _findMinStakerAndCheckUser(address user) internal view returns(uint256 minPosition, uint256 minBalance) {\n        uint256 len = topStakers.length;\n        minBalance = len == 0 ? 0 : type(uint256).max;\n        minPosition = 0;\n\n        for (uint256 i = 0; i < len; i++) {\n            if (user == topStakers[i]) revert AlreadyInTop();\n\n            LockedBalance memory lock = veToken.locked(topStakers[i]);\n            if (lock.end < block.timestamp) {\n                return (i, 0);\n            }\n\n            uint256 stakerBalance = veToken.balanceOf(topStakers[i]);\n            if (stakerBalance < minBalance) {\n                minBalance = stakerBalance;\n                minPosition = i;\n            }\n        }\n    }\n\n    function subscribe() external checkDelay {\n        LockedBalance memory userLock = veToken.locked(msg.sender);\n        uint256 amount = veToken.balanceOf(msg.sender);\n        if (amount <= minStakingAmount) revert AmountMustBeMoreThatMinimum();\n        // Check that lock is not expired\n        if (userLock.end < block.timestamp) revert LockExpired();\n        // Check that tokens are not delegated to another person\n        if (userLock.delegatee != address(0) && userLock.delegatee != msg.sender) revert TokensDelegated();\n\n        uint256 len = topStakers.length;\n        if (len < maxTopStakersCount) {\n            topStakers.push(msg.sender);\n\n            isStaker[msg.sender] = true;\n            emit SubscriptionRequested(msg.sender, amount, block.timestamp);\n            return;\n        }\n\n        (uint256 minPosition, uint256 minBalance) = _findMinStakerAndCheckUser(msg.sender);\n        if (amount > minBalance) {\n            emit SubscriptionRemoved(topStakers[minPosition]);\n            topStakers[minPosition] = msg.sender;\n        }\n\n        isStaker[msg.sender] = true;\n        emit SubscriptionRequested(msg.sender, amount, block.timestamp);\n    }\n\n    function _unsubscribe(address user) internal {\n        if (topStakers.length == 0 || user == address(0)) revert NotStakerFound();\n\n        uint256 len = topStakers.length;\n        for (uint256 i = 0; i < len; i++) {\n            if (topStakers[i] == user) {\n                // Swap the element with the last one and remove the last element\n                topStakers[i] = topStakers[len - 1];\n                topStakers.pop();\n                isStaker[user] = false;\n                emit SubscriptionRemoved(user);\n                return;\n            }\n        }\n\n        revert NotStakerFound();\n    }\n\n    function unsubscribe() external checkDelay {\n        _unsubscribe(msg.sender);\n    }\n\n    /* ==================== VIEW METHODS ==================== */\n\n    function isTopStaker(address staker) external view returns (bool) {\n        uint256 len = topStakers.length;\n        for (uint256 i = 0; i < len; i++) {\n            if (topStakers[i] == staker) return true;\n        }\n        return false;\n    }\n\n    function getTopStakers() external view returns (address[] memory) {\n        return topStakers;\n    }\n\n    function getTopStakersLength() external view returns (uint256) {\n        return topStakers.length;\n    }\n\n    function getStakerAt(uint256 index) external view returns (address) {\n        if (index >= topStakers.length) revert OutOfBounds();\n        return topStakers[index];\n    }\n\n    function getTimeUntilNextSubscribe(address user) external view returns (uint256) {\n        uint256 nextOperationTime = lastOperationTime[user] + subscriptionDelay;\n        if (block.timestamp >= nextOperationTime) {\n            return 0;\n        }\n        return nextOperationTime - block.timestamp;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1
    },
    "viaIR": false,
    "metadata": {
      "bytecodeHash": "none",
      "useLiteralContent": true
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}