{
  "address": "0xE4D7E573533AD2658E6E9D0A55823795fbEF0Aea",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "internalType": "contract ICollateralJoin",
          "name": "collateralJoin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amt",
          "type": "uint256"
        }
      ],
      "name": "exitTokenCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "internalType": "contract ICollateralJoin",
          "name": "collateralJoin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amt",
          "type": "uint256"
        }
      ],
      "name": "freeTokenCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "taxCollector",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "coinJoin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "wad",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockupPeriod",
          "type": "uint256"
        }
      ],
      "name": "generateDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        }
      ],
      "name": "getAvailableToBorrow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        }
      ],
      "name": "getAvailableToWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        }
      ],
      "name": "getCdpId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        }
      ],
      "name": "getCdpInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "internalType": "contract ICollateralJoin",
          "name": "collateralJoin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amt",
          "type": "uint256"
        }
      ],
      "name": "lockTokenCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "taxCollector",
          "type": "address"
        },
        {
          "internalType": "contract ICollateralJoin",
          "name": "collateralJoin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "coinJoin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deltaWad",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockupPeriod",
          "type": "uint256"
        }
      ],
      "name": "lockTokenCollateralAndGenerateDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "taxCollector",
          "type": "address"
        },
        {
          "internalType": "contract ICollateralJoin",
          "name": "collateralJoin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "coinJoin",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amtC",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "wadD",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockupPeriod",
          "type": "uint256"
        }
      ],
      "name": "openLockTokenCollateralAndGenerateDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "coinJoin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        }
      ],
      "name": "repayAllDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "internalType": "contract ICollateralJoin",
          "name": "collateralJoin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "coinJoin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amtC",
          "type": "uint256"
        }
      ],
      "name": "repayAllDebtAndFreeTokenCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "coinJoin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "repayDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "internalType": "contract ICollateralJoin",
          "name": "collateralJoin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "coinJoin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amtC",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "wadD",
          "type": "uint256"
        }
      ],
      "name": "repayDebtAndFreeTokenCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "8c060bc8c39a7272c2849a174b3b4791",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"contract ICollateralJoin\",\"name\":\"collateralJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"exitTokenCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"contract ICollateralJoin\",\"name\":\"collateralJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"freeTokenCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"taxCollector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"coinJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockupPeriod\",\"type\":\"uint256\"}],\"name\":\"generateDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"}],\"name\":\"getAvailableToBorrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"}],\"name\":\"getAvailableToWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"}],\"name\":\"getCdpId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"}],\"name\":\"getCdpInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"contract ICollateralJoin\",\"name\":\"collateralJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"lockTokenCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"taxCollector\",\"type\":\"address\"},{\"internalType\":\"contract ICollateralJoin\",\"name\":\"collateralJoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"coinJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deltaWad\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockupPeriod\",\"type\":\"uint256\"}],\"name\":\"lockTokenCollateralAndGenerateDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"taxCollector\",\"type\":\"address\"},{\"internalType\":\"contract ICollateralJoin\",\"name\":\"collateralJoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"coinJoin\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amtC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wadD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockupPeriod\",\"type\":\"uint256\"}],\"name\":\"openLockTokenCollateralAndGenerateDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"coinJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"}],\"name\":\"repayAllDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"contract ICollateralJoin\",\"name\":\"collateralJoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"coinJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtC\",\"type\":\"uint256\"}],\"name\":\"repayAllDebtAndFreeTokenCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"coinJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"repayDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"contract ICollateralJoin\",\"name\":\"collateralJoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"coinJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wadD\",\"type\":\"uint256\"}],\"name\":\"repayDebtAndFreeTokenCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"custom:changes\":\"Removed functions from MakerDAO\\u2019s version (e.g., ETH/GNT support, some Safe management) to reduce deployment size.                 Replaced `vat` with `safeEngine` and updated to StableUnit-specific interfaces.\",\"custom:security\":\"This contract is stateless and relies on DSProxy for access control. Users must approve token transfers                 to the proxy for operations like locking collateral or repaying debt. The SafeEngine enforces collateralization                 and debt limits. Some functions assume collateral tokens have arbitrary decimals, handled via `convertTo18`.\",\"custom:usage\":\"- **Deployment**: Deploy as a stateless contract for DSProxy use.   ```solidity   DssProxyActions proxyActions = new DssProxyActions();   ``` - **Lock Collateral**: Deposit collateral into a Safe.   ```solidity   proxyActions.lockTokenCollateral(cdpManager, collateralJoin, cdpId, amount);   ``` - **Generate Debt**: Draw StablePro debt from a Safe.   ```solidity   proxyActions.generateDebt(cdpManager, taxCollector, coinJoin, cdpId, amount, lockupPeriod);   ``` - **Repay Debt**: Repay StablePro debt to a Safe.   ```solidity   proxyActions.repayDebt(cdpManager, coinJoin, cdpId, amount);   ``` - **Combined Operations**: Lock collateral and generate debt in one transaction.   ```solidity   proxyActions.lockTokenCollateralAndGenerateDebt(cdpManager, taxCollector, collateralJoin, coinJoin, cdpId, collateralAmount, debtAmount, lockupPeriod);   ``` - **Query Safe Info**: Retrieve Safe details for UI display.   ```solidity   (uint256 lockedCollateral, uint256 generatedDebt) = proxyActions.getCdpInfo(cdpManager, user, collateralType);   ```\",\"custom:warning\":\"Functions are intended for DSProxy use; direct calls may be unsafe due to lack of access control.\",\"details\":\"Provides functions to manage collateralized debt positions (Safes) through a user\\u2019s proxy, including      locking/unlocking collateral, generating/repaying debt, and querying Safe information. It interacts with      StableUnit contracts like DssCdpManager, SafeEngine, CollateralJoin, CoinJoin, and TaxCollector. This contract      is designed to be called via a DSProxy, reducing complexity for users, and includes view functions for UI integration.      Some functions were removed from the MakerDAO version to optimize deployment size.\",\"kind\":\"dev\",\"methods\":{\"exitTokenCollateral(address,address,uint256,uint256)\":{\"details\":\"Transfers collateral from the Safe to the proxy and withdraws tokens via CollateralJoin.\",\"params\":{\"amt\":\"Amount of collateral to withdraw [in token\\u2019s decimal precision].\",\"cdp\":\"Unique identifier of the Safe.\",\"collateralJoin\":\"Address of the CollateralJoin contract.\",\"manager\":\"Address of the DssCdpManager contract.\"}},\"freeTokenCollateral(address,address,uint256,uint256)\":{\"details\":\"Reduces the Safe\\u2019s collateral balance and withdraws tokens via CollateralJoin.\",\"params\":{\"amt\":\"Amount of collateral to unlock [in token\\u2019s decimal precision].\",\"cdp\":\"Unique identifier of the Safe.\",\"collateralJoin\":\"Address of the CollateralJoin contract.\",\"manager\":\"Address of the DssCdpManager contract.\"}},\"generateDebt(address,address,address,uint256,uint256,uint256)\":{\"details\":\"Increases Safe debt, transfers StablePro to the proxy, and withdraws tokens via CoinJoin.\",\"params\":{\"cdp\":\"Unique identifier of the Safe.\",\"coinJoin\":\"Address of the CoinJoin contract.\",\"lockupPeriod\":\"Lockup period for the generated StablePro (protocol-specific).\",\"manager\":\"Address of the DssCdpManager contract.\",\"taxCollector\":\"Address of the TaxCollector contract.\",\"wad\":\"Amount of StablePro to generate [wad].\"}},\"getAvailableToBorrow(address,address,bytes32)\":{\"details\":\"Determines borrowing capacity based on collateral value, debt limits, and safety price.\",\"params\":{\"collateralType\":\"Unique identifier for the collateral type.\",\"manager\":\"Address of the DssCdpManager contract.\",\"user\":\"Address of the Safe owner.\"},\"returns\":{\"_0\":\"Amount of StablePro available to borrow [wad].\"}},\"getAvailableToWithdraw(address,address,bytes32)\":{\"details\":\"Determines excess collateral based on the Safe\\u2019s collateralization ratio and safety price.\",\"params\":{\"collateralType\":\"Unique identifier for the collateral type.\",\"manager\":\"Address of the DssCdpManager contract.\",\"user\":\"Address of the Safe owner.\"},\"returns\":{\"_0\":\"Amount of collateral available to withdraw [wad].\"}},\"getCdpId(address,address,bytes32)\":{\"details\":\"Iterates through the user\\u2019s Safes in DssCdpManager to find the matching collateral type.\",\"params\":{\"collateralType\":\"Unique identifier for the collateral type.\",\"manager\":\"Address of the DssCdpManager contract.\",\"user\":\"Address of the Safe owner.\"},\"returns\":{\"_0\":\"cdpId Unique identifier of the Safe, or type(uint256).max if not found.\"}},\"getCdpInfo(address,address,bytes32)\":{\"details\":\"Queries SafeEngine for the Safe\\u2019s locked collateral and generated debt.\",\"params\":{\"collateralType\":\"Unique identifier for the collateral type.\",\"manager\":\"Address of the DssCdpManager contract.\",\"user\":\"Address of the Safe owner.\"},\"returns\":{\"_0\":\"lockedCollateral Amount of locked collateral [wad].\",\"_1\":\"generatedDebt Amount of generated debt [wad].\"}},\"lockTokenCollateral(address,address,uint256,uint256)\":{\"details\":\"Deposits collateral via CollateralJoin and updates the Safe\\u2019s collateral balance.\",\"params\":{\"amt\":\"Amount of collateral to lock [in token\\u2019s decimal precision].\",\"cdp\":\"Unique identifier of the Safe.\",\"collateralJoin\":\"Address of the CollateralJoin contract.\",\"manager\":\"Address of the DssCdpManager contract.\"}},\"lockTokenCollateralAndGenerateDebt(address,address,address,address,uint256,uint256,uint256,uint256)\":{\"details\":\"Combines collateral deposit and debt generation for efficiency.\",\"params\":{\"cdp\":\"Unique identifier of the Safe.\",\"coinJoin\":\"Address of the CoinJoin contract.\",\"collateralAmount\":\"Amount of collateral to lock [in token\\u2019s decimal precision].\",\"collateralJoin\":\"Address of the CollateralJoin contract.\",\"deltaWad\":\"Amount of StablePro debt to generate [wad].\",\"lockupPeriod\":\"Lockup period for the generated StablePro (protocol-specific).\",\"manager\":\"Address of the DssCdpManager contract.\",\"taxCollector\":\"Address of the TaxCollector contract.\"}},\"openLockTokenCollateralAndGenerateDebt(address,address,address,address,bytes32,uint256,uint256,uint256)\":{\"details\":\"Combines Safe creation, collateral deposit, and debt generation for efficiency.\",\"params\":{\"amtC\":\"Amount of collateral to lock [in token\\u2019s decimal precision].\",\"coinJoin\":\"Address of the CoinJoin contract.\",\"collateralJoin\":\"Address of the CollateralJoin contract.\",\"collateralType\":\"Unique identifier for the collateral type.\",\"lockupPeriod\":\"Lockup period for the generated StablePro (protocol-specific).\",\"manager\":\"Address of the DssCdpManager contract.\",\"taxCollector\":\"Address of the TaxCollector contract.\",\"wadD\":\"Amount of StablePro debt to generate [wad].\"},\"returns\":{\"cdp\":\"Unique identifier of the newly created Safe.\"}},\"repayAllDebt(address,address,uint256)\":{\"details\":\"Deposits the required StablePro via CoinJoin and clears all Safe debt, handling ownership or permissions.\",\"params\":{\"cdp\":\"Unique identifier of the Safe.\",\"coinJoin\":\"Address of the CoinJoin contract.\",\"manager\":\"Address of the DssCdpManager contract.\"}},\"repayAllDebtAndFreeTokenCollateral(address,address,address,uint256,uint256)\":{\"details\":\"Combines full debt repayment and collateral withdrawal for efficiency.\",\"params\":{\"amtC\":\"Amount of collateral to unlock [in token\\u2019s decimal precision].\",\"cdp\":\"Unique identifier of the Safe.\",\"coinJoin\":\"Address of the CoinJoin contract.\",\"collateralJoin\":\"Address of the CollateralJoin contract.\",\"manager\":\"Address of the DssCdpManager contract.\"}},\"repayDebt(address,address,uint256,uint256)\":{\"details\":\"Deposits StablePro via CoinJoin and reduces Safe debt, handling ownership or permissions.\",\"params\":{\"cdp\":\"Unique identifier of the Safe.\",\"coinJoin\":\"Address of the CoinJoin contract.\",\"manager\":\"Address of the DssCdpManager contract.\",\"wad\":\"Amount of StablePro to repay [wad].\"}},\"repayDebtAndFreeTokenCollateral(address,address,address,uint256,uint256,uint256)\":{\"details\":\"Combines debt repayment and collateral withdrawal for efficiency.\",\"params\":{\"amtC\":\"Amount of collateral to unlock [in token\\u2019s decimal precision].\",\"cdp\":\"Unique identifier of the Safe.\",\"coinJoin\":\"Address of the CoinJoin contract.\",\"collateralJoin\":\"Address of the CollateralJoin contract.\",\"manager\":\"Address of the DssCdpManager contract.\",\"wadD\":\"Amount of StablePro to repay [wad].\"}}},\"title\":\"DssProxyActions\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"exitTokenCollateral(address,address,uint256,uint256)\":{\"notice\":\"Withdraws collateral from a Safe to the caller.\"},\"freeTokenCollateral(address,address,uint256,uint256)\":{\"notice\":\"Unlocks collateral from a Safe and withdraws it to the caller.\"},\"generateDebt(address,address,address,uint256,uint256,uint256)\":{\"notice\":\"Generates StablePro debt from a Safe.\"},\"getAvailableToBorrow(address,address,bytes32)\":{\"notice\":\"Calculates the amount of StablePro a user can borrow from a Safe.\"},\"getAvailableToWithdraw(address,address,bytes32)\":{\"notice\":\"Calculates the amount of collateral a user can withdraw from a Safe.\"},\"getCdpId(address,address,bytes32)\":{\"notice\":\"Retrieves the Safe ID for a user\\u2019s Safe with a specific collateral type.\"},\"getCdpInfo(address,address,bytes32)\":{\"notice\":\"Retrieves collateral and debt information for a user\\u2019s Safe.\"},\"lockTokenCollateral(address,address,uint256,uint256)\":{\"notice\":\"Locks collateral into a Safe.\"},\"lockTokenCollateralAndGenerateDebt(address,address,address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Locks collateral and generates StablePro debt in a single transaction.\"},\"openLockTokenCollateralAndGenerateDebt(address,address,address,address,bytes32,uint256,uint256,uint256)\":{\"notice\":\"Opens a Safe, locks collateral, and generates StablePro debt in a single transaction.\"},\"repayAllDebt(address,address,uint256)\":{\"notice\":\"Repays all StablePro debt for a Safe.\"},\"repayAllDebtAndFreeTokenCollateral(address,address,address,uint256,uint256)\":{\"notice\":\"Repays all StablePro debt and unlocks collateral from a Safe in a single transaction.\"},\"repayDebt(address,address,uint256,uint256)\":{\"notice\":\"Repays StablePro debt to a Safe.\"},\"repayDebtAndFreeTokenCollateral(address,address,address,uint256,uint256,uint256)\":{\"notice\":\"Repays StablePro debt and unlocks collateral from a Safe in a single transaction.\"}},\"notice\":\"Proxy actions contract for user interaction with the StableUnit protocol via a DSProxy.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/makerdao/externalContracts/DssProxyActions.sol\":\"DssProxyActions\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"contracts/makerdao/externalContracts/DssProxyActions.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\n/// DssProxyActions.sol\\n\\n// Copyright (C) 2018-2020 Maker Ecosystem Growth Holdings, INC.\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\n// CHANGED: removed some functions. As default this contract was too large to deploy. Also\\n\\nimport \\\"../interfaces/ICoinJoin.sol\\\";\\nimport \\\"../interfaces/ICollateralJoin.sol\\\";\\nimport \\\"../interfaces/IDssCdpManager.sol\\\";\\nimport \\\"../interfaces/ITaxCollector.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\npragma solidity ^0.8.0;\\n\\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\\n// WARNING: These functions meant to be used as a a library for a DSProxy. Some are unsafe if you call them directly.\\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\\n\\n/**\\n * @title Math\\n * @notice Abstract utility contract for precise arithmetic operations in the StableUnit protocol.\\n * @dev Provides internal functions for multiplication, addition, subtraction, integer conversion, and precision adjustments\\n *      used by DssProxyActions. Supports ray (10^27) and rad (10^45) precision for calculations involving rates and debt.\\n *      This contract is inherited by DssProxyActions to ensure safe arithmetic operations.\\n * @custom:usage\\n * - **Inheritance**: DssProxyActions inherits Math to use its arithmetic functions.\\n *   ```solidity\\n *   contract DssProxyActions is Math { ... }\\n *   ```\\n * - **Multiplication**: Use `mul` for overflow-safe multiplication.\\n *   ```solidity\\n *   uint256 product = mul(a, b); // Safe multiplication\\n *   ```\\n * - **Precision Conversion**: Use `convertTo18` to adjust collateral amounts to 18 decimals.\\n *   ```solidity\\n *   uint256 wad = convertTo18(collateralJoin, amount); // Convert to WAD precision\\n *   ```\\n * @custom:security All functions include overflow/underflow protection to prevent arithmetic errors.\\n */\\nabstract contract Math {\\n    /// @notice Constant for ray precision (10^27), used in rate calculations.\\n    uint256 constant RAY = 10 ** 27;\\n\\n    /**\\n     * @notice Multiplies two unsigned integers, reverting on overflow.\\n     * @dev Ensures the product does not exceed the maximum uint256 value.\\n     * @param x First operand.\\n     * @param y Second operand.\\n     * @return z Product of x and y.\\n     */\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x, \\\"mul-overflow\\\");\\n    }\\n\\n    /**\\n     * @notice Adds two unsigned integers, reverting on overflow.\\n     * @dev Ensures the sum does not exceed the maximum uint256 value.\\n     * @param x First operand.\\n     * @param y Second operand.\\n     * @return z Sum of x and y.\\n     */\\n    function add(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x + y) >= x);\\n    }\\n\\n    /**\\n     * @notice Subtracts two unsigned integers, reverting on underflow.\\n     * @dev Ensures the result is non-negative.\\n     * @param x First operand.\\n     * @param y Second operand.\\n     * @return z Difference of x and y.\\n     */\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) <= x, \\\"sub-overflow\\\");\\n    }\\n\\n    /**\\n     * @notice Converts an unsigned integer to a signed integer, reverting on negative values.\\n     * @dev Ensures the input is non-negative for safe conversion.\\n     * @param x Unsigned integer to convert.\\n     * @return y Signed integer representation of x.\\n     */\\n    function toInt(uint x) internal pure returns (int y) {\\n        y = int(x);\\n        require(y >= 0, \\\"int-overflow\\\");\\n    }\\n\\n    /**\\n     * @notice Converts a WAD amount to RAD precision.\\n     * @dev Multiplies the input by 10^27 to convert from 18 to 45 decimals.\\n     * @param wad Amount in WAD precision (18 decimals).\\n     * @return rad Amount in RAD precision (45 decimals).\\n     */\\n    function toRad(uint wad) internal pure returns (uint rad) {\\n        rad = mul(wad, 10 ** 27);\\n    }\\n\\n    /**\\n     * @notice Converts a collateral amount to 18-decimal WAD precision.\\n     * @dev Adjusts the amount based on the collateral token\\u2019s decimals for SafeEngine compatibility.\\n     * @param collateralJoin Address of the CollateralJoin contract.\\n     * @param amt Amount in the collateral token\\u2019s decimal precision.\\n     * @return wad Amount in WAD precision (18 decimals).\\n     */\\n    function convertTo18(ICollateralJoin collateralJoin, uint256 amt) internal returns (uint256 wad) {\\n        // Calculate multiplier for decimal conversion\\n        wad = mul(\\n            amt,\\n            10 ** (18 - collateralJoin.decimals())\\n        );\\n    }\\n}\\n\\n/**\\n * @title DssProxyActions\\n * @notice Proxy actions contract for user interaction with the StableUnit protocol via a DSProxy.\\n * @dev Provides functions to manage collateralized debt positions (Safes) through a user\\u2019s proxy, including\\n *      locking/unlocking collateral, generating/repaying debt, and querying Safe information. It interacts with\\n *      StableUnit contracts like DssCdpManager, SafeEngine, CollateralJoin, CoinJoin, and TaxCollector. This contract\\n *      is designed to be called via a DSProxy, reducing complexity for users, and includes view functions for UI integration.\\n *      Some functions were removed from the MakerDAO version to optimize deployment size.\\n * @custom:warning Functions are intended for DSProxy use; direct calls may be unsafe due to lack of access control.\\n * @custom:usage\\n * - **Deployment**: Deploy as a stateless contract for DSProxy use.\\n *   ```solidity\\n *   DssProxyActions proxyActions = new DssProxyActions();\\n *   ```\\n * - **Lock Collateral**: Deposit collateral into a Safe.\\n *   ```solidity\\n *   proxyActions.lockTokenCollateral(cdpManager, collateralJoin, cdpId, amount);\\n *   ```\\n * - **Generate Debt**: Draw StablePro debt from a Safe.\\n *   ```solidity\\n *   proxyActions.generateDebt(cdpManager, taxCollector, coinJoin, cdpId, amount, lockupPeriod);\\n *   ```\\n * - **Repay Debt**: Repay StablePro debt to a Safe.\\n *   ```solidity\\n *   proxyActions.repayDebt(cdpManager, coinJoin, cdpId, amount);\\n *   ```\\n * - **Combined Operations**: Lock collateral and generate debt in one transaction.\\n *   ```solidity\\n *   proxyActions.lockTokenCollateralAndGenerateDebt(cdpManager, taxCollector, collateralJoin, coinJoin, cdpId, collateralAmount, debtAmount, lockupPeriod);\\n *   ```\\n * - **Query Safe Info**: Retrieve Safe details for UI display.\\n *   ```solidity\\n *   (uint256 lockedCollateral, uint256 generatedDebt) = proxyActions.getCdpInfo(cdpManager, user, collateralType);\\n *   ```\\n * @custom:security This contract is stateless and relies on DSProxy for access control. Users must approve token transfers\\n *                 to the proxy for operations like locking collateral or repaying debt. The SafeEngine enforces collateralization\\n *                 and debt limits. Some functions assume collateral tokens have arbitrary decimals, handled via `convertTo18`.\\n * @custom:changes Removed functions from MakerDAO\\u2019s version (e.g., ETH/GNT support, some Safe management) to reduce deployment size.\\n *                 Replaced `vat` with `safeEngine` and updated to StableUnit-specific interfaces.\\n */\\ncontract DssProxyActions is Math {\\n    /**\\n     * @notice Calculates the delta debt required to generate a specified StablePro amount.\\n     * @dev Updates stability fees via TaxCollector and computes the debt needed to cover the StablePro amount.\\n     *      Accounts for existing Safe balance and rate precision.\\n     * @param safeEngine Address of the SafeEngine contract.\\n     * @param taxCollector Address of the TaxCollector contract.\\n     * @param safe Address of the Safe.\\n     * @param collateralType Unique identifier for the collateral type.\\n     * @param wad Amount of StablePro to generate [wad].\\n     * @return deltaDebt Debt adjustment required [in SafeEngine\\u2019s debt precision].\\n     */\\n    function _getGeneratedDeltaDebt(\\n        ISafeEngine safeEngine,\\n        address taxCollector,\\n        address safe,\\n        bytes32 collateralType,\\n        uint wad\\n    ) internal returns (int deltaDebt) {\\n        // Update stability fee rate\\n        uint rate = ITaxCollector(taxCollector).taxSingle(collateralType);\\n        // Get StablePro balance in SafeEngine\\n        uint stableProBalance = safeEngine.coinBalance(safe);\\n\\n        // Calculate additional debt if balance is insufficient\\n        if (stableProBalance < mul(wad, RAY)) {\\n            deltaDebt = toInt(sub(mul(wad, RAY), stableProBalance) / rate);\\n            // Adjust for precision loss\\n            deltaDebt = mul(uint(deltaDebt), rate) < mul(wad, RAY) ? deltaDebt + 1 : deltaDebt;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates the delta debt to repay a specified StablePro amount.\\n     * @dev Determines the debt reduction based on the StablePro amount and Safe\\u2019s debt, respecting rate precision.\\n     * @param safeEngine Address of the SafeEngine contract.\\n     * @param stablePro Amount of StablePro to repay [rad].\\n     * @param safe Address of the Safe.\\n     * @param collateralType Unique identifier for the collateral type.\\n     * @return deltaDebt Debt adjustment to reduce [in SafeEngine\\u2019s debt precision].\\n     */\\n    function _getRepaidDeltaDebt(\\n        ISafeEngine safeEngine,\\n        uint stablePro,\\n        address safe,\\n        bytes32 collateralType\\n    ) internal view returns (int deltaDebt) {\\n        // Get collateral type rate\\n        (, uint rate,,,,,,) = safeEngine.collateralTypes(collateralType);\\n        // Get Safe\\u2019s debt\\n        (, uint safeDebt) = safeEngine.safes(collateralType, safe);\\n\\n        // Calculate debt reduction\\n        deltaDebt = toInt(stablePro / rate);\\n        // Limit to Safe\\u2019s total debt\\n        deltaDebt = uint(deltaDebt) <= safeDebt ? -deltaDebt : -toInt(safeDebt);\\n    }\\n\\n    /**\\n     * @notice Calculates the StablePro amount needed to repay all Safe debt.\\n     * @dev Computes the StablePro required to clear the Safe\\u2019s debt, accounting for rate and precision.\\n     * @param safeEngine Address of the SafeEngine contract.\\n     * @param usr Address of the Safe owner.\\n     * @param safe Address of the Safe.\\n     * @param collateralType Unique identifier for the collateral type.\\n     * @return wad Amount of StablePro required [wad].\\n     */\\n    function _getRepaidAllWad(\\n        ISafeEngine safeEngine,\\n        address usr,\\n        address safe,\\n        bytes32 collateralType\\n    ) internal view returns (uint wad) {\\n        // Get collateral type rate\\n        (, uint rate,,,,,,) = safeEngine.collateralTypes(collateralType);\\n        // Get Safe\\u2019s debt\\n        (, uint safeDebt) = safeEngine.safes(collateralType, safe);\\n        // Get StablePro balance\\n        uint stablePro = safeEngine.coinBalance(usr);\\n\\n        // Calculate required StablePro\\n        uint rad = sub(mul(safeDebt, rate), stablePro);\\n        wad = rad / RAY;\\n        // Adjust for precision dust\\n        wad = mul(wad, RAY) < rad ? wad + 1 : wad;\\n    }\\n\\n    /**\\n     * @notice Deposits StablePro into the SafeEngine via CoinJoin.\\n     * @dev Transfers StablePro tokens from the caller, approves CoinJoin, and joins them into the SafeEngine.\\n     * @param collateralType Unique identifier for the collateral type.\\n     * @param apt Address of the CoinJoin contract.\\n     * @param cdp Address to credit the StablePro balance.\\n     * @param wad Amount of StablePro to deposit [wad].\\n     */\\n    function _coinJoin_join(bytes32 collateralType, address apt, address cdp, uint wad) internal {\\n        // Transfer StablePro from caller\\n        ICoinJoin(apt).systemCoin().transferFrom(msg.sender, address(this), wad);\\n        // Approve CoinJoin to spend StablePro\\n        ICoinJoin(apt).systemCoin().approve(address(apt), wad);\\n        // Deposit StablePro into SafeEngine\\n        ICoinJoin(apt).join(collateralType, msg.sender, cdp, wad);\\n    }\\n\\n    /**\\n     * @notice Deposits collateral into the SafeEngine via CollateralJoin.\\n     * @dev Transfers collateral tokens from the caller, approves CollateralJoin, and joins them into the SafeEngine.\\n     * @param apt Address of the CollateralJoin contract.\\n     * @param safe Address to credit the collateral balance.\\n     * @param amt Amount of collateral to deposit [in token\\u2019s decimal precision].\\n     */\\n    function _collateralJoin_join(ICollateralJoin apt, address safe, uint amt) internal {\\n        // Transfer collateral from caller\\n        apt.collateral().transferFrom(msg.sender, address(this), amt);\\n        // Approve CollateralJoin to spend collateral\\n        apt.collateral().approve(address(apt), amt);\\n        // Deposit collateral into SafeEngine\\n        apt.join(safe, amt);\\n    }\\n\\n    /**\\n     * @notice Transfers collateral from a Safe to a destination.\\n     * @dev Calls DssCdpManager to move collateral balance within the SafeEngine.\\n     * @param manager Address of the DssCdpManager contract.\\n     * @param cdp Unique identifier of the Safe.\\n     * @param dst Address to receive the collateral.\\n     * @param wad Amount of collateral to transfer [wad].\\n     */\\n    function transferCollateral(address manager, uint cdp, address dst, uint wad) internal {\\n        IDssCdpManager(manager).transferCollateral(cdp, dst, wad);\\n    }\\n\\n    /**\\n     * @notice Transfers internal StablePro coins from a Safe to a destination.\\n     * @dev Calls DssCdpManager to move coin balance within the SafeEngine.\\n     * @param manager Address of the DssCdpManager contract.\\n     * @param cdp Unique identifier of the Safe.\\n     * @param dst Address to receive the coins.\\n     * @param rad Amount of StablePro to transfer [rad].\\n     */\\n    function transferInternalCoins(address manager, uint cdp, address dst, uint rad) internal {\\n        IDssCdpManager(manager).transferInternalCoins(cdp, dst, rad);\\n    }\\n\\n    /**\\n     * @notice Modifies a Safe\\u2019s collateral and debt.\\n     * @dev Calls DssCdpManager to adjust the Safe\\u2019s collateral and debt in the SafeEngine.\\n     * @param manager Address of the DssCdpManager contract.\\n     * @param cdp Unique identifier of the Safe.\\n     * @param deltaCollateral Amount to add/remove collateral [wad].\\n     * @param deltaDebt Amount to add/remove debt [in SafeEngine\\u2019s debt precision].\\n     */\\n    function modifySAFECollateralization(address manager, uint cdp, int deltaCollateral, int deltaDebt) internal {\\n        IDssCdpManager(manager).modifySAFECollateralization(cdp, deltaCollateral, deltaDebt);\\n    }\\n\\n    /**\\n     * @notice Opens a new Safe for a collateral type.\\n     * @dev Calls DssCdpManager to create a new Safe and returns its ID.\\n     * @param manager Address of the DssCdpManager contract.\\n     * @param collateralType Unique identifier for the collateral type.\\n     * @param usr Address to own the Safe.\\n     * @return cdp Unique identifier of the newly created Safe.\\n     */\\n    function openSafe(address manager, bytes32 collateralType, address usr) internal returns (uint cdp) {\\n        cdp = IDssCdpManager(manager).openSafe(collateralType, usr);\\n    }\\n\\n    /**\\n     * @notice Locks collateral into a Safe.\\n     * @dev Deposits collateral via CollateralJoin and updates the Safe\\u2019s collateral balance.\\n     * @param manager Address of the DssCdpManager contract.\\n     * @param collateralJoin Address of the CollateralJoin contract.\\n     * @param cdp Unique identifier of the Safe.\\n     * @param amt Amount of collateral to lock [in token\\u2019s decimal precision].\\n     */\\n    function lockTokenCollateral(address manager, ICollateralJoin collateralJoin, uint cdp, uint amt) external {\\n        // Deposit collateral into SafeEngine\\n        _collateralJoin_join(collateralJoin, address(this), amt);\\n        // Update Safe\\u2019s collateral balance\\n        IDssCdpManager(manager).safeEngine().modifySAFECollateralization(\\n            IDssCdpManager(manager).collateralTypes(cdp),\\n            IDssCdpManager(manager).safes(cdp),\\n            address(this),\\n            address(this),\\n            toInt(convertTo18(collateralJoin, amt)),\\n            0\\n        );\\n    }\\n\\n    /**\\n     * @notice Unlocks collateral from a Safe and withdraws it to the caller.\\n     * @dev Reduces the Safe\\u2019s collateral balance and withdraws tokens via CollateralJoin.\\n     * @param manager Address of the DssCdpManager contract.\\n     * @param collateralJoin Address of the CollateralJoin contract.\\n     * @param cdp Unique identifier of the Safe.\\n     * @param amt Amount of collateral to unlock [in token\\u2019s decimal precision].\\n     */\\n    function freeTokenCollateral(address manager, ICollateralJoin collateralJoin, uint cdp, uint amt) external {\\n        uint wad = convertTo18(collateralJoin, amt);\\n        // Reduce Safe\\u2019s collateral balance\\n        modifySAFECollateralization(manager, cdp, -toInt(wad), 0);\\n        // Transfer collateral to proxy\\n        transferCollateral(manager, cdp, address(this), wad);\\n        // Withdraw collateral to caller\\n        collateralJoin.exit(msg.sender, amt);\\n    }\\n\\n    /**\\n     * @notice Withdraws collateral from a Safe to the caller.\\n     * @dev Transfers collateral from the Safe to the proxy and withdraws tokens via CollateralJoin.\\n     * @param manager Address of the DssCdpManager contract.\\n     * @param collateralJoin Address of the CollateralJoin contract.\\n     * @param cdp Unique identifier of the Safe.\\n     * @param amt Amount of collateral to withdraw [in token\\u2019s decimal precision].\\n     */\\n    function exitTokenCollateral(address manager, ICollateralJoin collateralJoin, uint cdp, uint amt) external {\\n        // Transfer collateral to proxy\\n        transferCollateral(manager, cdp, address(this), convertTo18(collateralJoin, amt));\\n        // Withdraw collateral to caller\\n        collateralJoin.exit(msg.sender, amt);\\n    }\\n\\n    /**\\n     * @notice Generates StablePro debt from a Safe.\\n     * @dev Increases Safe debt, transfers StablePro to the proxy, and withdraws tokens via CoinJoin.\\n     * @param manager Address of the DssCdpManager contract.\\n     * @param taxCollector Address of the TaxCollector contract.\\n     * @param coinJoin Address of the CoinJoin contract.\\n     * @param cdp Unique identifier of the Safe.\\n     * @param wad Amount of StablePro to generate [wad].\\n     * @param lockupPeriod Lockup period for the generated StablePro (protocol-specific).\\n     */\\n    function generateDebt(\\n        address manager,\\n        address taxCollector,\\n        address coinJoin,\\n        uint cdp,\\n        uint wad,\\n        uint256 lockupPeriod\\n    ) external {\\n        address safe = IDssCdpManager(manager).safes(cdp);\\n        ISafeEngine safeEngine = IDssCdpManager(manager).safeEngine();\\n        bytes32 collateralType = IDssCdpManager(manager).collateralTypes(cdp);\\n        // Generate debt in Safe\\n        modifySAFECollateralization(\\n            manager,\\n            cdp,\\n            0,\\n            _getGeneratedDeltaDebt(safeEngine, taxCollector, safe, collateralType, wad)\\n        );\\n        // Transfer StablePro to proxy\\n        transferInternalCoins(manager, cdp, address(this), toRad(wad));\\n        // Approve CoinJoin to access proxy\\u2019s StablePro\\n        if (safeEngine.cdpRights(address(this), address(coinJoin)) == 0) {\\n            safeEngine.approveSAFEModification(coinJoin);\\n        }\\n        // Withdraw StablePro to caller\\n        ICoinJoin(coinJoin).exit(collateralType, msg.sender, lockupPeriod, msg.sender, wad);\\n    }\\n\\n    /**\\n     * @notice Repays StablePro debt to a Safe.\\n     * @dev Deposits StablePro via CoinJoin and reduces Safe debt, handling ownership or permissions.\\n     * @param manager Address of the DssCdpManager contract.\\n     * @param coinJoin Address of the CoinJoin contract.\\n     * @param cdp Unique identifier of the Safe.\\n     * @param wad Amount of StablePro to repay [wad].\\n     */\\n    function repayDebt(address manager, address coinJoin, uint cdp, uint wad) external {\\n        ISafeEngine safeEngine = IDssCdpManager(manager).safeEngine();\\n        address safe = IDssCdpManager(manager).safes(cdp);\\n        bytes32 collateralType = IDssCdpManager(manager).collateralTypes(cdp);\\n\\n        address own = IDssCdpManager(manager).owns(cdp);\\n        if (own == address(this) || IDssCdpManager(manager).cdpCan(own, cdp, address(this)) == 1) {\\n            // Deposit StablePro into SafeEngine\\n            _coinJoin_join(collateralType, coinJoin, safe, wad);\\n            // Reduce Safe debt\\n            modifySAFECollateralization(\\n                manager,\\n                cdp,\\n                0,\\n                _getRepaidDeltaDebt(safeEngine, safeEngine.coinBalance(safe), safe, collateralType)\\n            );\\n        } else {\\n            // Deposit StablePro into SafeEngine\\n            _coinJoin_join(collateralType, coinJoin, address(this), wad);\\n            // Reduce Safe debt directly\\n            safeEngine.modifySAFECollateralization(\\n                collateralType,\\n                safe,\\n                address(this),\\n                address(this),\\n                0,\\n                _getRepaidDeltaDebt(safeEngine, wad * RAY, safe, collateralType)\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Repays all StablePro debt for a Safe.\\n     * @dev Deposits the required StablePro via CoinJoin and clears all Safe debt, handling ownership or permissions.\\n     * @param manager Address of the DssCdpManager contract.\\n     * @param coinJoin Address of the CoinJoin contract.\\n     * @param cdp Unique identifier of the Safe.\\n     */\\n    function repayAllDebt(address manager, address coinJoin, uint cdp) external {\\n        ISafeEngine safeEngine = IDssCdpManager(manager).safeEngine();\\n        address safe = IDssCdpManager(manager).safes(cdp);\\n        bytes32 collateralType = IDssCdpManager(manager).collateralTypes(cdp);\\n        (, uint safeDebt) = safeEngine.safes(collateralType, safe);\\n\\n        address own = IDssCdpManager(manager).owns(cdp);\\n        if (own == address(this) || IDssCdpManager(manager).cdpCan(own, cdp, address(this)) == 1) {\\n            // Deposit StablePro to cover all debt\\n            _coinJoin_join(collateralType, coinJoin, safe, _getRepaidAllWad(safeEngine, safe, safe, collateralType));\\n            // Clear all Safe debt\\n            modifySAFECollateralization(manager, cdp, 0, -int(safeDebt));\\n        } else {\\n            // Deposit StablePro to cover all debt\\n            _coinJoin_join(\\n                collateralType,\\n                coinJoin,\\n                address(this),\\n                _getRepaidAllWad(safeEngine, address(this), safe, collateralType)\\n            );\\n            // Clear all Safe debt directly\\n            safeEngine.modifySAFECollateralization(\\n                collateralType,\\n                safe,\\n                address(this),\\n                address(this),\\n                0,\\n                -int(safeDebt)\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Locks collateral and generates StablePro debt in a single transaction.\\n     * @dev Combines collateral deposit and debt generation for efficiency.\\n     * @param manager Address of the DssCdpManager contract.\\n     * @param taxCollector Address of the TaxCollector contract.\\n     * @param collateralJoin Address of the CollateralJoin contract.\\n     * @param coinJoin Address of the CoinJoin contract.\\n     * @param cdp Unique identifier of the Safe.\\n     * @param collateralAmount Amount of collateral to lock [in token\\u2019s decimal precision].\\n     * @param deltaWad Amount of StablePro debt to generate [wad].\\n     * @param lockupPeriod Lockup period for the generated StablePro (protocol-specific).\\n     */\\n    function lockTokenCollateralAndGenerateDebt(\\n        address manager,\\n        address taxCollector,\\n        ICollateralJoin collateralJoin,\\n        address coinJoin,\\n        uint cdp,\\n        uint collateralAmount,\\n        uint deltaWad,\\n        uint256 lockupPeriod\\n    ) public {\\n        address safeHandler = IDssCdpManager(manager).safes(cdp);\\n        ISafeEngine safeEngine = IDssCdpManager(manager).safeEngine();\\n        bytes32 collateralType = IDssCdpManager(manager).collateralTypes(cdp);\\n        // Deposit collateral into SafeEngine\\n        _collateralJoin_join(collateralJoin, safeHandler, collateralAmount);\\n        // Update Safe: add collateral and debt\\n        modifySAFECollateralization(\\n            manager,\\n            cdp,\\n            toInt(convertTo18(collateralJoin, collateralAmount)),\\n            _getGeneratedDeltaDebt(safeEngine, taxCollector, safeHandler, collateralType, deltaWad)\\n        );\\n        // Transfer StablePro to proxy\\n        transferInternalCoins(manager, cdp, address(this), toRad(deltaWad));\\n        // Approve CoinJoin to access proxy\\u2019s StablePro\\n        if (safeEngine.cdpRights(address(this), address(coinJoin)) == 0) {\\n            safeEngine.approveSAFEModification(coinJoin);\\n        }\\n        // Withdraw StablePro to caller\\n        ICoinJoin(coinJoin).exit(collateralType, msg.sender, lockupPeriod, msg.sender, deltaWad);\\n    }\\n\\n    /**\\n     * @notice Opens a Safe, locks collateral, and generates StablePro debt in a single transaction.\\n     * @dev Combines Safe creation, collateral deposit, and debt generation for efficiency.\\n     * @param manager Address of the DssCdpManager contract.\\n     * @param taxCollector Address of the TaxCollector contract.\\n     * @param collateralJoin Address of the CollateralJoin contract.\\n     * @param coinJoin Address of the CoinJoin contract.\\n     * @param collateralType Unique identifier for the collateral type.\\n     * @param amtC Amount of collateral to lock [in token\\u2019s decimal precision].\\n     * @param wadD Amount of StablePro debt to generate [wad].\\n     * @param lockupPeriod Lockup period for the generated StablePro (protocol-specific).\\n     * @return cdp Unique identifier of the newly created Safe.\\n     */\\n    function openLockTokenCollateralAndGenerateDebt(\\n        address manager,\\n        address taxCollector,\\n        ICollateralJoin collateralJoin,\\n        address coinJoin,\\n        bytes32 collateralType,\\n        uint amtC,\\n        uint wadD,\\n        uint256 lockupPeriod\\n    ) external returns (uint cdp) {\\n        // Create new Safe\\n        cdp = openSafe(manager, collateralType, address(this));\\n        // Lock collateral and generate debt\\n        lockTokenCollateralAndGenerateDebt(\\n            manager, taxCollector, collateralJoin, coinJoin, cdp, amtC, wadD, lockupPeriod\\n        );\\n    }\\n\\n    /**\\n     * @notice Repays StablePro debt and unlocks collateral from a Safe in a single transaction.\\n     * @dev Combines debt repayment and collateral withdrawal for efficiency.\\n     * @param manager Address of the DssCdpManager contract.\\n     * @param collateralJoin Address of the CollateralJoin contract.\\n     * @param coinJoin Address of the CoinJoin contract.\\n     * @param cdp Unique identifier of the Safe.\\n     * @param amtC Amount of collateral to unlock [in token\\u2019s decimal precision].\\n     * @param wadD Amount of StablePro to repay [wad].\\n     */\\n    function repayDebtAndFreeTokenCollateral(\\n        address manager,\\n        ICollateralJoin collateralJoin,\\n        address coinJoin,\\n        uint cdp,\\n        uint amtC,\\n        uint wadD\\n    ) external {\\n        address safe = IDssCdpManager(manager).safes(cdp);\\n        bytes32 collateralType = IDssCdpManager(manager).collateralTypes(cdp);\\n        ISafeEngine safeEngine = IDssCdpManager(manager).safeEngine();\\n        // Deposit StablePro into SafeEngine\\n        _coinJoin_join(collateralType, coinJoin, safe, wadD);\\n        uint wadC = convertTo18(collateralJoin, amtC);\\n        // Reduce debt and unlock collateral\\n        modifySAFECollateralization(\\n            manager,\\n            cdp,\\n            -toInt(wadC),\\n            _getRepaidDeltaDebt(\\n                safeEngine,\\n                safeEngine.coinBalance(safe),\\n                safe,\\n                collateralType\\n            )\\n        );\\n        // Transfer collateral to proxy\\n        transferCollateral(manager, cdp, address(this), wadC);\\n        // Withdraw collateral to caller\\n        collateralJoin.exit(msg.sender, amtC);\\n    }\\n\\n    /**\\n     * @notice Repays all StablePro debt and unlocks collateral from a Safe in a single transaction.\\n     * @dev Combines full debt repayment and collateral withdrawal for efficiency.\\n     * @param manager Address of the DssCdpManager contract.\\n     * @param collateralJoin Address of the CollateralJoin contract.\\n     * @param coinJoin Address of the CoinJoin contract.\\n     * @param cdp Unique identifier of the Safe.\\n     * @param amtC Amount of collateral to unlock [in token\\u2019s decimal precision].\\n     */\\n    function repayAllDebtAndFreeTokenCollateral(\\n        address manager,\\n        ICollateralJoin collateralJoin,\\n        address coinJoin,\\n        uint cdp,\\n        uint amtC\\n    ) external {\\n        ISafeEngine safeEngine = IDssCdpManager(manager).safeEngine();\\n        address safe = IDssCdpManager(manager).safes(cdp);\\n        bytes32 collateralType = IDssCdpManager(manager).collateralTypes(cdp);\\n        (, uint safeDebt) = safeEngine.safes(collateralType, safe);\\n\\n        // Deposit StablePro to cover all debt\\n        _coinJoin_join(collateralType, coinJoin, safe, _getRepaidAllWad(safeEngine, safe, safe, collateralType));\\n        uint wadC = convertTo18(collateralJoin, amtC);\\n        // Clear all debt and unlock collateral\\n        modifySAFECollateralization(\\n            manager,\\n            cdp,\\n            -toInt(wadC),\\n            -int(safeDebt)\\n        );\\n        // Transfer collateral to proxy\\n        transferCollateral(manager, cdp, address(this), wadC);\\n        // Withdraw collateral to caller\\n        collateralJoin.exit(msg.sender, amtC);\\n    }\\n\\n    /**\\n     * @notice Retrieves the Safe ID for a user\\u2019s Safe with a specific collateral type.\\n     * @dev Iterates through the user\\u2019s Safes in DssCdpManager to find the matching collateral type.\\n     * @param manager Address of the DssCdpManager contract.\\n     * @param user Address of the Safe owner.\\n     * @param collateralType Unique identifier for the collateral type.\\n     * @return cdpId Unique identifier of the Safe, or type(uint256).max if not found.\\n     */\\n    function getCdpId(address manager, address user, bytes32 collateralType) public view returns(uint) {\\n        uint256 cdpCount = IDssCdpManager(manager).cdpCount(user);\\n        uint256 cdpId = IDssCdpManager(manager).firstCdpId(user);\\n        IDssCdpManager managerContract = IDssCdpManager(manager);\\n\\n        // Iterate through user\\u2019s Safes\\n        for (uint256 i; i < cdpCount; ++i) {\\n            if (managerContract.collateralTypes(cdpId) == collateralType) {\\n                return cdpId;\\n            }\\n            (, uint256 nextCdpId) = managerContract.list(cdpId);\\n            cdpId = nextCdpId;\\n        }\\n\\n        return type(uint256).max;\\n    }\\n\\n    /**\\n     * @notice Retrieves collateral and debt information for a user\\u2019s Safe.\\n     * @dev Queries SafeEngine for the Safe\\u2019s locked collateral and generated debt.\\n     * @param manager Address of the DssCdpManager contract.\\n     * @param user Address of the Safe owner.\\n     * @param collateralType Unique identifier for the collateral type.\\n     * @return lockedCollateral Amount of locked collateral [wad].\\n     * @return generatedDebt Amount of generated debt [wad].\\n     */\\n    function getCdpInfo(address manager, address user, bytes32 collateralType) public view returns(uint, uint) {\\n        uint256 cdpId = getCdpId(manager, user, collateralType);\\n        if (cdpId == type(uint256).max) return (0,0);\\n\\n        ISafeEngine safeEngine = IDssCdpManager(manager).safeEngine();\\n        address safe = IDssCdpManager(manager).safes(cdpId);\\n        return safeEngine.safes(collateralType, safe);\\n    }\\n\\n    /**\\n     * @notice Calculates the amount of collateral a user can withdraw from a Safe.\\n     * @dev Determines excess collateral based on the Safe\\u2019s collateralization ratio and safety price.\\n     * @param manager Address of the DssCdpManager contract.\\n     * @param user Address of the Safe owner.\\n     * @param collateralType Unique identifier for the collateral type.\\n     * @return Amount of collateral available to withdraw [wad].\\n     */\\n    function getAvailableToWithdraw(address manager, address user, bytes32 collateralType) external view returns(uint) {\\n        ISafeEngine safeEngine = IDssCdpManager(manager).safeEngine();\\n\\n        (uint256 lockedCollateral, uint256 generatedDebt) = getCdpInfo(manager, user, collateralType);\\n        (, uint rate,,, uint safetyPrice,,,) = safeEngine.collateralTypes(collateralType);\\n\\n        // Return 0 if safety price is unset\\n        if (safetyPrice == 0) return 0;\\n\\n        // Calculate minimum required collateral\\n        uint256 minCollateralAmount = mul(generatedDebt, rate) / safetyPrice;\\n        return lockedCollateral > minCollateralAmount ? sub(lockedCollateral, minCollateralAmount) : 0;\\n    }\\n\\n    /**\\n     * @notice Calculates the amount of StablePro a user can borrow from a Safe.\\n     * @dev Determines borrowing capacity based on collateral value, debt limits, and safety price.\\n     * @param manager Address of the DssCdpManager contract.\\n     * @param user Address of the Safe owner.\\n     * @param collateralType Unique identifier for the collateral type.\\n     * @return Amount of StablePro available to borrow [wad].\\n     */\\n    function getAvailableToBorrow(address manager, address user, bytes32 collateralType) external view returns(uint) {\\n        ISafeEngine safeEngine = IDssCdpManager(manager).safeEngine();\\n\\n        (uint256 lockedCollateral, uint256 generatedDebt) = getCdpInfo(manager, user, collateralType);\\n        (\\n            uint256 debtAmount, uint256 rate, uint256 debtCeiling,, uint safetyPrice,,,\\n        ) = safeEngine.collateralTypes(collateralType);\\n\\n        // Calculate borrowing limit based on collateral value\\n        uint256 usdLimitE18 = mul(lockedCollateral, safetyPrice) / rate;\\n        if (usdLimitE18 > generatedDebt) {\\n            uint256 availableToBorrow = sub(usdLimitE18, generatedDebt);\\n\\n            // Check global debt ceiling\\n            uint256 globalAvailableToBorrow = sub(safeEngine.globalDebtCeiling(), safeEngine.globalDebt());\\n            if (globalAvailableToBorrow < toRad(availableToBorrow)) return globalAvailableToBorrow / RAY;\\n\\n            // Check collateral type debt ceiling\\n            uint256 collateralAvailableToBorrow = sub(debtCeiling, toRad(debtAmount));\\n            if (collateralAvailableToBorrow < toRad(add(debtAmount, availableToBorrow))) {\\n                return collateralAvailableToBorrow / RAY;\\n            }\\n\\n            return availableToBorrow;\\n        }\\n\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x188a273dae274f37f84135f8ba162868ac3f67ca59e9227d8ee2567fc630e2a4\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/makerdao/interfaces/ICoin.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ICoin is IERC20 {\\n    function mint(address account, uint256 amount) external;\\n    function burn(address account, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x4552a784b9f87c84a4badb298c1d007873304f0f1da6b896defac2df25325f1b\",\"license\":\"UNLICENSED\"},\"contracts/makerdao/interfaces/ICoinJoin.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport {IDisable} from \\\"./IDisable.sol\\\";\\nimport {ICoin} from \\\"./ICoin.sol\\\";\\n\\n/**\\n * @title ITaxCollector\\n **/\\ninterface ICoinJoin is IDisable {\\n    /* ==================== EVENTS ==================== */\\n    event Join(address indexed usr, uint256 wad);\\n    event JoinNoReward(address indexed usr, uint256 wad);\\n    event Exit(address indexed usr, uint256 wad);\\n    event ExitNoReward(address indexed usr, uint256 wad);\\n    event UpdateRewardChef();\\n    event DecreaseAmountFailed(address indexed collateralType, address indexed user, uint amount);\\n    event IncreaseAmountFailed(\\n        address indexed collateralType,\\n        address indexed user,\\n        uint amount,\\n        uint256 lockupPeriodSeconds\\n    );\\n\\n    /* ===================== ERRORS ==================== */\\n    error BadLockupPeriod();\\n\\n    /* ====================== VARS ===================== */\\n    function systemCoin() external returns (ICoin);\\n\\n    /* ==================== METHODS ==================== */\\n\\n    /**\\n    * @notice Join pegged-coins in the system\\n    * @dev Exited coins have 18 decimals but inside the system they have 45 (rad) decimals.\\n           When we join, the amount (wad) is multiplied by 10**27 (ray).\\n           Can only be called by authorized contracts.\\n    * @param collateralType Collateral that will be used for borrow\\n    * @param user Account that call borrow/repay function and will receive rewards in RewardChef\\n    * @param cdp Account that will receive the joined coins\\n    * @param wad Amount of external coins to join (18 decimal number)\\n    **/\\n    function join(bytes32 collateralType, address user, address cdp, uint wad) external;\\n\\n    /**\\n    * @notice Simple version of join(). Don't have Rewards, it is useful for our smart-contracts.\\n    * @param cdp Account that will receive the joined coins\\n    * @param wad Amount of external coins to join (18 decimal number)\\n    **/\\n    function joinNoReward(address cdp, uint wad) external;\\n\\n    /**\\n    * @notice Exit pegged-coins from the system and inside 'Coin.sol'\\n    * @dev Inside the system, coins have 45 (rad) decimals but outside they have 18 decimals (wad).\\n           When we exit, we specify a wad amount of coins and then the contract automatically multiplies\\n           wad by 10**27 to move the correct 45 decimal coin amount to this adapter.\\n           Can only be called by authorized contracts.\\n    * @param collateralType Collateral that will be used for repay\\n    * @param user Account that call borrow/repay function and will receive rewards in RewardChef\\n    * @param lockupPeriodSeconds Lockup period for rewardChef that calculate user rewards\\n    * @param cdp Account that will receive the exited coins\\n    * @param wad Amount of internal coins to join (18 decimal number that will be multiplied by ray)\\n    **/\\n    function exit(bytes32 collateralType, address user, uint256 lockupPeriodSeconds, address cdp, uint wad) external;\\n\\n    /**\\n    * @notice Simple version of exit(). Don't have Rewards, it is useful for our smart-contracts.\\n    * @param cdp Account that will receive the joined coins\\n    * @param wad Amount of external coins to join (18 decimal number)\\n    **/\\n    function exitNoReward(address cdp, uint wad) external;\\n\\n    /**\\n    * @notice We use rewardChef to increaseAmount/decreaseAmount during join and exit,\\n    * so admin should be able to change RewardChef contract's address.\\n    * @param rewardChef New address of RewardChef contract.\\n    **/\\n    //function updateRewardChef(address rewardChef) external;\\n\\n    /**\\n    * @notice We need to save mapping of collateralType => collateralAddress to work with RewardChef.\\n    * @param _collateralType Collateral type as bytes32, that we use in our protocol.\\n    * @param _collateralAddress Address of collateral\\n    **/\\n    function initializeCollateralType(bytes32 _collateralType, address _collateralAddress) external;\\n}\\n\",\"keccak256\":\"0x5d275a80f44bb2dc7d1c13696f40a2f7a52a638b07c4a4221fef96e5e72e4cef\",\"license\":\"UNLICENSED\"},\"contracts/makerdao/interfaces/ICollateralJoin.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {IDisable} from \\\"./IDisable.sol\\\";\\n\\n/**\\n * @title ITaxCollector\\n **/\\ninterface ICollateralJoin is IDisable {\\n\\n    /* ===================== EVENTS ===================== */\\n\\n    event Join(address indexed usr, uint256 wad);\\n    event Exit(address indexed usr, uint256 wad);\\n\\n    /* ====================== VARS ===================== */\\n    function decimals() external returns (uint);\\n    function collateral() external view returns(IERC20Metadata);\\n\\n    /* ==================== METHODS ==================== */\\n\\n    /**\\n    * @notice Join collateral in the system\\n    * @param usr Account from which we transferFrom collateral and add it in the system\\n    * @param wad Amount of collateral to transfer in the system (represented as a number with 18 decimals)\\n    **/\\n    function join(address usr, uint wad) external;\\n\\n    /**\\n    * @notice Exit collateral from the system\\n    * @param usr Account to which we transfer the collateral\\n    * @param wad Amount of collateral to transfer to 'account' (represented as a number with 18 decimals)\\n    **/\\n    function exit(address usr, uint wad) external;\\n}\\n\",\"keccak256\":\"0xb276834f1935ca409ecca5542ef257f9b68e1e91c53b9bdc6b73f0db63210c07\",\"license\":\"UNLICENSED\"},\"contracts/makerdao/interfaces/IDisable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\ninterface IDisable {\\n    event DisableContract();\\n\\n    function disableContract() external;\\n}\\n\",\"keccak256\":\"0xcf4b5ac43556af77a174aa3a3a9b51c4fc89b933ef875797650542bf686b8405\",\"license\":\"UNLICENSED\"},\"contracts/makerdao/interfaces/IDssCdpManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/ISafeEngine.sol\\\";\\n\\n/**\\n * @title IDssMiddleware\\n **/\\ninterface IDssCdpManager {\\n\\n    /* ==================== STRUCTS ==================== */\\n\\n    struct List {\\n        uint prev;\\n        uint next;\\n    }\\n\\n    /* ==================== EVENTS ===================== */\\n\\n    event NewCdp(address indexed usr, address indexed own, uint indexed cdp);\\n\\n\\n    /* ===================== VARS ====================== */\\n\\n    // @notice CDPId => CollateralType\\n    function collateralTypes(uint cdp) external view returns (bytes32);\\n    // @notice CDPId => CdpHandler\\n    function safes(uint cdp) external view returns (address);\\n    // @notice Address of safeEngine\\n    function safeEngine() external view returns (ISafeEngine);\\n    // @notice CDPId => Owner\\n    function owns(uint cdp) external view returns (address);\\n    // @notice Owner => CDPId => Allowed Addr => True/False\\n    function cdpCan(address owner, uint cdp, address allowedAddress) external view returns (uint);\\n    // @notice Owner => Amount of CDPs\\n    function cdpCount(address owner) external view returns (uint);\\n    // @notice Owner => First CDPId\\n    function firstCdpId(address owner) external view returns (uint);\\n    // @notice Owner => Last CDPId\\n    function lastCdpId(address owner) external view returns (uint);\\n    // @notice CDPId => Prev & Next CDPIds (double linked list)\\n    function list(uint cdp) external view returns (uint prev, uint next);\\n\\n    /* ==================== METHODS ==================== */\\n\\n    // @notice Allow/disallow a usr address to manage the cdp.\\n    function cdpAllow(uint cdp, address usr, uint ok) external;\\n\\n    // @notice Allow/disallow a usr address to quit to the the sender urn.\\n    function allowHandler(address usr, uint ok) external;\\n\\n    // @notice Open a new cdp for a given usr address.\\n    function openSafe(bytes32 collateralType, address usr) external returns (uint);\\n\\n    // @notice Give the cdp ownership to a dst address.\\n    function transferSafeOwnership(uint cdp, address dst) external;\\n\\n    // @notice Modify the cdp keeping the generated StablePro or collateral freed in the cdp urn address.\\n    function modifySAFECollateralization(uint cdp, int deltaCollateral, int deltaDebt) external;\\n\\n    // @notice Transfer wad amount of cdp collateral from the cdp address to a dst address.\\n    function transferCollateral(uint cdp, address dst, uint wad) external;\\n\\n    // @notice Transfer wad amount of any type of collateral (ilk) from the cdp address to a dst address.\\n    // This function has the purpose to take away collateral from the system that doesn't correspond to the cdp\\n    // but was sent there wrongly.\\n    function transferCollateral(bytes32 ilk, uint cdp, address dst, uint wad) external;\\n\\n    // @notice Transfer wad amount of StablePro from the cdp address to a dst address.\\n    function transferInternalCoins(uint cdp, address dst, uint rad) external;\\n\\n    // @notice Quit the system, migrating the cdp (lockedCollateral, generatedDebt) to a different dst urn\\n    function quit(uint cdp, address dst) external;\\n\\n    // @notice Import a position from src urn to the urn owned by cdp\\n    function enter(address src, uint cdp) external;\\n\\n    // @notice Move a position from cdpSrc urn to the cdpDst urn\\n    function moveSAFE(uint cdpSrc, uint cdpDst) external;\\n}\\n\",\"keccak256\":\"0x55c641947b4cefe2e1dbc413e579b960d64bd55351942b2e88494bb21913fb39\",\"license\":\"UNLICENSED\"},\"contracts/makerdao/interfaces/ISafeEngine.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// TODO: check how to operate with license and use one for all contracts\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IDisable.sol\\\";\\n\\n/**\\n * @title SafeEngine\\n * @notice The single source of truth for the Maker Protocol. It contains the accounting system of the core Vault,\\n * Internal StablePro balances, and collateral state. It houses the public interface for Vault management,\\n * allowing safe(= CDP or Vault) owners to adjust their Vault state balances. It also contains the public interface\\n * for Vault fungibility, allowing safe (Vault) owners to transfer, split, and merge Vaults.\\n * Excluding these interfaces, SAFEEngine is accessed through trusted smart contract modules.\\n **/\\ninterface ISafeEngine is IDisable {\\n    /* ==================== METHODS ==================== */\\n\\n    // --- Data ---\\n    struct CollateralType {\\n        uint256 debtAmount;        // Total debt issued for this specific collateral type                          [wad]\\n        uint256 accumulatedRate;   // Accumulator for interest accrued on this collateral type                     [ray]\\n        uint256 debtCeiling;       // Maximum amount of debt that can be generated with this collateral type       [rad]\\n        uint256 debtFloor;         // Minimum amount of debt that must be generated by a CDP using this collateral [rad]\\n        uint256 safetyPrice;       // Floor price at which a CDP is allowed to generate debt                       [ray]\\n        uint256 liquidationRatio;  // Liquidation ratio to calculate safety price                                  [ray]\\n        address collateralAddress; // Address of collateral\\n        uint256 safetyPriceBlockNumber; // Block when safetyPrice was updated\\n    }\\n    struct SAFE {\\n        uint256 lockedCollateral; // Total amount of collateral locked in a SAFE/CDP  [wad]\\n        uint256 generatedDebt;    // Total amount of debt generated by a SAFE/CDP     [wad]\\n    }\\n\\n    // --- VARS ---\\n\\n    function safes(bytes32, address) external view returns (uint, uint);\\n\\n    function collateralTypes(bytes32) external view returns (\\n        uint256 debtAmount,       // [wad]\\n        uint256 accumulatedRate,  // [ray]\\n        uint256 debtCeiling,      // [rad]\\n        uint256 debtFloor,        // [rad]\\n        uint256 safetyPrice,      // [ray]\\n        uint256 liquidationRatio, // [ray]\\n        address collateralAddress,\\n        uint256 safetyPriceBlockNumber\\n);\\n\\n    function tokenCollateral(bytes32, address) external view returns (uint256);\\n\\n    function coinBalance(address) external view returns (uint256);\\n\\n    function debtBalance(address) external view returns (uint256);\\n\\n    function cdpRights(address, address) external view returns (uint256);\\n\\n    function globalDebtCeiling() external view returns (uint256);\\n\\n    function globalDebt() external view returns (uint256);\\n\\n    // --- Auth ---\\n    /**\\n     * @notice Allow an address to modify your CDP.\\n     * For example coinAdapter should be able to modify your CDP to withdraw all correctly.\\n     * @param usr Account to give CDP permissions to\\n     */\\n    function approveSAFEModification(address usr) external;\\n\\n    /**\\n     * @notice Deny an address the rights to modify your CDP\\n     * @param usr Account to give CDP permissions to\\n     */\\n    function denySAFEModification(address usr) external;\\n\\n    // --- Administration ---\\n\\n    function initializeCollateralType(bytes32 collateralType, address collateralAddress) external;\\n\\n    /**\\n     * @notice Method to modify some global variables\\n     * @param what - name of variable we want to change\\n     * @param data - new value of this variable\\n     */\\n    function modifyParameters(bytes32 what, uint data) external;\\n    /**\\n     * @notice Method to modify values in struct of collateralTypes\\n     * @param collateralType - collateral type we want to modify (collateralTypes[collateralType])\\n     * @param what - name of variable in struct we want to change\\n     * @param data - new value of this variable\\n     */\\n    function modifyParameters(bytes32 collateralType, bytes32 what, uint data) external;\\n\\n    // --- Fungibility ---\\n    function modifyCollateralBalance(bytes32 collateralType, address usr, int256 wad) external;\\n    function transferCollateral(bytes32 collateralType, address src, address dst, uint256 wad) external;\\n    function transferInternalCoins(address src, address dst, uint256 rad) external;\\n\\n    // --- SafetyPrice Manipulation ---\\n    /**\\n     * @notice Method to update safetyPrice, it's called each time, when function need actual safetyPrice\\n     * @param collateralType - safetyPrice's collateral type we want to update\\n     */\\n    function updateSafetyPrice(bytes32 collateralType) external;\\n\\n    // --- CDP Manipulation ---\\n    /**\\n     * @notice Add/remove collateral or put back/generate more debt in a CDP\\n     * @param collateralType Type of collateral to withdraw/deposit in and from the CDP\\n     * @param cdp Target CDP\\n     * @param collateralSource Account we take collateral from/put collateral into\\n     * @param debtDestination Account from which we credit/debit coins and debt\\n     * @param deltaCollateral Amount of collateral added/extract from the CDP\\n     * @param deltaDebt Amount of debt to generate/repay\\n     */\\n    function modifySAFECollateralization(\\n        bytes32 collateralType,\\n        address cdp,\\n        address collateralSource,\\n        address debtDestination,\\n        int deltaCollateral,\\n        int deltaDebt\\n    ) external;\\n\\n    // --- CDP Fungibility ---\\n    /**\\n     * @notice Transfer collateral and/or debt between CDPs\\n     * @param collateralType Collateral type transferred between CDPs\\n     * @param src Source CDP\\n     * @param dst Destination CDP\\n     * @param deltaCollateral Amount of collateral to take/add into src and give/take from dst\\n     * @param deltaDebt Amount of debt to take/add into src and give/take from dst\\n     */\\n    function transferSAFECollateralAndDebt(\\n        bytes32 collateralType,\\n        address src,\\n        address dst,\\n        int deltaCollateral,\\n        int deltaDebt\\n    ) external;\\n\\n    // --- CDP Confiscation ---\\n    /**\\n     * @notice Normally used by the LiquidationEngine in order to confiscate collateral and\\n       debt from a CDP and give them to someone else\\n     * @param collateralType Collateral type the CDP has locked inside\\n     * @param cdp Target CDP\\n     * @param collateralCounterparty Who we take/give collateral to\\n     * @param debtCounterparty Who we take/give debt to\\n     * @param deltaCollateral Amount of collateral taken/added into the CDP\\n     * @param deltaDebt Amount of debt taken/added into the CDP\\n     */\\n    function confiscateSAFECollateralAndDebt(\\n        bytes32 collateralType,\\n        address cdp,\\n        address collateralCounterparty,\\n        address debtCounterparty,\\n        int deltaCollateral,\\n        int deltaDebt\\n    ) external;\\n\\n    // --- Settlement ---\\n    /**\\n     * @notice Nullify an amount of coins with an equal amount of debt\\n     * @param rad Amount of debt & coins to destroy (expressed as a number with 45 decimals)\\n     */\\n    function settleDebt(uint rad) external;\\n\\n    /**\\n     * @notice Usually called by CoinSavingsAccount in order to create unbacked debt\\n     * @param debtDestination Usually AccountingEngine that can settle decreaseSoldAmount with surplus\\n     * @param coinDestination Usually CoinSavingsAccount who passes the new coins to depositors\\n     * @param rad Amount of debt to create (expressed as a number with 45 decimals)\\n     */\\n    function createUnbackedDebt(address debtDestination, address coinDestination, uint rad) external;\\n\\n    // --- Rates ---\\n    /**\\n     * @notice Usually called by TaxCollector in order to accrue interest on a specific collateral type\\n     * @param collateralType Collateral type we accrue interest for\\n     * @param surplusDst Destination for amount of surplus created by applying the interest rate\\n       to debt created by CDPs with 'collateralType'\\n     * @param accumulatedRate Multiplier applied to the debtAmount in order to calculate the surplus\\n     */\\n    function updateAccumulatedRate(bytes32 collateralType, address surplusDst, int accumulatedRate) external;\\n}\\n\",\"keccak256\":\"0x005803105e8f4777342c15159835863376d16f95f909489af8c58894931530bf\",\"license\":\"UNLICENSED\"},\"contracts/makerdao/interfaces/ITaxCollector.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ITaxCollector\\n **/\\ninterface ITaxCollector {\\n    /* ==================== EVENTS ==================== */\\n    event DisableContract();\\n\\n    /* ==================== STRUCTS ==================== */\\n\\n    struct CollateralType {\\n        uint256 stabilityFee;      // Collateral-specific, per-second stability fee contribution [ray]\\n        uint256 latestUpdateTime;  // Time of last taxSingle [unix epoch time]\\n    }\\n\\n\\n    /* ==================== METHODS ==================== */\\n\\n    // --- Administration ---\\n    function initializeCollateralType(bytes32 collateralType) external;\\n    function modifyParameters(bytes32 collateralType, bytes32 what, uint data) external;\\n    function modifyParameters(bytes32 what, uint data) external;\\n    function modifyParameters(bytes32 what, address data) external;\\n\\n\\n    // --- Stability Fee Collection ---\\n    /**\\n     * @notice Collect tax from a single collateral type\\n     * @param collateralType Collateral type to tax\\n     */\\n    function taxSingle(bytes32 collateralType) external returns (uint rate);\\n}\\n\",\"keccak256\":\"0x7d66d3db88a9a4dd1cf1e240975dc4df1f6e39917776dee98d1065982328f1dc\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608080604052346100165761297c908161001c8239f35b600080fdfe60406080815260048036101561001457600080fd5b600091823560e01c806303f2cd05146112bd5783816313cc55e41461109d575080632581700814610d715780632af7ec8b14610d4b5780632dc469a314610b4e578063434fa72214610b325780636093c97514610a6257806373c152e9146109855780637a2a103114610969578381638f86e015146107bd57508063ba51196314610770578063bb44afd31461074957838163ecef4eb914610493575063f7f898b0146100c057600080fd5b3461048f57606036600319011261048f576100d9611332565b906100e261135e565b81516367aea31360e01b81529093604435926001600160a01b03858116939092602092899190848483818a5afa938415610485578394610456575b50805163434efcbd60e01b81528281018990529480866024818b5afa95861561044c578496610411575b5081516348c5be7f60e11b81528381018a90529681886024818c5afa9788156104075785986103d0575b508251630f50894160e21b81529886821692909190848b806101968c8e8b8401611bd0565b0381875afa9a8b156103c657879b610395575b50845163040b0d8960e51b81528681018d9052918183602481875afa92831561038b578893610350575b50821630149182156102cb575b505015905061021a5750505050918161021797610206838361020c966102119998611eaa565b92611cfd565b61183c565b916118c4565b80f35b9496929990975061020c9198506102378688610240963090611eaa565b90309087611cfd565b94813b156102c75784516399bec31560e01b81529081019283526001600160a01b039093166020830152306040830181905260608301526000608083015260a08201949094529092849184919082908490829060c00103925af19081156102be57506102ab57505080f35b6102b4906113f8565b6102bb5780f35b80fd5b513d84823e3d90fd5b8680fd5b6102ef925081938d87518095819482936302d75da360e51b845230918d8501611b55565b03915afa91821561034657869261030e575b50506001148038806101e0565b8196508092503d831161033f575b6103268183611421565b8101031261033a5760018c94519038610301565b600080fd5b503d61031c565b84513d88823e3d90fd5b9092508181813d8311610384575b6103688183611421565b810103126103805761037990611463565b91386101d3565b8780fd5b503d61035e565b86513d8a823e3d90fd5b6103b6919b50853d87116103bf575b6103ae8183611421565b810190611bba565b905099386101a9565b503d6103a4565b85513d89823e3d90fd5b82809299508196503d8311610400575b6103ea8183611421565b8101031261033a579251958b9390610196610171565b503d6103e0565b83513d87823e3d90fd5b9080965081813d8311610445575b6104298183611421565b810103126104415761043a90611463565b9438610147565b8380fd5b503d61041f565b82513d86823e3d90fd5b610477919450853d871161047e575b61046f8183611421565b810190611444565b923861011d565b503d610465565b81513d85823e3d90fd5b8280fd5b808484346107455760c0366003190112610745576104af611332565b6104b761135e565b906104c0611348565b835163434efcbd60e01b81526064358682018190526001600160a01b03808516956084359591949360209391929084816024818c5afa90811561073b578c91610702575b5089516367aea31360e01b81529385858d818d5afa9485156106d2578c8c8f928993986106dc575b50516348c5be7f60e11b81529081018690529a8b9060249082905afa998a156106d2578d9a610692575b509161057561056e8a8c889795610586978d9a6119a1565b83836118c4565b61057e89611583565b913091611b1c565b8751636d24dd6d60e11b8152911691908181806105a687308e8401611956565b0381865afa918215610688578a92610657575b50501561060a575b5016803b15610606576105f3948680948651978895869485936309752ae360e31b8552339160a4359133918701611970565b03925af19081156102be57506102ab5750f35b8580fd5b803b15610380578780916024885180948193631b29a84160e31b83528888168d8401525af1801561038b57908891610643575b506105c1565b61064c906113f8565b6102c757868961063d565b819a508092503d8311610681575b61066f8183611421565b8101031261033a578897518a806105b9565b503d610665565b88513d8c823e3d90fd5b868092949e50819695939b503d83116106cb575b6106b08183611421565b8101031261033a5792518c9b90989293929091610575610556565b503d6106a6565b8b513d8f823e3d90fd5b6024919850916106f98893853d871161047e5761046f8183611421565b9891509161052c565b90508481813d8311610734575b6107198183611421565b810103126107305761072a90611463565b8d610504565b8b80fd5b503d61070f565b8a513d8e823e3d90fd5b5050fd5b83823461076c5760209061076561075f366113c3565b91612609565b9051908152f35b5080fd5b83346102bb576101003660031901126102bb5761021761078e611332565b61079661135e565b61079e611348565b906107a7611374565b9260e4359360c4359360a4359360843593612017565b80848434610745576107ce3661138a565b929091946107dd843088611687565b84516367aea31360e01b81526020966001600160a01b039384169591888185818a5afa908115610688579085918b9161094c575b5016958751956348c5be7f60e11b875280858801528987602481855afa968715610942578b9761090f575b50899060248a518094819363434efcbd60e01b8352898301525afa988915610688578a996108ca575b505061087991610874916114b6565b611477565b91843b1561038057879460c49386928851998a9788966399bec31560e01b885287015216602485015230604485015230606485015260848401528160a48401525af19081156102be57506102ab5750f35b9080929950813d8311610908575b6108e28183611421565b8101031261090457610879916108fa61087492611463565b9891819350610865565b8880fd5b503d6108d8565b9a509550888a813d811161093b575b6109288183611421565b8101031261033a57888b9a51969061083c565b503d61091e565b89513d8d823e3d90fd5b61096391508a3d8c1161047e5761046f8183611421565b8c610811565b83823461076c5760209061076561097f366113c3565b916122ef565b5082903461076c5761010036600319011261076c576109a2611332565b926109ab61135e565b6109b3611348565b916109df60206109c1611374565b928651809381926339855fd160e11b83523090608435908401611bd0565b0381896001600160a01b038c165af1958615610a575795610a1d575b509060209585610a17949360e4359460c4359460a43594612017565b51908152f35b92919094506020833d8211610a4f575b81610a3a60209383611421565b8101031261033a5791519390919060206109fb565b3d9150610a2d565b8551903d90823e3d90fd5b5082903461076c57610a733661138a565b93929591610a8185826114b6565b96610a8e61020c89611477565b6001600160a01b03939082851690813b1561033a57600091606483928a5194859384926318f0203f60e31b8452888d85015260248401528160448401525af18015610b275791610ae993918a9b93610b18575b50309161186e565b1692833b15610b14576105f393859283855180978195829463ef693bed60e01b84523390840161166c565b8480fd5b610b21906113f8565b8b610ae1565b87513d6000823e3d90fd5b83823461076c57602090610765610b48366113c3565b91612707565b50903461048f5760a036600319011261048f5782610b6a611332565b610b7261135e565b93610b7b611348565b81516367aea31360e01b815295608435936001600160a01b0392838216916064356020808c8c81885afa948515610688578b9c8b9c999a9b96610d2c575b50895163434efcbd60e01b81529c8d01839052818d602481845afa9c8d1561073b578c9d610cf5575b50818360248b8d5194859384926348c5be7f60e11b84528301525afa91821561073b578c92610cc4575b50508851630f50894160e21b81529b898d80610c2b84868e8401611bd0565b03818b8a165afa94851561073b578c9d8b610ae9999a9b9c9d9e97610c91575b5050610206838380610c5f9798999a611eaa565b610c8a610c6c8a876114b6565b93610c82610c7c61020c87611477565b9161183c565b90838561190c565b309161186e565b610c5f959697508380610cb561020694848995903d106103bf576103ae8183611421565b9050999897505050508c610c4b565b819c508092503d8311610cee575b610cdc8183611421565b8101031261033a578b99513880610c0c565b503d610cd2565b909c508181813d8311610d25575b610d0d8183611421565b8101031261073057610d1e90611463565b9b38610be2565b503d610d03565b610d44919650823d841161047e5761046f8183611421565b9438610bb9565b5082346102bb5750610d65610d5f366113c3565b916124ad565b82519182526020820152f35b503461048f57608036600319011261048f57610d8b611332565b90610d9461135e565b81516367aea31360e01b815293604435926001600160a01b038581169392602090606435828a83818a5afa998a15611093578b9a611074575b50845163434efcbd60e01b81528281018990529583876024818b5afa96871561106a578c97611033575b5085516348c5be7f60e11b81528381018a9052978489602481845afa988915610fb5578d99611004575b508c875163040b0d8960e51b81528b868201528681602481865afa918215610ff957908792610fbf575b503088821614928315610f47575b505050600014610eed5783929187610e71928a611cfd565b6024855180958193633eaf7a0360e21b8352818a16908301528c165afa928315610ee457508892610eae575b505090610211929161021796611be9565b908094939250813d8311610edd575b610ec78183611421565b8101031261033a57915190919085610211610e9d565b503d610ebd565b513d8a823e3d90fd5b909a999497508a919850610f079250959495309086611cfd565b811690676765c793fa10079d601b1b9788810298818a041490151715610f34578284889961024093611be9565b634e487b7160e01b875260118652602487fd5b610f6993508c8a518095819482936302d75da360e51b845230918c8501611b55565b03915afa8015610fb5578d90610f87575b6001915014843880610e59565b508481813d8311610fae575b610f9d8183611421565b8101031261033a5760019051610f7a565b503d610f93565b87513d8f823e3d90fd5b82819392503d8311610ff2575b610fd68183611421565b81010312610fee57610fe88691611463565b38610e4b565b8d80fd5b503d610fcc565b8951903d90823e3d90fd5b9098508481813d831161102c575b61101c8183611421565b8101031261033a57519738610e21565b503d611012565b9096508381813d8311611063575b61104b8183611421565b810103126107305761105c90611463565b9538610df7565b503d611041565b86513d8e823e3d90fd5b61108c919a50833d851161047e5761046f8183611421565b9838610dcd565b85513d8d823e3d90fd5b808484346107455760c0366003190112610745576110b9611332565b916110c261135e565b6110ca611348565b835163434efcbd60e01b8152606435848201819052608435966001600160a01b0394939092858416916020908183602481875afa92831561073b578c93611286575b5089516348c5be7f60e11b8152898101869052938285602481845afa9485156106d2578d95611246575b5090828a9796959493928c51988980926367aea31360e01b82525afa9687156106d257908b949392918e98611223575b50611176908360a4359186611cfd565b6111808c896114b6565b9689828c602461119261020c8d611477565b985180948193633eaf7a0360e21b8352818a169083015286165afa928315611217578f936111d3575b505092610ae99796959492610c8292610c8a95611be9565b8092959f508193509897969593983d8311611210575b6111f38183611421565b8101031261033a57518d9c95969495939491939282610c8a6111bb565b503d6111e9565b8f8e51903d90823e3d90fd5b61117691985061123f90833d851161047e5761046f8183611421565b9790611166565b8380939e5081989796509194933d831161127f575b6112658183611421565b8101031261033a5794518c9b949593949093919282611136565b503d61125b565b9092508181813d83116112b6575b61129e8183611421565b81010312610730576112af90611463565b918d61110c565b503d611294565b503461048f57826112e56112d03661138a565b9391926112dd85856114b6565b91309161186e565b6001600160a01b0316803b1561048f576113159483855180978195829463ef693bed60e01b84523390840161166c565b03925af19081156102be5750611329575080f35b610217906113f8565b600435906001600160a01b038216820361033a57565b604435906001600160a01b038216820361033a57565b602435906001600160a01b038216820361033a57565b606435906001600160a01b038216820361033a57565b608090600319011261033a576001600160a01b0390600435828116810361033a5791602435908116810361033a57906044359060643590565b606090600319011261033a576001600160a01b0390600435828116810361033a5791602435908116810361033a579060443590565b6001600160401b03811161140b57604052565b634e487b7160e01b600052604160045260246000fd5b601f909101601f19168101906001600160401b0382119082101761140b57604052565b9081602091031261033a57516001600160a01b038116810361033a5790565b51906001600160a01b038216820361033a57565b906000821261148257565b60405162461bcd60e51b815260206004820152600c60248201526b696e742d6f766572666c6f7760a01b6044820152606490fd5b60405163313ce56760e01b815260009392916020908290600490829088906001600160a01b03165af1908115611558578491611527575b506012036012811161151357604d811161151357611510929350600a0a906115f5565b90565b634e487b7160e01b84526011600452602484fd5b90506020813d8211611550575b8161154160209383611421565b810103126104415751386114ed565b3d9150611534565b6040513d86823e3d90fd5b811561156d570490565b634e487b7160e01b600052601260045260246000fd5b676765c793fa10079d601b1b8082029291908115828504821417156115df578304036115ab57565b60405162461bcd60e51b815260206004820152600c60248201526b6d756c2d6f766572666c6f7760a01b6044820152606490fd5b634e487b7160e01b600052601160045260246000fd5b60009291801591821561160c575b5050156115ab57565b808202945091508115828504821417156115df5761162a9084611563565b143880611603565b9081602091031261033a5751801515810361033a5790565b6001600160a01b03918216815291166020820152604081019190915260600190565b6001600160a01b039091168152602081019190915260400190565b6040805163d8dfeb4560e01b8082526001600160a01b039384169592949360209283816004818b5afa908115610b275760009161181f575b5083875180926323b872dd60e01b825281600086826116e38c30336004850161164a565b0393165af18015610b2757611802575b50855191825282826004818a5afa9182156117f7576117389288859387936000936117d5575b506000908a5180978196829563095ea7b360e01b84526004840161166c565b0393165af180156117ca5761179c575b5050833b1561033a5761177493600092838551809781958294633b4da69f60e01b84526004840161166c565b03925af190811561179257506117875750565b611790906113f8565b565b513d6000823e3d90fd5b816117bb92903d106117c3575b6117b38183611421565b810190611632565b503880611748565b503d6117a9565b85513d6000823e3d90fd5b60009193506117f090863d881161047e5761046f8183611421565b9290611719565b86513d6000823e3d90fd5b61181890843d86116117c3576117b38183611421565b50386116f3565b6118369150843d861161047e5761046f8183611421565b386116bf565b600160ff1b81146115df5760000390565b9081526001600160a01b039091166020820152604081019190915260600190565b919290916001600160a01b0316803b1561033a576118a793600080946040519687958694859363438ac0d160e11b85526004850161184d565b03925af180156118b8576117875750565b6040513d6000823e3d90fd5b6001600160a01b031691823b1561033a5760646000928360405195869485936318f0203f60e31b8552600485015282602485015260448401525af180156118b8576117875750565b9091906001600160a01b0316803b1561033a576000928360649260405196879586946318f0203f60e31b86526004860152602485015260448401525af180156118b8576117875750565b6001600160a01b0391821681529116602082015260400190565b9081526001600160a01b03918216602082015260408101929092529091166060820152608081019190915260a00190565b94939091600095600093604051956336286ddd60e11b8752600487015260209283876024818960018060a01b038097165af1968715611b04578697611ad4575b50604051633eaf7a0360e21b8152908216600482015291839183916024918391165afa918215611558578492611aa6575b5050611a1d82611583565b8110611a2a575b50505050565b83949550611a54610874839495611a4f611a5b94611a4a611a6197611583565b611b0f565b611563565b94856115f5565b91611583565b1115611aa057600182019181600184129112908015821691151617611a8c57505b9038808080611a24565b634e487b7160e01b81526011600452602490fd5b50611a82565b90809250813d8311611acd575b611abd8183611421565b8101031261048f57513880611a12565b503d611ab3565b9096508381813d8311611afd575b611aec8183611421565b8101031261060657519560246119e1565b503d611ae2565b6040513d88823e3d90fd5b9081039081116115df5790565b919290916001600160a01b0316803b1561033a576118a793600080946040519687958694859363660e160760e01b85526004850161184d565b6001600160a01b0391821681526020810192909252909116604082015260600190565b91908261010091031261033a5781519160208101519160408201519160608101519160808201519160a08101519160e0611bb460c08401611463565b92015190565b919082604091031261033a576020825192015190565b9081526001600160a01b03909116602082015260400190565b6040805163d07900bb60e01b815260048101869052909493610100939290916001600160a01b03909116908481602481855afa948515610b27579087939291600096611cc0575b5050611c539394958351809581948293630f50894160e21b845260048401611bd0565b03915afa93841561179257600094611c93575b5050611c759161087491611563565b818111611c8657611510915061183c565b5061020c61151091611477565b610874929450611c75939181611cb492903d106103bf576103ae8183611421565b90509391819350611c66565b611c539596509081611ce692903d10611cf6575b611cde8183611421565b810190611b78565b5050505050509050949338611c30565b503d611cd4565b929160018060a01b039384831660409485519463a7e9445560e01b80875260209160009783816004818c8a5af1908115611e83578b8a9286928491611e8d575b508c51809481936323b872dd60e01b835282611d5e8c30336004850161164a565b0393165af18015611e8357611e66575b50885191825282826004818b895af1918215611e5c57611db192849286928b92611e3d575b508a8d8d5180978196829563095ea7b360e01b84526004840161166c565b0393165af18015611e3357611e15575b5050813b15610b145791846084928195948851998a9687956319b6fb0160e01b8752600487015233602487015216604485015260648401525af1918215611e0b5750506117875750565b51903d90823e3d90fd5b81611e2b92903d106117c3576117b38183611421565b503880611dc1565b88513d89823e3d90fd5b611e55919250843d861161047e5761046f8183611421565b9038611d93565b89513d8a823e3d90fd5b611e7c90843d86116117c3576117b38183611421565b5038611d6e565b8a513d8b823e3d90fd5b611ea49150833d851161047e5761046f8183611421565b38611d3d565b6040805163d07900bb60e01b8152600481018690529395949093610100936001600160a01b03938416939290918581602481885afa958615610b275791611f139899918893600098611ff0575b50508251630f50894160e21b8152988992839260048401611bd0565b0381865afa9586156117ca57600096611fc7575b508451633eaf7a0360e21b81529116600482015290602090829060249082905afa9283156117925750600092611f92575b50611a4a90611f66936115f5565b676765c793fa10079d601b1b810490611f7e82611583565b101561151057600181018091116115df5790565b90916020823d8211611fbf575b81611fac60209383611421565b810103126102bb57505190611a4a611f58565b3d9150611f9f565b602092919650611fe5602491873d89116103bf576103ae8183611421565b905096919250611f27565b612007929850803d10611cf657611cde8183611421565b5050505050509050953880611ef7565b60405163434efcbd60e01b8152600481018690529298976000979690956001600160a01b03831694909391602082602481895afa9182156122e4578a926122a4575b506040516367aea31360e01b81529b60208d6004818a5afa968715612299578b9c9d60249a9b9c98612277575b506020906040519a8b80926348c5be7f60e11b82528a60048301525afa98891561226c57908b9392918d9a612232575b509289836120de61087485886120d96120e5986120f69e9d9c9a6120ed9c611687565b6114b6565b948a6119a1565b90848461190c565b61057e88611583565b604051636d24dd6d60e11b81526001600160a01b03919091169060208180612122863060048401611956565b0381855afa9081156122275787916121f5575b50156121a6575b506001600160a01b031691823b15610b1457916121789391858094604051968795869485936309752ae360e31b85523391339060048701611970565b03925af1801561219b5761218a575050565b61219482916113f8565b6102bb5750565b6040513d84823e3d90fd5b803b1561060657604051631b29a84160e31b81526001600160a01b03831660048201529086908290602490829084905af18015611b04571561213c576121ee909591956113f8565b933861213c565b90506020813d60201161221f575b8161221060209383611421565b810103126102c7575138612135565b3d9150612203565b6040513d89823e3d90fd5b91995092506020813d602011612264575b8161225060209383611421565b810103126107305751978a926120ed6120b6565b3d9150612243565b6040513d8e823e3d90fd5b602091985061229290823d841161047e5761046f8183611421565b9790612086565b6040513d8d823e3d90fd5b9091506020813d6020116122dc575b816122c060209383611421565b810103126122d8576122d190611463565b9038612059565b8980fd5b3d91506122b3565b6040513d8c823e3d90fd5b6040805163b77b80e360e01b81526001600160a01b03938416600480830182905260249692959094169160209182878981875afa9687156117ca5760009761247e575b50845190631e0b152760e21b82528682015282818981875afa9081156117ca57600091612451575b50916000925b8784106123765750505050505050505060001990565b85516348c5be7f60e11b815287810182905282818b81895afa908115610b2757908491600091612421575b501461241557855190634064a0cf60e11b82528782015285818a81885afa9081156117f7576000916123f6575b509260001981146123e25760010192612360565b88601188634e487b7160e01b600052526000fd5b61240d9150863d88116103bf576103ae8183611421565b9050386123ce565b97505050505050505090565b91508382813d831161244a575b6124388183611421565b810103126102bb5750839051386123a1565b503d61242e565b908382813d8311612477575b6124678183611421565b810103126102bb5750513861235a565b503d61245d565b90968382813d83116124a6575b6124958183611421565b810103126102bb5750519538612332565b503d61248b565b90826124bc91949394836122ef565b9260001984146125fd57604080516367aea31360e01b815260209591939092916001600160a01b03918216908785600481855afa9485156117f7579088916000966125de575b50602487518094819363434efcbd60e01b835260048301525afa9687156117ca5760009761259b575b505091612550959184938451809881958294630f50894160e21b845260048401611bd0565b0392165afa92831561259057600091829461256c575b50509190565b61258793945080919250903d106103bf576103ae8183611421565b91903880612566565b50513d6000823e3d90fd5b8181989293983d83116125d7575b6125b38183611421565b810103126102bb57509161255095916125cc8594611463565b96819392945061252b565b503d6125a9565b6125f6919650823d841161047e5761046f8183611421565b9438612502565b50509050600090600090565b6040516367aea31360e01b8152926001600160a01b039290916020856004818785165afa9485156118b8576000956126df575b506126489183916124ad565b90936040519263d07900bb60e01b8452600484015282602481610100968794165afa9182156118b85760009384936126b3575b505081156126aa5761269092611a4f916115f5565b600091818111156126a5576115109250611b0f565b505090565b50505050600090565b80919294506126ce9350903d10611cf657611cde8183611421565b50505094935050509190388061267b565b83919550916126fe6126489360203d811161047e5761046f8183611421565b9591509161263c565b604080516367aea31360e01b8152602094909390926001600160a01b0392919086866004818785165afa9586156128d85760009661291f575b5061274c9185916124ad565b929094169181519363d07900bb60e01b85526004850152610100938481602481875afa80156128d8576000968792889789936128e3575b50506127939291611a4f916115f5565b908082116127a75750505050505050600090565b6127b091611b0f565b9481519263177e643360e11b84528184600481845afa9384156128d8576000946128a9575b50908060049284519384809263042a1eaf60e51b82525afa9283156117925750600092612878575b505061280891611b0f565b61281184611583565b8110612863575061282b9061282583611583565b90611b0f565b90828101908181116115df57811061033a5761284690611583565b8110612850575090565b676765c793fa10079d601b1b9004919050565b676765c793fa10079d601b1b90049392505050565b81819392933d83116128a2575b61288f8183611421565b810103126102bb575051612808386127fd565b503d612885565b90938282813d83116128d1575b6128c08183611421565b810103126102bb57505192816127d5565b503d6128b6565b83513d6000823e3d90fd5b8091929950611a4f985061279394506129089350903d10611cf657611cde8183611421565b505050989299919390509892979293819250612783565b859196509161293d61274c93893d8b1161047e5761046f8183611421565b9691509161274056fea2646970667358221220a20e8aabd2a8ac7baf1dc881813cee25e66b498fa93ecd81912a1d534419b67e64736f6c63430008110033",
  "deployedBytecode": "0x60406080815260048036101561001457600080fd5b600091823560e01c806303f2cd05146112bd5783816313cc55e41461109d575080632581700814610d715780632af7ec8b14610d4b5780632dc469a314610b4e578063434fa72214610b325780636093c97514610a6257806373c152e9146109855780637a2a103114610969578381638f86e015146107bd57508063ba51196314610770578063bb44afd31461074957838163ecef4eb914610493575063f7f898b0146100c057600080fd5b3461048f57606036600319011261048f576100d9611332565b906100e261135e565b81516367aea31360e01b81529093604435926001600160a01b03858116939092602092899190848483818a5afa938415610485578394610456575b50805163434efcbd60e01b81528281018990529480866024818b5afa95861561044c578496610411575b5081516348c5be7f60e11b81528381018a90529681886024818c5afa9788156104075785986103d0575b508251630f50894160e21b81529886821692909190848b806101968c8e8b8401611bd0565b0381875afa9a8b156103c657879b610395575b50845163040b0d8960e51b81528681018d9052918183602481875afa92831561038b578893610350575b50821630149182156102cb575b505015905061021a5750505050918161021797610206838361020c966102119998611eaa565b92611cfd565b61183c565b916118c4565b80f35b9496929990975061020c9198506102378688610240963090611eaa565b90309087611cfd565b94813b156102c75784516399bec31560e01b81529081019283526001600160a01b039093166020830152306040830181905260608301526000608083015260a08201949094529092849184919082908490829060c00103925af19081156102be57506102ab57505080f35b6102b4906113f8565b6102bb5780f35b80fd5b513d84823e3d90fd5b8680fd5b6102ef925081938d87518095819482936302d75da360e51b845230918d8501611b55565b03915afa91821561034657869261030e575b50506001148038806101e0565b8196508092503d831161033f575b6103268183611421565b8101031261033a5760018c94519038610301565b600080fd5b503d61031c565b84513d88823e3d90fd5b9092508181813d8311610384575b6103688183611421565b810103126103805761037990611463565b91386101d3565b8780fd5b503d61035e565b86513d8a823e3d90fd5b6103b6919b50853d87116103bf575b6103ae8183611421565b810190611bba565b905099386101a9565b503d6103a4565b85513d89823e3d90fd5b82809299508196503d8311610400575b6103ea8183611421565b8101031261033a579251958b9390610196610171565b503d6103e0565b83513d87823e3d90fd5b9080965081813d8311610445575b6104298183611421565b810103126104415761043a90611463565b9438610147565b8380fd5b503d61041f565b82513d86823e3d90fd5b610477919450853d871161047e575b61046f8183611421565b810190611444565b923861011d565b503d610465565b81513d85823e3d90fd5b8280fd5b808484346107455760c0366003190112610745576104af611332565b6104b761135e565b906104c0611348565b835163434efcbd60e01b81526064358682018190526001600160a01b03808516956084359591949360209391929084816024818c5afa90811561073b578c91610702575b5089516367aea31360e01b81529385858d818d5afa9485156106d2578c8c8f928993986106dc575b50516348c5be7f60e11b81529081018690529a8b9060249082905afa998a156106d2578d9a610692575b509161057561056e8a8c889795610586978d9a6119a1565b83836118c4565b61057e89611583565b913091611b1c565b8751636d24dd6d60e11b8152911691908181806105a687308e8401611956565b0381865afa918215610688578a92610657575b50501561060a575b5016803b15610606576105f3948680948651978895869485936309752ae360e31b8552339160a4359133918701611970565b03925af19081156102be57506102ab5750f35b8580fd5b803b15610380578780916024885180948193631b29a84160e31b83528888168d8401525af1801561038b57908891610643575b506105c1565b61064c906113f8565b6102c757868961063d565b819a508092503d8311610681575b61066f8183611421565b8101031261033a578897518a806105b9565b503d610665565b88513d8c823e3d90fd5b868092949e50819695939b503d83116106cb575b6106b08183611421565b8101031261033a5792518c9b90989293929091610575610556565b503d6106a6565b8b513d8f823e3d90fd5b6024919850916106f98893853d871161047e5761046f8183611421565b9891509161052c565b90508481813d8311610734575b6107198183611421565b810103126107305761072a90611463565b8d610504565b8b80fd5b503d61070f565b8a513d8e823e3d90fd5b5050fd5b83823461076c5760209061076561075f366113c3565b91612609565b9051908152f35b5080fd5b83346102bb576101003660031901126102bb5761021761078e611332565b61079661135e565b61079e611348565b906107a7611374565b9260e4359360c4359360a4359360843593612017565b80848434610745576107ce3661138a565b929091946107dd843088611687565b84516367aea31360e01b81526020966001600160a01b039384169591888185818a5afa908115610688579085918b9161094c575b5016958751956348c5be7f60e11b875280858801528987602481855afa968715610942578b9761090f575b50899060248a518094819363434efcbd60e01b8352898301525afa988915610688578a996108ca575b505061087991610874916114b6565b611477565b91843b1561038057879460c49386928851998a9788966399bec31560e01b885287015216602485015230604485015230606485015260848401528160a48401525af19081156102be57506102ab5750f35b9080929950813d8311610908575b6108e28183611421565b8101031261090457610879916108fa61087492611463565b9891819350610865565b8880fd5b503d6108d8565b9a509550888a813d811161093b575b6109288183611421565b8101031261033a57888b9a51969061083c565b503d61091e565b89513d8d823e3d90fd5b61096391508a3d8c1161047e5761046f8183611421565b8c610811565b83823461076c5760209061076561097f366113c3565b916122ef565b5082903461076c5761010036600319011261076c576109a2611332565b926109ab61135e565b6109b3611348565b916109df60206109c1611374565b928651809381926339855fd160e11b83523090608435908401611bd0565b0381896001600160a01b038c165af1958615610a575795610a1d575b509060209585610a17949360e4359460c4359460a43594612017565b51908152f35b92919094506020833d8211610a4f575b81610a3a60209383611421565b8101031261033a5791519390919060206109fb565b3d9150610a2d565b8551903d90823e3d90fd5b5082903461076c57610a733661138a565b93929591610a8185826114b6565b96610a8e61020c89611477565b6001600160a01b03939082851690813b1561033a57600091606483928a5194859384926318f0203f60e31b8452888d85015260248401528160448401525af18015610b275791610ae993918a9b93610b18575b50309161186e565b1692833b15610b14576105f393859283855180978195829463ef693bed60e01b84523390840161166c565b8480fd5b610b21906113f8565b8b610ae1565b87513d6000823e3d90fd5b83823461076c57602090610765610b48366113c3565b91612707565b50903461048f5760a036600319011261048f5782610b6a611332565b610b7261135e565b93610b7b611348565b81516367aea31360e01b815295608435936001600160a01b0392838216916064356020808c8c81885afa948515610688578b9c8b9c999a9b96610d2c575b50895163434efcbd60e01b81529c8d01839052818d602481845afa9c8d1561073b578c9d610cf5575b50818360248b8d5194859384926348c5be7f60e11b84528301525afa91821561073b578c92610cc4575b50508851630f50894160e21b81529b898d80610c2b84868e8401611bd0565b03818b8a165afa94851561073b578c9d8b610ae9999a9b9c9d9e97610c91575b5050610206838380610c5f9798999a611eaa565b610c8a610c6c8a876114b6565b93610c82610c7c61020c87611477565b9161183c565b90838561190c565b309161186e565b610c5f959697508380610cb561020694848995903d106103bf576103ae8183611421565b9050999897505050508c610c4b565b819c508092503d8311610cee575b610cdc8183611421565b8101031261033a578b99513880610c0c565b503d610cd2565b909c508181813d8311610d25575b610d0d8183611421565b8101031261073057610d1e90611463565b9b38610be2565b503d610d03565b610d44919650823d841161047e5761046f8183611421565b9438610bb9565b5082346102bb5750610d65610d5f366113c3565b916124ad565b82519182526020820152f35b503461048f57608036600319011261048f57610d8b611332565b90610d9461135e565b81516367aea31360e01b815293604435926001600160a01b038581169392602090606435828a83818a5afa998a15611093578b9a611074575b50845163434efcbd60e01b81528281018990529583876024818b5afa96871561106a578c97611033575b5085516348c5be7f60e11b81528381018a9052978489602481845afa988915610fb5578d99611004575b508c875163040b0d8960e51b81528b868201528681602481865afa918215610ff957908792610fbf575b503088821614928315610f47575b505050600014610eed5783929187610e71928a611cfd565b6024855180958193633eaf7a0360e21b8352818a16908301528c165afa928315610ee457508892610eae575b505090610211929161021796611be9565b908094939250813d8311610edd575b610ec78183611421565b8101031261033a57915190919085610211610e9d565b503d610ebd565b513d8a823e3d90fd5b909a999497508a919850610f079250959495309086611cfd565b811690676765c793fa10079d601b1b9788810298818a041490151715610f34578284889961024093611be9565b634e487b7160e01b875260118652602487fd5b610f6993508c8a518095819482936302d75da360e51b845230918c8501611b55565b03915afa8015610fb5578d90610f87575b6001915014843880610e59565b508481813d8311610fae575b610f9d8183611421565b8101031261033a5760019051610f7a565b503d610f93565b87513d8f823e3d90fd5b82819392503d8311610ff2575b610fd68183611421565b81010312610fee57610fe88691611463565b38610e4b565b8d80fd5b503d610fcc565b8951903d90823e3d90fd5b9098508481813d831161102c575b61101c8183611421565b8101031261033a57519738610e21565b503d611012565b9096508381813d8311611063575b61104b8183611421565b810103126107305761105c90611463565b9538610df7565b503d611041565b86513d8e823e3d90fd5b61108c919a50833d851161047e5761046f8183611421565b9838610dcd565b85513d8d823e3d90fd5b808484346107455760c0366003190112610745576110b9611332565b916110c261135e565b6110ca611348565b835163434efcbd60e01b8152606435848201819052608435966001600160a01b0394939092858416916020908183602481875afa92831561073b578c93611286575b5089516348c5be7f60e11b8152898101869052938285602481845afa9485156106d2578d95611246575b5090828a9796959493928c51988980926367aea31360e01b82525afa9687156106d257908b949392918e98611223575b50611176908360a4359186611cfd565b6111808c896114b6565b9689828c602461119261020c8d611477565b985180948193633eaf7a0360e21b8352818a169083015286165afa928315611217578f936111d3575b505092610ae99796959492610c8292610c8a95611be9565b8092959f508193509897969593983d8311611210575b6111f38183611421565b8101031261033a57518d9c95969495939491939282610c8a6111bb565b503d6111e9565b8f8e51903d90823e3d90fd5b61117691985061123f90833d851161047e5761046f8183611421565b9790611166565b8380939e5081989796509194933d831161127f575b6112658183611421565b8101031261033a5794518c9b949593949093919282611136565b503d61125b565b9092508181813d83116112b6575b61129e8183611421565b81010312610730576112af90611463565b918d61110c565b503d611294565b503461048f57826112e56112d03661138a565b9391926112dd85856114b6565b91309161186e565b6001600160a01b0316803b1561048f576113159483855180978195829463ef693bed60e01b84523390840161166c565b03925af19081156102be5750611329575080f35b610217906113f8565b600435906001600160a01b038216820361033a57565b604435906001600160a01b038216820361033a57565b602435906001600160a01b038216820361033a57565b606435906001600160a01b038216820361033a57565b608090600319011261033a576001600160a01b0390600435828116810361033a5791602435908116810361033a57906044359060643590565b606090600319011261033a576001600160a01b0390600435828116810361033a5791602435908116810361033a579060443590565b6001600160401b03811161140b57604052565b634e487b7160e01b600052604160045260246000fd5b601f909101601f19168101906001600160401b0382119082101761140b57604052565b9081602091031261033a57516001600160a01b038116810361033a5790565b51906001600160a01b038216820361033a57565b906000821261148257565b60405162461bcd60e51b815260206004820152600c60248201526b696e742d6f766572666c6f7760a01b6044820152606490fd5b60405163313ce56760e01b815260009392916020908290600490829088906001600160a01b03165af1908115611558578491611527575b506012036012811161151357604d811161151357611510929350600a0a906115f5565b90565b634e487b7160e01b84526011600452602484fd5b90506020813d8211611550575b8161154160209383611421565b810103126104415751386114ed565b3d9150611534565b6040513d86823e3d90fd5b811561156d570490565b634e487b7160e01b600052601260045260246000fd5b676765c793fa10079d601b1b8082029291908115828504821417156115df578304036115ab57565b60405162461bcd60e51b815260206004820152600c60248201526b6d756c2d6f766572666c6f7760a01b6044820152606490fd5b634e487b7160e01b600052601160045260246000fd5b60009291801591821561160c575b5050156115ab57565b808202945091508115828504821417156115df5761162a9084611563565b143880611603565b9081602091031261033a5751801515810361033a5790565b6001600160a01b03918216815291166020820152604081019190915260600190565b6001600160a01b039091168152602081019190915260400190565b6040805163d8dfeb4560e01b8082526001600160a01b039384169592949360209283816004818b5afa908115610b275760009161181f575b5083875180926323b872dd60e01b825281600086826116e38c30336004850161164a565b0393165af18015610b2757611802575b50855191825282826004818a5afa9182156117f7576117389288859387936000936117d5575b506000908a5180978196829563095ea7b360e01b84526004840161166c565b0393165af180156117ca5761179c575b5050833b1561033a5761177493600092838551809781958294633b4da69f60e01b84526004840161166c565b03925af190811561179257506117875750565b611790906113f8565b565b513d6000823e3d90fd5b816117bb92903d106117c3575b6117b38183611421565b810190611632565b503880611748565b503d6117a9565b85513d6000823e3d90fd5b60009193506117f090863d881161047e5761046f8183611421565b9290611719565b86513d6000823e3d90fd5b61181890843d86116117c3576117b38183611421565b50386116f3565b6118369150843d861161047e5761046f8183611421565b386116bf565b600160ff1b81146115df5760000390565b9081526001600160a01b039091166020820152604081019190915260600190565b919290916001600160a01b0316803b1561033a576118a793600080946040519687958694859363438ac0d160e11b85526004850161184d565b03925af180156118b8576117875750565b6040513d6000823e3d90fd5b6001600160a01b031691823b1561033a5760646000928360405195869485936318f0203f60e31b8552600485015282602485015260448401525af180156118b8576117875750565b9091906001600160a01b0316803b1561033a576000928360649260405196879586946318f0203f60e31b86526004860152602485015260448401525af180156118b8576117875750565b6001600160a01b0391821681529116602082015260400190565b9081526001600160a01b03918216602082015260408101929092529091166060820152608081019190915260a00190565b94939091600095600093604051956336286ddd60e11b8752600487015260209283876024818960018060a01b038097165af1968715611b04578697611ad4575b50604051633eaf7a0360e21b8152908216600482015291839183916024918391165afa918215611558578492611aa6575b5050611a1d82611583565b8110611a2a575b50505050565b83949550611a54610874839495611a4f611a5b94611a4a611a6197611583565b611b0f565b611563565b94856115f5565b91611583565b1115611aa057600182019181600184129112908015821691151617611a8c57505b9038808080611a24565b634e487b7160e01b81526011600452602490fd5b50611a82565b90809250813d8311611acd575b611abd8183611421565b8101031261048f57513880611a12565b503d611ab3565b9096508381813d8311611afd575b611aec8183611421565b8101031261060657519560246119e1565b503d611ae2565b6040513d88823e3d90fd5b9081039081116115df5790565b919290916001600160a01b0316803b1561033a576118a793600080946040519687958694859363660e160760e01b85526004850161184d565b6001600160a01b0391821681526020810192909252909116604082015260600190565b91908261010091031261033a5781519160208101519160408201519160608101519160808201519160a08101519160e0611bb460c08401611463565b92015190565b919082604091031261033a576020825192015190565b9081526001600160a01b03909116602082015260400190565b6040805163d07900bb60e01b815260048101869052909493610100939290916001600160a01b03909116908481602481855afa948515610b27579087939291600096611cc0575b5050611c539394958351809581948293630f50894160e21b845260048401611bd0565b03915afa93841561179257600094611c93575b5050611c759161087491611563565b818111611c8657611510915061183c565b5061020c61151091611477565b610874929450611c75939181611cb492903d106103bf576103ae8183611421565b90509391819350611c66565b611c539596509081611ce692903d10611cf6575b611cde8183611421565b810190611b78565b5050505050509050949338611c30565b503d611cd4565b929160018060a01b039384831660409485519463a7e9445560e01b80875260209160009783816004818c8a5af1908115611e83578b8a9286928491611e8d575b508c51809481936323b872dd60e01b835282611d5e8c30336004850161164a565b0393165af18015611e8357611e66575b50885191825282826004818b895af1918215611e5c57611db192849286928b92611e3d575b508a8d8d5180978196829563095ea7b360e01b84526004840161166c565b0393165af18015611e3357611e15575b5050813b15610b145791846084928195948851998a9687956319b6fb0160e01b8752600487015233602487015216604485015260648401525af1918215611e0b5750506117875750565b51903d90823e3d90fd5b81611e2b92903d106117c3576117b38183611421565b503880611dc1565b88513d89823e3d90fd5b611e55919250843d861161047e5761046f8183611421565b9038611d93565b89513d8a823e3d90fd5b611e7c90843d86116117c3576117b38183611421565b5038611d6e565b8a513d8b823e3d90fd5b611ea49150833d851161047e5761046f8183611421565b38611d3d565b6040805163d07900bb60e01b8152600481018690529395949093610100936001600160a01b03938416939290918581602481885afa958615610b275791611f139899918893600098611ff0575b50508251630f50894160e21b8152988992839260048401611bd0565b0381865afa9586156117ca57600096611fc7575b508451633eaf7a0360e21b81529116600482015290602090829060249082905afa9283156117925750600092611f92575b50611a4a90611f66936115f5565b676765c793fa10079d601b1b810490611f7e82611583565b101561151057600181018091116115df5790565b90916020823d8211611fbf575b81611fac60209383611421565b810103126102bb57505190611a4a611f58565b3d9150611f9f565b602092919650611fe5602491873d89116103bf576103ae8183611421565b905096919250611f27565b612007929850803d10611cf657611cde8183611421565b5050505050509050953880611ef7565b60405163434efcbd60e01b8152600481018690529298976000979690956001600160a01b03831694909391602082602481895afa9182156122e4578a926122a4575b506040516367aea31360e01b81529b60208d6004818a5afa968715612299578b9c9d60249a9b9c98612277575b506020906040519a8b80926348c5be7f60e11b82528a60048301525afa98891561226c57908b9392918d9a612232575b509289836120de61087485886120d96120e5986120f69e9d9c9a6120ed9c611687565b6114b6565b948a6119a1565b90848461190c565b61057e88611583565b604051636d24dd6d60e11b81526001600160a01b03919091169060208180612122863060048401611956565b0381855afa9081156122275787916121f5575b50156121a6575b506001600160a01b031691823b15610b1457916121789391858094604051968795869485936309752ae360e31b85523391339060048701611970565b03925af1801561219b5761218a575050565b61219482916113f8565b6102bb5750565b6040513d84823e3d90fd5b803b1561060657604051631b29a84160e31b81526001600160a01b03831660048201529086908290602490829084905af18015611b04571561213c576121ee909591956113f8565b933861213c565b90506020813d60201161221f575b8161221060209383611421565b810103126102c7575138612135565b3d9150612203565b6040513d89823e3d90fd5b91995092506020813d602011612264575b8161225060209383611421565b810103126107305751978a926120ed6120b6565b3d9150612243565b6040513d8e823e3d90fd5b602091985061229290823d841161047e5761046f8183611421565b9790612086565b6040513d8d823e3d90fd5b9091506020813d6020116122dc575b816122c060209383611421565b810103126122d8576122d190611463565b9038612059565b8980fd5b3d91506122b3565b6040513d8c823e3d90fd5b6040805163b77b80e360e01b81526001600160a01b03938416600480830182905260249692959094169160209182878981875afa9687156117ca5760009761247e575b50845190631e0b152760e21b82528682015282818981875afa9081156117ca57600091612451575b50916000925b8784106123765750505050505050505060001990565b85516348c5be7f60e11b815287810182905282818b81895afa908115610b2757908491600091612421575b501461241557855190634064a0cf60e11b82528782015285818a81885afa9081156117f7576000916123f6575b509260001981146123e25760010192612360565b88601188634e487b7160e01b600052526000fd5b61240d9150863d88116103bf576103ae8183611421565b9050386123ce565b97505050505050505090565b91508382813d831161244a575b6124388183611421565b810103126102bb5750839051386123a1565b503d61242e565b908382813d8311612477575b6124678183611421565b810103126102bb5750513861235a565b503d61245d565b90968382813d83116124a6575b6124958183611421565b810103126102bb5750519538612332565b503d61248b565b90826124bc91949394836122ef565b9260001984146125fd57604080516367aea31360e01b815260209591939092916001600160a01b03918216908785600481855afa9485156117f7579088916000966125de575b50602487518094819363434efcbd60e01b835260048301525afa9687156117ca5760009761259b575b505091612550959184938451809881958294630f50894160e21b845260048401611bd0565b0392165afa92831561259057600091829461256c575b50509190565b61258793945080919250903d106103bf576103ae8183611421565b91903880612566565b50513d6000823e3d90fd5b8181989293983d83116125d7575b6125b38183611421565b810103126102bb57509161255095916125cc8594611463565b96819392945061252b565b503d6125a9565b6125f6919650823d841161047e5761046f8183611421565b9438612502565b50509050600090600090565b6040516367aea31360e01b8152926001600160a01b039290916020856004818785165afa9485156118b8576000956126df575b506126489183916124ad565b90936040519263d07900bb60e01b8452600484015282602481610100968794165afa9182156118b85760009384936126b3575b505081156126aa5761269092611a4f916115f5565b600091818111156126a5576115109250611b0f565b505090565b50505050600090565b80919294506126ce9350903d10611cf657611cde8183611421565b50505094935050509190388061267b565b83919550916126fe6126489360203d811161047e5761046f8183611421565b9591509161263c565b604080516367aea31360e01b8152602094909390926001600160a01b0392919086866004818785165afa9586156128d85760009661291f575b5061274c9185916124ad565b929094169181519363d07900bb60e01b85526004850152610100938481602481875afa80156128d8576000968792889789936128e3575b50506127939291611a4f916115f5565b908082116127a75750505050505050600090565b6127b091611b0f565b9481519263177e643360e11b84528184600481845afa9384156128d8576000946128a9575b50908060049284519384809263042a1eaf60e51b82525afa9283156117925750600092612878575b505061280891611b0f565b61281184611583565b8110612863575061282b9061282583611583565b90611b0f565b90828101908181116115df57811061033a5761284690611583565b8110612850575090565b676765c793fa10079d601b1b9004919050565b676765c793fa10079d601b1b90049392505050565b81819392933d83116128a2575b61288f8183611421565b810103126102bb575051612808386127fd565b503d612885565b90938282813d83116128d1575b6128c08183611421565b810103126102bb57505192816127d5565b503d6128b6565b83513d6000823e3d90fd5b8091929950611a4f985061279394506129089350903d10611cf657611cde8183611421565b505050989299919390509892979293819250612783565b859196509161293d61274c93893d8b1161047e5761046f8183611421565b9691509161274056fea2646970667358221220a20e8aabd2a8ac7baf1dc881813cee25e66b498fa93ecd81912a1d534419b67e64736f6c63430008110033",
  "devdoc": {
    "custom:changes": "Removed functions from MakerDAO’s version (e.g., ETH/GNT support, some Safe management) to reduce deployment size.                 Replaced `vat` with `safeEngine` and updated to StableUnit-specific interfaces.",
    "custom:security": "This contract is stateless and relies on DSProxy for access control. Users must approve token transfers                 to the proxy for operations like locking collateral or repaying debt. The SafeEngine enforces collateralization                 and debt limits. Some functions assume collateral tokens have arbitrary decimals, handled via `convertTo18`.",
    "custom:usage": "- **Deployment**: Deploy as a stateless contract for DSProxy use.   ```solidity   DssProxyActions proxyActions = new DssProxyActions();   ``` - **Lock Collateral**: Deposit collateral into a Safe.   ```solidity   proxyActions.lockTokenCollateral(cdpManager, collateralJoin, cdpId, amount);   ``` - **Generate Debt**: Draw StablePro debt from a Safe.   ```solidity   proxyActions.generateDebt(cdpManager, taxCollector, coinJoin, cdpId, amount, lockupPeriod);   ``` - **Repay Debt**: Repay StablePro debt to a Safe.   ```solidity   proxyActions.repayDebt(cdpManager, coinJoin, cdpId, amount);   ``` - **Combined Operations**: Lock collateral and generate debt in one transaction.   ```solidity   proxyActions.lockTokenCollateralAndGenerateDebt(cdpManager, taxCollector, collateralJoin, coinJoin, cdpId, collateralAmount, debtAmount, lockupPeriod);   ``` - **Query Safe Info**: Retrieve Safe details for UI display.   ```solidity   (uint256 lockedCollateral, uint256 generatedDebt) = proxyActions.getCdpInfo(cdpManager, user, collateralType);   ```",
    "custom:warning": "Functions are intended for DSProxy use; direct calls may be unsafe due to lack of access control.",
    "details": "Provides functions to manage collateralized debt positions (Safes) through a user’s proxy, including      locking/unlocking collateral, generating/repaying debt, and querying Safe information. It interacts with      StableUnit contracts like DssCdpManager, SafeEngine, CollateralJoin, CoinJoin, and TaxCollector. This contract      is designed to be called via a DSProxy, reducing complexity for users, and includes view functions for UI integration.      Some functions were removed from the MakerDAO version to optimize deployment size.",
    "kind": "dev",
    "methods": {
      "exitTokenCollateral(address,address,uint256,uint256)": {
        "details": "Transfers collateral from the Safe to the proxy and withdraws tokens via CollateralJoin.",
        "params": {
          "amt": "Amount of collateral to withdraw [in token’s decimal precision].",
          "cdp": "Unique identifier of the Safe.",
          "collateralJoin": "Address of the CollateralJoin contract.",
          "manager": "Address of the DssCdpManager contract."
        }
      },
      "freeTokenCollateral(address,address,uint256,uint256)": {
        "details": "Reduces the Safe’s collateral balance and withdraws tokens via CollateralJoin.",
        "params": {
          "amt": "Amount of collateral to unlock [in token’s decimal precision].",
          "cdp": "Unique identifier of the Safe.",
          "collateralJoin": "Address of the CollateralJoin contract.",
          "manager": "Address of the DssCdpManager contract."
        }
      },
      "generateDebt(address,address,address,uint256,uint256,uint256)": {
        "details": "Increases Safe debt, transfers StablePro to the proxy, and withdraws tokens via CoinJoin.",
        "params": {
          "cdp": "Unique identifier of the Safe.",
          "coinJoin": "Address of the CoinJoin contract.",
          "lockupPeriod": "Lockup period for the generated StablePro (protocol-specific).",
          "manager": "Address of the DssCdpManager contract.",
          "taxCollector": "Address of the TaxCollector contract.",
          "wad": "Amount of StablePro to generate [wad]."
        }
      },
      "getAvailableToBorrow(address,address,bytes32)": {
        "details": "Determines borrowing capacity based on collateral value, debt limits, and safety price.",
        "params": {
          "collateralType": "Unique identifier for the collateral type.",
          "manager": "Address of the DssCdpManager contract.",
          "user": "Address of the Safe owner."
        },
        "returns": {
          "_0": "Amount of StablePro available to borrow [wad]."
        }
      },
      "getAvailableToWithdraw(address,address,bytes32)": {
        "details": "Determines excess collateral based on the Safe’s collateralization ratio and safety price.",
        "params": {
          "collateralType": "Unique identifier for the collateral type.",
          "manager": "Address of the DssCdpManager contract.",
          "user": "Address of the Safe owner."
        },
        "returns": {
          "_0": "Amount of collateral available to withdraw [wad]."
        }
      },
      "getCdpId(address,address,bytes32)": {
        "details": "Iterates through the user’s Safes in DssCdpManager to find the matching collateral type.",
        "params": {
          "collateralType": "Unique identifier for the collateral type.",
          "manager": "Address of the DssCdpManager contract.",
          "user": "Address of the Safe owner."
        },
        "returns": {
          "_0": "cdpId Unique identifier of the Safe, or type(uint256).max if not found."
        }
      },
      "getCdpInfo(address,address,bytes32)": {
        "details": "Queries SafeEngine for the Safe’s locked collateral and generated debt.",
        "params": {
          "collateralType": "Unique identifier for the collateral type.",
          "manager": "Address of the DssCdpManager contract.",
          "user": "Address of the Safe owner."
        },
        "returns": {
          "_0": "lockedCollateral Amount of locked collateral [wad].",
          "_1": "generatedDebt Amount of generated debt [wad]."
        }
      },
      "lockTokenCollateral(address,address,uint256,uint256)": {
        "details": "Deposits collateral via CollateralJoin and updates the Safe’s collateral balance.",
        "params": {
          "amt": "Amount of collateral to lock [in token’s decimal precision].",
          "cdp": "Unique identifier of the Safe.",
          "collateralJoin": "Address of the CollateralJoin contract.",
          "manager": "Address of the DssCdpManager contract."
        }
      },
      "lockTokenCollateralAndGenerateDebt(address,address,address,address,uint256,uint256,uint256,uint256)": {
        "details": "Combines collateral deposit and debt generation for efficiency.",
        "params": {
          "cdp": "Unique identifier of the Safe.",
          "coinJoin": "Address of the CoinJoin contract.",
          "collateralAmount": "Amount of collateral to lock [in token’s decimal precision].",
          "collateralJoin": "Address of the CollateralJoin contract.",
          "deltaWad": "Amount of StablePro debt to generate [wad].",
          "lockupPeriod": "Lockup period for the generated StablePro (protocol-specific).",
          "manager": "Address of the DssCdpManager contract.",
          "taxCollector": "Address of the TaxCollector contract."
        }
      },
      "openLockTokenCollateralAndGenerateDebt(address,address,address,address,bytes32,uint256,uint256,uint256)": {
        "details": "Combines Safe creation, collateral deposit, and debt generation for efficiency.",
        "params": {
          "amtC": "Amount of collateral to lock [in token’s decimal precision].",
          "coinJoin": "Address of the CoinJoin contract.",
          "collateralJoin": "Address of the CollateralJoin contract.",
          "collateralType": "Unique identifier for the collateral type.",
          "lockupPeriod": "Lockup period for the generated StablePro (protocol-specific).",
          "manager": "Address of the DssCdpManager contract.",
          "taxCollector": "Address of the TaxCollector contract.",
          "wadD": "Amount of StablePro debt to generate [wad]."
        },
        "returns": {
          "cdp": "Unique identifier of the newly created Safe."
        }
      },
      "repayAllDebt(address,address,uint256)": {
        "details": "Deposits the required StablePro via CoinJoin and clears all Safe debt, handling ownership or permissions.",
        "params": {
          "cdp": "Unique identifier of the Safe.",
          "coinJoin": "Address of the CoinJoin contract.",
          "manager": "Address of the DssCdpManager contract."
        }
      },
      "repayAllDebtAndFreeTokenCollateral(address,address,address,uint256,uint256)": {
        "details": "Combines full debt repayment and collateral withdrawal for efficiency.",
        "params": {
          "amtC": "Amount of collateral to unlock [in token’s decimal precision].",
          "cdp": "Unique identifier of the Safe.",
          "coinJoin": "Address of the CoinJoin contract.",
          "collateralJoin": "Address of the CollateralJoin contract.",
          "manager": "Address of the DssCdpManager contract."
        }
      },
      "repayDebt(address,address,uint256,uint256)": {
        "details": "Deposits StablePro via CoinJoin and reduces Safe debt, handling ownership or permissions.",
        "params": {
          "cdp": "Unique identifier of the Safe.",
          "coinJoin": "Address of the CoinJoin contract.",
          "manager": "Address of the DssCdpManager contract.",
          "wad": "Amount of StablePro to repay [wad]."
        }
      },
      "repayDebtAndFreeTokenCollateral(address,address,address,uint256,uint256,uint256)": {
        "details": "Combines debt repayment and collateral withdrawal for efficiency.",
        "params": {
          "amtC": "Amount of collateral to unlock [in token’s decimal precision].",
          "cdp": "Unique identifier of the Safe.",
          "coinJoin": "Address of the CoinJoin contract.",
          "collateralJoin": "Address of the CollateralJoin contract.",
          "manager": "Address of the DssCdpManager contract.",
          "wadD": "Amount of StablePro to repay [wad]."
        }
      }
    },
    "title": "DssProxyActions",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "exitTokenCollateral(address,address,uint256,uint256)": {
        "notice": "Withdraws collateral from a Safe to the caller."
      },
      "freeTokenCollateral(address,address,uint256,uint256)": {
        "notice": "Unlocks collateral from a Safe and withdraws it to the caller."
      },
      "generateDebt(address,address,address,uint256,uint256,uint256)": {
        "notice": "Generates StablePro debt from a Safe."
      },
      "getAvailableToBorrow(address,address,bytes32)": {
        "notice": "Calculates the amount of StablePro a user can borrow from a Safe."
      },
      "getAvailableToWithdraw(address,address,bytes32)": {
        "notice": "Calculates the amount of collateral a user can withdraw from a Safe."
      },
      "getCdpId(address,address,bytes32)": {
        "notice": "Retrieves the Safe ID for a user’s Safe with a specific collateral type."
      },
      "getCdpInfo(address,address,bytes32)": {
        "notice": "Retrieves collateral and debt information for a user’s Safe."
      },
      "lockTokenCollateral(address,address,uint256,uint256)": {
        "notice": "Locks collateral into a Safe."
      },
      "lockTokenCollateralAndGenerateDebt(address,address,address,address,uint256,uint256,uint256,uint256)": {
        "notice": "Locks collateral and generates StablePro debt in a single transaction."
      },
      "openLockTokenCollateralAndGenerateDebt(address,address,address,address,bytes32,uint256,uint256,uint256)": {
        "notice": "Opens a Safe, locks collateral, and generates StablePro debt in a single transaction."
      },
      "repayAllDebt(address,address,uint256)": {
        "notice": "Repays all StablePro debt for a Safe."
      },
      "repayAllDebtAndFreeTokenCollateral(address,address,address,uint256,uint256)": {
        "notice": "Repays all StablePro debt and unlocks collateral from a Safe in a single transaction."
      },
      "repayDebt(address,address,uint256,uint256)": {
        "notice": "Repays StablePro debt to a Safe."
      },
      "repayDebtAndFreeTokenCollateral(address,address,address,uint256,uint256,uint256)": {
        "notice": "Repays StablePro debt and unlocks collateral from a Safe in a single transaction."
      }
    },
    "notice": "Proxy actions contract for user interaction with the StableUnit protocol via a DSProxy.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}