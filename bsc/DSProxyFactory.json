{
  "address": "0xFe0646D4D836207c1F5513f28445Ded41e56BCB2",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "cache",
          "type": "address"
        }
      ],
      "name": "Created",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "build",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "proxy",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "build",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "proxy",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cache",
      "outputs": [
        {
          "internalType": "contract DSProxyCache",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isProxy",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "bc5dc47a4c79e74ac8d5e825ff0e349c",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"cache\",\"type\":\"address\"}],\"name\":\"Created\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"build\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"proxy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"build\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"proxy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cache\",\"outputs\":[{\"internalType\":\"contract DSProxyCache\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isProxy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/makerdao/utils/proxy.sol\":\"DSProxyFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"contracts/lib/ds-auth/src/auth.sol\":{\"content\":\"// SPDX-License-Identifier: GNU-3\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.4.23;\\n\\ninterface DSAuthority {\\n    function canCall(\\n        address src, address dst, bytes4 sig\\n    ) external view returns (bool);\\n}\\n\\ncontract DSAuthEvents {\\n    event LogSetAuthority (address indexed authority);\\n    event LogSetOwner     (address indexed owner);\\n}\\n\\ncontract DSAuth is DSAuthEvents {\\n    DSAuthority  public  authority;\\n    address      public  owner;\\n\\n    constructor() public {\\n        owner = msg.sender;\\n        emit LogSetOwner(msg.sender);\\n    }\\n\\n    function setOwner(address owner_)\\n        public\\n        auth\\n    {\\n        owner = owner_;\\n        emit LogSetOwner(owner);\\n    }\\n\\n    function setAuthority(DSAuthority authority_)\\n        public\\n        auth\\n    {\\n        authority = authority_;\\n        emit LogSetAuthority(address(authority));\\n    }\\n\\n    modifier auth {\\n        require(isAuthorized(msg.sender, msg.sig), \\\"ds-auth-unauthorized\\\");\\n        _;\\n    }\\n\\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\\n        if (src == address(this)) {\\n            return true;\\n        } else if (src == owner) {\\n            return true;\\n        } else if (authority == DSAuthority(address(0))) {\\n            return false;\\n        } else {\\n            return authority.canCall(src, address(this), sig);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe253534397ef991977372aef136f94019ad8868c30ff1c5e6f90f2e6631b8eba\",\"license\":\"GNU-3\"},\"contracts/lib/ds-note/src/note.sol\":{\"content\":\"/// note.sol -- the `note' modifier, for logging calls as events\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.4.23;\\n\\ncontract DSNote {\\n    event LogNote(\\n        bytes4   indexed  sig,\\n        address  indexed  guy,\\n        bytes32  indexed  foo,\\n        bytes32  indexed  bar,\\n        uint256           wad,\\n        bytes             fax\\n    ) anonymous;\\n\\n    modifier note {\\n        bytes32 foo;\\n        bytes32 bar;\\n        uint256 wad;\\n\\n        assembly {\\n            foo := calldataload(4)\\n            bar := calldataload(36)\\n            wad := callvalue()\\n        }\\n\\n        _;\\n\\n        emit LogNote(msg.sig, msg.sender, foo, bar, wad, msg.data);\\n    }\\n}\\n\",\"keccak256\":\"0xc6aed2fade2d8b560dadf645b76f5d55a09d4cffb062fa2a1065642835abcf90\"},\"contracts/makerdao/utils/proxy.sol\":{\"content\":\"// proxy.sol - execute actions atomically through the proxy's identity\\n\\n// Copyright (C) 2017  DappHub, LLC\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.6.0 <0.7.0;\\n\\nimport \\\"../../lib/ds-auth/src/auth.sol\\\";\\nimport \\\"../../lib/ds-note/src/note.sol\\\";\\n\\n// DSProxy\\n// Allows code execution using a persistant identity This can be very\\n// useful to execute a sequence of atomic actions. Since the owner of\\n// the proxy can be changed, this allows for dynamic ownership models\\n// i.e. a multisig\\ncontract DSProxy is DSAuth, DSNote {\\n    DSProxyCache public cache;  // global cache for contracts\\n\\n    constructor(address _cacheAddr) public {\\n        setCache(_cacheAddr);\\n    }\\n\\n    receive() external payable {\\n    }\\n\\n    // use the proxy to execute calldata _data on contract _code\\n    function execute(bytes memory _code, bytes memory _data)\\n    public\\n    payable\\n    returns (address target, bytes memory response)\\n    {\\n        target = cache.read(_code);\\n        if (target == address(0)) {\\n            // deploy contract & store its address in cache\\n            target = cache.write(_code);\\n        }\\n\\n        response = execute(target, _data);\\n    }\\n\\n    function execute(address _target, bytes memory _data)\\n    public\\n    auth\\n    note\\n    payable\\n    returns (bytes memory response)\\n    {\\n        require(_target != address(0), \\\"ds-proxy-target-address-required\\\");\\n\\n        // call contract in current context\\n        assembly {\\n            let succeeded := delegatecall(sub(gas(), 5000), _target, add(_data, 0x20), mload(_data), 0, 0)\\n            let size := returndatasize()\\n\\n            response := mload(0x40)\\n            mstore(0x40, add(response, and(add(add(size, 0x20), 0x1f), not(0x1f))))\\n            mstore(response, size)\\n            returndatacopy(add(response, 0x20), 0, size)\\n\\n            switch iszero(succeeded)\\n            case 1 {\\n            // throw if delegatecall failed\\n                revert(add(response, 0x20), size)\\n            }\\n        }\\n    }\\n\\n    //set new cache\\n    function setCache(address _cacheAddr)\\n    public\\n    auth\\n    note\\n    returns (bool)\\n    {\\n        require(_cacheAddr != address(0), \\\"ds-proxy-cache-address-required\\\");\\n        cache = DSProxyCache(_cacheAddr);  // overwrite cache\\n        return true;\\n    }\\n}\\n\\n// DSProxyFactory\\n// This factory deploys new proxy instances through build()\\n// Deployed proxy addresses are logged\\ncontract DSProxyFactory {\\n    event Created(address indexed sender, address indexed owner, address proxy, address cache);\\n    mapping(address=>bool) public isProxy;\\n    DSProxyCache public cache;\\n\\n    constructor() public {\\n        cache = new DSProxyCache();\\n    }\\n\\n    // deploys a new proxy instance\\n    // sets owner of proxy to caller\\n    function build() public returns (address payable proxy) {\\n        proxy = build(msg.sender);\\n    }\\n\\n    // deploys a new proxy instance\\n    // sets custom owner of proxy\\n    function build(address owner) public returns (address payable proxy) {\\n        proxy = address(new DSProxy(address(cache)));\\n        emit Created(msg.sender, owner, address(proxy), address(cache));\\n        DSProxy(proxy).setOwner(owner);\\n        isProxy[proxy] = true;\\n    }\\n}\\n\\n// DSProxyCache\\n// This global cache stores addresses of contracts previously deployed\\n// by a proxy. This saves gas from repeat deployment of the same\\n// contracts and eliminates blockchain bloat.\\n\\n// By default, all proxies deployed from the same factory store\\n// contracts in the same cache. The cache a proxy instance uses can be\\n// changed.  The cache uses the sha3 hash of a contract's bytecode to\\n// lookup the address\\ncontract DSProxyCache {\\n    mapping(bytes32 => address) cache;\\n\\n    function read(bytes memory _code) public view returns (address) {\\n        bytes32 hash = keccak256(_code);\\n        return cache[hash];\\n    }\\n\\n    function write(bytes memory _code) public returns (address target) {\\n        assembly {\\n            target := create(0, add(_code, 0x20), mload(_code))\\n            switch iszero(extcodesize(target))\\n            case 1 {\\n            // throw if contract failed to deploy\\n                revert(0, 0)\\n            }\\n        }\\n        bytes32 hash = keccak256(_code);\\n        cache[hash] = target;\\n    }\\n}\",\"keccak256\":\"0x8267b60f53e2f85c5019537184d9c12c7c04581cd390c5ec016825e5c3ffcd88\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c8063297103881461005157806360c7d2951461008b5780638e1a55fc146100af578063f3701da2146100b7575b600080fd5b6100776004803603602081101561006757600080fd5b50356001600160a01b03166100dd565b604080519115158252519081900360200190f35b6100936100f2565b604080516001600160a01b039092168252519081900360200190f35b610093610101565b610093600480360360208110156100cd57600080fd5b50356001600160a01b0316610111565b60006020819052908152604090205460ff1681565b6001546001600160a01b031681565b600061010c33610111565b905090565b6001546040516000916001600160a01b03169061012d9061023a565b6001600160a01b03909116815260405190819003602001906000f08015801561015a573d6000803e3d6000fd5b50600154604080516001600160a01b038085168252928316602082015281519394509185169233927f259b30ca39885c6d801a0b5dbc988640f3c25e2f37531fe138c5c5af8955d41b92908290030190a3806001600160a01b03166313af4035836040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b1580156101fa57600080fd5b505af115801561020e573d6000803e3d6000fd5b5050506001600160a01b0382166000908152602081905260409020805460ff1916600117905550919050565b610e8d806102488339019056fe608060405234801561001057600080fd5b50604051610e8d380380610e8d8339818101604052602081101561003357600080fd5b5051600180546001600160a01b031916339081179091556040517fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9490600090a261007c81610083565b50506102ca565b600061009a336001600160e01b03198335166101e1565b6100eb576040805162461bcd60e51b815260206004820152601460248201527f64732d617574682d756e617574686f72697a6564000000000000000000000000604482015290519081900360640190fd5b600435602435346001600160a01b03851661014d576040805162461bcd60e51b815260206004820152601f60248201527f64732d70726f78792d63616368652d616464726573732d726571756972656400604482015290519081900360640190fd5b600280546001600160a01b0387166001600160a01b0319909116179055600193508183336001600160a01b03166000356001600160e01b0319166001600160e01b0319168460003660405180848152602001806020018281038252848482818152602001925080828437600083820152604051601f909101601f1916909201829003965090945050505050a4505050919050565b60006001600160a01b0383163014156101fc575060016102c4565b6001546001600160a01b038481169116141561021a575060016102c4565b6000546001600160a01b0316610232575060006102c4565b6000546040805163b700961360e01b81526001600160a01b0386811660048301523060248301526001600160e01b0319861660448301529151919092169163b7009613916064808301926020929190829003018186803b15801561029557600080fd5b505afa1580156102a9573d6000803e3d6000fd5b505050506040513d60208110156102bf57600080fd5b505190505b92915050565b610bb4806102d96000396000f3fe60806040526004361061006f5760003560e01c806313af40351461007b5780631cff79cd146100b05780631f6a1eb9146101d957806360c7d2951461038a5780637a9e5e4b146103bb5780638da5cb5b146103ee578063948f507614610403578063bf7e214f1461044a57610076565b3661007657005b600080fd5b34801561008757600080fd5b506100ae6004803603602081101561009e57600080fd5b50356001600160a01b031661045f565b005b610164600480360360408110156100c657600080fd5b6001600160a01b038235169190810190604081016020820135600160201b8111156100f057600080fd5b82018360208201111561010257600080fd5b803590602001918460018302840111600160201b8311171561012357600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061050d945050505050565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561019e578181015183820152602001610186565b50505050905090810190601f1680156101cb5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610302600480360360408110156101ef57600080fd5b810190602081018135600160201b81111561020957600080fd5b82018360208201111561021b57600080fd5b803590602001918460018302840111600160201b8311171561023c57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b81111561028e57600080fd5b8201836020820111156102a057600080fd5b803590602001918460018302840111600160201b831117156102c157600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061068d945050505050565b60405180836001600160a01b0316815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561034e578181015183820152602001610336565b50505050905090810190601f16801561037b5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b34801561039657600080fd5b5061039f610868565b604080516001600160a01b039092168252519081900360200190f35b3480156103c757600080fd5b506100ae600480360360208110156103de57600080fd5b50356001600160a01b0316610877565b3480156103fa57600080fd5b5061039f610921565b34801561040f57600080fd5b506104366004803603602081101561042657600080fd5b50356001600160a01b0316610930565b604080519115158252519081900360200190f35b34801561045657600080fd5b5061039f610a86565b610475336000356001600160e01b031916610a95565b6104bd576040805162461bcd60e51b8152602060048201526014602482015273191ccb585d5d1a0b5d5b985d5d1a1bdc9a5e995960621b604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0383811691909117918290556040519116907fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9490600090a250565b6060610525336000356001600160e01b031916610a95565b61056d576040805162461bcd60e51b8152602060048201526014602482015273191ccb585d5d1a0b5d5b985d5d1a1bdc9a5e995960621b604482015290519081900360640190fd5b600435602435346001600160a01b0386166105cf576040805162461bcd60e51b815260206004820181905260248201527f64732d70726f78792d7461726765742d616464726573732d7265717569726564604482015290519081900360640190fd5b600080865160208801896113885a03f43d6040519550601f19601f6020830101168601604052808652806000602088013e81156001811461060f57610616565b8160208801fd5b5050508183336001600160a01b03166000356001600160e01b0319166001600160e01b0319168460003660405180848152602001806020018281038252848482818152602001925080828437600083820152604051601f909101601f1916909201829003965090945050505050a450505092915050565b6002546040516322fd145760e21b81526020600482018181528551602484015285516000946060946001600160a01b0390911693638bf4515c93899390928392604490910191908501908083838c5b838110156106f45781810151838201526020016106dc565b50505050905090810190601f1680156107215780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b15801561073e57600080fd5b505afa158015610752573d6000803e3d6000fd5b505050506040513d602081101561076857600080fd5b505191506001600160a01b03821661085557600254604051633f6861d960e11b81526020600482018181528751602484015287516001600160a01b0390941693637ed0c3b293899383926044909201919085019080838360005b838110156107da5781810151838201526020016107c2565b50505050905090810190601f1680156108075780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b15801561082657600080fd5b505af115801561083a573d6000803e3d6000fd5b505050506040513d602081101561085057600080fd5b505191505b61085f828461050d565b90509250929050565b6002546001600160a01b031681565b61088d336000356001600160e01b031916610a95565b6108d5576040805162461bcd60e51b8152602060048201526014602482015273191ccb585d5d1a0b5d5b985d5d1a1bdc9a5e995960621b604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b03838116919091178083556040519116917f1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada491a250565b6001546001600160a01b031681565b6000610948336000356001600160e01b031916610a95565b610990576040805162461bcd60e51b8152602060048201526014602482015273191ccb585d5d1a0b5d5b985d5d1a1bdc9a5e995960621b604482015290519081900360640190fd5b600435602435346001600160a01b0385166109f2576040805162461bcd60e51b815260206004820152601f60248201527f64732d70726f78792d63616368652d616464726573732d726571756972656400604482015290519081900360640190fd5b600280546001600160a01b0387166001600160a01b0319909116179055600193508183336001600160a01b03166000356001600160e01b0319166001600160e01b0319168460003660405180848152602001806020018281038252848482818152602001925080828437600083820152604051601f909101601f1916909201829003965090945050505050a4505050919050565b6000546001600160a01b031681565b60006001600160a01b038316301415610ab057506001610b78565b6001546001600160a01b0384811691161415610ace57506001610b78565b6000546001600160a01b0316610ae657506000610b78565b6000546040805163b700961360e01b81526001600160a01b0386811660048301523060248301526001600160e01b0319861660448301529151919092169163b7009613916064808301926020929190829003018186803b158015610b4957600080fd5b505afa158015610b5d573d6000803e3d6000fd5b505050506040513d6020811015610b7357600080fd5b505190505b9291505056fea2646970667358221220785c5ffa6970a15cee549950ba8a8449d5459c89373401426ce169ebba01732a64736f6c634300060c0033a2646970667358221220aa14c9bc49f158659ff257fbb297afa26fddaee5466bdc9d58bb9698cdb35e8264736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 396,
        "contract": "contracts/makerdao/utils/proxy.sol:DSProxyFactory",
        "label": "isProxy",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 398,
        "contract": "contracts/makerdao/utils/proxy.sol:DSProxyFactory",
        "label": "cache",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(DSProxyCache)514"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(DSProxyCache)514": {
        "encoding": "inplace",
        "label": "contract DSProxyCache",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}