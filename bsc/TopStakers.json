{
  "address": "0xAD3B57b8520125dB9E50388e882DBD5C101a2885",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_veToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyInTop",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AmountMustBeMoreThatMinimum",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "available",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "requested",
          "type": "uint256"
        }
      ],
      "name": "InsufficientStake",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LockExpired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotStakerFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAdminError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OutOfBounds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SubscriptionDelayError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokensDelegated",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newAmount",
          "type": "uint256"
        }
      ],
      "name": "MinStakingAmountUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDelay",
          "type": "uint256"
        }
      ],
      "name": "SubscriptionDelayUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "SubscriptionRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "activationTime",
          "type": "uint256"
        }
      ],
      "name": "SubscriptionRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTopStakersCount",
          "type": "uint256"
        }
      ],
      "name": "TopStakersMaxCountUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_veToken",
          "type": "address"
        }
      ],
      "name": "VeTokenUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMaxTopStakersCount",
          "type": "uint256"
        }
      ],
      "name": "changeMaxTopStakersCount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minStakingAmount",
          "type": "uint256"
        }
      ],
      "name": "changeMinStakingAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newDelay",
          "type": "uint256"
        }
      ],
      "name": "changeSubscriptionDelay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_veToken",
          "type": "address"
        }
      ],
      "name": "changeVeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getStakerAt",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getTimeUntilNextSubscribe",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTopStakers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTopStakersLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isStaker",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "isTopStaker",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastOperationTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxTopStakersCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minStakingAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "subscribe",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "subscriptionDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "topStakers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unsubscribe",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "veToken",
      "outputs": [
        {
          "internalType": "contract IVeToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x52ee2398d900d9065a88b8d41054fd7c0c9fbe66da80b910f5012784f03a8903",
  "receipt": {
    "to": null,
    "from": "0xbd39bed6F15Ea5D1eF198Fcbb53285c7CCccbBe4",
    "contractAddress": "0xAD3B57b8520125dB9E50388e882DBD5C101a2885",
    "transactionIndex": 43,
    "gasUsed": "1086068",
    "logsBloom": "0x
    "blockHash": "0x121fe6ce76ee443a307d99995dbf90b5cc6c14e65ea366754ddc0d176c7b551e",
    "transactionHash": "0x52ee2398d900d9065a88b8d41054fd7c0c9fbe66da80b910f5012784f03a8903",
    "logs": [
      {
        "transactionIndex": 43,
        "blockNumber": 55171783,
        "transactionHash": "0x52ee2398d900d9065a88b8d41054fd7c0c9fbe66da80b910f5012784f03a8903",
        "address": "0xAD3B57b8520125dB9E50388e882DBD5C101a2885",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000bd39bed6f15ea5d1ef198fcbb53285c7ccccbbe4"
        ],
        "data": "0x",
        "logIndex": 97,
        "blockHash": "0x121fe6ce76ee443a307d99995dbf90b5cc6c14e65ea366754ddc0d176c7b551e"
      }
    ],
    "blockNumber": 55171783,
    "cumulativeGasUsed": "4821277",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xe337e46e0384ae3FB04B77eaAa508F20524799b5"
  ],
  "numDeployments": 1,
  "solcInputHash": "09f86479fe0cbf936a7cae2178c51eb0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_veToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyInTop\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AmountMustBeMoreThatMinimum\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requested\",\"type\":\"uint256\"}],\"name\":\"InsufficientStake\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LockExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotStakerFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAdminError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SubscriptionDelayError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokensDelegated\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"MinStakingAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDelay\",\"type\":\"uint256\"}],\"name\":\"SubscriptionDelayUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"SubscriptionRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"activationTime\",\"type\":\"uint256\"}],\"name\":\"SubscriptionRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTopStakersCount\",\"type\":\"uint256\"}],\"name\":\"TopStakersMaxCountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_veToken\",\"type\":\"address\"}],\"name\":\"VeTokenUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxTopStakersCount\",\"type\":\"uint256\"}],\"name\":\"changeMaxTopStakersCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minStakingAmount\",\"type\":\"uint256\"}],\"name\":\"changeMinStakingAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDelay\",\"type\":\"uint256\"}],\"name\":\"changeSubscriptionDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_veToken\",\"type\":\"address\"}],\"name\":\"changeVeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getStakerAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getTimeUntilNextSubscribe\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTopStakers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTopStakersLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isStaker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isTopStaker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastOperationTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTopStakersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minStakingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscribe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscriptionDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"topStakers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unsubscribe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veToken\",\"outputs\":[{\"internalType\":\"contract IVeToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"}},\"title\":\"TopStakers\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getStakerAt(uint256)\":{\"notice\":\"Returns the address of staker in {index} place*\"},\"getTimeUntilNextSubscribe(address)\":{\"notice\":\"Returns the time left in seconds, before user can call subscribe/unsubscribe*\"},\"getTopStakers()\":{\"notice\":\"Returns the list of users that are topStakers*\"},\"getTopStakersLength()\":{\"notice\":\"Returns the amount of subscribed users (stakers list length)*\"},\"isStaker(address)\":{\"notice\":\"Returns if user is staker with not expired stake*\"},\"isTopStaker(address)\":{\"notice\":\"Returns if user is top staker or not*\"},\"subscribe()\":{\"notice\":\"User function to add yourself in stakers list to be able to be topStaker for liquidation*\"},\"unsubscribe()\":{\"notice\":\"User function to remove yourself from stakers list*\"}},\"notice\":\"Contract that have functionality to work with Top Stakers. They need to have veToken and call subscribe to participate in this list.*\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/exchange/contracts/staking/TopStakers.sol\":\"TopStakers\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable2Step.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n}\\n\",\"keccak256\":\"0xde231558366826d7cb61725af8147965a61c53b77a352cc8c9af38fc5a92ac3c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"contracts/exchange/contracts/interfaces/ITopStakers.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\npragma solidity ^0.8.0;\\n\\ninterface ITopStakers {\\n    /* ===================== ERRORS ===================== */\\n    error NotStakerFound();\\n    error SubscriptionDelayError();\\n    error AmountMustBeMoreThatMinimum();\\n    error InsufficientStake(uint256 available, uint256 requested);\\n    error LockExpired();\\n    error TokensDelegated();\\n    error AlreadyInTop();\\n    error OnlyAdminError();\\n    error InvalidAddress();\\n    error OutOfBounds();\\n\\n    /* ===================== EVENTS ===================== */\\n\\n    event SubscriptionRequested(address indexed user, uint256 amount, uint256 activationTime);\\n    event TopStakersMaxCountUpdated(uint256 newTopStakersCount);\\n    event VeTokenUpdated(address _veToken);\\n    event MinStakingAmountUpdated(uint256 newAmount);\\n    event SubscriptionDelayUpdated(uint256 newDelay);\\n    event SubscriptionRemoved(address user);\\n\\n    /* ========================= VARS ========================== */\\n\\n    function maxTopStakersCount() external view returns(uint256);\\n\\n    /* ==================== MUTABLE METHODS ==================== */\\n\\n    /**\\n      * @notice Admin function to change number of top stakers\\n     **/\\n    function changeMaxTopStakersCount(uint256 newTopStakersCount) external;\\n\\n    /**\\n      * @notice Admin function to change veToken address\\n     **/\\n    function changeVeToken(address veToken) external;\\n\\n    /**\\n      * @notice Admin function to change minStakingAmount\\n     **/\\n    function changeMinStakingAmount(uint256 minStakingAmount) external;\\n\\n    /**\\n     * @notice Admin function to change subscriptionDelay\\n     **/\\n    function changeSubscriptionDelay(uint256 minStakingAmount) external;\\n\\n    /**\\n      * @notice User function to add yourself in stakers list to be able to be topStaker for liquidation\\n     **/\\n    function subscribe() external;\\n\\n    /**\\n      * @notice User function to remove yourself from stakers list\\n     **/\\n    function unsubscribe() external;\\n\\n    /* ==================== VIEW METHODS ==================== */\\n\\n    /**\\n      * @notice Returns if user is top staker or not\\n     **/\\n    function isTopStaker(address staker) external view returns(bool);\\n\\n\\n    /**\\n      * @notice Returns if user is staker with not expired stake\\n     **/\\n    function isStaker(address user) external view returns(bool);\\n\\n    /**\\n      * @notice Returns the list of users that are topStakers\\n     **/\\n    function getTopStakers() external view returns(address[] memory);\\n\\n    /**\\n      * @notice Returns the amount of subscribed users (stakers list length)\\n     **/\\n    function getTopStakersLength() external view returns(uint256);\\n\\n    /**\\n     * @notice Returns the address of staker in {index} place\\n     **/\\n    function getStakerAt(uint256 index) external view returns(address);\\n\\n    /**\\n     * @notice Returns the time left in seconds, before user can call subscribe/unsubscribe\\n     **/\\n    function getTimeUntilNextSubscribe(address user) external view returns(uint256);\\n}\",\"keccak256\":\"0x1d3506b5d5957398877d4096bde73edbcd69cdeceb4624774805f18a9d9890fe\",\"license\":\"BSL 1.1\"},\"contracts/exchange/contracts/staking/TopStakers.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\nimport \\\"../interfaces/ITopStakers.sol\\\";\\n\\nstruct LockedBalance {\\n    int128 amount;\\n    int128 delegated;\\n    uint256 end;\\n    address delegatee;\\n}\\n\\ninterface IVeToken {\\n    function balanceOf(address _owner) external view returns (uint256);\\n    function locked(address user) external view returns (LockedBalance memory);\\n}\\n\\n/**\\n  * @title TopStakers\\n  * @notice Contract that have functionality to work with Top Stakers.\\n  * They need to have veToken and call subscribe to participate in this list.\\n **/\\ncontract TopStakers is ITopStakers, Ownable2Step {\\n    address public admin;\\n    address[] public topStakers;\\n    uint256 public maxTopStakersCount; // Max number of stakers we want to store on the top\\n    uint256 public minStakingAmount; // minimal amount of staked token to be able to subscribe in the list\\n    uint256 public subscriptionDelay;\\n    IVeToken public veToken; // Address(interface) of vested escrow token\\n    mapping(address => uint256) public lastOperationTime;\\n    mapping(address => bool) public isStaker;\\n\\n    constructor(address _veToken) {\\n        veToken = IVeToken(_veToken);\\n        maxTopStakersCount = 5;\\n        minStakingAmount = 0;\\n        subscriptionDelay = 30;\\n    }\\n\\n    modifier checkDelay() {\\n        if (block.timestamp <= lastOperationTime[msg.sender] + subscriptionDelay) revert SubscriptionDelayError();\\n        _;\\n        lastOperationTime[msg.sender] = block.timestamp;\\n    }\\n\\n    function changeMaxTopStakersCount(uint256 newMaxTopStakersCount) external onlyOwner {\\n        maxTopStakersCount = newMaxTopStakersCount;\\n        emit TopStakersMaxCountUpdated(newMaxTopStakersCount);\\n    }\\n\\n    function changeVeToken(address _veToken) external onlyOwner {\\n        veToken = IVeToken(_veToken);\\n        emit VeTokenUpdated(_veToken);\\n    }\\n\\n    function changeMinStakingAmount(uint256 _minStakingAmount) external onlyOwner {\\n        minStakingAmount = _minStakingAmount;\\n        emit MinStakingAmountUpdated(_minStakingAmount);\\n    }\\n\\n    function changeSubscriptionDelay(uint256 newDelay) external onlyOwner {\\n        subscriptionDelay = newDelay;\\n        emit SubscriptionDelayUpdated(newDelay);\\n    }\\n\\n    /**\\n      * @notice Finds an expired staker to replace or the staker with minimum balance if no expired stakers found\\n      * @dev Important: Returns immediately upon finding first expired staker.\\n      *      Expired stakers are not automatically removed from the list - they remain until:\\n      *      1. They are replaced by a new staker (they are given priority for replacement), or\\n      *      2. They manually unsubscribe\\n      *      If no expired stakers are found, returns position of the staker with minimum balance.\\n      * @param user Address to check against the top stakers list\\n      * @return minPosition Position of either:\\n      *         - First found expired staker (priority for replacement)\\n      *         - Minimum balance holder (if no expired stakers)\\n      * @return minBalance The balance (0 if expired staker found, otherwise minimum balance among active stakers)\\n      */\\n    function _findMinStakerAndCheckUser(address user) internal view returns(uint256 minPosition, uint256 minBalance) {\\n        uint256 len = topStakers.length;\\n        minBalance = len == 0 ? 0 : type(uint256).max;\\n        minPosition = 0;\\n\\n        for (uint256 i = 0; i < len; i++) {\\n            if (user == topStakers[i]) revert AlreadyInTop();\\n\\n            LockedBalance memory lock = veToken.locked(topStakers[i]);\\n            if (lock.end < block.timestamp) {\\n                return (i, 0);\\n            }\\n\\n            uint256 stakerBalance = veToken.balanceOf(topStakers[i]);\\n            if (stakerBalance < minBalance) {\\n                minBalance = stakerBalance;\\n                minPosition = i;\\n            }\\n        }\\n    }\\n\\n    function subscribe() external checkDelay {\\n        LockedBalance memory userLock = veToken.locked(msg.sender);\\n        uint256 amount = veToken.balanceOf(msg.sender);\\n        if (amount <= minStakingAmount) revert AmountMustBeMoreThatMinimum();\\n        // Check that lock is not expired\\n        if (userLock.end < block.timestamp) revert LockExpired();\\n        // Check that tokens are not delegated to another person\\n        if (userLock.delegatee != address(0) && userLock.delegatee != msg.sender) revert TokensDelegated();\\n\\n        uint256 len = topStakers.length;\\n        if (len < maxTopStakersCount) {\\n            topStakers.push(msg.sender);\\n\\n            isStaker[msg.sender] = true;\\n            emit SubscriptionRequested(msg.sender, amount, block.timestamp);\\n            return;\\n        }\\n\\n        (uint256 minPosition, uint256 minBalance) = _findMinStakerAndCheckUser(msg.sender);\\n        if (amount > minBalance) {\\n            emit SubscriptionRemoved(topStakers[minPosition]);\\n            topStakers[minPosition] = msg.sender;\\n        }\\n\\n        isStaker[msg.sender] = true;\\n        emit SubscriptionRequested(msg.sender, amount, block.timestamp);\\n    }\\n\\n    function _unsubscribe(address user) internal {\\n        if (topStakers.length == 0 || user == address(0)) revert NotStakerFound();\\n\\n        uint256 len = topStakers.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            if (topStakers[i] == user) {\\n                // Swap the element with the last one and remove the last element\\n                topStakers[i] = topStakers[len - 1];\\n                topStakers.pop();\\n                isStaker[user] = false;\\n                emit SubscriptionRemoved(user);\\n                return;\\n            }\\n        }\\n\\n        revert NotStakerFound();\\n    }\\n\\n    function unsubscribe() external checkDelay {\\n        _unsubscribe(msg.sender);\\n    }\\n\\n    /* ==================== VIEW METHODS ==================== */\\n\\n    function isTopStaker(address staker) external view returns (bool) {\\n        uint256 len = topStakers.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            if (topStakers[i] == staker) return true;\\n        }\\n        return false;\\n    }\\n\\n    function getTopStakers() external view returns (address[] memory) {\\n        return topStakers;\\n    }\\n\\n    function getTopStakersLength() external view returns (uint256) {\\n        return topStakers.length;\\n    }\\n\\n    function getStakerAt(uint256 index) external view returns (address) {\\n        if (index >= topStakers.length) revert OutOfBounds();\\n        return topStakers[index];\\n    }\\n\\n    function getTimeUntilNextSubscribe(address user) external view returns (uint256) {\\n        uint256 nextOperationTime = lastOperationTime[user] + subscriptionDelay;\\n        if (block.timestamp >= nextOperationTime) {\\n            return 0;\\n        }\\n        return nextOperationTime - block.timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0xad52ceab5f9390eb3c87ace3af6decae32a6393627de6fcfb678effae858495d\",\"license\":\"BSL 1.1\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      }
    },
    "title": "TopStakers",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getStakerAt(uint256)": {
        "notice": "Returns the address of staker in {index} place*"
      },
      "getTimeUntilNextSubscribe(address)": {
        "notice": "Returns the time left in seconds, before user can call subscribe/unsubscribe*"
      },
      "getTopStakers()": {
        "notice": "Returns the list of users that are topStakers*"
      },
      "getTopStakersLength()": {
        "notice": "Returns the amount of subscribed users (stakers list length)*"
      },
      "isStaker(address)": {
        "notice": "Returns if user is staker with not expired stake*"
      },
      "isTopStaker(address)": {
        "notice": "Returns if user is top staker or not*"
      },
      "subscribe()": {
        "notice": "User function to add yourself in stakers list to be able to be topStaker for liquidation*"
      },
      "unsubscribe()": {
        "notice": "User function to remove yourself from stakers list*"
      }
    },
    "notice": "Contract that have functionality to work with Top Stakers. They need to have veToken and call subscribe to participate in this list.*",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/exchange/contracts/staking/TopStakers.sol:TopStakers",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 120,
        "contract": "contracts/exchange/contracts/staking/TopStakers.sol:TopStakers",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 398,
        "contract": "contracts/exchange/contracts/staking/TopStakers.sol:TopStakers",
        "label": "admin",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 401,
        "contract": "contracts/exchange/contracts/staking/TopStakers.sol:TopStakers",
        "label": "topStakers",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 403,
        "contract": "contracts/exchange/contracts/staking/TopStakers.sol:TopStakers",
        "label": "maxTopStakersCount",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 405,
        "contract": "contracts/exchange/contracts/staking/TopStakers.sol:TopStakers",
        "label": "minStakingAmount",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 407,
        "contract": "contracts/exchange/contracts/staking/TopStakers.sol:TopStakers",
        "label": "subscriptionDelay",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 410,
        "contract": "contracts/exchange/contracts/staking/TopStakers.sol:TopStakers",
        "label": "veToken",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IVeToken)391"
      },
      {
        "astId": 414,
        "contract": "contracts/exchange/contracts/staking/TopStakers.sol:TopStakers",
        "label": "lastOperationTime",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 418,
        "contract": "contracts/exchange/contracts/staking/TopStakers.sol:TopStakers",
        "label": "isStaker",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IVeToken)391": {
        "encoding": "inplace",
        "label": "contract IVeToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}