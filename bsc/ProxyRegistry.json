{
  "address": "0x207DC3BD981192c8868ea6FfDc9B35132c8140A4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "build",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "proxy",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "build",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "proxy",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "proxies",
      "outputs": [
        {
          "internalType": "contract DSProxy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "bc5dc47a4c79e74ac8d5e825ff0e349c",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"build\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"proxy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"build\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"proxy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"proxies\",\"outputs\":[{\"internalType\":\"contract DSProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/makerdao/core/ProxyRegistry.sol\":\"ProxyRegistry\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"contracts/lib/ds-auth/src/auth.sol\":{\"content\":\"// SPDX-License-Identifier: GNU-3\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.4.23;\\n\\ninterface DSAuthority {\\n    function canCall(\\n        address src, address dst, bytes4 sig\\n    ) external view returns (bool);\\n}\\n\\ncontract DSAuthEvents {\\n    event LogSetAuthority (address indexed authority);\\n    event LogSetOwner     (address indexed owner);\\n}\\n\\ncontract DSAuth is DSAuthEvents {\\n    DSAuthority  public  authority;\\n    address      public  owner;\\n\\n    constructor() public {\\n        owner = msg.sender;\\n        emit LogSetOwner(msg.sender);\\n    }\\n\\n    function setOwner(address owner_)\\n        public\\n        auth\\n    {\\n        owner = owner_;\\n        emit LogSetOwner(owner);\\n    }\\n\\n    function setAuthority(DSAuthority authority_)\\n        public\\n        auth\\n    {\\n        authority = authority_;\\n        emit LogSetAuthority(address(authority));\\n    }\\n\\n    modifier auth {\\n        require(isAuthorized(msg.sender, msg.sig), \\\"ds-auth-unauthorized\\\");\\n        _;\\n    }\\n\\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\\n        if (src == address(this)) {\\n            return true;\\n        } else if (src == owner) {\\n            return true;\\n        } else if (authority == DSAuthority(address(0))) {\\n            return false;\\n        } else {\\n            return authority.canCall(src, address(this), sig);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe253534397ef991977372aef136f94019ad8868c30ff1c5e6f90f2e6631b8eba\",\"license\":\"GNU-3\"},\"contracts/lib/ds-note/src/note.sol\":{\"content\":\"/// note.sol -- the `note' modifier, for logging calls as events\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.4.23;\\n\\ncontract DSNote {\\n    event LogNote(\\n        bytes4   indexed  sig,\\n        address  indexed  guy,\\n        bytes32  indexed  foo,\\n        bytes32  indexed  bar,\\n        uint256           wad,\\n        bytes             fax\\n    ) anonymous;\\n\\n    modifier note {\\n        bytes32 foo;\\n        bytes32 bar;\\n        uint256 wad;\\n\\n        assembly {\\n            foo := calldataload(4)\\n            bar := calldataload(36)\\n            wad := callvalue()\\n        }\\n\\n        _;\\n\\n        emit LogNote(msg.sig, msg.sender, foo, bar, wad, msg.data);\\n    }\\n}\\n\",\"keccak256\":\"0xc6aed2fade2d8b560dadf645b76f5d55a09d4cffb062fa2a1065642835abcf90\"},\"contracts/makerdao/core/ProxyRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\n/// ProxyRegistry.sol\\n\\n// Copyright (C) 2018-2021 Dai Foundation\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\n    pragma solidity >=0.6.0;\\n\\n    import \\\"../utils/proxy.sol\\\";\\n\\n    // @title ProxyRegistry\\n    // @notice A registry contract that deploys and tracks DSProxy instances for users.\\n    // @dev Manages proxy creation through DSProxyFactory and maintains a mapping of owner addresses to their proxies.\\n    contract ProxyRegistry {\\n        // @notice Mapping of owner addresses to their corresponding DSProxy instances.\\n        mapping(address => DSProxy) public proxies;\\n\\n        // @notice The DSProxyFactory instance used to deploy new proxies.\\n        DSProxyFactory factory;\\n\\n        // @notice Constructor that initializes the registry with a DSProxyFactory.\\n        // @param factory_ The address of the DSProxyFactory contract.\\n        constructor(address factory_) public {\\n            factory = DSProxyFactory(factory_);\\n        }\\n\\n        // @notice Deploys a new DSProxy instance for the caller.\\n        // @return proxy The address of the newly deployed proxy.\\n        function build() public returns (address payable proxy) {\\n            proxy = build(msg.sender);\\n        }\\n\\n        // @notice Deploys a new DSProxy instance for a specified owner.\\n        // @param owner The address that will own the new proxy.\\n        // @return proxy The address of the newly deployed proxy.\\n        // @dev Reverts if the owner already has a proxy and remains its owner.\\n    function build(address owner) public returns (address payable proxy) {\\n        // Not allow new proxy if the user already has one and remains being the owner\\n        require(proxies[owner] == DSProxy(0) || proxies[owner].owner() != owner);\\n        proxy = factory.build(owner);\\n        proxies[owner] = DSProxy(proxy);\\n    }\\n}\",\"keccak256\":\"0xfee12e316c88680ae6fbd2ebd334a09c21f8ea8ddd22720dd66e3a2d8abf184a\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/makerdao/utils/proxy.sol\":{\"content\":\"// proxy.sol - execute actions atomically through the proxy's identity\\n\\n// Copyright (C) 2017  DappHub, LLC\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.6.0 <0.7.0;\\n\\nimport \\\"../../lib/ds-auth/src/auth.sol\\\";\\nimport \\\"../../lib/ds-note/src/note.sol\\\";\\n\\n// DSProxy\\n// Allows code execution using a persistant identity This can be very\\n// useful to execute a sequence of atomic actions. Since the owner of\\n// the proxy can be changed, this allows for dynamic ownership models\\n// i.e. a multisig\\ncontract DSProxy is DSAuth, DSNote {\\n    DSProxyCache public cache;  // global cache for contracts\\n\\n    constructor(address _cacheAddr) public {\\n        setCache(_cacheAddr);\\n    }\\n\\n    receive() external payable {\\n    }\\n\\n    // use the proxy to execute calldata _data on contract _code\\n    function execute(bytes memory _code, bytes memory _data)\\n    public\\n    payable\\n    returns (address target, bytes memory response)\\n    {\\n        target = cache.read(_code);\\n        if (target == address(0)) {\\n            // deploy contract & store its address in cache\\n            target = cache.write(_code);\\n        }\\n\\n        response = execute(target, _data);\\n    }\\n\\n    function execute(address _target, bytes memory _data)\\n    public\\n    auth\\n    note\\n    payable\\n    returns (bytes memory response)\\n    {\\n        require(_target != address(0), \\\"ds-proxy-target-address-required\\\");\\n\\n        // call contract in current context\\n        assembly {\\n            let succeeded := delegatecall(sub(gas(), 5000), _target, add(_data, 0x20), mload(_data), 0, 0)\\n            let size := returndatasize()\\n\\n            response := mload(0x40)\\n            mstore(0x40, add(response, and(add(add(size, 0x20), 0x1f), not(0x1f))))\\n            mstore(response, size)\\n            returndatacopy(add(response, 0x20), 0, size)\\n\\n            switch iszero(succeeded)\\n            case 1 {\\n            // throw if delegatecall failed\\n                revert(add(response, 0x20), size)\\n            }\\n        }\\n    }\\n\\n    //set new cache\\n    function setCache(address _cacheAddr)\\n    public\\n    auth\\n    note\\n    returns (bool)\\n    {\\n        require(_cacheAddr != address(0), \\\"ds-proxy-cache-address-required\\\");\\n        cache = DSProxyCache(_cacheAddr);  // overwrite cache\\n        return true;\\n    }\\n}\\n\\n// DSProxyFactory\\n// This factory deploys new proxy instances through build()\\n// Deployed proxy addresses are logged\\ncontract DSProxyFactory {\\n    event Created(address indexed sender, address indexed owner, address proxy, address cache);\\n    mapping(address=>bool) public isProxy;\\n    DSProxyCache public cache;\\n\\n    constructor() public {\\n        cache = new DSProxyCache();\\n    }\\n\\n    // deploys a new proxy instance\\n    // sets owner of proxy to caller\\n    function build() public returns (address payable proxy) {\\n        proxy = build(msg.sender);\\n    }\\n\\n    // deploys a new proxy instance\\n    // sets custom owner of proxy\\n    function build(address owner) public returns (address payable proxy) {\\n        proxy = address(new DSProxy(address(cache)));\\n        emit Created(msg.sender, owner, address(proxy), address(cache));\\n        DSProxy(proxy).setOwner(owner);\\n        isProxy[proxy] = true;\\n    }\\n}\\n\\n// DSProxyCache\\n// This global cache stores addresses of contracts previously deployed\\n// by a proxy. This saves gas from repeat deployment of the same\\n// contracts and eliminates blockchain bloat.\\n\\n// By default, all proxies deployed from the same factory store\\n// contracts in the same cache. The cache a proxy instance uses can be\\n// changed.  The cache uses the sha3 hash of a contract's bytecode to\\n// lookup the address\\ncontract DSProxyCache {\\n    mapping(bytes32 => address) cache;\\n\\n    function read(bytes memory _code) public view returns (address) {\\n        bytes32 hash = keccak256(_code);\\n        return cache[hash];\\n    }\\n\\n    function write(bytes memory _code) public returns (address target) {\\n        assembly {\\n            target := create(0, add(_code, 0x20), mload(_code))\\n            switch iszero(extcodesize(target))\\n            case 1 {\\n            // throw if contract failed to deploy\\n                revert(0, 0)\\n            }\\n        }\\n        bytes32 hash = keccak256(_code);\\n        cache[hash] = target;\\n    }\\n}\",\"keccak256\":\"0x8267b60f53e2f85c5019537184d9c12c7c04581cd390c5ec016825e5c3ffcd88\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516102dd3803806102dd8339818101604052602081101561003357600080fd5b5051600180546001600160a01b0319166001600160a01b0390921691909117905561027a806100636000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80638e1a55fc14610046578063c45527911461006a578063f3701da214610090575b600080fd5b61004e6100b6565b604080516001600160a01b039092168252519081900360200190f35b61004e6004803603602081101561008057600080fd5b50356001600160a01b03166100c6565b61004e600480360360208110156100a657600080fd5b50356001600160a01b03166100e1565b60006100c1336100e1565b905090565b6000602081905290815260409020546001600160a01b031681565b6001600160a01b03818116600090815260208190526040812054909116158061018d57506001600160a01b0380831660008181526020818152604091829020548251638da5cb5b60e01b8152925193941692638da5cb5b926004808201939291829003018186803b15801561015557600080fd5b505afa158015610169573d6000803e3d6000fd5b505050506040513d602081101561017f57600080fd5b50516001600160a01b031614155b61019657600080fd5b600154604080516379b80ed160e11b81526001600160a01b0385811660048301529151919092169163f3701da29160248083019260209291908290030181600087803b1580156101e557600080fd5b505af11580156101f9573d6000803e3d6000fd5b505050506040513d602081101561020f57600080fd5b50516001600160a01b03928316600090815260208190526040902080546001600160a01b03191693821693909317909255509056fea26469706673582212200344b508cc22a10ee56c6b1ba6d710215707a2bd85fed30d869294295abc010a64736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80638e1a55fc14610046578063c45527911461006a578063f3701da214610090575b600080fd5b61004e6100b6565b604080516001600160a01b039092168252519081900360200190f35b61004e6004803603602081101561008057600080fd5b50356001600160a01b03166100c6565b61004e600480360360208110156100a657600080fd5b50356001600160a01b03166100e1565b60006100c1336100e1565b905090565b6000602081905290815260409020546001600160a01b031681565b6001600160a01b03818116600090815260208190526040812054909116158061018d57506001600160a01b0380831660008181526020818152604091829020548251638da5cb5b60e01b8152925193941692638da5cb5b926004808201939291829003018186803b15801561015557600080fd5b505afa158015610169573d6000803e3d6000fd5b505050506040513d602081101561017f57600080fd5b50516001600160a01b031614155b61019657600080fd5b600154604080516379b80ed160e11b81526001600160a01b0385811660048301529151919092169163f3701da29160248083019260209291908290030181600087803b1580156101e557600080fd5b505af11580156101f9573d6000803e3d6000fd5b505050506040513d602081101561020f57600080fd5b50516001600160a01b03928316600090815260208190526040902080546001600160a01b03191693821693909317909255509056fea26469706673582212200344b508cc22a10ee56c6b1ba6d710215707a2bd85fed30d869294295abc010a64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 192,
        "contract": "contracts/makerdao/core/ProxyRegistry.sol:ProxyRegistry",
        "label": "proxies",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_contract(DSProxy)382)"
      },
      {
        "astId": 194,
        "contract": "contracts/makerdao/core/ProxyRegistry.sol:ProxyRegistry",
        "label": "factory",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(DSProxyFactory)470"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(DSProxy)382": {
        "encoding": "inplace",
        "label": "contract DSProxy",
        "numberOfBytes": "20"
      },
      "t_contract(DSProxyFactory)470": {
        "encoding": "inplace",
        "label": "contract DSProxyFactory",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_contract(DSProxy)382)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract DSProxy)",
        "numberOfBytes": "32",
        "value": "t_contract(DSProxy)382"
      }
    }
  }
}