{
  "address": "0x55e53133C65c8Cb53f189a49Ae246219FAB1eE14",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "BadAccessControlSingleton",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAdminError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAlerterError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyCDPAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyDAOError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyDisablerAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyLiquidationAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyMintAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyProxyActionsError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyRewardAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyRoleError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyVaultAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyVotingEscrowError",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "DisableContract",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "usr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "Exit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "usr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "Join",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACCESS_CONTROL_SINGLETON",
      "outputs": [
        {
          "internalType": "contract ISuAccessControl",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ALERTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CDP_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DAO_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DISABLER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIQUIDATION_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINT_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROXY_ACTIONS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARD_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VOTING_ESCROW_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateral",
      "outputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralType",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractEnabled",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disableContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "usr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amt",
          "type": "uint256"
        }
      ],
      "name": "exit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "accessControlSingleton",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "safeEngine_",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "collateralType_",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "collateral_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "usr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amt",
          "type": "uint256"
        }
      ],
      "name": "join",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "safeEngine",
      "outputs": [
        {
          "internalType": "contract ISafeEngine",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "8c060bc8c39a7272c2849a174b3b4791",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BadAccessControlSingleton\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAdminError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAlerterError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyCDPAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyDAOError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyDisablerAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyLiquidationAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyMintAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyProxyActionsError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRewardAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRoleError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyVaultAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyVotingEscrowError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DisableContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Exit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Join\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACCESS_CONTROL_SINGLETON\",\"outputs\":[{\"internalType\":\"contract ISuAccessControl\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ALERTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CDP_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAO_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DISABLER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDATION_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROXY_ACTIONS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VOTING_ESCROW_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateral\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralType\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractEnabled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"accessControlSingleton\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"safeEngine_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"collateralType_\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"collateral_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"join\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeEngine\",\"outputs\":[{\"internalType\":\"contract ISafeEngine\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"custom:changes\":\"Renamed from GemJoin5.sol to CollateralJoinDecimals.sol. Added `Join` and `Exit` events. Replaced                 MakerDAO\\u2019s authorizedAccounts with SuAuthenticated for access control.\",\"custom:events\":\"Emits `Join`, `Exit`, and `DisableContract` for state changes and operations.\",\"custom:security\":\"Only authorized accounts (DisablerAccess) can disable the contract. Token transfers require user                 approval, and SafeEngine enforces balance updates. The contract adjusts amounts for tokens with                 decimals less than 18.\",\"custom:usage\":\"- **Initialization**: Deploy with access control, SafeEngine, collateral type, and collateral token addresses.   ```solidity   CollateralJoinDecimals collateralJoin = new CollateralJoinDecimals(accessControl, safeEngine, \\\"USDC-A\\\", collateralToken);   ``` - **Deposit Collateral**: Join collateral tokens into a Safe.   ```solidity   collateralJoin.join(user, amount);   ``` - **Withdraw Collateral**: Exit collateral tokens from a Safe.   ```solidity   collateralJoin.exit(user, amount);   ``` - **Disabling**: Disable the contract to halt operations.   ```solidity   collateralJoin.disableContract();   ```\",\"details\":\"Bridges external ERC20 collateral tokens with the SafeEngine\\u2019s internal collateral balances, converting token amounts      to 18-decimal WAD precision for SafeEngine compatibility. Handles token transfers and SafeEngine balance updates      for Safe operations. This contract is a fork of MakerDAO\\u2019s GemJoin5.sol, adapted for StableUnit with added events      and SuAuthenticated access control.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"disableContract()\":{\"details\":\"Sets `contractEnabled` to 0 and emits an event. Only callable by DisablerAccess.\"},\"exit(address,uint256)\":{\"details\":\"Converts token amount to 18-decimal WAD precision, decreases the SafeEngine\\u2019s collateral balance, and      transfers tokens to the user. Ensures the amount does not cause overflow in SafeEngine.\",\"params\":{\"amt\":\"Amount of collateral to withdraw [in token\\u2019s decimal precision].\",\"usr\":\"Address to receive the collateral tokens.\"}},\"initialize(address,address,bytes32,address)\":{\"details\":\"Sets up references, enables the contract, and retrieves collateral token decimals.\",\"params\":{\"accessControlSingleton\":\"Address of the access control singleton.\",\"collateralType_\":\"Unique identifier for the collateral type.\",\"collateral_\":\"Address of the collateral token contract.\",\"safeEngine_\":\"Address of the SafeEngine contract.\"}},\"join(address,uint256)\":{\"details\":\"Converts token amount to 18-decimal WAD precision, transfers tokens from the caller, and increases the      SafeEngine\\u2019s collateral balance. Requires the contract to be enabled.\",\"params\":{\"amt\":\"Amount of collateral to deposit [in token\\u2019s decimal precision].\",\"usr\":\"Address to credit the collateral balance (Safe handler).\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"title\":\"CollateralJoinDecimals\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"collateral()\":{\"notice\":\"Reference to the external ERC20 collateral token contract.\"},\"collateralType()\":{\"notice\":\"Unique identifier for the collateral type (e.g., \\\"USDC-A\\\").\"},\"contractEnabled()\":{\"notice\":\"Flag indicating if the contract is enabled (1) or disabled (0).\"},\"decimals()\":{\"notice\":\"Number of decimals for the collateral token (less than 18).\"},\"disableContract()\":{\"notice\":\"Disables the contract, halting further operations.\"},\"exit(address,uint256)\":{\"notice\":\"Withdraws collateral tokens from the SafeEngine to a user.\"},\"initialize(address,address,bytes32,address)\":{\"notice\":\"Initializes the CollateralJoinDecimals contract with required parameters.\"},\"join(address,uint256)\":{\"notice\":\"Deposits collateral tokens into the SafeEngine for a user\\u2019s Safe.\"},\"safeEngine()\":{\"notice\":\"Reference to the SafeEngine contract for internal collateral operations.\"}},\"notice\":\"Adapter contract for depositing and withdrawing collateral tokens with fewer than 18 decimals into/from the StableUnit protocol.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/makerdao/core/adapters/CollateralJoinDecimals.sol\":\"CollateralJoinDecimals\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"contracts/exchange/contracts/periphery/contracts/access-control/SuAccessRoles.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title SuAccessRoles Library\\n * @dev SuAuthenticated and SuAccessControlSingleton need to have this constants\\n * Hierarchy:\\n *      1. DAO - can give admins and system roles\\n *      2.1. Admin - can set Alerters\\n *      2.2. System - includes Minter, Liquidation, Reward and Disabler roles, don't have access to give some roles.\\n *      3. Alerter - can send alerts and trigger rate limits, don't have access to give some roles.\\n */\\nabstract contract SuAccessRoles {\\n    bytes32 public constant ADMIN_ROLE = 0x00;\\n\\n    bytes32 public constant DAO_ROLE = keccak256(\\\"DAO_ROLE\\\");\\n\\n    bytes32 public constant ALERTER_ROLE = keccak256(\\\"ALERTER_ROLE\\\");\\n\\n    // system roles\\n    bytes32 public constant MINT_ACCESS_ROLE = keccak256(\\\"MINT_ACCESS_ROLE\\\");\\n    bytes32 public constant LIQUIDATION_ACCESS_ROLE = keccak256(\\\"LIQUIDATION_ACCESS_ROLE\\\");\\n    bytes32 public constant REWARD_ACCESS_ROLE = keccak256(\\\"REWARD_ACCESS_ROLE\\\");\\n    // bytes32 public constant SYSTEM_ROLE = keccak256(\\\"SYSTEM_ROLE\\\");\\n    bytes32 public constant DISABLER_ROLE = keccak256(\\\"DISABLER_ROLE\\\");\\n    bytes32 public constant CDP_ACCESS_ROLE = keccak256(\\\"CDP_ACCESS_ROLE\\\");\\n    bytes32 public constant VOTING_ESCROW_ROLE = keccak256(\\\"VOTING_ESCROW_ROLE\\\");\\n    bytes32 public constant PROXY_ACTIONS_ROLE = keccak256(\\\"PROXY_ACTIONS_ROLE\\\");\\n}\\n\",\"keccak256\":\"0x76c6b55446c0e7b40405cd0b642650c64a842e5dd71d5c5307f0b2def8898a1b\",\"license\":\"BSL 1.1\"},\"contracts/exchange/contracts/periphery/contracts/access-control/SuAuthenticated.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/access-control/ISuAccessControl.sol\\\";\\nimport \\\"./SuAccessRoles.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @title SuAuthenticated\\n * @dev other contracts should inherit to be authenticated.\\n * The address of SuAccessControlSingleton should be one for all contract that inherits SuAuthenticated\\n */\\nabstract contract SuAuthenticated is Initializable, SuAccessRoles, IERC165Upgradeable {\\n    ISuAccessControl public ACCESS_CONTROL_SINGLETON;\\n\\n    error OnlyDAOError();\\n    error OnlyAdminError();\\n    error OnlyAlerterError();\\n    error OnlyVaultAccessError();\\n    error OnlyLiquidationAccessError();\\n    error OnlyMintAccessError();\\n    error OnlyRewardAccessError();\\n    error OnlyDisablerAccessError();\\n    error OnlyVotingEscrowError();\\n    error OnlyProxyActionsError();\\n    error OnlyRoleError();\\n    error OnlyCDPAccessError();\\n    error BadAccessControlSingleton();\\n\\n    /**\\n     * @dev should be passed in constructor\\n     */\\n    function __suAuthenticatedInit(address _accessControlSingleton) internal onlyInitializing {\\n        ACCESS_CONTROL_SINGLETON = ISuAccessControl(_accessControlSingleton);\\n        if (\\n            _accessControlSingleton == address(0) ||\\n            !ISuAccessControl(_accessControlSingleton).supportsInterface(type(IAccessControlUpgradeable).interfaceId)\\n        ) revert BadAccessControlSingleton();\\n    }\\n\\n    /** CORE ROLES */\\n\\n    modifier onlyDAO() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(DAO_ROLE, msg.sender)) revert OnlyDAOError();\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(ADMIN_ROLE, msg.sender)) revert OnlyAdminError();\\n        _;\\n    }\\n\\n    modifier onlyAlerter() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(ALERTER_ROLE, msg.sender)) revert OnlyAlerterError();\\n        _;\\n    }\\n\\n    /** SYSTEM ROLES */\\n\\n    modifier onlyLiquidationAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(LIQUIDATION_ACCESS_ROLE, msg.sender)) revert OnlyLiquidationAccessError();\\n        _;\\n    }\\n\\n    modifier onlyMintAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(MINT_ACCESS_ROLE, msg.sender)) revert OnlyMintAccessError();\\n        _;\\n    }\\n\\n    modifier onlyRewardAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(REWARD_ACCESS_ROLE, msg.sender)) revert OnlyRewardAccessError();\\n        _;\\n    }\\n\\n    modifier onlyRewardOrAdminAccess() {\\n        if (\\n            !ACCESS_CONTROL_SINGLETON.hasRole(REWARD_ACCESS_ROLE, msg.sender) &&\\n            !ACCESS_CONTROL_SINGLETON.hasRole(ADMIN_ROLE, msg.sender)\\n        ) revert OnlyRewardAccessError();\\n        _;\\n    }\\n\\n    // @notice This modifier check if user/contract have access to \\\"disable\\\" contracts.\\n    // All main contracts in our lending protocol have disableContract() method that stops contracts main functions.\\n    modifier onlyDisablerAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(DISABLER_ROLE, msg.sender)) revert OnlyDisablerAccessError();\\n        _;\\n    }\\n\\n    modifier onlyCDPAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(CDP_ACCESS_ROLE, msg.sender)) revert OnlyCDPAccessError();\\n        _;\\n    }\\n\\n    modifier onlyVotingEscrow() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(VOTING_ESCROW_ROLE, msg.sender)) revert OnlyVotingEscrowError();\\n        _;\\n    }\\n\\n    modifier onlyProxyActions() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(PROXY_ACTIONS_ROLE, msg.sender)) revert OnlyProxyActionsError();\\n        _;\\n    }\\n\\n    // syntax sugar under ACCESS_CONTROL_SINGLETON\\n    modifier onlyRole(bytes32 role) {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(role, msg.sender)) revert OnlyRoleError();\\n        _;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return ACCESS_CONTROL_SINGLETON.supportsInterface(interfaceId);\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcfde5118b09a0dd37d9b4d3c34459b2e2650f59f247ddb9b116733b03ad80d21\",\"license\":\"BSL 1.1\"},\"contracts/exchange/contracts/periphery/contracts/interfaces/access-control/ISuAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\nimport \\\"../../access-control/SuAccessRoles.sol\\\";\\n\\n/**\\n * @notice Access control for contracts\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n **/\\ninterface ISuAccessControl is IAccessControlUpgradeable, IERC165Upgradeable {\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\\n}\\n\",\"keccak256\":\"0x25724ac502fd6418ccd38273b276de4b2fdecd023d723c5d80c9f0a27c407bcd\",\"license\":\"MIT\"},\"contracts/makerdao/core/adapters/CollateralJoinDecimals.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/ICollateralJoin.sol\\\";\\nimport \\\"../../interfaces/ISafeEngine.sol\\\";\\nimport \\\"../../../exchange/contracts/periphery/contracts/access-control/SuAuthenticated.sol\\\";\\n\\n// CHANGED: In CollateralJoin (GemJoin) I only added events.\\n// Added SuAuthenticated instead of authorizedAccounts\\n\\n/**\\n * @title CollateralJoinDecimals\\n * @notice Adapter contract for depositing and withdrawing collateral tokens with fewer than 18 decimals into/from the StableUnit protocol.\\n * @dev Bridges external ERC20 collateral tokens with the SafeEngine\\u2019s internal collateral balances, converting token amounts\\n *      to 18-decimal WAD precision for SafeEngine compatibility. Handles token transfers and SafeEngine balance updates\\n *      for Safe operations. This contract is a fork of MakerDAO\\u2019s GemJoin5.sol, adapted for StableUnit with added events\\n *      and SuAuthenticated access control.\\n * @custom:usage\\n * - **Initialization**: Deploy with access control, SafeEngine, collateral type, and collateral token addresses.\\n *   ```solidity\\n *   CollateralJoinDecimals collateralJoin = new CollateralJoinDecimals(accessControl, safeEngine, \\\"USDC-A\\\", collateralToken);\\n *   ```\\n * - **Deposit Collateral**: Join collateral tokens into a Safe.\\n *   ```solidity\\n *   collateralJoin.join(user, amount);\\n *   ```\\n * - **Withdraw Collateral**: Exit collateral tokens from a Safe.\\n *   ```solidity\\n *   collateralJoin.exit(user, amount);\\n *   ```\\n * - **Disabling**: Disable the contract to halt operations.\\n *   ```solidity\\n *   collateralJoin.disableContract();\\n *   ```\\n * @custom:security Only authorized accounts (DisablerAccess) can disable the contract. Token transfers require user\\n *                 approval, and SafeEngine enforces balance updates. The contract adjusts amounts for tokens with\\n *                 decimals less than 18.\\n * @custom:changes Renamed from GemJoin5.sol to CollateralJoinDecimals.sol. Added `Join` and `Exit` events. Replaced\\n *                 MakerDAO\\u2019s authorizedAccounts with SuAuthenticated for access control.\\n * @custom:events Emits `Join`, `Exit`, and `DisableContract` for state changes and operations.\\n */\\ncontract CollateralJoinDecimals is ICollateralJoin, SuAuthenticated {\\n    /// @notice Reference to the SafeEngine contract for internal collateral operations.\\n    ISafeEngine public safeEngine;\\n    /// @notice Unique identifier for the collateral type (e.g., \\\"USDC-A\\\").\\n    bytes32 public collateralType;\\n    /// @notice Reference to the external ERC20 collateral token contract.\\n    IERC20Metadata public collateral;      // Actual collateral token contract\\n    /// @notice Number of decimals for the collateral token (less than 18).\\n    uint public decimals;        // How many decimals the collateral token has\\n\\n    /**\\n     * @notice Initializes the CollateralJoinDecimals contract with required parameters.\\n     * @dev Sets up references, enables the contract, and retrieves collateral token decimals.\\n     * @param accessControlSingleton Address of the access control singleton.\\n     * @param safeEngine_ Address of the SafeEngine contract.\\n     * @param collateralType_ Unique identifier for the collateral type.\\n     * @param collateral_ Address of the collateral token contract.\\n     */\\n    function initialize(address accessControlSingleton, address safeEngine_, bytes32 collateralType_, address collateral_)\\n        public initializer {\\n\\n        __suAuthenticatedInit(accessControlSingleton);\\n        contractEnabled = 1; // Enable contract operations\\n        safeEngine = ISafeEngine(safeEngine_); // Initialize SafeEngine reference\\n        collateralType = collateralType_; // Set collateral type identifier\\n        collateral = IERC20Metadata(collateral_); // Initialize collateral token reference\\n        decimals = collateral.decimals(); // Retrieve token decimals\\n    }\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @notice Flag indicating if the contract is enabled (1) or disabled (0).\\n    uint public contractEnabled;\\n\\n    /**\\n     * @notice Disables the contract, halting further operations.\\n     * @dev Sets `contractEnabled` to 0 and emits an event. Only callable by DisablerAccess.\\n     */\\n    function disableContract() external onlyDisablerAccess {\\n        contractEnabled = 0; // Disable contract\\n        emit DisableContract(); // Notify external systems\\n    }\\n\\n    /**\\n     * @notice Deposits collateral tokens into the SafeEngine for a user\\u2019s Safe.\\n     * @dev Converts token amount to 18-decimal WAD precision, transfers tokens from the caller, and increases the\\n     *      SafeEngine\\u2019s collateral balance. Requires the contract to be enabled.\\n     * @param usr Address to credit the collateral balance (Safe handler).\\n     * @param amt Amount of collateral to deposit [in token\\u2019s decimal precision].\\n     */\\n    function join(address usr, uint amt) external {\\n        require(contractEnabled == 1, \\\"CollateralJoin/not-contractEnabled\\\"); // Ensure contract is enabled\\n        uint wad = amt * (10 ** (18 - decimals)); // Convert to 18-decimal WAD precision\\n        require(int(wad) >= 0, \\\"CollateralJoin/overflow\\\"); // Prevent negative amounts\\n        safeEngine.modifyCollateralBalance(collateralType, usr, int(wad)); // Increase SafeEngine balance\\n        require(collateral.transferFrom(msg.sender, address(this), amt), \\\"CollateralJoin/failed-transfer\\\"); // Transfer tokens\\n        emit Join(usr, amt); // Log operation\\n    }\\n\\n    /**\\n     * @notice Withdraws collateral tokens from the SafeEngine to a user.\\n     * @dev Converts token amount to 18-decimal WAD precision, decreases the SafeEngine\\u2019s collateral balance, and\\n     *      transfers tokens to the user. Ensures the amount does not cause overflow in SafeEngine.\\n     * @param usr Address to receive the collateral tokens.\\n     * @param amt Amount of collateral to withdraw [in token\\u2019s decimal precision].\\n     */\\n    function exit(address usr, uint amt) external {\\n        uint wad = amt * (10 ** (18 - decimals)); // Convert to 18-decimal WAD precision\\n        require(wad <= 2 ** 255, \\\"CollateralJoin/overflow\\\"); // Prevent overflow in SafeEngine\\n        safeEngine.modifyCollateralBalance(collateralType, msg.sender, -int(wad)); // Decrease SafeEngine balance\\n        require(collateral.transfer(usr, amt), \\\"CollateralJoin/failed-transfer\\\"); // Transfer tokens\\n        emit Exit(usr, amt); // Log operation\\n    }\\n}\",\"keccak256\":\"0x1035e78e499416e581bf31f7fa84b4c95a195ca0d77c5152ccc8324992646594\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/makerdao/interfaces/ICollateralJoin.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {IDisable} from \\\"./IDisable.sol\\\";\\n\\n/**\\n * @title ITaxCollector\\n **/\\ninterface ICollateralJoin is IDisable {\\n\\n    /* ===================== EVENTS ===================== */\\n\\n    event Join(address indexed usr, uint256 wad);\\n    event Exit(address indexed usr, uint256 wad);\\n\\n    /* ====================== VARS ===================== */\\n    function decimals() external returns (uint);\\n    function collateral() external view returns(IERC20Metadata);\\n\\n    /* ==================== METHODS ==================== */\\n\\n    /**\\n    * @notice Join collateral in the system\\n    * @param usr Account from which we transferFrom collateral and add it in the system\\n    * @param wad Amount of collateral to transfer in the system (represented as a number with 18 decimals)\\n    **/\\n    function join(address usr, uint wad) external;\\n\\n    /**\\n    * @notice Exit collateral from the system\\n    * @param usr Account to which we transfer the collateral\\n    * @param wad Amount of collateral to transfer to 'account' (represented as a number with 18 decimals)\\n    **/\\n    function exit(address usr, uint wad) external;\\n}\\n\",\"keccak256\":\"0xb276834f1935ca409ecca5542ef257f9b68e1e91c53b9bdc6b73f0db63210c07\",\"license\":\"UNLICENSED\"},\"contracts/makerdao/interfaces/IDisable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\ninterface IDisable {\\n    event DisableContract();\\n\\n    function disableContract() external;\\n}\\n\",\"keccak256\":\"0xcf4b5ac43556af77a174aa3a3a9b51c4fc89b933ef875797650542bf686b8405\",\"license\":\"UNLICENSED\"},\"contracts/makerdao/interfaces/ISafeEngine.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// TODO: check how to operate with license and use one for all contracts\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IDisable.sol\\\";\\n\\n/**\\n * @title SafeEngine\\n * @notice The single source of truth for the Maker Protocol. It contains the accounting system of the core Vault,\\n * Internal StablePro balances, and collateral state. It houses the public interface for Vault management,\\n * allowing safe(= CDP or Vault) owners to adjust their Vault state balances. It also contains the public interface\\n * for Vault fungibility, allowing safe (Vault) owners to transfer, split, and merge Vaults.\\n * Excluding these interfaces, SAFEEngine is accessed through trusted smart contract modules.\\n **/\\ninterface ISafeEngine is IDisable {\\n    /* ==================== METHODS ==================== */\\n\\n    // --- Data ---\\n    struct CollateralType {\\n        uint256 debtAmount;        // Total debt issued for this specific collateral type                          [wad]\\n        uint256 accumulatedRate;   // Accumulator for interest accrued on this collateral type                     [ray]\\n        uint256 debtCeiling;       // Maximum amount of debt that can be generated with this collateral type       [rad]\\n        uint256 debtFloor;         // Minimum amount of debt that must be generated by a CDP using this collateral [rad]\\n        uint256 safetyPrice;       // Floor price at which a CDP is allowed to generate debt                       [ray]\\n        uint256 liquidationRatio;  // Liquidation ratio to calculate safety price                                  [ray]\\n        address collateralAddress; // Address of collateral\\n        uint256 safetyPriceBlockNumber; // Block when safetyPrice was updated\\n    }\\n    struct SAFE {\\n        uint256 lockedCollateral; // Total amount of collateral locked in a SAFE/CDP  [wad]\\n        uint256 generatedDebt;    // Total amount of debt generated by a SAFE/CDP     [wad]\\n    }\\n\\n    // --- VARS ---\\n\\n    function safes(bytes32, address) external view returns (uint, uint);\\n\\n    function collateralTypes(bytes32) external view returns (\\n        uint256 debtAmount,       // [wad]\\n        uint256 accumulatedRate,  // [ray]\\n        uint256 debtCeiling,      // [rad]\\n        uint256 debtFloor,        // [rad]\\n        uint256 safetyPrice,      // [ray]\\n        uint256 liquidationRatio, // [ray]\\n        address collateralAddress,\\n        uint256 safetyPriceBlockNumber\\n);\\n\\n    function tokenCollateral(bytes32, address) external view returns (uint256);\\n\\n    function coinBalance(address) external view returns (uint256);\\n\\n    function debtBalance(address) external view returns (uint256);\\n\\n    function cdpRights(address, address) external view returns (uint256);\\n\\n    function globalDebtCeiling() external view returns (uint256);\\n\\n    function globalDebt() external view returns (uint256);\\n\\n    // --- Auth ---\\n    /**\\n     * @notice Allow an address to modify your CDP.\\n     * For example coinAdapter should be able to modify your CDP to withdraw all correctly.\\n     * @param usr Account to give CDP permissions to\\n     */\\n    function approveSAFEModification(address usr) external;\\n\\n    /**\\n     * @notice Deny an address the rights to modify your CDP\\n     * @param usr Account to give CDP permissions to\\n     */\\n    function denySAFEModification(address usr) external;\\n\\n    // --- Administration ---\\n\\n    function initializeCollateralType(bytes32 collateralType, address collateralAddress) external;\\n\\n    /**\\n     * @notice Method to modify some global variables\\n     * @param what - name of variable we want to change\\n     * @param data - new value of this variable\\n     */\\n    function modifyParameters(bytes32 what, uint data) external;\\n    /**\\n     * @notice Method to modify values in struct of collateralTypes\\n     * @param collateralType - collateral type we want to modify (collateralTypes[collateralType])\\n     * @param what - name of variable in struct we want to change\\n     * @param data - new value of this variable\\n     */\\n    function modifyParameters(bytes32 collateralType, bytes32 what, uint data) external;\\n\\n    // --- Fungibility ---\\n    function modifyCollateralBalance(bytes32 collateralType, address usr, int256 wad) external;\\n    function transferCollateral(bytes32 collateralType, address src, address dst, uint256 wad) external;\\n    function transferInternalCoins(address src, address dst, uint256 rad) external;\\n\\n    // --- SafetyPrice Manipulation ---\\n    /**\\n     * @notice Method to update safetyPrice, it's called each time, when function need actual safetyPrice\\n     * @param collateralType - safetyPrice's collateral type we want to update\\n     */\\n    function updateSafetyPrice(bytes32 collateralType) external;\\n\\n    // --- CDP Manipulation ---\\n    /**\\n     * @notice Add/remove collateral or put back/generate more debt in a CDP\\n     * @param collateralType Type of collateral to withdraw/deposit in and from the CDP\\n     * @param cdp Target CDP\\n     * @param collateralSource Account we take collateral from/put collateral into\\n     * @param debtDestination Account from which we credit/debit coins and debt\\n     * @param deltaCollateral Amount of collateral added/extract from the CDP\\n     * @param deltaDebt Amount of debt to generate/repay\\n     */\\n    function modifySAFECollateralization(\\n        bytes32 collateralType,\\n        address cdp,\\n        address collateralSource,\\n        address debtDestination,\\n        int deltaCollateral,\\n        int deltaDebt\\n    ) external;\\n\\n    // --- CDP Fungibility ---\\n    /**\\n     * @notice Transfer collateral and/or debt between CDPs\\n     * @param collateralType Collateral type transferred between CDPs\\n     * @param src Source CDP\\n     * @param dst Destination CDP\\n     * @param deltaCollateral Amount of collateral to take/add into src and give/take from dst\\n     * @param deltaDebt Amount of debt to take/add into src and give/take from dst\\n     */\\n    function transferSAFECollateralAndDebt(\\n        bytes32 collateralType,\\n        address src,\\n        address dst,\\n        int deltaCollateral,\\n        int deltaDebt\\n    ) external;\\n\\n    // --- CDP Confiscation ---\\n    /**\\n     * @notice Normally used by the LiquidationEngine in order to confiscate collateral and\\n       debt from a CDP and give them to someone else\\n     * @param collateralType Collateral type the CDP has locked inside\\n     * @param cdp Target CDP\\n     * @param collateralCounterparty Who we take/give collateral to\\n     * @param debtCounterparty Who we take/give debt to\\n     * @param deltaCollateral Amount of collateral taken/added into the CDP\\n     * @param deltaDebt Amount of debt taken/added into the CDP\\n     */\\n    function confiscateSAFECollateralAndDebt(\\n        bytes32 collateralType,\\n        address cdp,\\n        address collateralCounterparty,\\n        address debtCounterparty,\\n        int deltaCollateral,\\n        int deltaDebt\\n    ) external;\\n\\n    // --- Settlement ---\\n    /**\\n     * @notice Nullify an amount of coins with an equal amount of debt\\n     * @param rad Amount of debt & coins to destroy (expressed as a number with 45 decimals)\\n     */\\n    function settleDebt(uint rad) external;\\n\\n    /**\\n     * @notice Usually called by CoinSavingsAccount in order to create unbacked debt\\n     * @param debtDestination Usually AccountingEngine that can settle decreaseSoldAmount with surplus\\n     * @param coinDestination Usually CoinSavingsAccount who passes the new coins to depositors\\n     * @param rad Amount of debt to create (expressed as a number with 45 decimals)\\n     */\\n    function createUnbackedDebt(address debtDestination, address coinDestination, uint rad) external;\\n\\n    // --- Rates ---\\n    /**\\n     * @notice Usually called by TaxCollector in order to accrue interest on a specific collateral type\\n     * @param collateralType Collateral type we accrue interest for\\n     * @param surplusDst Destination for amount of surplus created by applying the interest rate\\n       to debt created by CDPs with 'collateralType'\\n     * @param accumulatedRate Multiplier applied to the debtAmount in order to calculate the surplus\\n     */\\n    function updateAccumulatedRate(bytes32 collateralType, address surplusDst, int accumulatedRate) external;\\n}\\n\",\"keccak256\":\"0x005803105e8f4777342c15159835863376d16f95f909489af8c58894931530bf\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608080604052346100c1576000549060ff8260081c1661006f575060ff80821603610034575b604051610d7190816100c78239f35b60ff90811916176000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160ff8152a138610025565b62461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b6064820152608490fd5b600080fdfe608060408181526004908136101561001657600080fd5b600092833560e01c90816301ffc9a714610b225750806303ee9f2214610af6578063313ce56714610ad75780633b4da69f1461091f57806341b3a0d914610900578063438280dd146108c557806367aea3131461089c57806371d0fb411461086157806375b238fc14610846578063894ba833146107805780638e5313e014610745578063a31ee5b014610449578063b38234f31461040e578063bd5f5be6146103d3578063d0e8fa8214610398578063d2351cee1461036f578063d8dfeb4514610346578063dc97e84e1461030b578063e824600f146102ec578063e9c26518146102ad5763ef693bed1461010b57600080fd5b346102a957806003193601126102a957610123610bb7565b9060243591603654601203601281116102965761014261014891610c31565b84610c55565b600160ff1b61015981831115610c68565b6033546034546001600160a01b03939184169282146102835790829189933b1561027f576101a492898580948a5196879586948593632508c12f60e11b855285039133918501610cae565b03925af180156102755761025d575b50508060446020926035541693888651958694859363a9059cbb60e01b855216809a8401528860248401525af1908115610253579161021e7f22d324652c93739755cf4581508b60875ebdd78c20c0cff5cf8e23452b29963194926020948891610226575b50610ccf565b51908152a280f35b6102469150853d811161024c575b61023e8183610bf6565b810190610c19565b38610218565b503d610234565b82513d87823e3d90fd5b61026690610bcd565b6102715785386101b3565b8580fd5b85513d84823e3d90fd5b8380fd5b634e487b7160e01b895260118852602489fd5b634e487b7160e01b865260118552602486fd5b8280fd5b8382346102e857816003193601126102e857602090517f3b5d4cc60d3ec3516ee8ae083bd60934f6eb2a6c54b1229985c41bfb092b26038152f35b5080fd5b8382346102e857816003193601126102e8576020906034549051908152f35b8382346102e857816003193601126102e857602090517f9a9aef7c1247d5fc769b0185c052913e39673da29a880317dfd20ebf86f26a498152f35b8382346102e857816003193601126102e85760355490516001600160a01b039091168152602090f35b8382346102e857816003193601126102e85760209051600080516020610d1c8339815191528152f35b8382346102e857816003193601126102e857602090517f76d0567582f23e1e9d7a13eeba60f9aea9d69b8da87ca27a8bf3698b35c653db8152f35b8382346102e857816003193601126102e857602090517f4f14c8366fa999817edc9f29824eb88a00cc31225e2156f399da4bc91049eb108152f35b8382346102e857816003193601126102e857602090517fd83f5343da19b478b15a140c301a868be9e02603958f38fbd822b9d5c0a289168152f35b5090346102a95760803660031901126102a957610464610bb7565b916001600160a01b039160243583811690819003610740576064358481168091036107405786549260ff92838560081c161594858096610734575b801561071e575b156106c45760ff1981166001178a55856106b3575b50885496848860081c161561065c5762010000600160b01b0360108a901b1662010000600160b01b0319891681178b55981680159081156105f8575b506105e9576001603755603380546001600160a01b031990811690921790556044356034556035805491821684179055855163313ce56760e01b8152926020928492909183918c16175afa9081156105df5787916105a1575b501660365561055d578380f35b610100600160b01b0319909116909117825551600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a13880808380f35b90506020813d82116105d7575b816105bb60209383610bf6565b810103126105d3575181811681036105d35738610550565b8680fd5b3d91506105ae565b84513d89823e3d90fd5b5084516384d942fd60e01b8152fd5b87516301ffc9a760e01b8152637965db0b60e01b858201529150602090829060249082905afa908115610652578a91610634575b5015386104f7565b61064c915060203d811161024c5761023e8183610bf6565b3861062c565b87513d8c823e3d90fd5b865162461bcd60e51b8152602081850152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b61ffff1916610101178955386104bb565b865162461bcd60e51b8152602081850152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b1580156104a657506001858216146104a6565b5060018582161061049f565b600080fd5b8382346102e857816003193601126102e857602090517fe453bacb314e78dcd5192e6b1a2b1f0e7c76e92f6b7e429a6a90f04e39db3b768152f35b50346102a957826003193601126102a95782548151632474521560e21b8152600080516020610d1c83398151915284820152336024820152906020908290604490829060101c6001600160a01b03165afa90811561083c57849161081e575b50156108115782806037557f2d4b4ecff7bd7503135271925520a2f6c0d98c9473ffc1a1e72c92502f51b25e8180a180f35b5163bb0684b760e01b8152fd5b610836915060203d811161024c5761023e8183610bf6565b386107df565b82513d86823e3d90fd5b8382346102e857816003193601126102e85751908152602090f35b8382346102e857816003193601126102e857602090517f880a91047114272656e533301261260c75e4d11543ac7303d6fe4204579ec7278152f35b8382346102e857816003193601126102e85760335490516001600160a01b039091168152602090f35b8382346102e857816003193601126102e857602090517f39f61ca2a1a28fee144218173ec637b649a353e4026b2738c673800e5bf1437b8152f35b8382346102e857816003193601126102e8576020906037549051908152f35b5090346102a957816003193601126102a957610939610bb7565b60243592600160375403610a8a5760365460120360128111610a775761096161096791610c31565b85610c55565b9261097486851215610c68565b6033546034546001600160a01b039590918891908716803b156102a95786836109b295885196879586948593632508c12f60e11b85528b8501610cae565b03925af18015610a6d57610a5b575b50602086916064866035541691855194859384926323b872dd60e01b845233908401523060248401528a60448401525af1908115610a515791610a30602094927fb4e09949657f21548b58afe74e7b86cd2295da5ff1598ae1e5faecb1cf19ca9596948991610a3a5750610ccf565b519485521692a280f35b6102469150863d811161024c5761023e8183610bf6565b82513d88823e3d90fd5b95610a67602097610bcd565b956109c1565b83513d89823e3d90fd5b634e487b7160e01b865260118452602486fd5b5162461bcd60e51b8152602081840152602260248201527f436f6c6c61746572616c4a6f696e2f6e6f742d636f6e7472616374456e61626c604482015261195960f21b6064820152608490fd5b8382346102e857816003193601126102e8576020906036549051908152f35b8382346102e857816003193601126102e8579054905160109190911c6001600160a01b03168152602090f35b9290503461027f57602036600319011261027f57803563ffffffff60e01b8116809103610bb35784546301ffc9a760e01b8552918401526020908390602490829060101c6001600160a01b03165afa918215610ba95760209392610b8a575b50519015158152f35b610ba2919250833d811161024c5761023e8183610bf6565b9038610b81565b81513d85823e3d90fd5b8480fd5b600435906001600160a01b038216820361074057565b6001600160401b038111610be057604052565b634e487b7160e01b600052604160045260246000fd5b601f909101601f19168101906001600160401b03821190821017610be057604052565b90816020910312610740575180151581036107405790565b604d8111610c3f57600a0a90565b634e487b7160e01b600052601160045260246000fd5b81810292918115918404141715610c3f57565b15610c6f57565b60405162461bcd60e51b8152602060048201526017602482015276436f6c6c61746572616c4a6f696e2f6f766572666c6f7760481b6044820152606490fd5b9081526001600160a01b039091166020820152604081019190915260600190565b15610cd657565b60405162461bcd60e51b815260206004820152601e60248201527f436f6c6c61746572616c4a6f696e2f6661696c65642d7472616e7366657200006044820152606490fdfeb0fdd1623e42dbffda4acd8bd643e1cb69f00f0e83abeaa8150ee42cf0fd105ea2646970667358221220c6a70a0a308de64fb818339a506f272fdd67e4d3bc26848459fcb905db2cb69064736f6c63430008110033",
  "deployedBytecode": "0x608060408181526004908136101561001657600080fd5b600092833560e01c90816301ffc9a714610b225750806303ee9f2214610af6578063313ce56714610ad75780633b4da69f1461091f57806341b3a0d914610900578063438280dd146108c557806367aea3131461089c57806371d0fb411461086157806375b238fc14610846578063894ba833146107805780638e5313e014610745578063a31ee5b014610449578063b38234f31461040e578063bd5f5be6146103d3578063d0e8fa8214610398578063d2351cee1461036f578063d8dfeb4514610346578063dc97e84e1461030b578063e824600f146102ec578063e9c26518146102ad5763ef693bed1461010b57600080fd5b346102a957806003193601126102a957610123610bb7565b9060243591603654601203601281116102965761014261014891610c31565b84610c55565b600160ff1b61015981831115610c68565b6033546034546001600160a01b03939184169282146102835790829189933b1561027f576101a492898580948a5196879586948593632508c12f60e11b855285039133918501610cae565b03925af180156102755761025d575b50508060446020926035541693888651958694859363a9059cbb60e01b855216809a8401528860248401525af1908115610253579161021e7f22d324652c93739755cf4581508b60875ebdd78c20c0cff5cf8e23452b29963194926020948891610226575b50610ccf565b51908152a280f35b6102469150853d811161024c575b61023e8183610bf6565b810190610c19565b38610218565b503d610234565b82513d87823e3d90fd5b61026690610bcd565b6102715785386101b3565b8580fd5b85513d84823e3d90fd5b8380fd5b634e487b7160e01b895260118852602489fd5b634e487b7160e01b865260118552602486fd5b8280fd5b8382346102e857816003193601126102e857602090517f3b5d4cc60d3ec3516ee8ae083bd60934f6eb2a6c54b1229985c41bfb092b26038152f35b5080fd5b8382346102e857816003193601126102e8576020906034549051908152f35b8382346102e857816003193601126102e857602090517f9a9aef7c1247d5fc769b0185c052913e39673da29a880317dfd20ebf86f26a498152f35b8382346102e857816003193601126102e85760355490516001600160a01b039091168152602090f35b8382346102e857816003193601126102e85760209051600080516020610d1c8339815191528152f35b8382346102e857816003193601126102e857602090517f76d0567582f23e1e9d7a13eeba60f9aea9d69b8da87ca27a8bf3698b35c653db8152f35b8382346102e857816003193601126102e857602090517f4f14c8366fa999817edc9f29824eb88a00cc31225e2156f399da4bc91049eb108152f35b8382346102e857816003193601126102e857602090517fd83f5343da19b478b15a140c301a868be9e02603958f38fbd822b9d5c0a289168152f35b5090346102a95760803660031901126102a957610464610bb7565b916001600160a01b039160243583811690819003610740576064358481168091036107405786549260ff92838560081c161594858096610734575b801561071e575b156106c45760ff1981166001178a55856106b3575b50885496848860081c161561065c5762010000600160b01b0360108a901b1662010000600160b01b0319891681178b55981680159081156105f8575b506105e9576001603755603380546001600160a01b031990811690921790556044356034556035805491821684179055855163313ce56760e01b8152926020928492909183918c16175afa9081156105df5787916105a1575b501660365561055d578380f35b610100600160b01b0319909116909117825551600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a13880808380f35b90506020813d82116105d7575b816105bb60209383610bf6565b810103126105d3575181811681036105d35738610550565b8680fd5b3d91506105ae565b84513d89823e3d90fd5b5084516384d942fd60e01b8152fd5b87516301ffc9a760e01b8152637965db0b60e01b858201529150602090829060249082905afa908115610652578a91610634575b5015386104f7565b61064c915060203d811161024c5761023e8183610bf6565b3861062c565b87513d8c823e3d90fd5b865162461bcd60e51b8152602081850152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b61ffff1916610101178955386104bb565b865162461bcd60e51b8152602081850152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b1580156104a657506001858216146104a6565b5060018582161061049f565b600080fd5b8382346102e857816003193601126102e857602090517fe453bacb314e78dcd5192e6b1a2b1f0e7c76e92f6b7e429a6a90f04e39db3b768152f35b50346102a957826003193601126102a95782548151632474521560e21b8152600080516020610d1c83398151915284820152336024820152906020908290604490829060101c6001600160a01b03165afa90811561083c57849161081e575b50156108115782806037557f2d4b4ecff7bd7503135271925520a2f6c0d98c9473ffc1a1e72c92502f51b25e8180a180f35b5163bb0684b760e01b8152fd5b610836915060203d811161024c5761023e8183610bf6565b386107df565b82513d86823e3d90fd5b8382346102e857816003193601126102e85751908152602090f35b8382346102e857816003193601126102e857602090517f880a91047114272656e533301261260c75e4d11543ac7303d6fe4204579ec7278152f35b8382346102e857816003193601126102e85760335490516001600160a01b039091168152602090f35b8382346102e857816003193601126102e857602090517f39f61ca2a1a28fee144218173ec637b649a353e4026b2738c673800e5bf1437b8152f35b8382346102e857816003193601126102e8576020906037549051908152f35b5090346102a957816003193601126102a957610939610bb7565b60243592600160375403610a8a5760365460120360128111610a775761096161096791610c31565b85610c55565b9261097486851215610c68565b6033546034546001600160a01b039590918891908716803b156102a95786836109b295885196879586948593632508c12f60e11b85528b8501610cae565b03925af18015610a6d57610a5b575b50602086916064866035541691855194859384926323b872dd60e01b845233908401523060248401528a60448401525af1908115610a515791610a30602094927fb4e09949657f21548b58afe74e7b86cd2295da5ff1598ae1e5faecb1cf19ca9596948991610a3a5750610ccf565b519485521692a280f35b6102469150863d811161024c5761023e8183610bf6565b82513d88823e3d90fd5b95610a67602097610bcd565b956109c1565b83513d89823e3d90fd5b634e487b7160e01b865260118452602486fd5b5162461bcd60e51b8152602081840152602260248201527f436f6c6c61746572616c4a6f696e2f6e6f742d636f6e7472616374456e61626c604482015261195960f21b6064820152608490fd5b8382346102e857816003193601126102e8576020906036549051908152f35b8382346102e857816003193601126102e8579054905160109190911c6001600160a01b03168152602090f35b9290503461027f57602036600319011261027f57803563ffffffff60e01b8116809103610bb35784546301ffc9a760e01b8552918401526020908390602490829060101c6001600160a01b03165afa918215610ba95760209392610b8a575b50519015158152f35b610ba2919250833d811161024c5761023e8183610bf6565b9038610b81565b81513d85823e3d90fd5b8480fd5b600435906001600160a01b038216820361074057565b6001600160401b038111610be057604052565b634e487b7160e01b600052604160045260246000fd5b601f909101601f19168101906001600160401b03821190821017610be057604052565b90816020910312610740575180151581036107405790565b604d8111610c3f57600a0a90565b634e487b7160e01b600052601160045260246000fd5b81810292918115918404141715610c3f57565b15610c6f57565b60405162461bcd60e51b8152602060048201526017602482015276436f6c6c61746572616c4a6f696e2f6f766572666c6f7760481b6044820152606490fd5b9081526001600160a01b039091166020820152604081019190915260600190565b15610cd657565b60405162461bcd60e51b815260206004820152601e60248201527f436f6c6c61746572616c4a6f696e2f6661696c65642d7472616e7366657200006044820152606490fdfeb0fdd1623e42dbffda4acd8bd643e1cb69f00f0e83abeaa8150ee42cf0fd105ea2646970667358221220c6a70a0a308de64fb818339a506f272fdd67e4d3bc26848459fcb905db2cb69064736f6c63430008110033",
  "devdoc": {
    "custom:changes": "Renamed from GemJoin5.sol to CollateralJoinDecimals.sol. Added `Join` and `Exit` events. Replaced                 MakerDAO’s authorizedAccounts with SuAuthenticated for access control.",
    "custom:events": "Emits `Join`, `Exit`, and `DisableContract` for state changes and operations.",
    "custom:security": "Only authorized accounts (DisablerAccess) can disable the contract. Token transfers require user                 approval, and SafeEngine enforces balance updates. The contract adjusts amounts for tokens with                 decimals less than 18.",
    "custom:usage": "- **Initialization**: Deploy with access control, SafeEngine, collateral type, and collateral token addresses.   ```solidity   CollateralJoinDecimals collateralJoin = new CollateralJoinDecimals(accessControl, safeEngine, \"USDC-A\", collateralToken);   ``` - **Deposit Collateral**: Join collateral tokens into a Safe.   ```solidity   collateralJoin.join(user, amount);   ``` - **Withdraw Collateral**: Exit collateral tokens from a Safe.   ```solidity   collateralJoin.exit(user, amount);   ``` - **Disabling**: Disable the contract to halt operations.   ```solidity   collateralJoin.disableContract();   ```",
    "details": "Bridges external ERC20 collateral tokens with the SafeEngine’s internal collateral balances, converting token amounts      to 18-decimal WAD precision for SafeEngine compatibility. Handles token transfers and SafeEngine balance updates      for Safe operations. This contract is a fork of MakerDAO’s GemJoin5.sol, adapted for StableUnit with added events      and SuAuthenticated access control.",
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "disableContract()": {
        "details": "Sets `contractEnabled` to 0 and emits an event. Only callable by DisablerAccess."
      },
      "exit(address,uint256)": {
        "details": "Converts token amount to 18-decimal WAD precision, decreases the SafeEngine’s collateral balance, and      transfers tokens to the user. Ensures the amount does not cause overflow in SafeEngine.",
        "params": {
          "amt": "Amount of collateral to withdraw [in token’s decimal precision].",
          "usr": "Address to receive the collateral tokens."
        }
      },
      "initialize(address,address,bytes32,address)": {
        "details": "Sets up references, enables the contract, and retrieves collateral token decimals.",
        "params": {
          "accessControlSingleton": "Address of the access control singleton.",
          "collateralType_": "Unique identifier for the collateral type.",
          "collateral_": "Address of the collateral token contract.",
          "safeEngine_": "Address of the SafeEngine contract."
        }
      },
      "join(address,uint256)": {
        "details": "Converts token amount to 18-decimal WAD precision, transfers tokens from the caller, and increases the      SafeEngine’s collateral balance. Requires the contract to be enabled.",
        "params": {
          "amt": "Amount of collateral to deposit [in token’s decimal precision].",
          "usr": "Address to credit the collateral balance (Safe handler)."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      }
    },
    "title": "CollateralJoinDecimals",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "collateral()": {
        "notice": "Reference to the external ERC20 collateral token contract."
      },
      "collateralType()": {
        "notice": "Unique identifier for the collateral type (e.g., \"USDC-A\")."
      },
      "contractEnabled()": {
        "notice": "Flag indicating if the contract is enabled (1) or disabled (0)."
      },
      "decimals()": {
        "notice": "Number of decimals for the collateral token (less than 18)."
      },
      "disableContract()": {
        "notice": "Disables the contract, halting further operations."
      },
      "exit(address,uint256)": {
        "notice": "Withdraws collateral tokens from the SafeEngine to a user."
      },
      "initialize(address,address,bytes32,address)": {
        "notice": "Initializes the CollateralJoinDecimals contract with required parameters."
      },
      "join(address,uint256)": {
        "notice": "Deposits collateral tokens into the SafeEngine for a user’s Safe."
      },
      "safeEngine()": {
        "notice": "Reference to the SafeEngine contract for internal collateral operations."
      }
    },
    "notice": "Adapter contract for depositing and withdrawing collateral tokens with fewer than 18 decimals into/from the StableUnit protocol.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1226,
        "contract": "contracts/makerdao/core/adapters/CollateralJoinDecimals.sol:CollateralJoinDecimals",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 1229,
        "contract": "contracts/makerdao/core/adapters/CollateralJoinDecimals.sol:CollateralJoinDecimals",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 24747,
        "contract": "contracts/makerdao/core/adapters/CollateralJoinDecimals.sol:CollateralJoinDecimals",
        "label": "ACCESS_CONTROL_SINGLETON",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(ISuAccessControl)31989"
      },
      {
        "astId": 25018,
        "contract": "contracts/makerdao/core/adapters/CollateralJoinDecimals.sol:CollateralJoinDecimals",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 49345,
        "contract": "contracts/makerdao/core/adapters/CollateralJoinDecimals.sol:CollateralJoinDecimals",
        "label": "safeEngine",
        "offset": 0,
        "slot": "51",
        "type": "t_contract(ISafeEngine)53684"
      },
      {
        "astId": 49348,
        "contract": "contracts/makerdao/core/adapters/CollateralJoinDecimals.sol:CollateralJoinDecimals",
        "label": "collateralType",
        "offset": 0,
        "slot": "52",
        "type": "t_bytes32"
      },
      {
        "astId": 49352,
        "contract": "contracts/makerdao/core/adapters/CollateralJoinDecimals.sol:CollateralJoinDecimals",
        "label": "collateral",
        "offset": 0,
        "slot": "53",
        "type": "t_contract(IERC20Metadata)6943"
      },
      {
        "astId": 49355,
        "contract": "contracts/makerdao/core/adapters/CollateralJoinDecimals.sol:CollateralJoinDecimals",
        "label": "decimals",
        "offset": 0,
        "slot": "54",
        "type": "t_uint256"
      },
      {
        "astId": 49411,
        "contract": "contracts/makerdao/core/adapters/CollateralJoinDecimals.sol:CollateralJoinDecimals",
        "label": "contractEnabled",
        "offset": 0,
        "slot": "55",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20Metadata)6943": {
        "encoding": "inplace",
        "label": "contract IERC20Metadata",
        "numberOfBytes": "20"
      },
      "t_contract(ISafeEngine)53684": {
        "encoding": "inplace",
        "label": "contract ISafeEngine",
        "numberOfBytes": "20"
      },
      "t_contract(ISuAccessControl)31989": {
        "encoding": "inplace",
        "label": "contract ISuAccessControl",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}