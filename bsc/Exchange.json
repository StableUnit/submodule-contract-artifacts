{
  "address": "0xF93985F158aDfF2De975Cf68b91eE1678cFB5281",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracleAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_topStakersAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "BadOutAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CallbackError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "orderToken2buy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "inToken",
          "type": "address"
        }
      ],
      "name": "IncorrectToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidDiscountType",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTokens",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "IsNotStaker",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "IsNotTopStaker",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IsNotWhitelisted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaxDiscountTooHigh",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoStakersAvailable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughReturnValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAdminError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "OrderExist",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "OrderNotExist",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "OrderNotForThisStaker",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SmallAmountLeft",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UserIsNotBeneficiary",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroPriceError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroRecipient",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "DustThresholdChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "LPToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "orderIds",
          "type": "uint256[]"
        }
      ],
      "name": "LpOrdersAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMaxDiscountPercent",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxDiscountPercent",
          "type": "uint256"
        }
      ],
      "name": "MaxDiscountPercentChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "OrderAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "OrderCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "OrderFilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "OrderFilledPartially",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "PriceCurveChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isWhitelisted",
          "type": "bool"
        }
      ],
      "name": "WhitelistUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DISCOUNT_TYPE_AGGRESSIVE",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DISCOUNT_TYPE_CONSERVATIVE",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DISCOUNT_TYPE_MIDDLE",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ORACLE",
      "outputs": [
        {
          "internalType": "contract ISuOracleAggregator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOP_STAKERS",
      "outputs": [
        {
          "internalType": "contract ITopStakers",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token2sell",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount2sell",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token2buy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "discountType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "collateralJoin",
          "type": "address"
        }
      ],
      "name": "addOrder",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "cancelOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dustThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "fillOrderAsFlashLoan",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "outAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inAmount",
          "type": "uint256"
        }
      ],
      "name": "fillOrderSimple",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "outAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "getAllOrders",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token2sell",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "token2buy",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "beneficiary",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "caller",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amountLeft",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token2buyAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint64",
                  "name": "creationTimestamp",
                  "type": "uint64"
                },
                {
                  "internalType": "uint8",
                  "name": "discountType",
                  "type": "uint8"
                }
              ],
              "internalType": "struct Order",
              "name": "order",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "orderId",
              "type": "uint256"
            }
          ],
          "internalType": "struct OrderWithId[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "getAssignedStaker",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inAmount",
          "type": "uint256"
        }
      ],
      "name": "getExpectedOrderOutcome",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "outAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "getOrder",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token2sell",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token2buy",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "caller",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountLeft",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "token2buyAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "creationTimestamp",
              "type": "uint64"
            },
            {
              "internalType": "uint8",
              "name": "discountType",
              "type": "uint8"
            }
          ],
          "internalType": "struct Order",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOrdersCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxDiscountPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "orders",
      "outputs": [
        {
          "internalType": "address",
          "name": "token2sell",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token2buy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountLeft",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "token2buyAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "creationTimestamp",
          "type": "uint64"
        },
        {
          "internalType": "uint8",
          "name": "discountType",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "priceCurve",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newThreshold",
          "type": "uint256"
        }
      ],
      "name": "setDustThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMaxDiscountPercent",
          "type": "uint256"
        }
      ],
      "name": "setMaxDiscountPercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "discountType",
          "type": "uint8"
        },
        {
          "internalType": "uint256[2]",
          "name": "newPriceCurve",
          "type": "uint256[2]"
        }
      ],
      "name": "setPriceCurve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isWhitelisted",
          "type": "bool"
        }
      ],
      "name": "updateWhitelistUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userWhitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xad296c463b2cb660081e1e171a1544ca402e557e954ddc8819e16b79e2da0943",
  "receipt": {
    "to": null,
    "from": "0xbd39bed6F15Ea5D1eF198Fcbb53285c7CCccbBe4",
    "contractAddress": "0xF93985F158aDfF2De975Cf68b91eE1678cFB5281",
    "transactionIndex": 38,
    "gasUsed": "2546824",
    "logsBloom": "0x
    "blockHash": "0x137dc62d059c73b3e818c70498bd585f45f71ff01a3943abd2e8558c62d75bc0",
    "transactionHash": "0xad296c463b2cb660081e1e171a1544ca402e557e954ddc8819e16b79e2da0943",
    "logs": [
      {
        "transactionIndex": 38,
        "blockNumber": 55172496,
        "transactionHash": "0xad296c463b2cb660081e1e171a1544ca402e557e954ddc8819e16b79e2da0943",
        "address": "0xF93985F158aDfF2De975Cf68b91eE1678cFB5281",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000bd39bed6f15ea5d1ef198fcbb53285c7ccccbbe4"
        ],
        "data": "0x",
        "logIndex": 82,
        "blockHash": "0x137dc62d059c73b3e818c70498bd585f45f71ff01a3943abd2e8558c62d75bc0"
      }
    ],
    "blockNumber": 55172496,
    "cumulativeGasUsed": "6008457",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xe401de5a85973139Fb260a194Da8226d6776DB22",
    "0xAD3B57b8520125dB9E50388e882DBD5C101a2885"
  ],
  "numDeployments": 1,
  "solcInputHash": "8f84b6f1e4072e92a972e80f9a9e23c6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_topStakersAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BadOutAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallbackError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"orderToken2buy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inToken\",\"type\":\"address\"}],\"name\":\"IncorrectToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDiscountType\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokens\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"IsNotStaker\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"IsNotTopStaker\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IsNotWhitelisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxDiscountTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoStakersAvailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughReturnValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAdminError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"OrderExist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"OrderNotExist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"OrderNotForThisStaker\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SmallAmountLeft\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UserIsNotBeneficiary\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroPriceError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroRecipient\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"DustThresholdChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"LPToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"orderIds\",\"type\":\"uint256[]\"}],\"name\":\"LpOrdersAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxDiscountPercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxDiscountPercent\",\"type\":\"uint256\"}],\"name\":\"MaxDiscountPercentChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"OrderAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"OrderCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"OrderFilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"OrderFilledPartially\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PriceCurveChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isWhitelisted\",\"type\":\"bool\"}],\"name\":\"WhitelistUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DISCOUNT_TYPE_AGGRESSIVE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DISCOUNT_TYPE_CONSERVATIVE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DISCOUNT_TYPE_MIDDLE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ORACLE\",\"outputs\":[{\"internalType\":\"contract ISuOracleAggregator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOP_STAKERS\",\"outputs\":[{\"internalType\":\"contract ITopStakers\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token2sell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount2sell\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token2buy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"discountType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"collateralJoin\",\"type\":\"address\"}],\"name\":\"addOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dustThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"fillOrderAsFlashLoan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"outAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"}],\"name\":\"fillOrderSimple\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"outAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"getAllOrders\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token2sell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token2buy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountLeft\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token2buyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"creationTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"discountType\",\"type\":\"uint8\"}],\"internalType\":\"struct Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderWithId[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"getAssignedStaker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"}],\"name\":\"getExpectedOrderOutcome\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"outAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"getOrder\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token2sell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token2buy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountLeft\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token2buyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"creationTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"discountType\",\"type\":\"uint8\"}],\"internalType\":\"struct Order\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOrdersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDiscountPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token2sell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token2buy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountLeft\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token2buyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"creationTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"discountType\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"priceCurve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"setDustThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxDiscountPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxDiscountPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"discountType\",\"type\":\"uint8\"},{\"internalType\":\"uint256[2]\",\"name\":\"newPriceCurve\",\"type\":\"uint256[2]\"}],\"name\":\"setPriceCurve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isWhitelisted\",\"type\":\"bool\"}],\"name\":\"updateWhitelistUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See IExchange interface for full details.\",\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"addOrder(address,uint256,address,address,uint8,address)\":{\"details\":\"This swap is async, because depends on how arbitrage bots will fill this order. Emits OrderAdded() event. Before addOrder user needs to approve token2sell for exchange contract\",\"params\":{\"amount2sell\":\"- Amount of {token2sell} to sell\",\"beneficiary\":\"- Address that will receive {token2buy} after filling order.\",\"collateralJoin\":\"- address of collateral adapter*\",\"discountType\":\"- Speed of decreasing swap price. { 0 - aggressive, 1 - middle, 2 - conservative }\",\"token2buy\":\"- Address of token to buy\",\"token2sell\":\"- Address of token to sell\"}},\"cancelOrder(uint256)\":{\"params\":{\"orderId\":\"- Id of order to cancel.*\"}},\"fillOrderAsFlashLoan(uint256,uint256,bytes)\":{\"details\":\"Caller contract receive orders {token2sell} and after that his stableunitFillOrderCallback() is called. At the end of thi callback contract should send some amount of another token back to Exchange contract.We don't need slippage protection because: 1. Prices are determined by Oracle, not DEX market conditions 2. Output amount is calculated deterministically at execution time\",\"params\":{\"data\":\"- encoded data to pass to callback function*\",\"inAmount\":\"- Amount of {token2sell} to receive\",\"orderId\":\"- Id of order to fill.\"}},\"fillOrderSimple(uint256,uint256)\":{\"details\":\"Caller contract send tokens and receive another tokens depends on the order\",\"params\":{\"inAmount\":\"- Amount of {token2sell} to receive*\",\"orderId\":\"- Id of order to fill.\"}},\"getAssignedStaker(uint256)\":{\"params\":{\"orderId\":\"The ID of the order to check\"},\"returns\":{\"_0\":\"assignedStaker The address of the assigned staker, or zero address if:         - Order doesn't exist         - Order is past grace period         - No top stakers available\"}},\"getExpectedOrderOutcome(uint256,uint256)\":{\"returns\":{\"outAmount\":\"The amount of outcome that caller will receive if he will fill {orderId} with {inAmount} of {token2sell}*\"}},\"getOrder(uint256)\":{\"returns\":{\"_0\":\"Order with id = {orderId}*\"}},\"getOrdersCount()\":{\"returns\":{\"_0\":\"The amount of not full-filled orders*\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setDustThreshold(uint256)\":{\"params\":{\"newThreshold\":\"- new dust threshold*\"}},\"setMaxDiscountPercent(uint256)\":{\"details\":\"This function can only be called by the contract owner\",\"params\":{\"newMaxDiscountPercent\":\"New maximum discount value (in percentage points).        Value is bounded to 90% to prevent configuration mistakes\"}},\"setPriceCurve(uint8,uint256[2])\":{\"params\":{\"discountType\":\"- discount type to change\",\"newPriceCurve\":\"- parameters of formula*\"}},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"},\"updateWhitelistUser(address,bool)\":{\"params\":{\"isWhitelisted\":\"- bool, false if we want to remove, true if we want to add user to whitelist.*\",\"user\":\"- address of user\"}}},\"title\":\"Exchange\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addOrder(address,uint256,address,address,uint8,address)\":{\"notice\":\"Add order to swap {token2sell} to {token2buy}.\"},\"cancelOrder(uint256)\":{\"notice\":\"Only user who place order or who is beneficiary can cancelOrder();\"},\"dustThreshold()\":{\"notice\":\"Amount of minimum amountLeft in order. It's measured in fiat. For example dustThreshold = 100 * 1e18 => it's 100 USD*\"},\"emergencyWithdraw(address,address,uint256)\":{\"notice\":\"Emergency withdraw in case contract have some tokens, that can be transferred by default functions*\"},\"fillOrderAsFlashLoan(uint256,uint256,bytes)\":{\"notice\":\"Fill order with flash-loan like logic\"},\"fillOrderSimple(uint256,uint256)\":{\"notice\":\"Fill order without a flash-loan\"},\"getAllOrders(uint256,uint256)\":{\"notice\":\"This method can be deleted after we'll add GraphQL to watch orders*\"},\"getAssignedStaker(uint256)\":{\"notice\":\"Returns the address of the staker assigned to an order during grace period\"},\"priceCurve(uint8,uint256)\":{\"notice\":\"priceCurve is like price_t = price_0 * (1 - t/priceCurve[0]) - priceCurve[1] from timePassed = 0 to t priceCurve decrease linear, but after t (when discount is 20%), it's constant*\"},\"setDustThreshold(uint256)\":{\"notice\":\"Function to update dust threshold\"},\"setMaxDiscountPercent(uint256)\":{\"notice\":\"Updates the maximum allowed discount percentage for all order types\"},\"setPriceCurve(uint8,uint256[2])\":{\"notice\":\"Function to update price curve - how fast {token2sell} price will decrease/increase\"},\"updateWhitelistUser(address,bool)\":{\"notice\":\"Add or remove user from whitelist\"}},\"notice\":\"Main contract of Exchange module. Here we can add order or fill it to get profit.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/exchange/contracts/exchange/Exchange.sol\":\"Exchange\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable2Step.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n}\\n\",\"keccak256\":\"0xde231558366826d7cb61725af8147965a61c53b77a352cc8c9af38fc5a92ac3c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/exchange/contracts/exchange/Exchange.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\n\\nimport \\\"../interfaces/IExchange.sol\\\";\\nimport \\\"../interfaces/ITopStakers.sol\\\";\\nimport \\\"../interfaces/IExchangeCallback.sol\\\";\\nimport \\\"../periphery/contracts/interfaces/oracle/ISuOracleAggregator.sol\\\";\\n\\ninterface ICollateralJoin {\\n    function join(address usr, uint wad) external;\\n    function exit(address usr, uint wad) external;\\n}\\n\\n/**\\n * @title Exchange\\n * @notice Main contract of Exchange module. Here we can add order or fill it to get profit.\\n * @dev See IExchange interface for full details.\\n */\\ncontract Exchange is ReentrancyGuard, IExchange, Ownable2Step {\\n    using SafeERC20 for IERC20;\\n\\n    // We don't use enum for DiscountType to save gas\\n    uint8 public constant DISCOUNT_TYPE_AGGRESSIVE = 0;\\n    uint8 public constant DISCOUNT_TYPE_MIDDLE = 1;\\n    uint8 public constant DISCOUNT_TYPE_CONSERVATIVE = 2;\\n    ISuOracleAggregator public ORACLE;\\n    ITopStakers public TOP_STAKERS;\\n    address public admin;\\n    mapping (address => bool) public userWhitelist;\\n    mapping(address => uint256) private userNonces; // To track user nonces for addOrder\\n    /**\\n     * @notice Amount of minimum amountLeft in order. It's measured in fiat.\\n     * For example dustThreshold = 100 * 1e18 => it's 100 USD\\n    **/\\n    uint256 public dustThreshold;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    mapping (uint256 => Order) public orders;\\n    EnumerableSet.UintSet private orderIdSet;\\n    /**\\n     * @notice priceCurve is like price_t = price_0 * (1 - t/priceCurve[0]) - priceCurve[1]\\n     * from timePassed = 0 to t priceCurve decrease linear, but after t (when discount is 20%), it's constant\\n    **/\\n    mapping (uint8 => uint256[2]) public priceCurve;\\n    uint256 public maxDiscountPercent;\\n\\n    constructor(address _oracleAddress, address _topStakersAddress) {\\n        // -20% for 3min/10h/24h\\n        priceCurve[DISCOUNT_TYPE_AGGRESSIVE] = [180 * 5, 0];\\n        priceCurve[DISCOUNT_TYPE_MIDDLE] = [36_000 * 5, 0];\\n        priceCurve[DISCOUNT_TYPE_CONSERVATIVE] = [86_400 * 5, 0];\\n        dustThreshold = 100 * 1e18;\\n        maxDiscountPercent = 20;\\n\\n        ORACLE = ISuOracleAggregator(_oracleAddress);\\n        TOP_STAKERS = ITopStakers(_topStakersAddress);\\n    }\\n\\n    function setMaxDiscountPercent(uint256 newMaxDiscountPercent) external onlyOwner {\\n        // Sanity check - don't allow more than 90% discount to prevent mistakes\\n        if (newMaxDiscountPercent > 90) revert MaxDiscountTooHigh();\\n        uint256 oldMaxDiscount = maxDiscountPercent;\\n        maxDiscountPercent = newMaxDiscountPercent;\\n        emit MaxDiscountPercentChanged(oldMaxDiscount, newMaxDiscountPercent);\\n    }\\n\\n    function isValidDiscountType(uint8 discountType) internal view returns (bool) {\\n        return discountType <= DISCOUNT_TYPE_CONSERVATIVE;\\n    }\\n\\n    function updateWhitelistUser(address user, bool isWhitelisted) external onlyOwner {\\n        userWhitelist[user] = isWhitelisted;\\n        emit WhitelistUpdated(user, isWhitelisted);\\n    }\\n\\n    function setPriceCurve(uint8 discountType, uint256[2] calldata newPriceCurve) external onlyOwner {\\n        if (!isValidDiscountType(discountType)) revert InvalidDiscountType();\\n        priceCurve[discountType] = newPriceCurve;\\n        emit PriceCurveChanged();\\n    }\\n\\n    function setDustThreshold(uint256 newThreshold) external onlyOwner {\\n        uint256 oldThreshold = dustThreshold;\\n        dustThreshold = newThreshold;\\n        emit DustThresholdChanged(oldThreshold, newThreshold);\\n    }\\n\\n    function addOrder(\\n        address token2sell,\\n        uint256 amount2sell,\\n        address token2buy,\\n        address beneficiary,\\n        uint8 discountType,\\n        address collateralJoin // or store this map in exchange module\\n    ) external nonReentrant returns (uint256 orderId) {\\n        if (userWhitelist[msg.sender] == false) revert IsNotWhitelisted();\\n        if (!isValidDiscountType(discountType)) revert InvalidDiscountType();\\n        if (token2sell == address(0) || token2buy == address(0) || beneficiary == address(0)) revert InvalidAddress();\\n        if (token2sell == token2buy) revert InvalidTokens();\\n        if (amount2sell == 0) revert InvalidAmount();\\n\\n        // @notice The Exchange Module works with explicit real ERC20 tokens balance, so we need to acquire them.\\n        // If the caller is a user/contract that has some tokens in the protocol,\\n        // they need to get them out of the protocol via exit.\\n        // Otherwise, the user/contract just needs to transfer tokens to the Exchange Module.\\n        if (collateralJoin == address(0)) {\\n            IERC20(token2sell).safeTransferFrom(msg.sender, address(this), amount2sell);\\n        } else {\\n            ICollateralJoin(collateralJoin).exit(address(this), amount2sell);\\n        }\\n\\n        // Get current nonce and increment for next time\\n        uint256 nonce = userNonces[msg.sender]++;\\n        // Generate a unique order ID using the nonce\\n        orderId = uint256(\\n            keccak256(\\n                abi.encodePacked(block.number, msg.sender, token2sell, amount2sell, token2buy, nonce)\\n            )\\n        );\\n\\n        // With the nonce, this should never happen, but add a check just to be safe\\n        if (orders[orderId].creationTimestamp != 0) revert OrderExist(orderId);\\n\\n        // Create the order\\n        orders[orderId] = Order(\\n            token2sell,\\n            token2buy,\\n            beneficiary,\\n            msg.sender,\\n            amount2sell,\\n            0, // token2buyAmount at start should be 0\\n            uint64(block.timestamp),\\n            discountType\\n        );\\n        EnumerableSet.add(orderIdSet, orderId);\\n        emit OrderAdded(orderId);\\n    }\\n\\n    function cancelOrder(uint256 orderId) external nonReentrant {\\n        Order memory order = orders[orderId];\\n\\n        if (order.creationTimestamp == 0) revert OrderNotExist(orderId);\\n        if (msg.sender != order.beneficiary && msg.sender != order.caller) revert UserIsNotBeneficiary();\\n\\n        IERC20(order.token2sell).safeTransfer(msg.sender, order.amountLeft);\\n        delete orders[orderId];\\n        EnumerableSet.remove(orderIdSet, orderId);\\n\\n        emit OrderCanceled(orderId);\\n    }\\n\\n    /**\\n     * @notice Return discounted price of token depending on passed time and type of discount\\n     * @dev orderPrice = x * 10^18 * 10^(18 - decimals) like in Oracle\\n    **/\\n    function getDiscountedTokenPrice(\\n        uint256 token2sellPrice,\\n        uint256 timePassed,\\n        uint8 discountType\\n    ) internal view returns (uint256) {\\n        uint256 curveDiv = priceCurve[discountType][0];\\n        uint256 curveSub = priceCurve[discountType][1];\\n        uint256 minPrice = token2sellPrice * (100 - maxDiscountPercent) / 100;\\n        if (timePassed > curveDiv) {\\n            // if maxDiscountPercent = 20 => we need to get here 80% of token2sellPrice\\n            return minPrice;\\n        }\\n\\n        uint256 calculatedPrice = token2sellPrice - token2sellPrice * timePassed / curveDiv - curveSub;\\n\\n        return calculatedPrice > minPrice ? calculatedPrice : minPrice;\\n    }\\n\\n    function getExpectedOrderOutcome(uint256 orderId, uint256 inAmount) external view returns (uint256 outAmount) {\\n        Order memory order = orders[orderId];\\n        uint256 timePassed;\\n        unchecked {\\n            timePassed = block.timestamp - order.creationTimestamp;\\n        }\\n\\n        // Let's assume that: inAmount = x * 10^d1, discountedTokenPrice = p1 * 10^(36 - d1), priceB = p2 * 10^(36 - d2)\\n        // Then outAmount = x * 10^d1 * p1 * 10^(36 - d1) / (p2 * 10^(36 - d2)) = (x * p1 / p2) * 10^(d2)\\n        uint256 discountedTokenPrice = getDiscountedTokenPrice(\\n            ORACLE.getFiatPrice1e18(order.token2sell),\\n            timePassed,\\n            order.discountType\\n        );\\n        uint256 priceB = ORACLE.getFiatPrice1e18(order.token2buy);\\n        if (priceB == 0) revert ZeroPriceError();\\n        outAmount = inAmount * discountedTokenPrice / priceB;\\n    }\\n\\n    function _validateOrderAndCalculateAmount(\\n        uint256 orderId, uint256 inAmount, Order storage order\\n    ) internal returns (uint256 outAmount, uint256 newInAmount) {\\n        newInAmount = inAmount;\\n\\n        if (order.creationTimestamp == 0) revert OrderNotExist(orderId);\\n\\n        uint256 timePassed;\\n        unchecked {\\n            timePassed = block.timestamp - order.creationTimestamp;\\n        }\\n\\n        // grace period\\n        if (timePassed <= 60) {\\n            // check that msg.sender is in TopStaker list + it's on position {orderId % x}\\n            uint256 numberOfStakers = TOP_STAKERS.getTopStakersLength();\\n            if (numberOfStakers == 0) revert NoStakersAvailable();\\n            if (!TOP_STAKERS.isTopStaker(msg.sender)) revert IsNotTopStaker(msg.sender);\\n\\n            // Deterministically assign order to a staker\\n            address assignedStaker = TOP_STAKERS.getStakerAt(orderId % numberOfStakers);\\n            if (msg.sender != assignedStaker) {\\n                revert OrderNotForThisStaker(orderId, msg.sender);\\n            }\\n        } else {\\n            address user = msg.sender;\\n            if (!TOP_STAKERS.isStaker(user)) revert IsNotStaker(user);\\n        }\\n\\n        if (newInAmount > order.amountLeft) {\\n            newInAmount = order.amountLeft;\\n        }\\n\\n        // the same as in getExpectedOrderOutcome, let's think token2sell have decimals = d1, token2buy = d2\\n        // discountedTokenPrice decimals = 36 - d1, newInAmount decimals = d1\\n        uint256 discountedTokenPrice = getDiscountedTokenPrice(\\n            ORACLE.getSafeFiatPrice1e18(order.token2sell),\\n            timePassed,\\n            order.discountType\\n        );\\n        uint256 priceB = ORACLE.getSafeFiatPrice1e18(order.token2buy); // decimals is 36 - d2\\n        // outAmount decimals = d1 + 36 - d1 - (36 - d2) = d2\\n        outAmount = newInAmount * discountedTokenPrice / priceB;\\n\\n        if (outAmount == 0) {\\n            revert BadOutAmount();\\n        }\\n\\n        order.token2buyAmount += outAmount;\\n        order.amountLeft -= newInAmount;\\n\\n        // If in order some token amount left after updating it\\n        // then it should have value > dustThreshold, counted in fiat\\n        if (order.amountLeft > 0 && discountedTokenPrice * order.amountLeft / 1e18 <= dustThreshold) {\\n            revert SmallAmountLeft();\\n        }\\n\\n        return (outAmount, newInAmount);\\n    }\\n\\n    function _cleanupOrder(uint256 orderId) internal {\\n        if (orders[orderId].amountLeft == 0) {\\n            delete orders[orderId];\\n            EnumerableSet.remove(orderIdSet, orderId);\\n            emit OrderFilled(orderId);\\n        } else {\\n            emit OrderFilledPartially(orderId);\\n        }\\n    }\\n\\n    function fillOrderAsFlashLoan(\\n        uint256 orderId,\\n        uint256 inAmount,\\n        bytes memory data\\n    ) external nonReentrant returns (uint256 outAmount) {\\n        Order storage order = orders[orderId];\\n        uint256 newInAmount;\\n        (outAmount, newInAmount) = _validateOrderAndCalculateAmount(orderId, inAmount, order);\\n\\n        address token2sell = order.token2sell;\\n        address token2buy = order.token2buy;\\n\\n        IERC20(token2sell).safeTransfer(msg.sender, newInAmount);\\n\\n        uint256 balanceBefore = IERC20(token2buy).balanceOf(address(this));\\n        if(!IExchangeCallback(msg.sender).stableunitFillOrderCallback(token2buy, outAmount, msg.sender, data)) {\\n            revert CallbackError();\\n        }\\n        uint256 balanceAfter = IERC20(token2buy).balanceOf(address(this));\\n        if (balanceAfter < balanceBefore + outAmount) revert NotEnoughReturnValue();\\n\\n        IERC20(token2buy).safeTransfer(order.beneficiary, outAmount);\\n\\n        _cleanupOrder(orderId);\\n    }\\n\\n    function fillOrderSimple(uint256 orderId, uint256 inAmount) external nonReentrant returns (uint256 outAmount) {\\n        Order storage order = orders[orderId];\\n        uint256 newInAmount;\\n        (outAmount, newInAmount) = _validateOrderAndCalculateAmount(orderId, inAmount, order);\\n\\n        IERC20(order.token2buy).safeTransferFrom(msg.sender, order.beneficiary, outAmount);\\n        IERC20(order.token2sell).safeTransfer(msg.sender, newInAmount);\\n\\n        _cleanupOrder(orderId);\\n    }\\n\\n    function getOrder (uint256 orderId) external view returns (Order memory) {\\n        return orders[orderId];\\n    }\\n\\n    function getOrdersCount() external view returns (uint256) {\\n        return EnumerableSet.length(orderIdSet);\\n    }\\n\\n    /**\\n     * @notice This method can be deleted after we'll add GraphQL to watch orders\\n    **/\\n    function getAllOrders(uint256 offset, uint256 limit) external view returns (OrderWithId[] memory) {\\n        uint256[] memory orderIdValues = EnumerableSet.values(orderIdSet);\\n        uint256 totalOrders = orderIdValues.length;\\n        if (totalOrders == 0) return new OrderWithId[](0);\\n\\n        uint256 end = offset + limit > totalOrders ? totalOrders : offset + limit;\\n        uint256 len = end > offset ? end - offset : 0;\\n        OrderWithId[] memory result = new OrderWithId[](len);\\n        for (uint256 i = offset; i < end; i++) {\\n            uint256 orderId = orderIdValues[i];\\n            result[i - offset] = OrderWithId({\\n                order: orders[orderId],\\n                orderId: orderId\\n            });\\n        }\\n        return result;\\n    }\\n\\n    function getAssignedStaker(uint256 orderId) external view returns (address) {\\n        Order memory order = orders[orderId];\\n\\n        // Check if order exists and is within grace period\\n        if (order.creationTimestamp == 0) return address(0);\\n\\n        // Only return assigned staker during grace period\\n        uint256 timePassed;\\n        unchecked {\\n            timePassed = block.timestamp - order.creationTimestamp;\\n        }\\n        if (timePassed > 60) return address(0);\\n\\n        // Check if stakers exists\\n        uint256 numberOfStakers = TOP_STAKERS.getTopStakersLength();\\n        if (numberOfStakers == 0) return address(0);\\n\\n        // Calculate assigned staker using the same logic as in _validateOrderAndCalculateAmount\\n        return TOP_STAKERS.getStakerAt(orderId % numberOfStakers);\\n    }\\n\\n    function emergencyWithdraw(address token, address recipient, uint256 amount) external onlyOwner {\\n        if (recipient == address(0)) revert ZeroRecipient();\\n        IERC20(token).safeTransfer(recipient, amount);\\n        emit EmergencyWithdraw(token, recipient, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x41d1ea42cd4aeb0184fcb32bfca31907c9287ba954c46f09362b24bfff985a97\",\"license\":\"BSL 1.1\"},\"contracts/exchange/contracts/interfaces/IExchange.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\npragma solidity ^0.8.0;\\n\\nstruct Order {\\n    address token2sell;\\n    address token2buy;\\n    address beneficiary;\\n    address caller;\\n    uint256 amountLeft;\\n    uint256 token2buyAmount;\\n    uint64 creationTimestamp;\\n    uint8 discountType;\\n}\\n\\nstruct OrderWithId {\\n    Order order;\\n    uint256 orderId;\\n}\\n\\ninterface IExchange {\\n    /* ===================== ERRORS ===================== */\\n    error OnlyAdminError();\\n    error OrderExist(uint256 orderId);\\n    error OrderNotExist(uint256 orderId);\\n    error IncorrectToken(address orderToken2buy, address inToken);\\n    error SmallAmountLeft();\\n    error BadOutAmount();\\n    error UserIsNotBeneficiary();\\n    error IsNotTopStaker(address staker);\\n    error IsNotStaker(address staker);\\n    error OrderNotForThisStaker(uint256 orderId, address staker);\\n    error NotEnoughReturnValue();\\n    error CallbackError();\\n    error ZeroPriceError();\\n    error InvalidDiscountType();\\n    error InvalidAddress();\\n    error InvalidTokens();\\n    error InvalidAmount();\\n    error IsNotWhitelisted();\\n    error MaxDiscountTooHigh();\\n    error NoStakersAvailable();\\n    error ZeroRecipient();\\n\\n    /* ======================== EVENTS ========================= */\\n    event PriceCurveChanged();\\n    event OrderAdded(uint256 orderId);\\n    event OrderCanceled(uint256 orderId);\\n    event OrderFilled(uint256 orderId);\\n    event OrderFilledPartially(uint256 orderId);\\n    event LpOrdersAdded(address LPToken, uint256[] orderIds);\\n    event DustThresholdChanged(uint256 oldValue, uint256 newValue);\\n    event WhitelistUpdated(address user, bool isWhitelisted);\\n    event MaxDiscountPercentChanged(uint256 oldMaxDiscountPercent, uint256 newMaxDiscountPercent);\\n    event EmergencyWithdraw(address indexed token, address indexed recipient, uint256 amount);\\n\\n    /* ==================== MUTABLE METHODS ==================== */\\n\\n    /**\\n      * @notice Add order to swap {token2sell} to {token2buy}.\\n      * @dev This swap is async, because depends on how arbitrage bots will fill this order. Emits OrderAdded() event.\\n      * Before addOrder user needs to approve token2sell for exchange contract\\n      * @param token2sell - Address of token to sell\\n      * @param amount2sell - Amount of {token2sell} to sell\\n      * @param token2buy - Address of token to buy\\n      * @param beneficiary - Address that will receive {token2buy} after filling order.\\n      * @param discountType - Speed of decreasing swap price. { 0 - aggressive, 1 - middle, 2 - conservative }\\n      * @param collateralJoin - address of collateral adapter\\n     **/\\n    function addOrder (\\n        address token2sell,\\n        uint256 amount2sell,\\n        address token2buy,\\n        address beneficiary,\\n        uint8 discountType,\\n        address collateralJoin\\n    ) external returns (uint256);\\n\\n    /**\\n      * @notice Only user who place order or who is beneficiary can cancelOrder();\\n      * @param orderId - Id of order to cancel.\\n     **/\\n    function cancelOrder (uint256 orderId) external;\\n\\n    /**\\n      * @notice Fill order with flash-loan like logic\\n      * @dev Caller contract receive orders {token2sell} and after that his stableunitFillOrderCallback() is called.\\n      * At the end of thi callback contract should send some amount of another token back to Exchange contract.\\n      * @dev We don't need slippage protection because:\\n      * 1. Prices are determined by Oracle, not DEX market conditions\\n      * 2. Output amount is calculated deterministically at execution time\\n      * @param orderId - Id of order to fill.\\n      * @param inAmount - Amount of {token2sell} to receive\\n      * @param data - encoded data to pass to callback function\\n     **/\\n    function fillOrderAsFlashLoan (\\n        uint256 orderId,\\n        uint256 inAmount,\\n        bytes memory data\\n    ) external returns (uint256 outAmount);\\n\\n    /**\\n      * @notice Fill order without a flash-loan\\n      * @dev Caller contract send tokens and receive another tokens depends on the order\\n      * @param orderId - Id of order to fill.\\n      * @param inAmount - Amount of {token2sell} to receive\\n     **/\\n    function fillOrderSimple(uint256 orderId, uint256 inAmount) external returns (uint256 outAmount);\\n\\n    /**\\n     * @notice Updates the maximum allowed discount percentage for all order types\\n     * @dev This function can only be called by the contract owner\\n     * @param newMaxDiscountPercent New maximum discount value (in percentage points).\\n     *        Value is bounded to 90% to prevent configuration mistakes\\n     */\\n    function setMaxDiscountPercent(uint256 newMaxDiscountPercent) external;\\n\\n    /**\\n      * @notice Add or remove user from whitelist\\n      * @param user - address of user\\n      * @param isWhitelisted - bool, false if we want to remove, true if we want to add user to whitelist.\\n     **/\\n    function updateWhitelistUser(address user, bool isWhitelisted) external;\\n\\n    /**\\n      * @notice Function to update price curve - how fast {token2sell} price will decrease/increase\\n      * @param discountType - discount type to change\\n      * @param newPriceCurve - parameters of formula\\n     **/\\n    function setPriceCurve(uint8 discountType, uint256[2] calldata newPriceCurve) external;\\n\\n    /**\\n      * @notice Function to update dust threshold\\n      * @param newThreshold - new dust threshold\\n     **/\\n    function setDustThreshold(uint256 newThreshold) external;\\n\\n    /* ==================== VIEW METHODS ==================== */\\n    /**\\n      * @return The amount of outcome that caller will receive if he will fill {orderId} with {inAmount} of {token2sell}\\n     **/\\n    function getExpectedOrderOutcome (uint256 orderId, uint256 inAmount) external view returns (uint256);\\n\\n    /**\\n      * @return Order with id = {orderId}\\n     **/\\n    function getOrder (uint256 orderId) external view returns (Order memory);\\n\\n    /**\\n      * @return The amount of not full-filled orders\\n     **/\\n    function getOrdersCount () external view returns (uint256);\\n\\n    /**\\n      * @return The array of all not-filled orders. May be deleted after adding GraphQL for orderIds\\n     **/\\n    function getAllOrders (uint256 offset, uint256 limit) external view returns (OrderWithId[] memory);\\n\\n    /**\\n     * @notice Returns the address of the staker assigned to an order during grace period\\n     * @param orderId The ID of the order to check\\n     * @return assignedStaker The address of the assigned staker, or zero address if:\\n     *         - Order doesn't exist\\n     *         - Order is past grace period\\n     *         - No top stakers available\\n     */\\n    function getAssignedStaker(uint256 orderId) external view returns (address);\\n\\n    /**\\n  * @notice Emergency withdraw in case contract have some tokens, that can be transferred by default functions\\n     **/\\n    function emergencyWithdraw(address token, address recipient, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xd984d6b394172dd53590c46c8e8f6449559a2c280b44a70bec23e5c2478cb52c\",\"license\":\"BSL 1.1\"},\"contracts/exchange/contracts/interfaces/IExchangeCallback.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\npragma solidity ^0.8.0;\\n\\ninterface IExchangeCallback {\\n    /**\\n     * @notice Callback that will be called by Exchange module in fillOrderAsFlashLoan()\\n     * after sending collateral to msg.sender.\\n     * In the implementation you must pay stablecoin for Exchange contract.\\n     * @dev Any contract that calls Exchange#fillOrderAsFlashLoan must implement this interface\\n     * @param returnAsset - The address of the token that should be returned\\n     * @param amount - The amount of the {token} to return\\n     * @param initiator The address of the flashloan initiator\\n     * @return True if the execution of the operation succeeds, false otherwise\\n     */\\n    function stableunitFillOrderCallback (\\n        address returnAsset,\\n        uint256 amount,\\n        address initiator,\\n        bytes calldata params\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xbd2f7dd3ace336acbc49cb598bd6ed0874111569d79a1050b00c114125fadace\",\"license\":\"BSL 1.1\"},\"contracts/exchange/contracts/interfaces/ITopStakers.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\npragma solidity ^0.8.0;\\n\\ninterface ITopStakers {\\n    /* ===================== ERRORS ===================== */\\n    error NotStakerFound();\\n    error SubscriptionDelayError();\\n    error AmountMustBeMoreThatMinimum();\\n    error InsufficientStake(uint256 available, uint256 requested);\\n    error LockExpired();\\n    error TokensDelegated();\\n    error AlreadyInTop();\\n    error OnlyAdminError();\\n    error InvalidAddress();\\n    error OutOfBounds();\\n\\n    /* ===================== EVENTS ===================== */\\n\\n    event SubscriptionRequested(address indexed user, uint256 amount, uint256 activationTime);\\n    event TopStakersMaxCountUpdated(uint256 newTopStakersCount);\\n    event VeTokenUpdated(address _veToken);\\n    event MinStakingAmountUpdated(uint256 newAmount);\\n    event SubscriptionDelayUpdated(uint256 newDelay);\\n    event SubscriptionRemoved(address user);\\n\\n    /* ========================= VARS ========================== */\\n\\n    function maxTopStakersCount() external view returns(uint256);\\n\\n    /* ==================== MUTABLE METHODS ==================== */\\n\\n    /**\\n      * @notice Admin function to change number of top stakers\\n     **/\\n    function changeMaxTopStakersCount(uint256 newTopStakersCount) external;\\n\\n    /**\\n      * @notice Admin function to change veToken address\\n     **/\\n    function changeVeToken(address veToken) external;\\n\\n    /**\\n      * @notice Admin function to change minStakingAmount\\n     **/\\n    function changeMinStakingAmount(uint256 minStakingAmount) external;\\n\\n    /**\\n     * @notice Admin function to change subscriptionDelay\\n     **/\\n    function changeSubscriptionDelay(uint256 minStakingAmount) external;\\n\\n    /**\\n      * @notice User function to add yourself in stakers list to be able to be topStaker for liquidation\\n     **/\\n    function subscribe() external;\\n\\n    /**\\n      * @notice User function to remove yourself from stakers list\\n     **/\\n    function unsubscribe() external;\\n\\n    /* ==================== VIEW METHODS ==================== */\\n\\n    /**\\n      * @notice Returns if user is top staker or not\\n     **/\\n    function isTopStaker(address staker) external view returns(bool);\\n\\n\\n    /**\\n      * @notice Returns if user is staker with not expired stake\\n     **/\\n    function isStaker(address user) external view returns(bool);\\n\\n    /**\\n      * @notice Returns the list of users that are topStakers\\n     **/\\n    function getTopStakers() external view returns(address[] memory);\\n\\n    /**\\n      * @notice Returns the amount of subscribed users (stakers list length)\\n     **/\\n    function getTopStakersLength() external view returns(uint256);\\n\\n    /**\\n     * @notice Returns the address of staker in {index} place\\n     **/\\n    function getStakerAt(uint256 index) external view returns(address);\\n\\n    /**\\n     * @notice Returns the time left in seconds, before user can call subscribe/unsubscribe\\n     **/\\n    function getTimeUntilNextSubscribe(address user) external view returns(uint256);\\n}\",\"keccak256\":\"0x1d3506b5d5957398877d4096bde73edbcd69cdeceb4624774805f18a9d9890fe\",\"license\":\"BSL 1.1\"},\"contracts/exchange/contracts/periphery/contracts/interfaces/oracle/ISuOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\n// solhint-disable compiler-version\\npragma solidity >=0.7.6;\\n\\ninterface ISuOracle {\\n    /**\\n     * @notice WARNING! Read this description very carefully!\\n     *     function getFiatPrice1e18(address asset) returns (uint256) that:\\n     *         basicAmountOfAsset * getFiatPrice1e18(asset) / 1e18 === $$ * 1e18\\n     *     in other words, it doesn't matter what's the erc20.decimals is,\\n     *     you just multiply token balance in basic units on value from oracle and get dollar amount multiplied on 1e18.\\n     *\\n     * different assets have different deviation threshold (errors)\\n     *     for wBTC it's <= 0.5%, read more https://data.chain.link/ethereum/mainnet/crypto-usd/btc-usd\\n     *     for other asset is can be larger based on particular oracle implementation.\\n     *\\n     * examples:\\n     *     market price of btc = $30k,\\n     *     for 0.1 wBTC the unit256 amount is 0.1 * 1e18\\n     *     0.1 * 1e18 * (price1e18 / 1e18) == $3000 == uint256(3000*1e18)\\n     *     => price1e18 = 30000 * 1e18;\\n     *\\n     *     market price of usdt = $0.97,\\n     *     for 1 usdt uint256 = 1 * 1e6\\n     *     so 1*1e6 * price1e18 / 1e18 == $0.97 == uint256(0.97*1e18)\\n     *     => 1*1e6 * (price1e18 / 1e18) / (0.97*1e18)   = 1\\n     *     =>  price1e18 = 0.97 * (1e18/1e6) * 1e18\\n     *\\n     *    assume market price of wBTC = $31,503.77, oracle error = $158\\n     *\\n     *     case #1: small amount of wBTC\\n     *         we have 0.0,000,001 wBTC that is worth v = $0.00315 \\u00b1 $0.00001 = 0.00315*1e18 = 315*1e13 \\u00b1 1*1e13\\n     *         actual balance on the asset b = wBTC.balanceOf() =  0.0000001*1e18 = 1e11\\n     *         oracle should return or = oracle.getFiatPrice1e18(wBTC) <=>\\n     *         <=> b*or = v => v/b = 315*1e13 / 1e11 = 315*1e2 \\u00b1 1e2\\n     *         error = or.error * b = 1e2 * 1e11 = 1e13 => 1e13/1e18 usd = 1e-5 = 0.00001 usd\\n     *\\n     *     case #2: large amount of wBTC\\n     *         v = 2,000,000 wBTC = $31,503.77 * 2m \\u00b1 158*2m = $63,007,540,000 \\u00b1 $316,000,000 = 63,007*1e24 \\u00b1 316*1e24\\n     *         for calc convenience we increase error on 0.05 and have v = 63,000*24 \\u00b1 300*1e24 = (630 \\u00b1 3)*1e26\\n     *         b = 2*1e6 * 1e18 = 2*1e24\\n     *         or = v/b = (630 \\u00b1 3)*1e26 / 2*1e24 = 315*1e2 \\u00b1 1.5*1e2\\n     *         error = or.error * b = 1.5*100 * 2*1e24 = 3*1e26 = 3*1e8*1e18 = $300,000,000 ~ $316,000,000\\n     *\\n     *     assume the market price of USDT = $0.97 \\u00b1 $0.00485,\\n     *\\n     *     case #3: little amount of USDT\\n     *         v = USDT amount 0.005 = 0.005*(0.97 \\u00b1 0.00485) = 0.00485*1e18 \\u00b1 0.00002425*1e18 = 485*1e13 \\u00b1 3*1e13\\n     *         we rounded error up on (3000-2425)/2425 ~= +24% for calculation convenience.\\n     *         b = USDT.balanceOf() = 0.005*1e6 = 5*1e3\\n     *         b*or = v => or = v/b = (485*1e13 \\u00b1 3*1e13) / 5*1e3 = 970*1e9 \\u00b1 6*1e9\\n     *         error = 6*1e9 * 5*1e3 / 1e18 = 30*1e12/1e18 = 3*1e-5 = $0,00005\\n     *\\n     *     case #4: lot of USDT\\n     *         v = we have 100,000,000,000 USDT = $97B = 97*1e9*1e18 \\u00b1 0.5*1e9*1e18\\n     *         b = USDT.balanceOf() = 1e11*1e6 = 1e17\\n     *         or = v/b = (97*1e9*1e18 \\u00b1 0.5*1e9*1e18) / 1e17 = 970*1e9 \\u00b1 5*1e9\\n     *         error = 5*1e9 * 1e17 = 5*1e26 = 0.5 * 1e8*1e18\\n     *\\n     * @param asset - address of erc20 token contract\\n     * @return usdPrice1e18 such that asset.balanceOf() * getFiatPrice1e18(asset) / 1e18 == $$ * 1e18\\n     **/\\n    function getFiatPrice1e18(address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa56b9cc86ef5935efecc276e6a3188d518f1a99cad960083a8de35849c997687\",\"license\":\"UNLICENSED\"},\"contracts/exchange/contracts/periphery/contracts/interfaces/oracle/ISuOracleAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ISuOracle.sol\\\";\\n\\ninterface ISuOracleAggregator is ISuOracle {\\n    /* ===================== STRUCT ===================== */\\n    struct AssetLimitation {\\n        uint256 lowerBound;\\n        uint256 upperBound;\\n    }\\n\\n    /* ===================== EVENTS ===================== */\\n    event OracleLowerBoundWarning(address indexed asset, uint256 price, uint256 lowerBound);\\n    event OracleUpperBoundWarning(address indexed asset, uint256 price, uint256 upperBound);\\n\\n    event OracleLowerBoundUpdated(address asset, uint256 newBound);\\n    event OracleUpperBoundUpdated(address asset, uint256 newBound);\\n\\n    /* ===================== ERRORS ===================== */\\n    error NoOracleFound(address asset);\\n    error NoOracleImplementation();\\n    error BadOracleId();\\n    error PriceBelowLowerBound(address asset, uint256 price, uint256 bound);\\n    error PriceAboveUpperBound(address asset, uint256 price, uint256 bound);\\n\\n    /* ====================== VARS ====================== */\\n    function assetToOracle (address asset) external view returns ( uint256 );\\n    function oracleImplementations (uint256 oracleId) external view returns ( ISuOracle );\\n\\n    /* ==================== METHODS ==================== */\\n\\n    /**\\n    * @notice Like getFiatPrice1e18 from ISuOracle, but also checks bounds and emit event if there is an error.\\n    * We should call it in non-view method where we need safePrice from Oracle.\\n    * @param asset - address of asset\\n    **/\\n    function getSafeFiatPrice1e18(address asset) external returns (uint256);\\n\\n    /**\\n    * @notice Change lower bound of asset\\n    * @param asset - address of asset\\n    * @param newLowerBound - new value of lower bound\\n    **/\\n    function setLowerBound(address asset, uint256 newLowerBound) external;\\n\\n    /**\\n    * @notice Change upper bound of asset\\n    * @param asset - address of asset\\n    * @param newUpperBound - new value of upper bound\\n    **/\\n    function setUpperBound(address asset, uint256 newUpperBound) external;\\n\\n    /**\\n       * @notice assign address of oracle implementation to the oracleId\\n    * @param oracleId - number 0,1, etc to assign the oracle\\n    * @param oracleImplementation - an address with ISuOracle implementation contract\\n    **/\\n    function setOracleImplementation(uint256 oracleId, ISuOracle oracleImplementation) external;\\n\\n    /**\\n    * @notice specify what oracleId should be used for each assets. Checks that oracleId has an implementation\\n    **/\\n    function setOracleIdForAssets(address[] memory assets, uint256 oracleId) external;\\n\\n    /* ==================== VIEW METHODS ==================== */\\n    /**\\n    * @return true if oracle is set to this asset, false otherwise\\n    **/\\n    function hasPriceForAsset(address asset) external view returns(bool);\\n}\\n\",\"keccak256\":\"0xb73f938c5cb6d1295d61e94f86704c7777998ef50e0030480047fa96ce7a5535\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061016a5760003560e01c806303eaa21a1461016f57806316b313e51461018457806333461268146101ad57806338013f02146101c0578063418f2845146101d3578063511df442146101f3578063514fcac71461021457806366990b7f14610227578063715018a61461024157806371567bd71461024957806379ba5097146102515780638da5cb5b146102595780639461a96314610261578063a85c38ef14610274578063ad7e55ba1461033d578063b5b3b05114610350578063ba07fc5914610358578063d09ef2411461036b578063d0b13a621461038b578063d741b9c314610394578063d7c8ae89146103c7578063e2ed06de146103da578063e30c3978146103ed578063e63ea408146103f5578063e8462e8f14610408578063ef3391bc14610411578063f2fde38b14610424578063f582099e14610437578063f6243a041461043f578063f851a44014610452575b600080fd5b61018261017d366004612380565b610465565b005b6101976101923660046123ba565b6104de565b6040516101a491906123d3565b60405180910390f35b6101826101bb36600461240a565b6106ae565b600354610197906001600160a01b031681565b6101e66101e1366004612443565b61071a565b6040516101a491906124ce565b610206610201366004612443565b61090a565b6040519081526020016101a4565b6101826102223660046123ba565b610982565b61022f600181565b60405160ff90911681526020016101a4565b610182610b61565b61022f600081565b610182610b75565b610197610bf0565b61018261026f3660046123ba565b610bff565b6102e46102823660046123ba565b60096020526000908152604090208054600182015460028301546003840154600485015460058601546006909601546001600160a01b03958616969486169593841694939092169290916001600160401b03811690600160401b900460ff1688565b604080516001600160a01b03998a168152978916602089015295881695870195909552959092166060850152608084015260a08301526001600160401b0390921660c082015260ff90911660e0820152610100016101a4565b61018261034b3660046123ba565b610c67565b610206610cad565b600454610197906001600160a01b031681565b61037e6103793660046123ba565b610cbe565b6040516101a49190612527565b610206600d5481565b6103b76103a2366004612536565b60066020526000908152604090205460ff1681565b60405190151581526020016101a4565b6102066103d5366004612553565b610d53565b6102066103e8366004612593565b610d78565b610197610f95565b610182610403366004612656565b610fa4565b61020660085481565b61020661041f366004612697565b611039565b610182610432366004612536565b611471565b61022f600281565b61020661044d366004612443565b6114d7565b600554610197906001600160a01b031681565b61046d6116f1565b600260ff831611156104925760405163559b66cb60e01b815260040160405180910390fd5b60ff82166000908152600c602052604090206104b0908260026122b3565b506040517f2420725846887d067c9d919f20d8ac9132a4adfccb24bc414e9263830caaa8ed90600090a15050565b600081815260096020908152604080832081516101008101835281546001600160a01b039081168252600183015481169482019490945260028201548416928101929092526003810154909216606082015260048201546080820152600582015460a08201526006909101546001600160401b03811660c08301819052600160401b90910460ff1660e0830152820361057a5750600092915050565b60c08101516001600160401b03164203603c81111561059d575060009392505050565b6000600460009054906101000a90046001600160a01b03166001600160a01b031663c4e4a93b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105f2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610616919061270e565b90508060000361062b57506000949350505050565b6004546001600160a01b031663af0ec622610646838861273d565b6040518263ffffffff1660e01b815260040161066491815260200190565b602060405180830381865afa158015610681573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a59190612751565b95945050505050565b6106b66116f1565b6001600160a01b038216600081815260066020908152604091829020805460ff19168515159081179091558251938452908301527ff93f9a76c1bf3444d22400a00cb9fe990e6abe9dbb333fda48859cfee864543d91015b60405180910390a15050565b60606000610728600a611750565b80519091506000819003610771576040805160008082526020820190925290610767565b6107546122f1565b81526020019060019003908161074c5790505b5092505050610904565b60008161077e8688612784565b116107925761078d8587612784565b610794565b815b905060008682116107a65760006107b0565b6107b08783612797565b90506000816001600160401b038111156107cc576107cc61257d565b60405190808252806020026020018201604052801561080557816020015b6107f26122f1565b8152602001906001900390816107ea5790505b509050875b838110156108fc576000868281518110610826576108266127aa565b602090810291909101810151604080516000838152600985528290206101408201835280546001600160a01b0390811693830193845260018201548116606084015260028201548116608084015260038201541660a0830152600481015460c0830152600581015460e0830152600601546001600160401b038116610100830152600160401b900460ff166101208201529081529182018190529150836108cd8c85612797565b815181106108dd576108dd6127aa565b60200260200101819052505080806108f4906127c0565b91505061080a565b509450505050505b92915050565b600061091461175d565b60008381526009602052604081209061092e8585846117b6565b60028401546001850154929550909250610957916001600160a01b039081169133911686611c6b565b815461096d906001600160a01b03163383611cdc565b61097685611d00565b50506109046001600055565b61098a61175d565b600081815260096020908152604080832081516101008101835281546001600160a01b039081168252600183015481169482019490945260028201548416928101929092526003810154909216606082015260048201546080820152600582015460a08201526006909101546001600160401b03811660c08301819052600160401b90910460ff1660e0830152909103610a3f576040516373a98b6360e11b8152600481018390526024015b60405180910390fd5b80604001516001600160a01b0316336001600160a01b031614158015610a7b575080606001516001600160a01b0316336001600160a01b031614155b15610a995760405163da383fb560e01b815260040160405180910390fd5b60808101518151610ab7916001600160a01b03909116903390611cdc565b600082815260096020526040812080546001600160a01b031990811682556001820180548216905560028201805482169055600382018054909116905560048101829055600581019190915560060180546001600160481b0319169055610b1f600a83611de8565b506040518281527fc41f4ceb2938876c35e61b705e9d2f18a02c4a26ce5e049a6308a943d46851b39060200160405180910390a150610b5e6001600055565b50565b610b696116f1565b610b736000611df4565b565b3380610b7f610f95565b6001600160a01b031614610be75760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b6064820152608401610a36565b610b5e81611df4565b6001546001600160a01b031690565b610c076116f1565b605a811115610c2957604051636bb48cb160e01b815260040160405180910390fd5b600d80549082905560408051828152602081018490527f5d36795820f2de51fbfd2492d5411afd83136f6c2b63e8d75addd83a4f0fde15910161070e565b610c6f6116f1565b600880549082905560408051828152602081018490527fbc1831d2100f8fce25142262c5034292d68880bbae15b8f096994291dd58c225910161070e565b6000610cb9600a611e0d565b905090565b610cc6612311565b5060009081526009602090815260409182902082516101008101845281546001600160a01b039081168252600183015481169382019390935260028201548316938101939093526003810154909116606083015260048101546080830152600581015460a0830152600601546001600160401b03811660c0830152600160401b900460ff1660e082015290565b600c6020528160005260406000208160028110610d6f57600080fd5b01549150829050565b6000610d8261175d565b600084815260096020526040812090610d9c8686846117b6565b835460018501549295509092506001600160a01b039081169116610dc1823385611cdc565b6040516370a0823160e01b81526000906001600160a01b038316906370a0823190610df09030906004016123d3565b602060405180830381865afa158015610e0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e31919061270e565b604051633517a9e160e11b81529091503390636a2f53c290610e5d9085908a9085908d90600401612829565b6020604051808303816000875af1158015610e7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea0919061285c565b610ebd5760405163c286d75960e01b815260040160405180910390fd5b6040516370a0823160e01b81526000906001600160a01b038416906370a0823190610eec9030906004016123d3565b602060405180830381865afa158015610f09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2d919061270e565b9050610f398783612784565b811015610f595760405163395c945760e11b815260040160405180910390fd5b6002860154610f75906001600160a01b03858116911689611cdc565b610f7e8a611d00565b505050505050610f8e6001600055565b9392505050565b6002546001600160a01b031690565b610fac6116f1565b6001600160a01b038216610fd35760405163d27b444360e01b815260040160405180910390fd5b610fe76001600160a01b0384168383611cdc565b816001600160a01b0316836001600160a01b03167ff24ef89f38eadc1bde50701ad6e4d6d11a2dc24f7cf834a486991f38833285048360405161102c91815260200190565b60405180910390a3505050565b600061104361175d565b3360009081526006602052604081205460ff161515900361107757604051631033349760e31b815260040160405180910390fd5b600260ff8416111561109c5760405163559b66cb60e01b815260040160405180910390fd5b6001600160a01b03871615806110b957506001600160a01b038516155b806110cb57506001600160a01b038416155b156110e95760405163e6c4247b60e01b815260040160405180910390fd5b846001600160a01b0316876001600160a01b03160361111b576040516333910aef60e11b815260040160405180910390fd5b8560000361113c5760405163162908e360e11b815260040160405180910390fd5b6001600160a01b0382166111645761115f6001600160a01b038816333089611c6b565b6111c5565b60405163ef693bed60e01b81526001600160a01b0383169063ef693bed906111929030908a90600401612879565b600060405180830381600087803b1580156111ac57600080fd5b505af11580156111c0573d6000803e3d6000fd5b505050505b336000908152600760205260408120805490826111e1836127c0565b90915550604080514360208201526001600160601b031933606090811b8216938301939093528b831b81166054830152606882018b90529189901b9091166088820152609c810182905290915060bc0160408051601f198184030181529181528151602092830120600081815260099093529120600601549092506001600160401b03161561128657604051634b92340560e01b815260048101839052602401610a36565b604051806101000160405280896001600160a01b03168152602001876001600160a01b03168152602001866001600160a01b03168152602001336001600160a01b0316815260200188815260200160008152602001426001600160401b031681526020018560ff168152506009600084815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060608201518160030160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506080820151816004015560a0820151816005015560c08201518160060160006101000a8154816001600160401b0302191690836001600160401b0316021790555060e08201518160060160086101000a81548160ff021916908360ff160217905550905050611428600a83611e17565b506040518281527f12a866cc569301d2ff9fcbbae3decc9e0cf3fa94ddef08dd0de3e9a693fb8d199060200160405180910390a1506114676001600055565b9695505050505050565b6114796116f1565b600280546001600160a01b0319166001600160a01b03831690811790915561149f610bf0565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b600082815260096020908152604080832081516101008101835281546001600160a01b0390811680835260018401548216958301959095526002830154811682850152600380840154821660608401526004808501546080850152600585015460a08501526006909401546001600160401b03811660c08501819052600160401b90910460ff1660e085015290549451631735856760e31b8152929542919091039487946115e294919093169263b9ac2b3892611596929091016123d3565b602060405180830381865afa1580156115b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d7919061270e565b838560e00151611e23565b6003546020850151604051631735856760e31b81529293506000926001600160a01b039092169163b9ac2b389161161b916004016123d3565b602060405180830381865afa158015611638573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061165c919061270e565b90508060000361167f5760405163e1281b5d60e01b815260040160405180910390fd5b8061168a8388612892565b61169491906128a9565b979650505050505050565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b336116fa610bf0565b6001600160a01b031614610b735760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a36565b60606000610f8e83611ec0565b6002600054036117af5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610a36565b6002600055565b600681015460009083906001600160401b031682036117eb576040516373a98b6360e11b815260048101869052602401610a36565b60068301546001600160401b03164203603c81116119e5576000600460009054906101000a90046001600160a01b03166001600160a01b031663c4e4a93b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611858573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061187c919061270e565b90508060000361189f576040516340763d8d60e11b815260040160405180910390fd5b6004805460405162650fcd60e31b81526001600160a01b03909116916303287e68916118cd913391016123d3565b602060405180830381865afa1580156118ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061190e919061285c565b61192d573360405163a849de1760e01b8152600401610a3691906123d3565b6004546000906001600160a01b031663af0ec62261194b848b61273d565b6040518263ffffffff1660e01b815260040161196991815260200190565b602060405180830381865afa158015611986573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119aa9190612751565b9050336001600160a01b038216146119de57604051636d5e923560e01b815260048101899052336024820152604401610a36565b5050611a78565b60048054604051636f1e853360e01b815233926001600160a01b0390921691636f1e853391611a16918591016123d3565b602060405180830381865afa158015611a33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a57919061285c565b611a765780604051631953278360e21b8152600401610a3691906123d3565b505b8360040154821115611a8c57836004015491505b6003548454604051632a5001c960e01b8152600092611b1e926001600160a01b0391821692632a5001c992611ac59216906004016123d3565b6020604051808303816000875af1158015611ae4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b08919061270e565b60068701548490600160401b900460ff16611e23565b6003546001870154604051632a5001c960e01b81529293506000926001600160a01b0392831692632a5001c992611b5a929116906004016123d3565b6020604051808303816000875af1158015611b79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b9d919061270e565b905080611baa8386612892565b611bb491906128a9565b945084600003611bd75760405163ebda174360e01b815260040160405180910390fd5b84866005016000828254611beb9190612784565b9250508190555083866004016000828254611c069190612797565b9091555050600486015415801590611c425750600854670de0b6b3a7640000876004015484611c359190612892565b611c3f91906128a9565b11155b15611c605760405163117be23960e31b815260040160405180910390fd5b505050935093915050565b6040516001600160a01b0380851660248301528316604482015260648101829052611cd69085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611f1c565b50505050565b611cfb8363a9059cbb60e01b8484604051602401611c9f929190612879565b505050565b6000818152600960205260408120600401549003611db857600081815260096020526040812080546001600160a01b031990811682556001820180548216905560028201805482169055600382018054909116905560048101829055600581019190915560060180546001600160481b0319169055611d80600a82611de8565b506040518181527fcdf98e0235c72ad7ae8de32249da25cc98298c8f11710c55a3d58e9e7ac69f94906020015b60405180910390a150565b6040518181527fc238a2d1c485b17bfd980b5e6d0483704cd4720118eb06215758d49f85ea896390602001611dad565b6000610f8e8383611ff1565b600280546001600160a01b0319169055610b5e8161169f565b6000610904825490565b6000610f8e83836120e4565b60ff81166000908152600c602052604081208054600190910154600d548390606490611e4f9082612797565b611e599089612892565b611e6391906128a9565b905082861115611e77579250610f8e915050565b60008284611e85898b612892565b611e8f91906128a9565b611e99908a612797565b611ea39190612797565b9050818111611eb25781611eb4565b805b98975050505050505050565b606081600001805480602002602001604051908101604052809291908181526020018280548015611f1057602002820191906000526020600020905b815481526020019060010190808311611efc575b50505050509050919050565b6000611f71826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166121339092919063ffffffff16565b9050805160001480611f92575080806020019051810190611f92919061285c565b611cfb5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610a36565b600081815260018301602052604081205480156120da576000612015600183612797565b855490915060009061202990600190612797565b905081811461208e576000866000018281548110612049576120496127aa565b906000526020600020015490508087600001848154811061206c5761206c6127aa565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061209f5761209f6128bd565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610904565b6000915050610904565b600081815260018301602052604081205461212b57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610904565b506000610904565b6060612142848460008561214a565b949350505050565b6060824710156121ab5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610a36565b600080866001600160a01b031685876040516121c791906128d3565b60006040518083038185875af1925050503d8060008114612204576040519150601f19603f3d011682016040523d82523d6000602084013e612209565b606091505b5091509150611694878383876060831561228457825160000361227d576001600160a01b0385163b61227d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610a36565b5081612142565b61214283838151156122995781518083602001fd5b8060405162461bcd60e51b8152600401610a3691906128ef565b82600281019282156122e1579160200282015b828111156122e15782358255916020019190600101906122c6565b506122ed929150612355565b5090565b6040518060400160405280612304612311565b8152602001600081525090565b6040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081019190915290565b5b808211156122ed5760008155600101612356565b803560ff8116811461237b57600080fd5b919050565b6000806060838503121561239357600080fd5b61239c8361236a565b9150836060840111156123ae57600080fd5b50926020919091019150565b6000602082840312156123cc57600080fd5b5035919050565b6001600160a01b0391909116815260200190565b6001600160a01b0381168114610b5e57600080fd5b8015158114610b5e57600080fd5b6000806040838503121561241d57600080fd5b8235612428816123e7565b91506020830135612438816123fc565b809150509250929050565b6000806040838503121561245657600080fd5b50508035926020909101359150565b80516001600160a01b039081168352602080830151821690840152604080830151821690840152606080830151909116908301526080808201519083015260a0818101519083015260c0808201516001600160401b03169083015260e09081015160ff16910152565b6020808252825182820181905260009190848201906040850190845b8181101561251b5783516124ff848251612465565b85015161010084015292840192610120909201916001016124ea565b50909695505050505050565b61010081016109048284612465565b60006020828403121561254857600080fd5b8135610f8e816123e7565b6000806040838503121561256657600080fd5b61256f8361236a565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b6000806000606084860312156125a857600080fd5b833592506020840135915060408401356001600160401b03808211156125cd57600080fd5b818601915086601f8301126125e157600080fd5b8135818111156125f3576125f361257d565b604051601f8201601f19908116603f0116810190838211818310171561261b5761261b61257d565b8160405282815289602084870101111561263457600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b60008060006060848603121561266b57600080fd5b8335612676816123e7565b92506020840135612686816123e7565b929592945050506040919091013590565b60008060008060008060c087890312156126b057600080fd5b86356126bb816123e7565b95506020870135945060408701356126d2816123e7565b935060608701356126e2816123e7565b92506126f06080880161236a565b915060a0870135612700816123e7565b809150509295509295509295565b60006020828403121561272057600080fd5b5051919050565b634e487b7160e01b600052601260045260246000fd5b60008261274c5761274c612727565b500690565b60006020828403121561276357600080fd5b8151610f8e816123e7565b634e487b7160e01b600052601160045260246000fd5b808201808211156109045761090461276e565b818103818111156109045761090461276e565b634e487b7160e01b600052603260045260246000fd5b6000600182016127d2576127d261276e565b5060010190565b60005b838110156127f45781810151838201526020016127dc565b50506000910152565b600081518084526128158160208601602086016127d9565b601f01601f19169290920160200192915050565b6001600160a01b0385811682526020820185905283166040820152608060608201819052600090611467908301846127fd565b60006020828403121561286e57600080fd5b8151610f8e816123fc565b6001600160a01b03929092168252602082015260400190565b80820281158282048414176109045761090461276e565b6000826128b8576128b8612727565b500490565b634e487b7160e01b600052603160045260246000fd5b600082516128e58184602087016127d9565b9190910192915050565b602081526000610f8e60208301846127fd56fea164736f6c6343000811000a",
  "devdoc": {
    "details": "See IExchange interface for full details.",
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "addOrder(address,uint256,address,address,uint8,address)": {
        "details": "This swap is async, because depends on how arbitrage bots will fill this order. Emits OrderAdded() event. Before addOrder user needs to approve token2sell for exchange contract",
        "params": {
          "amount2sell": "- Amount of {token2sell} to sell",
          "beneficiary": "- Address that will receive {token2buy} after filling order.",
          "collateralJoin": "- address of collateral adapter*",
          "discountType": "- Speed of decreasing swap price. { 0 - aggressive, 1 - middle, 2 - conservative }",
          "token2buy": "- Address of token to buy",
          "token2sell": "- Address of token to sell"
        }
      },
      "cancelOrder(uint256)": {
        "params": {
          "orderId": "- Id of order to cancel.*"
        }
      },
      "fillOrderAsFlashLoan(uint256,uint256,bytes)": {
        "details": "Caller contract receive orders {token2sell} and after that his stableunitFillOrderCallback() is called. At the end of thi callback contract should send some amount of another token back to Exchange contract.We don't need slippage protection because: 1. Prices are determined by Oracle, not DEX market conditions 2. Output amount is calculated deterministically at execution time",
        "params": {
          "data": "- encoded data to pass to callback function*",
          "inAmount": "- Amount of {token2sell} to receive",
          "orderId": "- Id of order to fill."
        }
      },
      "fillOrderSimple(uint256,uint256)": {
        "details": "Caller contract send tokens and receive another tokens depends on the order",
        "params": {
          "inAmount": "- Amount of {token2sell} to receive*",
          "orderId": "- Id of order to fill."
        }
      },
      "getAssignedStaker(uint256)": {
        "params": {
          "orderId": "The ID of the order to check"
        },
        "returns": {
          "_0": "assignedStaker The address of the assigned staker, or zero address if:         - Order doesn't exist         - Order is past grace period         - No top stakers available"
        }
      },
      "getExpectedOrderOutcome(uint256,uint256)": {
        "returns": {
          "outAmount": "The amount of outcome that caller will receive if he will fill {orderId} with {inAmount} of {token2sell}*"
        }
      },
      "getOrder(uint256)": {
        "returns": {
          "_0": "Order with id = {orderId}*"
        }
      },
      "getOrdersCount()": {
        "returns": {
          "_0": "The amount of not full-filled orders*"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setDustThreshold(uint256)": {
        "params": {
          "newThreshold": "- new dust threshold*"
        }
      },
      "setMaxDiscountPercent(uint256)": {
        "details": "This function can only be called by the contract owner",
        "params": {
          "newMaxDiscountPercent": "New maximum discount value (in percentage points).        Value is bounded to 90% to prevent configuration mistakes"
        }
      },
      "setPriceCurve(uint8,uint256[2])": {
        "params": {
          "discountType": "- discount type to change",
          "newPriceCurve": "- parameters of formula*"
        }
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      },
      "updateWhitelistUser(address,bool)": {
        "params": {
          "isWhitelisted": "- bool, false if we want to remove, true if we want to add user to whitelist.*",
          "user": "- address of user"
        }
      }
    },
    "title": "Exchange",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addOrder(address,uint256,address,address,uint8,address)": {
        "notice": "Add order to swap {token2sell} to {token2buy}."
      },
      "cancelOrder(uint256)": {
        "notice": "Only user who place order or who is beneficiary can cancelOrder();"
      },
      "dustThreshold()": {
        "notice": "Amount of minimum amountLeft in order. It's measured in fiat. For example dustThreshold = 100 * 1e18 => it's 100 USD*"
      },
      "emergencyWithdraw(address,address,uint256)": {
        "notice": "Emergency withdraw in case contract have some tokens, that can be transferred by default functions*"
      },
      "fillOrderAsFlashLoan(uint256,uint256,bytes)": {
        "notice": "Fill order with flash-loan like logic"
      },
      "fillOrderSimple(uint256,uint256)": {
        "notice": "Fill order without a flash-loan"
      },
      "getAllOrders(uint256,uint256)": {
        "notice": "This method can be deleted after we'll add GraphQL to watch orders*"
      },
      "getAssignedStaker(uint256)": {
        "notice": "Returns the address of the staker assigned to an order during grace period"
      },
      "priceCurve(uint8,uint256)": {
        "notice": "priceCurve is like price_t = price_0 * (1 - t/priceCurve[0]) - priceCurve[1] from timePassed = 0 to t priceCurve decrease linear, but after t (when discount is 20%), it's constant*"
      },
      "setDustThreshold(uint256)": {
        "notice": "Function to update dust threshold"
      },
      "setMaxDiscountPercent(uint256)": {
        "notice": "Updates the maximum allowed discount percentage for all order types"
      },
      "setPriceCurve(uint8,uint256[2])": {
        "notice": "Function to update price curve - how fast {token2sell} price will decrease/increase"
      },
      "updateWhitelistUser(address,bool)": {
        "notice": "Add or remove user from whitelist"
      }
    },
    "notice": "Main contract of Exchange module. Here we can add order or fill it to get profit.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6912,
        "contract": "contracts/exchange/contracts/exchange/Exchange.sol:Exchange",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 5788,
        "contract": "contracts/exchange/contracts/exchange/Exchange.sol:Exchange",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 5901,
        "contract": "contracts/exchange/contracts/exchange/Exchange.sol:Exchange",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 20837,
        "contract": "contracts/exchange/contracts/exchange/Exchange.sol:Exchange",
        "label": "ORACLE",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ISuOracleAggregator)34007"
      },
      {
        "astId": 20840,
        "contract": "contracts/exchange/contracts/exchange/Exchange.sol:Exchange",
        "label": "TOP_STAKERS",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(ITopStakers)24556"
      },
      {
        "astId": 20842,
        "contract": "contracts/exchange/contracts/exchange/Exchange.sol:Exchange",
        "label": "admin",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 20846,
        "contract": "contracts/exchange/contracts/exchange/Exchange.sol:Exchange",
        "label": "userWhitelist",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 20850,
        "contract": "contracts/exchange/contracts/exchange/Exchange.sol:Exchange",
        "label": "userNonces",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 20853,
        "contract": "contracts/exchange/contracts/exchange/Exchange.sol:Exchange",
        "label": "dustThreshold",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 20862,
        "contract": "contracts/exchange/contracts/exchange/Exchange.sol:Exchange",
        "label": "orders",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_struct(Order)24155_storage)"
      },
      {
        "astId": 20865,
        "contract": "contracts/exchange/contracts/exchange/Exchange.sol:Exchange",
        "label": "orderIdSet",
        "offset": 0,
        "slot": "10",
        "type": "t_struct(UintSet)9238_storage"
      },
      {
        "astId": 20872,
        "contract": "contracts/exchange/contracts/exchange/Exchange.sol:Exchange",
        "label": "priceCurve",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint8,t_array(t_uint256)2_storage)"
      },
      {
        "astId": 20874,
        "contract": "contracts/exchange/contracts/exchange/Exchange.sol:Exchange",
        "label": "maxDiscountPercent",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)2_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[2]",
        "numberOfBytes": "64"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ISuOracleAggregator)34007": {
        "encoding": "inplace",
        "label": "contract ISuOracleAggregator",
        "numberOfBytes": "20"
      },
      "t_contract(ITopStakers)24556": {
        "encoding": "inplace",
        "label": "contract ITopStakers",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Order)24155_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Order)",
        "numberOfBytes": "32",
        "value": "t_struct(Order)24155_storage"
      },
      "t_mapping(t_uint8,t_array(t_uint256)2_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => uint256[2])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)2_storage"
      },
      "t_struct(Order)24155_storage": {
        "encoding": "inplace",
        "label": "struct Order",
        "members": [
          {
            "astId": 24140,
            "contract": "contracts/exchange/contracts/exchange/Exchange.sol:Exchange",
            "label": "token2sell",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 24142,
            "contract": "contracts/exchange/contracts/exchange/Exchange.sol:Exchange",
            "label": "token2buy",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 24144,
            "contract": "contracts/exchange/contracts/exchange/Exchange.sol:Exchange",
            "label": "beneficiary",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 24146,
            "contract": "contracts/exchange/contracts/exchange/Exchange.sol:Exchange",
            "label": "caller",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 24148,
            "contract": "contracts/exchange/contracts/exchange/Exchange.sol:Exchange",
            "label": "amountLeft",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 24150,
            "contract": "contracts/exchange/contracts/exchange/Exchange.sol:Exchange",
            "label": "token2buyAmount",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 24152,
            "contract": "contracts/exchange/contracts/exchange/Exchange.sol:Exchange",
            "label": "creationTimestamp",
            "offset": 0,
            "slot": "6",
            "type": "t_uint64"
          },
          {
            "astId": 24154,
            "contract": "contracts/exchange/contracts/exchange/Exchange.sol:Exchange",
            "label": "discountType",
            "offset": 8,
            "slot": "6",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Set)8766_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 8761,
            "contract": "contracts/exchange/contracts/exchange/Exchange.sol:Exchange",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 8765,
            "contract": "contracts/exchange/contracts/exchange/Exchange.sol:Exchange",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)9238_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 9237,
            "contract": "contracts/exchange/contracts/exchange/Exchange.sol:Exchange",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)8766_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}