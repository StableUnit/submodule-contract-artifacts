{
  "address": "0x3FF07d3740C03639b6659dcAce39ab998EF90C26",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "BadAccessControlSingleton",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAdminError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAlerterError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyCDPAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyDAOError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyDisablerAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyLiquidationAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyMintAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyProxyActionsError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyRewardAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyRoleError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyVaultAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyVotingEscrowError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "onlyAuctionAccessRole",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "CancelAuction",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "DisableContract",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "parameter",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "data",
          "type": "uint256"
        }
      ],
      "name": "ModifyParameters",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "parameter",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "data",
          "type": "address"
        }
      ],
      "name": "ModifyParameters",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "SettleAuction",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenToSell",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountToSell",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "StartAuction",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACCESS_CONTROL_SINGLETON",
      "outputs": [
        {
          "internalType": "contract ISuAccessControl",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ALERTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "AUCTION_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CDP_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DAO_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DISABLER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIQUIDATION_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINT_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROXY_ACTIONS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARD_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VOTING_ESCROW_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accountingEngine",
      "outputs": [
        {
          "internalType": "contract IAccountingEngine",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bids",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenToSell",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountToSell",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "cancelAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractEnabled",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bid",
          "type": "uint256"
        }
      ],
      "name": "decreaseSoldAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disableContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "discountType",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchange",
      "outputs": [
        {
          "internalType": "contract IExchange",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bid",
          "type": "uint256"
        }
      ],
      "name": "increaseBidSize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "accessControl",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "accountingEngine_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "exchange_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "protocolToken_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "what",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "data",
          "type": "address"
        }
      ],
      "name": "modifyParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "what",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "data",
          "type": "uint256"
        }
      ],
      "name": "modifyParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "restartAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "settleAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountToSell",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenToSell",
          "type": "address"
        }
      ],
      "name": "startAuction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "8f84b6f1e4072e92a972e80f9a9e23c6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BadAccessControlSingleton\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAdminError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAlerterError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyCDPAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyDAOError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyDisablerAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyLiquidationAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyMintAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyProxyActionsError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRewardAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRoleError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyVaultAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyVotingEscrowError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"onlyAuctionAccessRole\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"CancelAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DisableContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"ModifyParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"name\":\"ModifyParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"SettleAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenToSell\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToSell\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"StartAuction\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACCESS_CONTROL_SINGLETON\",\"outputs\":[{\"internalType\":\"contract ISuAccessControl\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ALERTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AUCTION_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CDP_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAO_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DISABLER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDATION_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROXY_ACTIONS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VOTING_ESCROW_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accountingEngine\",\"outputs\":[{\"internalType\":\"contract IAccountingEngine\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bids\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenToSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToSell\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"cancelAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractEnabled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"}],\"name\":\"decreaseSoldAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"discountType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchange\",\"outputs\":[{\"internalType\":\"contract IExchange\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"}],\"name\":\"increaseBidSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"accessControl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"accountingEngine_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exchange_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"protocolToken_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"restartAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"settleAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToSell\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenToSell\",\"type\":\"address\"}],\"name\":\"startAuction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/makerdao/externalContracts/DebtAuctionHouse.sol\":\"DebtAuctionHouse\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"contracts/exchange/contracts/interfaces/IExchange.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\npragma solidity ^0.8.0;\\n\\nstruct Order {\\n    address token2sell;\\n    address token2buy;\\n    address beneficiary;\\n    address caller;\\n    uint256 amountLeft;\\n    uint256 token2buyAmount;\\n    uint64 creationTimestamp;\\n    uint8 discountType;\\n}\\n\\nstruct OrderWithId {\\n    Order order;\\n    uint256 orderId;\\n}\\n\\ninterface IExchange {\\n    /* ===================== ERRORS ===================== */\\n    error OnlyAdminError();\\n    error OrderExist(uint256 orderId);\\n    error OrderNotExist(uint256 orderId);\\n    error IncorrectToken(address orderToken2buy, address inToken);\\n    error SmallAmountLeft();\\n    error BadOutAmount();\\n    error UserIsNotBeneficiary();\\n    error IsNotTopStaker(address staker);\\n    error IsNotStaker(address staker);\\n    error OrderNotForThisStaker(uint256 orderId, address staker);\\n    error NotEnoughReturnValue();\\n    error CallbackError();\\n    error ZeroPriceError();\\n    error InvalidDiscountType();\\n    error InvalidAddress();\\n    error InvalidTokens();\\n    error InvalidAmount();\\n    error IsNotWhitelisted();\\n    error MaxDiscountTooHigh();\\n    error NoStakersAvailable();\\n    error ZeroRecipient();\\n\\n    /* ======================== EVENTS ========================= */\\n    event PriceCurveChanged();\\n    event OrderAdded(uint256 orderId);\\n    event OrderCanceled(uint256 orderId);\\n    event OrderFilled(uint256 orderId);\\n    event OrderFilledPartially(uint256 orderId);\\n    event LpOrdersAdded(address LPToken, uint256[] orderIds);\\n    event DustThresholdChanged(uint256 oldValue, uint256 newValue);\\n    event WhitelistUpdated(address user, bool isWhitelisted);\\n    event MaxDiscountPercentChanged(uint256 oldMaxDiscountPercent, uint256 newMaxDiscountPercent);\\n    event EmergencyWithdraw(address indexed token, address indexed recipient, uint256 amount);\\n\\n    /* ==================== MUTABLE METHODS ==================== */\\n\\n    /**\\n      * @notice Add order to swap {token2sell} to {token2buy}.\\n      * @dev This swap is async, because depends on how arbitrage bots will fill this order. Emits OrderAdded() event.\\n      * Before addOrder user needs to approve token2sell for exchange contract\\n      * @param token2sell - Address of token to sell\\n      * @param amount2sell - Amount of {token2sell} to sell\\n      * @param token2buy - Address of token to buy\\n      * @param beneficiary - Address that will receive {token2buy} after filling order.\\n      * @param discountType - Speed of decreasing swap price. { 0 - aggressive, 1 - middle, 2 - conservative }\\n      * @param collateralJoin - address of collateral adapter\\n     **/\\n    function addOrder (\\n        address token2sell,\\n        uint256 amount2sell,\\n        address token2buy,\\n        address beneficiary,\\n        uint8 discountType,\\n        address collateralJoin\\n    ) external returns (uint256);\\n\\n    /**\\n      * @notice Only user who place order or who is beneficiary can cancelOrder();\\n      * @param orderId - Id of order to cancel.\\n     **/\\n    function cancelOrder (uint256 orderId) external;\\n\\n    /**\\n      * @notice Fill order with flash-loan like logic\\n      * @dev Caller contract receive orders {token2sell} and after that his stableunitFillOrderCallback() is called.\\n      * At the end of thi callback contract should send some amount of another token back to Exchange contract.\\n      * @dev We don't need slippage protection because:\\n      * 1. Prices are determined by Oracle, not DEX market conditions\\n      * 2. Output amount is calculated deterministically at execution time\\n      * @param orderId - Id of order to fill.\\n      * @param inAmount - Amount of {token2sell} to receive\\n      * @param data - encoded data to pass to callback function\\n     **/\\n    function fillOrderAsFlashLoan (\\n        uint256 orderId,\\n        uint256 inAmount,\\n        bytes memory data\\n    ) external returns (uint256 outAmount);\\n\\n    /**\\n      * @notice Fill order without a flash-loan\\n      * @dev Caller contract send tokens and receive another tokens depends on the order\\n      * @param orderId - Id of order to fill.\\n      * @param inAmount - Amount of {token2sell} to receive\\n     **/\\n    function fillOrderSimple(uint256 orderId, uint256 inAmount) external returns (uint256 outAmount);\\n\\n    /**\\n     * @notice Updates the maximum allowed discount percentage for all order types\\n     * @dev This function can only be called by the contract owner\\n     * @param newMaxDiscountPercent New maximum discount value (in percentage points).\\n     *        Value is bounded to 90% to prevent configuration mistakes\\n     */\\n    function setMaxDiscountPercent(uint256 newMaxDiscountPercent) external;\\n\\n    /**\\n      * @notice Add or remove user from whitelist\\n      * @param user - address of user\\n      * @param isWhitelisted - bool, false if we want to remove, true if we want to add user to whitelist.\\n     **/\\n    function updateWhitelistUser(address user, bool isWhitelisted) external;\\n\\n    /**\\n      * @notice Function to update price curve - how fast {token2sell} price will decrease/increase\\n      * @param discountType - discount type to change\\n      * @param newPriceCurve - parameters of formula\\n     **/\\n    function setPriceCurve(uint8 discountType, uint256[2] calldata newPriceCurve) external;\\n\\n    /**\\n      * @notice Function to update dust threshold\\n      * @param newThreshold - new dust threshold\\n     **/\\n    function setDustThreshold(uint256 newThreshold) external;\\n\\n    /* ==================== VIEW METHODS ==================== */\\n    /**\\n      * @return The amount of outcome that caller will receive if he will fill {orderId} with {inAmount} of {token2sell}\\n     **/\\n    function getExpectedOrderOutcome (uint256 orderId, uint256 inAmount) external view returns (uint256);\\n\\n    /**\\n      * @return Order with id = {orderId}\\n     **/\\n    function getOrder (uint256 orderId) external view returns (Order memory);\\n\\n    /**\\n      * @return The amount of not full-filled orders\\n     **/\\n    function getOrdersCount () external view returns (uint256);\\n\\n    /**\\n      * @return The array of all not-filled orders. May be deleted after adding GraphQL for orderIds\\n     **/\\n    function getAllOrders (uint256 offset, uint256 limit) external view returns (OrderWithId[] memory);\\n\\n    /**\\n     * @notice Returns the address of the staker assigned to an order during grace period\\n     * @param orderId The ID of the order to check\\n     * @return assignedStaker The address of the assigned staker, or zero address if:\\n     *         - Order doesn't exist\\n     *         - Order is past grace period\\n     *         - No top stakers available\\n     */\\n    function getAssignedStaker(uint256 orderId) external view returns (address);\\n\\n    /**\\n  * @notice Emergency withdraw in case contract have some tokens, that can be transferred by default functions\\n     **/\\n    function emergencyWithdraw(address token, address recipient, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xd984d6b394172dd53590c46c8e8f6449559a2c280b44a70bec23e5c2478cb52c\",\"license\":\"BSL 1.1\"},\"contracts/exchange/contracts/periphery/contracts/access-control/SuAccessRoles.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title SuAccessRoles Library\\n * @dev SuAuthenticated and SuAccessControlSingleton need to have this constants\\n * Hierarchy:\\n *      1. DAO - can give admins and system roles\\n *      2.1. Admin - can set Alerters\\n *      2.2. System - includes Minter, Liquidation, Reward and Disabler roles, don't have access to give some roles.\\n *      3. Alerter - can send alerts and trigger rate limits, don't have access to give some roles.\\n */\\nabstract contract SuAccessRoles {\\n    bytes32 public constant ADMIN_ROLE = 0x00;\\n\\n    bytes32 public constant DAO_ROLE = keccak256(\\\"DAO_ROLE\\\");\\n\\n    bytes32 public constant ALERTER_ROLE = keccak256(\\\"ALERTER_ROLE\\\");\\n\\n    // system roles\\n    bytes32 public constant MINT_ACCESS_ROLE = keccak256(\\\"MINT_ACCESS_ROLE\\\");\\n    bytes32 public constant AUCTION_ACCESS_ROLE = keccak256(\\\"AUCTION_ACCESS_ROLE\\\");\\n    bytes32 public constant LIQUIDATION_ACCESS_ROLE = keccak256(\\\"LIQUIDATION_ACCESS_ROLE\\\");\\n    bytes32 public constant REWARD_ACCESS_ROLE = keccak256(\\\"REWARD_ACCESS_ROLE\\\");\\n    // bytes32 public constant SYSTEM_ROLE = keccak256(\\\"SYSTEM_ROLE\\\");\\n    bytes32 public constant DISABLER_ROLE = keccak256(\\\"DISABLER_ROLE\\\");\\n    bytes32 public constant CDP_ACCESS_ROLE = keccak256(\\\"CDP_ACCESS_ROLE\\\");\\n    bytes32 public constant VOTING_ESCROW_ROLE = keccak256(\\\"VOTING_ESCROW_ROLE\\\");\\n    bytes32 public constant PROXY_ACTIONS_ROLE = keccak256(\\\"PROXY_ACTIONS_ROLE\\\");\\n}\\n\",\"keccak256\":\"0x6702597d2d879605a4f25e71c348b4c7f84f4618ca799ba0fcb4a5ad994b788c\",\"license\":\"BSL 1.1\"},\"contracts/exchange/contracts/periphery/contracts/access-control/SuAuthenticated.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/access-control/ISuAccessControl.sol\\\";\\nimport \\\"./SuAccessRoles.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @title SuAuthenticated\\n * @dev other contracts should inherit to be authenticated.\\n * The address of SuAccessControlSingleton should be one for all contract that inherits SuAuthenticated\\n */\\nabstract contract SuAuthenticated is Initializable, SuAccessRoles, IERC165Upgradeable {\\n    ISuAccessControl public ACCESS_CONTROL_SINGLETON;\\n\\n    error OnlyDAOError();\\n    error OnlyAdminError();\\n    error OnlyAlerterError();\\n    error OnlyVaultAccessError();\\n    error OnlyLiquidationAccessError();\\n    error OnlyMintAccessError();\\n    error OnlyRewardAccessError();\\n    error OnlyDisablerAccessError();\\n    error OnlyVotingEscrowError();\\n    error OnlyProxyActionsError();\\n    error OnlyRoleError();\\n    error OnlyCDPAccessError();\\n    error BadAccessControlSingleton();\\n    error onlyAuctionAccessRole();\\n\\n    /**\\n     * @dev should be passed in constructor\\n     */\\n    function __suAuthenticatedInit(address _accessControlSingleton) internal onlyInitializing {\\n        ACCESS_CONTROL_SINGLETON = ISuAccessControl(_accessControlSingleton);\\n        if (\\n            _accessControlSingleton == address(0) ||\\n            !ISuAccessControl(_accessControlSingleton).supportsInterface(type(IAccessControlUpgradeable).interfaceId)\\n        ) revert BadAccessControlSingleton();\\n    }\\n\\n    /** CORE ROLES */\\n\\n    modifier onlyDAO() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(DAO_ROLE, msg.sender)) revert OnlyDAOError();\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(ADMIN_ROLE, msg.sender)) revert OnlyAdminError();\\n        _;\\n    }\\n\\n    modifier onlyAlerter() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(ALERTER_ROLE, msg.sender)) revert OnlyAlerterError();\\n        _;\\n    }\\n\\n    /** SYSTEM ROLES */\\n\\n    modifier onlyLiquidationAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(LIQUIDATION_ACCESS_ROLE, msg.sender)) revert OnlyLiquidationAccessError();\\n        _;\\n    }\\n\\n    modifier onlyAuctionAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(AUCTION_ACCESS_ROLE, msg.sender)) revert OnlyLiquidationAccessError();\\n        _;\\n    }\\n\\n    modifier onlyMintAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(MINT_ACCESS_ROLE, msg.sender)) revert OnlyMintAccessError();\\n        _;\\n    }\\n\\n    modifier onlyRewardAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(REWARD_ACCESS_ROLE, msg.sender)) revert OnlyRewardAccessError();\\n        _;\\n    }\\n\\n    modifier onlyRewardOrAdminAccess() {\\n        if (\\n            !ACCESS_CONTROL_SINGLETON.hasRole(REWARD_ACCESS_ROLE, msg.sender) &&\\n            !ACCESS_CONTROL_SINGLETON.hasRole(ADMIN_ROLE, msg.sender)\\n        ) revert OnlyRewardAccessError();\\n        _;\\n    }\\n\\n    // @notice This modifier check if user/contract have access to \\\"disable\\\" contracts.\\n    // All main contracts in our lending protocol have disableContract() method that stops contracts main functions.\\n    modifier onlyDisablerAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(DISABLER_ROLE, msg.sender)) revert OnlyDisablerAccessError();\\n        _;\\n    }\\n\\n    modifier onlyCDPAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(CDP_ACCESS_ROLE, msg.sender)) revert OnlyCDPAccessError();\\n        _;\\n    }\\n\\n    modifier onlyVotingEscrow() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(VOTING_ESCROW_ROLE, msg.sender)) revert OnlyVotingEscrowError();\\n        _;\\n    }\\n\\n    modifier onlyProxyActions() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(PROXY_ACTIONS_ROLE, msg.sender)) revert OnlyProxyActionsError();\\n        _;\\n    }\\n\\n    // syntax sugar under ACCESS_CONTROL_SINGLETON\\n    modifier onlyRole(bytes32 role) {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(role, msg.sender)) revert OnlyRoleError();\\n        _;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return ACCESS_CONTROL_SINGLETON.supportsInterface(interfaceId);\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xc27fc434b09e69804160c93896d39da4f9890d21e2ca1002eb53ebf1234e4d91\",\"license\":\"BSL 1.1\"},\"contracts/exchange/contracts/periphery/contracts/interfaces/access-control/ISuAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\nimport \\\"../../access-control/SuAccessRoles.sol\\\";\\n\\n/**\\n * @notice Access control for contracts\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n **/\\ninterface ISuAccessControl is IAccessControlUpgradeable, IERC165Upgradeable {\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\\n}\\n\",\"keccak256\":\"0x25724ac502fd6418ccd38273b276de4b2fdecd023d723c5d80c9f0a27c407bcd\",\"license\":\"MIT\"},\"contracts/makerdao/externalContracts/DebtAuctionHouse.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\n/// DebtAuctionHouse.sol -- StableUnit debt auction module\\n\\n// Forked from MakerDAO's Flop.sol\\n// Copyright (C) 2020-2022 Dai Foundation\\n// Adapted for StableUnit with Reflexer naming and Exchange module functionality (IExchange.addOrder)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IAccountingEngine.sol\\\";\\nimport {IExchange, Order} from \\\"../../exchange/contracts/interfaces/IExchange.sol\\\";\\nimport \\\"../../exchange/contracts/periphery/contracts/access-control/SuAuthenticated.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Math} from \\\"../utils/Math.sol\\\";\\n\\ncontract DebtAuctionHouse is SuAuthenticated, Math {\\n    using SafeERC20 for IERC20;\\n\\n    // --- Data ---\\n    struct Bid {\\n        // Address of the token to sell in the auction (e.g., USDT)\\n        address tokenToSell;\\n        // Amount of token to sell [rad]\\n        uint256 amountToSell;\\n        // Address of the auction initiator\\n        address sender;\\n    }\\n\\n    // Bid data for each separate auction, mapping auction ID to Bid struct\\n    mapping (uint256 => Bid) public bids;\\n\\n    // Reference to AccountingEngine for debt settlement operations\\n    IAccountingEngine public accountingEngine;\\n\\n    // Reference to Exchange Module for order creation and management\\n    IExchange public exchange;\\n\\n    // Flag to indicate if the contract is active (1 = enabled, 0 = disabled)\\n    uint256 public contractEnabled;\\n\\n    // Address of the protocol's native token (StablePro)\\n    address public protocolToken;\\n\\n    // Discount type for auctions (0, default)\\n    uint256 public discountType;\\n\\n    // --- Events ---\\n    // Emitted when a new auction starts\\n    event StartAuction(uint256 id, address tokenToSell, uint256 amountToSell, address sender);\\n\\n    // Emitted when an auction is settled\\n    event SettleAuction(uint256 id);\\n    // Emitted when an auction is canceled\\n    event CancelAuction(uint256 id);\\n\\n    // Emitted when parameters are modified\\n    event ModifyParameters(bytes32 indexed parameter, uint256 data);\\n\\n    // Emitted when parameters are modified\\n    event ModifyParameters(bytes32 indexed parameter, address data);\\n    // Emitted when the contract is disabled\\n    event DisableContract();\\n\\n    // --- Initialization ---\\n    // Initializes the contract with access control, AccountingEngine, Exchange module, and protocol token\\n    // Forked from MakerDAO Flop.sol: constructor(address vat_, address gem_) public { ... } (line ~54)\\n    // StableUnit adaptation: Replaces MakerDAO's Vat with AccountingEngine and integrates Exchange module\\n    // @param accessControl Address of the SuAuthenticated access control contract\\n    // @param accountingEngine_ Address of the AccountingEngine contract\\n    // @param exchange_ Address of the Exchange module\\n    // @param protocolToken_ Address of the protocol's native token (StablePro)\\n    function initialize(\\n        address accessControl,\\n        address accountingEngine_,\\n        address exchange_,\\n        address protocolToken_\\n    ) public initializer {\\n        // Set up role-based access control (DAO, Admin, DisablerAccess, LiquidationAccess)\\n        __suAuthenticatedInit(accessControl);\\n\\n        // Assign AccountingEngine for debt settlement operations\\n        accountingEngine = IAccountingEngine(accountingEngine_);\\n\\n        // Set Exchange module address for order creation\\n        exchange = IExchange(exchange_);\\n\\n        // Enable the contract by default\\n        contractEnabled = 1;\\n\\n        // Set default discount type to aggressive (0)\\n        discountType = 0;\\n\\n        // Set protocol token address (StablePro)\\n        protocolToken = protocolToken_;\\n    }\\n\\n    // Prevents initialization of the implementation contract for upgradeability safety\\n    // StableUnit addition: Ensures the contract cannot be initialized outside of proxy deployment\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    // --- Administration ---\\n    // Modifies contract parameters such as AccountingEngine or protocol token address\\n    // Forked from MakerDAO Flop.sol: function file(bytes32 what, address data) public auth { ... } (line ~76)\\n    // StableUnit adaptation: Updates AccountingEngine or protocolToken address, restricted to DAO role\\n    // @param what Parameter to modify (\\\"accountingEngine\\\" or \\\"protocolToken\\\")\\n    // @param data New contract address\\n    function modifyParameters(bytes32 what, address data) external onlyDAO {\\n        // Update AccountingEngine address for debt settlement\\n        if (what == \\\"accountingEngine\\\") {\\n            accountingEngine = IAccountingEngine(data);\\n        }\\n        // Update protocol token address (StablePro)\\n        if (what == \\\"protocolToken\\\") {\\n            protocolToken = address(data);\\n        }\\n        // Emit event to log address update\\n        emit ModifyParameters(what, data);\\n    }\\n\\n    // MakerDAO Flop.sol: function file(bytes32 what, uint256 data) public auth { ... }\\n    // Modifies auction parameters (\\\"discountType\\\")\\n    // @param what Parameter to modify (\\\"discountType\\\")\\n    // @param data New parameter value\\n    function modifyParameters(bytes32 what, uint256 data) external onlyDAO {\\n        if (what == \\\"discountType\\\") {\\n            discountType = data;\\n        } else {\\n            revert(\\\"CollateralAuctionHouse/modify-unrecognized-param\\\");\\n        }\\n\\n        emit ModifyParameters(what, data);\\n    }\\n\\n    // --- Auction Management ---\\n    // Starts a new debt auction, integrating Exchange module\\u2019s addOrder logic\\n    // StableUnit adaptation: Creates an order on the Exchange module to sell a token (e.g., USDT) for StablePro\\n    // @param incomeReceiver Address to receive the auction proceeds\\n    // @param amountToSell Amount of token to sell [rad]\\n    // @param tokenToSell Address of the token to sell\\n    // @return id Unique auction identifier\\n    function startAuction(\\n        address,\\n        uint256 amountToSell,\\n        address tokenToSell\\n    ) external onlyAuctionAccess returns (uint256 id) {\\n        // Ensure the contract is enabled to allow new auctions\\n        require(contractEnabled == 1, \\\"DebtAuctionHouse/not-enabled\\\");\\n        // Ensure non-zero amount to prevent null auctions\\n        require(amountToSell > 0, \\\"DebtAuctionHouse/zero-collateral\\\");\\n\\n        IERC20(tokenToSell).safeApprove(address(exchange), amountToSell);\\n\\n        // Create an order on the Exchange module to sell tokenToSell for StablePro\\n        id = exchange.addOrder(\\n            tokenToSell, // Token to sell (e.g., USDT)\\n            amountToSell, // Amount to sell\\n            protocolToken, // Token to receive (StablePro)\\n            address(accountingEngine), // Receiver of proceeds\\n            uint8(discountType), // Discount type for the auction\\n            address(0) // No additional recipient\\n        );\\n\\n        // Store bid details for the auction\\n        bids[id] = Bid({\\n            tokenToSell: tokenToSell,\\n            amountToSell: amountToSell,\\n            sender: msg.sender\\n        });\\n\\n        // Emit event to log auction start\\n        emit StartAuction(id, tokenToSell, amountToSell, msg.sender);\\n    }\\n\\n    // Restarts an auction by extending the bid deadline\\n    // Forked from MakerDAO Flop.sol: function tick(uint id) public { ... }\\n    // StableUnit adaptation: Not implemented, placeholder for future functionality\\n    // @param id Auction identifier\\n    function restartAuction(uint256 id) external {}\\n\\n    // Increases the bid amount for a fixed collateral amount\\n    // Forked from MakerDAO Flop.sol: function tend(uint id, uint lot, uint bid) public { ... }\\n    // StableUnit adaptation: Not implemented, placeholder for future functionality\\n    // @param id Auction identifier\\n    // @param collateralAmount Collateral amount (must match auction\\u2019s lot)\\n    // @param bid New bid amount in stablecoin [rad]\\n    function increaseBidSize(uint256 id, uint256 collateralAmount, uint256 bid) external {}\\n\\n    // Decreases the collateral amount for a fixed bid\\n    // Forked from MakerDAO Flop.sol: function dent(uint id, uint lot, uint bid) public { ... }\\n    // StableUnit adaptation: Not implemented, placeholder for future functionality\\n    // @param id Auction identifier\\n    // @param collateralAmount New collateral amount (must be less than current lot)\\n    // @param bid Bid amount (must match current bid and tab) [rad]\\n    function decreaseSoldAmount(uint256 id, uint256 collateralAmount, uint256 bid) external {}\\n\\n    // Settles a completed auction, transferring StablePro to AccountingEngine\\n    // Forked from MakerDAO Flop.sol: function deal(uint id) public { ... }\\n    // StableUnit adaptation: Transfers StablePro balance to AccountingEngine and cancels auctioned debt\\n    // @param id Auction identifier\\n    function settleAuction(uint256 id) external {\\n        // Ensure the auction exists and is not already settled\\n        require(bids[id].amountToSell != 0, \\\"DebtAuctionHouse/not-finished\\\");\\n        // Retrieve the order details from the Exchange module\\n        Order memory order = exchange.getOrder(id);\\n        // Ensure the auction has been fully executed (no amount left to sell)\\n        require(order.amountLeft == 0, \\\"DebtAuctionHouse/not-executed\\\");\\n\\n        // Get the StablePro balance of this contract\\n        uint256 stableProAmount = IERC20(protocolToken).balanceOf(address(this));\\n\\n        // Transfer StablePro to AccountingEngine\\n        accountingEngine.joinStablePro(stableProAmount);\\n\\n        // Cancel the auctioned debt using the StablePro received\\n        accountingEngine.cancelAuctionedDebtWithSurplus(stableProAmount);\\n\\n        // Clear the bid data\\n        delete bids[id];\\n        // Emit event to log auction settlement\\n        emit SettleAuction(id);\\n    }\\n\\n    // Cancels an auction during system shutdown, refunding the token to the sender\\n    // Forked from MakerDAO Flop.sol: function yank(uint id) public auth { ... } (line ~137)\\n    // StableUnit adaptation: Refunds tokenToSell to the sender via the Exchange module\\n    // @param id Auction identifier\\n    function cancelAuction(uint256 id) external onlyLiquidationAccess {\\n        // Ensure the contract is disabled (system shutdown)\\n        require(contractEnabled == 0, \\\"DebtAuctionHouse/still-enabled\\\");\\n        // Retrieve the order details from the Exchange module\\n        Order memory order = exchange.getOrder(id);\\n        // Ensure the auction has not been executed\\n        require(order.amountLeft != 0, \\\"DebtAuctionHouse/executed\\\");\\n        // Ensure the auction exists\\n        require(bids[id].amountToSell != 0, \\\"DebtAuctionHouse/executed\\\");\\n\\n        // Cancel the order on the Exchange module\\n        exchange.cancelOrder(id);\\n\\n        // Refund the remaining token amount to the sender\\n        IERC20(bids[id].tokenToSell).safeTransfer(bids[id].sender, order.amountLeft);\\n\\n        // Emit event to log auction cancellation\\n        emit CancelAuction(id);\\n    }\\n\\n    // Disables the contract, halting new auctions\\n    // StableUnit adaptation: Restricted to accounts with DisablerAccess role\\n    // @notice Only callable by accounts with DisablerAccess role\\n    function disableContract() external onlyDisablerAccess {\\n        // Set contract to disabled state\\n        contractEnabled = 0;\\n        // Emit event to log contract disablement\\n        emit DisableContract();\\n    }\\n}\",\"keccak256\":\"0x9997fbff538ed135c7bf00f7e2c571f38d1936d5907f5460f04602699fcda1ca\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/makerdao/interfaces/IAccountingEngine.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IAccountingEngine\\n **/\\ninterface IAccountingEngine {\\n    /* ==================== EVENTS ===============-===== */\\n    event StableProSwapped(uint256 amount);\\n    event DisableContract();\\n\\n    event AuctionDebt(uint256 indexed id, uint256 totalOnAuctionDebt, uint256 debtBalance);\\n    event AuctionSurplus(uint256 indexed id, uint256 coinBalance);\\n\\n    event Initialize(address indexed accountingEngine);\\n    event PushDebtToQueue(uint256 era, uint256 amountToRaise, uint256 totalQueuedDebt);\\n    event PopDebtFromQueue(uint256 era, uint256 totalQueuedDebt);\\n    event SettleDebt(uint256 rad, uint256 coinBalance, uint256 debtBalance);\\n    event CancelAuctionedDebtWithSurplus(uint256 rad, uint256 totalOnAuctionDebt);\\n    event JoinStablePro(uint256 amount, uint256 totalOnAuctionDebt);\\n    event GetRealStablePro(uint256 amount);\\n    event RefillStablecoin(address stablecoin, uint256 amount);\\n    event SwapStableProToStablecoin(address stablecoinToken, uint256 stableProAmountE18, uint256 stablecoinAmountEDecimal);\\n    event AddWhitelistStablecoin(address stablecoin);\\n    event RemoveWhitelistStablecoin(address stablecoin);\\n    event SetStablecoinToSwap(address stablecoin);\\n    event ModifyParameters(bytes32 what, uint256 data);\\n    event ModifyParameters(bytes32 what, address data);\\n\\n    /* ==================== ERRORS ===============-===== */\\n    error ContractDisabled();\\n    error BadModifyParameters();\\n    error BadStablecoin(address asset);\\n    error BadRewardToken();\\n    error DebtNotZero();\\n    error SurplusNotZero();\\n    error InsufficientDebt();\\n    error InsufficientSurplus();\\n    error NotEnoughAsh();\\n    error PopDebtDelayNotFinished();\\n    error StablecoinNotExist(address asset);\\n    error StablecoinExists(address asset);\\n\\n    /* ====================== VARS ===================== */\\n\\n    function stablecoinToSwap() external view returns (address);\\n\\n    /* ==================== MUTABLE METHODS ==================== */\\n\\n    /**\\n     * @notice Push debt (that the system tries to cover with collateral auctions) to a queue\\n     * @dev Debt is locked in a queue to give the system enough time to auction collateral\\n     *      and gather surplus\\n     * @param amountToRaise Amount of debt to push\\n     */\\n    function pushDebtToQueue(uint amountToRaise) external;\\n\\n    /**\\n     * @notice A block of debt can be popped from the queue after popDebtDelay seconds passed since it was\\n     *         added there\\n     * @param era Timestamp of the block of debt that should be popped out\\n     */\\n    function popDebtFromQueue(uint era) external;\\n\\n    // Debt settlement\\n    /**\\n     * @notice Destroy an equal amount of coins and debt\\n     * @dev We can only destroy debt that is not locked in the queue and also not in a debt auction\\n     * @param rad Amount of coins/debt to destroy (number with 45 decimals)\\n    **/\\n    function settleDebt(uint rad) external;\\n\\n    /**\\n     * @notice Use surplus coins to destroy debt that is/was in a debt auction\\n     * @param rad Amount of coins/debt to destroy (number with 45 decimals)\\n    **/\\n    function cancelAuctionedDebtWithSurplus(uint rad) external;\\n\\n    /**\\n     * @notice Start a debt auction (we have debt = x$, token2sell with value of y$, where y >= x)\\n     * @dev We can only auction debt that is not already being auctioned and is not locked in the debt queue.\\n     * Firstly, we should donate token2sell (it's collateral or stablecoin) by refillStablecoin\\n    **/\\n    function auctionDebt(\\n        address token2sell,\\n        uint256 amountToSell,\\n        uint256 auctionDebt\\n    ) external returns (uint orderId);\\n\\n    /**\\n     * @notice Start a surplus auction\\n     * @dev We can only auction surplus if we wait at least 'surplusAuctionDelay' seconds since the last\\n     *      auction trigger, if we keep enough surplus in the buffer and if there is no bad debt to settle\\n    **/\\n    function auctionSurplus(uint256 surplusAmount) external returns (uint orderId);\\n\\n    /**\\n     * @notice Disable this contract (normally called by Global Settlement)\\n     * @dev When we disable, the contract tries to settle as much debt as possible (if there's any) with\\n            any surplus that's left in the system. After erasing debt, the contract will either transfer any\\n            remaining surplus right away (if disableCooldown == 0) or will only record the timestamp when\\n            it was disabled\\n    **/\\n    function disableContract() external;\\n\\n    /* ================= Stablecoin Whitelist ================== */\\n\\n    /**\\n     * @notice Add new stablecoin to whitelist of stablecoins protocol works with\\n    **/\\n    function addWhitelistStablecoin(address stablecoin) external;\\n\\n    /**\\n     * @notice Remove stablecoin from whitelist of stablecoins protocol works with\\n    **/\\n    function removeWhitelistStablecoin(address stablecoin) external;\\n\\n    /**\\n     * @notice Check if give token is in stablecoins whitelist\\n    **/\\n    function hasWhitelistStablecoin(address stablecoin) external view returns (bool);\\n\\n    /**\\n     * @notice Change var stablecoinToSwap, that is used in liquidation process\\n    **/\\n    function setStablecoinToSwap(address stablecoin) external;\\n\\n    /* =================== MANUAL FUNCTIONS ==================== */\\n    /**\\n     * @notice Admin function to join protocol using real StablePro (= join in coinJoin)\\n    **/\\n    function joinStablePro(uint256 amount) external;\\n\\n    /**\\n     * @notice Admin function to get real StablePro tokens instead of records in protocol (= exit from coinJoin)\\n    **/\\n    function getRealStablePro(uint256 amount) external;\\n\\n    /**\\n     * @notice Function to send stablecoin to AccountingEngine contract\\n    **/\\n    function refillStablecoin(address stablecoin, uint256 amount) external;\\n\\n    /**\\n     * @notice Admin function to distribute surplus after getting it\\n    **/\\n    //function distributeSurplus(uint256 amount) external;\\n\\n    /**\\n     * @notice Function to swap sender's stablePro to stablecoin that is in whitelist\\n    **/\\n    function swapStableProToStablecoin(address stablecoinToken, uint256 stableProAmountE18) external;\\n\\n    function totalQueuedDebt() external view returns (uint256);\\n\\n    function totalOnAuctionDebt() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x73a93f81de06b67f700e810945a09b9be6edf82854cbac40240aedf413a8dc5c\",\"license\":\"UNLICENSED\"},\"contracts/makerdao/utils/Math.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nabstract contract Math {\\n    uint256 constant ONE = 10 ** 27;\\n    uint256 constant WAD = 10 ** 18;\\n\\n    /**\\n    * @notice Calculates the sum of an unsigned integer and a signed integer\\n    * @param  x Unsigned integer\\n    * @param  y Signed integer\\n    * @return z Unsigned sum of `x` and `y`\\n    */\\n    function _add(uint x, int y) internal pure returns (uint z) {\\n        if (y >= 0) {\\n            z = x + uint256(y);\\n        } else {\\n            z = x - uint256(-y);\\n        }\\n        require(y >= 0 || z <= x);\\n        require(y <= 0 || z >= x);\\n    }\\n\\n    /**\\n    * @notice Calculates the substraction of an unsigned integer and a signed integer\\n    * @param  x Unsigned integer\\n    * @param  y Signed integer\\n    * @return z Unsigned substraction of `x` and `y`\\n    */\\n    function _sub(uint x, int y) internal pure returns (uint z) {\\n        if (y >= 0) {\\n            z = x - uint256(y);\\n        } else {\\n            z = x + uint256(-y);\\n        }\\n        require(y <= 0 || z <= x);\\n        require(y >= 0 || z >= x);\\n    }\\n    function _mul(uint x, int y) internal pure returns (int z) {\\n        z = int(x) * y;\\n        require(int(x) >= 0);\\n        require(y == 0 || z / y == int(x));\\n    }\\n\\n    function _rdiv(uint x, uint y) internal pure returns (uint z) {\\n        z = _mul(x, ONE) / y;\\n    }\\n\\n    function _add(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x + y) >= x);\\n    }\\n    function _sub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) <= x);\\n    }\\n    function _mul(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x);\\n    }\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x <= y ? x : y;\\n    }\\n\\n    function either(bool x, bool y) internal pure returns (bool z) {\\n        assembly{ z := or(x, y)}\\n    }\\n    function both(bool x, bool y) internal pure returns (bool z) {\\n        assembly{ z := and(x, y)}\\n    }\\n}\\n\",\"keccak256\":\"0xd2215ec58e4792d9e68d66f17c0181e4931fd83dc4f4a433d727978997e4ba24\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001961001e565b6100dd565b600054610100900460ff161561008a5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff908116146100db576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b611ad4806100ec6000396000f3fe608060405234801561001057600080fd5b506004361061015f5760003560e01c806301ffc9a71461016457806303ee9f221461018c5780631a465fe1146101b25780632e993611146101c5578063340517c9146101da5780633f400be4146101fd57806341b3a0d914610206578063438280dd1461020f5780634423c5f1146102365780635a93f0311461029a5780636614f010146102ad57806371d0fb41146102c057806375b238fc146102e7578063894ba833146102ef5780638e5313e0146102f7578063961d45c41461031e57806396b5a75514610331578063b38234f314610344578063bd5f5be61461036b578063bf43f95114610392578063d0e8fa82146103a5578063d2351cee146103cc578063d25ccf53146103e1578063d2f7265a146103f2578063dc97e84e14610405578063e9c265181461041a578063f8c8765e1461042f578063fe4f589014610442578063ff6b7b1c1461029a575b600080fd5b610177610172366004611696565b610455565b60405190151581526020015b60405180910390f35b6000546101a5906201000090046001600160a01b031681565b60405161018391906116c7565b6037546101a5906001600160a01b031681565b6101d86101d33660046116db565b6104d2565b005b6101ef600080516020611a8883398151915281565b604051908152602001610183565b6101ef60385481565b6101ef60365481565b6101ef7f39f61ca2a1a28fee144218173ec637b649a353e4026b2738c673800e5bf1437b81565b6102706102443660046116db565b6033602052600090815260409020805460018201546002909201546001600160a01b0391821692911683565b604080516001600160a01b0394851681526020810193909352921691810191909152606001610183565b6101d86102a83660046116f4565b505050565b6101d86102bb366004611735565b61079a565b6101ef7f880a91047114272656e533301261260c75e4d11543ac7303d6fe4204579ec72781565b6101ef600081565b6101d86108e2565b6101ef7fe453bacb314e78dcd5192e6b1a2b1f0e7c76e92f6b7e429a6a90f04e39db3b7681565b6034546101a5906001600160a01b031681565b6101d861033f3660046116db565b6109b5565b6101ef7fd83f5343da19b478b15a140c301a868be9e02603958f38fbd822b9d5c0a2891681565b6101ef7f4f14c8366fa999817edc9f29824eb88a00cc31225e2156f399da4bc91049eb1081565b6101ef6103a0366004611765565b610c34565b6101ef7f76d0567582f23e1e9d7a13eeba60f9aea9d69b8da87ca27a8bf3698b35c653db81565b6101ef600080516020611aa883398151915281565b6101d86103ef3660046116db565b50565b6035546101a5906001600160a01b031681565b6101ef600080516020611a6883398151915281565b6101ef600080516020611a4883398151915281565b6101d861043d3660046117a7565b610ee2565b6101d8610450366004611803565b611046565b600080546040516301ffc9a760e01b8152620100009091046001600160a01b0316906301ffc9a79061048b908590600401611825565b602060405180830381865afa1580156104a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104cc919061183a565b92915050565b60008181526033602052604081206001015490036105375760405162461bcd60e51b815260206004820152601d60248201527f4465627441756374696f6e486f7573652f6e6f742d66696e697368656400000060448201526064015b60405180910390fd5b60355460405163d09ef24160e01b8152600481018390526000916001600160a01b03169063d09ef2419060240161010060405180830381865afa158015610582573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a69190611894565b905080608001516000146105fc5760405162461bcd60e51b815260206004820152601d60248201527f4465627441756374696f6e486f7573652f6e6f742d6578656375746564000000604482015260640161052e565b6037546040516370a0823160e01b81526000916001600160a01b0316906370a082319061062d9030906004016116c7565b602060405180830381865afa15801561064a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066e9190611958565b603454604051635d49502b60e01b8152600481018390529192506001600160a01b031690635d49502b90602401600060405180830381600087803b1580156106b557600080fd5b505af11580156106c9573d6000803e3d6000fd5b5050603454604051633dc4ab1d60e01b8152600481018590526001600160a01b039091169250633dc4ab1d9150602401600060405180830381600087803b15801561071357600080fd5b505af1158015610727573d6000803e3d6000fd5b50505060008481526033602052604080822080546001600160a01b0319908116825560018201939093556002018054909216909155517f03af424b0e12d91ea31fe7f2c199fc02c9ede38f9aa1bdc019a8087b41445f7a915061078d9085815260200190565b60405180910390a1505050565b600054604051632474521560e21b8152620100009091046001600160a01b0316906391d14854906107df90600080516020611a48833981519152903390600401611971565b602060405180830381865afa1580156107fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610820919061183a565b61083d5760405163599a6c3360e11b815260040160405180910390fd5b816f6163636f756e74696e67456e67696e6560801b0361087357603480546001600160a01b0319166001600160a01b0383161790555b816c383937ba37b1b7b62a37b5b2b760991b036108a657603780546001600160a01b0319166001600160a01b0383161790555b817fd91f38cf03346b5dc15fb60f9076f866295231ad3c3841a1051f8443f25170d1826040516108d691906116c7565b60405180910390a25050565b600054604051632474521560e21b8152620100009091046001600160a01b0316906391d148549061092790600080516020611aa8833981519152903390600401611971565b602060405180830381865afa158015610944573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610968919061183a565b6109855760405163bb0684b760e01b815260040160405180910390fd5b600060368190556040517f2d4b4ecff7bd7503135271925520a2f6c0d98c9473ffc1a1e72c92502f51b25e9190a1565b600054604051632474521560e21b8152620100009091046001600160a01b0316906391d14854906109fa90600080516020611a68833981519152903390600401611971565b602060405180830381865afa158015610a17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3b919061183a565b610a585760405163200ab6d960e01b815260040160405180910390fd5b60365415610aa85760405162461bcd60e51b815260206004820152601e60248201527f4465627441756374696f6e486f7573652f7374696c6c2d656e61626c65640000604482015260640161052e565b60355460405163d09ef24160e01b8152600481018390526000916001600160a01b03169063d09ef2419060240161010060405180830381865afa158015610af3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b179190611894565b90508060800151600003610b3d5760405162461bcd60e51b815260040161052e90611988565b6000828152603360205260408120600101549003610b6d5760405162461bcd60e51b815260040161052e90611988565b60355460405163514fcac760e01b8152600481018490526001600160a01b039091169063514fcac790602401600060405180830381600087803b158015610bb357600080fd5b505af1158015610bc7573d6000803e3d6000fd5b5050506000838152603360205260409020600281015460808401519154610bfd93506001600160a01b039081169291169061119c565b6040518281527fbea0e66c2d42b9131695ceea7d1aaa21b37e93070cde19c9b5fbd686a32592929060200160405180910390a15050565b60008054604051632474521560e21b8152620100009091046001600160a01b0316906391d1485490610c7a90600080516020611a88833981519152903390600401611971565b602060405180830381865afa158015610c97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cbb919061183a565b610cd85760405163200ab6d960e01b815260040160405180910390fd5b603654600114610d295760405162461bcd60e51b815260206004820152601c60248201527b1119589d105d58dd1a5bdb921bdd5cd94bdb9bdd0b595b98589b195960221b604482015260640161052e565b60008311610d795760405162461bcd60e51b815260206004820181905260248201527f4465627441756374696f6e486f7573652f7a65726f2d636f6c6c61746572616c604482015260640161052e565b603554610d93906001600160a01b038481169116856111f2565b603554603754603454603854604051633bcce46f60e21b81526001600160a01b038781166004830152602482018990529384166044820152918316606483015260ff166084820152600060a482015291169063ef3391bc9060c4016020604051808303816000875af1158015610e0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e319190611958565b60408051606080820183526001600160a01b0386811680845260208085018a81523386880181815260008a815260338552899020975188549087166001600160a01b03199182161789559251600189015551600290970180549790951696909116959095179092558451868152918201529283018790528201529091507fcd7b0cb8704cefa8029a989d148d1233f2ee95cba1e14ae72be8d74c3cb1e26c9060800160405180910390a19392505050565b600054610100900460ff1615808015610f025750600054600160ff909116105b80610f235750610f11306112f6565b158015610f23575060005460ff166001145b610f865760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161052e565b6000805460ff191660011790558015610fa9576000805461ff0019166101001790555b610fb285611305565b603480546001600160a01b038087166001600160a01b03199283161790925560358054868416908316179055600160365560006038556037805492851692909116919091179055801561103f576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b600054604051632474521560e21b8152620100009091046001600160a01b0316906391d148549061108b90600080516020611a48833981519152903390600401611971565b602060405180830381865afa1580156110a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110cc919061183a565b6110e95760405163599a6c3360e11b815260040160405180910390fd5b816b646973636f756e745479706560a01b0361110957603881905561116a565b60405162461bcd60e51b815260206004820152603060248201527f436f6c6c61746572616c41756374696f6e486f7573652f6d6f646966792d756e60448201526f7265636f676e697a65642d706172616d60801b606482015260840161052e565b817fac7c5c1afaef770ec56ac6268cd3f2fbb1035858ead2601d6553157c33036c3a826040516108d691815260200190565b6102a88363a9059cbb60e01b84846040516024016111bb9291906119bb565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611433565b80158061126c5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015611246573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061126a9190611958565b155b6112d75760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606482015260840161052e565b6102a88363095ea7b360e01b84846040516024016111bb9291906119bb565b6001600160a01b03163b151590565b600054610100900460ff166113705760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161052e565b6000805462010000600160b01b031916620100006001600160a01b03841690810291909117909155158061141557506040516301ffc9a760e01b81526001600160a01b038216906301ffc9a7906113d290637965db0b60e01b90600401611825565b602060405180830381865afa1580156113ef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611413919061183a565b155b156103ef576040516384d942fd60e01b815260040160405180910390fd5b6000611488826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166115089092919063ffffffff16565b90508051600014806114a95750808060200190518101906114a9919061183a565b6102a85760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161052e565b6060611517848460008561151f565b949350505050565b6060824710156115805760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161052e565b600080866001600160a01b0316858760405161159c91906119f8565b60006040518083038185875af1925050503d80600081146115d9576040519150601f19603f3d011682016040523d82523d6000602084013e6115de565b606091505b50915091506115ef878383876115fa565b979650505050505050565b6060831561166757825160000361166057611614856112f6565b6116605760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161052e565b5081611517565b611517838381511561167c5781518083602001fd5b8060405162461bcd60e51b815260040161052e9190611a14565b6000602082840312156116a857600080fd5b81356001600160e01b0319811681146116c057600080fd5b9392505050565b6001600160a01b0391909116815260200190565b6000602082840312156116ed57600080fd5b5035919050565b60008060006060848603121561170957600080fd5b505081359360208301359350604090920135919050565b6001600160a01b03811681146103ef57600080fd5b6000806040838503121561174857600080fd5b82359150602083013561175a81611720565b809150509250929050565b60008060006060848603121561177a57600080fd5b833561178581611720565b925060208401359150604084013561179c81611720565b809150509250925092565b600080600080608085870312156117bd57600080fd5b84356117c881611720565b935060208501356117d881611720565b925060408501356117e881611720565b915060608501356117f881611720565b939692955090935050565b6000806040838503121561181657600080fd5b50508035926020909101359150565b6001600160e01b031991909116815260200190565b60006020828403121561184c57600080fd5b815180151581146116c057600080fd5b805161186781611720565b919050565b80516001600160401b038116811461186757600080fd5b805160ff8116811461186757600080fd5b60006101008083850312156118a857600080fd5b604051908101906001600160401b03821181831017156118d857634e487b7160e01b600052604160045260246000fd5b816040526118e58461185c565b81526118f36020850161185c565b60208201526119046040850161185c565b60408201526119156060850161185c565b60608201526080840151608082015260a084015160a082015261193a60c0850161186c565b60c082015261194b60e08501611883565b60e0820152949350505050565b60006020828403121561196a57600080fd5b5051919050565b9182526001600160a01b0316602082015260400190565b6020808252601990820152781119589d105d58dd1a5bdb921bdd5cd94bd95e1958dd5d1959603a1b604082015260600190565b6001600160a01b03929092168252602082015260400190565b60005b838110156119ef5781810151838201526020016119d7565b50506000910152565b60008251611a0a8184602087016119d4565b9190910192915050565b6020815260008251806020840152611a338160408501602087016119d4565b601f01601f1916919091016040019291505056fe3b5d4cc60d3ec3516ee8ae083bd60934f6eb2a6c54b1229985c41bfb092b26039a9aef7c1247d5fc769b0185c052913e39673da29a880317dfd20ebf86f26a49014f8da3222812608c449a44f4705585c5ce052eeb6f9af0af9209c64b0ba2deb0fdd1623e42dbffda4acd8bd643e1cb69f00f0e83abeaa8150ee42cf0fd105ea164736f6c6343000811000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061015f5760003560e01c806301ffc9a71461016457806303ee9f221461018c5780631a465fe1146101b25780632e993611146101c5578063340517c9146101da5780633f400be4146101fd57806341b3a0d914610206578063438280dd1461020f5780634423c5f1146102365780635a93f0311461029a5780636614f010146102ad57806371d0fb41146102c057806375b238fc146102e7578063894ba833146102ef5780638e5313e0146102f7578063961d45c41461031e57806396b5a75514610331578063b38234f314610344578063bd5f5be61461036b578063bf43f95114610392578063d0e8fa82146103a5578063d2351cee146103cc578063d25ccf53146103e1578063d2f7265a146103f2578063dc97e84e14610405578063e9c265181461041a578063f8c8765e1461042f578063fe4f589014610442578063ff6b7b1c1461029a575b600080fd5b610177610172366004611696565b610455565b60405190151581526020015b60405180910390f35b6000546101a5906201000090046001600160a01b031681565b60405161018391906116c7565b6037546101a5906001600160a01b031681565b6101d86101d33660046116db565b6104d2565b005b6101ef600080516020611a8883398151915281565b604051908152602001610183565b6101ef60385481565b6101ef60365481565b6101ef7f39f61ca2a1a28fee144218173ec637b649a353e4026b2738c673800e5bf1437b81565b6102706102443660046116db565b6033602052600090815260409020805460018201546002909201546001600160a01b0391821692911683565b604080516001600160a01b0394851681526020810193909352921691810191909152606001610183565b6101d86102a83660046116f4565b505050565b6101d86102bb366004611735565b61079a565b6101ef7f880a91047114272656e533301261260c75e4d11543ac7303d6fe4204579ec72781565b6101ef600081565b6101d86108e2565b6101ef7fe453bacb314e78dcd5192e6b1a2b1f0e7c76e92f6b7e429a6a90f04e39db3b7681565b6034546101a5906001600160a01b031681565b6101d861033f3660046116db565b6109b5565b6101ef7fd83f5343da19b478b15a140c301a868be9e02603958f38fbd822b9d5c0a2891681565b6101ef7f4f14c8366fa999817edc9f29824eb88a00cc31225e2156f399da4bc91049eb1081565b6101ef6103a0366004611765565b610c34565b6101ef7f76d0567582f23e1e9d7a13eeba60f9aea9d69b8da87ca27a8bf3698b35c653db81565b6101ef600080516020611aa883398151915281565b6101d86103ef3660046116db565b50565b6035546101a5906001600160a01b031681565b6101ef600080516020611a6883398151915281565b6101ef600080516020611a4883398151915281565b6101d861043d3660046117a7565b610ee2565b6101d8610450366004611803565b611046565b600080546040516301ffc9a760e01b8152620100009091046001600160a01b0316906301ffc9a79061048b908590600401611825565b602060405180830381865afa1580156104a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104cc919061183a565b92915050565b60008181526033602052604081206001015490036105375760405162461bcd60e51b815260206004820152601d60248201527f4465627441756374696f6e486f7573652f6e6f742d66696e697368656400000060448201526064015b60405180910390fd5b60355460405163d09ef24160e01b8152600481018390526000916001600160a01b03169063d09ef2419060240161010060405180830381865afa158015610582573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a69190611894565b905080608001516000146105fc5760405162461bcd60e51b815260206004820152601d60248201527f4465627441756374696f6e486f7573652f6e6f742d6578656375746564000000604482015260640161052e565b6037546040516370a0823160e01b81526000916001600160a01b0316906370a082319061062d9030906004016116c7565b602060405180830381865afa15801561064a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066e9190611958565b603454604051635d49502b60e01b8152600481018390529192506001600160a01b031690635d49502b90602401600060405180830381600087803b1580156106b557600080fd5b505af11580156106c9573d6000803e3d6000fd5b5050603454604051633dc4ab1d60e01b8152600481018590526001600160a01b039091169250633dc4ab1d9150602401600060405180830381600087803b15801561071357600080fd5b505af1158015610727573d6000803e3d6000fd5b50505060008481526033602052604080822080546001600160a01b0319908116825560018201939093556002018054909216909155517f03af424b0e12d91ea31fe7f2c199fc02c9ede38f9aa1bdc019a8087b41445f7a915061078d9085815260200190565b60405180910390a1505050565b600054604051632474521560e21b8152620100009091046001600160a01b0316906391d14854906107df90600080516020611a48833981519152903390600401611971565b602060405180830381865afa1580156107fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610820919061183a565b61083d5760405163599a6c3360e11b815260040160405180910390fd5b816f6163636f756e74696e67456e67696e6560801b0361087357603480546001600160a01b0319166001600160a01b0383161790555b816c383937ba37b1b7b62a37b5b2b760991b036108a657603780546001600160a01b0319166001600160a01b0383161790555b817fd91f38cf03346b5dc15fb60f9076f866295231ad3c3841a1051f8443f25170d1826040516108d691906116c7565b60405180910390a25050565b600054604051632474521560e21b8152620100009091046001600160a01b0316906391d148549061092790600080516020611aa8833981519152903390600401611971565b602060405180830381865afa158015610944573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610968919061183a565b6109855760405163bb0684b760e01b815260040160405180910390fd5b600060368190556040517f2d4b4ecff7bd7503135271925520a2f6c0d98c9473ffc1a1e72c92502f51b25e9190a1565b600054604051632474521560e21b8152620100009091046001600160a01b0316906391d14854906109fa90600080516020611a68833981519152903390600401611971565b602060405180830381865afa158015610a17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3b919061183a565b610a585760405163200ab6d960e01b815260040160405180910390fd5b60365415610aa85760405162461bcd60e51b815260206004820152601e60248201527f4465627441756374696f6e486f7573652f7374696c6c2d656e61626c65640000604482015260640161052e565b60355460405163d09ef24160e01b8152600481018390526000916001600160a01b03169063d09ef2419060240161010060405180830381865afa158015610af3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b179190611894565b90508060800151600003610b3d5760405162461bcd60e51b815260040161052e90611988565b6000828152603360205260408120600101549003610b6d5760405162461bcd60e51b815260040161052e90611988565b60355460405163514fcac760e01b8152600481018490526001600160a01b039091169063514fcac790602401600060405180830381600087803b158015610bb357600080fd5b505af1158015610bc7573d6000803e3d6000fd5b5050506000838152603360205260409020600281015460808401519154610bfd93506001600160a01b039081169291169061119c565b6040518281527fbea0e66c2d42b9131695ceea7d1aaa21b37e93070cde19c9b5fbd686a32592929060200160405180910390a15050565b60008054604051632474521560e21b8152620100009091046001600160a01b0316906391d1485490610c7a90600080516020611a88833981519152903390600401611971565b602060405180830381865afa158015610c97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cbb919061183a565b610cd85760405163200ab6d960e01b815260040160405180910390fd5b603654600114610d295760405162461bcd60e51b815260206004820152601c60248201527b1119589d105d58dd1a5bdb921bdd5cd94bdb9bdd0b595b98589b195960221b604482015260640161052e565b60008311610d795760405162461bcd60e51b815260206004820181905260248201527f4465627441756374696f6e486f7573652f7a65726f2d636f6c6c61746572616c604482015260640161052e565b603554610d93906001600160a01b038481169116856111f2565b603554603754603454603854604051633bcce46f60e21b81526001600160a01b038781166004830152602482018990529384166044820152918316606483015260ff166084820152600060a482015291169063ef3391bc9060c4016020604051808303816000875af1158015610e0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e319190611958565b60408051606080820183526001600160a01b0386811680845260208085018a81523386880181815260008a815260338552899020975188549087166001600160a01b03199182161789559251600189015551600290970180549790951696909116959095179092558451868152918201529283018790528201529091507fcd7b0cb8704cefa8029a989d148d1233f2ee95cba1e14ae72be8d74c3cb1e26c9060800160405180910390a19392505050565b600054610100900460ff1615808015610f025750600054600160ff909116105b80610f235750610f11306112f6565b158015610f23575060005460ff166001145b610f865760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161052e565b6000805460ff191660011790558015610fa9576000805461ff0019166101001790555b610fb285611305565b603480546001600160a01b038087166001600160a01b03199283161790925560358054868416908316179055600160365560006038556037805492851692909116919091179055801561103f576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b600054604051632474521560e21b8152620100009091046001600160a01b0316906391d148549061108b90600080516020611a48833981519152903390600401611971565b602060405180830381865afa1580156110a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110cc919061183a565b6110e95760405163599a6c3360e11b815260040160405180910390fd5b816b646973636f756e745479706560a01b0361110957603881905561116a565b60405162461bcd60e51b815260206004820152603060248201527f436f6c6c61746572616c41756374696f6e486f7573652f6d6f646966792d756e60448201526f7265636f676e697a65642d706172616d60801b606482015260840161052e565b817fac7c5c1afaef770ec56ac6268cd3f2fbb1035858ead2601d6553157c33036c3a826040516108d691815260200190565b6102a88363a9059cbb60e01b84846040516024016111bb9291906119bb565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611433565b80158061126c5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015611246573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061126a9190611958565b155b6112d75760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606482015260840161052e565b6102a88363095ea7b360e01b84846040516024016111bb9291906119bb565b6001600160a01b03163b151590565b600054610100900460ff166113705760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161052e565b6000805462010000600160b01b031916620100006001600160a01b03841690810291909117909155158061141557506040516301ffc9a760e01b81526001600160a01b038216906301ffc9a7906113d290637965db0b60e01b90600401611825565b602060405180830381865afa1580156113ef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611413919061183a565b155b156103ef576040516384d942fd60e01b815260040160405180910390fd5b6000611488826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166115089092919063ffffffff16565b90508051600014806114a95750808060200190518101906114a9919061183a565b6102a85760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161052e565b6060611517848460008561151f565b949350505050565b6060824710156115805760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161052e565b600080866001600160a01b0316858760405161159c91906119f8565b60006040518083038185875af1925050503d80600081146115d9576040519150601f19603f3d011682016040523d82523d6000602084013e6115de565b606091505b50915091506115ef878383876115fa565b979650505050505050565b6060831561166757825160000361166057611614856112f6565b6116605760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161052e565b5081611517565b611517838381511561167c5781518083602001fd5b8060405162461bcd60e51b815260040161052e9190611a14565b6000602082840312156116a857600080fd5b81356001600160e01b0319811681146116c057600080fd5b9392505050565b6001600160a01b0391909116815260200190565b6000602082840312156116ed57600080fd5b5035919050565b60008060006060848603121561170957600080fd5b505081359360208301359350604090920135919050565b6001600160a01b03811681146103ef57600080fd5b6000806040838503121561174857600080fd5b82359150602083013561175a81611720565b809150509250929050565b60008060006060848603121561177a57600080fd5b833561178581611720565b925060208401359150604084013561179c81611720565b809150509250925092565b600080600080608085870312156117bd57600080fd5b84356117c881611720565b935060208501356117d881611720565b925060408501356117e881611720565b915060608501356117f881611720565b939692955090935050565b6000806040838503121561181657600080fd5b50508035926020909101359150565b6001600160e01b031991909116815260200190565b60006020828403121561184c57600080fd5b815180151581146116c057600080fd5b805161186781611720565b919050565b80516001600160401b038116811461186757600080fd5b805160ff8116811461186757600080fd5b60006101008083850312156118a857600080fd5b604051908101906001600160401b03821181831017156118d857634e487b7160e01b600052604160045260246000fd5b816040526118e58461185c565b81526118f36020850161185c565b60208201526119046040850161185c565b60408201526119156060850161185c565b60608201526080840151608082015260a084015160a082015261193a60c0850161186c565b60c082015261194b60e08501611883565b60e0820152949350505050565b60006020828403121561196a57600080fd5b5051919050565b9182526001600160a01b0316602082015260400190565b6020808252601990820152781119589d105d58dd1a5bdb921bdd5cd94bd95e1958dd5d1959603a1b604082015260600190565b6001600160a01b03929092168252602082015260400190565b60005b838110156119ef5781810151838201526020016119d7565b50506000910152565b60008251611a0a8184602087016119d4565b9190910192915050565b6020815260008251806020840152611a338160408501602087016119d4565b601f01601f1916919091016040019291505056fe3b5d4cc60d3ec3516ee8ae083bd60934f6eb2a6c54b1229985c41bfb092b26039a9aef7c1247d5fc769b0185c052913e39673da29a880317dfd20ebf86f26a49014f8da3222812608c449a44f4705585c5ce052eeb6f9af0af9209c64b0ba2deb0fdd1623e42dbffda4acd8bd643e1cb69f00f0e83abeaa8150ee42cf0fd105ea164736f6c6343000811000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1226,
        "contract": "contracts/makerdao/externalContracts/DebtAuctionHouse.sol:DebtAuctionHouse",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 1229,
        "contract": "contracts/makerdao/externalContracts/DebtAuctionHouse.sol:DebtAuctionHouse",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 25605,
        "contract": "contracts/makerdao/externalContracts/DebtAuctionHouse.sol:DebtAuctionHouse",
        "label": "ACCESS_CONTROL_SINGLETON",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(ISuAccessControl)32864"
      },
      {
        "astId": 25893,
        "contract": "contracts/makerdao/externalContracts/DebtAuctionHouse.sol:DebtAuctionHouse",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 92967,
        "contract": "contracts/makerdao/externalContracts/DebtAuctionHouse.sol:DebtAuctionHouse",
        "label": "bids",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_uint256,t_struct(Bid)92962_storage)"
      },
      {
        "astId": 92970,
        "contract": "contracts/makerdao/externalContracts/DebtAuctionHouse.sol:DebtAuctionHouse",
        "label": "accountingEngine",
        "offset": 0,
        "slot": "52",
        "type": "t_contract(IAccountingEngine)96345"
      },
      {
        "astId": 92973,
        "contract": "contracts/makerdao/externalContracts/DebtAuctionHouse.sol:DebtAuctionHouse",
        "label": "exchange",
        "offset": 0,
        "slot": "53",
        "type": "t_contract(IExchange)24402"
      },
      {
        "astId": 92975,
        "contract": "contracts/makerdao/externalContracts/DebtAuctionHouse.sol:DebtAuctionHouse",
        "label": "contractEnabled",
        "offset": 0,
        "slot": "54",
        "type": "t_uint256"
      },
      {
        "astId": 92977,
        "contract": "contracts/makerdao/externalContracts/DebtAuctionHouse.sol:DebtAuctionHouse",
        "label": "protocolToken",
        "offset": 0,
        "slot": "55",
        "type": "t_address"
      },
      {
        "astId": 92979,
        "contract": "contracts/makerdao/externalContracts/DebtAuctionHouse.sol:DebtAuctionHouse",
        "label": "discountType",
        "offset": 0,
        "slot": "56",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAccountingEngine)96345": {
        "encoding": "inplace",
        "label": "contract IAccountingEngine",
        "numberOfBytes": "20"
      },
      "t_contract(IExchange)24402": {
        "encoding": "inplace",
        "label": "contract IExchange",
        "numberOfBytes": "20"
      },
      "t_contract(ISuAccessControl)32864": {
        "encoding": "inplace",
        "label": "contract ISuAccessControl",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_struct(Bid)92962_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DebtAuctionHouse.Bid)",
        "numberOfBytes": "32",
        "value": "t_struct(Bid)92962_storage"
      },
      "t_struct(Bid)92962_storage": {
        "encoding": "inplace",
        "label": "struct DebtAuctionHouse.Bid",
        "members": [
          {
            "astId": 92957,
            "contract": "contracts/makerdao/externalContracts/DebtAuctionHouse.sol:DebtAuctionHouse",
            "label": "tokenToSell",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 92959,
            "contract": "contracts/makerdao/externalContracts/DebtAuctionHouse.sol:DebtAuctionHouse",
            "label": "amountToSell",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 92961,
            "contract": "contracts/makerdao/externalContracts/DebtAuctionHouse.sol:DebtAuctionHouse",
            "label": "sender",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}