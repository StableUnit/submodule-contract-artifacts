{
  "address": "0x8224e44E7ee2f2A574F1A30EB57a9fB50E65CC10",
  "abi": [
    {
      "inputs": [],
      "name": "BadAccessControlSingleton",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BadDecodedData",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "BadSender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        }
      ],
      "name": "LPTokenNotSupported",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "NotAPool",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAdminError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyDAOError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyLiquidationAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyMintAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyPauserError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyRewardAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyVaultAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SwapByParaSwapError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SwapNotProfitable",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACCESS_CONTROL_SINGLETON",
      "outputs": [
        {
          "internalType": "contract ISuAccessControl",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DAO_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIQUIDATION_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINT_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARD_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VAULT_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "executeOperation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_authControl",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_exchange",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_aavePool",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token2sell",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount2sell",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "swapBy1Inch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token2sell",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount2sell",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenTransferProxy",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct ParaswapData",
          "name": "paraswapData",
          "type": "tuple"
        }
      ],
      "name": "swapByParaswap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenBAmount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct InchData",
          "name": "inchData",
          "type": "tuple"
        }
      ],
      "name": "swapWithFlashLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "numDeployments": 7,
  "solcInputHash": "dd557791782b2a744fb91d3e74be9d42",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"BadAccessControlSingleton\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BadDecodedData\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"BadSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"}],\"name\":\"LPTokenNotSupported\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"NotAPool\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAdminError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyDAOError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyLiquidationAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyMintAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyPauserError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRewardAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyVaultAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapByParaSwapError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapNotProfitable\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACCESS_CONTROL_SINGLETON\",\"outputs\":[{\"internalType\":\"contract ISuAccessControl\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAO_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDATION_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VAULT_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"executeOperation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_authControl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_exchange\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aavePool\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token2sell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount2sell\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swapBy1Inch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token2sell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount2sell\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenTransferProxy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ParaswapData\",\"name\":\"paraswapData\",\"type\":\"tuple\"}],\"name\":\"swapByParaswap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenBAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct InchData\",\"name\":\"inchData\",\"type\":\"tuple\"}],\"name\":\"swapWithFlashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/exchange/contracts/ArbitrageHelper.sol\":\"ArbitrageHelper\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Immutable state\\n/// @notice Functions that return immutable state of the router\\ninterface IPeripheryImmutableState {\\n    /// @return Returns the address of the Uniswap V3 factory\\n    function factory() external view returns (address);\\n\\n    /// @return Returns the address of WETH9\\n    function WETH9() external view returns (address);\\n}\\n\",\"keccak256\":\"0x7affcfeb5127c0925a71d6a65345e117c33537523aeca7bc98085ead8452519d\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\",\"keccak256\":\"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd\",\"license\":\"GPL-2.0-or-later\"},\"contracts/access-control/SuAccessRoles.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title SuAccessRoles Library\\n * @dev SuAuthenticated and SuAccessControlSingleton need to have this constants\\n * Hierarchy:\\n *      1. DAO - can give admins and system roles\\n *      2.1. Admin - can set Pausers\\n *      2.2. System - includes Minter, Vault, Liquidation and Reward roles, don't have access to give some roles.\\n *      3. Pauser - can pause protocol, don't have access to give some roles.\\n */\\nabstract contract SuAccessRoles {\\n    bytes32 public constant ADMIN_ROLE = 0x00;\\n\\n    bytes32 public constant DAO_ROLE = keccak256(\\\"DAO_ROLE\\\");\\n\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    // system roles\\n    bytes32 public constant MINT_ACCESS_ROLE = keccak256(\\\"MINT_ACCESS_ROLE\\\");\\n    bytes32 public constant VAULT_ACCESS_ROLE = keccak256(\\\"VAULT_ACCESS_ROLE\\\");\\n    bytes32 public constant LIQUIDATION_ACCESS_ROLE = keccak256(\\\"LIQUIDATION_ACCESS_ROLE\\\");\\n    bytes32 public constant REWARD_ACCESS_ROLE = keccak256(\\\"REWARD_ACCESS_ROLE\\\");\\n}\\n\",\"keccak256\":\"0xb95e8f839172a5f9680483be42cbd5d8664bf97340a9729840a0875064c78494\",\"license\":\"BSL 1.1\"},\"contracts/access-control/SuAuthenticated.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/ISuAccessControl.sol\\\";\\nimport \\\"./SuAccessRoles.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @title SuAuthenticated\\n * @dev other contracts should inherit to be authenticated\\n */\\nabstract contract SuAuthenticated is Initializable, SuAccessRoles, IERC165Upgradeable {\\n    // @dev the address of SuAccessControlSingleton - it should be one for all contract that inherits SuAuthenticated\\n    ISuAccessControl public ACCESS_CONTROL_SINGLETON;\\n\\n    error OnlyDAOError();\\n    error OnlyAdminError();\\n    error OnlyPauserError();\\n    error OnlyVaultAccessError();\\n    error OnlyLiquidationAccessError();\\n    error OnlyMintAccessError();\\n    error OnlyRewardAccessError();\\n    error BadAccessControlSingleton();\\n\\n    // @dev should be passed in constructor\\n    function __SuAuthenticated_init(address _accessControlSingleton) internal onlyInitializing {\\n        ACCESS_CONTROL_SINGLETON = ISuAccessControl(_accessControlSingleton);\\n        if (!ISuAccessControl(_accessControlSingleton).supportsInterface(type(IAccessControlUpgradeable).interfaceId)) revert BadAccessControlSingleton();\\n    }\\n\\n    /** CORE ROLES */\\n\\n    modifier onlyDAO() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(DAO_ROLE, msg.sender)) revert OnlyDAOError();\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(ADMIN_ROLE, msg.sender)) revert OnlyAdminError();\\n        _;\\n    }\\n\\n    modifier onlyPauser() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(PAUSER_ROLE, msg.sender)) revert OnlyPauserError();\\n        _;\\n    }\\n\\n    /** SYSTEM ROLES */\\n\\n    modifier onlyVaultAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(VAULT_ACCESS_ROLE, msg.sender)) revert OnlyVaultAccessError();\\n        _;\\n    }\\n\\n    modifier onlyLiquidationAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(LIQUIDATION_ACCESS_ROLE, msg.sender)) revert OnlyLiquidationAccessError();\\n        _;\\n    }\\n\\n    modifier onlyMintAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(MINT_ACCESS_ROLE, msg.sender)) revert OnlyMintAccessError();\\n        _;\\n    }\\n\\n    modifier onlyRewardAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(REWARD_ACCESS_ROLE, msg.sender)) revert OnlyRewardAccessError();\\n        _;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return ACCESS_CONTROL_SINGLETON.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xd446af325be472a6319da234f5411733b1f6e243a21d1bd40fa922ba1d59dde5\",\"license\":\"BSL 1.1\"},\"contracts/exchange/contracts/ArbitrageHelper.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../../access-control/SuAuthenticated.sol\\\";\\nimport \\\"../interfaces/IArbitrageHelper.sol\\\";\\nimport \\\"../interfaces/IExchange.sol\\\";\\nimport \\\"../interfaces/3rd-party/aave/IAavePool.sol\\\";\\nimport \\\"../interfaces/3rd-party/curve/ICurveLP.sol\\\";\\n// import \\\"../interfaces/ICurveV1Adapter.sol\\\";\\n\\n// TODO: make swapBy***() internal and skip test with them\\ncontract ArbitrageHelper is SuAuthenticated, IArbitrageHelper {\\n    IAavePool internal AAVE_POOL;\\n    IExchange internal EXCHANGE;\\n\\n    function initialize(address _authControl, address _exchange, address _aavePool) public initializer {\\n        __SuAuthenticated_init(_authControl);\\n\\n        EXCHANGE = IExchange(_exchange);\\n        AAVE_POOL = IAavePool(_aavePool);\\n    }\\n\\n    // @notice make a swap using Paraswap. Sell {amount2sell} token2sell to token using route encoded in paraswapData.data\\n    // We get that data in bot using ParaSwap API (apiv5.paraswap.io)\\n    // Docs: https://developers.paraswap.network/api/build-parameters-for-transaction\\n    function swapByParaswap(address token2sell, uint256 amount2sell, ParaswapData memory paraswapData) public {\\n        // All token transfers are through tokenTransferProxy, so we need to make approve to this contract\\n        TransferHelper.safeApprove(token2sell, paraswapData.tokenTransferProxy, amount2sell);\\n\\n        (bool success, bytes memory resp) = paraswapData.contractAddress.call(paraswapData.data);\\n        if (!success) {\\n            revert SwapByParaSwapError();\\n        }\\n    }\\n\\n    // @notice as in swapByParaswap, look into utils/1inch.ts\\n    // Docs: https://docs.1inch.io/docs/aggregation-protocol/api/swap-params/\\n    function swapBy1Inch(address token2sell, uint256 amount2sell, address contractAddress, bytes memory data) public {\\n        TransferHelper.safeApprove(token2sell, contractAddress, amount2sell);\\n\\n        (bool success, bytes memory resp) = contractAddress.call(data);\\n        if (!success) {\\n            revert SwapByParaSwapError();\\n        }\\n    }\\n\\n    function swapWithFlashLoan(\\n        uint256 orderId,\\n        address tokenA,\\n        address tokenB,\\n        uint256 tokenBAmount,\\n        InchData memory inchData\\n    ) public {\\n        bytes memory data = abi.encode(FlashCallbackData({\\n            orderId: orderId,\\n            tokenA: tokenA,\\n            tokenB: tokenB,\\n            tokenBAmount: tokenBAmount,\\n            recipient: msg.sender,\\n            inchData: inchData\\n        }));\\n        AAVE_POOL.flashLoanSimple(address(this), tokenB, tokenBAmount, data, 0);\\n    }\\n\\n    // @notice This is callback function from aave. flashLoanSimple call (msg.sender).executeOperation(...) after transferring loan to sender\\n    function executeOperation(address asset, uint256 amount, uint256 fee, address sender, bytes calldata data) external returns (bool) {\\n        FlashCallbackData memory decoded = abi.decode(data, (FlashCallbackData));\\n\\n        if (msg.sender != address(AAVE_POOL)) revert NotAPool(msg.sender);\\n        if (sender != address(this)) revert BadSender(sender);\\n        if (asset != decoded.tokenB || amount != decoded.tokenBAmount) revert BadDecodedData();\\n\\n        uint256 maxOrderOutAmount = EXCHANGE.getExpectedOrderOutcome(decoded.orderId);\\n        uint256 amountToSend = maxOrderOutAmount > amount ? amount : maxOrderOutAmount;\\n        TransferHelper.safeTransfer(asset, decoded.recipient, amountToSend);\\n\\n        (uint256 tokenAReceived, uint256 outAmount) = EXCHANGE.fillOrder(\\n            decoded.orderId,\\n            amountToSend,\\n            decoded.recipient,\\n            false\\n        );\\n        uint256 tokenBLeft = amountToSend - outAmount;\\n\\n        TransferHelper.safeTransferFrom(decoded.tokenA, decoded.recipient, address(this), tokenAReceived);\\n\\n        uint256 balanceBefore = IERC20(asset).balanceOf(address(this));\\n        swapBy1Inch(decoded.tokenA, tokenAReceived, decoded.inchData.contractAddress, decoded.inchData.data);\\n\\n        uint256 balanceAfter = IERC20(asset).balanceOf(address(this));\\n        uint256 tokenBReceived = balanceAfter - balanceBefore;\\n\\n        uint256 swapProfit = tokenBReceived - amountToSend;\\n        if (swapProfit <= fee) revert SwapNotProfitable();\\n\\n        // Send swapped {stablecoinToken} minus fee from flash-loan to liquidator (userProfit)\\n        TransferHelper.safeTransfer(asset, decoded.recipient, swapProfit - tokenBLeft - fee);\\n\\n        // Send tokenBToRepay (Repay borrow)\\n        TransferHelper.safeApprove(asset, address(AAVE_POOL), amount + fee);\\n        return true;\\n    }\\n\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x59a29f30a0a2eb62dc179dccf514f7164e8243fc2c0916defd390cbec48a950a\",\"license\":\"BSL 1.1\"},\"contracts/exchange/interfaces/3rd-party/aave/IAavePool.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n// import {IPoolAddressesProvider} from './IPoolAddressesProvider.sol';\\n// import {DataTypes} from '../protocol/libraries/types/DataTypes.sol';\\n\\n/**\\n * @title IPool\\n * @author Aave\\n * @notice Defines the basic interface for an Aave Pool.\\n */\\ninterface IAavePool {\\n    /**\\n     * @dev Emitted on mintUnbacked()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the supply\\n   * @param onBehalfOf The beneficiary of the supplied assets, receiving the aTokens\\n   * @param amount The amount of supplied assets\\n   * @param referralCode The referral code used\\n   */\\n    event MintUnbacked(\\n        address indexed reserve,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 amount,\\n        uint16 indexed referralCode\\n    );\\n\\n    /**\\n     * @dev Emitted on backUnbacked()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param backer The address paying for the backing\\n   * @param amount The amount added as backing\\n   * @param fee The amount paid in fees\\n   */\\n    event BackUnbacked(address indexed reserve, address indexed backer, uint256 amount, uint256 fee);\\n\\n    /**\\n     * @dev Emitted on supply()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the supply\\n   * @param onBehalfOf The beneficiary of the supply, receiving the aTokens\\n   * @param amount The amount supplied\\n   * @param referralCode The referral code used\\n   */\\n    event Supply(\\n        address indexed reserve,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 amount,\\n        uint16 indexed referralCode\\n    );\\n\\n    /**\\n     * @dev Emitted on withdraw()\\n   * @param reserve The address of the underlying asset being withdrawn\\n   * @param user The address initiating the withdrawal, owner of aTokens\\n   * @param to The address that will receive the underlying\\n   * @param amount The amount to be withdrawn\\n   */\\n    event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n    /**\\n     * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n   * @param reserve The address of the underlying asset being borrowed\\n   * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n   * initiator of the transaction on flashLoan()\\n   * @param onBehalfOf The address that will be getting the debt\\n   * @param amount The amount borrowed out\\n   * @param interestRateMode The rate mode: 1 for Stable, 2 for Variable\\n   * @param borrowRate The numeric rate at which the user has borrowed, expressed in ray\\n   * @param referralCode The referral code used\\n   */\\n//    event Borrow(\\n//        address indexed reserve,\\n//        address user,\\n//        address indexed onBehalfOf,\\n//        uint256 amount,\\n//        DataTypes.InterestRateMode interestRateMode,\\n//        uint256 borrowRate,\\n//        uint16 indexed referralCode\\n//    );\\n\\n    /**\\n     * @dev Emitted on repay()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The beneficiary of the repayment, getting his debt reduced\\n   * @param repayer The address of the user initiating the repay(), providing the funds\\n   * @param amount The amount repaid\\n   * @param useATokens True if the repayment is done using aTokens, `false` if done with underlying asset directly\\n   */\\n    event Repay(\\n        address indexed reserve,\\n        address indexed user,\\n        address indexed repayer,\\n        uint256 amount,\\n        bool useATokens\\n    );\\n\\n    /**\\n     * @dev Emitted on swapBorrowRateMode()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user swapping his rate mode\\n   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n   */\\n//    event SwapBorrowRateMode(\\n//        address indexed reserve,\\n//        address indexed user,\\n//        DataTypes.InterestRateMode interestRateMode\\n//    );\\n\\n    /**\\n     * @dev Emitted on borrow(), repay() and liquidationCall() when using isolated assets\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param totalDebt The total isolation mode debt for the reserve\\n   */\\n    event IsolationModeTotalDebtUpdated(address indexed asset, uint256 totalDebt);\\n\\n    /**\\n     * @dev Emitted when the user selects a certain asset category for eMode\\n   * @param user The address of the user\\n   * @param categoryId The category id\\n   */\\n    event UserEModeSet(address indexed user, uint8 categoryId);\\n\\n    /**\\n     * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   */\\n    event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n    /**\\n     * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   */\\n    event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n    /**\\n     * @dev Emitted on rebalanceStableBorrowRate()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user for which the rebalance has been executed\\n   */\\n    event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n    /**\\n     * @dev Emitted on flashLoan()\\n   * @param target The address of the flash loan receiver contract\\n   * @param initiator The address initiating the flash loan\\n   * @param asset The address of the asset being flash borrowed\\n   * @param amount The amount flash borrowed\\n   * @param interestRateMode The flashloan mode: 0 for regular flashloan, 1 for Stable debt, 2 for Variable debt\\n   * @param premium The fee flash borrowed\\n   * @param referralCode The referral code used\\n   */\\n//    event FlashLoan(\\n//        address indexed target,\\n//        address initiator,\\n//        address indexed asset,\\n//        uint256 amount,\\n//        DataTypes.InterestRateMode interestRateMode,\\n//        uint256 premium,\\n//        uint16 indexed referralCode\\n//    );\\n\\n    /**\\n     * @dev Emitted when a borrower is liquidated.\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param liquidatedCollateralAmount The amount of collateral received by the liquidator\\n   * @param liquidator The address of the liquidator\\n   * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   */\\n    event LiquidationCall(\\n        address indexed collateralAsset,\\n        address indexed debtAsset,\\n        address indexed user,\\n        uint256 debtToCover,\\n        uint256 liquidatedCollateralAmount,\\n        address liquidator,\\n        bool receiveAToken\\n    );\\n\\n    /**\\n     * @dev Emitted when the state of a reserve is updated.\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param liquidityRate The next liquidity rate\\n   * @param stableBorrowRate The next stable borrow rate\\n   * @param variableBorrowRate The next variable borrow rate\\n   * @param liquidityIndex The next liquidity index\\n   * @param variableBorrowIndex The next variable borrow index\\n   */\\n    event ReserveDataUpdated(\\n        address indexed reserve,\\n        uint256 liquidityRate,\\n        uint256 stableBorrowRate,\\n        uint256 variableBorrowRate,\\n        uint256 liquidityIndex,\\n        uint256 variableBorrowIndex\\n    );\\n\\n    /**\\n     * @dev Emitted when the protocol treasury receives minted aTokens from the accrued interest.\\n   * @param reserve The address of the reserve\\n   * @param amountMinted The amount minted to the treasury\\n   */\\n    event MintedToTreasury(address indexed reserve, uint256 amountMinted);\\n\\n    /**\\n     * @notice Mints an `amount` of aTokens to the `onBehalfOf`\\n   * @param asset The address of the underlying asset to mint\\n   * @param amount The amount to mint\\n   * @param onBehalfOf The address that will receive the aTokens\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n    function mintUnbacked(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @notice Back the current unbacked underlying with `amount` and pay `fee`.\\n   * @param asset The address of the underlying asset to back\\n   * @param amount The amount to back\\n   * @param fee The amount paid in fees\\n   * @return The backed amount\\n   */\\n    function backUnbacked(address asset, uint256 amount, uint256 fee) external returns (uint256);\\n\\n    /**\\n     * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n    function supply(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\\n\\n    /**\\n     * @notice Supply with transfer approval of asset to be supplied done via permit function\\n   * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param deadline The deadline timestamp that the permit is valid\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param permitV The V parameter of ERC712 permit sig\\n   * @param permitR The R parameter of ERC712 permit sig\\n   * @param permitS The S parameter of ERC712 permit sig\\n   */\\n    function supplyWithPermit(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode,\\n        uint256 deadline,\\n        uint8 permitV,\\n        bytes32 permitR,\\n        bytes32 permitS\\n    ) external;\\n\\n    /**\\n     * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n   * @param asset The address of the underlying asset to withdraw\\n   * @param amount The underlying amount to be withdrawn\\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n   * @param to The address that will receive the underlying, same as msg.sender if the user\\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n   *   different wallet\\n   * @return The final amount withdrawn\\n   */\\n    function withdraw(address asset, uint256 amount, address to) external returns (uint256);\\n\\n    /**\\n     * @notice Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n   * already supplied enough collateral, or he was given enough allowance by a credit delegator on the\\n   * corresponding debt token (StableDebtToken or VariableDebtToken)\\n   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n   * @param asset The address of the underlying asset to borrow\\n   * @param amount The amount to be borrowed\\n   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param onBehalfOf The address of the user who will receive the debt. Should be the address of the borrower itself\\n   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n   * if he has been given credit delegation allowance\\n   */\\n    function borrow(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        uint16 referralCode,\\n        address onBehalfOf\\n    ) external;\\n\\n    /**\\n     * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf The address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @return The final amount repaid\\n   */\\n    function repay(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        address onBehalfOf\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Repay with transfer approval of asset to be repaid done via permit function\\n   * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @param deadline The deadline timestamp that the permit is valid\\n   * @param permitV The V parameter of ERC712 permit sig\\n   * @param permitR The R parameter of ERC712 permit sig\\n   * @param permitS The S parameter of ERC712 permit sig\\n   * @return The final amount repaid\\n   */\\n    function repayWithPermit(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        address onBehalfOf,\\n        uint256 deadline,\\n        uint8 permitV,\\n        bytes32 permitR,\\n        bytes32 permitS\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Repays a borrowed `amount` on a specific reserve using the reserve aTokens, burning the\\n   * equivalent debt tokens\\n   * - E.g. User repays 100 USDC using 100 aUSDC, burning 100 variable/stable debt tokens\\n   * @dev  Passing uint256.max as amount will clean up any residual aToken dust balance, if the user aToken\\n   * balance is not enough to cover the whole debt\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @return The final amount repaid\\n   */\\n    function repayWithATokens(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Allows a borrower to swap his debt between stable and variable mode, or vice versa\\n   * @param asset The address of the underlying asset borrowed\\n   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n   */\\n    function swapBorrowRateMode(address asset, uint256 interestRateMode) external;\\n\\n    /**\\n     * @notice Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n   * - Users can be rebalanced if the following conditions are satisfied:\\n   *     1. Usage ratio is above 95%\\n   *     2. the current supply APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too\\n   *        much has been borrowed at a stable rate and suppliers are not earning enough\\n   * @param asset The address of the underlying asset borrowed\\n   * @param user The address of the user to be rebalanced\\n   */\\n    function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n    /**\\n     * @notice Allows suppliers to enable/disable a specific supplied asset as collateral\\n   * @param asset The address of the underlying asset supplied\\n   * @param useAsCollateral True if the user wants to use the supply as collateral, false otherwise\\n   */\\n    function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n    /**\\n     * @notice Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   */\\n    function liquidationCall(\\n        address collateralAsset,\\n        address debtAsset,\\n        address user,\\n        uint256 debtToCover,\\n        bool receiveAToken\\n    ) external;\\n\\n    /**\\n     * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n   * into consideration. For further details please visit https://docs.aave.com/developers/\\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanReceiver interface\\n   * @param assets The addresses of the assets being flash-borrowed\\n   * @param amounts The amounts of the assets being flash-borrowed\\n   * @param interestRateModes Types of the debt to open if the flash loan is not returned:\\n   *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n   *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n    function flashLoan(\\n        address receiverAddress,\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata interestRateModes,\\n        address onBehalfOf,\\n        bytes calldata params,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n   * into consideration. For further details please visit https://docs.aave.com/developers/\\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanSimpleReceiver interface\\n   * @param asset The address of the asset being flash-borrowed\\n   * @param amount The amount of the asset being flash-borrowed\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n    function flashLoanSimple(\\n        address receiverAddress,\\n        address asset,\\n        uint256 amount,\\n        bytes calldata params,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @notice Returns the user account data across all the reserves\\n   * @param user The address of the user\\n   * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed\\n   * @return totalDebtBase The total debt of the user in the base currency used by the price feed\\n   * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed\\n   * @return currentLiquidationThreshold The liquidation threshold of the user\\n   * @return ltv The loan to value of The user\\n   * @return healthFactor The current health factor of the user\\n   */\\n    function getUserAccountData(\\n        address user\\n    )\\n    external\\n    view\\n    returns (\\n        uint256 totalCollateralBase,\\n        uint256 totalDebtBase,\\n        uint256 availableBorrowsBase,\\n        uint256 currentLiquidationThreshold,\\n        uint256 ltv,\\n        uint256 healthFactor\\n    );\\n\\n    /**\\n     * @notice Initializes a reserve, activating it, assigning an aToken and debt tokens and an\\n   * interest rate strategy\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param aTokenAddress The address of the aToken that will be assigned to the reserve\\n   * @param stableDebtAddress The address of the StableDebtToken that will be assigned to the reserve\\n   * @param variableDebtAddress The address of the VariableDebtToken that will be assigned to the reserve\\n   * @param interestRateStrategyAddress The address of the interest rate strategy contract\\n   */\\n    function initReserve(\\n        address asset,\\n        address aTokenAddress,\\n        address stableDebtAddress,\\n        address variableDebtAddress,\\n        address interestRateStrategyAddress\\n    ) external;\\n\\n    /**\\n     * @notice Drop a reserve\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   */\\n    function dropReserve(address asset) external;\\n\\n    /**\\n     * @notice Updates the address of the interest rate strategy contract\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param rateStrategyAddress The address of the interest rate strategy contract\\n   */\\n    function setReserveInterestRateStrategyAddress(\\n        address asset,\\n        address rateStrategyAddress\\n    ) external;\\n\\n    /**\\n     * @notice Sets the configuration bitmap of the reserve as a whole\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param configuration The new configuration bitmap\\n   */\\n//    function setConfiguration(\\n//        address asset,\\n//        DataTypes.ReserveConfigurationMap calldata configuration\\n//    ) external;\\n\\n    /**\\n     * @notice Returns the configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The configuration of the reserve\\n   */\\n//    function getConfiguration(\\n//        address asset\\n//    ) external view returns (DataTypes.ReserveConfigurationMap memory);\\n\\n    /**\\n     * @notice Returns the configuration of the user across all the reserves\\n   * @param user The user address\\n   * @return The configuration of the user\\n   */\\n//    function getUserConfiguration(\\n//        address user\\n//    ) external view returns (DataTypes.UserConfigurationMap memory);\\n\\n    /**\\n     * @notice Returns the normalized income of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve's normalized income\\n   */\\n    function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the normalized variable debt per unit of asset\\n   * @dev WARNING: This function is intended to be used primarily by the protocol itself to get a\\n   * \\\"dynamic\\\" variable index based on time, current stored index and virtual rate at the current\\n   * moment (approx. a borrower would get if opening a position). This means that is always used in\\n   * combination with variable debt supply/balances.\\n   * If using this function externally, consider that is possible to have an increasing normalized\\n   * variable debt that is not equivalent to how the variable debt index would be updated in storage\\n   * (e.g. only updates with non-zero variable debt supply)\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve normalized variable debt\\n   */\\n    function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the state and configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The state and configuration data of the reserve\\n   */\\n//    function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n    /**\\n     * @notice Validates and finalizes an aToken transfer\\n   * @dev Only callable by the overlying aToken of the `asset`\\n   * @param asset The address of the underlying asset of the aToken\\n   * @param from The user from which the aTokens are transferred\\n   * @param to The user receiving the aTokens\\n   * @param amount The amount being transferred/withdrawn\\n   * @param balanceFromBefore The aToken balance of the `from` user before the transfer\\n   * @param balanceToBefore The aToken balance of the `to` user before the transfer\\n   */\\n    function finalizeTransfer(\\n        address asset,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 balanceFromBefore,\\n        uint256 balanceToBefore\\n    ) external;\\n\\n    /**\\n     * @notice Returns the list of the underlying assets of all the initialized reserves\\n   * @dev It does not include dropped reserves\\n   * @return The addresses of the underlying assets of the initialized reserves\\n   */\\n    function getReservesList() external view returns (address[] memory);\\n\\n    /**\\n     * @notice Returns the address of the underlying asset of a reserve by the reserve id as stored in the DataTypes.ReserveData struct\\n   * @param id The id of the reserve as stored in the DataTypes.ReserveData struct\\n   * @return The address of the reserve associated with id\\n   */\\n    function getReserveAddressById(uint16 id) external view returns (address);\\n\\n    /**\\n     * @notice Updates the protocol fee on the bridging\\n   * @param bridgeProtocolFee The part of the premium sent to the protocol treasury\\n   */\\n    function updateBridgeProtocolFee(uint256 bridgeProtocolFee) external;\\n\\n    /**\\n     * @notice Updates flash loan premiums. Flash loan premium consists of two parts:\\n   * - A part is sent to aToken holders as extra, one time accumulated interest\\n   * - A part is collected by the protocol treasury\\n   * @dev The total premium is calculated on the total borrowed amount\\n   * @dev The premium to protocol is calculated on the total premium, being a percentage of `flashLoanPremiumTotal`\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param flashLoanPremiumTotal The total premium, expressed in bps\\n   * @param flashLoanPremiumToProtocol The part of the premium sent to the protocol treasury, expressed in bps\\n   */\\n    function updateFlashloanPremiums(\\n        uint128 flashLoanPremiumTotal,\\n        uint128 flashLoanPremiumToProtocol\\n    ) external;\\n\\n    /**\\n     * @notice Configures a new category for the eMode.\\n   * @dev In eMode, the protocol allows very high borrowing power to borrow assets of the same category.\\n   * The category 0 is reserved as it's the default for volatile assets\\n   * @param id The id of the category\\n   * @param config The configuration of the category\\n   */\\n//    function configureEModeCategory(uint8 id, DataTypes.EModeCategory memory config) external;\\n\\n    /**\\n     * @notice Returns the data of an eMode category\\n   * @param id The id of the category\\n   * @return The configuration data of the category\\n   */\\n//    function getEModeCategoryData(uint8 id) external view returns (DataTypes.EModeCategory memory);\\n\\n    /**\\n     * @notice Allows a user to use the protocol in eMode\\n   * @param categoryId The id of the category\\n   */\\n    function setUserEMode(uint8 categoryId) external;\\n\\n    /**\\n     * @notice Returns the eMode the user is using\\n   * @param user The address of the user\\n   * @return The eMode id\\n   */\\n    function getUserEMode(address user) external view returns (uint256);\\n\\n    /**\\n     * @notice Resets the isolation mode total debt of the given asset to zero\\n   * @dev It requires the given asset has zero debt ceiling\\n   * @param asset The address of the underlying asset to reset the isolationModeTotalDebt\\n   */\\n    function resetIsolationModeTotalDebt(address asset) external;\\n\\n    /**\\n     * @notice Returns the percentage of available liquidity that can be borrowed at once at stable rate\\n   * @return The percentage of available liquidity to borrow, expressed in bps\\n   */\\n    function MAX_STABLE_RATE_BORROW_SIZE_PERCENT() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the total fee on flash loans\\n   * @return The total fee on flashloans\\n   */\\n    function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint128);\\n\\n    /**\\n     * @notice Returns the part of the bridge fees sent to protocol\\n   * @return The bridge fee sent to the protocol treasury\\n   */\\n    function BRIDGE_PROTOCOL_FEE() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the part of the flashloan fees sent to protocol\\n   * @return The flashloan fee sent to the protocol treasury\\n   */\\n    function FLASHLOAN_PREMIUM_TO_PROTOCOL() external view returns (uint128);\\n\\n    /**\\n     * @notice Returns the maximum number of reserves supported to be listed in this Pool\\n   * @return The maximum number of reserves supported\\n   */\\n    function MAX_NUMBER_RESERVES() external view returns (uint16);\\n\\n    /**\\n     * @notice Mints the assets accrued through the reserve factor to the treasury in the form of aTokens\\n   * @param assets The list of reserves for which the minting needs to be executed\\n   */\\n    function mintToTreasury(address[] calldata assets) external;\\n\\n    /**\\n     * @notice Rescue and transfer tokens locked in this contract\\n   * @param token The address of the token\\n   * @param to The address of the recipient\\n   * @param amount The amount of token to transfer\\n   */\\n    function rescueTokens(address token, address to, uint256 amount) external;\\n\\n    /**\\n     * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n   * @dev Deprecated: Use the `supply` function instead\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n    function deposit(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\\n}\\n\",\"keccak256\":\"0x298539b49f4a91efddebe932425e9cdce58791325fe20951dc7dc2a4a9adae46\",\"license\":\"AGPL-3.0\"},\"contracts/exchange/interfaces/3rd-party/curve/ICurveLP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICurveLP {\\n    function add_liquidity(uint256[] memory amounts, uint256 minMintAmount) external;\\n\\n    function remove_liquidity(uint256, uint256[3] memory) external;\\n\\n    // function remove_liquidity(uint256, uint256[3] memory) external returns (uint256[3] memory);\\n\\n    /// @notice Removes liquidity from the pool in a specified asset\\n    function remove_liquidity_one_coin(uint256 tokenAmount, int128 i, uint256 minAmount) external;\\n\\n    function coins(uint256 i) external view returns (address);\\n\\n    function calc_add_one_coin(uint256[] memory amounts, bool deposit) external view returns (uint256);\\n\\n    function get_virtual_price() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x298864c33e109b27ddfb4b0a95d5b6d11b2b3f5a8c46454560ee2f6ca50b6e76\",\"license\":\"MIT\"},\"contracts/exchange/interfaces/IArbitrageHelper.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\npragma solidity ^0.8.0;\\n\\nstruct FlashCallbackData {\\n    uint256 orderId;\\n    address tokenA;\\n    address tokenB;\\n    uint256 tokenBAmount;\\n    address recipient;\\n    InchData inchData;\\n}\\n\\nstruct ParaswapData {\\n    address contractAddress;\\n    address tokenTransferProxy;\\n    bytes data;\\n}\\n\\nstruct InchData {\\n    address contractAddress;\\n    bytes data;\\n}\\n\\ninterface IArbitrageHelper {\\n    /* ===================== ERRORS ===================== */\\n    error NotAPool(address sender);\\n    error SwapNotProfitable();\\n    error SwapByParaSwapError();\\n    error BadDecodedData();\\n    error BadSender(address sender);\\n    error LPTokenNotSupported(address lpToken);\\n\\n    /* ===================== EVENTS ===================== */\\n    // event SwapByUniswap(address tokenA, address tokenB);\\n\\n    /* ==================== MUTABLE METHODS ==================== */\\n    function swapWithFlashLoan(\\n        uint256 orderId,\\n        address tokenA,\\n        address tokenB,\\n        uint256 tokenBAmount,\\n        InchData memory inchData\\n    ) external;\\n\\n    // @notice callback for AAVE flash-loan. Could be used only by AAVE pool.\\n    function executeOperation(address asset, uint256 amount, uint256 fee, address sender, bytes calldata data) external returns (bool);\\n}\",\"keccak256\":\"0x162aa84d9cbd10f6344d02dc50c266ad6d400c4855fc686f78a0c41e8995ee7f\",\"license\":\"BSL 1.1\"},\"contracts/exchange/interfaces/IExchange.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\npragma solidity ^0.8.0;\\n\\nenum DiscountType {\\n    aggressive,\\n    middle,\\n    conservative\\n}\\n\\nstruct Order {\\n    address token2sell;\\n    uint256 amountLeft;\\n    address token2buy;\\n    uint256 token2buyAmount;\\n    address beneficiary;\\n    uint256 creationTimestamp;\\n    DiscountType discountType;\\n    address caller;\\n}\\n\\nstruct OrderWithId {\\n    Order order;\\n    uint256 orderId;\\n}\\n\\nstruct UnwrapData {\\n    address token;\\n    uint256 amount;\\n}\\n\\ninterface IExchange {\\n    /* ===================== ERRORS ===================== */\\n    error OrderExist(uint256 orderId);\\n    error OrderNotExist(uint256 orderId);\\n    error IncorrectToken(address orderToken2buy, address inToken);\\n    error SmallAmountLeft();\\n    error UserIsNotBeneficiary();\\n    error IsNotTopStaker(address staker);\\n    error OrderNotForThisStaker(uint256 orderId, address staker);\\n\\n    /* ======================== EVENTS ========================= */\\n    event OrderAdded(uint256 orderId);\\n    event OrderCanceled(uint256 orderId);\\n    event OrderFilled(uint256 orderId);\\n    event OrderFilledPartially(uint256 orderId);\\n    event LpOrdersAdded(address LPToken, uint256[] orderIds);\\n\\n    /* ========================= VARS ========================== */\\n    function lpTokenToPool (address lpToken) external returns (address pool);\\n\\n    /* ==================== MUTABLE METHODS ==================== */\\n\\n    // Pass nCooinsLp = 0, if token2sell isn't LP-token\\n    function addOrder (\\n        address token2sell,\\n        uint256 amount2sell,\\n        address token2buy,\\n        address beneficiary,\\n        DiscountType discountType,\\n        uint16 nCoinsLp\\n    ) external returns (uint256[] memory);\\n\\n    function cancelOrder (uint256 orderId) external;\\n\\n    function fillOrder (\\n        uint256 orderId,\\n        uint256 tokenBAmount,\\n        address user,\\n        bool needCallback\\n    ) external returns (uint256 inAmount, uint256 outAmount);\\n\\n    function setPriceCurve(DiscountType discountType, uint256[2] calldata newPriceCurve) external;\\n\\n    function setLPTokenPool(address lpToken, address pool) external;\\n\\n    /* ==================== VIEW METHODS ==================== */\\n    function getOrder (uint256 orderId) external view returns (Order memory);\\n\\n    // @return how much tokenB user will receive after full filling of order\\n    function getExpectedOrderOutcome (uint256 orderId) external view returns (uint256);\\n\\n    function getOrdersCount () external view returns (uint256);\\n\\n    function getOrderAt (uint256 index) external view returns (Order memory);\\n\\n    function getAllOrders () external view returns (OrderWithId[] memory);\\n}\",\"keccak256\":\"0x6bdff38ae430e8972b22a2a47e9e24f4aa1ab7e1b81fed81ee1515eaa12cf98b\",\"license\":\"BSL 1.1\"},\"contracts/interfaces/ISuAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\nimport \\\"../access-control/SuAccessRoles.sol\\\";\\n\\n/**\\n * @notice Access control for contracts\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n **/\\ninterface ISuAccessControl is IAccessControlUpgradeable, IERC165Upgradeable {}\\n\",\"keccak256\":\"0x74430f1425e7710c9b3e159d433c34e8d0237cd32b156ca7639057f39d7fd324\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60808060405234610016576111b7908161001c8239f35b600080fdfe608080604052600436101561001357600080fd5b600090813560e01c90816301ffc9a714610d7b5750806303ee9f2214610d5057806314c376dc14610d155780631b11d0ff1461077857806326e391e8146105d3578063438280dd1461059857806375b238fc1461057c5780638ada99ee146105295780638e5313e0146104ee5780639a239d76146103e1578063c0c53b8b1461016e578063dc97e84e14610133578063e63ab1e9146100f85763e9c26518146100bb57600080fd5b346100f557806003193601126100f55760206040517f3b5d4cc60d3ec3516ee8ae083bd60934f6eb2a6c54b1229985c41bfb092b26038152f35b80fd5b50346100f557806003193601126100f55760206040517f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a8152f35b50346100f557806003193601126100f55760206040517f9a9aef7c1247d5fc769b0185c052913e39673da29a880317dfd20ebf86f26a498152f35b50346100f55760603660031901126100f557610188610e11565b610190610e2c565b90610199610e42565b9183549060ff8260081c1615918280936103d4575b80156103bd575b156103615760ff198116600117865582610350575b5084549260ff8460081c16156102f75762010000600160b01b03601082901b1662010000600160b01b03198516811787556040516301ffc9a760e01b8152637965db0b60e01b600482015290956001600160a01b03929091906020908290602490829087165afa9081156102ec5788916102be575b50156102ac578160018060a01b031993168360025416176002551690600154161760015561026b578280f35b610100600160b01b031916178155604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a138808280f35b6040516384d942fd60e01b8152600490fd5b6102df915060203d81116102e5575b6102d78183610e6c565b810190610f47565b3861023f565b503d6102cd565b6040513d8a823e3d90fd5b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b61ffff1916610101178555386101ca565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b1580156101b55750600160ff8216146101b5565b50600160ff8216106101ae565b50346100f5576003196060368201126104ea576103fc610e11565b906001600160401b0390604435908282116104e65760609082360301126104e257604051926060840193808510848611176104cc57859460405261044283600401610e58565b815261045060248401610e58565b926020820193845260448101359485116104c857610478610496916004889736920101610eaa565b6040830190815293516001600160a01b039360243591851690610faa565b511690519082602083519301915af16104ad610f5f565b50156104b65780f35b604051637448f3e960e11b8152600490fd5b8580fd5b634e487b7160e01b600052604160045260246000fd5b8380fd5b8480fd5b5080fd5b50346100f557806003193601126100f55760206040517fe453bacb314e78dcd5192e6b1a2b1f0e7c76e92f6b7e429a6a90f04e39db3b768152f35b50346100f55760803660031901126100f557610543610e11565b61054b610e42565b60643591906001600160401b0383116104e25761056f610579933690600401610eaa565b9160243590611056565b80f35b50346100f557806003193601126100f557602090604051908152f35b50346100f557806003193601126100f55760206040517f39f61ca2a1a28fee144218173ec637b649a353e4026b2738c673800e5bf1437b8152f35b50346100f55760a03660031901126100f5576105ed610e2c565b6105f5610e42565b906001600160401b03906064356084358381116104c85761061a903690600401610ef1565b9160405160c08101818110868211176107645787949392916106d89160405260043581526106ca60208083019660018060a01b0380961688528580604086019c169b8c81526060860189815282608088019233845260a08901958652816040519d8e9a89808d01525160408c0152511660608a0152511660808801525160a0870152511660c08501525160c060e08501528581511661010085015201516040610120840152610140830190611080565b03601f198101855284610e6c565b6001541690813b156104e2578361071e96604051978895869485936310ac2ddf60e21b85523060048601526024850152604484015260a0606484015260a4830190611080565b82608483015203925af1801561075957610736578280f35b81116107455760405238808280f35b634e487b7160e01b82526041600452602482fd5b6040513d85823e3d90fd5b634e487b7160e01b88526041600452602488fd5b50346100f55760a03660031901126100f557610792610e11565b6064356001600160a01b0381168103610d1157608435906001600160401b0382116104e257366023830112156104e25760048201356001600160401b0381116104e6578201913660248401116104e6576020818403126104e65760248101356001600160401b0381116104c85760c08183018503126104c8576040519360c085016001600160401b03811186821017610764576040528282016024810135865261083e90604401610e58565b6020860152610851606483850101610e58565b60408601528282016084810135606087015261086f9060a401610e58565b60808601526001600160401b0383830160c4013511610b855761089f926024918201920160c48101350101610ef1565b60a08301526001546001600160a01b03163303610cf957306001600160a01b03821603610cd7575060408101516001600160a01b03838116911614801590610cc7575b610cb55760018060a01b03600254166020825160246040518094819363f8de678160e01b835260048301525afa908115610caa578491610c78575b50602435811115610c7357506024355b60808201516109479082906001600160a01b0316856110e3565b6002548251608084015160408051639081bf3960e01b81526004810193909352602483018590526001600160a01b039182166044840152606483018890529192839160849183918a91165af18015610c685785918691610c2c575b506109ad90836110c0565b60208481015160808601516040516323b872dd60e01b938101939093526001600160a01b03908116602484015230604484015260648084018690528352929492166001600160401b0360a0830190811190831117610764578188929160a084930160405282602083519301915af1610a23610f5f565b81610bfd575b5015610bd2576040516370a0823160e01b8152306004820152916020836024816001600160a01b038a165afa928315610b91578793610b9c575b5060208581015160a08701518051920151610a8c9390926001600160a01b039081169216611056565b6040516370a0823160e01b81523060048201526020816024816001600160a01b038a165afa908115610b91578791610b59575b50610ad292610acd916110c0565b6110c0565b6044359283821115610b475783610acd610b0494610afd93608060018060a01b0391015116946110c0565b90846110e3565b60018060a01b03600154169060243501918260243511610b3357610b289350610faa565b602060405160018152f35b634e487b7160e01b84526011600452602484fd5b60405163510a529560e01b8152600490fd5b90506020813d602011610b89575b81610b7460209383610e6c565b81010312610b855751610ad2610abf565b8680fd5b3d9150610b67565b6040513d89823e3d90fd5b9092506020813d602011610bca575b81610bb860209383610e6c565b81010312610b85575191610a8c610a63565b3d9150610bab565b60405162461bcd60e51b815260206004820152600360248201526229aa2360e91b6044820152606490fd5b8051801592508215610c12575b505038610a29565b610c259250602080918301019101610f47565b3880610c0a565b9150506040813d604011610c60575b81610c4860409383610e6c565b810103126104e6576109ad60208251920151906109a2565b3d9150610c3b565b6040513d87823e3d90fd5b61092d565b90506020813d602011610ca2575b81610c9360209383610e6c565b810103126104e257513861091d565b3d9150610c86565b6040513d86823e3d90fd5b604051632d6c570f60e01b8152600490fd5b50606081015160243514156108e2565b604051637d85130d60e11b81526001600160a01b039091166004820152602490fd5b60405163e372835960e01b8152336004820152602490fd5b8280fd5b50346100f557806003193601126100f55760206040517fe965846df3dd5b1dfa65f58e31477079e90140e0908b6dd31b5aead5a57cf3658152f35b50346100f557806003193601126100f5575460405160109190911c6001600160a01b03168152602090f35b9050346104ea5760203660031901126104ea5760043563ffffffff60e01b8116809103610d115782546301ffc9a760e01b835260048301919091526020908290602490829060101c6001600160a01b03165afa908115610e065760209291610de9575b506040519015158152f35b610e009150823d81116102e5576102d78183610e6c565b38610dde565b6040513d84823e3d90fd5b600435906001600160a01b0382168203610e2757565b600080fd5b602435906001600160a01b0382168203610e2757565b604435906001600160a01b0382168203610e2757565b35906001600160a01b0382168203610e2757565b601f909101601f19168101906001600160401b038211908210176104cc57604052565b6001600160401b0381116104cc57601f01601f191660200190565b81601f82011215610e2757803590610ec182610e8f565b92610ecf6040519485610e6c565b82845260208383010111610e2757816000926020809301838601378301015290565b919091604081840312610e275760408051916001600160401b03918301828111848210176104cc576040528294610f2782610e58565b84526020820135928311610e2757602092610f429201610eaa565b910152565b90816020910312610e2757518015158103610e275790565b3d15610f8a573d90610f7082610e8f565b91610f7e6040519384610e6c565b82523d6000602084013e565b606090565b6001600160a01b039091168152602081019190915260400190565b6000929183610fd5610fe38295604051928391602083019663095ea7b360e01b885260248401610f8f565b03601f198101835282610e6c565b51925af1610fef610f5f565b81611027575b5015610ffd57565b60405162461bcd60e51b8152602060048201526002602482015261534160f01b6044820152606490fd5b805180159250821561103c575b505038610ff5565b61104f9250602080918301019101610f47565b3880611034565b9161106660009492828695610faa565b82602083519301915af1611078610f5f565b50156104b657565b919082519283825260005b8481106110ac575050826000602080949584010152601f8019910116010190565b60208183018101518483018201520161108b565b919082039182116110cd57565b634e487b7160e01b600052601160045260246000fd5b6000929183610fd561110e8295604051928391602083019663a9059cbb60e01b885260248401610f8f565b51925af161111a610f5f565b81611152575b501561112857565b60405162461bcd60e51b815260206004820152600260248201526114d560f21b6044820152606490fd5b8051801592508215611167575b505038611120565b61117a9250602080918301019101610f47565b388061115f56fea26469706673582212201fa174f3e898dde36931af77422b42cf8e8f0ed8d82cd5b9ea75352f387519b164736f6c63430008110033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b600090813560e01c90816301ffc9a714610d7b5750806303ee9f2214610d5057806314c376dc14610d155780631b11d0ff1461077857806326e391e8146105d3578063438280dd1461059857806375b238fc1461057c5780638ada99ee146105295780638e5313e0146104ee5780639a239d76146103e1578063c0c53b8b1461016e578063dc97e84e14610133578063e63ab1e9146100f85763e9c26518146100bb57600080fd5b346100f557806003193601126100f55760206040517f3b5d4cc60d3ec3516ee8ae083bd60934f6eb2a6c54b1229985c41bfb092b26038152f35b80fd5b50346100f557806003193601126100f55760206040517f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a8152f35b50346100f557806003193601126100f55760206040517f9a9aef7c1247d5fc769b0185c052913e39673da29a880317dfd20ebf86f26a498152f35b50346100f55760603660031901126100f557610188610e11565b610190610e2c565b90610199610e42565b9183549060ff8260081c1615918280936103d4575b80156103bd575b156103615760ff198116600117865582610350575b5084549260ff8460081c16156102f75762010000600160b01b03601082901b1662010000600160b01b03198516811787556040516301ffc9a760e01b8152637965db0b60e01b600482015290956001600160a01b03929091906020908290602490829087165afa9081156102ec5788916102be575b50156102ac578160018060a01b031993168360025416176002551690600154161760015561026b578280f35b610100600160b01b031916178155604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a138808280f35b6040516384d942fd60e01b8152600490fd5b6102df915060203d81116102e5575b6102d78183610e6c565b810190610f47565b3861023f565b503d6102cd565b6040513d8a823e3d90fd5b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b61ffff1916610101178555386101ca565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b1580156101b55750600160ff8216146101b5565b50600160ff8216106101ae565b50346100f5576003196060368201126104ea576103fc610e11565b906001600160401b0390604435908282116104e65760609082360301126104e257604051926060840193808510848611176104cc57859460405261044283600401610e58565b815261045060248401610e58565b926020820193845260448101359485116104c857610478610496916004889736920101610eaa565b6040830190815293516001600160a01b039360243591851690610faa565b511690519082602083519301915af16104ad610f5f565b50156104b65780f35b604051637448f3e960e11b8152600490fd5b8580fd5b634e487b7160e01b600052604160045260246000fd5b8380fd5b8480fd5b5080fd5b50346100f557806003193601126100f55760206040517fe453bacb314e78dcd5192e6b1a2b1f0e7c76e92f6b7e429a6a90f04e39db3b768152f35b50346100f55760803660031901126100f557610543610e11565b61054b610e42565b60643591906001600160401b0383116104e25761056f610579933690600401610eaa565b9160243590611056565b80f35b50346100f557806003193601126100f557602090604051908152f35b50346100f557806003193601126100f55760206040517f39f61ca2a1a28fee144218173ec637b649a353e4026b2738c673800e5bf1437b8152f35b50346100f55760a03660031901126100f5576105ed610e2c565b6105f5610e42565b906001600160401b03906064356084358381116104c85761061a903690600401610ef1565b9160405160c08101818110868211176107645787949392916106d89160405260043581526106ca60208083019660018060a01b0380961688528580604086019c169b8c81526060860189815282608088019233845260a08901958652816040519d8e9a89808d01525160408c0152511660608a0152511660808801525160a0870152511660c08501525160c060e08501528581511661010085015201516040610120840152610140830190611080565b03601f198101855284610e6c565b6001541690813b156104e2578361071e96604051978895869485936310ac2ddf60e21b85523060048601526024850152604484015260a0606484015260a4830190611080565b82608483015203925af1801561075957610736578280f35b81116107455760405238808280f35b634e487b7160e01b82526041600452602482fd5b6040513d85823e3d90fd5b634e487b7160e01b88526041600452602488fd5b50346100f55760a03660031901126100f557610792610e11565b6064356001600160a01b0381168103610d1157608435906001600160401b0382116104e257366023830112156104e25760048201356001600160401b0381116104e6578201913660248401116104e6576020818403126104e65760248101356001600160401b0381116104c85760c08183018503126104c8576040519360c085016001600160401b03811186821017610764576040528282016024810135865261083e90604401610e58565b6020860152610851606483850101610e58565b60408601528282016084810135606087015261086f9060a401610e58565b60808601526001600160401b0383830160c4013511610b855761089f926024918201920160c48101350101610ef1565b60a08301526001546001600160a01b03163303610cf957306001600160a01b03821603610cd7575060408101516001600160a01b03838116911614801590610cc7575b610cb55760018060a01b03600254166020825160246040518094819363f8de678160e01b835260048301525afa908115610caa578491610c78575b50602435811115610c7357506024355b60808201516109479082906001600160a01b0316856110e3565b6002548251608084015160408051639081bf3960e01b81526004810193909352602483018590526001600160a01b039182166044840152606483018890529192839160849183918a91165af18015610c685785918691610c2c575b506109ad90836110c0565b60208481015160808601516040516323b872dd60e01b938101939093526001600160a01b03908116602484015230604484015260648084018690528352929492166001600160401b0360a0830190811190831117610764578188929160a084930160405282602083519301915af1610a23610f5f565b81610bfd575b5015610bd2576040516370a0823160e01b8152306004820152916020836024816001600160a01b038a165afa928315610b91578793610b9c575b5060208581015160a08701518051920151610a8c9390926001600160a01b039081169216611056565b6040516370a0823160e01b81523060048201526020816024816001600160a01b038a165afa908115610b91578791610b59575b50610ad292610acd916110c0565b6110c0565b6044359283821115610b475783610acd610b0494610afd93608060018060a01b0391015116946110c0565b90846110e3565b60018060a01b03600154169060243501918260243511610b3357610b289350610faa565b602060405160018152f35b634e487b7160e01b84526011600452602484fd5b60405163510a529560e01b8152600490fd5b90506020813d602011610b89575b81610b7460209383610e6c565b81010312610b855751610ad2610abf565b8680fd5b3d9150610b67565b6040513d89823e3d90fd5b9092506020813d602011610bca575b81610bb860209383610e6c565b81010312610b85575191610a8c610a63565b3d9150610bab565b60405162461bcd60e51b815260206004820152600360248201526229aa2360e91b6044820152606490fd5b8051801592508215610c12575b505038610a29565b610c259250602080918301019101610f47565b3880610c0a565b9150506040813d604011610c60575b81610c4860409383610e6c565b810103126104e6576109ad60208251920151906109a2565b3d9150610c3b565b6040513d87823e3d90fd5b61092d565b90506020813d602011610ca2575b81610c9360209383610e6c565b810103126104e257513861091d565b3d9150610c86565b6040513d86823e3d90fd5b604051632d6c570f60e01b8152600490fd5b50606081015160243514156108e2565b604051637d85130d60e11b81526001600160a01b039091166004820152602490fd5b60405163e372835960e01b8152336004820152602490fd5b8280fd5b50346100f557806003193601126100f55760206040517fe965846df3dd5b1dfa65f58e31477079e90140e0908b6dd31b5aead5a57cf3658152f35b50346100f557806003193601126100f5575460405160109190911c6001600160a01b03168152602090f35b9050346104ea5760203660031901126104ea5760043563ffffffff60e01b8116809103610d115782546301ffc9a760e01b835260048301919091526020908290602490829060101c6001600160a01b03165afa908115610e065760209291610de9575b506040519015158152f35b610e009150823d81116102e5576102d78183610e6c565b38610dde565b6040513d84823e3d90fd5b600435906001600160a01b0382168203610e2757565b600080fd5b602435906001600160a01b0382168203610e2757565b604435906001600160a01b0382168203610e2757565b35906001600160a01b0382168203610e2757565b601f909101601f19168101906001600160401b038211908210176104cc57604052565b6001600160401b0381116104cc57601f01601f191660200190565b81601f82011215610e2757803590610ec182610e8f565b92610ecf6040519485610e6c565b82845260208383010111610e2757816000926020809301838601378301015290565b919091604081840312610e275760408051916001600160401b03918301828111848210176104cc576040528294610f2782610e58565b84526020820135928311610e2757602092610f429201610eaa565b910152565b90816020910312610e2757518015158103610e275790565b3d15610f8a573d90610f7082610e8f565b91610f7e6040519384610e6c565b82523d6000602084013e565b606090565b6001600160a01b039091168152602081019190915260400190565b6000929183610fd5610fe38295604051928391602083019663095ea7b360e01b885260248401610f8f565b03601f198101835282610e6c565b51925af1610fef610f5f565b81611027575b5015610ffd57565b60405162461bcd60e51b8152602060048201526002602482015261534160f01b6044820152606490fd5b805180159250821561103c575b505038610ff5565b61104f9250602080918301019101610f47565b3880611034565b9161106660009492828695610faa565b82602083519301915af1611078610f5f565b50156104b657565b919082519283825260005b8481106110ac575050826000602080949584010152601f8019910116010190565b60208183018101518483018201520161108b565b919082039182116110cd57565b634e487b7160e01b600052601160045260246000fd5b6000929183610fd561110e8295604051928391602083019663a9059cbb60e01b885260248401610f8f565b51925af161111a610f5f565b81611152575b501561112857565b60405162461bcd60e51b815260206004820152600260248201526114d560f21b6044820152606490fd5b8051801592508215611167575b505038611120565b61117a9250602080918301019101610f47565b388061115f56fea26469706673582212201fa174f3e898dde36931af77422b42cf8e8f0ed8d82cd5b9ea75352f387519b164736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 461,
        "contract": "contracts/exchange/contracts/ArbitrageHelper.sol:ArbitrageHelper",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 464,
        "contract": "contracts/exchange/contracts/ArbitrageHelper.sol:ArbitrageHelper",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 9094,
        "contract": "contracts/exchange/contracts/ArbitrageHelper.sol:ArbitrageHelper",
        "label": "ACCESS_CONTROL_SINGLETON",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(ISuAccessControl)16250"
      },
      {
        "astId": 9847,
        "contract": "contracts/exchange/contracts/ArbitrageHelper.sol:ArbitrageHelper",
        "label": "AAVE_POOL",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IAavePool)12395"
      },
      {
        "astId": 9850,
        "contract": "contracts/exchange/contracts/ArbitrageHelper.sol:ArbitrageHelper",
        "label": "EXCHANGE",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IExchange)13081"
      },
      {
        "astId": 10205,
        "contract": "contracts/exchange/contracts/ArbitrageHelper.sol:ArbitrageHelper",
        "label": "__gap",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)45_storage"
      }
    ],
    "types": {
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAavePool)12395": {
        "encoding": "inplace",
        "label": "contract IAavePool",
        "numberOfBytes": "20"
      },
      "t_contract(IExchange)13081": {
        "encoding": "inplace",
        "label": "contract IExchange",
        "numberOfBytes": "20"
      },
      "t_contract(ISuAccessControl)16250": {
        "encoding": "inplace",
        "label": "contract ISuAccessControl",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}