{
  "address": "0x8DB0d990d449E0dF2538e587a146c4aeFc747609",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "Buyout",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "main",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stablecoin",
          "type": "uint256"
        }
      ],
      "name": "Destroyed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "main",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stablecoin",
          "type": "uint256"
        }
      ],
      "name": "Exit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "main",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stablecoin",
          "type": "uint256"
        }
      ],
      "name": "Join",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "LiquidationTriggered",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACCESS_CONTROL_SINGLETON",
      "outputs": [
        {
          "internalType": "contract ISuAccessControl",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIQUIDATION_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VAULT_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cdpRegistry",
      "outputs": [
        {
          "internalType": "contract ISuCdpRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "assetAmountEDecimal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stablecoinAmountE18",
          "type": "uint256"
        }
      ],
      "name": "exit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getAvailableToBorrowE18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getAvailableToWithdrawE18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getCollateralUsdValueE18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getLTVE18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getLiquidationBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getPosition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidationBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateralEDecimal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "debtE18",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "initialCollateralRatioE18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_suOracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_cdpRegistry",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "isLiquidatablePosition",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "assetAmountEDecimal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stablecoinAmountE18",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockupPeriodSeconds",
          "type": "uint256"
        }
      ],
      "name": "join",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "repayer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stablecoinsToRepaymentE18",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "assetAmountEDecimal",
          "type": "uint256"
        }
      ],
      "name": "liquidate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "destroyed",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "repayer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "repaymentE18",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "excessAndFeeE18",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "assetAmountEDecimal",
          "type": "uint256"
        }
      ],
      "name": "liquidateAndRepay",
      "outputs": [
        {
          "internalType": "bool",
          "name": "destroyed",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "liquidationPriceE18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "liquidationRatioE18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "managerParameters",
      "outputs": [
        {
          "internalType": "contract ISuManagerParameters",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minCollateralInUsdE18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "repayer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stablecoinsToRepaymentE18",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stablecoinsToFoundationE18",
          "type": "uint256"
        }
      ],
      "name": "repay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stabilityFeeValueE18",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "initialCollateralRatioValueE18",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidationRatioValueE18",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stablecoinLimitE18",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minCollateralInUsdValueE18",
          "type": "uint256"
        }
      ],
      "name": "setCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newValueE18",
          "type": "uint256"
        }
      ],
      "name": "setInitialCollateralRatioE18",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newValueE18",
          "type": "uint256"
        }
      ],
      "name": "setLiquidationRatioE18",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValueE18",
          "type": "uint256"
        }
      ],
      "name": "setMinCollateralInUsdE18",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "suOracle",
      "outputs": [
        {
          "internalType": "contract ISuOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "triggerLiquidation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "utilizationRatioE18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "contract ISuVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultParameters",
      "outputs": [
        {
          "internalType": "contract SuVaultParameters",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "1ee30c392eeeb5c03c3751ea96247c34",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Buyout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"main\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stablecoin\",\"type\":\"uint256\"}],\"name\":\"Destroyed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"main\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stablecoin\",\"type\":\"uint256\"}],\"name\":\"Exit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"main\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stablecoin\",\"type\":\"uint256\"}],\"name\":\"Join\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LiquidationTriggered\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACCESS_CONTROL_SINGLETON\",\"outputs\":[{\"internalType\":\"contract ISuAccessControl\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDATION_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VAULT_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cdpRegistry\",\"outputs\":[{\"internalType\":\"contract ISuCdpRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetAmountEDecimal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stablecoinAmountE18\",\"type\":\"uint256\"}],\"name\":\"exit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getAvailableToBorrowE18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getAvailableToWithdrawE18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getCollateralUsdValueE18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getLTVE18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getLiquidationBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidationBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralEDecimal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtE18\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"initialCollateralRatioE18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_suOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cdpRegistry\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"isLiquidatablePosition\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetAmountEDecimal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stablecoinAmountE18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockupPeriodSeconds\",\"type\":\"uint256\"}],\"name\":\"join\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"repayer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stablecoinsToRepaymentE18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetAmountEDecimal\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"destroyed\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"repayer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repaymentE18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"excessAndFeeE18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetAmountEDecimal\",\"type\":\"uint256\"}],\"name\":\"liquidateAndRepay\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"destroyed\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"liquidationPriceE18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidationRatioE18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managerParameters\",\"outputs\":[{\"internalType\":\"contract ISuManagerParameters\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minCollateralInUsdE18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"repayer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stablecoinsToRepaymentE18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stablecoinsToFoundationE18\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stabilityFeeValueE18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialCollateralRatioValueE18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationRatioValueE18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stablecoinLimitE18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minCollateralInUsdValueE18\",\"type\":\"uint256\"}],\"name\":\"setCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newValueE18\",\"type\":\"uint256\"}],\"name\":\"setInitialCollateralRatioE18\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newValueE18\",\"type\":\"uint256\"}],\"name\":\"setLiquidationRatioE18\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValueE18\",\"type\":\"uint256\"}],\"name\":\"setMinCollateralInUsdE18\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"suOracle\",\"outputs\":[{\"internalType\":\"contract ISuOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"triggerLiquidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"utilizationRatioE18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract ISuVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultParameters\",\"outputs\":[{\"internalType\":\"contract SuVaultParameters\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"events\":{\"Buyout(address,address,address,uint256,uint256)\":{\"details\":\"Trigger when buyouts are happened*\"}},\"kind\":\"dev\",\"methods\":{\"getLiquidationBlock(address,address)\":{\"params\":{\"asset\":\"The address of the main collateral token of a position\",\"owner\":\"The owner of the collateral\"},\"returns\":{\"_0\":\"liquidationBlock The block number when the liquidation was triggered\"}},\"getPosition(address,address)\":{\"details\":\"TODO: should rename to getPositionInfo()\",\"params\":{\"asset\":\"The address of the main collateral token of a position\",\"owner\":\"The owner of the collateral\"},\"returns\":{\"collateralEDecimal\":\"The amount of collateral\",\"debtE18\":\"The amount of borrowed stablecoins\",\"liquidationBlock\":\"The block number when the liquidation was triggered\"}},\"liquidate(address,address,address,uint256,uint256)\":{\"details\":\"Supports a partial liquidation\",\"params\":{\"asset\":\"The address of the main collateral token of a position\",\"assetAmountEDecimal\":\"The position's collateral which be recieved by repayer\",\"owner\":\"The owner of the collateral\",\"repayer\":\"The person who repaies by debt and transfers stablecoins to the foundation\",\"stablecoinsToRepaymentE18\":\"The amount of stablecoins which will be burned as a debt repaymention\"},\"returns\":{\"destroyed\":\"Returns \\\"true\\\" if the position completely liquidated\"}},\"liquidateAndRepay(address,address,address,uint256,uint256,uint256)\":{\"details\":\"Supports a partial liquidation\",\"params\":{\"asset\":\"The address of the main collateral token of a position\",\"assetAmountEDecimal\":\"The position's collateral which be recieved by repayer\",\"excessAndFeeE18\":\"The amount of stablecoins which transfer to foundation\",\"owner\":\"The owner of a position\",\"repayer\":\"The person who repaies by debt and recieves a position's collateral\",\"repaymentE18\":\"The amount of repayment\"},\"returns\":{\"destroyed\":\"Returns \\\"true\\\" if the position completely liquidated\"}},\"repay(address,uint256,uint256)\":{\"params\":{\"repayer\":\"The person who repaies by debt and transfers stablecoins to the foundation\",\"stablecoinsToFoundationE18\":\"The amount of stablecoins which will be transfered to the foundation\",\"stablecoinsToRepaymentE18\":\"The amount of stablecoins which will be burned as a debt repayment\"}},\"setInitialCollateralRatioE18(address,uint256)\":{\"details\":\"Sets the initial collateral ratio\",\"params\":{\"asset\":\"The address of the main collateral token\",\"newValueE18\":\"The collateralization ratio (1e18 = 100%)*\"}},\"setLiquidationRatioE18(address,uint256)\":{\"details\":\"Sets the liquidation ratio\",\"params\":{\"asset\":\"The address of the main collateral token\",\"newValueE18\":\"The liquidation ratio (1e18 = 100%)*\"}},\"setMinCollateralInUsdE18(uint256)\":{\"details\":\"Sets a minimum value of collateral in USD which allowed to be left after partial closure\",\"params\":{\"newValueE18\":\"The minimum value of collateral in USD\"}},\"triggerLiquidation(address,address)\":{\"details\":\"Emits LiquidationTriggered event. Sets the current block as liquidationBlock for the position. Can be triggered only once for the position.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getAvailableToBorrowE18(address,address)\":{\"notice\":\"Returns Available to Borrow we have invariant: (collateralAmountEDecimal * collateralPriceE18 / 1e18) * initialCollateralRatioE18 <= debtE18 Has similar logic like in _ensurePositionCollateralization\"},\"getAvailableToWithdrawE18(address,address)\":{\"notice\":\"Returns Available to Withdraw Has similar invariant like in getAvailableToBorrowE18\"},\"getLTVE18(address,address)\":{\"notice\":\"Returns Loan-To-Value in e18\"},\"getLiquidationBlock(address,address)\":{\"notice\":\"Returns information about a liquidating position\"},\"getPosition(address,address)\":{\"notice\":\"Returns information about a liquidating position\"},\"join(address,uint256,uint256,uint256)\":{\"notice\":\"Yes,\"},\"liquidate(address,address,address,uint256,uint256)\":{\"notice\":\"Liquidates a position\"},\"liquidateAndRepay(address,address,address,uint256,uint256,uint256)\":{\"notice\":\"please see https://ratiofinance.medium.com/ratio-risk-lesson-2-cascading-liquidations-e91e04050f47Liquidates a position's collateral completely\"},\"repay(address,uint256,uint256)\":{\"notice\":\"Finilizes the liquidation\"},\"setInitialCollateralRatioE18(address,uint256)\":{\"notice\":\"Only manager is able to call this function\"},\"setLiquidationRatioE18(address,uint256)\":{\"notice\":\"Only manager is able to call this function\"},\"setMinCollateralInUsdE18(uint256)\":{\"notice\":\"Only manager is able to call this function\"}},\"notice\":\"not sure why\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lending/SuManager.sol\":\"SuManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ffe9655abbb3741fcb84ad10e2f628d5dbec46b3f84a69ceec4752e807e2757\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"contracts/access-control/SuAccessControlSingleton.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./SuAuthenticated.sol\\\";\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title SuAccessControl\\n * @dev Access control for contracts. SuVaultParameters can be inherited from it.\\n */\\n// TODO: refactor by https://en.wikipedia.org/wiki/Principle_of_least_privilege\\ncontract SuAccessControlSingleton is AccessControlUpgradeable, SuAuthenticated {\\n    /**\\n     * @dev Initialize the contract with initial owner to be deployer\\n     */\\n    function initialize() public initializer {\\n        __AccessControl_init();\\n        __SuAuthenticated_init(address(this));\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    /**\\n    * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n    * Can only be called by the current owner.\\n    */\\n    function transferOwnership(address newOwner) external {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Ownable: caller is not the owner\\\");\\n\\n        if (hasRole(MINTER_ROLE, msg.sender)) {\\n            grantRole(MINTER_ROLE, newOwner);\\n            revokeRole(MINTER_ROLE, msg.sender);\\n        }\\n\\n        if (hasRole(VAULT_ACCESS_ROLE, msg.sender)) {\\n            grantRole(VAULT_ACCESS_ROLE, newOwner);\\n            revokeRole(VAULT_ACCESS_ROLE, msg.sender);\\n        }\\n\\n        grantRole(DEFAULT_ADMIN_ROLE, newOwner);\\n        revokeRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x6d0f1176dbba8303e05e2b111dcfd0a375ac1f249b1184fa0ddd04fc6f263c60\",\"license\":\"BSL 1.1\"},\"contracts/access-control/SuAuthenticated.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\npragma solidity >=0.7.6;\\n\\nimport \\\"../interfaces/ISuAccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title SuAuthenticated\\n * @dev other contracts should inherit to be authenticated\\n */\\nabstract contract SuAuthenticated is Initializable{\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant VAULT_ACCESS_ROLE = keccak256(\\\"VAULT_ACCESS_ROLE\\\");\\n    bytes32 public constant LIQUIDATION_ACCESS_ROLE = keccak256(\\\"LIQUIDATION_ACCESS_ROLE\\\");\\n    bytes32 private constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /// @dev the address of SuAccessControlSingleton - it should be one for all contract that inherits SuAuthenticated\\n    ISuAccessControl public ACCESS_CONTROL_SINGLETON;\\n\\n    /// @dev should be passed in constructor\\n    function __SuAuthenticated_init(address _accessControlSingleton) internal onlyInitializing {\\n        ACCESS_CONTROL_SINGLETON = ISuAccessControl(_accessControlSingleton);\\n        // TODO: check that _accessControlSingleton points to ISuAccessControl instance\\n        // require(ISuAccessControl(_accessControlSingleton).supportsInterface(ISuAccessControl.hasRole.selector), \\\"bad dependency\\\");\\n    }\\n\\n    /// @dev check DEFAULT_ADMIN_ROLE\\n    modifier onlyOwner() {\\n        require(ACCESS_CONTROL_SINGLETON.hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"SuAuth: onlyOwner AUTH_FAILED\\\");\\n        _;\\n    }\\n\\n    /// @dev check VAULT_ACCESS_ROLE\\n    modifier onlyVaultAccess() {\\n        require(ACCESS_CONTROL_SINGLETON.hasRole(VAULT_ACCESS_ROLE, msg.sender), \\\"SuAuth: onlyVaultAccess AUTH_FAILED\\\");\\n        _;\\n    }\\n\\n    /// @dev check VAULT_ACCESS_ROLE\\n    modifier onlyLiquidationAccess() {\\n        require(ACCESS_CONTROL_SINGLETON.hasRole(LIQUIDATION_ACCESS_ROLE, msg.sender), \\\"SuAuth: onlyLiquidationAccess AUTH_FAILED\\\");\\n        _;\\n    }\\n\\n    /// @dev check MINTER_ROLE\\n    modifier onlyMinter() {\\n        require(ACCESS_CONTROL_SINGLETON.hasRole(MINTER_ROLE, msg.sender), \\\"SuAuth: onlyMinter AUTH_FAILED\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x340220ca1c937826e44283ea69178ed0e8eff7e69926f51b599d905601458bd6\",\"license\":\"BSL 1.1\"},\"contracts/interfaces/ISuAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface ISuAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n    function grantRole(bytes32 role, address account) external;\\n    function revokeRole(bytes32 role, address account) external;\\n    function renounceRole(bytes32 role, address account) external;\\n\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    // TODO: remove legacy functionality\\n    function setVault(address _vault, bool _isVault) external;\\n    function setCdpManager(address _cdpManager, bool _isCdpManager) external;\\n    function setDAO(address _dao, bool _isDAO) external;\\n    function setManagerParameters(address _address, bool _permit) external;\\n    function transferOwnership(address newOwner) external;\\n}\\n\",\"keccak256\":\"0xd386f4bad5ae0d77788abea08ceec10dc02b02559465d8a8f4e30b58dfac2d2a\",\"license\":\"MIT\"},\"contracts/interfaces/ISuCdpRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface ISuCdpRegistry {\\n\\n    struct CDP {\\n        address asset;\\n        address owner;\\n    }\\n\\n    function batchCheckpoint ( address[] calldata assets, address[] calldata owners ) external;\\n    function batchCheckpointForAsset ( address asset, address[] calldata owners ) external;\\n    function checkpoint ( address asset, address owner ) external;\\n    function cr (  ) external view returns ( address );\\n    function getAllCdps (  ) external view returns ( CDP[] memory r );\\n    function getCdpsByCollateral ( address asset ) external view returns ( CDP[] memory cdps );\\n    function getCdpsByOwner ( address owner ) external view returns ( CDP[] memory r );\\n    function getCdpsCount (  ) external view returns ( uint256 totalCdpCount );\\n    function getCdpsCountForCollateral ( address asset ) external view returns ( uint256 );\\n    function isAlive ( address asset, address owner ) external view returns ( bool );\\n    function isListed ( address asset, address owner ) external view returns ( bool );\\n    function vault (  ) external view returns ( address );\\n}\\n\",\"keccak256\":\"0xbd1b2a5c0c1f57ab775899ab9b3d35a6dbde8c75aba0860ac271e6f1f31b6186\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ISuManagerParameters.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\ninterface ISuManagerParameters {\\n    function initialCollateralRatioE18 ( address ) external view returns ( uint256 );\\n    function liquidationRatioE18 ( address ) external view returns ( uint256 );\\n    function minCollateralInUsdE18 () external view returns ( uint256 );\\n    function setCollateral (\\n        address asset,\\n        uint256 stabilityFeeValueE18,\\n        uint256 initialCollateralRatioValueE18,\\n        uint256 liquidationRatioValueE18,\\n        uint256 stablecoinLimitE18,\\n        uint256 minCollateralInUsdValueE18\\n    ) external;\\n    function setInitialCollateralRatioE18 ( address asset, uint256 newValueE18 ) external;\\n    function setLiquidationRatioE18 ( address asset, uint256 newValueE18 ) external;\\n    function setMinCollateralInUsdE18 ( uint256 newValueE18 ) external;\\n    function vaultParameters (  ) external view returns ( address );\\n}\\n\",\"keccak256\":\"0x8525d04243a7fae8d184d3f56e0f03054d06ec87f714b85bd8835ed931ddf4c0\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ISuOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity >=0.7.6;\\n\\ninterface ISuOracle {\\n    /**\\n     * @notice WARNING! Read this description very carefully!\\n     *      function getUsdPrice1e18(address asset) returns (uint256) that:\\n     *          basicAmountOfAsset * getUsdPrice1e18(asset) / 1e18 === $$ * 1e18\\n     *      in other words, it doesn't matter what's the erc20.decimals is,\\n     *      you just multiply token balance in basic units on value from oracle and get dollar amount multiplied on 1e18.\\n     *\\n     * different assets have different deviation threshold (errors)\\n     *      for wBTC it's <= 0.5%, read more https://data.chain.link/ethereum/mainnet/crypto-usd/btc-usd\\n     *      for other asset is can be larger based on particular oracle implementation.\\n     *\\n     * examples:\\n     *      assume market price of wBTC = $31,503.77, oracle error = $158\\n     *\\n     *       case #1: small amount of wBTC\\n     *           we have 0.0,000,001 wBTC that is worth v = $0.00315 \\u00b1 $0.00001 = 0.00315*1e18 = 315*1e13 \\u00b1 1*1e13\\n     *           actual balance on the asset b = wBTC.balanceOf() =  0.0000001*1e18 = 1e11\\n     *           oracle should return or = oracle.getUsdPrice1e18(wBTC) <=>\\n     *           <=> b*or = v => v/b = 315*1e13 / 1e11 = 315*1e2 \\u00b1 1e2\\n     *           error = or.error * b = 1e2 * 1e11 = 1e13 => 1e13/1e18 usd = 1e-5 = 0.00001 usd\\n     *\\n     *       case #2: large amount of wBTC\\n     *           v = 2,000,000 wBTC = $31,503.77 * 2m \\u00b1 158*2m = $63,007,540,000 \\u00b1 $316,000,000 = 63,007*1e24 \\u00b1 316*1e24\\n     *           for calc convenience we increase error on 0.05 and have v = 63,000*24 \\u00b1 300*1e24 = (630 \\u00b1 3)*1e26\\n     *           b = 2*1e6 * 1e18 = 2*1e24\\n     *           or = v/b = (630 \\u00b1 3)*1e26 / 2*1e24 = 315*1e2 \\u00b1 1.5*1e2\\n     *           error = or.error * b = 1.5*100 * 2*1e24 = 3*1e26 = 3*1e8*1e18 = $300,000,000 ~ $316,000,000\\n     *\\n     *      assume the market price of USDT = $0.97 \\u00b1 $0.00485,\\n     *\\n     *       case #3: little amount of USDT\\n     *           v = USDT amount 0.005 = 0.005*(0.97 \\u00b1 0.00485) = 0.00485*1e18 \\u00b1 0.00002425*1e18 = 485*1e13 \\u00b1 3*1e13\\n     *           we rounded error up on (3000-2425)/2425 ~= +24% for calculation convenience.\\n     *           b = USDT.balanceOf() = 0.005*1e6 = 5*1e3\\n     *           b*or = v => or = v/b = (485*1e13 \\u00b1 3*1e13) / 5*1e3 = 970*1e9 \\u00b1 6*1e9\\n     *           error = 6*1e9 * 5*1e3 / 1e18 = 30*1e12/1e18 = 3*1e-5 = $0,00005\\n     *\\n     *       case #4: lot of USDT\\n     *           v = we have 100,000,000,000 USDT = $97B = 97*1e9*1e18 \\u00b1 0.5*1e9*1e18\\n     *           b = USDT.balanceOf() = 1e11*1e6 = 1e17\\n     *           or = v/b = (97*1e9*1e18 \\u00b1 0.5*1e9*1e18) / 1e17 = 970*1e9 \\u00b1 5*1e9\\n     *           error = 5*1e9 * 1e17 = 5*1e26 = 0.5 * 1e8*1e18\\n     *\\n     * @param asset - address of erc20 token contract\\n     * @return usdPrice1e18 such that asset.balanceOf() * getUsdPrice1e18(asset) / 1e18 == $$ * 1e18\\n     **/\\n    function getUsdPrice1e18(address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x000567b74a69b532d893db59cb93c4e470aa794a909a7309fdacc0ba29671538\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ISuVault.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\ninterface ISuVault {\\n    function borrow ( address asset, address user, uint256 amountE18 ) external returns ( uint256 );\\n    function calculateFeeE18 ( address asset, address user, uint256 amountE18 ) external view returns ( uint256 );\\n    function collateralsEDecimal ( address, address ) external view returns ( uint256 );\\n    function debtsE18 ( address, address ) external view returns ( uint256 );\\n    function deposit ( address asset, address user, uint256 amountEDecimal, uint256 lockupPeriodSeconds ) external;\\n    function destroy ( address asset, address user ) external;\\n    function emergencyWithdraw ( address asset, address user, uint amountEDecimal ) external;\\n    function getTotalDebtE18 ( address asset, address user ) external view returns ( uint256 );\\n    function liquidate(\\n        address asset,\\n        address owner,\\n        address recipient,\\n        uint assetAmountEDecimal,\\n        uint stablecoinAmountE18\\n    ) external returns (bool);\\n    function setRewardChef(address rewardChef) external;\\n    function triggerLiquidation(address asset, address positionOwner) external;\\n    function lastUpdate ( address, address ) external view returns ( uint256 );\\n    function stabilityFeeE18 ( address, address ) external view returns ( uint256 );\\n    function tokenDebtsE18 ( address ) external view returns ( uint256 );\\n    function update ( address asset, address user ) external;\\n    function liquidationBlock (address, address) external view returns (uint256);\\n    function withdraw ( address asset, address user, address recipient, uint256 amountEDecimal ) external;\\n    function repay ( address repayer, uint256 repaymentE18, uint256 excessAndFeeE18 ) external;\\n}\\n\",\"keccak256\":\"0xa28123be73187a0b9347cbf01a070c68280989d964cf6fdfd91c882cc420dd9f\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ISuVaultParameters.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\ninterface ISuVaultParameters {\\n    function foundation (  ) external view returns ( address );\\n    function setCollateral (\\n        address asset,\\n        uint256 stabilityFeeValueE18,\\n        uint256 stablecoinLimitE18,\\n        uint256[] calldata oracles\\n    ) external;\\n    function setFoundation ( address newFoundation ) external;\\n    function setStabilityFeeE18 ( address asset, uint256 newValue ) external;\\n    function setTokenDebtLimitE18 ( address asset, uint256 limit ) external;\\n    function protocolStabilityFeeE18 ( address ) external view returns ( uint256 );\\n    function tokenDebtLimitE18 ( address ) external view returns ( uint256 );\\n    function vault (  ) external view returns ( address );\\n}\\n\",\"keccak256\":\"0x10074ee603fd8636d50476821e9bef8c7f95d96ceb481a6d8853791999bbb44b\",\"license\":\"UNLICENSED\"},\"contracts/lending/SuManager.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\n/*\\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\\n*/\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport \\\"../interfaces/ISuOracle.sol\\\";\\nimport \\\"../interfaces/ISuVault.sol\\\";\\nimport \\\"../interfaces/ISuCdpRegistry.sol\\\";\\nimport \\\"../interfaces/ISuManagerParameters.sol\\\";\\nimport \\\"../interfaces/ISuVaultParameters.sol\\\";\\nimport \\\"./SuManagerParameters.sol\\\";\\n\\n// finally found the managers mighty over the vault\\n// user does only interact with manager as proxy to the wallet\\n/// Yes\\n// there is only one manager for vault each moment\\n/// I'm sure, the code doesn't enforce this, could be multiple managers\\n// suggest to maintain only address of active manager instead of managers list\\n/// not sure why\\ncontract SuManager is ReentrancyGuardUpgradeable, SuManagerParameters {\\n    ISuVault public vault;\\n    ISuManagerParameters public managerParameters;\\n    ISuCdpRegistry public cdpRegistry;\\n\\n    ISuOracle public suOracle;\\n\\n    // even triggered when user deposit collateral\\n    event Join(address indexed asset, address indexed owner, uint main, uint stablecoin);\\n\\n    // event triggered when user withdraws collateral\\n    event Exit(address indexed asset, address indexed owner, uint main, uint stablecoin);\\n\\n    // event triggered when user destroyes cdp\\n    event Destroyed(address indexed asset, address indexed owner, uint main, uint stablecoin);\\n\\n    // event triggered when user didnt withdraw collateral before price goes down\\n    event LiquidationTriggered(address indexed asset, address indexed owner);\\n\\n    /**\\n     * @dev Trigger when buyouts are happened\\n    **/\\n    event Buyout(address indexed asset, address indexed owner, address indexed buyer, uint amount, uint price);\\n\\n    modifier checkpoint(address asset, address owner) {\\n        _;\\n        cdpRegistry.checkpoint(asset, owner);\\n    }\\n\\n     // aggregation over composition\\n    function initialize(address _vault, address _suOracle, address _cdpRegistry) public initializer {\\n        __ReentrancyGuard_init();\\n        __SuManagerParameters_init(_vault);\\n\\n        address _managerParameters = address(this);\\n        require(\\n            _managerParameters != address(0) &&\\n            _cdpRegistry != address(0),\\n                \\\"SU Protocol: INVALID_ARGS\\\"\\n        );\\n\\n        require(_suOracle != address(0), \\\"INVALID_ARGS: SU_ORACLE\\\");\\n\\n        // require(ISuVaultManagerParameters(_managerParameters).vaultParameters() != address(0), \\\"INVALID_ARGS: VAULT_PARAMETERS\\\");\\n\\n        // require(ISuVaultParameters(ISuVaultManagerParameters(_managerParameters).vaultParameters()).vault() != address(0), \\\"INVALID_ARGS: VAULT\\\");\\n\\n        // require(ISuVault(ISuVaultParameters(ISuVaultManagerParameters(_managerParameters).vaultParameters()).vault()).weth() != address(0), \\\"INVALID_ARGS: VAULT_MANAGER\\\");\\n\\n        suOracle = ISuOracle(_suOracle);\\n\\n        managerParameters = ISuManagerParameters(_managerParameters);\\n\\n        // vault = ISuVault(ISuVaultParameters(ISuVaultManagerParameters(_managerParameters).vaultParameters()).vault());\\n        vault = ISuVault(_vault);\\n\\n        cdpRegistry = ISuCdpRegistry(_cdpRegistry);\\n    }\\n\\n    // wrapper ether only, no native\\n    receive() external payable {\\n        revert(\\\"SU Protocol: RESTRICTED\\\");\\n    }\\n\\n      // why checkpoint is needed? to check if depositing collateral allowed for user?\\n      // this function is called by user to deposit collateral and receive stablecoin\\n      // before calling this function user has to approve the Vault to take his collateral\\n      /// Yes,\\n    function join(address asset, uint assetAmountEDecimal, uint stablecoinAmountE18, uint256 lockupPeriodSeconds) public nonReentrant checkpoint(asset, msg.sender) {\\n        require(stablecoinAmountE18 != 0 || assetAmountEDecimal != 0, \\\"SU Protocol: USELESS_TX\\\");\\n\\n        require(IERC20Metadata(asset).decimals() <= 18, \\\"SU Protocol: NOT_SUPPORTED_DECIMALS\\\");\\n\\n        if (stablecoinAmountE18 == 0) {\\n\\n            // why user deposit collateral but does not take stablecoin?\\n            // should be called in separate function\\n            /// Use doesn't want to get liquidate, so stakes more collateral\\n            vault.deposit(asset, msg.sender, assetAmountEDecimal, lockupPeriodSeconds);\\n\\n        } else {\\n\\n            if (assetAmountEDecimal != 0) {\\n                // deposit collateral to the wallet\\n                vault.deposit(asset, msg.sender, assetAmountEDecimal, lockupPeriodSeconds);\\n            }\\n\\n            // issue stablecoin to the user\\n            // why stablecoinAmount is chosen by user?\\n            // it should be calculated from amount of collateral given\\n            vault.borrow(asset, msg.sender, stablecoinAmountE18);\\n\\n            // maybe here we check that stablecoinAmount are corresponding to assetAmount?\\n            // how does user know correct values? probably by calling helper view function\\n            _ensurePositionCollateralization(asset, msg.sender);\\n\\n        }\\n\\n        // not allowed to left some dust after partial closure the position\\n        _ensureMinCollateralThreshold(asset, msg.sender);\\n\\n        emit Join(asset, msg.sender, assetAmountEDecimal, stablecoinAmountE18);\\n    }\\n\\n      // user can pay back the stablecoin and take his collateral\\n      // instead of passing both assetAmount and stablecoinAmount\\n      // better user just to pass one of them\\n      // also pass preferred rate and maybe acceptable diff percent\\n      // that's the purpose of passing both to protect user from rate fluctuations\\n    function exit(address asset, uint assetAmountEDecimal, uint stablecoinAmountE18) public nonReentrant checkpoint(asset, msg.sender) returns (uint) {\\n\\n        // check liquidation is not triggered yet\\n        require(vault.liquidationBlock(asset, msg.sender) == 0, \\\"SU Protocol: LIQUIDATING_POSITION\\\");\\n\\n        // not to pay more stablecoin than debt\\n        uint debtE18 = vault.debtsE18(asset, msg.sender);\\n        if (stablecoinAmountE18 > debtE18) { stablecoinAmountE18 = debtE18; }\\n\\n        // calculate and charge fee\\n        uint feeE18 = vault.calculateFeeE18(asset, msg.sender, stablecoinAmountE18);\\n\\n        bool destroyed = vault.liquidate(asset, msg.sender, msg.sender, assetAmountEDecimal, stablecoinAmountE18);\\n\\n        // not allowed to left some dust after partial closure the position\\n        _ensureMinCollateralThreshold(asset, msg.sender);\\n\\n        // burn stablecoin from the vault\\n        vault.repay(msg.sender, stablecoinAmountE18, feeE18);\\n\\n        if (destroyed) {\\n            emit Destroyed(asset, msg.sender, assetAmountEDecimal, stablecoinAmountE18);\\n            return stablecoinAmountE18;\\n        }\\n\\n        // TODO: check that withdrawals lead to update\\n\\n        vault.update(asset, msg.sender);\\n\\n        // make sure partial repayment is valid\\n        // but dont need to check this after full repayment?\\n        /// Yes, because divizion by 0\\n        _ensurePositionCollateralization(asset, msg.sender);\\n\\n        emit Exit(asset, msg.sender, assetAmountEDecimal, stablecoinAmountE18);\\n\\n        return stablecoinAmountE18;\\n    }\\n\\n    // after partial repayment should be made sure its still collateralized enough\\n    function _ensurePositionCollateralization(address asset, address owner) internal view {\\n        // calculate value in usd from collateral position\\n        uint usdValueE18 = getCollateralUsdValueE18(asset, owner);\\n\\n        // multiply value in usd to the collateral ratio, then divide by 1e18\\n        uint usdLimitE18 = usdValueE18 * managerParameters.initialCollateralRatioE18(asset) / 1e18;\\n\\n        // make sure calculated allowed limit is higher than the actual debt\\n        require(vault.getTotalDebtE18(asset, owner) <= usdLimitE18, \\\"SU Protocol: UNDERCOLLATERALIZED\\\");\\n    }\\n\\n    // after partial closure should be made sure it is not left too little amount of collateral\\n    function _ensureMinCollateralThreshold(address asset, address owner) internal view {\\n        // calculate value in usd from collateral position\\n        uint usdValueE18 = getCollateralUsdValueE18(asset, owner);\\n\\n        require(usdValueE18 == 0 || usdValueE18 > managerParameters.minCollateralInUsdE18(), \\\"SU Protocol: SMALL_COLLATERAL\\\");\\n    }\\n\\n    // * Now we return rate and calculate amount here\\n    function getCollateralUsdValueE18(address asset, address owner) public view returns (uint) {\\n        uint256 assetAmountEDecimal = vault.collateralsEDecimal(asset, owner);\\n\\n        return suOracle.getUsdPrice1e18(asset) * assetAmountEDecimal / 1e18;\\n    }\\n\\n     // is position allowed to be liquidated\\n    function _isLiquidatablePosition(\\n        address asset,\\n        address owner,\\n        uint usdValueE18\\n    ) internal view returns (bool) {\\n        // calculate current debt to be returned\\n        uint debtE18 = vault.getTotalDebtE18(asset, owner);\\n\\n        if (debtE18 == 0) return false;\\n        console.log(\\\"LIMIT\\\", debtE18, usdValueE18, managerParameters.liquidationRatioE18(asset));\\n        // make sure its not under collaterazied\\n        // should liquidation ration always be higher than 1 or allowed lower?\\n        return debtE18 * 1e18 / usdValueE18 >= managerParameters.liquidationRatioE18(asset);\\n    }\\n\\n     // view function to check if position is liquidatable\\n    function isLiquidatablePosition(\\n        address asset,\\n        address owner\\n    ) public view returns (bool) {\\n        uint usdValueE18 = getCollateralUsdValueE18(asset, owner);\\n\\n        return _isLiquidatablePosition(asset, owner, usdValueE18);\\n    }\\n\\n     // view function to show utilization ratio\\n     // the same function can be used inside of _isLiquidatablePosition\\n    function utilizationRatioE18(\\n        address asset,\\n        address owner\\n    ) public view returns (uint) {\\n        uint debtE18 = vault.getTotalDebtE18(asset, owner);\\n        if (debtE18 == 0) return 0;\\n\\n        uint usdValueE18 = getCollateralUsdValueE18(asset, owner);\\n\\n        return debtE18 * 1e18 / usdValueE18;\\n    }\\n\\n    /// @notice Marks a position as to be liquidated\\n    /// @param asset The address of the main collateral token of a position\\n    /// @param owner The owner of a position\\n    /** @dev\\n    Emits LiquidationTriggered event.\\n    Sets the current block as liquidationBlock for the position.\\n    Can be triggered only once for the position.\\n    */\\n    function triggerLiquidation(address asset, address owner) external {\\n\\n        // check liquidation is not triggered yet\\n        require(vault.liquidationBlock(asset, owner) == 0, \\\"SU Protocol: LIQUIDATING_POSITION\\\");\\n\\n        // calculate valut of collateral\\n        uint usdValue = getCollateralUsdValueE18(asset, owner);\\n\\n        // and check if it can be liquidated\\n        require(_isLiquidatablePosition(asset, owner, usdValue), \\\"SU Protocol: SAFE_POSITION\\\");\\n\\n        // summarize debt with accumulated fees\\n        vault.update(asset, owner);\\n\\n        // then vault will trigger liquidation and auction begins\\n        vault.triggerLiquidation(asset, owner);\\n\\n        emit LiquidationTriggered(asset, owner);\\n    }\\n\\n    // will stablecoin paid by liquidator be burned immediately?\\n    /// Yes\\n    // how can cascading liquidation happen step by step?\\n    /// please see https://ratiofinance.medium.com/ratio-risk-lesson-2-cascading-liquidations-e91e04050f47\\n    /// @notice Liquidates a position's collateral completely\\n    /// @dev Supports a partial liquidation\\n    /// @param asset The address of the main collateral token of a position\\n    /// @param owner The owner of a position\\n    /// @param repayer The person who repaies by debt and recieves a position's collateral\\n    /// @param repaymentE18 The amount of repayment\\n    /// @param excessAndFeeE18 The amount of stablecoins which transfer to foundation\\n    /// @param assetAmountEDecimal The position's collateral which be recieved by repayer\\n    /// @return destroyed Returns \\\"true\\\" if the position completely liquidated\\n    function liquidateAndRepay(\\n        address asset,\\n        address owner,\\n        address repayer,\\n        uint repaymentE18,\\n        uint excessAndFeeE18,\\n        uint assetAmountEDecimal\\n    ) public nonReentrant checkpoint(asset, owner) onlyLiquidationAccess returns (bool destroyed) {\\n        // check if it can be liquidated\\n        require(vault.liquidationBlock(asset, owner) > 0, \\\"SU Protocol: NOT_LIQUIDATING_POSITION\\\");\\n\\n        console.log(\\\"LIQUIDATE liquidate (assetAmount, repayment): \\\", assetAmountEDecimal, repaymentE18);\\n        destroyed = vault.liquidate(asset, owner, repayer, assetAmountEDecimal, repaymentE18);\\n\\n        // not allowed to left some dust after partial closure the position\\n        _ensureMinCollateralThreshold(asset, msg.sender);\\n\\n        // burn stablecoin from the vault\\n        console.log(\\\"REPAY repay (repayment, excessAndFee):\\\", repaymentE18, excessAndFeeE18);\\n        vault.repay(repayer, repaymentE18, excessAndFeeE18);\\n    }\\n\\n    /// @notice Liquidates a position\\n    /// @dev Supports a partial liquidation\\n    /// @param asset The address of the main collateral token of a position\\n    /// @param owner The owner of the collateral\\n    /// @param repayer The person who repaies by debt and transfers stablecoins to the foundation\\n    /// @param stablecoinsToRepaymentE18 The amount of stablecoins which will be burned as a debt repaymention\\n    /// @param assetAmountEDecimal The position's collateral which be recieved by repayer\\n    /// @return destroyed Returns \\\"true\\\" if the position completely liquidated\\n    function liquidate(\\n        address asset,\\n        address owner,\\n        address repayer,\\n        uint stablecoinsToRepaymentE18,\\n        uint assetAmountEDecimal\\n    ) public nonReentrant checkpoint(asset, owner) onlyLiquidationAccess returns (bool destroyed) {\\n        // check if it can be liquidated\\n        require(vault.liquidationBlock(asset, owner) > 0, \\\"SU Protocol: NOT_LIQUIDATING_POSITION\\\");\\n\\n        console.log(\\\"LIQUIDATE liquidate (assetAmount, repayment): \\\", assetAmountEDecimal, stablecoinsToRepaymentE18);\\n\\n        destroyed = vault.liquidate(asset, owner, repayer, assetAmountEDecimal, stablecoinsToRepaymentE18);\\n\\n        // not allowed to left some dust after partial closure the position\\n        _ensureMinCollateralThreshold(asset, msg.sender);\\n    }\\n\\n    /// @notice Finilizes the liquidation\\n    /// @param repayer The person who repaies by debt and transfers stablecoins to the foundation\\n    /// @param stablecoinsToRepaymentE18 The amount of stablecoins which will be burned as a debt repayment\\n    /// @param stablecoinsToFoundationE18 The amount of stablecoins which will be transfered to the foundation\\n    function repay(\\n        address repayer,\\n        uint stablecoinsToRepaymentE18,\\n        uint stablecoinsToFoundationE18\\n    ) public {\\n        console.log(\\\"REPAY repay (repayment, toFondation):\\\", stablecoinsToRepaymentE18, stablecoinsToFoundationE18);\\n\\n        // burn stablecoin from the vault\\n        vault.repay(repayer, stablecoinsToRepaymentE18, stablecoinsToFoundationE18);\\n    }\\n\\n    /// @notice Returns information about a liquidating position\\n    /// @dev TODO: should rename to getPositionInfo()\\n    /// @param asset The address of the main collateral token of a position\\n    /// @param owner The owner of the collateral\\n    /// @return liquidationBlock The block number when the liquidation was triggered\\n    /// @return collateralEDecimal The amount of collateral\\n    /// @return debtE18 The amount of borrowed stablecoins\\n    function getPosition(\\n        address asset,\\n        address owner\\n    ) external view returns (\\n        uint liquidationBlock,\\n        uint collateralEDecimal,\\n        uint debtE18\\n    ) {\\n        liquidationBlock = vault.liquidationBlock(asset, owner);\\n\\n        collateralEDecimal = vault.collateralsEDecimal(asset, owner);\\n        debtE18 = vault.debtsE18(asset, owner);\\n    }\\n\\n    /// @notice Returns information about a liquidating position\\n    /// @param asset The address of the main collateral token of a position\\n    /// @param owner The owner of the collateral\\n    /// @return liquidationBlock The block number when the liquidation was triggered\\n    function getLiquidationBlock(\\n        address asset,\\n        address owner\\n    ) external view returns (uint256) {\\n        return vault.liquidationBlock(asset, owner);\\n    }\\n\\n    // UI-helpers\\n\\n    // calculate liquidation price\\n    // can be used inside of _isLiquidatablePosition\\n    function liquidationPriceE18(\\n        address asset,\\n        address owner\\n    ) external view returns (uint) {\\n        uint debtE18 = vault.getTotalDebtE18(asset, owner);\\n        if (debtE18 == 0) return type(uint256).max;\\n\\n        // TODO initialCollateralRatioE18 or liquidationRatioE18?\\n        uint collateralLiqPriceE18 = debtE18 * 1e18 / (managerParameters.liquidationRatioE18(asset));\\n\\n        require(IERC20Metadata(asset).decimals() <= 18, \\\"SU Protocol: NOT_SUPPORTED_DECIMALS\\\");\\n\\n        return collateralLiqPriceE18 * 1e18 / vault.collateralsEDecimal(asset, owner) / 10 ** (18 - IERC20Metadata(asset).decimals());\\n    }\\n\\n    /// @notice Returns Loan-To-Value in e18\\n    function getLTVE18(address asset, address owner) external view returns (uint256) {\\n        uint usdValueE18 = getCollateralUsdValueE18(asset, owner);\\n        if (usdValueE18 == 0) return 0;\\n\\n        uint debtE18 = vault.debtsE18(asset, owner);\\n\\n        return debtE18 * 1e18 / usdValueE18;\\n    }\\n\\n    /// @notice Returns Available to Borrow\\n    /// we have invariant: (collateralAmountEDecimal * collateralPriceE18 / 1e18) * initialCollateralRatioE18 <= debtE18\\n    /// Has similar logic like in _ensurePositionCollateralization\\n    function getAvailableToBorrowE18(address asset, address owner) external view returns (uint256) {\\n        uint usdValueE18 = getCollateralUsdValueE18(asset, owner);\\n        uint usdLimitE18 = usdValueE18 * managerParameters.initialCollateralRatioE18(asset) / 1e18;\\n\\n        uint totalDebtE18 = vault.getTotalDebtE18(asset, owner);\\n\\n        if (usdLimitE18 <= totalDebtE18) return 0;\\n\\n        return usdLimitE18 - totalDebtE18;\\n    }\\n\\n    /// @notice Returns Available to Withdraw\\n    /// Has similar invariant like in getAvailableToBorrowE18\\n    function getAvailableToWithdrawE18(address asset, address owner) external view returns (uint256) {\\n        uint256 collateralAmountEDecimal = vault.collateralsEDecimal(asset, owner);\\n        uint256 collateralPriceE18 = suOracle.getUsdPrice1e18(asset);\\n        if (collateralPriceE18 == 0) return 0;\\n        uint256 debtE18 = vault.debtsE18(asset, owner);\\n\\n        uint256 minCollateralAmountEDecimal = debtE18 * (10 ** IERC20Metadata(asset).decimals()) * 1e18 / (collateralPriceE18 * managerParameters.initialCollateralRatioE18(asset));\\n\\n        return collateralAmountEDecimal - minCollateralAmountEDecimal;\\n    }\\n}\\n\",\"keccak256\":\"0x7d18beb3756a9239f36f50b9faf9d02396e18a414e330e5de68f7694f0694fc5\",\"license\":\"BSL 1.1\"},\"contracts/lending/SuManagerParameters.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\n/*\\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\\n*/\\npragma solidity ^0.8.0;\\n\\nimport \\\"./SuVaultParameters.sol\\\";\\nimport \\\"../access-control/SuAccessControlSingleton.sol\\\";\\n\\n/**\\n * @title managerParameters\\n **/\\nabstract contract SuManagerParameters is SuAuthenticated {\\n    // map token to initial collateralization ratio; 1e18 = 100% ratio\\n    mapping(address => uint) public initialCollateralRatioE18;\\n\\n    // map token to liquidation ratio; 1e18 = 100% ratio\\n    mapping(address => uint) public liquidationRatioE18; // TODO: deprecated\\n\\n    // the minimum value of collateral in USD which allowed to be left after partial closure\\n    uint256 public minCollateralInUsdE18;\\n\\n    SuVaultParameters public vaultParameters;\\n\\n    function __SuManagerParameters_init(address _vaultParameters)  internal onlyInitializing {\\n        __SuAuthenticated_init(address(SuAuthenticated(_vaultParameters).ACCESS_CONTROL_SINGLETON()));\\n\\n        vaultParameters = SuVaultParameters(_vaultParameters);\\n        minCollateralInUsdE18 = 5 * 1e18;\\n    }\\n\\n    function setCollateral(\\n        address asset,\\n        uint stabilityFeeValueE18,\\n        uint initialCollateralRatioValueE18,\\n        uint liquidationRatioValueE18,\\n        uint stablecoinLimitE18,\\n        uint minCollateralInUsdValueE18\\n    ) external onlyOwner {\\n        vaultParameters.setCollateral(asset, stabilityFeeValueE18, stablecoinLimitE18);\\n        setInitialCollateralRatioE18(asset, initialCollateralRatioValueE18);\\n        setLiquidationRatioE18(asset, liquidationRatioValueE18);\\n        setMinCollateralInUsdE18(minCollateralInUsdValueE18);\\n    }\\n\\n    /**\\n     * @notice Only manager is able to call this function\\n     * @dev Sets the initial collateral ratio\\n     * @param asset The address of the main collateral token\\n     * @param newValueE18 The collateralization ratio (1e18 = 100%)\\n     **/\\n    function setInitialCollateralRatioE18(address asset, uint256 newValueE18) public onlyOwner {\\n        require(newValueE18 != 0 && newValueE18 <= 1e18, \\\"SU Protocol: INCORRECT_COLLATERALIZATION_VALUE\\\");\\n        initialCollateralRatioE18[asset] = newValueE18;\\n    }\\n\\n    /**\\n     * @notice Only manager is able to call this function\\n     * @dev Sets the liquidation ratio\\n     * @param asset The address of the main collateral token\\n     * @param newValueE18 The liquidation ratio (1e18 = 100%)\\n     **/\\n    function setLiquidationRatioE18(address asset, uint256 newValueE18) public onlyOwner {\\n        require(newValueE18 != 0 && newValueE18 >= initialCollateralRatioE18[asset], \\\"SU Protocol: INCORRECT_COLLATERALIZATION_VALUE\\\");\\n        liquidationRatioE18[asset] = newValueE18;\\n    }\\n\\n    /**\\n     * @notice Only manager is able to call this function\\n     * @dev Sets a minimum value of collateral in USD which allowed to be left after partial closure\\n     * @param newValueE18 The minimum value of collateral in USD\\n     */\\n    function setMinCollateralInUsdE18(uint256 newValueE18) public onlyOwner {\\n        minCollateralInUsdE18 = newValueE18;\\n    }\\n}\\n\",\"keccak256\":\"0xcf63b99a42c56108993b4d50d3668a7f502813b8c4e90e8a988a059948acf36f\",\"license\":\"BSL 1.1\"},\"contracts/lending/SuVaultParameters.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\r\\n\\r\\nimport \\\"../access-control/SuAccessControlSingleton.sol\\\";\\r\\nimport \\\"../access-control/SuAuthenticated.sol\\\";\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// VaultParameters is Singleton for Access Control\\r\\n// this looks like configuration contract\\r\\n// what are the rules to determine these configs for each new allowed collateral?\\r\\n/// yes, and for all collaterals\\r\\n// is DAO allowed to choose parameters for existing collaterals?\\r\\n///\\r\\n// are there any limits to be enforced? i.e. fee cannot be over 100% percent\\r\\n/// No, but it's a good idea to have it\\r\\nabstract contract SuVaultParameters is SuAuthenticated {\\r\\n    // stability fee can be different for each collateral\\r\\n    /// yes\\r\\n    mapping(address => uint) public protocolStabilityFeeE18;\\r\\n\\r\\n    // map token to USDP mint limit\\r\\n    /// yes, limit for each collateral-assert\\r\\n    mapping(address => uint) public tokenDebtLimitE18;\\r\\n\\r\\n    // what is foundation, DAO?\\r\\n    /// Beneficiaty as VotingEscrow.vy\\r\\n    address public foundation;\\r\\n\\r\\n    address public vault;\\r\\n\\r\\n    // creator of contract is manager, can it be the same as DAO or can it be removed later?\\r\\n    /// YES\\r\\n    // how can vault address be known at this moment?\\r\\n    /// Precult based on CREATE spec\\r\\n    // can be created another function to set vault address once deployed?\\r\\n    /// Yes, possibly with some logic change\\r\\n    function __SuVaultParameters_init(\\r\\n        address _authControl,\\r\\n        address payable _vault,\\r\\n        address _foundation\\r\\n    )  internal onlyInitializing {\\r\\n        __SuAuthenticated_init(_authControl);\\r\\n\\r\\n        require(_vault != address(0), \\\"SU Protocol: ZERO_ADDRESS\\\");\\r\\n        require(_foundation != address(0), \\\"SU Protocol: ZERO_ADDRESS\\\");\\r\\n\\r\\n        vault = _vault;\\r\\n\\r\\n        // ISuAccessControl(_authControl).setVault(_vault, true);\\r\\n        // ISuAccessControl(_authControl).setDAO(msg.sender, true);\\r\\n\\r\\n        foundation = _foundation;\\r\\n    }\\r\\n\\r\\n    // similar function can be added to setVault\\r\\n    function setFoundation(address newFoundation) external onlyOwner {\\r\\n        require(newFoundation != address(0), \\\"SU Protocol: ZERO_ADDRESS\\\");\\r\\n        foundation = newFoundation;\\r\\n    }\\r\\n\\r\\n    // manager is allowed to add new collaterals and modify existing ones\\r\\n    // I think creating new collaterals and modifying existing ones should be separate functions\\r\\n    /// Yes, for sercurity reason, it's possible to add events for creating and edititing\\r\\n    // also different event should be emitted NewCollateral UpdatedCollateral accordingly\\r\\n    // those events can be handled on frontend to notify user about any changes in rules\\r\\n    /// Not sure it makes sense to split into create/edit functions\\r\\n    function setCollateral(\\r\\n        address asset,\\r\\n        uint stabilityFeeValueE18,\\r\\n        uint stablecoinLimitE18\\r\\n    ) external onlyOwner {\\r\\n        // stability fee should be validated in range, what is stability fee should be described here?\\r\\n        setStabilityFeeE18(asset, stabilityFeeValueE18);\\r\\n        // why debt limit for collateral is necessary? to manage risks in case of collateral failure?\\r\\n        setTokenDebtLimitE18(asset, stablecoinLimitE18);\\r\\n    }\\r\\n\\r\\n    // stability fee is measured as the number of coins per year or percentage?\\r\\n    // this should be clarified in argument name i.e. stabilityFeePercentageYearly\\r\\n    /// No, it's APR ( per year, see calculateFee) percentrage, fee percentage.\\r\\n    /// YES, self-documented code-style is the best practice.\\r\\n    function setStabilityFeeE18(address asset, uint newValue) public onlyOwner {\\r\\n        protocolStabilityFeeE18[asset] = newValue;\\r\\n    }\\r\\n\\r\\n\\r\\n    // debt limit can be changed for any collateral along with liquidation and stability fees\\r\\n    // seems like managers have too much power - that can be dangerous given multiple managers?\\r\\n    /// Yes, application of  principle of least priviledge needed\\r\\n    function setTokenDebtLimitE18(address asset, uint limit) public onlyOwner {\\r\\n        tokenDebtLimitE18[asset] = limit;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xc6482d097b0185f4d57f0a9aab665aa7b67d1927e80eadb7af60de6ea3235866\",\"license\":\"BSL 1.1\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613bdb806100206000396000f3fe6080604052600436106101e75760003560e01c80639077beac11610102578063c0c53b8b11610095578063dc97e84e11610064578063dc97e84e14610634578063e6bc046114610668578063f3f481df14610695578063fbfa77cf146106c257600080fd5b8063c0c53b8b146105a0578063cf133404146105c0578063d4796d12146105e0578063d53913931461060057600080fd5b8063ada9e5ad116100d1578063ada9e5ad1461050f578063b33dc1901461052f578063bb497dcc1461056a578063bbdc95311461058057600080fd5b80639077beac1461048f578063a20f9cb3146104af578063ab2a2a82146104cf578063aca345ee146104ef57600080fd5b80634c9a55501161017a5780636f16cbf7116101495780636f16cbf71461040f5780636f70e66f1461042f57806376b5070c1461044f5780638cd2e0c71461046f57600080fd5b80634c9a55501461038f57806356d8be56146103af5780636338e4d7146103cf5780636bf12d5f146103ef57600080fd5b80631af3be18116101b65780631af3be181461030f5780631c656c391461032f578063392c0ce71461034f5780634030815e1461036f57600080fd5b806303ee9f221461023e578063112e14001461027b578063134a02dd1461029d57806314c376dc146102cd57600080fd5b366102395760405162461bcd60e51b815260206004820152601760248201527f53552050726f746f636f6c3a205245535452494354454400000000000000000060448201526064015b60405180910390fd5b600080fd5b34801561024a57600080fd5b5060335461025e906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561028757600080fd5b5061029b6102963660046137e6565b6106e2565b005b3480156102a957600080fd5b506102bd6102b8366004613647565b610acf565b6040519015158152602001610272565b3480156102d957600080fd5b506103017fe965846df3dd5b1dfa65f58e31477079e90140e0908b6dd31b5aead5a57cf36581565b604051908152602001610272565b34801561031b57600080fd5b5060395461025e906001600160a01b031681565b34801561033b57600080fd5b5061030161034a366004613647565b610af3565b34801561035b57600080fd5b5061030161036a366004613647565b610bc1565b34801561037b57600080fd5b5061030161038a366004613647565b610c7a565b34801561039b57600080fd5b506103016103aa366004613647565b610da1565b3480156103bb57600080fd5b506103016103ca366004613647565b610e2e565b3480156103db57600080fd5b506103016103ea366004613647565b610f8e565b3480156103fb57600080fd5b506102bd61040a366004613723565b6112bd565b34801561041b57600080fd5b5061029b61042a366004613787565b6116cf565b34801561043b57600080fd5b506102bd61044a3660046136c9565b611852565b34801561045b57600080fd5b5061030161046a366004613647565b611bd3565b34801561047b57600080fd5b5061029b61048a3660046137b2565b611ebd565b34801561049b57600080fd5b5061029b6104aa366004613787565b611f52565b3480156104bb57600080fd5b50603b5461025e906001600160a01b031681565b3480156104db57600080fd5b50603a5461025e906001600160a01b031681565b3480156104fb57600080fd5b5060375461025e906001600160a01b031681565b34801561051b57600080fd5b5061029b61052a366004613820565b6120c5565b34801561053b57600080fd5b5061054f61054a366004613647565b61223e565b60408051938452602084019290925290820152606001610272565b34801561057657600080fd5b5061030160365481565b34801561058c57600080fd5b5061030161059b3660046137b2565b6123e1565b3480156105ac57600080fd5b5061029b6105bb36600461367f565b6128ef565b3480156105cc57600080fd5b5061029b6105db3660046138a7565b612add565b3480156105ec57600080fd5b5061029b6105fb366004613647565b612bb0565b34801561060c57600080fd5b506103017f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b34801561064057600080fd5b506103017f9a9aef7c1247d5fc769b0185c052913e39673da29a880317dfd20ebf86f26a4981565b34801561067457600080fd5b5061030161068336600461362b565b60356020526000908152604090205481565b3480156106a157600080fd5b506103016106b036600461362b565b60346020526000908152604090205481565b3480156106ce57600080fd5b5060385461025e906001600160a01b031681565b600260015414156107355760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610230565b600260015583338315158061074957508415155b6107955760405162461bcd60e51b815260206004820152601760248201527f53552050726f746f636f6c3a205553454c4553535f54580000000000000000006044820152606401610230565b6012866001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156107d057600080fd5b505afa1580156107e4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080891906138d7565b60ff1611156108655760405162461bcd60e51b815260206004820152602360248201527f53552050726f746f636f6c3a204e4f545f535550504f525445445f444543494d604482015262414c5360e81b6064820152608401610230565b836108e2576038546040516320e8c56560e01b81526001600160a01b0388811660048301523360248301526044820188905260648201869052909116906320e8c56590608401600060405180830381600087803b1580156108c557600080fd5b505af11580156108d9573d6000803e3d6000fd5b50505050610a0c565b841561095c576038546040516320e8c56560e01b81526001600160a01b0388811660048301523360248301526044820188905260648201869052909116906320e8c56590608401600060405180830381600087803b15801561094357600080fd5b505af1158015610957573d6000803e3d6000fd5b505050505b6038546040517f5224372c0000000000000000000000000000000000000000000000000000000081526001600160a01b0388811660048301523360248301526044820187905290911690635224372c90606401602060405180830381600087803b1580156109c957600080fd5b505af11580156109dd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0191906138bf565b50610a0c8633612e15565b610a168633612f98565b604080518681526020810186905233916001600160a01b038916917f6423b6056e64b3b29cb2d342362b47c26fa8d6877da27ea152354060df19b9bc910160405180910390a3603a54604051632ed56dff60e21b81526001600160a01b03848116600483015283811660248301529091169063bb55b7fc90604401600060405180830381600087803b158015610aab57600080fd5b505af1158015610abf573d6000803e3d6000fd5b5050600180555050505050505050565b600080610adc8484610c7a565b9050610ae9848483613088565b9150505b92915050565b60385460405163a6ea8b8760e01b81526001600160a01b0384811660048301528381166024830152600092839291169063a6ea8b879060440160206040518083038186803b158015610b4457600080fd5b505afa158015610b58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7c91906138bf565b905080610b8d576000915050610aed565b6000610b998585610c7a565b905080610bae83670de0b6b3a7640000613aa5565b610bb89190613997565b95945050505050565b600080610bce8484610c7a565b905080610bdf576000915050610aed565b603854604051636aee125d60e11b81526001600160a01b0386811660048301528581166024830152600092169063d5dc24ba9060440160206040518083038186803b158015610c2d57600080fd5b505afa158015610c41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6591906138bf565b905081610bae82670de0b6b3a7640000613aa5565b6038546040516334e3b77960e01b81526001600160a01b038481166004830152838116602483015260009283929116906334e3b7799060440160206040518083038186803b158015610ccb57600080fd5b505afa158015610cdf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0391906138bf565b603b546040516306addfb360e31b81526001600160a01b038781166004830152929350670de0b6b3a7640000928492169063356efd989060240160206040518083038186803b158015610d5557600080fd5b505afa158015610d69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8d91906138bf565b610d979190613aa5565b610ae99190613997565b603854604051631ce4b4a760e01b81526001600160a01b03848116600483015283811660248301526000921690631ce4b4a79060440160206040518083038186803b158015610def57600080fd5b505afa158015610e03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2791906138bf565b9392505050565b600080610e3b8484610c7a565b60395460405163f3f481df60e01b81526001600160a01b038781166004830152929350600092670de0b6b3a764000092169063f3f481df9060240160206040518083038186803b158015610e8e57600080fd5b505afa158015610ea2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec691906138bf565b610ed09084613aa5565b610eda9190613997565b60385460405163a6ea8b8760e01b81526001600160a01b03888116600483015287811660248301529293506000929091169063a6ea8b879060440160206040518083038186803b158015610f2d57600080fd5b505afa158015610f41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6591906138bf565b9050808211610f7a5760009350505050610aed565b610f848183613ac4565b9695505050505050565b60385460405163a6ea8b8760e01b81526001600160a01b0384811660048301528381166024830152600092839291169063a6ea8b879060440160206040518083038186803b158015610fdf57600080fd5b505afa158015610ff3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101791906138bf565b90508061102957600019915050610aed565b60395460405163e6bc046160e01b81526001600160a01b038681166004830152600092169063e6bc04619060240160206040518083038186803b15801561106f57600080fd5b505afa158015611083573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a791906138bf565b6110b983670de0b6b3a7640000613aa5565b6110c39190613997565b90506012856001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561110057600080fd5b505afa158015611114573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061113891906138d7565b60ff1611156111955760405162461bcd60e51b815260206004820152602360248201527f53552050726f746f636f6c3a204e4f545f535550504f525445445f444543494d604482015262414c5360e81b6064820152608401610230565b846001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156111ce57600080fd5b505afa1580156111e2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120691906138d7565b611211906012613adb565b61121c90600a6139fa565b6038546040516334e3b77960e01b81526001600160a01b0388811660048301528781166024830152909116906334e3b7799060440160206040518083038186803b15801561126957600080fd5b505afa15801561127d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a191906138bf565b6112b383670de0b6b3a7640000613aa5565b610bae9190613997565b6000600260015414156113125760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610230565b6002600155603354604051632474521560e21b81527f9a9aef7c1247d5fc769b0185c052913e39673da29a880317dfd20ebf86f26a496004820152336024820152889188916001600160a01b03909116906391d148549060440160206040518083038186803b15801561138457600080fd5b505afa158015611398573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113bc919061386b565b61141a5760405162461bcd60e51b815260206004820152602960248201527f5375417574683a206f6e6c794c69717569646174696f6e416363657373204155604482015268151217d1905253115160ba1b6064820152608401610230565b603854604051631ce4b4a760e01b81526001600160a01b038b811660048301528a811660248301526000921690631ce4b4a79060440160206040518083038186803b15801561146857600080fd5b505afa15801561147c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a091906138bf565b116114fb5760405162461bcd60e51b815260206004820152602560248201527f53552050726f746f636f6c3a204e4f545f4c49515549444154494e475f504f5360448201526424aa24a7a760d91b6064820152608401610230565b61151e6040518060600160405280602e8152602001613b53602e91398588613283565b603854604051636f70e66f60e01b81526001600160a01b038b811660048301528a811660248301528981166044830152606482018790526084820189905290911690636f70e66f9060a401602060405180830381600087803b15801561158357600080fd5b505af1158015611597573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115bb919061386b565b92506115c78933612f98565b6115ea604051806060016040528060268152602001613b2d602691398787613283565b603854604051638cd2e0c760e01b81526001600160a01b038981166004830152602482018990526044820188905290911690638cd2e0c790606401600060405180830381600087803b15801561163f57600080fd5b505af1158015611653573d6000803e3d6000fd5b5050603a54604051632ed56dff60e21b81526001600160a01b0386811660048301528581166024830152909116925063bb55b7fc9150604401600060405180830381600087803b1580156116a657600080fd5b505af11580156116ba573d6000803e3d6000fd5b50506001805550929998505050505050505050565b603354604051632474521560e21b8152600060048201523360248201526001600160a01b03909116906391d148549060440160206040518083038186803b15801561171957600080fd5b505afa15801561172d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611751919061386b565b61179d5760405162461bcd60e51b815260206004820152601d60248201527f5375417574683a206f6e6c794f776e657220415554485f4641494c45440000006044820152606401610230565b80158015906117c457506001600160a01b0382166000908152603460205260409020548110155b6118365760405162461bcd60e51b815260206004820152602e60248201527f53552050726f746f636f6c3a20494e434f52524543545f434f4c4c415445524160448201527f4c495a4154494f4e5f56414c55450000000000000000000000000000000000006064820152608401610230565b6001600160a01b03909116600090815260356020526040902055565b6000600260015414156118a75760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610230565b6002600155603354604051632474521560e21b81527f9a9aef7c1247d5fc769b0185c052913e39673da29a880317dfd20ebf86f26a496004820152336024820152879187916001600160a01b03909116906391d148549060440160206040518083038186803b15801561191957600080fd5b505afa15801561192d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611951919061386b565b6119af5760405162461bcd60e51b815260206004820152602960248201527f5375417574683a206f6e6c794c69717569646174696f6e416363657373204155604482015268151217d1905253115160ba1b6064820152608401610230565b603854604051631ce4b4a760e01b81526001600160a01b038a8116600483015289811660248301526000921690631ce4b4a79060440160206040518083038186803b1580156119fd57600080fd5b505afa158015611a11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a3591906138bf565b11611a905760405162461bcd60e51b815260206004820152602560248201527f53552050726f746f636f6c3a204e4f545f4c49515549444154494e475f504f5360448201526424aa24a7a760d91b6064820152608401610230565b611ab36040518060600160405280602e8152602001613b53602e91398587613283565b603854604051636f70e66f60e01b81526001600160a01b038a8116600483015289811660248301528881166044830152606482018790526084820188905290911690636f70e66f9060a401602060405180830381600087803b158015611b1857600080fd5b505af1158015611b2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b50919061386b565b9250611b5c8833612f98565b603a54604051632ed56dff60e21b81526001600160a01b03848116600483015283811660248301529091169063bb55b7fc90604401600060405180830381600087803b158015611bab57600080fd5b505af1158015611bbf573d6000803e3d6000fd5b505060018055509298975050505050505050565b6038546040516334e3b77960e01b81526001600160a01b038481166004830152838116602483015260009283929116906334e3b7799060440160206040518083038186803b158015611c2457600080fd5b505afa158015611c38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c5c91906138bf565b603b546040516306addfb360e31b81526001600160a01b0387811660048301529293506000929091169063356efd989060240160206040518083038186803b158015611ca757600080fd5b505afa158015611cbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cdf91906138bf565b905080611cf157600092505050610aed565b603854604051636aee125d60e11b81526001600160a01b0387811660048301528681166024830152600092169063d5dc24ba9060440160206040518083038186803b158015611d3f57600080fd5b505afa158015611d53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d7791906138bf565b60395460405163f3f481df60e01b81526001600160a01b0389811660048301529293506000929091169063f3f481df9060240160206040518083038186803b158015611dc257600080fd5b505afa158015611dd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dfa91906138bf565b611e049084613aa5565b876001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611e3d57600080fd5b505afa158015611e51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e7591906138d7565b611e8090600a6139fa565b611e8a9084613aa5565b611e9c90670de0b6b3a7640000613aa5565b611ea69190613997565b9050611eb28185613ac4565b979650505050505050565b611ee0604051806060016040528060258152602001613b81602591398383613283565b603854604051638cd2e0c760e01b81526001600160a01b038581166004830152602482018590526044820184905290911690638cd2e0c790606401600060405180830381600087803b158015611f3557600080fd5b505af1158015611f49573d6000803e3d6000fd5b50505050505050565b603354604051632474521560e21b8152600060048201523360248201526001600160a01b03909116906391d148549060440160206040518083038186803b158015611f9c57600080fd5b505afa158015611fb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fd4919061386b565b6120205760405162461bcd60e51b815260206004820152601d60248201527f5375417574683a206f6e6c794f776e657220415554485f4641494c45440000006044820152606401610230565b80158015906120375750670de0b6b3a76400008111155b6120a95760405162461bcd60e51b815260206004820152602e60248201527f53552050726f746f636f6c3a20494e434f52524543545f434f4c4c415445524160448201527f4c495a4154494f4e5f56414c55450000000000000000000000000000000000006064820152608401610230565b6001600160a01b03909116600090815260346020526040902055565b603354604051632474521560e21b8152600060048201523360248201526001600160a01b03909116906391d148549060440160206040518083038186803b15801561210f57600080fd5b505afa158015612123573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612147919061386b565b6121935760405162461bcd60e51b815260206004820152601d60248201527f5375417574683a206f6e6c794f776e657220415554485f4641494c45440000006044820152606401610230565b6037546040517f9fea3e070000000000000000000000000000000000000000000000000000000081526001600160a01b038881166004830152602482018890526044820185905290911690639fea3e0790606401600060405180830381600087803b15801561220157600080fd5b505af1158015612215573d6000803e3d6000fd5b505050506122238685611f52565b61222d86846116cf565b61223681612add565b505050505050565b603854604051631ce4b4a760e01b81526001600160a01b03848116600483015283811660248301526000928392839290911690631ce4b4a79060440160206040518083038186803b15801561229257600080fd5b505afa1580156122a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ca91906138bf565b6038546040516334e3b77960e01b81526001600160a01b03888116600483015287811660248301529295509116906334e3b7799060440160206040518083038186803b15801561231957600080fd5b505afa15801561232d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061235191906138bf565b603854604051636aee125d60e11b81526001600160a01b038881166004830152878116602483015292945091169063d5dc24ba9060440160206040518083038186803b1580156123a057600080fd5b505afa1580156123b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123d891906138bf565b90509250925092565b6000600260015414156124365760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610230565b6002600155603854604051631ce4b4a760e01b81526001600160a01b038087166004830152336024830181905287939092911690631ce4b4a79060440160206040518083038186803b15801561248b57600080fd5b505afa15801561249f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124c391906138bf565b1561251a5760405162461bcd60e51b815260206004820152602160248201527f53552050726f746f636f6c3a204c49515549444154494e475f504f534954494f6044820152602760f91b6064820152608401610230565b603854604051636aee125d60e11b81526001600160a01b038881166004830152336024830152600092169063d5dc24ba9060440160206040518083038186803b15801561256657600080fd5b505afa15801561257a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061259e91906138bf565b9050808511156125ac578094505b6038546040517f34c188b00000000000000000000000000000000000000000000000000000000081526001600160a01b0389811660048301523360248301526044820188905260009216906334c188b09060640160206040518083038186803b15801561261857600080fd5b505afa15801561262c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061265091906138bf565b603854604051636f70e66f60e01b81526001600160a01b038b8116600483015233602483018190526044830152606482018b9052608482018a905292935060009290911690636f70e66f9060a401602060405180830381600087803b1580156126b857600080fd5b505af11580156126cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126f0919061386b565b90506126fc8933612f98565b603854604051638cd2e0c760e01b815233600482015260248101899052604481018490526001600160a01b0390911690638cd2e0c790606401600060405180830381600087803b15801561274f57600080fd5b505af1158015612763573d6000803e3d6000fd5b5050505080156127be57604080518981526020810189905233916001600160a01b038c16917f4bd704811146c45cfd9276261817324e0acc0b5eaa458b21a0740367dc37cdb8910160405180910390a386955050505061287a565b60385460405163c640752d60e01b81526001600160a01b038b811660048301523360248301529091169063c640752d90604401600060405180830381600087803b15801561280b57600080fd5b505af115801561281f573d6000803e3d6000fd5b5050505061282d8933612e15565b604080518981526020810189905233916001600160a01b038c16917fa702ae6024e8b4c2b0eb162b1453dacb93cf6922f5a2d7236faed898c21148f8910160405180910390a38695505050505b603a54604051632ed56dff60e21b81526001600160a01b03848116600483015283811660248301529091169063bb55b7fc90604401600060405180830381600087803b1580156128c957600080fd5b505af11580156128dd573d6000803e3d6000fd5b50506001805550929695505050505050565b600054610100900460ff1661290a5760005460ff161561290e565b303b155b6129805760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610230565b600054610100900460ff161580156129a2576000805461ffff19166101011790555b6129aa6132f8565b6129b38461336d565b3080158015906129cb57506001600160a01b03831615155b612a175760405162461bcd60e51b815260206004820152601960248201527f53552050726f746f636f6c3a20494e56414c49445f41524753000000000000006044820152606401610230565b6001600160a01b038416612a6d5760405162461bcd60e51b815260206004820152601760248201527f494e56414c49445f415247533a2053555f4f5241434c450000000000000000006044820152606401610230565b603b80546001600160a01b0380871673ffffffffffffffffffffffffffffffffffffffff1992831617909255603980549383169382169390931790925560388054878316908416179055603a8054918516919092161790558015612ad7576000805461ff00191690555b50505050565b603354604051632474521560e21b8152600060048201523360248201526001600160a01b03909116906391d148549060440160206040518083038186803b158015612b2757600080fd5b505afa158015612b3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b5f919061386b565b612bab5760405162461bcd60e51b815260206004820152601d60248201527f5375417574683a206f6e6c794f776e657220415554485f4641494c45440000006044820152606401610230565b603655565b603854604051631ce4b4a760e01b81526001600160a01b038481166004830152838116602483015290911690631ce4b4a79060440160206040518083038186803b158015612bfd57600080fd5b505afa158015612c11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c3591906138bf565b15612c8c5760405162461bcd60e51b815260206004820152602160248201527f53552050726f746f636f6c3a204c49515549444154494e475f504f534954494f6044820152602760f91b6064820152608401610230565b6000612c988383610c7a565b9050612ca5838383613088565b612cf15760405162461bcd60e51b815260206004820152601a60248201527f53552050726f746f636f6c3a20534146455f504f534954494f4e0000000000006044820152606401610230565b60385460405163c640752d60e01b81526001600160a01b03858116600483015284811660248301529091169063c640752d90604401600060405180830381600087803b158015612d4057600080fd5b505af1158015612d54573d6000803e3d6000fd5b50506038546040517fd4796d120000000000000000000000000000000000000000000000000000000081526001600160a01b0387811660048301528681166024830152909116925063d4796d129150604401600060405180830381600087803b158015612dc057600080fd5b505af1158015612dd4573d6000803e3d6000fd5b50506040516001600160a01b038086169350861691507f5b79a897d30813a62a1f95ba180d3320d3701d96605708b81105e00719a069e490600090a3505050565b6000612e218383610c7a565b60395460405163f3f481df60e01b81526001600160a01b038681166004830152929350600092670de0b6b3a764000092169063f3f481df9060240160206040518083038186803b158015612e7457600080fd5b505afa158015612e88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eac91906138bf565b612eb69084613aa5565b612ec09190613997565b60385460405163a6ea8b8760e01b81526001600160a01b038781166004830152868116602483015292935083929091169063a6ea8b879060440160206040518083038186803b158015612f1257600080fd5b505afa158015612f26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f4a91906138bf565b1115612ad75760405162461bcd60e51b815260206004820181905260248201527f53552050726f746f636f6c3a20554e444552434f4c4c41544552414c495a45446044820152606401610230565b6000612fa48383610c7a565b90508015806130375750603960009054906101000a90046001600160a01b03166001600160a01b031663bb497dcc6040518163ffffffff1660e01b815260040160206040518083038186803b158015612ffc57600080fd5b505afa158015613010573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061303491906138bf565b81115b6130835760405162461bcd60e51b815260206004820152601d60248201527f53552050726f746f636f6c3a20534d414c4c5f434f4c4c41544552414c0000006044820152606401610230565b505050565b60385460405163a6ea8b8760e01b81526001600160a01b0385811660048301528481166024830152600092839291169063a6ea8b879060440160206040518083038186803b1580156130d957600080fd5b505afa1580156130ed573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061311191906138bf565b905080613122576000915050610e27565b604080518082018252600581527f4c494d49540000000000000000000000000000000000000000000000000000006020820152603954915163e6bc046160e01b81526001600160a01b0388811660048301526131de93859288929091169063e6bc04619060240160206040518083038186803b1580156131a157600080fd5b505afa1580156131b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131d991906138bf565b61348c565b60395460405163e6bc046160e01b81526001600160a01b0387811660048301529091169063e6bc04619060240160206040518083038186803b15801561322357600080fd5b505afa158015613237573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061325b91906138bf565b8361326e83670de0b6b3a7640000613aa5565b6132789190613997565b101595945050505050565b61308383838360405160240161329b93929190613943565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f969cdd03000000000000000000000000000000000000000000000000000000001790526134ff565b600054610100900460ff166133635760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610230565b61336b613520565b565b600054610100900460ff166133d85760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610230565b613451816001600160a01b03166303ee9f226040518163ffffffff1660e01b815260040160206040518083038186803b15801561341457600080fd5b505afa158015613428573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061344c919061388b565b613591565b6037805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055674563918244f40000603655565b612ad7848484846040516024016134a69493929190613968565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f08ee5666000000000000000000000000000000000000000000000000000000001790525b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b600054610100900460ff1661358b5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610230565b60018055565b600054610100900460ff166135fc5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610230565b6033805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60006020828403121561363c578081fd5b8135610e2781613b14565b60008060408385031215613659578081fd5b823561366481613b14565b9150602083013561367481613b14565b809150509250929050565b600080600060608486031215613693578081fd5b833561369e81613b14565b925060208401356136ae81613b14565b915060408401356136be81613b14565b809150509250925092565b600080600080600060a086880312156136e0578081fd5b85356136eb81613b14565b945060208601356136fb81613b14565b9350604086013561370b81613b14565b94979396509394606081013594506080013592915050565b60008060008060008060c0878903121561373b578081fd5b863561374681613b14565b9550602087013561375681613b14565b9450604087013561376681613b14565b959894975094956060810135955060808101359460a0909101359350915050565b60008060408385031215613799578182fd5b82356137a481613b14565b946020939093013593505050565b6000806000606084860312156137c6578283fd5b83356137d181613b14565b95602085013595506040909401359392505050565b600080600080608085870312156137fb578384fd5b843561380681613b14565b966020860135965060408601359560600135945092505050565b60008060008060008060c08789031215613838578182fd5b863561384381613b14565b9860208801359850604088013597606081013597506080810135965060a00135945092505050565b60006020828403121561387c578081fd5b81518015158114610e27578182fd5b60006020828403121561389c578081fd5b8151610e2781613b14565b6000602082840312156138b8578081fd5b5035919050565b6000602082840312156138d0578081fd5b5051919050565b6000602082840312156138e8578081fd5b815160ff81168114610e27578182fd5b60008151808452815b8181101561391d57602081850181015186830182015201613901565b8181111561392e5782602083870101525b50601f01601f19169290920160200192915050565b60608152600061395660608301866138f8565b60208301949094525060400152919050565b60808152600061397b60808301876138f8565b6020830195909552506040810192909252606090910152919050565b6000826139b257634e487b7160e01b81526012600452602481fd5b500490565b600181815b808511156139f25781600019048211156139d8576139d8613afe565b808516156139e557918102915b93841c93908002906139bc565b509250929050565b6000610e2760ff841683600082613a1357506001610aed565b81613a2057506000610aed565b8160018114613a365760028114613a4057613a5c565b6001915050610aed565b60ff841115613a5157613a51613afe565b50506001821b610aed565b5060208310610133831016604e8410600b8410161715613a7f575081810a610aed565b613a8983836139b7565b8060001904821115613a9d57613a9d613afe565b029392505050565b6000816000190483118215151615613abf57613abf613afe565b500290565b600082821015613ad657613ad6613afe565b500390565b600060ff821660ff841680821015613af557613af5613afe565b90039392505050565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0381168114613b2957600080fd5b5056fe5245504159207265706179202872657061796d656e742c20657863657373416e64466565293a4c4951554944415445206c697175696461746520286173736574416d6f756e742c2072657061796d656e74293a205245504159207265706179202872657061796d656e742c20746f466f6e646174696f6e293aa2646970667358221220a8adfa3e9e77970aad2d05f28973959874b58c8b65c6b9ebd74d5221c9eb5dc664736f6c63430008040033",
  "deployedBytecode": "",
  "devdoc": {
    "events": {
      "Buyout(address,address,address,uint256,uint256)": {
        "details": "Trigger when buyouts are happened*"
      }
    },
    "kind": "dev",
    "methods": {
      "getLiquidationBlock(address,address)": {
        "params": {
          "asset": "The address of the main collateral token of a position",
          "owner": "The owner of the collateral"
        },
        "returns": {
          "_0": "liquidationBlock The block number when the liquidation was triggered"
        }
      },
      "getPosition(address,address)": {
        "details": "TODO: should rename to getPositionInfo()",
        "params": {
          "asset": "The address of the main collateral token of a position",
          "owner": "The owner of the collateral"
        },
        "returns": {
          "collateralEDecimal": "The amount of collateral",
          "debtE18": "The amount of borrowed stablecoins",
          "liquidationBlock": "The block number when the liquidation was triggered"
        }
      },
      "liquidate(address,address,address,uint256,uint256)": {
        "details": "Supports a partial liquidation",
        "params": {
          "asset": "The address of the main collateral token of a position",
          "assetAmountEDecimal": "The position's collateral which be recieved by repayer",
          "owner": "The owner of the collateral",
          "repayer": "The person who repaies by debt and transfers stablecoins to the foundation",
          "stablecoinsToRepaymentE18": "The amount of stablecoins which will be burned as a debt repaymention"
        },
        "returns": {
          "destroyed": "Returns \"true\" if the position completely liquidated"
        }
      },
      "liquidateAndRepay(address,address,address,uint256,uint256,uint256)": {
        "details": "Supports a partial liquidation",
        "params": {
          "asset": "The address of the main collateral token of a position",
          "assetAmountEDecimal": "The position's collateral which be recieved by repayer",
          "excessAndFeeE18": "The amount of stablecoins which transfer to foundation",
          "owner": "The owner of a position",
          "repayer": "The person who repaies by debt and recieves a position's collateral",
          "repaymentE18": "The amount of repayment"
        },
        "returns": {
          "destroyed": "Returns \"true\" if the position completely liquidated"
        }
      },
      "repay(address,uint256,uint256)": {
        "params": {
          "repayer": "The person who repaies by debt and transfers stablecoins to the foundation",
          "stablecoinsToFoundationE18": "The amount of stablecoins which will be transfered to the foundation",
          "stablecoinsToRepaymentE18": "The amount of stablecoins which will be burned as a debt repayment"
        }
      },
      "setInitialCollateralRatioE18(address,uint256)": {
        "details": "Sets the initial collateral ratio",
        "params": {
          "asset": "The address of the main collateral token",
          "newValueE18": "The collateralization ratio (1e18 = 100%)*"
        }
      },
      "setLiquidationRatioE18(address,uint256)": {
        "details": "Sets the liquidation ratio",
        "params": {
          "asset": "The address of the main collateral token",
          "newValueE18": "The liquidation ratio (1e18 = 100%)*"
        }
      },
      "setMinCollateralInUsdE18(uint256)": {
        "details": "Sets a minimum value of collateral in USD which allowed to be left after partial closure",
        "params": {
          "newValueE18": "The minimum value of collateral in USD"
        }
      },
      "triggerLiquidation(address,address)": {
        "details": "Emits LiquidationTriggered event. Sets the current block as liquidationBlock for the position. Can be triggered only once for the position."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getAvailableToBorrowE18(address,address)": {
        "notice": "Returns Available to Borrow we have invariant: (collateralAmountEDecimal * collateralPriceE18 / 1e18) * initialCollateralRatioE18 <= debtE18 Has similar logic like in _ensurePositionCollateralization"
      },
      "getAvailableToWithdrawE18(address,address)": {
        "notice": "Returns Available to Withdraw Has similar invariant like in getAvailableToBorrowE18"
      },
      "getLTVE18(address,address)": {
        "notice": "Returns Loan-To-Value in e18"
      },
      "getLiquidationBlock(address,address)": {
        "notice": "Returns information about a liquidating position"
      },
      "getPosition(address,address)": {
        "notice": "Returns information about a liquidating position"
      },
      "join(address,uint256,uint256,uint256)": {
        "notice": "Yes,"
      },
      "liquidate(address,address,address,uint256,uint256)": {
        "notice": "Liquidates a position"
      },
      "liquidateAndRepay(address,address,address,uint256,uint256,uint256)": {
        "notice": "please see https://ratiofinance.medium.com/ratio-risk-lesson-2-cascading-liquidations-e91e04050f47Liquidates a position's collateral completely"
      },
      "repay(address,uint256,uint256)": {
        "notice": "Finilizes the liquidation"
      },
      "setInitialCollateralRatioE18(address,uint256)": {
        "notice": "Only manager is able to call this function"
      },
      "setLiquidationRatioE18(address,uint256)": {
        "notice": "Only manager is able to call this function"
      },
      "setMinCollateralInUsdE18(uint256)": {
        "notice": "Only manager is able to call this function"
      }
    },
    "notice": "not sure why",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 454,
        "contract": "contracts/lending/SuManager.sol:SuManager",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 457,
        "contract": "contracts/lending/SuManager.sol:SuManager",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 535,
        "contract": "contracts/lending/SuManager.sol:SuManager",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 579,
        "contract": "contracts/lending/SuManager.sol:SuManager",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 4355,
        "contract": "contracts/lending/SuManager.sol:SuManager",
        "label": "ACCESS_CONTROL_SINGLETON",
        "offset": 0,
        "slot": "51",
        "type": "t_contract(ISuAccessControl)7493"
      },
      {
        "astId": 10130,
        "contract": "contracts/lending/SuManager.sol:SuManager",
        "label": "initialCollateralRatioE18",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10134,
        "contract": "contracts/lending/SuManager.sol:SuManager",
        "label": "liquidationRatioE18",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10136,
        "contract": "contracts/lending/SuManager.sol:SuManager",
        "label": "minCollateralInUsdE18",
        "offset": 0,
        "slot": "54",
        "type": "t_uint256"
      },
      {
        "astId": 10139,
        "contract": "contracts/lending/SuManager.sol:SuManager",
        "label": "vaultParameters",
        "offset": 0,
        "slot": "55",
        "type": "t_contract(SuVaultParameters)11236"
      },
      {
        "astId": 9031,
        "contract": "contracts/lending/SuManager.sol:SuManager",
        "label": "vault",
        "offset": 0,
        "slot": "56",
        "type": "t_contract(ISuVault)8052"
      },
      {
        "astId": 9034,
        "contract": "contracts/lending/SuManager.sol:SuManager",
        "label": "managerParameters",
        "offset": 0,
        "slot": "57",
        "type": "t_contract(ISuManagerParameters)7874"
      },
      {
        "astId": 9037,
        "contract": "contracts/lending/SuManager.sol:SuManager",
        "label": "cdpRegistry",
        "offset": 0,
        "slot": "58",
        "type": "t_contract(ISuCdpRegistry)7590"
      },
      {
        "astId": 9040,
        "contract": "contracts/lending/SuManager.sol:SuManager",
        "label": "suOracle",
        "offset": 0,
        "slot": "59",
        "type": "t_contract(ISuOracle)7885"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ISuAccessControl)7493": {
        "encoding": "inplace",
        "label": "contract ISuAccessControl",
        "numberOfBytes": "20"
      },
      "t_contract(ISuCdpRegistry)7590": {
        "encoding": "inplace",
        "label": "contract ISuCdpRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(ISuManagerParameters)7874": {
        "encoding": "inplace",
        "label": "contract ISuManagerParameters",
        "numberOfBytes": "20"
      },
      "t_contract(ISuOracle)7885": {
        "encoding": "inplace",
        "label": "contract ISuOracle",
        "numberOfBytes": "20"
      },
      "t_contract(ISuVault)8052": {
        "encoding": "inplace",
        "label": "contract ISuVault",
        "numberOfBytes": "20"
      },
      "t_contract(SuVaultParameters)11236": {
        "encoding": "inplace",
        "label": "contract SuVaultParameters",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}