{
  "address": "0xB2981676f4d042f5714990879Fa2b700cc5eAF89",
  "abi": [
    {
      "inputs": [],
      "name": "BadInitialCollateralRatioValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BadLiquidationRatioValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidArgs",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LiquidationIsNotTriggered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LiquidationIsTriggered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PositionIsSafe",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Restricted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SmallCollateral",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnderCollateralized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnsupportedDecimals",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UselessTransaction",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "main",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stablecoin",
          "type": "uint256"
        }
      ],
      "name": "Exit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "main",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stablecoin",
          "type": "uint256"
        }
      ],
      "name": "Join",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACCESS_CONTROL_SINGLETON",
      "outputs": [
        {
          "internalType": "contract ISuAccessControl",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIQUIDATION_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VAULT_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "assetAmountEDecimal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stablecoinAmountE18",
          "type": "uint256"
        }
      ],
      "name": "exit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getAvailableToBorrowE18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getAvailableToWithdrawE18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getCollateralUsdValueE18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getLTVE18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getLiquidationBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getPositionInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidationBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateralEDecimal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "debtWithFeesE18",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "initialCollateralRatioE18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_suOracle",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "isLiquidatablePosition",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "assetAmountEDecimal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stablecoinAmountE18",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockupPeriodSeconds",
          "type": "uint256"
        }
      ],
      "name": "join",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "repayer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stablecoinsToRepaymentE18",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "assetAmountEDecimal",
          "type": "uint256"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "additionalCollateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "additionalStablecoinAmount",
          "type": "uint256"
        }
      ],
      "name": "liquidationPriceByAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "liquidationPriceE18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "liquidationRatioE18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minCollateralInUsdE18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stabilityFeeValueE18",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "initialCollateralRatioValueE18",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidationRatioValueE18",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stablecoinLimitE18",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minCollateralInUsdValueE18",
          "type": "uint256"
        }
      ],
      "name": "setCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newValueE18",
          "type": "uint256"
        }
      ],
      "name": "setInitialCollateralRatioE18",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newValueE18",
          "type": "uint256"
        }
      ],
      "name": "setLiquidationRatioE18",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValueE18",
          "type": "uint256"
        }
      ],
      "name": "setMinCollateralInUsdE18",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "triggerLiquidation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "utilizationRatioE18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "contract ISuVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultParameters",
      "outputs": [
        {
          "internalType": "contract SuVaultParameters",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "numDeployments": 3,
  "solcInputHash": "863628f94ed63f668290e10f5356c02b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"BadInitialCollateralRatioValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BadLiquidationRatioValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidArgs\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LiquidationIsNotTriggered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LiquidationIsTriggered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PositionIsSafe\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Restricted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SmallCollateral\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnderCollateralized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnsupportedDecimals\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UselessTransaction\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"main\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stablecoin\",\"type\":\"uint256\"}],\"name\":\"Exit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"main\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stablecoin\",\"type\":\"uint256\"}],\"name\":\"Join\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACCESS_CONTROL_SINGLETON\",\"outputs\":[{\"internalType\":\"contract ISuAccessControl\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDATION_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VAULT_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetAmountEDecimal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stablecoinAmountE18\",\"type\":\"uint256\"}],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getAvailableToBorrowE18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getAvailableToWithdrawE18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getCollateralUsdValueE18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getLTVE18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getLiquidationBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getPositionInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidationBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralEDecimal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtWithFeesE18\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"initialCollateralRatioE18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_suOracle\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"isLiquidatablePosition\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetAmountEDecimal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stablecoinAmountE18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockupPeriodSeconds\",\"type\":\"uint256\"}],\"name\":\"join\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"repayer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stablecoinsToRepaymentE18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetAmountEDecimal\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"additionalCollateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"additionalStablecoinAmount\",\"type\":\"uint256\"}],\"name\":\"liquidationPriceByAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"liquidationPriceE18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidationRatioE18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minCollateralInUsdE18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stabilityFeeValueE18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialCollateralRatioValueE18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationRatioValueE18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stablecoinLimitE18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minCollateralInUsdValueE18\",\"type\":\"uint256\"}],\"name\":\"setCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newValueE18\",\"type\":\"uint256\"}],\"name\":\"setInitialCollateralRatioE18\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newValueE18\",\"type\":\"uint256\"}],\"name\":\"setLiquidationRatioE18\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValueE18\",\"type\":\"uint256\"}],\"name\":\"setMinCollateralInUsdE18\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"triggerLiquidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"utilizationRatioE18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract ISuVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultParameters\",\"outputs\":[{\"internalType\":\"contract SuVaultParameters\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"setInitialCollateralRatioE18(address,uint256)\":{\"details\":\"Sets the initial collateral ratio\",\"params\":{\"asset\":\"The address of the main collateral token\",\"newValueE18\":\"The collateralization ratio (1e18 = 100%)*\"}},\"setLiquidationRatioE18(address,uint256)\":{\"details\":\"Sets the liquidation ratio\",\"params\":{\"asset\":\"The address of the main collateral token\",\"newValueE18\":\"The liquidation ratio (1e18 = 100%).*\"}},\"setMinCollateralInUsdE18(uint256)\":{\"details\":\"Sets a minimum value of collateral in USD which allowed to be left after partial closure\",\"params\":{\"newValueE18\":\"The minimum value of collateral in USD\"}},\"triggerLiquidation(address,address)\":{\"details\":\"Emits LiquidationTriggered event. Sets the current block as liquidationBlock for the position. Can be triggered only once for the position.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setInitialCollateralRatioE18(address,uint256)\":{\"notice\":\"Only manager is able to call this function\"},\"setLiquidationRatioE18(address,uint256)\":{\"notice\":\"Only manager is able to call this function\"},\"setMinCollateralInUsdE18(uint256)\":{\"notice\":\"Only manager is able to call this function\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lending/SuManager.sol\":\"SuManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ffe9655abbb3741fcb84ad10e2f628d5dbec46b3f84a69ceec4752e807e2757\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6777f3fccb5dab95a9088ef62c41bee0198fd92e50d7c94f0e3733788af4079e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCastUpgradeable {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xcec885ecdf113b4265ed0856972d7ff167bfeb3802604b18cbb782bf47ecc4ae\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x0004699ba89fa356eb0d58d815b42dcf52eccd2765e95256631b838bce2556bc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"contracts/access-control/SuAccessControlSingleton.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./SuAuthenticated.sol\\\";\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title SuAccessControl\\n * @dev Access control for contracts. SuVaultParameters can be inherited from it.\\n */\\n// TODO: refactor by https://en.wikipedia.org/wiki/Principle_of_least_privilege\\ncontract SuAccessControlSingleton is AccessControlUpgradeable, SuAuthenticated, ISuAccessControl {\\n    /**\\n     * @dev Initialize the contract with initial owner to be deployer\\n     */\\n    function initialize() public initializer {\\n        __AccessControl_init();\\n        __SuAuthenticated_init(address(this));\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    function transferOwnership(address newOwner) external {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Ownable: caller is not the owner\\\");\\n\\n        if (hasRole(MINTER_ROLE, msg.sender)) {\\n            grantRole(MINTER_ROLE, newOwner);\\n            revokeRole(MINTER_ROLE, msg.sender);\\n        }\\n\\n        if (hasRole(VAULT_ACCESS_ROLE, msg.sender)) {\\n            grantRole(VAULT_ACCESS_ROLE, newOwner);\\n            revokeRole(VAULT_ACCESS_ROLE, msg.sender);\\n        }\\n\\n        grantRole(DEFAULT_ADMIN_ROLE, newOwner);\\n        revokeRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x224461be16257185b5096e24349f1978c1a0084f5eb11c7b349e32500f8a0160\",\"license\":\"BSL 1.1\"},\"contracts/access-control/SuAuthenticated.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/ISuAccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title SuAuthenticated\\n * @dev other contracts should inherit to be authenticated\\n */\\nabstract contract SuAuthenticated is Initializable {\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant VAULT_ACCESS_ROLE = keccak256(\\\"VAULT_ACCESS_ROLE\\\");\\n    bytes32 public constant LIQUIDATION_ACCESS_ROLE = keccak256(\\\"LIQUIDATION_ACCESS_ROLE\\\");\\n    bytes32 private constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    // @dev the address of SuAccessControlSingleton - it should be one for all contract that inherits SuAuthenticated\\n    ISuAccessControl public ACCESS_CONTROL_SINGLETON;\\n\\n    // @dev should be passed in constructor\\n    function __SuAuthenticated_init(address _accessControlSingleton) internal onlyInitializing {\\n        ACCESS_CONTROL_SINGLETON = ISuAccessControl(_accessControlSingleton);\\n        // TODO: check that _accessControlSingleton points to ISuAccessControl instance\\n        // require(ISuAccessControl(_accessControlSingleton).supportsInterface(ISuAccessControl.hasRole.selector), \\\"bad dependency\\\");\\n    }\\n\\n    // @dev check DEFAULT_ADMIN_ROLE\\n    modifier onlyOwner() {\\n        require(ACCESS_CONTROL_SINGLETON.hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"SuAuth: onlyOwner AUTH_FAILED\\\");\\n        _;\\n    }\\n\\n    // @dev check VAULT_ACCESS_ROLE\\n    modifier onlyVaultAccess() {\\n        require(ACCESS_CONTROL_SINGLETON.hasRole(VAULT_ACCESS_ROLE, msg.sender), \\\"SuAuth: onlyVaultAccess AUTH_FAILED\\\");\\n        _;\\n    }\\n\\n    // @dev check VAULT_ACCESS_ROLE\\n    modifier onlyLiquidationAccess() {\\n        require(ACCESS_CONTROL_SINGLETON.hasRole(LIQUIDATION_ACCESS_ROLE, msg.sender), \\\"SuAuth: onlyLiquidationAccess AUTH_FAILED\\\");\\n        _;\\n    }\\n\\n    // @dev check MINTER_ROLE\\n    modifier onlyMinter() {\\n        require(ACCESS_CONTROL_SINGLETON.hasRole(MINTER_ROLE, msg.sender), \\\"SuAuth: onlyMinter AUTH_FAILED\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xa46331e68f981152c0a692dab54f01ef1f0170132c851d8848d14e38be7de8f5\",\"license\":\"BSL 1.1\"},\"contracts/interfaces/IRewardChefV2.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"./ISuOracle.sol\\\";\\n\\n/**\\n * @title RewardChefV2\\n * @notice fork of MasterChefV2(May-13-2021) https://etherscan.io/address/0xef0881ec094552b2e128cf945ef17a6752b4ec5d#code\\n * @dev This contract is based on MVC2, but uses \\\"virtual\\\" balances instead of storing real ERC20 tokens\\n * and uses address of this assets instead of pid.\\n * Rewards that are distributed have to be deposited using refillReward(uint256 amount, uint64 endBlock)\\n **/\\ninterface IRewardChefV2 {\\n    // @notice Info of each reward pool.\\n    // `allocPoint` The amount of allocation points assigned to the pool.\\n    // Also known as the amount of REWARD_TOKEN to distribute per block.\\n    struct PoolInfo {\\n        uint128 accSushiPerShare;\\n        uint64 lastRewardBlock;\\n        uint64 allocPoint;\\n        uint256 lpSupply;\\n    }\\n\\n    // @notice Info of each user.\\n    // `amount` token amount the user has provided.\\n    // `rewardDebt` The amount of rewards entitled to the user.\\n    struct UserInfo {\\n        uint256 amount;\\n        int256 rewardDebt;\\n\\n        uint256 multiplicator1e18;\\n        uint256 lockupPeriodSeconds;\\n        uint256 lockupStartTimestamp;\\n    }\\n\\n    struct ILockupPeriod {\\n        uint256 lockupPeriodSeconds;\\n        uint256 multiplicator1e18;\\n    }\\n\\n    // =======================================EVENTS=============================================\\n    event VirtualDeposit(address indexed user, address indexed asset, uint256 amount);\\n    event VirtualWithdraw(address indexed user, address indexed asset, uint256 amount);\\n    event ResetAmount(address indexed user, address indexed asset, address indexed to, uint256 amount, uint256 lockupPeriodSeconds);\\n    event Harvest(address indexed user, address indexed asset, uint256 amount);\\n    event LogPoolAddition(address indexed asset, uint256 allocPoint);\\n    event LogSetPool(address indexed asset, uint256 allocPoint);\\n    event LogUpdatePool(address indexed asset, uint64 lastRewardBlock, uint256 lpSupply, uint256 accSushiPerShare);\\n\\n    // =========================================VARS====================_=========================\\n    // @dev Total allocation points. Must be the sum of all allocation points in all pools.\\n    // The good practice, to always keep this variable is equal 1000.\\n    function totalAllocPoint() external view returns ( uint256 );\\n\\n    // =======================================REWARDER=============================================\\n    function REWARD_TOKEN() external view returns ( IERC20Upgradeable );\\n    function ORACLE() external view returns ( ISuOracle );\\n    function rewardPerBlock() external view returns ( uint256 );\\n    function rewardEndBlock() external view returns ( uint256 );\\n\\n    function refillReward(uint256 amount, uint64 endBlock) external;\\n    /**\\n     *  @dev returns total amount of rewards allocated to the all pools on the rage (startBlock, endBlock]\\n     *      i.e. excluding startBlock but including endBlock\\n     */\\n    function rewardsBetweenBlocks(uint256 startBlock, uint256 endBlock) external returns ( uint256 );\\n\\n    //=======================================LOCKUP LOGIC===========================================\\n    function getPossibleLockupPeriodsSeconds() external view returns (ILockupPeriod[] memory);\\n    function setPossibleLockupPeriodsSeconds(uint256 lockupPeriodSeconds, uint256 multiplicator1e18) external;\\n\\n    //================================CORE REWARD CHEF METHODS======================================\\n    // @notice Add a new reward pool. Can only be called by the owner.\\n    // DO NOT add the same LP token more than once.\\n    // @param allocPoint AP of the new pool.\\n    // @param _asset Address of the ERC-20 token.\\n    function add(uint256 allocPoint, address _asset) external;\\n\\n    // @notice Update the given pool's REWARD_TOKEN allocation point. Can only be called by the owner.\\n    // @param _asset Address of the ERC-20 token.\\n    // @param _allocPoint New AP of the pool.\\n    function set(address _asset, uint256 _allocPoint) external;\\n\\n    // @notice View function to see pending REWARD_TOKEN on frontend.\\n    // @param _asset Address of the ERC-20 token.\\n    // @param _user Address of user.\\n    // @return pending REWARD_TOKEN reward for a given user.\\n    function pendingSushi(address _asset, address _user) external view returns ( uint256 );\\n\\n    // @notice Update reward variables of the given pool.\\n    // @param asset Asset address\\n    // @return pool Returns the pool that was updated.\\n    function updatePool(address asset) external returns ( PoolInfo memory );\\n\\n    // @notice Update reward variables for all pools. Be careful of gas spending!\\n    function updateAllPools() external;\\n\\n    // @notice analogues to MCV2 Deposit method, but can be called only by trusted address\\n    // that is trusted to honestly calc how many \\\"virtual\\\" tokens have to be allocated for each user.\\n    function increaseAmount(address asset, address to, uint256 amountEDecimal, uint256 lockupPeriodSeconds) external;\\n\\n    // @notice Analogues to MVC2 Withdraw method, that can be called only by trusted address\\n    // that is trusted to honestly calc how many \\\"virtual\\\" tokens have to be allocated for each user.\\n    function decreaseAmount(address asset, address to, uint256 amountEDecimal) external;\\n\\n    function decreaseAmountRewardPenalty(address asset, address to, uint256 amountEDecimal) external view returns (uint256);\\n\\n    // @notice Harvest proceeds for transaction sender to `to`.\\n    // @param asset Asset address\\n    // @param to Receiver of REWARD_TOKEN rewards.\\n    function harvest(address asset, address to, uint256 newLockupPeriodSeconds) external;\\n\\n    // TODO: check for exploits\\n    // @notice Withdraw without caring about rewards. EMERGENCY ONLY.\\n    // @param asset Asset address\\n    // @param to The address of the user whose information will be cleared\\n    function resetAmount(address asset, address to) external;\\n\\n    //================================VIEW METHODS======================================\\n    function getPoolApr(address asset) external view  returns (uint256);\\n}\\n\",\"keccak256\":\"0xa7075395c4b8b13ee94a23cba80221696d7930e06cfe9625a883aada8312913d\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ISuAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @notice Access control for contracts\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n **/\\ninterface ISuAccessControl is IAccessControlUpgradeable {\\n    /**\\n     * @dev Transfers all roles from caller to owner, and revoke all roles from the caller.\\n     **/\\n    function transferOwnership(address newOwner) external;\\n}\\n\",\"keccak256\":\"0xb6d0ef5d6e78dcdfab03bddb214e69a6ed76dc08c9fc7d02543a770839d30935\",\"license\":\"MIT\"},\"contracts/interfaces/ISuLendingHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title SuLendingHelpers\\n * @notice Abstract contract that should be in SuManager. Here we have all view and ui-helpers methods.\\n * Here we don't change any values.\\n **/\\ninterface ISuLendingHelpers {\\n    /* ===================== ERRORS ===================== */\\n\\n    error InvalidArgs();\\n\\n    /* ==================== VIEW METHODS ==================== */\\n\\n    // @notice view function to check if position is liquidatable\\n    function isLiquidatablePosition(address asset, address owner) external view returns (bool);\\n\\n    // @notice Returns information about a liquidating position\\n    // @param asset The address of the main collateral token of a position\\n    // @param owner The owner of the collateral\\n    // @return liquidationBlock The block number when the liquidation was triggered\\n    // @return collateralEDecimal The amount of collateral\\n    // @return debtWithFeesE18 The amount of borrowed stablecoins with accumulated fee\\n    function getPositionInfo(address asset, address owner) external view returns (uint256 liquidationBlock, uint256 collateralEDecimal, uint256 debtWithFeesE18);\\n\\n    // @notice Returns information about a liquidating position\\n    // @param asset The address of the main collateral token of a position\\n    // @param owner The owner of the collateral\\n    // @return liquidationBlock The block number when the liquidation was triggered\\n    function getLiquidationBlock(address asset, address owner) external view returns (uint256);\\n\\n    // @notice USD value of collateral of owner\\n    function getCollateralUsdValueE18(address asset, address owner) external view returns (uint);\\n\\n    /* ==================== UI HELPERS ==================== */\\n\\n    // @notice Returns Loan-To-Value in e18\\n    function getLTVE18(address asset, address owner) external view returns (uint256);\\n\\n    // @notice Returns Available to Borrow\\n    // we have invariant: (collateralAmountEDecimal * collateralPriceE18 / 1e18) * initialCollateralRatioE18 <= debtE18\\n    // Has similar logic like in _ensurePositionCollateralization\\n    function getAvailableToBorrowE18(address asset, address owner) external view returns (uint256);\\n\\n    // @notice Returns Available to Withdraw\\n    // Has similar invariant like in getAvailableToBorrowE18\\n    function getAvailableToWithdrawE18(address asset, address owner) external view returns (uint256);\\n\\n    // @notice calculate liquidation price\\n    // @dev can be used inside of _isLiquidatablePosition\\n    function liquidationPriceE18(address asset, address owner) external view returns (uint256);\\n\\n    function liquidationPriceByAmount(\\n        address asset,\\n        address owner,\\n        uint256 additionalCollateralAmount,\\n        uint256 additionalStablecoinAmount\\n    ) external view returns (uint256);\\n\\n    // @notice view function to show utilization ratio\\n    // the same function can be used inside of _isLiquidatablePosition\\n    function utilizationRatioE18(address asset, address owner) external view returns (uint256);\\n}\",\"keccak256\":\"0x6069f69f927d5ce84d26ca12419f2ff13eda1744726f36bd41b647c01c669ccf\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ISuLendingLiquidation.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title SuLendingLiquidation\\n * @notice Abstract contract that should be in SuManager.\\n * Here we have all support mutable methods that will be used in SuLiquidation.\\n **/\\ninterface ISuLendingLiquidation {\\n    /* ===================== ERRORS ===================== */\\n\\n    error PositionIsSafe();\\n    error LiquidationIsTriggered();\\n    error LiquidationIsNotTriggered();\\n    error SmallCollateral();\\n\\n    /* ==================== MUTABLE METHODS ==================== */\\n\\n    // @notice Marks a position as to be liquidated\\n    // @param asset The address of the main collateral token of a position\\n    // @param owner The owner of a position\\n    /** @dev\\n    Emits LiquidationTriggered event.\\n    Sets the current block as liquidationBlock for the position.\\n    Can be triggered only once for the position.\\n    */\\n    function triggerLiquidation(address asset, address owner) external;\\n\\n    // @notice Liquidates a position, just cut debt and withdraw user collateral without asking USDPro\\n    // @dev Supports a partial liquidation\\n    // @param asset The address of the main collateral token of a position\\n    // @param owner The owner of the collateral\\n    // @param repayer The person who repaies by debt and transfers stablecoins to the foundation\\n    // @param stablecoinsToRepaymentE18 The amount of stablecoins which will be burned as a debt repaymention\\n    // @param assetAmountEDecimal The position's collateral which be recieved by repayer\\n    function liquidate(\\n        address asset,\\n        address owner,\\n        address repayer,\\n        uint256 stablecoinsToRepaymentE18,\\n        uint256 assetAmountEDecimal\\n    ) external;\\n}\",\"keccak256\":\"0xc8ab64a8006f2366c6ba8c5df85353fc16ed332f77051fe9dbc1a23adbf3a8ba\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ISuManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ISuManagerParameters.sol\\\";\\nimport \\\"./ISuLendingHelpers.sol\\\";\\nimport \\\"./ISuLendingLiquidation.sol\\\";\\n\\n/**\\n * @title SuManager\\n * @notice Manager mighty over the vault. Allows users to interact with their CDPs.\\n * User does only interact with manager as proxy to the vault.\\n **/\\ninterface ISuManager is ISuManagerParameters, ISuLendingHelpers, ISuLendingLiquidation {\\n    /* ===================== EVENTS ===================== */\\n    // @notice Even triggered when user deposit collateral\\n    event Join(address indexed asset, address indexed owner, uint256 main, uint256 stablecoin);\\n\\n    // @notice Event triggered when user withdraws collateral\\n    event Exit(address indexed asset, address indexed owner, uint256 main, uint256 stablecoin);\\n\\n    /* ===================== ERRORS ===================== */\\n    error Restricted();\\n    error UselessTransaction();\\n    error UnsupportedDecimals();\\n    error UnderCollateralized();\\n\\n    /* ==================== METHODS ==================== */\\n    // @notice this function is called by user to deposit collateral and receive stablecoin\\n    // @dev before calling this function user has to approve the Vault to take his collateral\\n    function join(address asset, uint256 assetAmountEDecimal, uint256 stablecoinAmountE18, uint256 lockupPeriodSeconds) external;\\n\\n    // @notice user can pay back the stablecoin and take his collateral\\n    // instead of passing both assetAmount and stablecoinAmount\\n    // better user just to pass one of them\\n    // also pass preferred rate and maybe acceptable diff percent\\n    // that's the purpose of passing both to protect user from rate fluctuations\\n    function exit(address asset, uint256 assetAmountEDecimal, uint256 stablecoinAmountE18) external;\\n}\\n\",\"keccak256\":\"0x5324867e01445af82714f7bca584ae3d744446ad3490ad7e5f638eb2ddb7865f\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ISuManagerParameters.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\ninterface ISuManagerParameters {\\n    /* ====================== VARS ====================== */\\n    // @notice When ratio (debt / usdValue) goes below it user can't withdraw or borrow.\\n    // Should be >= liquidationRatioE18. 1e18 = 100% ratio. Should be less than 1e18.\\n    // Is used to calculate available to withdraw and borrow.\\n    // For example, user can borrow <= usdValue * initialCollateralRatio\\n    function initialCollateralRatioE18 (address asset) external view returns ( uint256 );\\n\\n    // @notice Ratio when cdp can be liquidated.\\n    // 1e18 = 100% ratio. Should be less than 1e18.\\n    // Is used in isLiquidatablePosition(). It's true when debt / usdValue >= liquidationRatio\\n    function liquidationRatioE18 (address asset) external view returns ( uint256 );\\n\\n    // @notice The minimum value of collateral in USD which allowed to be left after partial closure\\n    function minCollateralInUsdE18 ( ) external view returns ( uint256 );\\n\\n    /* ===================== ERRORS ===================== */\\n    error BadLiquidationRatioValue();\\n    error BadInitialCollateralRatioValue();\\n\\n    /* ==================== METHODS ==================== */\\n    function setCollateral (\\n        address asset,\\n        uint256 stabilityFeeValueE18,\\n        uint256 initialCollateralRatioValueE18,\\n        uint256 liquidationRatioValueE18,\\n        uint256 stablecoinLimitE18,\\n        uint256 minCollateralInUsdValueE18\\n    ) external;\\n\\n    /**\\n     * @notice Only manager is able to call this function\\n     * @dev Sets the initial collateral ratio\\n     * @param asset The address of the main collateral token\\n     * @param newValueE18 The collateralization ratio (1e18 = 100%)\\n     **/\\n    function setInitialCollateralRatioE18 ( address asset, uint256 newValueE18 ) external;\\n\\n    /**\\n     * @notice Only manager is able to call this function\\n     * @dev Sets the liquidation ratio\\n     * @param asset The address of the main collateral token\\n     * @param newValueE18 The liquidation ratio (1e18 = 100%).\\n     **/\\n    function setLiquidationRatioE18 ( address asset, uint256 newValueE18 ) external;\\n\\n    /**\\n     * @notice Only manager is able to call this function\\n     * @dev Sets a minimum value of collateral in USD which allowed to be left after partial closure\\n     * @param newValueE18 The minimum value of collateral in USD\\n     */\\n    function setMinCollateralInUsdE18 ( uint256 newValueE18 ) external;\\n}\\n\",\"keccak256\":\"0x0a2994bf3992a14977f9bae9ae881f9cbc1a4e58f1dd2752751f639a5ebab0de\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ISuOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\n// solhint-disable compiler-version\\npragma solidity >=0.7.6;\\n\\ninterface ISuOracle {\\n    /**\\n     * @notice WARNING! Read this description very carefully!\\n     *      function getUsdPrice1e18(address asset) returns (uint256) that:\\n     *          basicAmountOfAsset * getUsdPrice1e18(asset) / 1e18 === $$ * 1e18\\n     *      in other words, it doesn't matter what's the erc20.decimals is,\\n     *      you just multiply token balance in basic units on value from oracle and get dollar amount multiplied on 1e18.\\n     *\\n     * different assets have different deviation threshold (errors)\\n     *      for wBTC it's <= 0.5%, read more https://data.chain.link/ethereum/mainnet/crypto-usd/btc-usd\\n     *      for other asset is can be larger based on particular oracle implementation.\\n     *\\n     * examples:\\n     *       market price of btc = $30k,\\n     *       for 0.1 wBTC the unit256 amount is 0.1 * 1e18\\n     *       0.1 * 1e18 * (price1e18 / 1e18) == $3000 == uint256(3000*1e18)\\n     *       => price1e18 = 30000 * 1e18;\\n     *\\n     *       market price of usdt = $0.97,\\n     *       for 1 usdt uint256 = 1 * 1e6\\n     *       so 1*1e6 * price1e18 / 1e18 == $0.97 == uint256(0.97*1e18)\\n     *       => 1*1e6 * (price1e18 / 1e18) / (0.97*1e18)   = 1\\n     *       =>  price1e18 = 0.97 * (1e18/1e6) * 1e18\\n     *\\n     *      assume market price of wBTC = $31,503.77, oracle error = $158\\n     *\\n     *       case #1: small amount of wBTC\\n     *           we have 0.0,000,001 wBTC that is worth v = $0.00315 \\u00b1 $0.00001 = 0.00315*1e18 = 315*1e13 \\u00b1 1*1e13\\n     *           actual balance on the asset b = wBTC.balanceOf() =  0.0000001*1e18 = 1e11\\n     *           oracle should return or = oracle.getUsdPrice1e18(wBTC) <=>\\n     *           <=> b*or = v => v/b = 315*1e13 / 1e11 = 315*1e2 \\u00b1 1e2\\n     *           error = or.error * b = 1e2 * 1e11 = 1e13 => 1e13/1e18 usd = 1e-5 = 0.00001 usd\\n     *\\n     *       case #2: large amount of wBTC\\n     *           v = 2,000,000 wBTC = $31,503.77 * 2m \\u00b1 158*2m = $63,007,540,000 \\u00b1 $316,000,000 = 63,007*1e24 \\u00b1 316*1e24\\n     *           for calc convenience we increase error on 0.05 and have v = 63,000*24 \\u00b1 300*1e24 = (630 \\u00b1 3)*1e26\\n     *           b = 2*1e6 * 1e18 = 2*1e24\\n     *           or = v/b = (630 \\u00b1 3)*1e26 / 2*1e24 = 315*1e2 \\u00b1 1.5*1e2\\n     *           error = or.error * b = 1.5*100 * 2*1e24 = 3*1e26 = 3*1e8*1e18 = $300,000,000 ~ $316,000,000\\n     *\\n     *      assume the market price of USDT = $0.97 \\u00b1 $0.00485,\\n     *\\n     *       case #3: little amount of USDT\\n     *           v = USDT amount 0.005 = 0.005*(0.97 \\u00b1 0.00485) = 0.00485*1e18 \\u00b1 0.00002425*1e18 = 485*1e13 \\u00b1 3*1e13\\n     *           we rounded error up on (3000-2425)/2425 ~= +24% for calculation convenience.\\n     *           b = USDT.balanceOf() = 0.005*1e6 = 5*1e3\\n     *           b*or = v => or = v/b = (485*1e13 \\u00b1 3*1e13) / 5*1e3 = 970*1e9 \\u00b1 6*1e9\\n     *           error = 6*1e9 * 5*1e3 / 1e18 = 30*1e12/1e18 = 3*1e-5 = $0,00005\\n     *\\n     *       case #4: lot of USDT\\n     *           v = we have 100,000,000,000 USDT = $97B = 97*1e9*1e18 \\u00b1 0.5*1e9*1e18\\n     *           b = USDT.balanceOf() = 1e11*1e6 = 1e17\\n     *           or = v/b = (97*1e9*1e18 \\u00b1 0.5*1e9*1e18) / 1e17 = 970*1e9 \\u00b1 5*1e9\\n     *           error = 5*1e9 * 1e17 = 5*1e26 = 0.5 * 1e8*1e18\\n     *\\n     * @param asset - address of erc20 token contract\\n     * @return usdPrice1e18 such that asset.balanceOf() * getUsdPrice1e18(asset) / 1e18 == $$ * 1e18\\n     **/\\n    function getUsdPrice1e18(address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x858a8f940b97d18e97028c5840493f764952ab8da49d63c24e045b3c12ba940f\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ISuVault.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../lending/SuVaultParameters.sol\\\";\\nimport \\\"../interfaces/ISuVaultParameters.sol\\\";\\nimport \\\"../reward/RewardChefV2.sol\\\";\\n\\ninterface ISuVault is ISuVaultParameters {\\n    /* ===================== EVENTS ===================== */\\n    // @notice Event triggered when user destroys cdp\\n    event PositionLiquidated(address asset, address owner, address repayer, uint256 assetAmountEDecimal, uint256 repaymentE18);\\n\\n    // @notice Event triggered when user liquidate some part of cdp (debt > 0)\\n    event PositionLiquidatedPartial(address asset, address owner, address repayer, uint256 assetAmountEDecimal, uint256 repaymentE18);\\n\\n    // @notice Event triggered when user call repay() function\\n    event PositionRepaid(address repayer, uint256 repaymentE18, uint256 excessAndFeeE18);\\n\\n    // @notice Event triggered when user didnt withdraw collateral before price goes down\\n    event LiquidationTriggered(address indexed asset, address indexed owner);\\n\\n    /* ===================== ERRORS ===================== */\\n    error LiquidationIsTriggered();\\n    error Restricted();\\n    error WithdrawExceeded();\\n    error WrongDebt();\\n    error WrongTotalDebt();\\n    error UselessTransaction();\\n    error AssetDebtLimit();\\n\\n    /* ====================== VARS ====================== */\\n    // @notice how much collateral the users staked == collaterals[asset][user], i.e deposits\\n    // EDecimal means that this value in asset denomination, i.e. x{human readable value} * 10^{erc20.decimals()}\\n    function collateralsEDecimal (address asset, address user) external view returns ( uint256 );\\n\\n    // @notice stablecoin amount\\n    function debtsE18 (address asset, address user) external view returns ( uint256 );\\n\\n    // @notice stablecoin amount + fee accumulated before lastUpdate == debtWithFeesE18[asset][user]\\n    function debtWithFeesE18 (address asset, address user) external view returns ( uint256 );\\n\\n    // @notice the last time, when every fee before lastUpdates are calculated in the debt.\\n    // All data such as fees are from lastUpdate only\\n    function lastUpdate (address asset, address user) external view returns ( uint256 );\\n\\n    // @notice asset => user => block number\\n    function liquidationBlock (address asset, address user) external view returns (uint256);\\n\\n    // @notice current interest that user pay for stabilityFee[asset][user]\\n    function stabilityFeeE18 (address asset, address user) external view returns ( uint256 );\\n\\n    // @notice Stats, how much stablecoins were borrowed against particular asset == tokenDebtsE18[asset]\\n    function tokenDebtsE18 (address asset) external view returns ( uint256 );\\n\\n    // @notice tokenDebtsE18[asset] + accumulated fee in all CDPs in this asset\\n    function tokenDebtsWithFeesE18 (address asset) external view returns ( uint256 );\\n\\n    /* ==================== MUTABLE METHODS ==================== */\\n    // @notice borrow usdPRO using selected asset.\\n    // user expected previously to deposit collateral and then being able to take stablecoin\\n    // user can't create single position with multiple collaterals?\\n    function borrow ( address asset, address user, uint256 amountE18 ) external;\\n\\n    // @notice collateral deposit\\n    function deposit ( address asset, address user, uint256 amountEDecimal, uint256 lockupPeriodSeconds ) external;\\n\\n    // @notice only destroy debt info\\n    // @dev onlyVaultAccess, exit -> _repay -> destroy if debt == 0\\n    function destroy ( address asset, address user ) external;\\n\\n    // @notice withdraw in case of some protocol errors, users can always get back their tokens\\n    function emergencyWithdraw ( address asset, address user, uint256 amountEDecimal ) external;\\n\\n    // @notice liquidate user position, just cut debt and withdraw user collateral without asking USDPro\\n    function liquidate(\\n        address asset,\\n        address owner,\\n        address recipient,\\n        uint256 assetAmountEDecimal,\\n        uint256 stablecoinAmountE18\\n    ) external;\\n\\n    // @notice set new RewardChef contract address\\n    function setRewardChef(address rewardChef) external;\\n\\n    // @notice Marks a position as to be liquidated\\n    // @param asset The address of the main collateral token of a position\\n    // @param positionOwner The owner of a position\\n    // @dev Sets the current block as liquidationBlock for the position. Can be triggered only once for the position.\\n    function triggerLiquidation(address asset, address positionOwner) external;\\n\\n    // @notice Update all main state vars\\n    // position is not allowed to be modified during liquidation, because when it's launched -\\n    // liquidators want to be sure they can participate\\n    // @dev is called, when user borrows more\\n    function update ( address asset, address user ) external;\\n\\n    // @notice collateral withdraw\\n    function withdraw ( address asset, address user, address recipient, uint256 amountEDecimal ) external;\\n\\n    // @notice Burns a debt repayment and transfers fees to the foundation.\\n    // @param repayer The person who repaies by debt and transfers stablecoins to the foundation\\n    // @param stablecoinsToRepaymentE18 The amount of stablecoins which will be burned as a debt repayment\\n    // @param stablecoinsToFoundationE18 The amount of stablecoins which will be transfered to the foundation(e.g fees)\\n    function payFeeAndBurn(address repayer, uint256 stablecoinsToRepaymentE18, uint256 stablecoinsToFoundationE18) external;\\n\\n    /* ==================== VIEW METHODS ==================== */\\n    // @notice fee is increased with time. Any call of vault.update would calc fee in debt and restart fee timer\\n    function calculateFeeE18 ( address asset, address user, uint256 amountE18 ) external view returns ( uint256 );\\n\\n    // @notice total dept is calculated as current debt with added calculated fee, don't use it in practice\\n    function getTotalDebtE18 ( address asset, address user ) external view returns ( uint256 );\\n}\\n\",\"keccak256\":\"0xb38c197eeb63ffedfc64debda1a7fc4521c2fbf89e5fe688b0765e9167079c5e\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ISuVaultParameters.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title SuVaultParameters\\n * @notice SuVaultParameters is Singleton for Access Control, like configuration contract.\\n **/\\ninterface ISuVaultParameters {\\n    /* ====================== VARS ====================== */\\n    // @notice Stability fee that is used in calculateFeeE18 to see how much user debt increased.\\n    // It can be different for each collateral\\n    function protocolStabilityFeeE18 (address asset) external view returns ( uint256 );\\n\\n    // @notice Limit for each collateral-asset to manage risk profile\\n    function tokenDebtLimitE18 (address asset) external view returns ( uint256 );\\n\\n    /* ===================== ERRORS ===================== */\\n    error ZeroAddress();\\n\\n    /* ==================== METHODS ==================== */\\n    // @notice manager is allowed to add new collaterals and modify existing ones\\n    // @dev I think creating new collaterals and modifying existing ones should be separate functions for security reason\\n    function setCollateral (address asset, uint256 stabilityFeeValueE18, uint256 stablecoinLimitE18) external;\\n\\n    // @notice manager is allowed to change foundation that receive fees and etc\\n    function setFoundation ( address newFoundation ) external;\\n\\n    // @notice set fee percentage (1e18 = 100%)\\n    function setStabilityFeeE18 ( address asset, uint256 newValue ) external;\\n\\n    // @notice debt limit can be changed for any collateral along with liquidation and stability fees\\n    function setTokenDebtLimitE18 ( address asset, uint256 limit ) external;\\n}\\n\",\"keccak256\":\"0xfdc2bcea78932127153e2b48734578e72c17a77c7a1075a687e9d5b92f11ff8d\",\"license\":\"UNLICENSED\"},\"contracts/lending/SuLendingHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"../interfaces/ISuLendingHelpers.sol\\\";\\nimport \\\"../interfaces/ISuVault.sol\\\";\\nimport \\\"../interfaces/ISuManager.sol\\\";\\nimport \\\"../interfaces/ISuOracle.sol\\\";\\n\\nabstract contract SuLendingHelpers is ISuLendingHelpers {\\n    ISuVault private _VAULT;\\n    ISuManager private _MANAGER;\\n    ISuOracle private _ORACLE;\\n\\n    function __SuLendingHelpers_init(address _suManager, address _suVault, address _suOracle) internal {\\n        if (_suOracle == address(0)) revert InvalidArgs();\\n\\n        _MANAGER = ISuManager(_suManager);\\n        _VAULT = ISuVault(_suVault);\\n        _ORACLE = ISuOracle(_suOracle);\\n    }\\n\\n    /* ==================== VIEW METHODS ==================== */\\n\\n    function isLiquidatablePosition(address asset, address owner) public view returns (bool) {\\n        uint256 usdValueE18 = getCollateralUsdValueE18(asset, owner);\\n\\n        // calculate current debt to be returned\\n        uint256 debtE18 = _VAULT.getTotalDebtE18(asset, owner);\\n\\n        if (debtE18 == 0) return false;\\n        // make sure its not under collaterazied\\n        return debtE18 * 1e18 / usdValueE18 >= _MANAGER.liquidationRatioE18(asset);\\n    }\\n\\n    function getPositionInfo(address asset, address owner) external view returns (\\n        uint256 liquidationBlock,\\n        uint256 collateralEDecimal,\\n        uint256 debtWithFeesE18\\n    ) {\\n        liquidationBlock = _VAULT.liquidationBlock(asset, owner);\\n        collateralEDecimal = _VAULT.collateralsEDecimal(asset, owner);\\n        debtWithFeesE18 = _VAULT.debtWithFeesE18(asset, owner);\\n    }\\n\\n    function getLiquidationBlock(address asset, address owner) external view returns (uint256) {\\n        return _VAULT.liquidationBlock(asset, owner);\\n    }\\n\\n    function getCollateralUsdValueE18(address asset, address owner) public view returns (uint) {\\n        uint256 assetAmountEDecimal = _VAULT.collateralsEDecimal(asset, owner);\\n\\n        return _ORACLE.getUsdPrice1e18(asset) * assetAmountEDecimal / 1e18;\\n    }\\n\\n    /* ====================== UI HELPERS ====================== */\\n\\n    function getLTVE18(address asset, address owner) external view returns (uint256) {\\n        uint256 usdValueE18 = getCollateralUsdValueE18(asset, owner);\\n        if (usdValueE18 == 0) return 0;\\n\\n        uint256 debtWithFeesE18 = _VAULT.debtWithFeesE18(asset, owner);\\n\\n        return debtWithFeesE18 * 1e18 / usdValueE18;\\n    }\\n\\n    function getAvailableToBorrowE18(address asset, address owner) external view returns (uint256) {\\n        uint256 usdValueE18 = getCollateralUsdValueE18(asset, owner);\\n        uint256 usdLimitE18 = usdValueE18 * _MANAGER.initialCollateralRatioE18(asset) / 1e18;\\n\\n        uint256 totalDebtWithFeeE18 = _VAULT.getTotalDebtE18(asset, owner);\\n\\n        if (usdLimitE18 <= totalDebtWithFeeE18) return 0;\\n\\n        return usdLimitE18 - totalDebtWithFeeE18;\\n    }\\n\\n    function getAvailableToWithdrawE18(address asset, address owner) external view returns (uint256) {\\n        uint256 collateralAmountEDecimal = _VAULT.collateralsEDecimal(asset, owner);\\n        uint256 collateralPriceE18 = _ORACLE.getUsdPrice1e18(asset);\\n        if (collateralPriceE18 == 0) return 0;\\n        uint256 debtWithFeesE18 = _VAULT.debtWithFeesE18(asset, owner);\\n\\n        uint256 minCollateralAmountEDecimal = debtWithFeesE18 * (10 ** IERC20Metadata(asset).decimals()) * 1e18 / (collateralPriceE18 * _MANAGER.initialCollateralRatioE18(asset));\\n\\n        return collateralAmountEDecimal - minCollateralAmountEDecimal;\\n    }\\n\\n    function liquidationPriceE18(address asset, address owner) external view returns (uint256) {\\n        uint256 debtE18 = _VAULT.getTotalDebtE18(asset, owner);\\n        if (debtE18 == 0) return type(uint256).max;\\n\\n        uint256 collateralLiqPriceE18 = debtE18 * 1e18 / _MANAGER.liquidationRatioE18(asset);\\n\\n        return collateralLiqPriceE18 * 1e18 / _VAULT.collateralsEDecimal(asset, owner) / 10 ** (18 - IERC20Metadata(asset).decimals());\\n    }\\n\\n    function liquidationPriceByAmount(\\n        address asset,\\n        address owner,\\n        uint256 additionalCollateralAmount,\\n        uint256 additionalStablecoinAmount\\n    ) external view returns (uint256) {\\n        uint256 debtE18 = _VAULT.getTotalDebtE18(asset, owner) + additionalStablecoinAmount;\\n        if (debtE18 == 0) return type(uint256).max;\\n\\n        uint256 collateralLiqPriceE18 = debtE18 * 1e18 / _MANAGER.liquidationRatioE18(asset);\\n        uint256 collaterals = _VAULT.collateralsEDecimal(asset, owner) + additionalCollateralAmount;\\n\\n        return collateralLiqPriceE18 * 1e18 / collaterals / 10 ** (18 - IERC20Metadata(asset).decimals());\\n    }\\n\\n    function utilizationRatioE18(address asset, address owner) public view returns (uint256) {\\n        uint256 debtE18 = _VAULT.getTotalDebtE18(asset, owner);\\n        if (debtE18 == 0) return 0;\\n\\n        uint256 usdValueE18 = getCollateralUsdValueE18(asset, owner);\\n\\n        return debtE18 * 1e18 / usdValueE18;\\n    }\\n}\",\"keccak256\":\"0xf62053ba3f383f28230bccecd09938a085170e0389a72cb093868cb77c582036\",\"license\":\"BSL 1.1\"},\"contracts/lending/SuLendingLiquidation.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport \\\"../interfaces/ISuLendingLiquidation.sol\\\";\\nimport \\\"../interfaces/ISuVault.sol\\\";\\nimport \\\"../interfaces/ISuManager.sol\\\";\\n\\nimport \\\"../access-control/SuAuthenticated.sol\\\";\\n\\nabstract contract SuLendingLiquidation is ReentrancyGuardUpgradeable, SuAuthenticated, ISuLendingLiquidation {\\n    ISuVault private _vault;\\n    ISuManager private _manager;\\n\\n    function __SuLendingLiquidation_init(address _suManager, address _suVault) internal onlyInitializing {\\n        __ReentrancyGuard_init();\\n\\n        _manager = ISuManager(_suManager);\\n        _vault = ISuVault(_suVault);\\n    }\\n\\n    function triggerLiquidation(address asset, address owner) external {\\n        if (_vault.liquidationBlock(asset, owner) > 0) revert LiquidationIsTriggered();\\n        if (!_manager.isLiquidatablePosition(asset, owner)) revert PositionIsSafe();\\n\\n        // summarize debt with accumulated fees\\n        _vault.update(asset, owner);\\n\\n        // then vault will trigger liquidation and auction begins\\n        _vault.triggerLiquidation(asset, owner);\\n    }\\n\\n    function liquidate(\\n        address asset,\\n        address owner,\\n        address repayer,\\n        uint256 stablecoinsToRepaymentE18,\\n        uint256 assetAmountEDecimal\\n    ) public nonReentrant onlyLiquidationAccess {\\n        if (_vault.liquidationBlock(asset, owner) == 0) revert LiquidationIsNotTriggered();\\n\\n        _vault.liquidate(asset, owner, repayer, assetAmountEDecimal, stablecoinsToRepaymentE18);\\n\\n        // not allowed to left some dust after partial closure the position\\n        _ensureMinCollateralThreshold(asset, msg.sender);\\n    }\\n\\n    // after partial closure should be made sure it is not left too little amount of collateral\\n    function _ensureMinCollateralThreshold(address asset, address owner) internal view {\\n        uint256 usdValueE18 = _manager.getCollateralUsdValueE18(asset, owner);\\n\\n        if (usdValueE18 > 0 && usdValueE18 <= _manager.minCollateralInUsdE18()) revert SmallCollateral();\\n    }\\n}\",\"keccak256\":\"0x7497acd82b2429e600cb9f11b921c2012ca6719f1bca7261df10c59bca136fb1\",\"license\":\"BSL 1.1\"},\"contracts/lending/SuManager.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\n/*\\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\\n*/\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport \\\"../interfaces/ISuVault.sol\\\";\\nimport \\\"../interfaces/ISuManager.sol\\\";\\nimport \\\"./SuManagerParameters.sol\\\";\\nimport \\\"./SuLendingHelpers.sol\\\";\\nimport \\\"./SuLendingLiquidation.sol\\\";\\n\\ncontract SuManager is ReentrancyGuardUpgradeable, SuManagerParameters, SuLendingLiquidation, SuLendingHelpers, ISuManager {\\n    ISuVault public vault;\\n\\n    function initialize(address _vault, address _suOracle) public initializer {\\n        __ReentrancyGuard_init();\\n        __SuManagerParameters_init(_vault);\\n        __SuLendingLiquidation_init(address(this), _vault);\\n        __SuLendingHelpers_init(address(this), _vault, _suOracle);\\n\\n        vault = ISuVault(_vault);\\n    }\\n\\n    // wrapper ether only, no native\\n    receive() external payable {\\n        revert Restricted();\\n    }\\n\\n    function join(address asset, uint256 assetAmountEDecimal, uint256 stablecoinAmountE18, uint256 lockupPeriodSeconds) public nonReentrant {\\n        if (stablecoinAmountE18 == 0 && assetAmountEDecimal == 0) revert UselessTransaction();\\n        if (IERC20Metadata(asset).decimals() > 18) revert UnsupportedDecimals();\\n\\n        if (stablecoinAmountE18 == 0) {\\n            vault.deposit(asset, msg.sender, assetAmountEDecimal, lockupPeriodSeconds);\\n        } else {\\n            if (assetAmountEDecimal != 0) {\\n                vault.deposit(asset, msg.sender, assetAmountEDecimal, lockupPeriodSeconds);\\n            }\\n\\n            vault.borrow(asset, msg.sender, stablecoinAmountE18);\\n\\n            _ensurePositionCollateralization(asset, msg.sender);\\n        }\\n\\n        // not allowed to left some dust after partial closure the position\\n        _ensureMinCollateralThreshold(asset, msg.sender);\\n\\n        emit Join(asset, msg.sender, assetAmountEDecimal, stablecoinAmountE18);\\n    }\\n\\n    function exit(address asset, uint256 assetAmountEDecimal, uint256 stablecoinAmountE18) public nonReentrant {\\n        if (vault.liquidationBlock(asset, msg.sender) > 0) revert LiquidationIsTriggered();\\n\\n        // not to pay more stablecoin than debt\\n        uint256 debtWithFeesE18 = vault.debtWithFeesE18(asset, msg.sender);\\n        if (stablecoinAmountE18 > debtWithFeesE18) { stablecoinAmountE18 = debtWithFeesE18; }\\n\\n        // calculate and charge fee\\n        uint256 feeE18 = vault.calculateFeeE18(asset, msg.sender, stablecoinAmountE18);\\n\\n        vault.liquidate(asset, msg.sender, msg.sender, assetAmountEDecimal, stablecoinAmountE18);\\n\\n        // not allowed to left some dust after partial closure the position\\n        _ensureMinCollateralThreshold(asset, msg.sender);\\n\\n        vault.payFeeAndBurn(msg.sender, stablecoinAmountE18, feeE18);\\n\\n        if (vault.debtWithFeesE18(asset, msg.sender) > 0) {\\n            // TODO: check that withdrawals lead to update\\n            vault.update(asset, msg.sender);\\n\\n            // dont need to check this after full repayment\\n            _ensurePositionCollateralization(asset, msg.sender);\\n        }\\n\\n        emit Exit(asset, msg.sender, assetAmountEDecimal, stablecoinAmountE18);\\n    }\\n\\n    // after partial repayment should be made sure its still collateralized enough\\n    function _ensurePositionCollateralization(address asset, address owner) internal view {\\n        // calculate value in usd from collateral position\\n        uint256 usdValueE18 = getCollateralUsdValueE18(asset, owner);\\n\\n        // multiply value in usd to the collateral ratio, then divide by 1e18\\n        uint256 usdLimitE18 = usdValueE18 * initialCollateralRatioE18[asset] / 1e18;\\n\\n        // make sure calculated allowed limit is higher than the actual debt\\n        if (vault.getTotalDebtE18(asset, owner) > usdLimitE18) revert UnderCollateralized();\\n    }\\n}\\n\",\"keccak256\":\"0xa358473f12c51c7998ca85aa8b06e076e8f0b4c6ffd51ba69d5b84cdc66d6690\",\"license\":\"BSL 1.1\"},\"contracts/lending/SuManagerParameters.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\n/*\\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\\n*/\\npragma solidity ^0.8.0;\\n\\nimport \\\"./SuVaultParameters.sol\\\";\\nimport \\\"../access-control/SuAccessControlSingleton.sol\\\";\\nimport \\\"../interfaces/ISuManagerParameters.sol\\\";\\n\\nabstract contract SuManagerParameters is SuAuthenticated, ISuManagerParameters {\\n    mapping(address => uint256) public initialCollateralRatioE18;\\n    mapping(address => uint256) public liquidationRatioE18;\\n    uint256 public minCollateralInUsdE18;\\n\\n    SuVaultParameters public vaultParameters;\\n\\n    function __SuManagerParameters_init(address _vaultParameters) internal onlyInitializing {\\n        __SuAuthenticated_init(address(SuAuthenticated(_vaultParameters).ACCESS_CONTROL_SINGLETON()));\\n\\n        vaultParameters = SuVaultParameters(_vaultParameters);\\n        minCollateralInUsdE18 = 5 * 1e18;\\n    }\\n\\n    function setCollateral(\\n        address asset,\\n        uint256 stabilityFeeValueE18,\\n        uint256 initialCollateralRatioValueE18,\\n        uint256 liquidationRatioValueE18,\\n        uint256 stablecoinLimitE18,\\n        uint256 minCollateralInUsdValueE18\\n    ) external onlyOwner {\\n        vaultParameters.setCollateral(asset, stabilityFeeValueE18, stablecoinLimitE18);\\n        setInitialCollateralRatioE18(asset, initialCollateralRatioValueE18);\\n        setLiquidationRatioE18(asset, liquidationRatioValueE18);\\n        setMinCollateralInUsdE18(minCollateralInUsdValueE18);\\n    }\\n\\n    function setInitialCollateralRatioE18(address asset, uint256 newValueE18) public onlyOwner {\\n        if (newValueE18 == 0 || newValueE18 > 1e18) revert BadInitialCollateralRatioValue();\\n        initialCollateralRatioE18[asset] = newValueE18;\\n    }\\n\\n    function setLiquidationRatioE18(address asset, uint256 newValueE18) public onlyOwner {\\n        if (newValueE18 == 0 || newValueE18 < initialCollateralRatioE18[asset]) revert BadLiquidationRatioValue();\\n        liquidationRatioE18[asset] = newValueE18;\\n    }\\n\\n    function setMinCollateralInUsdE18(uint256 newValueE18) public onlyOwner {\\n        minCollateralInUsdE18 = newValueE18;\\n    }\\n}\\n\",\"keccak256\":\"0x9fd62c566949dc4770cc1ba141d5d570e834c67da5e589e4a3e0151064f27e3c\",\"license\":\"BSL 1.1\"},\"contracts/lending/SuVaultParameters.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\r\\n\\r\\nimport \\\"../access-control/SuAccessControlSingleton.sol\\\";\\r\\nimport \\\"../access-control/SuAuthenticated.sol\\\";\\r\\nimport \\\"../interfaces/ISuVaultParameters.sol\\\";\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nabstract contract SuVaultParameters is SuAuthenticated, ISuVaultParameters {\\r\\n    mapping(address => uint256) public protocolStabilityFeeE18;\\r\\n    mapping(address => uint256) public tokenDebtLimitE18;\\r\\n    address public foundation;\\r\\n    address public vault;\\r\\n\\r\\n    // how can vault address be known at this moment?\\r\\n    // Precult based on CREATE spec\\r\\n    // can be created another function to set vault address once deployed?\\r\\n    // Yes, possibly with some logic change\\r\\n    function __SuVaultParameters_init(\\r\\n        address _authControl,\\r\\n        address payable _vault,\\r\\n        address _foundation\\r\\n    )  internal onlyInitializing {\\r\\n        if (_vault == address(0) || _foundation == address(0)) revert ZeroAddress();\\r\\n\\r\\n        __SuAuthenticated_init(_authControl);\\r\\n        vault = _vault;\\r\\n        foundation = _foundation;\\r\\n    }\\r\\n\\r\\n    function setFoundation(address newFoundation) external onlyOwner {\\r\\n        if (newFoundation == address(0)) revert ZeroAddress();\\r\\n        foundation = newFoundation;\\r\\n    }\\r\\n\\r\\n    function setCollateral(address asset, uint256 stabilityFeeValueE18, uint256 stablecoinLimitE18) external onlyOwner {\\r\\n        // stability fee should be validated in range, what is stability fee should be described here?\\r\\n        setStabilityFeeE18(asset, stabilityFeeValueE18);\\r\\n        // why debt limit for collateral is necessary? to manage risks in case of collateral failure?\\r\\n        setTokenDebtLimitE18(asset, stablecoinLimitE18);\\r\\n    }\\r\\n\\r\\n    function setStabilityFeeE18(address asset, uint256 newValue) public onlyOwner {\\r\\n        protocolStabilityFeeE18[asset] = newValue;\\r\\n    }\\r\\n\\r\\n    function setTokenDebtLimitE18(address asset, uint256 limit) public onlyOwner {\\r\\n        tokenDebtLimitE18[asset] = limit;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2aec1bff0b5a7a57e2a6f1b77afd9c4be1e6a92616a2f0ce79d0481e47f4ec75\",\"license\":\"BSL 1.1\"},\"contracts/reward/RewardChefV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\\\";\\nimport \\\"../access-control/SuAuthenticated.sol\\\";\\nimport \\\"../interfaces/IRewardChefV2.sol\\\";\\nimport \\\"../interfaces/ISuOracle.sol\\\";\\n\\ncontract RewardChefV2 is IRewardChefV2, SuAuthenticated {\\n    using SafeCastUpgradeable for uint256;\\n    using SafeCastUpgradeable for uint128;\\n    using SafeCastUpgradeable for uint64;\\n    using SafeCastUpgradeable for int256;\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.UintSet;\\n\\n    // SuDAO: instead of pool Ids (pid) we use address of the asset directly.\\n    //        Also, there aren't just LPs but regular assets as well\\n    // @notice Info of each MCV2 pool. PoolInfo memory pool = poolInfo[_pid]\\n    //    PoolInfo[] public poolInfo;\\n    mapping(address => PoolInfo) public poolInfo;\\n\\n    // @notice Info of each user that stakes tokens. userInfo[_asset][_user]\\n    mapping(address => mapping(address => UserInfo)) public userInfo;\\n\\n    uint256 public totalAllocPoint;\\n\\n    // @notice Address of the LP token for each MCV2 pool.\\n    //    IERC20Upgradeable[] public lpTokens;\\n    // @notice Set of reward-able assets\\n    EnumerableSetUpgradeable.AddressSet private assetSet;\\n    uint256 private constant ACC_REWARD_TOKEN_PRECISION = 1e12; // TODO*: make it 1e18? check values overflow\\n\\n    // ==========================REWARDER================================\\n    // @notice Address of REWARD_TOKEN contract.\\n    IERC20Upgradeable public REWARD_TOKEN;\\n    ISuOracle public ORACLE;\\n    uint256 public rewardPerBlock;\\n    uint256 public rewardEndBlock;\\n\\n    function refillReward(uint256 amount, uint64 endBlock) public onlyOwner {\\n        require(endBlock > block.number, \\\"EndBlock should be greater than current block\\\");\\n        // TODO: gas optimization\\n        updateAllPools();\\n\\n        REWARD_TOKEN.safeTransferFrom(msg.sender, address(this), amount);\\n        uint256 rewardLeftAmount;\\n        // if there are active rewards leftovers\\n        if (rewardEndBlock > 0) {\\n            // if we call refillReward before old endBlock ends\\n            if (block.number < rewardEndBlock) {\\n                rewardLeftAmount = rewardPerBlock * (rewardEndBlock - block.number);\\n            } else {\\n                // if we start the new reward interval that has nothing in common with the old noe\\n                rewardLeftAmount = 0;\\n            }\\n        }\\n        rewardPerBlock = (rewardLeftAmount + amount) / (endBlock - block.number);\\n        rewardEndBlock = endBlock;\\n    }\\n\\n    function rewardsBetweenBlocks(uint256 startBlock, uint256 endBlock) public view returns (uint256) {\\n        // if all rewards were allocation before our range - then answer is 0\\n        if (rewardEndBlock <= startBlock) {\\n            return 0;\\n        } else {\\n            // if rewards allocates on the whole range, than just calc rectangle area\\n            if (endBlock < rewardEndBlock) {\\n                return (endBlock - startBlock) * rewardPerBlock;\\n            } else {\\n                // other-vice, rewards end its allocation during our rage, so we have to calc only until rewardEndBlock\\n                return (rewardEndBlock - startBlock) * rewardPerBlock;\\n            }\\n        }\\n    }\\n\\n    /* ==========================LOCKUP LOGIC========================================= */\\n    mapping(uint256 => uint256) public multiplicator1e18ForLockupPeriod;\\n    EnumerableSetUpgradeable.UintSet private possibleLockupPeriodsSeconds;\\n\\n    function getPossibleLockupPeriodsSeconds() external view returns (ILockupPeriod[] memory) {\\n        uint256[] memory periods = possibleLockupPeriodsSeconds.values();\\n        uint256 len = periods.length;\\n        ILockupPeriod[] memory lockupPeriods = new ILockupPeriod[](len);\\n        for (uint256 i = 0; i < len; i++) {\\n            lockupPeriods[i] = ILockupPeriod({\\n            lockupPeriodSeconds : periods[i],\\n            multiplicator1e18 : multiplicator1e18ForLockupPeriod[periods[i]]\\n            });\\n        }\\n        return lockupPeriods;\\n    }\\n\\n    function setPossibleLockupPeriodsSeconds(uint256 lockupPeriodSeconds, uint256 multiplicator1e18) external onlyOwner {\\n        require(lockupPeriodSeconds != 0, \\\"Lockup period equils zero seconds\\\");\\n        multiplicator1e18ForLockupPeriod[lockupPeriodSeconds] = multiplicator1e18;\\n        if (multiplicator1e18 == 0) {\\n            possibleLockupPeriodsSeconds.remove(lockupPeriodSeconds);\\n        } else {\\n            possibleLockupPeriodsSeconds.add(lockupPeriodSeconds);\\n        }\\n    }\\n    /* =================================================================== */\\n\\n    // @param _rewardToken The REWARD_TOKEN token contract address.\\n    function initialize(address _authControl, IERC20Upgradeable _rewardToken, ISuOracle _oracle) public initializer {\\n        __SuAuthenticated_init(_authControl);\\n\\n        REWARD_TOKEN = _rewardToken;\\n        ORACLE = _oracle;\\n    }\\n\\n    function add(uint256 allocPoint, address _asset) public onlyOwner {\\n        // check for possible duplications\\n        require(poolInfo[_asset].lastRewardBlock == 0, \\\"Pool already exist\\\");\\n\\n        uint256 lastRewardBlock = block.number;\\n        totalAllocPoint = totalAllocPoint + allocPoint;\\n        //        lpTokens.push(_lpToken);\\n        assetSet.add(_asset);\\n\\n        poolInfo[_asset] = PoolInfo({\\n        allocPoint : allocPoint.toUint64(),\\n        lastRewardBlock : lastRewardBlock.toUint64(),\\n        accSushiPerShare : 0,\\n        lpSupply : 0\\n        });\\n\\n        emit LogPoolAddition(_asset, allocPoint);\\n    }\\n\\n    function set(address _asset, uint256 _allocPoint) public onlyOwner {\\n        require(poolInfo[_asset].lastRewardBlock != 0, \\\"Pool doesn't exist\\\");\\n        // TODO: why was it in legal in MVC2 to call this function without mandatory update method?\\n        updatePool(_asset);\\n\\n        uint64 oldAllocPoint = poolInfo[_asset].allocPoint;\\n        totalAllocPoint = totalAllocPoint - oldAllocPoint + _allocPoint;\\n        poolInfo[_asset].allocPoint = _allocPoint.toUint64();\\n        if (_allocPoint == 0) {\\n            // we don't need to call updatePool(_asset) again\\n            // because the result of the second time call in the same block doesn't change anything\\n            assetSet.remove(_asset);\\n        } else if (oldAllocPoint == 0) {\\n            // when pool exists, but asset was removed from assetSet\\n            assetSet.add(_asset);\\n        }\\n        emit LogSetPool(_asset, _allocPoint);\\n    }\\n\\n    function pendingSushi(address _asset, address _user) public view returns (uint256 pending) {\\n        PoolInfo memory pool = poolInfo[_asset];\\n        UserInfo memory user = userInfo[_asset][_user];\\n        uint256 accSushiPerShare = pool.accSushiPerShare;\\n        // we don't have real balances anymore, so instead of\\n        //        uint256 lpSupply = lpTokens[_pid].balanceOf(address(this));\\n        // we use virtual total balance\\n        uint256 lpSupply = poolInfo[_asset].lpSupply;\\n        if (block.number > pool.lastRewardBlock && lpSupply != 0 && totalAllocPoint != 0) {\\n            // how much reward were minted since last update pool.lastRewardBlock\\n            uint256 totalSushiReward = rewardsBetweenBlocks(pool.lastRewardBlock, block.number);\\n            uint256 poolSushiReward = totalSushiReward * pool.allocPoint / totalAllocPoint;\\n            // account it into share value\\n            accSushiPerShare = accSushiPerShare + (poolSushiReward * ACC_REWARD_TOKEN_PRECISION / lpSupply);\\n        }\\n        pending = ((user.amount * accSushiPerShare / ACC_REWARD_TOKEN_PRECISION).toInt256() - user.rewardDebt).toUint256();\\n    }\\n\\n    function updatePool(address asset) public returns (PoolInfo memory pool) {\\n        pool = poolInfo[asset];\\n        if (block.number > pool.lastRewardBlock) {\\n            // uint256 lpSupply = lpTokens[pid].balanceOf(address(this));\\n            uint256 lpSupply = pool.lpSupply;\\n            if (lpSupply > 0 && pool.allocPoint > 0) {\\n                // calc how much rewards are minted since pool.lastRewardBlock for the pool\\n                uint256 totalSushiReward = rewardsBetweenBlocks(pool.lastRewardBlock, block.number);\\n                uint256 poolSushiReward = totalSushiReward * pool.allocPoint / totalAllocPoint;\\n                pool.accSushiPerShare = pool.accSushiPerShare + (poolSushiReward * ACC_REWARD_TOKEN_PRECISION / lpSupply).toUint128();\\n            }\\n            pool.lastRewardBlock = block.number.toUint64();\\n            poolInfo[asset] = pool;\\n            emit LogUpdatePool(asset, pool.lastRewardBlock, lpSupply, pool.accSushiPerShare);\\n        }\\n    }\\n\\n    function updateAllPools() public {\\n        address[] memory assets = assetSet.values();\\n        uint256 len = assets.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            updatePool(assets[i]);\\n        }\\n    }\\n\\n    function increaseAmount(address asset, address to, uint256 amountEDecimal, uint256 lockupPeriodSeconds) public onlyOwner {\\n        PoolInfo memory pool = updatePool(asset);\\n        UserInfo storage user = userInfo[asset][to];\\n\\n        if (user.lockupPeriodSeconds == 0) {// it means there's no deposit yet\\n            user.multiplicator1e18 = multiplicator1e18ForLockupPeriod[lockupPeriodSeconds];\\n            user.lockupPeriodSeconds = lockupPeriodSeconds;\\n            user.lockupStartTimestamp = block.timestamp;\\n        } else {\\n            require(user.lockupPeriodSeconds == lockupPeriodSeconds, \\\"Existing deposit has different lockup\\\");\\n        }\\n\\n        require(user.multiplicator1e18 != 0, \\\"User multiplicator equils zero\\\");\\n\\n        // Effects\\n        // user.amount = user.amount + amountEDecimal;\\n        uint256 additionalAmount = amountEDecimal * user.multiplicator1e18 / 1e18;\\n        user.amount = user.amount + additionalAmount;\\n        user.rewardDebt = user.rewardDebt + (additionalAmount * pool.accSushiPerShare / ACC_REWARD_TOKEN_PRECISION).toInt256();\\n\\n        // we don't need, since the balances are virtual\\n        // lpToken[pid].safeTransferFrom(msg.sender, address(this), amount);\\n        // but we need to calc total supply of virtual tokens\\n        pool.lpSupply = pool.lpSupply + additionalAmount;\\n        poolInfo[asset] = pool;\\n\\n        emit VirtualDeposit(to, asset, additionalAmount);\\n    }\\n\\n    function decreaseAmount(address asset, address to, uint256 amountEDecimal) public onlyOwner {\\n        PoolInfo memory pool = updatePool(asset);\\n        UserInfo storage user = userInfo[asset][to];\\n\\n        require(user.multiplicator1e18 != 0, \\\"User multiplicator equils zero\\\");\\n\\n        // how much penalty?\\n        uint256 penalty = 0;\\n        if (block.timestamp < user.lockupStartTimestamp + user.lockupPeriodSeconds) {\\n           // if we decreasing before time-lock is over\\n            penalty = decreaseAmountRewardPenalty(asset, to, amountEDecimal);\\n        }\\n\\n        // Effects\\n        uint256 subtractAmount = amountEDecimal * user.multiplicator1e18 / 1e18;\\n        user.rewardDebt = user.rewardDebt - (subtractAmount * pool.accSushiPerShare / ACC_REWARD_TOKEN_PRECISION).toInt256() + penalty.toInt256();\\n        user.amount = user.amount - subtractAmount;\\n\\n        if (user.amount == 0 && user.rewardDebt == 0) {\\n            // Reset lockupPeriod\\n            user.lockupStartTimestamp = block.timestamp;\\n            user.lockupPeriodSeconds = 0;\\n            user.multiplicator1e18 = 0;\\n        }\\n\\n        // lpTokens[pid].safeTransfer(to, amount);\\n        pool.lpSupply = pool.lpSupply - subtractAmount;\\n        poolInfo[asset] = pool;\\n\\n        emit VirtualWithdraw(to, asset, subtractAmount);\\n    }\\n\\n    function decreaseAmountRewardPenalty(address asset, address to, uint256 amountEDecimal) public view returns (uint256) {\\n        UserInfo memory user = userInfo[asset][to];\\n\\n        if (user.multiplicator1e18 == 0) {\\n            return 0;\\n        }\\n\\n        uint256 subtractAmount = amountEDecimal * user.multiplicator1e18 / 1e18;\\n\\n        uint256 pending = pendingSushi(asset, to);\\n        return pending * subtractAmount / user.amount;\\n    }\\n\\n    function harvest(address asset, address to, uint256 newLockupPeriodSeconds) public {\\n        PoolInfo memory pool = updatePool(asset);\\n        UserInfo storage user = userInfo[asset][msg.sender];\\n\\n        require(user.lockupStartTimestamp + user.lockupPeriodSeconds <= block.timestamp, \\\"Can't harvest before lockup is over\\\");\\n        require(user.multiplicator1e18 != 0, \\\"User multiplicator equils zero\\\");\\n\\n        int256 accumulatedSushi = (user.amount * pool.accSushiPerShare / ACC_REWARD_TOKEN_PRECISION).toInt256();\\n        uint256 _pendingSushi = (accumulatedSushi - user.rewardDebt).toUint256();\\n\\n        // Effects\\n        user.rewardDebt = accumulatedSushi;\\n        // accumulatedSushi = user.rewardDebt + _pendingSushi;\\n\\n        // Interactions\\n        if (_pendingSushi > 0) {\\n            REWARD_TOKEN.safeTransfer(to, _pendingSushi);\\n        }\\n\\n        // Reset lockupPeriod\\n        user.lockupStartTimestamp = block.timestamp;\\n        // it's possible to remove code duplicates by using signed amount, but for simplicity I'll leave as it is\\n        uint256 newMultiplicator1e18 = multiplicator1e18ForLockupPeriod[newLockupPeriodSeconds];\\n        require(newMultiplicator1e18 != 0, \\\"New multiplicator equils zero\\\");\\n        if (user.multiplicator1e18 < newMultiplicator1e18) {\\n            // since multiplicator increases, we need to increase amount\\n            uint256 additionalAmount = user.amount * newMultiplicator1e18 / user.multiplicator1e18 - user.amount;\\n\\n            user.amount = user.amount + additionalAmount;\\n            user.rewardDebt = user.rewardDebt + (additionalAmount * pool.accSushiPerShare / ACC_REWARD_TOKEN_PRECISION).toInt256();\\n        } else if (user.multiplicator1e18 > newMultiplicator1e18) {\\n            uint256 subtractAmount = user.amount - user.amount * newMultiplicator1e18 / user.multiplicator1e18;\\n\\n            user.rewardDebt = user.rewardDebt - (subtractAmount * pool.accSushiPerShare / ACC_REWARD_TOKEN_PRECISION).toInt256();\\n            user.amount = user.amount - subtractAmount;\\n        }\\n        user.multiplicator1e18 = newMultiplicator1e18;\\n\\n        emit Harvest(msg.sender, asset, _pendingSushi);\\n    }\\n\\n    function resetAmount(address asset, address to) public {\\n        PoolInfo storage pool = poolInfo[asset];\\n        UserInfo storage user = userInfo[asset][msg.sender];\\n\\n        uint256 userAmount = user.amount;\\n        uint256 userLockupPeriodSeconds = user.lockupPeriodSeconds;\\n\\n        pool.lpSupply = pool.lpSupply - userAmount;\\n        poolInfo[asset] = pool;\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n\\n        // Reset lockupPeriod\\n        user.lockupStartTimestamp = block.timestamp;\\n        user.lockupPeriodSeconds = 0;\\n        user.multiplicator1e18 = 0;\\n\\n        emit ResetAmount(msg.sender, asset, to, userAmount, userLockupPeriodSeconds);\\n    }\\n\\n    /* ================================VIEW METHODS====================================== */\\n\\n    function getPoolApr(address asset) public view returns (uint256) {\\n        require(poolInfo[asset].lpSupply != 0, \\\"RewardChef: Pool doesn't have liquidity\\\");\\n        require(totalAllocPoint != 0, \\\"RewardChef: Total allocation point is 0\\\");\\n        require(rewardEndBlock > block.number, \\\"RewardChef: Vesting is already finished\\\");\\n\\n        uint256 rewardPerBlockForPool = rewardPerBlock * poolInfo[asset].allocPoint / totalAllocPoint;\\n        uint256 rewardTokenPrice = ORACLE.getUsdPrice1e18(address(REWARD_TOKEN));\\n        uint256 usdRewardYearForPool = rewardPerBlockForPool * 4 * 60 * 24 * 366 * rewardTokenPrice;\\n        // TODO: fix decimals and unify oracle answer\\n        uint256 usdValuePool = ORACLE.getUsdPrice1e18(asset) * poolInfo[asset].lpSupply / 10 ** IERC20Metadata(asset).decimals();\\n        return usdRewardYearForPool / usdValuePool;\\n    }\\n}\\n\",\"keccak256\":\"0xa84145f1af9462547ba31d3060f8f4fdb7ce269f3a685baf8d91c8f53f1cb8ba\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612c63806100206000396000f3fe60806040526004361061014b5760003560e01c806303ee9f221461016e578063112e1400146101a4578063134a02dd146101c657806314c376dc146101f65780631c656c3914610238578063392c0ce7146102585780634030815e1461027857806343070b7a14610298578063485cc955146102b85780634c9a5550146102d857806356d8be56146102f85780636338e4d7146103185780636f16cbf7146103385780636f70e66f1461035857806376b5070c146103785780639077beac14610398578063aca345ee146103b8578063ada9e5ad146103d8578063af368fbd146103f8578063bb497dcc14610433578063bbdc953114610449578063cf13340414610469578063d4796d1214610489578063d5391393146104a9578063dc97e84e146104dd578063e6bc0461146104ff578063f3f481df1461052c578063fbfa77cf1461055957600080fd5b366101695760405163ccc0891360e01b815260040160405180910390fd5b600080fd5b34801561017a57600080fd5b5060335461018e906001600160a01b031681565b60405161019b9190612661565b60405180910390f35b3480156101b057600080fd5b506101c46101bf36600461268d565b610579565b005b3480156101d257600080fd5b506101e66101e13660046126c8565b610807565b604051901515815260200161019b565b34801561020257600080fd5b5061022a7fe965846df3dd5b1dfa65f58e31477079e90140e0908b6dd31b5aead5a57cf36581565b60405190815260200161019b565b34801561024457600080fd5b5061022a6102533660046126c8565b61093d565b34801561026457600080fd5b5061022a6102733660046126c8565b6109fd565b34801561028457600080fd5b5061022a6102933660046126c8565b610aa7565b3480156102a457600080fd5b5061022a6102b3366004612701565b610bb9565b3480156102c457600080fd5b506101c46102d33660046126c8565b610e0e565b3480156102e457600080fd5b5061022a6102f33660046126c8565b610f0a565b34801561030457600080fd5b5061022a6103133660046126c8565b610f85565b34801561032457600080fd5b5061022a6103333660046126c8565b6110c7565b34801561034457600080fd5b506101c4610353366004612747565b6112eb565b34801561036457600080fd5b506101c4610373366004612773565b6113d9565b34801561038457600080fd5b5061022a6103933660046126c8565b6115f1565b3480156103a457600080fd5b506101c46103b3366004612747565b611894565b3480156103c457600080fd5b5060375461018e906001600160a01b031681565b3480156103e457600080fd5b506101c46103f33660046127ce565b611972565b34801561040457600080fd5b506104186104133660046126c8565b611a8d565b6040805193845260208401929092529082015260600161019b565b34801561043f57600080fd5b5061022a60365481565b34801561045557600080fd5b506101c461046436600461281a565b611bf6565b34801561047557600080fd5b506101c461048436600461284f565b611fbe565b34801561049557600080fd5b506101c46104a43660046126c8565b612053565b3480156104b557600080fd5b5061022a7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b3480156104e957600080fd5b5061022a600080516020612c0e83398151915281565b34801561050b57600080fd5b5061022a61051a366004612868565b60356020526000908152604090205481565b34801561053857600080fd5b5061022a610547366004612868565b60346020526000908152604090205481565b34801561056557600080fd5b50603d5461018e906001600160a01b031681565b6002600154036105a45760405162461bcd60e51b815260040161059b90612885565b60405180910390fd5b6002600155811580156105b5575082155b156105d35760405163fa95696160e01b815260040160405180910390fd5b6012846001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610613573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063791906128bc565b60ff16111561065957604051636a78e98160e11b815260040160405180910390fd5b816000036106ce57603d546040516320e8c56560e01b81526001600160a01b03909116906320e8c565906106979087903390889087906004016128df565b600060405180830381600087803b1580156106b157600080fd5b505af11580156106c5573d6000803e3d6000fd5b505050506107ad565b821561073d57603d546040516320e8c56560e01b81526001600160a01b03909116906320e8c5659061070a9087903390889087906004016128df565b600060405180830381600087803b15801561072457600080fd5b505af1158015610738573d6000803e3d6000fd5b505050505b603d546040516314890dcb60e21b81526001600160a01b0390911690635224372c9061077190879033908790600401612908565b600060405180830381600087803b15801561078b57600080fd5b505af115801561079f573d6000803e3d6000fd5b505050506107ad843361223a565b6107b7843361231e565b604080518481526020810184905233916001600160a01b038716917f6423b6056e64b3b29cb2d342362b47c26fa8d6877da27ea152354060df19b9bc910160405180910390a35050600180555050565b6000806108148484610aa7565b603a5460405163a6ea8b8760e01b81529192506000916001600160a01b039091169063a6ea8b879061084c908890889060040161292c565b602060405180830381865afa158015610869573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088d9190612946565b9050806000036108a257600092505050610937565b603b5460405163e6bc046160e01b81526001600160a01b039091169063e6bc0461906108d2908890600401612661565b602060405180830381865afa1580156108ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109139190612946565b8261092683670de0b6b3a7640000612975565b610930919061298c565b1015925050505b92915050565b603a5460405163a6ea8b8760e01b815260009182916001600160a01b039091169063a6ea8b8790610974908790879060040161292c565b602060405180830381865afa158015610991573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b59190612946565b9050806000036109c9576000915050610937565b60006109d58585610aa7565b9050806109ea83670de0b6b3a7640000612975565b6109f4919061298c565b95945050505050565b600080610a0a8484610aa7565b905080600003610a1e576000915050610937565b603a5460405163f084843d60e01b81526000916001600160a01b03169063f084843d90610a51908890889060040161292c565b602060405180830381865afa158015610a6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a929190612946565b9050816109ea82670de0b6b3a7640000612975565b603a546040516334e3b77960e01b815260009182916001600160a01b03909116906334e3b77990610ade908790879060040161292c565b602060405180830381865afa158015610afb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1f9190612946565b603c546040516306addfb360e31b8152919250670de0b6b3a76400009183916001600160a01b03169063356efd9890610b5c908990600401612661565b602060405180830381865afa158015610b79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9d9190612946565b610ba79190612975565b610bb1919061298c565b949350505050565b603a5460405163a6ea8b8760e01b8152600091829184916001600160a01b03169063a6ea8b8790610bf0908a908a9060040161292c565b602060405180830381865afa158015610c0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c319190612946565b610c3b91906129ae565b905080600003610c5057600019915050610bb1565b603b5460405163e6bc046160e01b81526000916001600160a01b03169063e6bc046190610c81908a90600401612661565b602060405180830381865afa158015610c9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc29190612946565b610cd483670de0b6b3a7640000612975565b610cde919061298c565b603a546040516334e3b77960e01b815291925060009187916001600160a01b0316906334e3b77990610d16908c908c9060040161292c565b602060405180830381865afa158015610d33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d579190612946565b610d6191906129ae565b9050876001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610da1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc591906128bc565b610dd09060126129c1565b610ddb90600a612abe565b81610dee84670de0b6b3a7640000612975565b610df8919061298c565b610e02919061298c565b98975050505050505050565b600054610100900460ff16610e295760005460ff1615610e2d565b303b155b610e905760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161059b565b600054610100900460ff16158015610eb2576000805461ffff19166101011790555b610eba612438565b610ec383612469565b610ecd3084612528565b610ed8308484612585565b603d80546001600160a01b0319166001600160a01b0385161790558015610f05576000805461ff00191690555b505050565b603a54604051631ce4b4a760e01b81526000916001600160a01b031690631ce4b4a790610f3d908690869060040161292c565b602060405180830381865afa158015610f5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7e9190612946565b9392505050565b600080610f928484610aa7565b603b5460405163f3f481df60e01b8152919250600091670de0b6b3a7640000916001600160a01b03169063f3f481df90610fd0908990600401612661565b602060405180830381865afa158015610fed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110119190612946565b61101b9084612975565b611025919061298c565b603a5460405163a6ea8b8760e01b81529192506000916001600160a01b039091169063a6ea8b879061105d908990899060040161292c565b602060405180830381865afa15801561107a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061109e9190612946565b90508082116110b35760009350505050610937565b6110bd8183612acd565b9695505050505050565b603a5460405163a6ea8b8760e01b815260009182916001600160a01b039091169063a6ea8b87906110fe908790879060040161292c565b602060405180830381865afa15801561111b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061113f9190612946565b90508060000361115457600019915050610937565b603b5460405163e6bc046160e01b81526000916001600160a01b03169063e6bc046190611185908890600401612661565b602060405180830381865afa1580156111a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c69190612946565b6111d883670de0b6b3a7640000612975565b6111e2919061298c565b9050846001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611222573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124691906128bc565b6112519060126129c1565b61125c90600a612abe565b603a546040516334e3b77960e01b81526001600160a01b03909116906334e3b7799061128e908990899060040161292c565b602060405180830381865afa1580156112ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112cf9190612946565b6112e183670de0b6b3a7640000612975565b6109ea919061298c565b603354604051632474521560e21b81526001600160a01b03909116906391d148549061131e906000903390600401612ae0565b602060405180830381865afa15801561133b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061135f9190612af7565b61137b5760405162461bcd60e51b815260040161059b90612b19565b80158061139f57506001600160a01b03821660009081526034602052604090205481105b156113bd57604051630906beff60e11b815260040160405180910390fd5b6001600160a01b03909116600090815260356020526040902055565b6002600154036113fb5760405162461bcd60e51b815260040161059b90612885565b6002600155603354604051632474521560e21b81526001600160a01b03909116906391d148549061144090600080516020612c0e833981519152903390600401612ae0565b602060405180830381865afa15801561145d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114819190612af7565b6114df5760405162461bcd60e51b815260206004820152602960248201527f5375417574683a206f6e6c794c69717569646174696f6e416363657373204155604482015268151217d1905253115160ba1b606482015260840161059b565b603854604051631ce4b4a760e01b81526001600160a01b0390911690631ce4b4a790611511908890889060040161292c565b602060405180830381865afa15801561152e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115529190612946565b600003611572576040516308ae8efb60e31b815260040160405180910390fd5b603854604051636f70e66f60e01b81526001600160a01b0390911690636f70e66f906115aa9088908890889087908990600401612b50565b600060405180830381600087803b1580156115c457600080fd5b505af11580156115d8573d6000803e3d6000fd5b505050506115e6853361231e565b505060018055505050565b603a546040516334e3b77960e01b815260009182916001600160a01b03909116906334e3b77990611628908790879060040161292c565b602060405180830381865afa158015611645573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116699190612946565b603c546040516306addfb360e31b81529192506000916001600160a01b039091169063356efd989061169f908890600401612661565b602060405180830381865afa1580156116bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e09190612946565b9050806000036116f557600092505050610937565b603a5460405163f084843d60e01b81526000916001600160a01b03169063f084843d90611728908990899060040161292c565b602060405180830381865afa158015611745573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117699190612946565b603b5460405163f3f481df60e01b81529192506000916001600160a01b039091169063f3f481df9061179f908a90600401612661565b602060405180830381865afa1580156117bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e09190612946565b6117ea9084612975565b876001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611828573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061184c91906128bc565b61185790600a612abe565b6118619084612975565b61187390670de0b6b3a7640000612975565b61187d919061298c565b90506118898185612acd565b979650505050505050565b603354604051632474521560e21b81526001600160a01b03909116906391d14854906118c7906000903390600401612ae0565b602060405180830381865afa1580156118e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119089190612af7565b6119245760405162461bcd60e51b815260040161059b90612b19565b8015806119385750670de0b6b3a764000081115b1561195657604051636ae75f5b60e01b815260040160405180910390fd5b6001600160a01b03909116600090815260346020526040902055565b603354604051632474521560e21b81526001600160a01b03909116906391d14854906119a5906000903390600401612ae0565b602060405180830381865afa1580156119c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119e69190612af7565b611a025760405162461bcd60e51b815260040161059b90612b19565b603754604051639fea3e0760e01b81526001600160a01b0390911690639fea3e0790611a3690899089908790600401612b84565b600060405180830381600087803b158015611a5057600080fd5b505af1158015611a64573d6000803e3d6000fd5b50505050611a728685611894565b611a7c86846112eb565b611a8581611fbe565b505050505050565b603a54604051631ce4b4a760e01b8152600091829182916001600160a01b031690631ce4b4a790611ac4908890889060040161292c565b602060405180830381865afa158015611ae1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b059190612946565b603a546040516334e3b77960e01b81529194506001600160a01b0316906334e3b77990611b38908890889060040161292c565b602060405180830381865afa158015611b55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b799190612946565b603a5460405163f084843d60e01b81529193506001600160a01b03169063f084843d90611bac908890889060040161292c565b602060405180830381865afa158015611bc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bed9190612946565b90509250925092565b600260015403611c185760405162461bcd60e51b815260040161059b90612885565b6002600155603d54604051631ce4b4a760e01b81526000916001600160a01b031690631ce4b4a790611c50908790339060040161292c565b602060405180830381865afa158015611c6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c919190612946565b1115611cb05760405163fa5af4cd60e01b815260040160405180910390fd5b603d5460405163f084843d60e01b81526000916001600160a01b03169063f084843d90611ce3908790339060040161292c565b602060405180830381865afa158015611d00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d249190612946565b905080821115611d32578091505b603d5460405163034c188b60e41b81526000916001600160a01b0316906334c188b090611d6790889033908890600401612908565b602060405180830381865afa158015611d84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611da89190612946565b603d54604051636f70e66f60e01b81529192506001600160a01b031690636f70e66f90611de1908890339081908a908a90600401612b50565b600060405180830381600087803b158015611dfb57600080fd5b505af1158015611e0f573d6000803e3d6000fd5b50505050611e1d853361231e565b603d5460405163628a468360e01b81526001600160a01b039091169063628a468390611e5190339087908690600401612b84565b600060405180830381600087803b158015611e6b57600080fd5b505af1158015611e7f573d6000803e3d6000fd5b5050603d5460405163f084843d60e01b8152600093506001600160a01b03909116915063f084843d90611eb8908990339060040161292c565b602060405180830381865afa158015611ed5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ef99190612946565b1115611f6d57603d5460405163c640752d60e01b81526001600160a01b039091169063c640752d90611f31908890339060040161292c565b600060405180830381600087803b158015611f4b57600080fd5b505af1158015611f5f573d6000803e3d6000fd5b50505050611f6d853361223a565b604080518581526020810185905233916001600160a01b038816917fa702ae6024e8b4c2b0eb162b1453dacb93cf6922f5a2d7236faed898c21148f8910160405180910390a3505060018055505050565b603354604051632474521560e21b81526001600160a01b03909116906391d1485490611ff1906000903390600401612ae0565b602060405180830381865afa15801561200e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120329190612af7565b61204e5760405162461bcd60e51b815260040161059b90612b19565b603655565b603854604051631ce4b4a760e01b81526000916001600160a01b031690631ce4b4a790612086908690869060040161292c565b602060405180830381865afa1580156120a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120c79190612946565b11156120e65760405163fa5af4cd60e01b815260040160405180910390fd5b60395460405163134a02dd60e01b81526001600160a01b039091169063134a02dd90612118908590859060040161292c565b602060405180830381865afa158015612135573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121599190612af7565b61217657604051632066819b60e21b815260040160405180910390fd5b60385460405163c640752d60e01b81526001600160a01b039091169063c640752d906121a8908590859060040161292c565b600060405180830381600087803b1580156121c257600080fd5b505af11580156121d6573d6000803e3d6000fd5b5050603854604051636a3cb68960e11b81526001600160a01b03909116925063d4796d12915061220c908590859060040161292c565b600060405180830381600087803b15801561222657600080fd5b505af1158015611a85573d6000803e3d6000fd5b60006122468383610aa7565b6001600160a01b03841660009081526034602052604081205491925090670de0b6b3a7640000906122779084612975565b612281919061298c565b603d5460405163a6ea8b8760e01b815291925082916001600160a01b039091169063a6ea8b87906122b8908890889060040161292c565b602060405180830381865afa1580156122d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122f99190612946565b1115612318576040516330b58a9160e01b815260040160405180910390fd5b50505050565b60395460405163201840af60e11b81526000916001600160a01b031690634030815e90612351908690869060040161292c565b602060405180830381865afa15801561236e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123929190612946565b905060008111801561241a5750603960009054906101000a90046001600160a01b03166001600160a01b031663bb497dcc6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156123f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124169190612946565b8111155b15610f0557604051633fc1a63760e11b815260040160405180910390fd5b600054610100900460ff1661245f5760405162461bcd60e51b815260040161059b90612ba5565b6124676125eb565b565b600054610100900460ff166124905760405162461bcd60e51b815260040161059b90612ba5565b6124fa816001600160a01b03166303ee9f226040518163ffffffff1660e01b8152600401602060405180830381865afa1580156124d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124f59190612bf0565b612618565b603780546001600160a01b0319166001600160a01b0392909216919091179055674563918244f40000603655565b600054610100900460ff1661254f5760405162461bcd60e51b815260040161059b90612ba5565b612557612438565b603980546001600160a01b039384166001600160a01b03199182161790915560388054929093169116179055565b6001600160a01b0381166125ac576040516350dd03f760e11b815260040160405180910390fd5b603b80546001600160a01b039485166001600160a01b031991821617909155603a805493851693821693909317909255603c8054919093169116179055565b600054610100900460ff166126125760405162461bcd60e51b815260040161059b90612ba5565b60018055565b600054610100900460ff1661263f5760405162461bcd60e51b815260040161059b90612ba5565b603380546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0391909116815260200190565b6001600160a01b038116811461268a57600080fd5b50565b600080600080608085870312156126a357600080fd5b84356126ae81612675565b966020860135965060408601359560600135945092505050565b600080604083850312156126db57600080fd5b82356126e681612675565b915060208301356126f681612675565b809150509250929050565b6000806000806080858703121561271757600080fd5b843561272281612675565b9350602085013561273281612675565b93969395505050506040820135916060013590565b6000806040838503121561275a57600080fd5b823561276581612675565b946020939093013593505050565b600080600080600060a0868803121561278b57600080fd5b853561279681612675565b945060208601356127a681612675565b935060408601356127b681612675565b94979396509394606081013594506080013592915050565b60008060008060008060c087890312156127e757600080fd5b86356127f281612675565b9860208801359850604088013597606081013597506080810135965060a00135945092505050565b60008060006060848603121561282f57600080fd5b833561283a81612675565b95602085013595506040909401359392505050565b60006020828403121561286157600080fd5b5035919050565b60006020828403121561287a57600080fd5b8135610f7e81612675565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6000602082840312156128ce57600080fd5b815160ff81168114610f7e57600080fd5b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0392831681529116602082015260400190565b60006020828403121561295857600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176109375761093761295f565b6000826129a957634e487b7160e01b600052601260045260246000fd5b500490565b808201808211156109375761093761295f565b60ff82811682821603908111156109375761093761295f565b600181815b80851115612a155781600019048211156129fb576129fb61295f565b80851615612a0857918102915b93841c93908002906129df565b509250929050565b600082612a2c57506001610937565b81612a3957506000610937565b8160018114612a4f5760028114612a5957612a75565b6001915050610937565b60ff841115612a6a57612a6a61295f565b50506001821b610937565b5060208310610133831016604e8410600b8410161715612a98575081810a610937565b612aa283836129da565b8060001904821115612ab657612ab661295f565b029392505050565b6000610f7e60ff841683612a1d565b818103818111156109375761093761295f565b9182526001600160a01b0316602082015260400190565b600060208284031215612b0957600080fd5b81518015158114610f7e57600080fd5b6020808252601d908201527f5375417574683a206f6e6c794f776e657220415554485f4641494c4544000000604082015260600190565b6001600160a01b03958616815293851660208501529190931660408301526060820192909252608081019190915260a00190565b6001600160a01b039390931683526020830191909152604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600060208284031215612c0257600080fd5b8151610f7e8161267556fe9a9aef7c1247d5fc769b0185c052913e39673da29a880317dfd20ebf86f26a49a264697066735822122025290fe0a58c968bf7bf21e477505b5e7413a9d245414ed2488695166d7aaed164736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361061014b5760003560e01c806303ee9f221461016e578063112e1400146101a4578063134a02dd146101c657806314c376dc146101f65780631c656c3914610238578063392c0ce7146102585780634030815e1461027857806343070b7a14610298578063485cc955146102b85780634c9a5550146102d857806356d8be56146102f85780636338e4d7146103185780636f16cbf7146103385780636f70e66f1461035857806376b5070c146103785780639077beac14610398578063aca345ee146103b8578063ada9e5ad146103d8578063af368fbd146103f8578063bb497dcc14610433578063bbdc953114610449578063cf13340414610469578063d4796d1214610489578063d5391393146104a9578063dc97e84e146104dd578063e6bc0461146104ff578063f3f481df1461052c578063fbfa77cf1461055957600080fd5b366101695760405163ccc0891360e01b815260040160405180910390fd5b600080fd5b34801561017a57600080fd5b5060335461018e906001600160a01b031681565b60405161019b9190612661565b60405180910390f35b3480156101b057600080fd5b506101c46101bf36600461268d565b610579565b005b3480156101d257600080fd5b506101e66101e13660046126c8565b610807565b604051901515815260200161019b565b34801561020257600080fd5b5061022a7fe965846df3dd5b1dfa65f58e31477079e90140e0908b6dd31b5aead5a57cf36581565b60405190815260200161019b565b34801561024457600080fd5b5061022a6102533660046126c8565b61093d565b34801561026457600080fd5b5061022a6102733660046126c8565b6109fd565b34801561028457600080fd5b5061022a6102933660046126c8565b610aa7565b3480156102a457600080fd5b5061022a6102b3366004612701565b610bb9565b3480156102c457600080fd5b506101c46102d33660046126c8565b610e0e565b3480156102e457600080fd5b5061022a6102f33660046126c8565b610f0a565b34801561030457600080fd5b5061022a6103133660046126c8565b610f85565b34801561032457600080fd5b5061022a6103333660046126c8565b6110c7565b34801561034457600080fd5b506101c4610353366004612747565b6112eb565b34801561036457600080fd5b506101c4610373366004612773565b6113d9565b34801561038457600080fd5b5061022a6103933660046126c8565b6115f1565b3480156103a457600080fd5b506101c46103b3366004612747565b611894565b3480156103c457600080fd5b5060375461018e906001600160a01b031681565b3480156103e457600080fd5b506101c46103f33660046127ce565b611972565b34801561040457600080fd5b506104186104133660046126c8565b611a8d565b6040805193845260208401929092529082015260600161019b565b34801561043f57600080fd5b5061022a60365481565b34801561045557600080fd5b506101c461046436600461281a565b611bf6565b34801561047557600080fd5b506101c461048436600461284f565b611fbe565b34801561049557600080fd5b506101c46104a43660046126c8565b612053565b3480156104b557600080fd5b5061022a7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b3480156104e957600080fd5b5061022a600080516020612c0e83398151915281565b34801561050b57600080fd5b5061022a61051a366004612868565b60356020526000908152604090205481565b34801561053857600080fd5b5061022a610547366004612868565b60346020526000908152604090205481565b34801561056557600080fd5b50603d5461018e906001600160a01b031681565b6002600154036105a45760405162461bcd60e51b815260040161059b90612885565b60405180910390fd5b6002600155811580156105b5575082155b156105d35760405163fa95696160e01b815260040160405180910390fd5b6012846001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610613573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063791906128bc565b60ff16111561065957604051636a78e98160e11b815260040160405180910390fd5b816000036106ce57603d546040516320e8c56560e01b81526001600160a01b03909116906320e8c565906106979087903390889087906004016128df565b600060405180830381600087803b1580156106b157600080fd5b505af11580156106c5573d6000803e3d6000fd5b505050506107ad565b821561073d57603d546040516320e8c56560e01b81526001600160a01b03909116906320e8c5659061070a9087903390889087906004016128df565b600060405180830381600087803b15801561072457600080fd5b505af1158015610738573d6000803e3d6000fd5b505050505b603d546040516314890dcb60e21b81526001600160a01b0390911690635224372c9061077190879033908790600401612908565b600060405180830381600087803b15801561078b57600080fd5b505af115801561079f573d6000803e3d6000fd5b505050506107ad843361223a565b6107b7843361231e565b604080518481526020810184905233916001600160a01b038716917f6423b6056e64b3b29cb2d342362b47c26fa8d6877da27ea152354060df19b9bc910160405180910390a35050600180555050565b6000806108148484610aa7565b603a5460405163a6ea8b8760e01b81529192506000916001600160a01b039091169063a6ea8b879061084c908890889060040161292c565b602060405180830381865afa158015610869573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088d9190612946565b9050806000036108a257600092505050610937565b603b5460405163e6bc046160e01b81526001600160a01b039091169063e6bc0461906108d2908890600401612661565b602060405180830381865afa1580156108ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109139190612946565b8261092683670de0b6b3a7640000612975565b610930919061298c565b1015925050505b92915050565b603a5460405163a6ea8b8760e01b815260009182916001600160a01b039091169063a6ea8b8790610974908790879060040161292c565b602060405180830381865afa158015610991573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b59190612946565b9050806000036109c9576000915050610937565b60006109d58585610aa7565b9050806109ea83670de0b6b3a7640000612975565b6109f4919061298c565b95945050505050565b600080610a0a8484610aa7565b905080600003610a1e576000915050610937565b603a5460405163f084843d60e01b81526000916001600160a01b03169063f084843d90610a51908890889060040161292c565b602060405180830381865afa158015610a6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a929190612946565b9050816109ea82670de0b6b3a7640000612975565b603a546040516334e3b77960e01b815260009182916001600160a01b03909116906334e3b77990610ade908790879060040161292c565b602060405180830381865afa158015610afb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1f9190612946565b603c546040516306addfb360e31b8152919250670de0b6b3a76400009183916001600160a01b03169063356efd9890610b5c908990600401612661565b602060405180830381865afa158015610b79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9d9190612946565b610ba79190612975565b610bb1919061298c565b949350505050565b603a5460405163a6ea8b8760e01b8152600091829184916001600160a01b03169063a6ea8b8790610bf0908a908a9060040161292c565b602060405180830381865afa158015610c0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c319190612946565b610c3b91906129ae565b905080600003610c5057600019915050610bb1565b603b5460405163e6bc046160e01b81526000916001600160a01b03169063e6bc046190610c81908a90600401612661565b602060405180830381865afa158015610c9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc29190612946565b610cd483670de0b6b3a7640000612975565b610cde919061298c565b603a546040516334e3b77960e01b815291925060009187916001600160a01b0316906334e3b77990610d16908c908c9060040161292c565b602060405180830381865afa158015610d33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d579190612946565b610d6191906129ae565b9050876001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610da1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc591906128bc565b610dd09060126129c1565b610ddb90600a612abe565b81610dee84670de0b6b3a7640000612975565b610df8919061298c565b610e02919061298c565b98975050505050505050565b600054610100900460ff16610e295760005460ff1615610e2d565b303b155b610e905760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161059b565b600054610100900460ff16158015610eb2576000805461ffff19166101011790555b610eba612438565b610ec383612469565b610ecd3084612528565b610ed8308484612585565b603d80546001600160a01b0319166001600160a01b0385161790558015610f05576000805461ff00191690555b505050565b603a54604051631ce4b4a760e01b81526000916001600160a01b031690631ce4b4a790610f3d908690869060040161292c565b602060405180830381865afa158015610f5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7e9190612946565b9392505050565b600080610f928484610aa7565b603b5460405163f3f481df60e01b8152919250600091670de0b6b3a7640000916001600160a01b03169063f3f481df90610fd0908990600401612661565b602060405180830381865afa158015610fed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110119190612946565b61101b9084612975565b611025919061298c565b603a5460405163a6ea8b8760e01b81529192506000916001600160a01b039091169063a6ea8b879061105d908990899060040161292c565b602060405180830381865afa15801561107a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061109e9190612946565b90508082116110b35760009350505050610937565b6110bd8183612acd565b9695505050505050565b603a5460405163a6ea8b8760e01b815260009182916001600160a01b039091169063a6ea8b87906110fe908790879060040161292c565b602060405180830381865afa15801561111b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061113f9190612946565b90508060000361115457600019915050610937565b603b5460405163e6bc046160e01b81526000916001600160a01b03169063e6bc046190611185908890600401612661565b602060405180830381865afa1580156111a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c69190612946565b6111d883670de0b6b3a7640000612975565b6111e2919061298c565b9050846001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611222573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124691906128bc565b6112519060126129c1565b61125c90600a612abe565b603a546040516334e3b77960e01b81526001600160a01b03909116906334e3b7799061128e908990899060040161292c565b602060405180830381865afa1580156112ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112cf9190612946565b6112e183670de0b6b3a7640000612975565b6109ea919061298c565b603354604051632474521560e21b81526001600160a01b03909116906391d148549061131e906000903390600401612ae0565b602060405180830381865afa15801561133b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061135f9190612af7565b61137b5760405162461bcd60e51b815260040161059b90612b19565b80158061139f57506001600160a01b03821660009081526034602052604090205481105b156113bd57604051630906beff60e11b815260040160405180910390fd5b6001600160a01b03909116600090815260356020526040902055565b6002600154036113fb5760405162461bcd60e51b815260040161059b90612885565b6002600155603354604051632474521560e21b81526001600160a01b03909116906391d148549061144090600080516020612c0e833981519152903390600401612ae0565b602060405180830381865afa15801561145d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114819190612af7565b6114df5760405162461bcd60e51b815260206004820152602960248201527f5375417574683a206f6e6c794c69717569646174696f6e416363657373204155604482015268151217d1905253115160ba1b606482015260840161059b565b603854604051631ce4b4a760e01b81526001600160a01b0390911690631ce4b4a790611511908890889060040161292c565b602060405180830381865afa15801561152e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115529190612946565b600003611572576040516308ae8efb60e31b815260040160405180910390fd5b603854604051636f70e66f60e01b81526001600160a01b0390911690636f70e66f906115aa9088908890889087908990600401612b50565b600060405180830381600087803b1580156115c457600080fd5b505af11580156115d8573d6000803e3d6000fd5b505050506115e6853361231e565b505060018055505050565b603a546040516334e3b77960e01b815260009182916001600160a01b03909116906334e3b77990611628908790879060040161292c565b602060405180830381865afa158015611645573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116699190612946565b603c546040516306addfb360e31b81529192506000916001600160a01b039091169063356efd989061169f908890600401612661565b602060405180830381865afa1580156116bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e09190612946565b9050806000036116f557600092505050610937565b603a5460405163f084843d60e01b81526000916001600160a01b03169063f084843d90611728908990899060040161292c565b602060405180830381865afa158015611745573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117699190612946565b603b5460405163f3f481df60e01b81529192506000916001600160a01b039091169063f3f481df9061179f908a90600401612661565b602060405180830381865afa1580156117bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e09190612946565b6117ea9084612975565b876001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611828573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061184c91906128bc565b61185790600a612abe565b6118619084612975565b61187390670de0b6b3a7640000612975565b61187d919061298c565b90506118898185612acd565b979650505050505050565b603354604051632474521560e21b81526001600160a01b03909116906391d14854906118c7906000903390600401612ae0565b602060405180830381865afa1580156118e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119089190612af7565b6119245760405162461bcd60e51b815260040161059b90612b19565b8015806119385750670de0b6b3a764000081115b1561195657604051636ae75f5b60e01b815260040160405180910390fd5b6001600160a01b03909116600090815260346020526040902055565b603354604051632474521560e21b81526001600160a01b03909116906391d14854906119a5906000903390600401612ae0565b602060405180830381865afa1580156119c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119e69190612af7565b611a025760405162461bcd60e51b815260040161059b90612b19565b603754604051639fea3e0760e01b81526001600160a01b0390911690639fea3e0790611a3690899089908790600401612b84565b600060405180830381600087803b158015611a5057600080fd5b505af1158015611a64573d6000803e3d6000fd5b50505050611a728685611894565b611a7c86846112eb565b611a8581611fbe565b505050505050565b603a54604051631ce4b4a760e01b8152600091829182916001600160a01b031690631ce4b4a790611ac4908890889060040161292c565b602060405180830381865afa158015611ae1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b059190612946565b603a546040516334e3b77960e01b81529194506001600160a01b0316906334e3b77990611b38908890889060040161292c565b602060405180830381865afa158015611b55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b799190612946565b603a5460405163f084843d60e01b81529193506001600160a01b03169063f084843d90611bac908890889060040161292c565b602060405180830381865afa158015611bc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bed9190612946565b90509250925092565b600260015403611c185760405162461bcd60e51b815260040161059b90612885565b6002600155603d54604051631ce4b4a760e01b81526000916001600160a01b031690631ce4b4a790611c50908790339060040161292c565b602060405180830381865afa158015611c6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c919190612946565b1115611cb05760405163fa5af4cd60e01b815260040160405180910390fd5b603d5460405163f084843d60e01b81526000916001600160a01b03169063f084843d90611ce3908790339060040161292c565b602060405180830381865afa158015611d00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d249190612946565b905080821115611d32578091505b603d5460405163034c188b60e41b81526000916001600160a01b0316906334c188b090611d6790889033908890600401612908565b602060405180830381865afa158015611d84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611da89190612946565b603d54604051636f70e66f60e01b81529192506001600160a01b031690636f70e66f90611de1908890339081908a908a90600401612b50565b600060405180830381600087803b158015611dfb57600080fd5b505af1158015611e0f573d6000803e3d6000fd5b50505050611e1d853361231e565b603d5460405163628a468360e01b81526001600160a01b039091169063628a468390611e5190339087908690600401612b84565b600060405180830381600087803b158015611e6b57600080fd5b505af1158015611e7f573d6000803e3d6000fd5b5050603d5460405163f084843d60e01b8152600093506001600160a01b03909116915063f084843d90611eb8908990339060040161292c565b602060405180830381865afa158015611ed5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ef99190612946565b1115611f6d57603d5460405163c640752d60e01b81526001600160a01b039091169063c640752d90611f31908890339060040161292c565b600060405180830381600087803b158015611f4b57600080fd5b505af1158015611f5f573d6000803e3d6000fd5b50505050611f6d853361223a565b604080518581526020810185905233916001600160a01b038816917fa702ae6024e8b4c2b0eb162b1453dacb93cf6922f5a2d7236faed898c21148f8910160405180910390a3505060018055505050565b603354604051632474521560e21b81526001600160a01b03909116906391d1485490611ff1906000903390600401612ae0565b602060405180830381865afa15801561200e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120329190612af7565b61204e5760405162461bcd60e51b815260040161059b90612b19565b603655565b603854604051631ce4b4a760e01b81526000916001600160a01b031690631ce4b4a790612086908690869060040161292c565b602060405180830381865afa1580156120a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120c79190612946565b11156120e65760405163fa5af4cd60e01b815260040160405180910390fd5b60395460405163134a02dd60e01b81526001600160a01b039091169063134a02dd90612118908590859060040161292c565b602060405180830381865afa158015612135573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121599190612af7565b61217657604051632066819b60e21b815260040160405180910390fd5b60385460405163c640752d60e01b81526001600160a01b039091169063c640752d906121a8908590859060040161292c565b600060405180830381600087803b1580156121c257600080fd5b505af11580156121d6573d6000803e3d6000fd5b5050603854604051636a3cb68960e11b81526001600160a01b03909116925063d4796d12915061220c908590859060040161292c565b600060405180830381600087803b15801561222657600080fd5b505af1158015611a85573d6000803e3d6000fd5b60006122468383610aa7565b6001600160a01b03841660009081526034602052604081205491925090670de0b6b3a7640000906122779084612975565b612281919061298c565b603d5460405163a6ea8b8760e01b815291925082916001600160a01b039091169063a6ea8b87906122b8908890889060040161292c565b602060405180830381865afa1580156122d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122f99190612946565b1115612318576040516330b58a9160e01b815260040160405180910390fd5b50505050565b60395460405163201840af60e11b81526000916001600160a01b031690634030815e90612351908690869060040161292c565b602060405180830381865afa15801561236e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123929190612946565b905060008111801561241a5750603960009054906101000a90046001600160a01b03166001600160a01b031663bb497dcc6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156123f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124169190612946565b8111155b15610f0557604051633fc1a63760e11b815260040160405180910390fd5b600054610100900460ff1661245f5760405162461bcd60e51b815260040161059b90612ba5565b6124676125eb565b565b600054610100900460ff166124905760405162461bcd60e51b815260040161059b90612ba5565b6124fa816001600160a01b03166303ee9f226040518163ffffffff1660e01b8152600401602060405180830381865afa1580156124d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124f59190612bf0565b612618565b603780546001600160a01b0319166001600160a01b0392909216919091179055674563918244f40000603655565b600054610100900460ff1661254f5760405162461bcd60e51b815260040161059b90612ba5565b612557612438565b603980546001600160a01b039384166001600160a01b03199182161790915560388054929093169116179055565b6001600160a01b0381166125ac576040516350dd03f760e11b815260040160405180910390fd5b603b80546001600160a01b039485166001600160a01b031991821617909155603a805493851693821693909317909255603c8054919093169116179055565b600054610100900460ff166126125760405162461bcd60e51b815260040161059b90612ba5565b60018055565b600054610100900460ff1661263f5760405162461bcd60e51b815260040161059b90612ba5565b603380546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0391909116815260200190565b6001600160a01b038116811461268a57600080fd5b50565b600080600080608085870312156126a357600080fd5b84356126ae81612675565b966020860135965060408601359560600135945092505050565b600080604083850312156126db57600080fd5b82356126e681612675565b915060208301356126f681612675565b809150509250929050565b6000806000806080858703121561271757600080fd5b843561272281612675565b9350602085013561273281612675565b93969395505050506040820135916060013590565b6000806040838503121561275a57600080fd5b823561276581612675565b946020939093013593505050565b600080600080600060a0868803121561278b57600080fd5b853561279681612675565b945060208601356127a681612675565b935060408601356127b681612675565b94979396509394606081013594506080013592915050565b60008060008060008060c087890312156127e757600080fd5b86356127f281612675565b9860208801359850604088013597606081013597506080810135965060a00135945092505050565b60008060006060848603121561282f57600080fd5b833561283a81612675565b95602085013595506040909401359392505050565b60006020828403121561286157600080fd5b5035919050565b60006020828403121561287a57600080fd5b8135610f7e81612675565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6000602082840312156128ce57600080fd5b815160ff81168114610f7e57600080fd5b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0392831681529116602082015260400190565b60006020828403121561295857600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176109375761093761295f565b6000826129a957634e487b7160e01b600052601260045260246000fd5b500490565b808201808211156109375761093761295f565b60ff82811682821603908111156109375761093761295f565b600181815b80851115612a155781600019048211156129fb576129fb61295f565b80851615612a0857918102915b93841c93908002906129df565b509250929050565b600082612a2c57506001610937565b81612a3957506000610937565b8160018114612a4f5760028114612a5957612a75565b6001915050610937565b60ff841115612a6a57612a6a61295f565b50506001821b610937565b5060208310610133831016604e8410600b8410161715612a98575081810a610937565b612aa283836129da565b8060001904821115612ab657612ab661295f565b029392505050565b6000610f7e60ff841683612a1d565b818103818111156109375761093761295f565b9182526001600160a01b0316602082015260400190565b600060208284031215612b0957600080fd5b81518015158114610f7e57600080fd5b6020808252601d908201527f5375417574683a206f6e6c794f776e657220415554485f4641494c4544000000604082015260600190565b6001600160a01b03958616815293851660208501529190931660408301526060820192909252608081019190915260a00190565b6001600160a01b039390931683526020830191909152604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600060208284031215612c0257600080fd5b8151610f7e8161267556fe9a9aef7c1247d5fc769b0185c052913e39673da29a880317dfd20ebf86f26a49a264697066735822122025290fe0a58c968bf7bf21e477505b5e7413a9d245414ed2488695166d7aaed164736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "setInitialCollateralRatioE18(address,uint256)": {
        "details": "Sets the initial collateral ratio",
        "params": {
          "asset": "The address of the main collateral token",
          "newValueE18": "The collateralization ratio (1e18 = 100%)*"
        }
      },
      "setLiquidationRatioE18(address,uint256)": {
        "details": "Sets the liquidation ratio",
        "params": {
          "asset": "The address of the main collateral token",
          "newValueE18": "The liquidation ratio (1e18 = 100%).*"
        }
      },
      "setMinCollateralInUsdE18(uint256)": {
        "details": "Sets a minimum value of collateral in USD which allowed to be left after partial closure",
        "params": {
          "newValueE18": "The minimum value of collateral in USD"
        }
      },
      "triggerLiquidation(address,address)": {
        "details": "Emits LiquidationTriggered event. Sets the current block as liquidationBlock for the position. Can be triggered only once for the position."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "setInitialCollateralRatioE18(address,uint256)": {
        "notice": "Only manager is able to call this function"
      },
      "setLiquidationRatioE18(address,uint256)": {
        "notice": "Only manager is able to call this function"
      },
      "setMinCollateralInUsdE18(uint256)": {
        "notice": "Only manager is able to call this function"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 408,
        "contract": "contracts/lending/SuManager.sol:SuManager",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 411,
        "contract": "contracts/lending/SuManager.sol:SuManager",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 489,
        "contract": "contracts/lending/SuManager.sol:SuManager",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 533,
        "contract": "contracts/lending/SuManager.sol:SuManager",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2611,
        "contract": "contracts/lending/SuManager.sol:SuManager",
        "label": "ACCESS_CONTROL_SINGLETON",
        "offset": 0,
        "slot": "51",
        "type": "t_contract(ISuAccessControl)2930"
      },
      {
        "astId": 4472,
        "contract": "contracts/lending/SuManager.sol:SuManager",
        "label": "initialCollateralRatioE18",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4476,
        "contract": "contracts/lending/SuManager.sol:SuManager",
        "label": "liquidationRatioE18",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4478,
        "contract": "contracts/lending/SuManager.sol:SuManager",
        "label": "minCollateralInUsdE18",
        "offset": 0,
        "slot": "54",
        "type": "t_uint256"
      },
      {
        "astId": 4481,
        "contract": "contracts/lending/SuManager.sol:SuManager",
        "label": "vaultParameters",
        "offset": 0,
        "slot": "55",
        "type": "t_contract(SuVaultParameters)4760"
      },
      {
        "astId": 4000,
        "contract": "contracts/lending/SuManager.sol:SuManager",
        "label": "_vault",
        "offset": 0,
        "slot": "56",
        "type": "t_contract(ISuVault)3438"
      },
      {
        "astId": 4003,
        "contract": "contracts/lending/SuManager.sol:SuManager",
        "label": "_manager",
        "offset": 0,
        "slot": "57",
        "type": "t_contract(ISuManager)3128"
      },
      {
        "astId": 3498,
        "contract": "contracts/lending/SuManager.sol:SuManager",
        "label": "_VAULT",
        "offset": 0,
        "slot": "58",
        "type": "t_contract(ISuVault)3438"
      },
      {
        "astId": 3501,
        "contract": "contracts/lending/SuManager.sol:SuManager",
        "label": "_MANAGER",
        "offset": 0,
        "slot": "59",
        "type": "t_contract(ISuManager)3128"
      },
      {
        "astId": 3504,
        "contract": "contracts/lending/SuManager.sol:SuManager",
        "label": "_ORACLE",
        "offset": 0,
        "slot": "60",
        "type": "t_contract(ISuOracle)3202"
      },
      {
        "astId": 4168,
        "contract": "contracts/lending/SuManager.sol:SuManager",
        "label": "vault",
        "offset": 0,
        "slot": "61",
        "type": "t_contract(ISuVault)3438"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ISuAccessControl)2930": {
        "encoding": "inplace",
        "label": "contract ISuAccessControl",
        "numberOfBytes": "20"
      },
      "t_contract(ISuManager)3128": {
        "encoding": "inplace",
        "label": "contract ISuManager",
        "numberOfBytes": "20"
      },
      "t_contract(ISuOracle)3202": {
        "encoding": "inplace",
        "label": "contract ISuOracle",
        "numberOfBytes": "20"
      },
      "t_contract(ISuVault)3438": {
        "encoding": "inplace",
        "label": "contract ISuVault",
        "numberOfBytes": "20"
      },
      "t_contract(SuVaultParameters)4760": {
        "encoding": "inplace",
        "label": "contract SuVaultParameters",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}