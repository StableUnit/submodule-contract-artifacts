{
  "address": "0xE12aFd36F00C5Fc706399F07233bC42464127458",
  "abi": [
    {
      "inputs": [],
      "name": "IncorrectDiscount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughDeferredAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TooMuchAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACCESS_CONTROL_SINGLETON",
      "outputs": [
        {
          "internalType": "contract ISuAccessControl",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIQUIDATION_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POOL_FEE",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VAULT_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "enum DiscountType",
          "name": "discountType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "liquidationBlock",
          "type": "uint256"
        }
      ],
      "name": "calculateDiscountE18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "calculateLiquidationDiscount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "stablecoinToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stablecoinAmountEDecimal",
          "type": "uint256"
        }
      ],
      "name": "flashSwapStablecoinToAssetAndSwapBack",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "enum DiscountType",
          "name": "discountType",
          "type": "uint8"
        }
      ],
      "name": "getDiscountInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "firstBlockE18",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stepPerBlockE18",
              "type": "uint256"
            }
          ],
          "internalType": "struct DiscountInfo",
          "name": "discountInfo",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_authControl",
          "type": "address"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_authControl",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_suManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_suOracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_suReward",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_uniswapFactory",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "enum DiscountType",
          "name": "discountType",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "firstBlockE18",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stepPerBlockE18",
              "type": "uint256"
            }
          ],
          "internalType": "struct DiscountInfo",
          "name": "discountInfo",
          "type": "tuple"
        }
      ],
      "name": "setDiscountInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stablecoinAmountE18",
          "type": "uint256"
        }
      ],
      "name": "swapStableProToAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stablecoinToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stablecoinAmountEDecimal",
          "type": "uint256"
        }
      ],
      "name": "swapStableProToStablecoin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "stablecoinToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stablecoinAmountEDecimal",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "flashLoanIsUsed",
          "type": "bool"
        }
      ],
      "name": "swapStablecoinToAssetAndSwapBack",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "profit",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fee0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fee1",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "uniswapV3FlashCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "numDeployments": 7,
  "solcInputHash": "bee5958df9bd2aa66431a5d7e5e2d5ec",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"IncorrectDiscount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughDeferredAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooMuchAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACCESS_CONTROL_SINGLETON\",\"outputs\":[{\"internalType\":\"contract ISuAccessControl\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDATION_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL_FEE\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VAULT_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"enum DiscountType\",\"name\":\"discountType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"liquidationBlock\",\"type\":\"uint256\"}],\"name\":\"calculateDiscountE18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"calculateLiquidationDiscount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stablecoinToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stablecoinAmountEDecimal\",\"type\":\"uint256\"}],\"name\":\"flashSwapStablecoinToAssetAndSwapBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"enum DiscountType\",\"name\":\"discountType\",\"type\":\"uint8\"}],\"name\":\"getDiscountInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"firstBlockE18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stepPerBlockE18\",\"type\":\"uint256\"}],\"internalType\":\"struct DiscountInfo\",\"name\":\"discountInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_authControl\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_authControl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_suManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_suOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_suReward\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapFactory\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"enum DiscountType\",\"name\":\"discountType\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"firstBlockE18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stepPerBlockE18\",\"type\":\"uint256\"}],\"internalType\":\"struct DiscountInfo\",\"name\":\"discountInfo\",\"type\":\"tuple\"}],\"name\":\"setDiscountInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stablecoinAmountE18\",\"type\":\"uint256\"}],\"name\":\"swapStableProToAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stablecoinToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stablecoinAmountEDecimal\",\"type\":\"uint256\"}],\"name\":\"swapStableProToStablecoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stablecoinToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stablecoinAmountEDecimal\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"flashLoanIsUsed\",\"type\":\"bool\"}],\"name\":\"swapStablecoinToAssetAndSwapBack\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"uniswapV3FlashCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/liquidator/SuLiquidation.sol\":\"SuLiquidation\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x220c4a5af915e656be2aaa85ca57505d102418e476b1e2ef6c62e0c6ac143871\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport './pool/IUniswapV3PoolImmutables.sol';\\nimport './pool/IUniswapV3PoolState.sol';\\nimport './pool/IUniswapV3PoolDerivedState.sol';\\nimport './pool/IUniswapV3PoolActions.sol';\\nimport './pool/IUniswapV3PoolOwnerActions.sol';\\nimport './pool/IUniswapV3PoolEvents.sol';\\n\\n/// @title The interface for a Uniswap V3 Pool\\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\\n/// to the ERC20 specification\\n/// @dev The pool interface is broken up into many smaller pieces\\ninterface IUniswapV3Pool is\\n    IUniswapV3PoolImmutables,\\n    IUniswapV3PoolState,\\n    IUniswapV3PoolDerivedState,\\n    IUniswapV3PoolActions,\\n    IUniswapV3PoolOwnerActions,\\n    IUniswapV3PoolEvents\\n{\\n\\n}\\n\",\"keccak256\":\"0xfe6113d518466cd6652c85b111e01f33eb62157f49ae5ed7d5a3947a2044adb1\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissionless pool actions\\n/// @notice Contains pool methods that can be called by anyone\\ninterface IUniswapV3PoolActions {\\n    /// @notice Sets the initial price for the pool\\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\\n    function initialize(uint160 sqrtPriceX96) external;\\n\\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\\n    /// @param recipient The address for which the liquidity will be created\\n    /// @param tickLower The lower tick of the position in which to add liquidity\\n    /// @param tickUpper The upper tick of the position in which to add liquidity\\n    /// @param amount The amount of liquidity to mint\\n    /// @param data Any data that should be passed through to the callback\\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    function mint(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n    /// @param recipient The address which should receive the fees collected\\n    /// @param tickLower The lower tick of the position for which to collect fees\\n    /// @param tickUpper The upper tick of the position for which to collect fees\\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n\\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n    /// @dev Fees must be collected separately via a call to #collect\\n    /// @param tickLower The lower tick of the position for which to burn liquidity\\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\\n    /// @param amount How much liquidity to burn\\n    /// @return amount0 The amount of token0 sent to the recipient\\n    /// @return amount1 The amount of token1 sent to the recipient\\n    function burn(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Swap token0 for token1, or token1 for token0\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\\n    /// @param recipient The address to receive the output of the swap\\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n    /// @param data Any data to be passed through to the callback\\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\\n    /// the input observationCardinalityNext.\\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n}\\n\",\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that is not stored\\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\n/// blockchain. The functions here may have variable gas costs.\\ninterface IUniswapV3PoolDerivedState {\\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n    /// you must call it with secondsAgos = [3600, 0].\\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\\n    /// timestamp\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n\\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\n    /// snapshot is taken and the second snapshot is taken.\\n    /// @param tickLower The lower tick of the range\\n    /// @param tickUpper The upper tick of the range\\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (\\n            int56 tickCumulativeInside,\\n            uint160 secondsPerLiquidityInsideX128,\\n            uint32 secondsInside\\n        );\\n}\\n\",\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Events emitted by a pool\\n/// @notice Contains all events emitted by the pool\\ninterface IUniswapV3PoolEvents {\\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\\n\\n    /// @notice Emitted when liquidity is minted for a given position\\n    /// @param sender The address that minted the liquidity\\n    /// @param owner The owner of the position and recipient of any minted liquidity\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity minted to the position range\\n    /// @param amount0 How much token0 was required for the minted liquidity\\n    /// @param amount1 How much token1 was required for the minted liquidity\\n    event Mint(\\n        address sender,\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted when fees are collected by the owner of a position\\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\\n    /// @param owner The owner of the position for which fees are collected\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount0 The amount of token0 fees collected\\n    /// @param amount1 The amount of token1 fees collected\\n    event Collect(\\n        address indexed owner,\\n        address recipient,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount0,\\n        uint128 amount1\\n    );\\n\\n    /// @notice Emitted when a position's liquidity is removed\\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\n    /// @param owner The owner of the position for which liquidity is removed\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity to remove\\n    /// @param amount0 The amount of token0 withdrawn\\n    /// @param amount1 The amount of token1 withdrawn\\n    event Burn(\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted by the pool for any swaps between token0 and token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the output of the swap\\n    /// @param amount0 The delta of the token0 balance of the pool\\n    /// @param amount1 The delta of the token1 balance of the pool\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\\n    /// @param liquidity The liquidity of the pool after the swap\\n    /// @param tick The log base 1.0001 of price of the pool after the swap\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        int256 amount0,\\n        int256 amount1,\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        int24 tick\\n    );\\n\\n    /// @notice Emitted by the pool for any flashes of token0/token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the tokens from flash\\n    /// @param amount0 The amount of token0 that was flashed\\n    /// @param amount1 The amount of token1 that was flashed\\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\n    event Flash(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 paid0,\\n        uint256 paid1\\n    );\\n\\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\\n    /// just before a mint/swap/burn.\\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\\n    event IncreaseObservationCardinalityNext(\\n        uint16 observationCardinalityNextOld,\\n        uint16 observationCardinalityNextNew\\n    );\\n\\n    /// @notice Emitted when the protocol fee is changed by the pool\\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\\n\\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\\n    /// @param sender The address that collects the protocol fees\\n    /// @param recipient The address that receives the collected protocol fees\\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IUniswapV3PoolImmutables {\\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n    /// @return The contract address\\n    function factory() external view returns (address);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The fee\\n    function fee() external view returns (uint24);\\n\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// This value is an int24 to avoid casting even though it is always positive.\\n    /// @return The tick spacing\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n    /// @return The max amount of liquidity per tick\\n    function maxLiquidityPerTick() external view returns (uint128);\\n}\\n\",\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissioned pool actions\\n/// @notice Contains pool methods that may only be called by the factory owner\\ninterface IUniswapV3PoolOwnerActions {\\n    /// @notice Set the denominator of the protocol's % share of the fees\\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\\n\\n    /// @notice Collect the protocol fee accrued to the pool\\n    /// @param recipient The address to which collected protocol fees should be sent\\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\\n    /// @return amount0 The protocol fee collected in token0\\n    /// @return amount1 The protocol fee collected in token1\\n    function collectProtocol(\\n        address recipient,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that can change\\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\\n/// per transaction\\ninterface IUniswapV3PoolState {\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n    /// when accessed externally.\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n    /// boundary.\\n    /// observationIndex The index of the last oracle observation that was written,\\n    /// observationCardinality The current maximum number of observations stored in the pool,\\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n    /// feeProtocol The protocol fee for both tokens of the pool.\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n    /// unlocked Whether the pool is currently locked to reentrancy\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper,\\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the information about a position by the position's key\\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n    /// @return _liquidity The amount of liquidity in the position,\\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 _liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    /// @notice Returns data about a specific observation index\\n    /// @param index The element of the observations array to fetch\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n    /// ago, rather than at a specific index in the array.\\n    /// @return blockTimestamp The timestamp of the observation,\\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n\",\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Immutable state\\n/// @notice Functions that return immutable state of the router\\ninterface IPeripheryImmutableState {\\n    /// @return Returns the address of the Uniswap V3 factory\\n    function factory() external view returns (address);\\n\\n    /// @return Returns the address of WETH9\\n    function WETH9() external view returns (address);\\n}\\n\",\"keccak256\":\"0x7affcfeb5127c0925a71d6a65345e117c33537523aeca7bc98085ead8452519d\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\",\"keccak256\":\"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd\",\"license\":\"GPL-2.0-or-later\"},\"contracts/access-control/SuAuthenticated.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/ISuAccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title SuAuthenticated\\n * @dev other contracts should inherit to be authenticated\\n */\\nabstract contract SuAuthenticated is Initializable {\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant VAULT_ACCESS_ROLE = keccak256(\\\"VAULT_ACCESS_ROLE\\\");\\n    bytes32 public constant LIQUIDATION_ACCESS_ROLE = keccak256(\\\"LIQUIDATION_ACCESS_ROLE\\\");\\n    bytes32 private constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    // @dev the address of SuAccessControlSingleton - it should be one for all contract that inherits SuAuthenticated\\n    ISuAccessControl public ACCESS_CONTROL_SINGLETON;\\n\\n    // @dev should be passed in constructor\\n    function __SuAuthenticated_init(address _accessControlSingleton) internal onlyInitializing {\\n        ACCESS_CONTROL_SINGLETON = ISuAccessControl(_accessControlSingleton);\\n        // TODO: check that _accessControlSingleton points to ISuAccessControl instance\\n        // require(ISuAccessControl(_accessControlSingleton).supportsInterface(ISuAccessControl.hasRole.selector), \\\"bad dependency\\\");\\n    }\\n\\n    // @dev check DEFAULT_ADMIN_ROLE\\n    modifier onlyOwner() {\\n        require(ACCESS_CONTROL_SINGLETON.hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"SuAuth: onlyOwner AUTH_FAILED\\\");\\n        _;\\n    }\\n\\n    // @dev check VAULT_ACCESS_ROLE\\n    modifier onlyVaultAccess() {\\n        require(ACCESS_CONTROL_SINGLETON.hasRole(VAULT_ACCESS_ROLE, msg.sender), \\\"SuAuth: onlyVaultAccess AUTH_FAILED\\\");\\n        _;\\n    }\\n\\n    // @dev check VAULT_ACCESS_ROLE\\n    modifier onlyLiquidationAccess() {\\n        require(ACCESS_CONTROL_SINGLETON.hasRole(LIQUIDATION_ACCESS_ROLE, msg.sender), \\\"SuAuth: onlyLiquidationAccess AUTH_FAILED\\\");\\n        _;\\n    }\\n\\n    // @dev check MINTER_ROLE\\n    modifier onlyMinter() {\\n        require(ACCESS_CONTROL_SINGLETON.hasRole(MINTER_ROLE, msg.sender), \\\"SuAuth: onlyMinter AUTH_FAILED\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xa46331e68f981152c0a692dab54f01ef1f0170132c851d8848d14e38be7de8f5\",\"license\":\"BSL 1.1\"},\"contracts/interfaces/IRewardChefV2.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"./ISuOracle.sol\\\";\\n\\n/**\\n * @title RewardChefV2\\n * @notice fork of MasterChefV2(May-13-2021) https://etherscan.io/address/0xef0881ec094552b2e128cf945ef17a6752b4ec5d#code\\n * @dev This contract is based on MVC2, but uses \\\"virtual\\\" balances instead of storing real ERC20 tokens\\n * and uses address of this assets instead of pid.\\n * Rewards that are distributed have to be deposited using refillReward(uint256 amount, uint64 endBlock)\\n **/\\ninterface IRewardChefV2 {\\n    // @notice Info of each reward pool.\\n    // `allocPoint` The amount of allocation points assigned to the pool.\\n    // Also known as the amount of REWARD_TOKEN to distribute per block.\\n    struct PoolInfo {\\n        uint128 accSushiPerShare;\\n        uint64 lastRewardBlock;\\n        uint64 allocPoint;\\n        uint256 lpSupply;\\n    }\\n\\n    // @notice Info of each user.\\n    // `amount` token amount the user has provided.\\n    // `rewardDebt` The amount of rewards entitled to the user.\\n    struct UserInfo {\\n        uint256 amount;\\n        int256 rewardDebt;\\n\\n        uint256 multiplicator1e18;\\n        uint256 lockupPeriodSeconds;\\n        uint256 lockupStartTimestamp;\\n    }\\n\\n    struct ILockupPeriod {\\n        uint256 lockupPeriodSeconds;\\n        uint256 multiplicator1e18;\\n    }\\n\\n    // =======================================EVENTS=============================================\\n    event VirtualDeposit(address indexed user, address indexed asset, uint256 amount);\\n    event VirtualWithdraw(address indexed user, address indexed asset, uint256 amount);\\n    event ResetAmount(address indexed user, address indexed asset, address indexed to, uint256 amount, uint256 lockupPeriodSeconds);\\n    event Harvest(address indexed user, address indexed asset, uint256 amount);\\n    event LogPoolAddition(address indexed asset, uint256 allocPoint);\\n    event LogSetPool(address indexed asset, uint256 allocPoint);\\n    event LogUpdatePool(address indexed asset, uint64 lastRewardBlock, uint256 lpSupply, uint256 accSushiPerShare);\\n\\n    // =========================================VARS====================_=========================\\n    // @dev Total allocation points. Must be the sum of all allocation points in all pools.\\n    // The good practice, to always keep this variable is equal 1000.\\n    function totalAllocPoint() external view returns ( uint256 );\\n\\n    // =======================================REWARDER=============================================\\n    function REWARD_TOKEN() external view returns ( IERC20Upgradeable );\\n    function ORACLE() external view returns ( ISuOracle );\\n    function rewardPerBlock() external view returns ( uint256 );\\n    function rewardEndBlock() external view returns ( uint256 );\\n\\n    function refillReward(uint256 amount, uint64 endBlock) external;\\n    /**\\n     *  @dev returns total amount of rewards allocated to the all pools on the rage (startBlock, endBlock]\\n     *      i.e. excluding startBlock but including endBlock\\n     */\\n    function rewardsBetweenBlocks(uint256 startBlock, uint256 endBlock) external returns ( uint256 );\\n\\n    //=======================================LOCKUP LOGIC===========================================\\n    function getPossibleLockupPeriodsSeconds() external view returns (ILockupPeriod[] memory);\\n    function setPossibleLockupPeriodsSeconds(uint256 lockupPeriodSeconds, uint256 multiplicator1e18) external;\\n\\n    //================================CORE REWARD CHEF METHODS======================================\\n    // @notice Add a new reward pool. Can only be called by the owner.\\n    // DO NOT add the same LP token more than once.\\n    // @param allocPoint AP of the new pool.\\n    // @param _asset Address of the ERC-20 token.\\n    function add(uint256 allocPoint, address _asset) external;\\n\\n    // @notice Update the given pool's REWARD_TOKEN allocation point. Can only be called by the owner.\\n    // @param _asset Address of the ERC-20 token.\\n    // @param _allocPoint New AP of the pool.\\n    function set(address _asset, uint256 _allocPoint) external;\\n\\n    // @notice View function to see pending REWARD_TOKEN on frontend.\\n    // @param _asset Address of the ERC-20 token.\\n    // @param _user Address of user.\\n    // @return pending REWARD_TOKEN reward for a given user.\\n    function pendingSushi(address _asset, address _user) external view returns ( uint256 );\\n\\n    // @notice Update reward variables of the given pool.\\n    // @param asset Asset address\\n    // @return pool Returns the pool that was updated.\\n    function updatePool(address asset) external returns ( PoolInfo memory );\\n\\n    // @notice Update reward variables for all pools. Be careful of gas spending!\\n    function updateAllPools() external;\\n\\n    // @notice analogues to MCV2 Deposit method, but can be called only by trusted address\\n    // that is trusted to honestly calc how many \\\"virtual\\\" tokens have to be allocated for each user.\\n    function increaseAmount(address asset, address to, uint256 amountEDecimal, uint256 lockupPeriodSeconds) external;\\n\\n    // @notice Analogues to MVC2 Withdraw method, that can be called only by trusted address\\n    // that is trusted to honestly calc how many \\\"virtual\\\" tokens have to be allocated for each user.\\n    function decreaseAmount(address asset, address to, uint256 amountEDecimal) external;\\n\\n    function decreaseAmountRewardPenalty(address asset, address to, uint256 amountEDecimal) external view returns (uint256);\\n\\n    // @notice Harvest proceeds for transaction sender to `to`.\\n    // @param asset Asset address\\n    // @param to Receiver of REWARD_TOKEN rewards.\\n    function harvest(address asset, address to, uint256 newLockupPeriodSeconds) external;\\n\\n    // TODO: check for exploits\\n    // @notice Withdraw without caring about rewards. EMERGENCY ONLY.\\n    // @param asset Asset address\\n    // @param to The address of the user whose information will be cleared\\n    function resetAmount(address asset, address to) external;\\n\\n    //================================VIEW METHODS======================================\\n    function getPoolApr(address asset) external view  returns (uint256);\\n}\\n\",\"keccak256\":\"0xa7075395c4b8b13ee94a23cba80221696d7930e06cfe9625a883aada8312913d\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ISuAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @notice Access control for contracts\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n **/\\ninterface ISuAccessControl is IAccessControlUpgradeable {\\n    /**\\n     * @dev Transfers all roles from caller to owner, and revoke all roles from the caller.\\n     **/\\n    function transferOwnership(address newOwner) external;\\n}\\n\",\"keccak256\":\"0xb6d0ef5d6e78dcdfab03bddb214e69a6ed76dc08c9fc7d02543a770839d30935\",\"license\":\"MIT\"},\"contracts/interfaces/ISuLendingHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title SuLendingHelpers\\n * @notice Abstract contract that should be in SuManager. Here we have all view and ui-helpers methods.\\n * Here we don't change any values.\\n **/\\ninterface ISuLendingHelpers {\\n    /* ===================== ERRORS ===================== */\\n\\n    error InvalidArgs();\\n\\n    /* ==================== VIEW METHODS ==================== */\\n\\n    // @notice view function to check if position is liquidatable\\n    function isLiquidatablePosition(address asset, address owner) external view returns (bool);\\n\\n    // @notice Returns information about a liquidating position\\n    // @param asset The address of the main collateral token of a position\\n    // @param owner The owner of the collateral\\n    // @return liquidationBlock The block number when the liquidation was triggered\\n    // @return collateralEDecimal The amount of collateral\\n    // @return debtWithFeesE18 The amount of borrowed stablecoins with accumulated fee\\n    function getPositionInfo(address asset, address owner) external view returns (uint256 liquidationBlock, uint256 collateralEDecimal, uint256 debtWithFeesE18);\\n\\n    // @notice Returns information about a liquidating position\\n    // @param asset The address of the main collateral token of a position\\n    // @param owner The owner of the collateral\\n    // @return liquidationBlock The block number when the liquidation was triggered\\n    function getLiquidationBlock(address asset, address owner) external view returns (uint256);\\n\\n    // @notice USD value of collateral of owner\\n    function getCollateralUsdValueE18(address asset, address owner) external view returns (uint);\\n\\n    /* ==================== UI HELPERS ==================== */\\n\\n    // @notice Returns Loan-To-Value in e18\\n    function getLTVE18(address asset, address owner) external view returns (uint256);\\n\\n    // @notice Returns Available to Borrow\\n    // we have invariant: (collateralAmountEDecimal * collateralPriceE18 / 1e18) * initialCollateralRatioE18 <= debtE18\\n    // Has similar logic like in _ensurePositionCollateralization\\n    function getAvailableToBorrowE18(address asset, address owner) external view returns (uint256);\\n\\n    // @notice Returns Available to Withdraw\\n    // Has similar invariant like in getAvailableToBorrowE18\\n    function getAvailableToWithdrawE18(address asset, address owner) external view returns (uint256);\\n\\n    // @notice calculate liquidation price\\n    // @dev can be used inside of _isLiquidatablePosition\\n    function liquidationPriceE18(address asset, address owner) external view returns (uint256);\\n\\n    function liquidationPriceByAmount(\\n        address asset,\\n        address owner,\\n        uint256 additionalCollateralAmount,\\n        uint256 additionalStablecoinAmount\\n    ) external view returns (uint256);\\n\\n    // @notice view function to show utilization ratio\\n    // the same function can be used inside of _isLiquidatablePosition\\n    function utilizationRatioE18(address asset, address owner) external view returns (uint256);\\n}\",\"keccak256\":\"0x6069f69f927d5ce84d26ca12419f2ff13eda1744726f36bd41b647c01c669ccf\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ISuLendingLiquidation.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title SuLendingLiquidation\\n * @notice Abstract contract that should be in SuManager.\\n * Here we have all support mutable methods that will be used in SuLiquidation.\\n **/\\ninterface ISuLendingLiquidation {\\n    /* ===================== ERRORS ===================== */\\n\\n    error PositionIsSafe();\\n    error LiquidationIsTriggered();\\n    error LiquidationIsNotTriggered();\\n    error SmallCollateral();\\n\\n    /* ==================== MUTABLE METHODS ==================== */\\n\\n    // @notice Marks a position as to be liquidated\\n    // @param asset The address of the main collateral token of a position\\n    // @param owner The owner of a position\\n    /** @dev\\n    Emits LiquidationTriggered event.\\n    Sets the current block as liquidationBlock for the position.\\n    Can be triggered only once for the position.\\n    */\\n    function triggerLiquidation(address asset, address owner) external;\\n\\n    // @notice Liquidates a position, just cut debt and withdraw user collateral without asking StablePro\\n    // @dev Supports a partial liquidation\\n    // @param asset The address of the main collateral token of a position\\n    // @param owner The owner of the collateral\\n    // @param repayer The person who repaies by debt and transfers stablecoins to the foundation\\n    // @param stablecoinsToRepaymentE18 The amount of stablecoins which will be burned as a debt repaymention\\n    // @param assetAmountEDecimal The position's collateral which be recieved by repayer\\n    function liquidate(\\n        address asset,\\n        address owner,\\n        address repayer,\\n        uint256 stablecoinsToRepaymentE18,\\n        uint256 assetAmountEDecimal\\n    ) external;\\n\\n    // @notice Liquidates a position's collateral completely\\n    // @dev Supports a partial liquidation\\n    // @param asset The address of the main collateral token of a position\\n    // @param owner The owner of a position\\n    // @param repayer The person who repaies by debt and recieves a position's collateral\\n    // @param repaymentE18 The amount of repayment\\n    // @param excessAndFeeE18 The amount of stablecoins which transfer to foundation\\n    // @param assetAmountEDecimal The position's collateral which be recieved by repayer\\n    function liquidateAndRepay(\\n        address asset,\\n        address owner,\\n        address repayer,\\n        uint256 repaymentE18,\\n        uint256 excessAndFeeE18,\\n        uint256 assetAmountEDecimal\\n    ) external;\\n\\n    // @notice Finilizes the liquidation - here we pay fee and burn user StablePro\\n    // @param repayer The person who repaies by debt and transfers stablecoins to the foundation\\n    // @param stablecoinsToRepaymentE18 The amount of stablecoins which will be burned as a debt repayment\\n    // @param stablecoinsToFoundationE18 The amount of stablecoins which will be transfered to the foundation\\n    function payFeeAndBurn(address repayer, uint256 stablecoinsToRepaymentE18, uint256 stablecoinsToFoundationE18) external;\\n}\",\"keccak256\":\"0xd7f504937d06d77364d54b93506131eb01725d814880f7d6654108733e18c7d1\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ISuLiquidation.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/ISuLiquidationDiscount.sol\\\";\\n\\ninterface ISuLiquidation is ISuLiquidationDiscount {\\n    /* ==================== MUTABLE METHODS ==================== */\\n\\n    // @notice Swaps stablecoins from the whitelist to the collateral. After that swap collateral to stablecoin.\\n    // As the result of such arbitrage liquidation bot receive profit in stablecoins\\n    // @dev core params are the same as in swapStablecoinToAsset()\\n    // @param asset The address of the collateral token\\n    // @param owner The owner of the collateral\\n    // @param stablecoinToken The address of the stablecoin token\\n    // @param stablecoinAmountEDecimal The amount of stablecoins for the collateral buyout\\n    // @param shouldUserReceiveStablecoin - should contract transfer all received stablecoins to user.\\n    // We use this parameter as false for flashSwapStablecoinToAssetAndSwapBack()\\n    function swapStablecoinToAssetAndSwapBack(\\n        address asset,\\n        address owner,\\n        address stablecoinToken,\\n        uint256 stablecoinAmountEDecimal,\\n        bool flashLoanIsUsed\\n    ) external returns (uint256 profit);\\n\\n    // @notice Swaps stablecoins from the whitelist to the collateral. After that swap collateral to stablecoin.\\n    // All this is using flash loan, so liquidator don't need big amount of stablecoin to liquidate\\n    // As the result of such arbitrage liquidation bot receive profit in stablecoins.\\n    // @dev here we only call for flash loan {stablecoinAmountEDecimal} of {stablecoinToken} token\\n    // all code after we receive loan is in uniswapV3FlashCallback\\n    // params are the same as in swapStablecoinToAssetAndSwapBack() except last bool parameter\\n    function flashSwapStablecoinToAssetAndSwapBack(\\n        address asset,\\n        address owner,\\n        address stablecoinToken,\\n        uint256 stablecoinAmountEDecimal\\n    ) external;\\n\\n    // @notice We need that to catch when flash loan is done\\n    function uniswapV3FlashCallback(uint fee0, uint _fee1, bytes calldata data) external;\\n\\n    // @notice Swaps StablePro to an asset which is liquidating.\\n    // Does sequentially the same as swapStablecoinToAsset() and swapStableProToStablecoin(),\\n    // but without any third-party stablecoins\\n    // @param asset The address of the collateral token\\n    // @param owner The owner of the collateral\\n    // @param stablecoinAmountE18 The amount of stablecoins for the collateral buyout\\n    function swapStableProToAsset(\\n        address asset,\\n        address owner,\\n        uint256 stablecoinAmountE18\\n    ) external;\\n\\n    // @notice Swaps StablePro to stablecoins from the whitelist\\n    // The contract transfers stablecoins to the liquidator.\\n    // At the same moment the liquidator burns and transfers to the foundation the amount of his StablePro.\\n    // @dev This is a second step of two. It's a finilization of liquidation\\n    // @param stablecoinToken The address of the stablecoin token\\n    // @param stablecoinAmountEDecimal The amount of stablecoins\\n    function swapStableProToStablecoin(address stablecoinToken, uint256 stablecoinAmountEDecimal) external;\\n\\n    /* ==================== VIEW METHODS ==================== */\\n\\n    // @notice Calculates a liquidation discount. Depends on a block number\\n    function calculateLiquidationDiscount(address asset, address owner) external view returns (uint256);\\n}\",\"keccak256\":\"0xbf71214dda6edce54bb0cc9b55e72df344d0c218e84e4bbe34cf7ff6f54d093e\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ISuLiquidationDiscount.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\nimport \\\"../liquidator/SuLiquidationStructs.sol\\\";\\n\\ninterface ISuLiquidationDiscount {\\n    // @notice Sets percentages of discounts for different asset and discount types(aggressive/middle/conservative)\\n    //     We can set different discounts for the first block and for other blocks per minute\\n    function setDiscountInfo(\\n        address asset,\\n        DiscountType discountType,\\n        DiscountInfo calldata discountInfo\\n    ) external;\\n\\n    // @notice Returns information about discount percentages which are used for discount calculation\\n    function getDiscountInfo(\\n        address asset,\\n        DiscountType discountType\\n    ) external view returns (DiscountInfo memory discountInfo);\\n    \\n    // @notice Calculates the liquidation discount in percents by passed blocks.\\n    //     We have three discount types(see SuLiquidationStruct.sol)\\n    function calculateDiscountE18(\\n        address asset,\\n        DiscountType discountType,\\n        uint256 liquidationBlock\\n    ) external view returns (uint256);\\n}\",\"keccak256\":\"0x9dd08d3984df991966643a7ce59b5936c3308b676a0aba05cba750b18c2a70fd\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ISuManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ISuManagerParameters.sol\\\";\\nimport \\\"./ISuLendingHelpers.sol\\\";\\nimport \\\"./ISuLendingLiquidation.sol\\\";\\n\\n/**\\n * @title SuManager\\n * @notice Manager mighty over the vault. Allows users to interact with their CDPs.\\n * User does only interact with manager as proxy to the vault.\\n **/\\ninterface ISuManager is ISuManagerParameters, ISuLendingHelpers, ISuLendingLiquidation {\\n    /* ===================== EVENTS ===================== */\\n    // @notice Even triggered when user deposit collateral\\n    event Join(address indexed asset, address indexed owner, uint256 main, uint256 stablecoin);\\n\\n    // @notice Event triggered when user withdraws collateral\\n    event Exit(address indexed asset, address indexed owner, uint256 main, uint256 stablecoin);\\n\\n    /* ===================== ERRORS ===================== */\\n    error Restricted();\\n    error UselessTransaction();\\n    error UnsupportedDecimals();\\n    error UnderCollateralized();\\n\\n    /* ==================== METHODS ==================== */\\n    // @notice this function is called by user to deposit collateral and receive stablecoin\\n    // @dev before calling this function user has to approve the Vault to take his collateral\\n    function join(address asset, uint256 assetAmountEDecimal, uint256 stablecoinAmountE18, uint256 lockupPeriodSeconds) external;\\n\\n    // @notice user can pay back the stablecoin and take his collateral\\n    // instead of passing both assetAmount and stablecoinAmount\\n    // better user just to pass one of them\\n    // also pass preferred rate and maybe acceptable diff percent\\n    // that's the purpose of passing both to protect user from rate fluctuations\\n    function exit(address asset, uint256 assetAmountEDecimal, uint256 stablecoinAmountE18) external;\\n}\\n\",\"keccak256\":\"0x5324867e01445af82714f7bca584ae3d744446ad3490ad7e5f638eb2ddb7865f\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ISuManagerParameters.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\ninterface ISuManagerParameters {\\n    /* ====================== VARS ====================== */\\n    // @notice When ratio (debt / usdValue) goes below it user can't withdraw or borrow.\\n    // Should be >= liquidationRatioE18. 1e18 = 100% ratio. Should be less than 1e18.\\n    // Is used to calculate available to withdraw and borrow.\\n    // For example, user can borrow <= usdValue * initialCollateralRatio\\n    function initialCollateralRatioE18 (address asset) external view returns ( uint256 );\\n\\n    // @notice Ratio when cdp can be liquidated.\\n    // 1e18 = 100% ratio. Should be less than 1e18.\\n    // Is used in isLiquidatablePosition(). It's true when debt / usdValue >= liquidationRatio\\n    function liquidationRatioE18 (address asset) external view returns ( uint256 );\\n\\n    // @notice The minimum value of collateral in USD which allowed to be left after partial closure\\n    function minCollateralInUsdE18 ( ) external view returns ( uint256 );\\n\\n    /* ===================== ERRORS ===================== */\\n    error BadLiquidationRatioValue();\\n    error BadInitialCollateralRatioValue();\\n\\n    /* ==================== METHODS ==================== */\\n    function setCollateral (\\n        address asset,\\n        uint256 stabilityFeeValueE18,\\n        uint256 initialCollateralRatioValueE18,\\n        uint256 liquidationRatioValueE18,\\n        uint256 stablecoinLimitE18,\\n        uint256 minCollateralInUsdValueE18\\n    ) external;\\n\\n    /**\\n     * @notice Only manager is able to call this function\\n     * @dev Sets the initial collateral ratio\\n     * @param asset The address of the main collateral token\\n     * @param newValueE18 The collateralization ratio (1e18 = 100%)\\n     **/\\n    function setInitialCollateralRatioE18 ( address asset, uint256 newValueE18 ) external;\\n\\n    /**\\n     * @notice Only manager is able to call this function\\n     * @dev Sets the liquidation ratio\\n     * @param asset The address of the main collateral token\\n     * @param newValueE18 The liquidation ratio (1e18 = 100%).\\n     **/\\n    function setLiquidationRatioE18 ( address asset, uint256 newValueE18 ) external;\\n\\n    /**\\n     * @notice Only manager is able to call this function\\n     * @dev Sets a minimum value of collateral in USD which allowed to be left after partial closure\\n     * @param newValueE18 The minimum value of collateral in USD\\n     */\\n    function setMinCollateralInUsdE18 ( uint256 newValueE18 ) external;\\n}\\n\",\"keccak256\":\"0x0a2994bf3992a14977f9bae9ae881f9cbc1a4e58f1dd2752751f639a5ebab0de\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ISuOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\n// solhint-disable compiler-version\\npragma solidity >=0.7.6;\\n\\ninterface ISuOracle {\\n    /**\\n     * @notice WARNING! Read this description very carefully!\\n     *      function getFiatPrice1e18(address asset) returns (uint256) that:\\n     *          basicAmountOfAsset * getFiatPrice1e18(asset) / 1e18 === $$ * 1e18\\n     *      in other words, it doesn't matter what's the erc20.decimals is,\\n     *      you just multiply token balance in basic units on value from oracle and get dollar amount multiplied on 1e18.\\n     *\\n     * different assets have different deviation threshold (errors)\\n     *      for wBTC it's <= 0.5%, read more https://data.chain.link/ethereum/mainnet/crypto-usd/btc-usd\\n     *      for other asset is can be larger based on particular oracle implementation.\\n     *\\n     * examples:\\n     *       market price of btc = $30k,\\n     *       for 0.1 wBTC the unit256 amount is 0.1 * 1e18\\n     *       0.1 * 1e18 * (price1e18 / 1e18) == $3000 == uint256(3000*1e18)\\n     *       => price1e18 = 30000 * 1e18;\\n     *\\n     *       market price of usdt = $0.97,\\n     *       for 1 usdt uint256 = 1 * 1e6\\n     *       so 1*1e6 * price1e18 / 1e18 == $0.97 == uint256(0.97*1e18)\\n     *       => 1*1e6 * (price1e18 / 1e18) / (0.97*1e18)   = 1\\n     *       =>  price1e18 = 0.97 * (1e18/1e6) * 1e18\\n     *\\n     *      assume market price of wBTC = $31,503.77, oracle error = $158\\n     *\\n     *       case #1: small amount of wBTC\\n     *           we have 0.0,000,001 wBTC that is worth v = $0.00315 \\u00b1 $0.00001 = 0.00315*1e18 = 315*1e13 \\u00b1 1*1e13\\n     *           actual balance on the asset b = wBTC.balanceOf() =  0.0000001*1e18 = 1e11\\n     *           oracle should return or = oracle.getFiatPrice1e18(wBTC) <=>\\n     *           <=> b*or = v => v/b = 315*1e13 / 1e11 = 315*1e2 \\u00b1 1e2\\n     *           error = or.error * b = 1e2 * 1e11 = 1e13 => 1e13/1e18 usd = 1e-5 = 0.00001 usd\\n     *\\n     *       case #2: large amount of wBTC\\n     *           v = 2,000,000 wBTC = $31,503.77 * 2m \\u00b1 158*2m = $63,007,540,000 \\u00b1 $316,000,000 = 63,007*1e24 \\u00b1 316*1e24\\n     *           for calc convenience we increase error on 0.05 and have v = 63,000*24 \\u00b1 300*1e24 = (630 \\u00b1 3)*1e26\\n     *           b = 2*1e6 * 1e18 = 2*1e24\\n     *           or = v/b = (630 \\u00b1 3)*1e26 / 2*1e24 = 315*1e2 \\u00b1 1.5*1e2\\n     *           error = or.error * b = 1.5*100 * 2*1e24 = 3*1e26 = 3*1e8*1e18 = $300,000,000 ~ $316,000,000\\n     *\\n     *      assume the market price of USDT = $0.97 \\u00b1 $0.00485,\\n     *\\n     *       case #3: little amount of USDT\\n     *           v = USDT amount 0.005 = 0.005*(0.97 \\u00b1 0.00485) = 0.00485*1e18 \\u00b1 0.00002425*1e18 = 485*1e13 \\u00b1 3*1e13\\n     *           we rounded error up on (3000-2425)/2425 ~= +24% for calculation convenience.\\n     *           b = USDT.balanceOf() = 0.005*1e6 = 5*1e3\\n     *           b*or = v => or = v/b = (485*1e13 \\u00b1 3*1e13) / 5*1e3 = 970*1e9 \\u00b1 6*1e9\\n     *           error = 6*1e9 * 5*1e3 / 1e18 = 30*1e12/1e18 = 3*1e-5 = $0,00005\\n     *\\n     *       case #4: lot of USDT\\n     *           v = we have 100,000,000,000 USDT = $97B = 97*1e9*1e18 \\u00b1 0.5*1e9*1e18\\n     *           b = USDT.balanceOf() = 1e11*1e6 = 1e17\\n     *           or = v/b = (97*1e9*1e18 \\u00b1 0.5*1e9*1e18) / 1e17 = 970*1e9 \\u00b1 5*1e9\\n     *           error = 5*1e9 * 1e17 = 5*1e26 = 0.5 * 1e8*1e18\\n     *\\n     * @param asset - address of erc20 token contract\\n     * @return usdPrice1e18 such that asset.balanceOf() * getFiatPrice1e18(asset) / 1e18 == $$ * 1e18\\n     **/\\n    function getFiatPrice1e18(address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2344646663c2e9905f7a117ddbb362744f3499589b5c1b86ee992cbfb063612f\",\"license\":\"UNLICENSED\"},\"contracts/liquidator/SuLiquidation.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n/*\\n  Copyright 2022 StableUnit: Artem Belozerov\\n*/\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\nimport \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\\\";\\nimport \\\"../oracles/vendor/PoolAddress.sol\\\";\\nimport \\\"../interfaces/ISuLiquidation.sol\\\";\\nimport \\\"../interfaces/ISuOracle.sol\\\";\\nimport \\\"../interfaces/IRewardChefV2.sol\\\";\\nimport \\\"../interfaces/ISuManager.sol\\\";\\nimport \\\"./SuLiquidationDiscount.sol\\\";\\nimport \\\"./SuLiquidationStructs.sol\\\";\\n\\ncontract SuLiquidation is SuLiquidationDiscount, ISuLiquidation {\\n    error ZeroAddress();\\n    error NotEnoughAmount();\\n    error NotEnoughDeferredAmount();\\n    error TooMuchAmount();\\n\\n    // solhint-disable var-name-mixedcase\\n    ISuManager internal SU_MANAGER;\\n    ISuOracle internal SU_ORACLE;\\n    IRewardChefV2 internal SU_REWARD;\\n    ISwapRouter internal SWAP_ROUTER;\\n    address internal UNISWAP_FACTORY;\\n    // need to have mapping, because pools can have different fees?\\n    uint24 public POOL_FEE;\\n    // solhint-enable var-name-mixedcase\\n\\n    // asset => structure of deferred stablecoin amount:\\n    // - liquidationBlock - the block number when the liquidation was triggered.\\n    // - toRepaymentE18 - amount of stablecoins which will be burned as debt repayment.\\n    // - toFoundationE18 - amount of stablecoins which will be transfered to the foundation\\n    //      as an excess of stablecoins over debt repayment\\n    mapping(address => DeferredStablecoinAmount) internal _deferredStablecoinAmounts;\\n\\n    function initialize(\\n        address _authControl,\\n        address _suManager,\\n        address _suOracle,\\n        address _suReward,\\n        address _swapRouter,\\n        address _uniswapFactory\\n    ) public initializer {\\n        SuLiquidationDiscount.init(_authControl);\\n\\n        if (_suManager == address(0) || _suOracle == address(0)) revert ZeroAddress();\\n\\n        SU_MANAGER = ISuManager(_suManager);\\n        SU_ORACLE = ISuOracle(_suOracle);\\n        SU_REWARD = IRewardChefV2(_suReward);\\n        SWAP_ROUTER = ISwapRouter(_swapRouter);\\n        UNISWAP_FACTORY = _uniswapFactory;\\n        POOL_FEE = 3000;\\n    }\\n\\n    // @notice Calculates a liquidation discount\\n    // @param asset The address of the collateral token\\n    // @param owner The owner of the collateral\\n    function calculateLiquidationDiscount(\\n        address asset,\\n        address owner\\n    ) external view returns (uint256) {\\n\\n        // get the block number when the liquidation was triggered\\n        uint256 liquidationBlock = SU_MANAGER.getLiquidationBlock(asset, owner);\\n\\n        // discount depends on a block number\\n        return _getAggressiveOrMiddleDiscountE18(asset, owner, liquidationBlock);\\n    }\\n\\n    // @notice Swaps stablecoins from the whitelist to an asset which is liquidating\\n    //     The liquidator specifies a position(asset, owner) which is liquidating\\n    //\\n    //     The liquidator specifies an amount of stablecoins which he wants to swap to an asset.\\n    //     The amount of asset is determined from current price and liquidation discount.\\n    //     Also, the liquidator specifies the minimum amount of asset which he agrees to recieve.\\n    //\\n    //     The list of available stablecoins is restricted by whitelist.\\n    //\\n    //     The liquidator transfers his stablecoins to the address of this contract.\\n    //     Further(see swapstableProToStablecoin()) it can be swapped to StablePro.\\n    //     At the same moment, the SuVault contract decreases the amount of debt by position and\\n    //     withdraws the collateral to the liquidator\\n    // @dev This is a core function of the first step of two\\n    // @param asset The address of the collateral token\\n    // @param owner The owner of the collateral\\n    // @param stablecoinToken The address of the stablecoin token\\n    // @param stablecoinAmountEDecimal The amount of stablecoins for the collateral buyout\\n    // @param isUserSendingStablecoins Should user send stablecoins or just this contract?\\n    function swapStablecoinToAsset(\\n        address asset,\\n        address owner,\\n        address stablecoinToken,\\n        uint256 stablecoinAmountEDecimal,\\n        bool isUserSendingStablecoins\\n    ) internal returns (uint256, uint256) {\\n        // TODO: whitelist\\n\\n        // calculate the price in usd\\n        uint256 usdPriceOfStablecoinE18 = SU_ORACLE.getFiatPrice1e18(stablecoinToken);\\n        uint256 stablecoinAmountE18 = usdPriceOfStablecoinE18 * stablecoinAmountEDecimal / 1e18;\\n\\n        // prepare parameters of the liquidation\\n        (\\n            uint256 assetAmountE18,\\n            uint256 stableProToRepaymentE18,\\n            uint256 stableProToFoundationE18\\n        ) = _prepareLiquidationParams(asset, owner, stablecoinAmountE18);\\n\\n        // store the stablecoins of the liquidator to this contract\\n        uint256 paidStablecoinAmountEDecimal = (stableProToRepaymentE18 + stableProToFoundationE18) * 1e18 / usdPriceOfStablecoinE18;\\n        if (isUserSendingStablecoins) {\\n            SafeERC20Upgradeable.safeTransferFrom(\\n                IERC20Upgradeable(stablecoinToken),\\n                msg.sender,\\n                address(this),\\n                paidStablecoinAmountEDecimal\\n            );\\n        }\\n\\n        // get the block number when the liquidation was triggered\\n        // it will be needed to calculate the conservative discount\\n        // TODO: replace to _deferStablecoinsE18()\\n        uint256 liquidationBlock = SU_MANAGER.getLiquidationBlock(asset, owner);\\n\\n        // save the stablecoin amounts for the future payments\\n        // when another actor will swap StablePro to the stablecoins(second step)\\n        _deferStablecoinsE18(\\n            stablecoinToken,\\n            liquidationBlock,\\n            stableProToRepaymentE18,\\n            stableProToFoundationE18\\n        );\\n\\n        // cut the part of debt repayment and withdraw the part of collateral to the liquidator\\n        SU_MANAGER.liquidate(asset, owner, isUserSendingStablecoins ? msg.sender : address(this), stableProToRepaymentE18, assetAmountE18);\\n\\n        return (paidStablecoinAmountEDecimal, assetAmountE18);\\n    }\\n\\n    // @notice Returns parameters for future liquidation\\n    // @param asset The address of the collateral token\\n    // @param owner The owner of the collateral\\n    // @param stablecoinAmountE18 The amount of stablecoins for the collateral buyout\\n    function _prepareLiquidationParams(\\n        address asset,\\n        address owner,\\n        uint256 stablecoinAmountE18\\n    ) internal view returns (uint256, uint256, uint256) {\\n        // get CDP info from the vault\\n        // TODO: remove liquidationBlock from response\\n        (\\n            uint256 liquidationBlock,\\n            uint256 collateralEDecimal,\\n            uint256 debtWithFeesE18\\n        ) = SU_MANAGER.getPositionInfo(asset, owner);\\n\\n        // discount depends on a block number\\n        uint256 discountE18 = _getAggressiveOrMiddleDiscountE18(asset, owner, liquidationBlock);\\n\\n        // calculate the price of asset in USD\\n        uint256 usdPriceOfAssetE18 = SU_ORACLE.getFiatPrice1e18(asset);\\n\\n        // calculate the amount of asset which will be withdrawn to the liquidator\\n        (uint256 assetAmountEDecimal, uint256 discountedStablecoinAmountE18) = _calculateLiquidationAssetAmount(\\n            usdPriceOfAssetE18,\\n            stablecoinAmountE18,\\n            collateralEDecimal,\\n            discountE18\\n        );\\n\\n        // an excess amount will be transfered to the foundation\\n        // the rest - will be burned as the debt repayment\\n        (uint256 repaymentE18, uint256 excessE18) = _calculateLiquidationStablecoinAmount(\\n            debtWithFeesE18,\\n            discountedStablecoinAmountE18\\n        );\\n        return (assetAmountEDecimal, repaymentE18, excessE18);\\n    }\\n\\n    // @notice Calculates the amount of asset which will be liquidated\\n    // @param usdPriceOfAssetE18 The price of collateral in worth of stablecoins\\n    // @param stablecoinAmountE18 The amount of stablecoins for the collateral buyout\\n    // @param collateralEDecimal The amount of collateral\\n    // @param discountE18 The percentage of discount for a liquidator\\n    function _calculateLiquidationAssetAmount(\\n        uint256 usdPriceOfAssetE18,\\n        uint256 stablecoinAmountE18,\\n        uint256 collateralEDecimal,\\n        uint256 discountE18\\n    ) internal view returns (uint256, uint256) {\\n\\n        // calculate value of collateral\\n        uint256 collateralValueE18 = usdPriceOfAssetE18 * collateralEDecimal / 1e18;\\n\\n        // apply the discount. the amount of stablecoins could be decreased after the discount applying.\\n        uint256 stablecoinAmountWithBonusE18;\\n        (stablecoinAmountE18, stablecoinAmountWithBonusE18) = _applyDiscount(\\n            collateralValueE18,\\n            stablecoinAmountE18,\\n            discountE18\\n        );\\n\\n        // calculate an amount of asset which a liquidator could take for his stablecoins\\n        // including bonus\\n        uint256 assetAmountEDecimal = stablecoinAmountWithBonusE18 * 1e18 / usdPriceOfAssetE18;\\n        // for (stablecoinAmountE18) StablePro we will receive (assetAmountEDecimal) COLLATERAL\\n        return (assetAmountEDecimal, stablecoinAmountE18);\\n    }\\n\\n    // @notice Returns the bonus and the amount of stablecoins after applying the discount\\n    // @param collateralValueE18 The amount of collateral in worth of the stablecoins\\n    // @param stablecoinAmountE18 The amount of stablecoins for the collateral buyout\\n    // @param discountE18 The percentage of discount for a liquidator\\n    function _applyDiscount(\\n        uint256 collateralValueE18,\\n        uint256 stablecoinAmountE18,\\n        uint256 discountE18\\n    ) internal pure returns (\\n        uint256 stablecoinAmountWithoutBonusE18,\\n        uint256 stablecoinAmountWithBonusE18\\n    ) {\\n        stablecoinAmountWithBonusE18 = stablecoinAmountE18 * (1e18 + discountE18) / 1e18;\\n\\n        // decrease the amount of stablecoins which will be withdrawn from the liquidator\\n        // if the total amount(with bonus) more then the collateral value\\n        if (stablecoinAmountWithBonusE18 > collateralValueE18) {\\n            stablecoinAmountWithBonusE18 = collateralValueE18;\\n            stablecoinAmountWithoutBonusE18 = collateralValueE18 * 1e18 / (1e18 + discountE18);\\n        } else {\\n            stablecoinAmountWithoutBonusE18 = stablecoinAmountE18;\\n        }\\n    }\\n\\n    // @notice Calculates what the amount of stablecoins goes to repay the debt\\n    // @param debtE18 The amount of borrowed stablecoins\\n    // @param amountE18 The amount of the sender's stablecoins\\n    function _calculateLiquidationStablecoinAmount(\\n        uint256 debtE18,\\n        uint256 amountE18\\n    ) internal pure returns (\\n        uint256 repaymentE18,\\n        uint256 excessE18\\n    ) {\\n        if (amountE18 > debtE18) {\\n            excessE18 = amountE18 - debtE18;\\n            repaymentE18 = debtE18;\\n        } else {\\n            repaymentE18 = amountE18;\\n        }\\n    }\\n\\n    // @notice Stores stablecoins for the future payments\\n    // @param stablecoinToken The address of the stablecoin token\\n    // @param liquidationBlock The block number when the liquidation was triggered\\n    // @param toRepaymentE18 The amount of stablecoins which will be burned as a debt repayment\\n    // @param toFoundationE18 The amount of stablecoins which will be transfered to the foundation\\n    //     (fees and the excess of stablecoins over the debt amount)\\n    function _deferStablecoinsE18(\\n        address stablecoinToken,\\n        uint256 liquidationBlock,\\n        uint256 toRepaymentE18,\\n        uint256 toFoundationE18\\n    ) internal {\\n        DeferredStablecoinAmount storage deferredAmount = _deferredStablecoinAmounts[stablecoinToken];\\n        deferredAmount.toRepaymentE18 += toRepaymentE18;\\n        deferredAmount.toFoundationE18 += toFoundationE18;\\n        if (deferredAmount.liquidationBlock == 0) {\\n            deferredAmount.liquidationBlock = liquidationBlock;\\n        }\\n    }\\n\\n    function _getAggressiveOrMiddleDiscountE18(\\n        address asset,\\n        address owner,\\n        uint256 liquidationBlock\\n    ) internal view returns (uint256) {\\n        DiscountType discountType = (owner == address(SU_REWARD)) ? DiscountType.middle : DiscountType.aggressive;\\n        return calculateDiscountE18(asset, discountType, liquidationBlock);\\n    }\\n\\n    function swapStableProToAsset(\\n        address asset,\\n        address owner,\\n        uint256 stablecoinAmountE18\\n    ) external {\\n\\n        // prepare parameters of the liquidation\\n        (\\n        uint256 assetAmountE18,\\n        uint256 stablecoinsToRepaymentE18,\\n        uint256 stablecoinsToFoundationE18\\n        ) = _prepareLiquidationParams(asset, owner, stablecoinAmountE18);\\n\\n        // repay the part of debt and withdraw the part of collateral to the liquidator\\n        SU_MANAGER.liquidateAndRepay(\\n            asset,\\n            owner,\\n            msg.sender,\\n            stablecoinsToRepaymentE18,\\n            stablecoinsToFoundationE18,\\n            assetAmountE18\\n        );\\n    }\\n\\n    function swapStableProToStablecoin(\\n        address stablecoinToken,\\n        uint256 stablecoinAmountEDecimal\\n    ) external {\\n        // TODO: whitelist\\n\\n        // calculate the prices in usd\\n        uint256 stablecoinAmountE18 = SU_ORACLE.getFiatPrice1e18(stablecoinToken) * stablecoinAmountEDecimal / 1e18;\\n\\n        // reduce an amount of deferred stablecoins by \\\"stablecoinAmountEDecimal\\\"\\n        (uint256 stableProToRepaymentE18, uint256 stableProToFoundationE18) = _popDeferredStablecoinsE18(\\n            stablecoinToken,\\n            stablecoinAmountE18\\n        );\\n\\n        SU_MANAGER.payFeeAndBurn(msg.sender, stableProToRepaymentE18, stableProToFoundationE18);\\n\\n        // the contract transfers the stablecoins to the sender\\n        SafeERC20Upgradeable.safeTransfer(IERC20Upgradeable(stablecoinToken), msg.sender, stablecoinAmountEDecimal);\\n    }\\n\\n    // @notice Returns deferred stablecoins for burning and transferring to the foundation\\n    // @param stablecoinToken The address of the stablecoin token\\n    // @param amountE18 The total number of stablecoins which will be returned\\n    // @return toRepaymentE18 The amount of stablecoins which will be burned as a debt repayment\\n    // @return toFoundationE18 The amount of stablecoins which will be transfered to the foundation\\n    function _popDeferredStablecoinsE18(\\n        address stablecoinToken,\\n        uint256 amountE18\\n    ) internal returns (uint256 toRepaymentE18, uint256 toFoundationE18) {\\n        if (amountE18 == 0) revert NotEnoughAmount();\\n\\n        DeferredStablecoinAmount storage deferredAmount = _deferredStablecoinAmounts[stablecoinToken];\\n        if (deferredAmount.liquidationBlock == 0) revert NotEnoughDeferredAmount();\\n\\n        // calculate conservative discount\\n        uint256 discountE18 = calculateDiscountE18(\\n            stablecoinToken,\\n            DiscountType.conservative,\\n            deferredAmount.liquidationBlock\\n        );\\n\\n        (toRepaymentE18, toFoundationE18) = _calculateProportion(deferredAmount, amountE18);\\n\\n        // decrease an amount of deferred stablecoins\\n        if (toRepaymentE18 != 0) {\\n            deferredAmount.toRepaymentE18 -= toRepaymentE18;\\n        }\\n        if (toFoundationE18 != 0) {\\n            deferredAmount.toFoundationE18 -= toFoundationE18;\\n        }\\n\\n        if (deferredAmount.toRepaymentE18 == 0 && deferredAmount.toFoundationE18 == 0) {\\n            delete _deferredStablecoinAmounts[stablecoinToken];\\n        }\\n\\n        // apply the conservative discount. it reduces a payment in StablePro which pays the sender\\n        toRepaymentE18 = toRepaymentE18 * 1e18 / (1e18 + discountE18);\\n        toFoundationE18 = toFoundationE18 * 1e18 / (1e18 + discountE18);\\n    }\\n\\n    function _calculateProportion(\\n        DeferredStablecoinAmount memory deferredAmount,\\n        uint256 amountE18\\n    ) internal pure returns (uint256 toRepaymentE18, uint256 toFoundationE18) {\\n        // Firstly we try to empty the \\\"toRepaymentE18\\\"\\n        // TODO: should find out the correct proportion between toRepayment and toFoundation\\n\\n        if (amountE18 <= deferredAmount.toRepaymentE18) {\\n            toRepaymentE18 = amountE18;\\n        } else {\\n            amountE18 -= deferredAmount.toRepaymentE18;\\n            if (amountE18 > deferredAmount.toFoundationE18) revert TooMuchAmount();\\n\\n            toRepaymentE18 = deferredAmount.toRepaymentE18;\\n            toFoundationE18 = amountE18;\\n        }\\n    }\\n\\n    function swapStablecoinToAssetAndSwapBack(\\n        address asset,\\n        address owner,\\n        address stablecoinToken,\\n        uint256 stablecoinAmountEDecimal,\\n        bool flashLoanIsUsed\\n    ) public returns (uint256 profit) {\\n        (uint256 stablecoinPaid, uint256 assetReceived) = swapStablecoinToAsset(\\n            asset,\\n            owner,\\n            stablecoinToken,\\n            stablecoinAmountEDecimal,\\n            !flashLoanIsUsed\\n        );\\n\\n        // We should receive at least (stablecoinPaid) {stablecoinToken} to get some profit (we don't count fee)\\n        ISwapRouter.ExactInputSingleParams memory params = ISwapRouter.ExactInputSingleParams({\\n            tokenIn: asset,\\n            tokenOut: stablecoinToken,\\n            fee: POOL_FEE,\\n            recipient: flashLoanIsUsed ? address(this) : msg.sender,\\n            deadline: block.timestamp,\\n            amountIn: assetReceived,\\n            amountOutMinimum: stablecoinPaid,\\n            sqrtPriceLimitX96: 0\\n        });\\n\\n        // We need to approve {asset} to be used in Swap Router\\n        TransferHelper.safeApprove(asset, address(SWAP_ROUTER), assetReceived);\\n\\n        if (!flashLoanIsUsed) {\\n            // Transfer the specified amount of {asset} to this contract to swap it in the next line\\n            TransferHelper.safeTransferFrom(asset, msg.sender, address(this), assetReceived);\\n        }\\n\\n        // swap {asset} to {stablecoinToken}\\n        uint256 amountOut = SWAP_ROUTER.exactInputSingle(params);\\n\\n        if (!flashLoanIsUsed) {\\n            // send swapped {stablecoinToken} to liquidator\\n            TransferHelper.safeApprove(stablecoinToken, address(this), amountOut);\\n            TransferHelper.safeTransferFrom(stablecoinToken, address(this), msg.sender, amountOut);\\n        }\\n\\n        // we know, that we receive at least stablecoinPaid, because of params.amountOutMinimum\\n        profit = amountOut - stablecoinPaid;\\n    }\\n\\n    function getStablecoinPool(address stablecoin) internal view returns (IUniswapV3Pool pool) {\\n        address WETH = IPeripheryImmutableState(address(SWAP_ROUTER)).WETH9();\\n        pool = IUniswapV3Pool(PoolAddress.computeAddress(UNISWAP_FACTORY, PoolAddress.getPoolKey(stablecoin, WETH, POOL_FEE)));\\n    }\\n\\n    function flashSwapStablecoinToAssetAndSwapBack(\\n        address asset,\\n        address owner,\\n        address stablecoinToken,\\n        uint256 stablecoinAmountEDecimal\\n    ) public {\\n        IUniswapV3Pool pool = getStablecoinPool(stablecoinToken);\\n        bytes memory data = abi.encode(FlashCallbackData({\\n            asset: asset,\\n            owner: owner,\\n            stablecoinToken: stablecoinToken,\\n            stablecoinAmountEDecimal: stablecoinAmountEDecimal,\\n            caller: msg.sender\\n        }));\\n        IUniswapV3Pool(pool).flash(address(this), stablecoinAmountEDecimal, 0, data);\\n    }\\n\\n    function uniswapV3FlashCallback(uint fee0, uint _fee1, bytes calldata data) external {\\n        FlashCallbackData memory decoded = abi.decode(data, (FlashCallbackData));\\n\\n        IUniswapV3Pool pool = getStablecoinPool(decoded.stablecoinToken);\\n        require(msg.sender == address(pool), \\\"not authorized\\\");\\n\\n        uint256 swapProfit = swapStablecoinToAssetAndSwapBack(\\n            decoded.asset,\\n            decoded.owner,\\n            decoded.stablecoinToken,\\n            decoded.stablecoinAmountEDecimal,\\n            true\\n        );\\n\\n        require(swapProfit > fee0, \\\"Liquidation is not profitable\\\");\\n\\n        // Repay borrow and send swapped {stablecoinToken} minus fee from flash-loan to liquidator\\n        if (fee0 > 0) {\\n            uint256 stablecoinToRepay = decoded.stablecoinAmountEDecimal + fee0;\\n            uint256 userProfit = swapProfit - fee0;\\n\\n            TransferHelper.safeApprove(decoded.stablecoinToken, address(this), stablecoinToRepay + userProfit);\\n\\n            TransferHelper.safeTransferFrom(decoded.stablecoinToken, address(this), address(pool), stablecoinToRepay);\\n            TransferHelper.safeTransferFrom(decoded.stablecoinToken, address(this), decoded.caller, userProfit);\\n        } else {\\n            TransferHelper.safeApprove(decoded.stablecoinToken, address(this), decoded.stablecoinAmountEDecimal + swapProfit);\\n\\n            TransferHelper.safeTransferFrom(decoded.stablecoinToken, address(this), address(pool), decoded.stablecoinAmountEDecimal);\\n            TransferHelper.safeTransferFrom(decoded.stablecoinToken, address(this), decoded.caller, swapProfit);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf7e73b5e4657388b9e182d08bee18663486d854d224b100fe969f112d5643312\",\"license\":\"BSL 1.1\"},\"contracts/liquidator/SuLiquidationConstants.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nlibrary SuLiquidationConstants {\\n    uint256 internal constant AGGRESSIVE_DISCOUNT_LIMIT_PERCENT_E18 = 5e16;\\n    uint256 internal constant ONE_HUNDRED_PERCENT_E18 = 1e18;\\n}\",\"keccak256\":\"0x163d9f9d922d978a3a7bc69baeae343765e143c20879433dbc1373f5d934f43f\",\"license\":\"UNLICENSED\"},\"contracts/liquidator/SuLiquidationDiscount.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"../access-control/SuAuthenticated.sol\\\";\\nimport \\\"../interfaces/ISuLiquidationDiscount.sol\\\";\\nimport \\\"./SuLiquidationConstants.sol\\\";\\nimport \\\"./SuLiquidationStructs.sol\\\";\\n\\ncontract SuLiquidationDiscount is ISuLiquidationDiscount, SuAuthenticated {\\n    error IncorrectDiscount();\\n\\n    // asset => discountType(aggressive, middle, conservative) => discount info:\\n    //    - percent of discount at the first block\\n    //    - increment of discount per block in percentages\\n    mapping(address => mapping(DiscountType => DiscountInfo)) internal _discountsInfo;\\n\\n    function init(address _authControl) public initializer {\\n        __SuAuthenticated_init(_authControl);\\n    }\\n\\n    // @notice Only owner is able to call this function\\n    // @dev Sets the liquidation discount\\n    // @param asset The address of the asset token\\n    // @param discountType Determines how aggressively the lending module offers a discount\\n    // @param discountInfo Determines discount percentages depending on a block number\\n    function setDiscountInfo(\\n        address asset,\\n        DiscountType discountType,\\n        DiscountInfo calldata discountInfo\\n    ) external onlyOwner {\\n        // check that discount percentage less than a limit(e.g. 100%)\\n        _verifyDiscountInfo(discountType, discountInfo);\\n        _discountsInfo[asset][discountType] = discountInfo;\\n    }\\n\\n    // @notice Returns information about discount percentages depending on a block number\\n    // @param asset The address of the asset token\\n    // @param discountType Type of discount determines how aggressively the lending module offers a discount\\n    function getDiscountInfo(\\n        address asset,\\n        DiscountType discountType\\n    ) external view returns (DiscountInfo memory discountInfo) {\\n        return _discountsInfo[asset][discountType];\\n    }\\n\\n    // @dev This is a linear function of the discount change.\\n    //     Calculates the liquidation discount by passed blocks.\\n    // @param asset The address of the main collateral token\\n    // @param discountType Determines how aggressively the lending module offers a discount\\n    // @param liquidationBlock The block number when the liquidation was triggered\\n    // @return Amount of discount in percents, E18 format\\n    function calculateDiscountE18(\\n        address asset,\\n        DiscountType discountType,\\n        uint256 liquidationBlock\\n    ) public view returns (uint256) {\\n        DiscountInfo storage discountInfo = _discountsInfo[asset][discountType];\\n\\n        // number of blocks between the liquidation starts and now\\n        uint256 blocksPast = block.number - liquidationBlock;\\n\\n        if (blocksPast == 0) {\\n            return 0;\\n        } else if (blocksPast == 1) {\\n            return discountInfo.firstBlockE18;\\n        } else {\\n\\n            if (discountType == DiscountType.aggressive) {\\n                // the aggressive discount starts the second block with a number equals the stepPerBlockE18\\n                return _discountFormula(\\n                    blocksPast,\\n                    SuLiquidationConstants.AGGRESSIVE_DISCOUNT_LIMIT_PERCENT_E18,\\n                    discountInfo.stepPerBlockE18,\\n                    discountInfo.stepPerBlockE18,\\n                    2\\n                );\\n            } else {\\n                return _discountFormula(\\n                    blocksPast,\\n                    SuLiquidationConstants.ONE_HUNDRED_PERCENT_E18,\\n                    discountInfo.firstBlockE18,\\n                    discountInfo.stepPerBlockE18,\\n                    1\\n                );\\n            }\\n        }\\n    }\\n\\n    // @notice Returns percentages of discount by passed blocks from liquidation start\\n    // @param blocksPast The number of blocks passed after the liquidation was triggered\\n    // @param limitDiscountE18 The upper limit of discount in percentage\\n    // @param initialDiscountE18 Starting discount\\n    // @param stepPerBlockE18 Increment of discount per block in percentages\\n    // @param initialBlockNumber The block number which the increment of discount starts from\\n    function _discountFormula(\\n        uint256 blocksPast,\\n        uint256 limitDiscountE18,\\n        uint256 initialDiscountE18,\\n        uint256 stepPerBlockE18,\\n        uint256 initialBlockNumber\\n    ) internal pure returns (uint256) {\\n        uint256 discountE18 = initialDiscountE18 + (blocksPast - initialBlockNumber) * stepPerBlockE18;\\n\\n        // return the limit discount if the block number went over the limit\\n        return (discountE18 > limitDiscountE18) ? limitDiscountE18 : discountE18;\\n    }\\n\\n    function _verifyDiscountInfo(DiscountType discountType, DiscountInfo calldata discountInfo) internal pure {\\n\\n        // the aggressive discount has a special upper limit\\n        uint256 limitDiscountE18;\\n        if (discountType == DiscountType.aggressive) {\\n            limitDiscountE18 = SuLiquidationConstants.AGGRESSIVE_DISCOUNT_LIMIT_PERCENT_E18;\\n        } else {\\n            limitDiscountE18 = SuLiquidationConstants.ONE_HUNDRED_PERCENT_E18;\\n        }\\n\\n        if (discountInfo.firstBlockE18 >= limitDiscountE18 || discountInfo.stepPerBlockE18 >= limitDiscountE18) {\\n            revert IncorrectDiscount();\\n        }\\n    }\\n}\",\"keccak256\":\"0xefdf335d702ad95d12ebcf9fd7d3fc51496d4f38ad4453f00e7924f8370519f3\",\"license\":\"UNLICENSED\"},\"contracts/liquidator/SuLiquidationStructs.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\n// We have three discount strategies(numbers as an example):\\n//\\n// Mode #1 - aggressive: The lending module sells ASAP\\n// Discount goes from 0.1% first block, 1% second block, goes linear +1% minute\\n//\\n// Mode #2 - middle: The lending module sells some asset for whitelisted stablecoin as expensive as possible, no rush\\n// Discount goes from 0.1% first block, liner increase +0.1% minute\\n//\\n// Mode #3 - conservative: The lending module sells stablecoin(USDC) for StablePro as expensive as possible, no rush\\n// Discount goes from 0.01% first block, goes linear until 5% max in one day or so\\n\\nenum DiscountType {\\n    aggressive,\\n    middle,\\n    conservative\\n}\\n\\n// firstBlockE18 - percent of discount at the first block\\n// stepPerBlockE18 - percent of discount which will be incremented per block after N>=2 block\\nstruct DiscountInfo {\\n    uint256 firstBlockE18;\\n    uint256 stepPerBlockE18;\\n}\\n\\n// liquidationBlock - the block number when the liquidation was triggered.\\n//      It will turn into zero when all deferred stablecoins(toRepaymentE18 and toFoundationE18) be sold.\\n// toRepaymentE18 - amount of stablecoins which will be burned as debt repayment.\\n//      Actually, we can not burn it, because it is not a StablePro. So, we deferred that amounts of stablecoins\\n//      until someone swaps the stablecoins to StablePro(see swapStableProToStablecoin())\\n// toFoundationE18 - amount of stablecoins which will be transfered to the foundation.\\n//      Has the same idea like \\\"toRepaymentE18\\\",\\n//      but about an excess of stablecoins over debt repayment\\nstruct DeferredStablecoinAmount {\\n    uint256 liquidationBlock;\\n    uint256 toRepaymentE18;\\n    uint256 toFoundationE18;\\n}\\n\\nstruct FlashCallbackData {\\n    address asset;\\n    address owner;\\n    address stablecoinToken;\\n    uint256 stablecoinAmountEDecimal;\\n    address caller;\\n}\",\"keccak256\":\"0x2a67c01e9108530c57754566fe930aeb46722a05fda395b7a93c0b7be04193f8\",\"license\":\"UNLICENSED\"},\"contracts/oracles/vendor/PoolAddress.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n// @title Provides functions for deriving a pool address from the factory, tokens, and the fee\\nlibrary PoolAddress {\\n    bytes32 internal constant POOL_INIT_CODE_HASH = 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54;\\n\\n    // @notice The identifying key of the pool\\n    struct PoolKey {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n    }\\n\\n    // @notice Returns PoolKey: the ordered tokens with the matched fee levels\\n    // @param tokenA The first token of a pool, unsorted\\n    // @param tokenB The second token of a pool, unsorted\\n    // @param fee The fee level of the pool\\n    // @return Poolkey The pool details with ordered token0 and token1 assignments\\n    function getPoolKey(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) internal pure returns (PoolKey memory) {\\n        if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\\n        return PoolKey({token0: tokenA, token1: tokenB, fee: fee});\\n    }\\n\\n    // @notice Deterministically computes the pool address given the factory and PoolKey\\n    // @param factory The Uniswap V3 factory contract address\\n    // @param key The PoolKey\\n    // @return pool The contract address of the V3 pool\\n    function computeAddress(address factory, PoolKey memory key) internal pure returns (address pool) {\\n        require(key.token0 < key.token1);\\n        pool = address(\\n            uint160(\\n                uint256(\\n                    keccak256(\\n                        abi.encodePacked(\\n                            hex'ff',\\n                            factory,\\n                            keccak256(abi.encode(key.token0, key.token1, key.fee)),\\n                            POOL_INIT_CODE_HASH\\n                        )\\n                    )\\n                )\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xa900e50613aa7c7217cb5aab3c3626c69270e981a862210cba6b9ebe5a1893ee\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061239d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100d05760003560e01c806303ee9f22146100d557806314c376dc1461010457806319ab453c146101395780631b6e27361461014e5780633599f022146101615780634d2cf8b71461018f578063550a1e00146101a25780635c1b55d6146101b5578063c3009f36146101c8578063cc2a9a5b146101db578063d5391393146101ee578063dc97e84e14610215578063dd1b9c4a1461023c578063e9cbafb014610266578063eecd204214610279578063f4e2ebeb1461028c575b600080fd5b6000546100ee906201000090046001600160a01b031681565b6040516100fb9190611cae565b60405180910390f35b61012b7fe965846df3dd5b1dfa65f58e31477079e90140e0908b6dd31b5aead5a57cf36581565b6040519081526020016100fb565b61014c610147366004611cea565b61029f565b005b61014c61015c366004611d07565b610369565b61017461016f366004611d57565b61040e565b604080518251815260209283015192810192909252016100fb565b61012b61019d366004611d8c565b610494565b61014c6101b0366004611dc5565b610521565b61012b6101c3366004611dff565b610643565b61012b6101d6366004611e67565b61080e565b61014c6101e9366004611ea5565b6108f4565b61012b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b61012b7f9a9aef7c1247d5fc769b0185c052913e39673da29a880317dfd20ebf86f26a4981565b60065461025290600160a01b900462ffffff1681565b60405162ffffff90911681526020016100fb565b61014c610274366004611f27565b610a5c565b61014c610287366004611fa6565b610be5565b61014c61029a366004611ff7565b610cd2565b600054610100900460ff16158080156102bf5750600054600160ff909116105b806102e057506102ce30610e01565b1580156102e0575060005460ff166001145b6103055760405162461bcd60e51b81526004016102fc90612048565b60405180910390fd5b6000805460ff191660011790558015610328576000805461ff0019166101001790555b61033182610e10565b8015610365576000805461ff0019169055604051600181526000805160206123488339815191529060200160405180910390a15b5050565b6000806000610379868686610ea5565b600254604051636bf12d5f60e01b81526001600160a01b038b811660048301528a81166024830152336044830152606482018590526084820184905260a482018690529497509295509093509190911690636bf12d5f9060c4015b600060405180830381600087803b1580156103ee57600080fd5b505af1158015610402573d6000803e3d6000fd5b50505050505050505050565b60408051808201909152600080825260208201526001600160a01b03831660009081526001602052604081209083600281111561044d5761044d612096565b600281111561045e5761045e612096565b81526020019081526020016000206040518060400160405290816000820154815260200160018201548152505090505b92915050565b6002546040516304c9a55560e41b815260009182916001600160a01b0390911690634c9a5550906104cb90879087906004016120ac565b602060405180830381865afa1580156104e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050c91906120c6565b9050610519848483610fea565b949350505050565b600354604051631735856760e31b8152600091670de0b6b3a76400009184916001600160a01b03169063b9ac2b389061055e908890600401611cae565b602060405180830381865afa15801561057b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059f91906120c6565b6105a991906120f5565b6105b3919061210c565b90506000806105c28584611024565b60025460405163628a468360e01b815233600482015260248101849052604481018390529294509092506001600160a01b03169063628a468390606401600060405180830381600087803b15801561061957600080fd5b505af115801561062d573d6000803e3d6000fd5b5050505061063c8533866111b3565b5050505050565b600080600061065688888888881561120e565b9150915060006040518061010001604052808a6001600160a01b03168152602001886001600160a01b03168152602001600660149054906101000a900462ffffff1662ffffff168152602001866106ad57336106af565b305b6001600160a01b0316815260200142815260200183815260200184815260200160006001600160a01b031681525090506106ff89600560009054906101000a90046001600160a01b03168461143b565b84610710576107108933308561153e565b6005546040805163414bf38960e01b815283516001600160a01b0390811660048301526020850151811660248301529184015162ffffff1660448201526060840151821660648201526080840151608482015260a084015160a482015260c084015160c482015260e0840151821660e4820152600092919091169063414bf38990610104016020604051808303816000875af11580156107b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d891906120c6565b9050856107f6576107ea88308361143b565b6107f68830338461153e565b610800848261212e565b9a9950505050505050505050565b6001600160a01b038316600090815260016020526040812081908185600281111561083b5761083b612096565b600281111561084c5761084c612096565b815260200190815260200160002090506000834361086a919061212e565b90508060000361087f576000925050506108ed565b8060010361089057505490506108ed565b60008560028111156108a4576108a4612096565b036108cf576108c68166b1a2bc2ec5000084600101548560010154600261164c565b925050506108ed565b6108c681670de0b6b3a764000084600001548560010154600161164c565b9392505050565b600054610100900460ff16158080156109145750600054600160ff909116105b80610935575061092330610e01565b158015610935575060005460ff166001145b6109515760405162461bcd60e51b81526004016102fc90612048565b6000805460ff191660011790558015610974576000805461ff0019166101001790555b61097d8761029f565b6001600160a01b038616158061099a57506001600160a01b038516155b156109b85760405163d92e233d60e01b815260040160405180910390fd5b600280546001600160a01b03199081166001600160a01b038981169190911790925560038054821688841617905560048054821687841617905560058054909116858316179055600680549184166001600160b81b03199092169190911761017760a31b1790558015610a53576000805461ff0019169055604051600181526000805160206123488339815191529060200160405180910390a15b50505050505050565b6000610a6a82840184612141565b90506000610a7b826040015161168a565b9050336001600160a01b03821614610ac65760405162461bcd60e51b815260206004820152600e60248201526d1b9bdd08185d5d1a1bdc9a5e995960921b60448201526064016102fc565b6000610ae683600001518460200151856040015186606001516001610643565b9050868111610b375760405162461bcd60e51b815260206004820152601d60248201527f4c69717569646174696f6e206973206e6f742070726f66697461626c6500000060448201526064016102fc565b8615610ba4576000878460600151610b4f91906121d9565b90506000610b5d898461212e565b9050610b798560400151308385610b7491906121d9565b61143b565b610b89856040015130868561153e565b610b9d85604001513087608001518461153e565b5050610a53565b610bbd836040015130838660600151610b7491906121d9565b610bd183604001513084866060015161153e565b610a5383604001513085608001518461153e565b6000610bf08361168a565b905060006040518060a00160405280876001600160a01b03168152602001866001600160a01b03168152602001856001600160a01b03168152602001848152602001336001600160a01b0316815250604051602001610c8f919081516001600160a01b03908116825260208084015182169083015260408084015182169083015260608084015190830152608092830151169181019190915260a00190565b60408051601f19818403018152908290526312439b2f60e21b825291506001600160a01b0383169063490e6cbc906103d49030908790600090879060040161223c565b60008054604051632474521560e21b815260048101929092523360248301526201000090046001600160a01b0316906391d1485490604401602060405180830381865afa158015610d27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4b9190612273565b610d975760405162461bcd60e51b815260206004820152601d60248201527f5375417574683a206f6e6c794f776e657220415554485f4641494c454400000060448201526064016102fc565b610da18282611737565b6001600160a01b03831660009081526001602052604081208291846002811115610dcd57610dcd612096565b6002811115610dde57610dde612096565b81526020808201929092526040016000208235815590820135600182015561063c565b6001600160a01b03163b151590565b600054610100900460ff16610e7b5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016102fc565b600080546001600160a01b03909216620100000262010000600160b01b0319909216919091179055565b60025460405163af368fbd60e01b8152600091829182918291829182916001600160a01b039091169063af368fbd90610ee4908c908c906004016120ac565b606060405180830381865afa158015610f01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f259190612290565b9250925092506000610f388a8a86610fea565b600354604051631735856760e31b81529192506000916001600160a01b039091169063b9ac2b3890610f6e908e90600401611cae565b602060405180830381865afa158015610f8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610faf91906120c6565b9050600080610fc0838c888761179c565b91509150600080610fd187846117fd565b949c509a50929850505050505050505093509350939050565b60045460009081906001600160a01b0385811691161461100b57600061100e565b60015b905061101b85828561080e565b95945050505050565b600080826000036110485760405163e008b5f960e01b815260040160405180910390fd5b6001600160a01b038416600090815260076020526040812080549091036110825760405163895afd9560e01b815260040160405180910390fd5b6000611094866002846000015461080e565b6040805160608101825284548152600185015460208201526002850154918101919091529091506110c59086611827565b909450925083156110ea57838260010160008282546110e4919061212e565b90915550505b821561110a5782826002016000828254611104919061212e565b90915550505b600182015415801561111e57506002820154155b1561114a576001600160a01b038616600090815260076020526040812081815560018101829055600201555b61115c81670de0b6b3a76400006121d9565b61116e85670de0b6b3a76400006120f5565b611178919061210c565b935061118c81670de0b6b3a76400006121d9565b61119e84670de0b6b3a76400006120f5565b6111a8919061210c565b925050509250929050565b6112098363a9059cbb60e01b84846040516024016111d29291906122be565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261187f565b505050565b600354604051631735856760e31b8152600091829182916001600160a01b03169063b9ac2b3890611243908990600401611cae565b602060405180830381865afa158015611260573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061128491906120c6565b90506000670de0b6b3a764000061129b87846120f5565b6112a5919061210c565b905060008060006112b78c8c86610ea5565b919450925090506000856112cb83856121d9565b6112dd90670de0b6b3a76400006120f5565b6112e7919061210c565b905088156112fb576112fb8b333084611951565b6000600260009054906101000a90046001600160a01b03166001600160a01b0316634c9a55508f8f6040518363ffffffff1660e01b81526004016113409291906120ac565b602060405180830381865afa15801561135d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138191906120c6565b905061138f8c828686611978565b6002546001600160a01b0316636f70e66f8f8f8d6113ad57306113af565b335b60405160e085901b6001600160e01b03191681526001600160a01b03938416600482015291831660248301529091166044820152606481018790526084810188905260a401600060405180830381600087803b15801561140e57600080fd5b505af1158015611422573d6000803e3d6000fd5b50939a5095985050505050505050509550959350505050565b600080846001600160a01b031663095ea7b360e01b85856040516024016114639291906122be565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516114a191906122d7565b6000604051808303816000865af19150503d80600081146114de576040519150601f19603f3d011682016040523d82523d6000602084013e6114e3565b606091505b509150915081801561150d57508051158061150d57508080602001905181019061150d9190612273565b61063c5760405162461bcd60e51b8152602060048201526002602482015261534160f01b60448201526064016102fc565b600080856001600160a01b03166323b872dd60e01b868686604051602401611568939291906122f3565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516115a691906122d7565b6000604051808303816000865af19150503d80600081146115e3576040519150601f19603f3d011682016040523d82523d6000602084013e6115e8565b606091505b50915091508180156116125750805115806116125750808060200190518101906116129190612273565b6116445760405162461bcd60e51b815260206004820152600360248201526229aa2360e91b60448201526064016102fc565b505050505050565b6000808361165a848961212e565b61166491906120f5565b61166e90866121d9565b905085811161167d578061167f565b855b979650505050505050565b600080600560009054906101000a90046001600160a01b03166001600160a01b0316634aa4a4fc6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117049190612317565b6006549091506108ed906001600160a01b038116906117329086908590600160a01b900462ffffff166119d7565b611a42565b60008083600281111561174c5761174c612096565b0361175f575066b1a2bc2ec5000061176a565b50670de0b6b3a76400005b81358111158061177e575080826020013510155b156112095760405163211e2bb760e21b815260040160405180910390fd5b60008080670de0b6b3a76400006117b386896120f5565b6117bd919061210c565b905060006117cc828887611b26565b90975090506000886117e683670de0b6b3a76400006120f5565b6117f0919061210c565b9997985050505050505050565b6000808383111561181c57611812848461212e565b9050839150611820565b8291505b9250929050565b6000808360200151831161183d57829150611820565b602084015161184c908461212e565b92508360400151831115611873576040516301af414160e51b815260040160405180910390fd5b50506020919091015191565b60006118d4826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611b9d9092919063ffffffff16565b80519091501561120957808060200190518101906118f29190612273565b6112095760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016102fc565b611972846323b872dd60e01b8585856040516024016111d2939291906122f3565b50505050565b6001600160a01b0384166000908152600760205260408120600181018054919285926119a59084906121d9565b92505081905550818160020160008282546119c091906121d9565b9091555050805460000361063c5792909255505050565b6040805160608101825260008082526020820181905291810191909152826001600160a01b0316846001600160a01b03161115611a12579192915b50604080516060810182526001600160a01b03948516815292909316602083015262ffffff169181019190915290565b600081602001516001600160a01b031682600001516001600160a01b031610611a6a57600080fd5b815160208084015160408086015181516001600160a01b0395861681860152949092168482015262ffffff90911660608085019190915281518085038201815260808501909252815191909201206001600160f81b031960a08401529085901b6001600160601b03191660a183015260b58201527fe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b5460d582015260f50160408051601f1981840301815291905280516020909101209392505050565b600080670de0b6b3a7640000611b3c84826121d9565b611b4690866120f5565b611b50919061210c565b905084811115611b91575083611b6e83670de0b6b3a76400006121d9565b611b8086670de0b6b3a76400006120f5565b611b8a919061210c565b9150611b95565b8391505b935093915050565b6060610519848460008585600080866001600160a01b03168587604051611bc491906122d7565b60006040518083038185875af1925050503d8060008114611c01576040519150601f19603f3d011682016040523d82523d6000602084013e611c06565b606091505b509150915061167f8783838760608315611c7f578251600003611c7857611c2c85610e01565b611c785760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102fc565b5081610519565b6105198383815115611c945781518083602001fd5b8060405162461bcd60e51b81526004016102fc9190612334565b6001600160a01b0391909116815260200190565b6001600160a01b0381168114611cd757600080fd5b50565b8035611ce581611cc2565b919050565b600060208284031215611cfc57600080fd5b81356108ed81611cc2565b600080600060608486031215611d1c57600080fd5b8335611d2781611cc2565b92506020840135611d3781611cc2565b929592945050506040919091013590565b803560038110611ce557600080fd5b60008060408385031215611d6a57600080fd5b8235611d7581611cc2565b9150611d8360208401611d48565b90509250929050565b60008060408385031215611d9f57600080fd5b8235611daa81611cc2565b91506020830135611dba81611cc2565b809150509250929050565b60008060408385031215611dd857600080fd5b8235611de381611cc2565b946020939093013593505050565b8015158114611cd757600080fd5b600080600080600060a08688031215611e1757600080fd5b8535611e2281611cc2565b94506020860135611e3281611cc2565b93506040860135611e4281611cc2565b9250606086013591506080860135611e5981611df1565b809150509295509295909350565b600080600060608486031215611e7c57600080fd5b8335611e8781611cc2565b9250611e9560208501611d48565b9150604084013590509250925092565b60008060008060008060c08789031215611ebe57600080fd5b8635611ec981611cc2565b95506020870135611ed981611cc2565b94506040870135611ee981611cc2565b93506060870135611ef981611cc2565b92506080870135611f0981611cc2565b915060a0870135611f1981611cc2565b809150509295509295509295565b60008060008060608587031215611f3d57600080fd5b843593506020850135925060408501356001600160401b0380821115611f6257600080fd5b818701915087601f830112611f7657600080fd5b813581811115611f8557600080fd5b886020828501011115611f9757600080fd5b95989497505060200194505050565b60008060008060808587031215611fbc57600080fd5b8435611fc781611cc2565b93506020850135611fd781611cc2565b92506040850135611fe781611cc2565b9396929550929360600135925050565b6000806000838503608081121561200d57600080fd5b843561201881611cc2565b935061202660208601611d48565b92506040603f198201121561203a57600080fd5b506040840190509250925092565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b634e487b7160e01b600052602160045260246000fd5b6001600160a01b0392831681529116602082015260400190565b6000602082840312156120d857600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761048e5761048e6120df565b60008261212957634e487b7160e01b600052601260045260246000fd5b500490565b8181038181111561048e5761048e6120df565b600060a0828403121561215357600080fd5b60405160a081016001600160401b038111828210171561218357634e487b7160e01b600052604160045260246000fd5b604052823561219181611cc2565b815260208301356121a181611cc2565b60208201526121b260408401611cda565b6040820152606083013560608201526121cd60808401611cda565b60808201529392505050565b8082018082111561048e5761048e6120df565b60005b838110156122075781810151838201526020016121ef565b50506000910152565b600081518084526122288160208601602086016121ec565b601f01601f19169290920160200192915050565b60018060a01b03851681528360208201528260408201526080606082015260006122696080830184612210565b9695505050505050565b60006020828403121561228557600080fd5b81516108ed81611df1565b6000806000606084860312156122a557600080fd5b8351925060208401519150604084015190509250925092565b6001600160a01b03929092168252602082015260400190565b600082516122e98184602087016121ec565b9190910192915050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60006020828403121561232957600080fd5b81516108ed81611cc2565b6020815260006108ed602083018461221056fe7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498a2646970667358221220467962b7a2b1b5f90a0059c00f9fc2acc0606f9b44ff2d21a558f3bbe645123b64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100d05760003560e01c806303ee9f22146100d557806314c376dc1461010457806319ab453c146101395780631b6e27361461014e5780633599f022146101615780634d2cf8b71461018f578063550a1e00146101a25780635c1b55d6146101b5578063c3009f36146101c8578063cc2a9a5b146101db578063d5391393146101ee578063dc97e84e14610215578063dd1b9c4a1461023c578063e9cbafb014610266578063eecd204214610279578063f4e2ebeb1461028c575b600080fd5b6000546100ee906201000090046001600160a01b031681565b6040516100fb9190611cae565b60405180910390f35b61012b7fe965846df3dd5b1dfa65f58e31477079e90140e0908b6dd31b5aead5a57cf36581565b6040519081526020016100fb565b61014c610147366004611cea565b61029f565b005b61014c61015c366004611d07565b610369565b61017461016f366004611d57565b61040e565b604080518251815260209283015192810192909252016100fb565b61012b61019d366004611d8c565b610494565b61014c6101b0366004611dc5565b610521565b61012b6101c3366004611dff565b610643565b61012b6101d6366004611e67565b61080e565b61014c6101e9366004611ea5565b6108f4565b61012b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b61012b7f9a9aef7c1247d5fc769b0185c052913e39673da29a880317dfd20ebf86f26a4981565b60065461025290600160a01b900462ffffff1681565b60405162ffffff90911681526020016100fb565b61014c610274366004611f27565b610a5c565b61014c610287366004611fa6565b610be5565b61014c61029a366004611ff7565b610cd2565b600054610100900460ff16158080156102bf5750600054600160ff909116105b806102e057506102ce30610e01565b1580156102e0575060005460ff166001145b6103055760405162461bcd60e51b81526004016102fc90612048565b60405180910390fd5b6000805460ff191660011790558015610328576000805461ff0019166101001790555b61033182610e10565b8015610365576000805461ff0019169055604051600181526000805160206123488339815191529060200160405180910390a15b5050565b6000806000610379868686610ea5565b600254604051636bf12d5f60e01b81526001600160a01b038b811660048301528a81166024830152336044830152606482018590526084820184905260a482018690529497509295509093509190911690636bf12d5f9060c4015b600060405180830381600087803b1580156103ee57600080fd5b505af1158015610402573d6000803e3d6000fd5b50505050505050505050565b60408051808201909152600080825260208201526001600160a01b03831660009081526001602052604081209083600281111561044d5761044d612096565b600281111561045e5761045e612096565b81526020019081526020016000206040518060400160405290816000820154815260200160018201548152505090505b92915050565b6002546040516304c9a55560e41b815260009182916001600160a01b0390911690634c9a5550906104cb90879087906004016120ac565b602060405180830381865afa1580156104e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050c91906120c6565b9050610519848483610fea565b949350505050565b600354604051631735856760e31b8152600091670de0b6b3a76400009184916001600160a01b03169063b9ac2b389061055e908890600401611cae565b602060405180830381865afa15801561057b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059f91906120c6565b6105a991906120f5565b6105b3919061210c565b90506000806105c28584611024565b60025460405163628a468360e01b815233600482015260248101849052604481018390529294509092506001600160a01b03169063628a468390606401600060405180830381600087803b15801561061957600080fd5b505af115801561062d573d6000803e3d6000fd5b5050505061063c8533866111b3565b5050505050565b600080600061065688888888881561120e565b9150915060006040518061010001604052808a6001600160a01b03168152602001886001600160a01b03168152602001600660149054906101000a900462ffffff1662ffffff168152602001866106ad57336106af565b305b6001600160a01b0316815260200142815260200183815260200184815260200160006001600160a01b031681525090506106ff89600560009054906101000a90046001600160a01b03168461143b565b84610710576107108933308561153e565b6005546040805163414bf38960e01b815283516001600160a01b0390811660048301526020850151811660248301529184015162ffffff1660448201526060840151821660648201526080840151608482015260a084015160a482015260c084015160c482015260e0840151821660e4820152600092919091169063414bf38990610104016020604051808303816000875af11580156107b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d891906120c6565b9050856107f6576107ea88308361143b565b6107f68830338461153e565b610800848261212e565b9a9950505050505050505050565b6001600160a01b038316600090815260016020526040812081908185600281111561083b5761083b612096565b600281111561084c5761084c612096565b815260200190815260200160002090506000834361086a919061212e565b90508060000361087f576000925050506108ed565b8060010361089057505490506108ed565b60008560028111156108a4576108a4612096565b036108cf576108c68166b1a2bc2ec5000084600101548560010154600261164c565b925050506108ed565b6108c681670de0b6b3a764000084600001548560010154600161164c565b9392505050565b600054610100900460ff16158080156109145750600054600160ff909116105b80610935575061092330610e01565b158015610935575060005460ff166001145b6109515760405162461bcd60e51b81526004016102fc90612048565b6000805460ff191660011790558015610974576000805461ff0019166101001790555b61097d8761029f565b6001600160a01b038616158061099a57506001600160a01b038516155b156109b85760405163d92e233d60e01b815260040160405180910390fd5b600280546001600160a01b03199081166001600160a01b038981169190911790925560038054821688841617905560048054821687841617905560058054909116858316179055600680549184166001600160b81b03199092169190911761017760a31b1790558015610a53576000805461ff0019169055604051600181526000805160206123488339815191529060200160405180910390a15b50505050505050565b6000610a6a82840184612141565b90506000610a7b826040015161168a565b9050336001600160a01b03821614610ac65760405162461bcd60e51b815260206004820152600e60248201526d1b9bdd08185d5d1a1bdc9a5e995960921b60448201526064016102fc565b6000610ae683600001518460200151856040015186606001516001610643565b9050868111610b375760405162461bcd60e51b815260206004820152601d60248201527f4c69717569646174696f6e206973206e6f742070726f66697461626c6500000060448201526064016102fc565b8615610ba4576000878460600151610b4f91906121d9565b90506000610b5d898461212e565b9050610b798560400151308385610b7491906121d9565b61143b565b610b89856040015130868561153e565b610b9d85604001513087608001518461153e565b5050610a53565b610bbd836040015130838660600151610b7491906121d9565b610bd183604001513084866060015161153e565b610a5383604001513085608001518461153e565b6000610bf08361168a565b905060006040518060a00160405280876001600160a01b03168152602001866001600160a01b03168152602001856001600160a01b03168152602001848152602001336001600160a01b0316815250604051602001610c8f919081516001600160a01b03908116825260208084015182169083015260408084015182169083015260608084015190830152608092830151169181019190915260a00190565b60408051601f19818403018152908290526312439b2f60e21b825291506001600160a01b0383169063490e6cbc906103d49030908790600090879060040161223c565b60008054604051632474521560e21b815260048101929092523360248301526201000090046001600160a01b0316906391d1485490604401602060405180830381865afa158015610d27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4b9190612273565b610d975760405162461bcd60e51b815260206004820152601d60248201527f5375417574683a206f6e6c794f776e657220415554485f4641494c454400000060448201526064016102fc565b610da18282611737565b6001600160a01b03831660009081526001602052604081208291846002811115610dcd57610dcd612096565b6002811115610dde57610dde612096565b81526020808201929092526040016000208235815590820135600182015561063c565b6001600160a01b03163b151590565b600054610100900460ff16610e7b5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016102fc565b600080546001600160a01b03909216620100000262010000600160b01b0319909216919091179055565b60025460405163af368fbd60e01b8152600091829182918291829182916001600160a01b039091169063af368fbd90610ee4908c908c906004016120ac565b606060405180830381865afa158015610f01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f259190612290565b9250925092506000610f388a8a86610fea565b600354604051631735856760e31b81529192506000916001600160a01b039091169063b9ac2b3890610f6e908e90600401611cae565b602060405180830381865afa158015610f8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610faf91906120c6565b9050600080610fc0838c888761179c565b91509150600080610fd187846117fd565b949c509a50929850505050505050505093509350939050565b60045460009081906001600160a01b0385811691161461100b57600061100e565b60015b905061101b85828561080e565b95945050505050565b600080826000036110485760405163e008b5f960e01b815260040160405180910390fd5b6001600160a01b038416600090815260076020526040812080549091036110825760405163895afd9560e01b815260040160405180910390fd5b6000611094866002846000015461080e565b6040805160608101825284548152600185015460208201526002850154918101919091529091506110c59086611827565b909450925083156110ea57838260010160008282546110e4919061212e565b90915550505b821561110a5782826002016000828254611104919061212e565b90915550505b600182015415801561111e57506002820154155b1561114a576001600160a01b038616600090815260076020526040812081815560018101829055600201555b61115c81670de0b6b3a76400006121d9565b61116e85670de0b6b3a76400006120f5565b611178919061210c565b935061118c81670de0b6b3a76400006121d9565b61119e84670de0b6b3a76400006120f5565b6111a8919061210c565b925050509250929050565b6112098363a9059cbb60e01b84846040516024016111d29291906122be565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261187f565b505050565b600354604051631735856760e31b8152600091829182916001600160a01b03169063b9ac2b3890611243908990600401611cae565b602060405180830381865afa158015611260573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061128491906120c6565b90506000670de0b6b3a764000061129b87846120f5565b6112a5919061210c565b905060008060006112b78c8c86610ea5565b919450925090506000856112cb83856121d9565b6112dd90670de0b6b3a76400006120f5565b6112e7919061210c565b905088156112fb576112fb8b333084611951565b6000600260009054906101000a90046001600160a01b03166001600160a01b0316634c9a55508f8f6040518363ffffffff1660e01b81526004016113409291906120ac565b602060405180830381865afa15801561135d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138191906120c6565b905061138f8c828686611978565b6002546001600160a01b0316636f70e66f8f8f8d6113ad57306113af565b335b60405160e085901b6001600160e01b03191681526001600160a01b03938416600482015291831660248301529091166044820152606481018790526084810188905260a401600060405180830381600087803b15801561140e57600080fd5b505af1158015611422573d6000803e3d6000fd5b50939a5095985050505050505050509550959350505050565b600080846001600160a01b031663095ea7b360e01b85856040516024016114639291906122be565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516114a191906122d7565b6000604051808303816000865af19150503d80600081146114de576040519150601f19603f3d011682016040523d82523d6000602084013e6114e3565b606091505b509150915081801561150d57508051158061150d57508080602001905181019061150d9190612273565b61063c5760405162461bcd60e51b8152602060048201526002602482015261534160f01b60448201526064016102fc565b600080856001600160a01b03166323b872dd60e01b868686604051602401611568939291906122f3565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516115a691906122d7565b6000604051808303816000865af19150503d80600081146115e3576040519150601f19603f3d011682016040523d82523d6000602084013e6115e8565b606091505b50915091508180156116125750805115806116125750808060200190518101906116129190612273565b6116445760405162461bcd60e51b815260206004820152600360248201526229aa2360e91b60448201526064016102fc565b505050505050565b6000808361165a848961212e565b61166491906120f5565b61166e90866121d9565b905085811161167d578061167f565b855b979650505050505050565b600080600560009054906101000a90046001600160a01b03166001600160a01b0316634aa4a4fc6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117049190612317565b6006549091506108ed906001600160a01b038116906117329086908590600160a01b900462ffffff166119d7565b611a42565b60008083600281111561174c5761174c612096565b0361175f575066b1a2bc2ec5000061176a565b50670de0b6b3a76400005b81358111158061177e575080826020013510155b156112095760405163211e2bb760e21b815260040160405180910390fd5b60008080670de0b6b3a76400006117b386896120f5565b6117bd919061210c565b905060006117cc828887611b26565b90975090506000886117e683670de0b6b3a76400006120f5565b6117f0919061210c565b9997985050505050505050565b6000808383111561181c57611812848461212e565b9050839150611820565b8291505b9250929050565b6000808360200151831161183d57829150611820565b602084015161184c908461212e565b92508360400151831115611873576040516301af414160e51b815260040160405180910390fd5b50506020919091015191565b60006118d4826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611b9d9092919063ffffffff16565b80519091501561120957808060200190518101906118f29190612273565b6112095760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016102fc565b611972846323b872dd60e01b8585856040516024016111d2939291906122f3565b50505050565b6001600160a01b0384166000908152600760205260408120600181018054919285926119a59084906121d9565b92505081905550818160020160008282546119c091906121d9565b9091555050805460000361063c5792909255505050565b6040805160608101825260008082526020820181905291810191909152826001600160a01b0316846001600160a01b03161115611a12579192915b50604080516060810182526001600160a01b03948516815292909316602083015262ffffff169181019190915290565b600081602001516001600160a01b031682600001516001600160a01b031610611a6a57600080fd5b815160208084015160408086015181516001600160a01b0395861681860152949092168482015262ffffff90911660608085019190915281518085038201815260808501909252815191909201206001600160f81b031960a08401529085901b6001600160601b03191660a183015260b58201527fe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b5460d582015260f50160408051601f1981840301815291905280516020909101209392505050565b600080670de0b6b3a7640000611b3c84826121d9565b611b4690866120f5565b611b50919061210c565b905084811115611b91575083611b6e83670de0b6b3a76400006121d9565b611b8086670de0b6b3a76400006120f5565b611b8a919061210c565b9150611b95565b8391505b935093915050565b6060610519848460008585600080866001600160a01b03168587604051611bc491906122d7565b60006040518083038185875af1925050503d8060008114611c01576040519150601f19603f3d011682016040523d82523d6000602084013e611c06565b606091505b509150915061167f8783838760608315611c7f578251600003611c7857611c2c85610e01565b611c785760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102fc565b5081610519565b6105198383815115611c945781518083602001fd5b8060405162461bcd60e51b81526004016102fc9190612334565b6001600160a01b0391909116815260200190565b6001600160a01b0381168114611cd757600080fd5b50565b8035611ce581611cc2565b919050565b600060208284031215611cfc57600080fd5b81356108ed81611cc2565b600080600060608486031215611d1c57600080fd5b8335611d2781611cc2565b92506020840135611d3781611cc2565b929592945050506040919091013590565b803560038110611ce557600080fd5b60008060408385031215611d6a57600080fd5b8235611d7581611cc2565b9150611d8360208401611d48565b90509250929050565b60008060408385031215611d9f57600080fd5b8235611daa81611cc2565b91506020830135611dba81611cc2565b809150509250929050565b60008060408385031215611dd857600080fd5b8235611de381611cc2565b946020939093013593505050565b8015158114611cd757600080fd5b600080600080600060a08688031215611e1757600080fd5b8535611e2281611cc2565b94506020860135611e3281611cc2565b93506040860135611e4281611cc2565b9250606086013591506080860135611e5981611df1565b809150509295509295909350565b600080600060608486031215611e7c57600080fd5b8335611e8781611cc2565b9250611e9560208501611d48565b9150604084013590509250925092565b60008060008060008060c08789031215611ebe57600080fd5b8635611ec981611cc2565b95506020870135611ed981611cc2565b94506040870135611ee981611cc2565b93506060870135611ef981611cc2565b92506080870135611f0981611cc2565b915060a0870135611f1981611cc2565b809150509295509295509295565b60008060008060608587031215611f3d57600080fd5b843593506020850135925060408501356001600160401b0380821115611f6257600080fd5b818701915087601f830112611f7657600080fd5b813581811115611f8557600080fd5b886020828501011115611f9757600080fd5b95989497505060200194505050565b60008060008060808587031215611fbc57600080fd5b8435611fc781611cc2565b93506020850135611fd781611cc2565b92506040850135611fe781611cc2565b9396929550929360600135925050565b6000806000838503608081121561200d57600080fd5b843561201881611cc2565b935061202660208601611d48565b92506040603f198201121561203a57600080fd5b506040840190509250925092565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b634e487b7160e01b600052602160045260246000fd5b6001600160a01b0392831681529116602082015260400190565b6000602082840312156120d857600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761048e5761048e6120df565b60008261212957634e487b7160e01b600052601260045260246000fd5b500490565b8181038181111561048e5761048e6120df565b600060a0828403121561215357600080fd5b60405160a081016001600160401b038111828210171561218357634e487b7160e01b600052604160045260246000fd5b604052823561219181611cc2565b815260208301356121a181611cc2565b60208201526121b260408401611cda565b6040820152606083013560608201526121cd60808401611cda565b60808201529392505050565b8082018082111561048e5761048e6120df565b60005b838110156122075781810151838201526020016121ef565b50506000910152565b600081518084526122288160208601602086016121ec565b601f01601f19169290920160200192915050565b60018060a01b03851681528360208201528260408201526080606082015260006122696080830184612210565b9695505050505050565b60006020828403121561228557600080fd5b81516108ed81611df1565b6000806000606084860312156122a557600080fd5b8351925060208401519150604084015190509250925092565b6001600160a01b03929092168252602082015260400190565b600082516122e98184602087016121ec565b9190910192915050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60006020828403121561232957600080fd5b81516108ed81611cc2565b6020815260006108ed602083018461221056fe7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498a2646970667358221220467962b7a2b1b5f90a0059c00f9fc2acc0606f9b44ff2d21a558f3bbe645123b64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 461,
        "contract": "contracts/liquidator/SuLiquidation.sol:SuLiquidation",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 464,
        "contract": "contracts/liquidator/SuLiquidation.sol:SuLiquidation",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6897,
        "contract": "contracts/liquidator/SuLiquidation.sol:SuLiquidation",
        "label": "ACCESS_CONTROL_SINGLETON",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(ISuAccessControl)10043"
      },
      {
        "astId": 15294,
        "contract": "contracts/liquidator/SuLiquidation.sol:SuLiquidation",
        "label": "_discountsInfo",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_enum(DiscountType)15511,t_struct(DiscountInfo)15516_storage))"
      },
      {
        "astId": 14149,
        "contract": "contracts/liquidator/SuLiquidation.sol:SuLiquidation",
        "label": "SU_MANAGER",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ISuManager)10555"
      },
      {
        "astId": 14152,
        "contract": "contracts/liquidator/SuLiquidation.sol:SuLiquidation",
        "label": "SU_ORACLE",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ISuOracle)10629"
      },
      {
        "astId": 14155,
        "contract": "contracts/liquidator/SuLiquidation.sol:SuLiquidation",
        "label": "SU_REWARD",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IRewardChefV2)10030"
      },
      {
        "astId": 14158,
        "contract": "contracts/liquidator/SuLiquidation.sol:SuLiquidation",
        "label": "SWAP_ROUTER",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(ISwapRouter)6519"
      },
      {
        "astId": 14160,
        "contract": "contracts/liquidator/SuLiquidation.sol:SuLiquidation",
        "label": "UNISWAP_FACTORY",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 14162,
        "contract": "contracts/liquidator/SuLiquidation.sol:SuLiquidation",
        "label": "POOL_FEE",
        "offset": 20,
        "slot": "6",
        "type": "t_uint24"
      },
      {
        "astId": 14167,
        "contract": "contracts/liquidator/SuLiquidation.sol:SuLiquidation",
        "label": "_deferredStablecoinAmounts",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_struct(DeferredStablecoinAmount)15523_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IRewardChefV2)10030": {
        "encoding": "inplace",
        "label": "contract IRewardChefV2",
        "numberOfBytes": "20"
      },
      "t_contract(ISuAccessControl)10043": {
        "encoding": "inplace",
        "label": "contract ISuAccessControl",
        "numberOfBytes": "20"
      },
      "t_contract(ISuManager)10555": {
        "encoding": "inplace",
        "label": "contract ISuManager",
        "numberOfBytes": "20"
      },
      "t_contract(ISuOracle)10629": {
        "encoding": "inplace",
        "label": "contract ISuOracle",
        "numberOfBytes": "20"
      },
      "t_contract(ISwapRouter)6519": {
        "encoding": "inplace",
        "label": "contract ISwapRouter",
        "numberOfBytes": "20"
      },
      "t_enum(DiscountType)15511": {
        "encoding": "inplace",
        "label": "enum DiscountType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_enum(DiscountType)15511,t_struct(DiscountInfo)15516_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(enum DiscountType => struct DiscountInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(DiscountType)15511,t_struct(DiscountInfo)15516_storage)"
      },
      "t_mapping(t_address,t_struct(DeferredStablecoinAmount)15523_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DeferredStablecoinAmount)",
        "numberOfBytes": "32",
        "value": "t_struct(DeferredStablecoinAmount)15523_storage"
      },
      "t_mapping(t_enum(DiscountType)15511,t_struct(DiscountInfo)15516_storage)": {
        "encoding": "mapping",
        "key": "t_enum(DiscountType)15511",
        "label": "mapping(enum DiscountType => struct DiscountInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(DiscountInfo)15516_storage"
      },
      "t_struct(DeferredStablecoinAmount)15523_storage": {
        "encoding": "inplace",
        "label": "struct DeferredStablecoinAmount",
        "members": [
          {
            "astId": 15518,
            "contract": "contracts/liquidator/SuLiquidation.sol:SuLiquidation",
            "label": "liquidationBlock",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 15520,
            "contract": "contracts/liquidator/SuLiquidation.sol:SuLiquidation",
            "label": "toRepaymentE18",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 15522,
            "contract": "contracts/liquidator/SuLiquidation.sol:SuLiquidation",
            "label": "toFoundationE18",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(DiscountInfo)15516_storage": {
        "encoding": "inplace",
        "label": "struct DiscountInfo",
        "members": [
          {
            "astId": 15513,
            "contract": "contracts/liquidator/SuLiquidation.sol:SuLiquidation",
            "label": "firstBlockE18",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 15515,
            "contract": "contracts/liquidator/SuLiquidation.sol:SuLiquidation",
            "label": "stepPerBlockE18",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}