{
  "address": "0x612EC7B933AF9BB666a3Ea249FD31E20c3185727",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "AlreadyRegistered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BadAccessControlSingleton",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "IsNotLP",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LPOracleNotReady",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "exchangeRate",
          "type": "int256"
        }
      ],
      "name": "MarketExchangeRateBelowOne",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MarketExpired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MarketProportionMustNotEqualOne",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "rateScalar",
          "type": "int256"
        }
      ],
      "name": "MarketRateScalarBelowZero",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "totalPt",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "totalAsset",
          "type": "int256"
        }
      ],
      "name": "MarketZeroTotalPtOrTotalAsset",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAdminError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAlerterError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyCDPAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyDAOError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyDisablerAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyLiquidationAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyMintAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyProxyActionsError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyRewardAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyRoleError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyVaultAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyVotingEscrowError",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACCESS_CONTROL_SINGLETON",
      "outputs": [
        {
          "internalType": "contract ISuAccessControl",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ALERTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CDP_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DAO_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DISABLER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIQUIDATION_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINT_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ORACLE",
      "outputs": [
        {
          "internalType": "contract ISuOracleAggregator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROXY_ACTIONS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARD_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VOTING_ESCROW_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getFiatPrice1e18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_authControl",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "isAdapterLP",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lps",
      "outputs": [
        {
          "internalType": "contract IPMarket",
          "name": "market",
          "type": "address"
        },
        {
          "internalType": "contract IStandardizedYield",
          "name": "SY",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "mainUnderlyingToken",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lp",
          "type": "address"
        },
        {
          "internalType": "contract IPMarket",
          "name": "market",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "mainUnderlyingToken",
          "type": "address"
        }
      ],
      "name": "registerLP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct WithdrawResult[]",
          "name": "results",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "numDeployments": 4,
  "solcInputHash": "063b59c64b6b03a7efa7d47f22e02344",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"AlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BadAccessControlSingleton\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"IsNotLP\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LPOracleNotReady\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"exchangeRate\",\"type\":\"int256\"}],\"name\":\"MarketExchangeRateBelowOne\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MarketExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MarketProportionMustNotEqualOne\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"rateScalar\",\"type\":\"int256\"}],\"name\":\"MarketRateScalarBelowZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"totalPt\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"totalAsset\",\"type\":\"int256\"}],\"name\":\"MarketZeroTotalPtOrTotalAsset\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAdminError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAlerterError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyCDPAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyDAOError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyDisablerAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyLiquidationAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyMintAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyProxyActionsError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRewardAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRoleError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyVaultAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyVotingEscrowError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACCESS_CONTROL_SINGLETON\",\"outputs\":[{\"internalType\":\"contract ISuAccessControl\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ALERTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CDP_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAO_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DISABLER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDATION_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ORACLE\",\"outputs\":[{\"internalType\":\"contract ISuOracleAggregator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROXY_ACTIONS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VOTING_ESCROW_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getFiatPrice1e18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_authControl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"isAdapterLP\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lps\",\"outputs\":[{\"internalType\":\"contract IPMarket\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"contract IStandardizedYield\",\"name\":\"SY\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mainUnderlyingToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"internalType\":\"contract IPMarket\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mainUnderlyingToken\",\"type\":\"address\"}],\"name\":\"registerLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct WithdrawResult[]\",\"name\":\"results\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See ILPAdapter interface for full details.\",\"kind\":\"dev\",\"methods\":{\"isAdapterLP(address)\":{\"params\":{\"asset\":\"- address of LP token to check*\"}},\"registerLP(address,address,address)\":{\"params\":{\"lp\":\"address of LP token\",\"market\":\"market for LP token*\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"title\":\"PendleAdapter\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getFiatPrice1e18(address)\":{\"notice\":\"Idea of this implementation was in Pendle example*\"},\"isAdapterLP(address)\":{\"notice\":\"Returns if asset ig Balancer LP token, registered in our adapter\"},\"registerLP(address,address,address)\":{\"notice\":\"Register the given LP token address and set the LP info\"},\"withdraw(address,uint256)\":{\"notice\":\"Pendle unwrap LP only to 1 token, but our ILPAdapter is more general, so we need to return here the array of WithdrawResult.*\"}},\"notice\":\"Adapter for Pendle LP token.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/periphery/contracts/adapters/PendleAdapter.sol\":\"PendleAdapter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@pendle/core-v2/contracts/core/Market/MarketMathCore.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport \\\"../libraries/math/PMath.sol\\\";\\nimport \\\"../libraries/math/LogExpMath.sol\\\";\\n\\nimport \\\"../StandardizedYield/PYIndex.sol\\\";\\nimport \\\"../libraries/MiniHelpers.sol\\\";\\nimport \\\"../libraries/Errors.sol\\\";\\n\\nstruct MarketState {\\n    int256 totalPt;\\n    int256 totalSy;\\n    int256 totalLp;\\n    address treasury;\\n    /// immutable variables ///\\n    int256 scalarRoot;\\n    uint256 expiry;\\n    /// fee data ///\\n    uint256 lnFeeRateRoot;\\n    uint256 reserveFeePercent; // base 100\\n    /// last trade data ///\\n    uint256 lastLnImpliedRate;\\n}\\n\\n// params that are expensive to compute, therefore we pre-compute them\\nstruct MarketPreCompute {\\n    int256 rateScalar;\\n    int256 totalAsset;\\n    int256 rateAnchor;\\n    int256 feeRate;\\n}\\n\\n// solhint-disable ordering\\nlibrary MarketMathCore {\\n    using PMath for uint256;\\n    using PMath for int256;\\n    using LogExpMath for int256;\\n    using PYIndexLib for PYIndex;\\n\\n    int256 internal constant MINIMUM_LIQUIDITY = 10 ** 3;\\n    int256 internal constant PERCENTAGE_DECIMALS = 100;\\n    uint256 internal constant DAY = 86400;\\n    uint256 internal constant IMPLIED_RATE_TIME = 365 * DAY;\\n\\n    int256 internal constant MAX_MARKET_PROPORTION = (1e18 * 96) / 100;\\n\\n    using PMath for uint256;\\n    using PMath for int256;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                UINT FUNCTIONS TO PROXY TO CORE FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function addLiquidity(\\n        MarketState memory market,\\n        uint256 syDesired,\\n        uint256 ptDesired,\\n        uint256 blockTime\\n    ) internal pure returns (uint256 lpToReserve, uint256 lpToAccount, uint256 syUsed, uint256 ptUsed) {\\n        (int256 _lpToReserve, int256 _lpToAccount, int256 _syUsed, int256 _ptUsed) = addLiquidityCore(\\n            market,\\n            syDesired.Int(),\\n            ptDesired.Int(),\\n            blockTime\\n        );\\n\\n        lpToReserve = _lpToReserve.Uint();\\n        lpToAccount = _lpToAccount.Uint();\\n        syUsed = _syUsed.Uint();\\n        ptUsed = _ptUsed.Uint();\\n    }\\n\\n    function removeLiquidity(\\n        MarketState memory market,\\n        uint256 lpToRemove\\n    ) internal pure returns (uint256 netSyToAccount, uint256 netPtToAccount) {\\n        (int256 _syToAccount, int256 _ptToAccount) = removeLiquidityCore(market, lpToRemove.Int());\\n\\n        netSyToAccount = _syToAccount.Uint();\\n        netPtToAccount = _ptToAccount.Uint();\\n    }\\n\\n    function swapExactPtForSy(\\n        MarketState memory market,\\n        PYIndex index,\\n        uint256 exactPtToMarket,\\n        uint256 blockTime\\n    ) internal pure returns (uint256 netSyToAccount, uint256 netSyFee, uint256 netSyToReserve) {\\n        (int256 _netSyToAccount, int256 _netSyFee, int256 _netSyToReserve) = executeTradeCore(\\n            market,\\n            index,\\n            exactPtToMarket.neg(),\\n            blockTime\\n        );\\n\\n        netSyToAccount = _netSyToAccount.Uint();\\n        netSyFee = _netSyFee.Uint();\\n        netSyToReserve = _netSyToReserve.Uint();\\n    }\\n\\n    function swapSyForExactPt(\\n        MarketState memory market,\\n        PYIndex index,\\n        uint256 exactPtToAccount,\\n        uint256 blockTime\\n    ) internal pure returns (uint256 netSyToMarket, uint256 netSyFee, uint256 netSyToReserve) {\\n        (int256 _netSyToAccount, int256 _netSyFee, int256 _netSyToReserve) = executeTradeCore(\\n            market,\\n            index,\\n            exactPtToAccount.Int(),\\n            blockTime\\n        );\\n\\n        netSyToMarket = _netSyToAccount.neg().Uint();\\n        netSyFee = _netSyFee.Uint();\\n        netSyToReserve = _netSyToReserve.Uint();\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    CORE FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function addLiquidityCore(\\n        MarketState memory market,\\n        int256 syDesired,\\n        int256 ptDesired,\\n        uint256 blockTime\\n    ) internal pure returns (int256 lpToReserve, int256 lpToAccount, int256 syUsed, int256 ptUsed) {\\n        /// ------------------------------------------------------------\\n        /// CHECKS\\n        /// ------------------------------------------------------------\\n        if (syDesired == 0 || ptDesired == 0) revert Errors.MarketZeroAmountsInput();\\n        if (MiniHelpers.isExpired(market.expiry, blockTime)) revert Errors.MarketExpired();\\n\\n        /// ------------------------------------------------------------\\n        /// MATH\\n        /// ------------------------------------------------------------\\n        if (market.totalLp == 0) {\\n            lpToAccount = PMath.sqrt((syDesired * ptDesired).Uint()).Int() - MINIMUM_LIQUIDITY;\\n            lpToReserve = MINIMUM_LIQUIDITY;\\n            syUsed = syDesired;\\n            ptUsed = ptDesired;\\n        } else {\\n            int256 netLpByPt = (ptDesired * market.totalLp) / market.totalPt;\\n            int256 netLpBySy = (syDesired * market.totalLp) / market.totalSy;\\n            if (netLpByPt < netLpBySy) {\\n                lpToAccount = netLpByPt;\\n                ptUsed = ptDesired;\\n                syUsed = (market.totalSy * lpToAccount) / market.totalLp;\\n            } else {\\n                lpToAccount = netLpBySy;\\n                syUsed = syDesired;\\n                ptUsed = (market.totalPt * lpToAccount) / market.totalLp;\\n            }\\n        }\\n\\n        if (lpToAccount <= 0 || syUsed <= 0 || ptUsed <= 0) revert Errors.MarketZeroAmountsOutput();\\n\\n        /// ------------------------------------------------------------\\n        /// WRITE\\n        /// ------------------------------------------------------------\\n        market.totalSy += syUsed;\\n        market.totalPt += ptUsed;\\n        market.totalLp += lpToAccount + lpToReserve;\\n    }\\n\\n    function removeLiquidityCore(\\n        MarketState memory market,\\n        int256 lpToRemove\\n    ) internal pure returns (int256 netSyToAccount, int256 netPtToAccount) {\\n        /// ------------------------------------------------------------\\n        /// CHECKS\\n        /// ------------------------------------------------------------\\n        if (lpToRemove == 0) revert Errors.MarketZeroAmountsInput();\\n\\n        /// ------------------------------------------------------------\\n        /// MATH\\n        /// ------------------------------------------------------------\\n        netSyToAccount = (lpToRemove * market.totalSy) / market.totalLp;\\n        netPtToAccount = (lpToRemove * market.totalPt) / market.totalLp;\\n\\n        if (netSyToAccount == 0 && netPtToAccount == 0) revert Errors.MarketZeroAmountsOutput();\\n\\n        /// ------------------------------------------------------------\\n        /// WRITE\\n        /// ------------------------------------------------------------\\n        market.totalLp = market.totalLp.subNoNeg(lpToRemove);\\n        market.totalPt = market.totalPt.subNoNeg(netPtToAccount);\\n        market.totalSy = market.totalSy.subNoNeg(netSyToAccount);\\n    }\\n\\n    function executeTradeCore(\\n        MarketState memory market,\\n        PYIndex index,\\n        int256 netPtToAccount,\\n        uint256 blockTime\\n    ) internal pure returns (int256 netSyToAccount, int256 netSyFee, int256 netSyToReserve) {\\n        /// ------------------------------------------------------------\\n        /// CHECKS\\n        /// ------------------------------------------------------------\\n        if (MiniHelpers.isExpired(market.expiry, blockTime)) revert Errors.MarketExpired();\\n        if (market.totalPt <= netPtToAccount)\\n            revert Errors.MarketInsufficientPtForTrade(market.totalPt, netPtToAccount);\\n\\n        /// ------------------------------------------------------------\\n        /// MATH\\n        /// ------------------------------------------------------------\\n        MarketPreCompute memory comp = getMarketPreCompute(market, index, blockTime);\\n\\n        (netSyToAccount, netSyFee, netSyToReserve) = calcTrade(market, comp, index, netPtToAccount);\\n\\n        /// ------------------------------------------------------------\\n        /// WRITE\\n        /// ------------------------------------------------------------\\n        _setNewMarketStateTrade(market, comp, index, netPtToAccount, netSyToAccount, netSyToReserve, blockTime);\\n    }\\n\\n    function getMarketPreCompute(\\n        MarketState memory market,\\n        PYIndex index,\\n        uint256 blockTime\\n    ) internal pure returns (MarketPreCompute memory res) {\\n        if (MiniHelpers.isExpired(market.expiry, blockTime)) revert Errors.MarketExpired();\\n\\n        uint256 timeToExpiry = market.expiry - blockTime;\\n\\n        res.rateScalar = _getRateScalar(market, timeToExpiry);\\n        res.totalAsset = index.syToAsset(market.totalSy);\\n\\n        if (market.totalPt == 0 || res.totalAsset == 0)\\n            revert Errors.MarketZeroTotalPtOrTotalAsset(market.totalPt, res.totalAsset);\\n\\n        res.rateAnchor = _getRateAnchor(\\n            market.totalPt,\\n            market.lastLnImpliedRate,\\n            res.totalAsset,\\n            res.rateScalar,\\n            timeToExpiry\\n        );\\n        res.feeRate = _getExchangeRateFromImpliedRate(market.lnFeeRateRoot, timeToExpiry);\\n    }\\n\\n    function calcTrade(\\n        MarketState memory market,\\n        MarketPreCompute memory comp,\\n        PYIndex index,\\n        int256 netPtToAccount\\n    ) internal pure returns (int256 netSyToAccount, int256 netSyFee, int256 netSyToReserve) {\\n        int256 preFeeExchangeRate = _getExchangeRate(\\n            market.totalPt,\\n            comp.totalAsset,\\n            comp.rateScalar,\\n            comp.rateAnchor,\\n            netPtToAccount\\n        );\\n\\n        int256 preFeeAssetToAccount = netPtToAccount.divDown(preFeeExchangeRate).neg();\\n        int256 fee = comp.feeRate;\\n\\n        if (netPtToAccount > 0) {\\n            int256 postFeeExchangeRate = preFeeExchangeRate.divDown(fee);\\n            if (postFeeExchangeRate < PMath.IONE) revert Errors.MarketExchangeRateBelowOne(postFeeExchangeRate);\\n\\n            fee = preFeeAssetToAccount.mulDown(PMath.IONE - fee);\\n        } else {\\n            fee = ((preFeeAssetToAccount * (PMath.IONE - fee)) / fee).neg();\\n        }\\n\\n        int256 netAssetToReserve = (fee * market.reserveFeePercent.Int()) / PERCENTAGE_DECIMALS;\\n        int256 netAssetToAccount = preFeeAssetToAccount - fee;\\n\\n        netSyToAccount = netAssetToAccount < 0\\n            ? index.assetToSyUp(netAssetToAccount)\\n            : index.assetToSy(netAssetToAccount);\\n        netSyFee = index.assetToSy(fee);\\n        netSyToReserve = index.assetToSy(netAssetToReserve);\\n    }\\n\\n    function _setNewMarketStateTrade(\\n        MarketState memory market,\\n        MarketPreCompute memory comp,\\n        PYIndex index,\\n        int256 netPtToAccount,\\n        int256 netSyToAccount,\\n        int256 netSyToReserve,\\n        uint256 blockTime\\n    ) internal pure {\\n        uint256 timeToExpiry = market.expiry - blockTime;\\n\\n        market.totalPt = market.totalPt.subNoNeg(netPtToAccount);\\n        market.totalSy = market.totalSy.subNoNeg(netSyToAccount + netSyToReserve);\\n\\n        market.lastLnImpliedRate = _getLnImpliedRate(\\n            market.totalPt,\\n            index.syToAsset(market.totalSy),\\n            comp.rateScalar,\\n            comp.rateAnchor,\\n            timeToExpiry\\n        );\\n\\n        if (market.lastLnImpliedRate == 0) revert Errors.MarketZeroLnImpliedRate();\\n    }\\n\\n    function _getRateAnchor(\\n        int256 totalPt,\\n        uint256 lastLnImpliedRate,\\n        int256 totalAsset,\\n        int256 rateScalar,\\n        uint256 timeToExpiry\\n    ) internal pure returns (int256 rateAnchor) {\\n        int256 newExchangeRate = _getExchangeRateFromImpliedRate(lastLnImpliedRate, timeToExpiry);\\n\\n        if (newExchangeRate < PMath.IONE) revert Errors.MarketExchangeRateBelowOne(newExchangeRate);\\n\\n        {\\n            int256 proportion = totalPt.divDown(totalPt + totalAsset);\\n\\n            int256 lnProportion = _logProportion(proportion);\\n\\n            rateAnchor = newExchangeRate - lnProportion.divDown(rateScalar);\\n        }\\n    }\\n\\n    /// @notice Calculates the current market implied rate.\\n    /// @return lnImpliedRate the implied rate\\n    function _getLnImpliedRate(\\n        int256 totalPt,\\n        int256 totalAsset,\\n        int256 rateScalar,\\n        int256 rateAnchor,\\n        uint256 timeToExpiry\\n    ) internal pure returns (uint256 lnImpliedRate) {\\n        // This will check for exchange rates < PMath.IONE\\n        int256 exchangeRate = _getExchangeRate(totalPt, totalAsset, rateScalar, rateAnchor, 0);\\n\\n        // exchangeRate >= 1 so its ln >= 0\\n        uint256 lnRate = exchangeRate.ln().Uint();\\n\\n        lnImpliedRate = (lnRate * IMPLIED_RATE_TIME) / timeToExpiry;\\n    }\\n\\n    /// @notice Converts an implied rate to an exchange rate given a time to expiry. The\\n    /// formula is E = e^rt\\n    function _getExchangeRateFromImpliedRate(\\n        uint256 lnImpliedRate,\\n        uint256 timeToExpiry\\n    ) internal pure returns (int256 exchangeRate) {\\n        uint256 rt = (lnImpliedRate * timeToExpiry) / IMPLIED_RATE_TIME;\\n\\n        exchangeRate = LogExpMath.exp(rt.Int());\\n    }\\n\\n    function _getExchangeRate(\\n        int256 totalPt,\\n        int256 totalAsset,\\n        int256 rateScalar,\\n        int256 rateAnchor,\\n        int256 netPtToAccount\\n    ) internal pure returns (int256 exchangeRate) {\\n        int256 numerator = totalPt.subNoNeg(netPtToAccount);\\n\\n        int256 proportion = (numerator.divDown(totalPt + totalAsset));\\n\\n        if (proportion > MAX_MARKET_PROPORTION)\\n            revert Errors.MarketProportionTooHigh(proportion, MAX_MARKET_PROPORTION);\\n\\n        int256 lnProportion = _logProportion(proportion);\\n\\n        exchangeRate = lnProportion.divDown(rateScalar) + rateAnchor;\\n\\n        if (exchangeRate < PMath.IONE) revert Errors.MarketExchangeRateBelowOne(exchangeRate);\\n    }\\n\\n    function _logProportion(int256 proportion) internal pure returns (int256 res) {\\n        if (proportion == PMath.IONE) revert Errors.MarketProportionMustNotEqualOne();\\n\\n        int256 logitP = proportion.divDown(PMath.IONE - proportion);\\n\\n        res = logitP.ln();\\n    }\\n\\n    function _getRateScalar(MarketState memory market, uint256 timeToExpiry) internal pure returns (int256 rateScalar) {\\n        rateScalar = (market.scalarRoot * IMPLIED_RATE_TIME.Int()) / timeToExpiry.Int();\\n        if (rateScalar <= 0) revert Errors.MarketRateScalarBelowZero(rateScalar);\\n    }\\n\\n    function setInitialLnImpliedRate(\\n        MarketState memory market,\\n        PYIndex index,\\n        int256 initialAnchor,\\n        uint256 blockTime\\n    ) internal pure {\\n        /// ------------------------------------------------------------\\n        /// CHECKS\\n        /// ------------------------------------------------------------\\n        if (MiniHelpers.isExpired(market.expiry, blockTime)) revert Errors.MarketExpired();\\n\\n        /// ------------------------------------------------------------\\n        /// MATH\\n        /// ------------------------------------------------------------\\n        int256 totalAsset = index.syToAsset(market.totalSy);\\n        uint256 timeToExpiry = market.expiry - blockTime;\\n        int256 rateScalar = _getRateScalar(market, timeToExpiry);\\n\\n        /// ------------------------------------------------------------\\n        /// WRITE\\n        /// ------------------------------------------------------------\\n        market.lastLnImpliedRate = _getLnImpliedRate(\\n            market.totalPt,\\n            totalAsset,\\n            rateScalar,\\n            initialAnchor,\\n            timeToExpiry\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xd36308ba2aeeefb50df5ed18da885284e6cbe9d6328105a6e611b1c3b4d564ac\",\"license\":\"GPL-3.0-or-later\"},\"@pendle/core-v2/contracts/core/StandardizedYield/PYIndex.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\nimport \\\"../../interfaces/IPYieldToken.sol\\\";\\nimport \\\"../../interfaces/IPPrincipalToken.sol\\\";\\n\\nimport \\\"./SYUtils.sol\\\";\\nimport \\\"../libraries/math/PMath.sol\\\";\\n\\ntype PYIndex is uint256;\\n\\nlibrary PYIndexLib {\\n    using PMath for uint256;\\n    using PMath for int256;\\n\\n    function newIndex(IPYieldToken YT) internal returns (PYIndex) {\\n        return PYIndex.wrap(YT.pyIndexCurrent());\\n    }\\n\\n    function syToAsset(PYIndex index, uint256 syAmount) internal pure returns (uint256) {\\n        return SYUtils.syToAsset(PYIndex.unwrap(index), syAmount);\\n    }\\n\\n    function assetToSy(PYIndex index, uint256 assetAmount) internal pure returns (uint256) {\\n        return SYUtils.assetToSy(PYIndex.unwrap(index), assetAmount);\\n    }\\n\\n    function assetToSyUp(PYIndex index, uint256 assetAmount) internal pure returns (uint256) {\\n        return SYUtils.assetToSyUp(PYIndex.unwrap(index), assetAmount);\\n    }\\n\\n    function syToAssetUp(PYIndex index, uint256 syAmount) internal pure returns (uint256) {\\n        uint256 _index = PYIndex.unwrap(index);\\n        return SYUtils.syToAssetUp(_index, syAmount);\\n    }\\n\\n    function syToAsset(PYIndex index, int256 syAmount) internal pure returns (int256) {\\n        int256 sign = syAmount < 0 ? int256(-1) : int256(1);\\n        return sign * (SYUtils.syToAsset(PYIndex.unwrap(index), syAmount.abs())).Int();\\n    }\\n\\n    function assetToSy(PYIndex index, int256 assetAmount) internal pure returns (int256) {\\n        int256 sign = assetAmount < 0 ? int256(-1) : int256(1);\\n        return sign * (SYUtils.assetToSy(PYIndex.unwrap(index), assetAmount.abs())).Int();\\n    }\\n\\n    function assetToSyUp(PYIndex index, int256 assetAmount) internal pure returns (int256) {\\n        int256 sign = assetAmount < 0 ? int256(-1) : int256(1);\\n        return sign * (SYUtils.assetToSyUp(PYIndex.unwrap(index), assetAmount.abs())).Int();\\n    }\\n}\\n\",\"keccak256\":\"0x1d4bb00cc66f73f51eee668d9b0eb90981f5183f126b1226cd6f6260eafa1768\",\"license\":\"GPL-3.0-or-later\"},\"@pendle/core-v2/contracts/core/StandardizedYield/SYUtils.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nlibrary SYUtils {\\n    uint256 internal constant ONE = 1e18;\\n\\n    function syToAsset(uint256 exchangeRate, uint256 syAmount) internal pure returns (uint256) {\\n        return (syAmount * exchangeRate) / ONE;\\n    }\\n\\n    function syToAssetUp(uint256 exchangeRate, uint256 syAmount) internal pure returns (uint256) {\\n        return (syAmount * exchangeRate + ONE - 1) / ONE;\\n    }\\n\\n    function assetToSy(uint256 exchangeRate, uint256 assetAmount) internal pure returns (uint256) {\\n        return (assetAmount * ONE) / exchangeRate;\\n    }\\n\\n    function assetToSyUp(uint256 exchangeRate, uint256 assetAmount) internal pure returns (uint256) {\\n        return (assetAmount * ONE + exchangeRate - 1) / exchangeRate;\\n    }\\n}\\n\",\"keccak256\":\"0xd3bc20ce8f41cd07513beb669eda02f0c5e9cafb74406cd4c89019525399d4dd\",\"license\":\"GPL-3.0-or-later\"},\"@pendle/core-v2/contracts/core/libraries/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nlibrary Errors {\\n    // BulkSeller\\n    error BulkInsufficientSyForTrade(uint256 currentAmount, uint256 requiredAmount);\\n    error BulkInsufficientTokenForTrade(uint256 currentAmount, uint256 requiredAmount);\\n    error BulkInSufficientSyOut(uint256 actualSyOut, uint256 requiredSyOut);\\n    error BulkInSufficientTokenOut(uint256 actualTokenOut, uint256 requiredTokenOut);\\n    error BulkInsufficientSyReceived(uint256 actualBalance, uint256 requiredBalance);\\n    error BulkNotMaintainer();\\n    error BulkNotAdmin();\\n    error BulkSellerAlreadyExisted(address token, address SY, address bulk);\\n    error BulkSellerInvalidToken(address token, address SY);\\n    error BulkBadRateTokenToSy(uint256 actualRate, uint256 currentRate, uint256 eps);\\n    error BulkBadRateSyToToken(uint256 actualRate, uint256 currentRate, uint256 eps);\\n\\n    // APPROX\\n    error ApproxFail();\\n    error ApproxParamsInvalid(uint256 guessMin, uint256 guessMax, uint256 eps);\\n    error ApproxBinarySearchInputInvalid(\\n        uint256 approxGuessMin,\\n        uint256 approxGuessMax,\\n        uint256 minGuessMin,\\n        uint256 maxGuessMax\\n    );\\n\\n    // MARKET + MARKET MATH CORE\\n    error MarketExpired();\\n    error MarketZeroAmountsInput();\\n    error MarketZeroAmountsOutput();\\n    error MarketZeroLnImpliedRate();\\n    error MarketInsufficientPtForTrade(int256 currentAmount, int256 requiredAmount);\\n    error MarketInsufficientPtReceived(uint256 actualBalance, uint256 requiredBalance);\\n    error MarketInsufficientSyReceived(uint256 actualBalance, uint256 requiredBalance);\\n    error MarketZeroTotalPtOrTotalAsset(int256 totalPt, int256 totalAsset);\\n    error MarketExchangeRateBelowOne(int256 exchangeRate);\\n    error MarketProportionMustNotEqualOne();\\n    error MarketRateScalarBelowZero(int256 rateScalar);\\n    error MarketScalarRootBelowZero(int256 scalarRoot);\\n    error MarketProportionTooHigh(int256 proportion, int256 maxProportion);\\n\\n    error OracleUninitialized();\\n    error OracleTargetTooOld(uint32 target, uint32 oldest);\\n    error OracleZeroCardinality();\\n\\n    error MarketFactoryExpiredPt();\\n    error MarketFactoryInvalidPt();\\n    error MarketFactoryMarketExists();\\n\\n    error MarketFactoryLnFeeRateRootTooHigh(uint80 lnFeeRateRoot, uint256 maxLnFeeRateRoot);\\n    error MarketFactoryOverriddenFeeTooHigh(uint80 overriddenFee, uint256 marketLnFeeRateRoot);\\n    error MarketFactoryReserveFeePercentTooHigh(uint8 reserveFeePercent, uint8 maxReserveFeePercent);\\n    error MarketFactoryZeroTreasury();\\n    error MarketFactoryInitialAnchorTooLow(int256 initialAnchor, int256 minInitialAnchor);\\n    error MFNotPendleMarket(address addr);\\n\\n    // ROUTER\\n    error RouterInsufficientLpOut(uint256 actualLpOut, uint256 requiredLpOut);\\n    error RouterInsufficientSyOut(uint256 actualSyOut, uint256 requiredSyOut);\\n    error RouterInsufficientPtOut(uint256 actualPtOut, uint256 requiredPtOut);\\n    error RouterInsufficientYtOut(uint256 actualYtOut, uint256 requiredYtOut);\\n    error RouterInsufficientPYOut(uint256 actualPYOut, uint256 requiredPYOut);\\n    error RouterInsufficientTokenOut(uint256 actualTokenOut, uint256 requiredTokenOut);\\n    error RouterInsufficientSyRepay(uint256 actualSyRepay, uint256 requiredSyRepay);\\n    error RouterInsufficientPtRepay(uint256 actualPtRepay, uint256 requiredPtRepay);\\n    error RouterNotAllSyUsed(uint256 netSyDesired, uint256 netSyUsed);\\n\\n    error RouterTimeRangeZero();\\n    error RouterCallbackNotPendleMarket(address caller);\\n    error RouterInvalidAction(bytes4 selector);\\n    error RouterInvalidFacet(address facet);\\n\\n    error RouterKyberSwapDataZero();\\n\\n    error SimulationResults(bool success, bytes res);\\n\\n    // YIELD CONTRACT\\n    error YCExpired();\\n    error YCNotExpired();\\n    error YieldContractInsufficientSy(uint256 actualSy, uint256 requiredSy);\\n    error YCNothingToRedeem();\\n    error YCPostExpiryDataNotSet();\\n    error YCNoFloatingSy();\\n\\n    // YieldFactory\\n    error YCFactoryInvalidExpiry();\\n    error YCFactoryYieldContractExisted();\\n    error YCFactoryZeroExpiryDivisor();\\n    error YCFactoryZeroTreasury();\\n    error YCFactoryInterestFeeRateTooHigh(uint256 interestFeeRate, uint256 maxInterestFeeRate);\\n    error YCFactoryRewardFeeRateTooHigh(uint256 newRewardFeeRate, uint256 maxRewardFeeRate);\\n\\n    // SY\\n    error SYInvalidTokenIn(address token);\\n    error SYInvalidTokenOut(address token);\\n    error SYZeroDeposit();\\n    error SYZeroRedeem();\\n    error SYInsufficientSharesOut(uint256 actualSharesOut, uint256 requiredSharesOut);\\n    error SYInsufficientTokenOut(uint256 actualTokenOut, uint256 requiredTokenOut);\\n\\n    // SY-specific\\n    error SYQiTokenMintFailed(uint256 errCode);\\n    error SYQiTokenRedeemFailed(uint256 errCode);\\n    error SYQiTokenRedeemRewardsFailed(uint256 rewardAccruedType0, uint256 rewardAccruedType1);\\n    error SYQiTokenBorrowRateTooHigh(uint256 borrowRate, uint256 borrowRateMax);\\n\\n    error SYCurveInvalidPid();\\n    error SYCurve3crvPoolNotFound();\\n\\n    error SYApeDepositAmountTooSmall(uint256 amountDeposited);\\n    error SYBalancerInvalidPid();\\n    error SYInvalidRewardToken(address token);\\n\\n    error SYStargateRedeemCapExceeded(uint256 amountLpDesired, uint256 amountLpRedeemable);\\n\\n    error SYBalancerReentrancy();\\n\\n    error NotFromTrustedRemote(uint16 srcChainId, bytes path);\\n\\n    error ApxETHNotEnoughBuffer();\\n\\n    // Liquidity Mining\\n    error VCInactivePool(address pool);\\n    error VCPoolAlreadyActive(address pool);\\n    error VCZeroVePendle(address user);\\n    error VCExceededMaxWeight(uint256 totalWeight, uint256 maxWeight);\\n    error VCEpochNotFinalized(uint256 wTime);\\n    error VCPoolAlreadyAddAndRemoved(address pool);\\n\\n    error VEInvalidNewExpiry(uint256 newExpiry);\\n    error VEExceededMaxLockTime();\\n    error VEInsufficientLockTime();\\n    error VENotAllowedReduceExpiry();\\n    error VEZeroAmountLocked();\\n    error VEPositionNotExpired();\\n    error VEZeroPosition();\\n    error VEZeroSlope(uint128 bias, uint128 slope);\\n    error VEReceiveOldSupply(uint256 msgTime);\\n\\n    error GCNotPendleMarket(address caller);\\n    error GCNotVotingController(address caller);\\n\\n    error InvalidWTime(uint256 wTime);\\n    error ExpiryInThePast(uint256 expiry);\\n    error ChainNotSupported(uint256 chainId);\\n\\n    error FDTotalAmountFundedNotMatch(uint256 actualTotalAmount, uint256 expectedTotalAmount);\\n    error FDEpochLengthMismatch();\\n    error FDInvalidPool(address pool);\\n    error FDPoolAlreadyExists(address pool);\\n    error FDInvalidNewFinishedEpoch(uint256 oldFinishedEpoch, uint256 newFinishedEpoch);\\n    error FDInvalidStartEpoch(uint256 startEpoch);\\n    error FDInvalidWTimeFund(uint256 lastFunded, uint256 wTime);\\n    error FDFutureFunding(uint256 lastFunded, uint256 currentWTime);\\n\\n    error BDInvalidEpoch(uint256 epoch, uint256 startTime);\\n\\n    // Cross-Chain\\n    error MsgNotFromSendEndpoint(uint16 srcChainId, bytes path);\\n    error MsgNotFromReceiveEndpoint(address sender);\\n    error InsufficientFeeToSendMsg(uint256 currentFee, uint256 requiredFee);\\n    error ApproxDstExecutionGasNotSet();\\n    error InvalidRetryData();\\n\\n    // GENERIC MSG\\n    error ArrayLengthMismatch();\\n    error ArrayEmpty();\\n    error ArrayOutOfBounds();\\n    error ZeroAddress();\\n    error FailedToSendEther();\\n    error InvalidMerkleProof();\\n\\n    error OnlyLayerZeroEndpoint();\\n    error OnlyYT();\\n    error OnlyYCFactory();\\n    error OnlyWhitelisted();\\n\\n    // Swap Aggregator\\n    error SAInsufficientTokenIn(address tokenIn, uint256 amountExpected, uint256 amountActual);\\n    error UnsupportedSelector(uint256 aggregatorType, bytes4 selector);\\n}\\n\",\"keccak256\":\"0xbebc9cfdfaa88bbf1e53d31c5f5c89265dac4c7ba31920d98b7b7bbd74c4345d\",\"license\":\"GPL-3.0-or-later\"},\"@pendle/core-v2/contracts/core/libraries/MiniHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nlibrary MiniHelpers {\\n    function isCurrentlyExpired(uint256 expiry) internal view returns (bool) {\\n        return (expiry <= block.timestamp);\\n    }\\n\\n    function isExpired(uint256 expiry, uint256 blockTime) internal pure returns (bool) {\\n        return (expiry <= blockTime);\\n    }\\n\\n    function isTimeInThePast(uint256 timestamp) internal view returns (bool) {\\n        return (timestamp <= block.timestamp); // same definition as isCurrentlyExpired\\n    }\\n}\\n\",\"keccak256\":\"0xfcd8768e3e9970df6d6375ff3f43caca7fa3a02cc43afd8f3e56bbde463a3bf5\",\"license\":\"GPL-3.0-or-later\"},\"@pendle/core-v2/contracts/core/libraries/math/LogExpMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\\n// documentation files (the \\u201cSoftware\\u201d), to deal in the Software without restriction, including without limitation the\\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\\n// permit persons to whom the Software is furnished to do so, subject to the following conditions:\\n\\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the\\n// Software.\\n\\n// THE SOFTWARE IS PROVIDED \\u201cAS IS\\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\\n// WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n\\npragma solidity ^0.8.0;\\n\\n/* solhint-disable */\\n\\n/**\\n * @dev Exponentiation and logarithm functions for 18 decimal fixed point numbers (both base and exponent/argument).\\n *\\n * Exponentiation and logarithm with arbitrary bases (x^y and log_x(y)) are implemented by conversion to natural\\n * exponentiation and logarithm (where the base is Euler's number).\\n *\\n * @author Fernando Martinelli - @fernandomartinelli\\n * @author Sergio Yuhjtman - @sergioyuhjtman\\n * @author Daniel Fernandez - @dmf7z\\n */\\nlibrary LogExpMath {\\n    // All fixed point multiplications and divisions are inlined. This means we need to divide by ONE when multiplying\\n    // two numbers, and multiply by ONE when dividing them.\\n\\n    // All arguments and return values are 18 decimal fixed point numbers.\\n    int256 constant ONE_18 = 1e18;\\n\\n    // Internally, intermediate values are computed with higher precision as 20 decimal fixed point numbers, and in the\\n    // case of ln36, 36 decimals.\\n    int256 constant ONE_20 = 1e20;\\n    int256 constant ONE_36 = 1e36;\\n\\n    // The domain of natural exponentiation is bound by the word size and number of decimals used.\\n    //\\n    // Because internally the result will be stored using 20 decimals, the largest possible result is\\n    // (2^255 - 1) / 10^20, which makes the largest exponent ln((2^255 - 1) / 10^20) = 130.700829182905140221.\\n    // The smallest possible result is 10^(-18), which makes largest negative argument\\n    // ln(10^(-18)) = -41.446531673892822312.\\n    // We use 130.0 and -41.0 to have some safety margin.\\n    int256 constant MAX_NATURAL_EXPONENT = 130e18;\\n    int256 constant MIN_NATURAL_EXPONENT = -41e18;\\n\\n    // Bounds for ln_36's argument. Both ln(0.9) and ln(1.1) can be represented with 36 decimal places in a fixed point\\n    // 256 bit integer.\\n    int256 constant LN_36_LOWER_BOUND = ONE_18 - 1e17;\\n    int256 constant LN_36_UPPER_BOUND = ONE_18 + 1e17;\\n\\n    uint256 constant MILD_EXPONENT_BOUND = 2 ** 254 / uint256(ONE_20);\\n\\n    // 18 decimal constants\\n    int256 constant x0 = 128000000000000000000; // 2\\u02c67\\n    int256 constant a0 = 38877084059945950922200000000000000000000000000000000000; // e\\u02c6(x0) (no decimals)\\n    int256 constant x1 = 64000000000000000000; // 2\\u02c66\\n    int256 constant a1 = 6235149080811616882910000000; // e\\u02c6(x1) (no decimals)\\n\\n    // 20 decimal constants\\n    int256 constant x2 = 3200000000000000000000; // 2\\u02c65\\n    int256 constant a2 = 7896296018268069516100000000000000; // e\\u02c6(x2)\\n    int256 constant x3 = 1600000000000000000000; // 2\\u02c64\\n    int256 constant a3 = 888611052050787263676000000; // e\\u02c6(x3)\\n    int256 constant x4 = 800000000000000000000; // 2\\u02c63\\n    int256 constant a4 = 298095798704172827474000; // e\\u02c6(x4)\\n    int256 constant x5 = 400000000000000000000; // 2\\u02c62\\n    int256 constant a5 = 5459815003314423907810; // e\\u02c6(x5)\\n    int256 constant x6 = 200000000000000000000; // 2\\u02c61\\n    int256 constant a6 = 738905609893065022723; // e\\u02c6(x6)\\n    int256 constant x7 = 100000000000000000000; // 2\\u02c60\\n    int256 constant a7 = 271828182845904523536; // e\\u02c6(x7)\\n    int256 constant x8 = 50000000000000000000; // 2\\u02c6-1\\n    int256 constant a8 = 164872127070012814685; // e\\u02c6(x8)\\n    int256 constant x9 = 25000000000000000000; // 2\\u02c6-2\\n    int256 constant a9 = 128402541668774148407; // e\\u02c6(x9)\\n    int256 constant x10 = 12500000000000000000; // 2\\u02c6-3\\n    int256 constant a10 = 113314845306682631683; // e\\u02c6(x10)\\n    int256 constant x11 = 6250000000000000000; // 2\\u02c6-4\\n    int256 constant a11 = 106449445891785942956; // e\\u02c6(x11)\\n\\n    /**\\n     * @dev Natural exponentiation (e^x) with signed 18 decimal fixed point exponent.\\n     *\\n     * Reverts if `x` is smaller than MIN_NATURAL_EXPONENT, or larger than `MAX_NATURAL_EXPONENT`.\\n     */\\n    function exp(int256 x) internal pure returns (int256) {\\n        unchecked {\\n            require(x >= MIN_NATURAL_EXPONENT && x <= MAX_NATURAL_EXPONENT, \\\"Invalid exponent\\\");\\n\\n            if (x < 0) {\\n                // We only handle positive exponents: e^(-x) is computed as 1 / e^x. We can safely make x positive since it\\n                // fits in the signed 256 bit range (as it is larger than MIN_NATURAL_EXPONENT).\\n                // Fixed point division requires multiplying by ONE_18.\\n                return ((ONE_18 * ONE_18) / exp(-x));\\n            }\\n\\n            // First, we use the fact that e^(x+y) = e^x * e^y to decompose x into a sum of powers of two, which we call x_n,\\n            // where x_n == 2^(7 - n), and e^x_n = a_n has been precomputed. We choose the first x_n, x0, to equal 2^7\\n            // because all larger powers are larger than MAX_NATURAL_EXPONENT, and therefore not present in the\\n            // decomposition.\\n            // At the end of this process we will have the product of all e^x_n = a_n that apply, and the remainder of this\\n            // decomposition, which will be lower than the smallest x_n.\\n            // exp(x) = k_0 * a_0 * k_1 * a_1 * ... + k_n * a_n * exp(remainder), where each k_n equals either 0 or 1.\\n            // We mutate x by subtracting x_n, making it the remainder of the decomposition.\\n\\n            // The first two a_n (e^(2^7) and e^(2^6)) are too large if stored as 18 decimal numbers, and could cause\\n            // intermediate overflows. Instead we store them as plain integers, with 0 decimals.\\n            // Additionally, x0 + x1 is larger than MAX_NATURAL_EXPONENT, which means they will not both be present in the\\n            // decomposition.\\n\\n            // For each x_n, we test if that term is present in the decomposition (if x is larger than it), and if so deduct\\n            // it and compute the accumulated product.\\n\\n            int256 firstAN;\\n            if (x >= x0) {\\n                x -= x0;\\n                firstAN = a0;\\n            } else if (x >= x1) {\\n                x -= x1;\\n                firstAN = a1;\\n            } else {\\n                firstAN = 1; // One with no decimal places\\n            }\\n\\n            // We now transform x into a 20 decimal fixed point number, to have enhanced precision when computing the\\n            // smaller terms.\\n            x *= 100;\\n\\n            // `product` is the accumulated product of all a_n (except a0 and a1), which starts at 20 decimal fixed point\\n            // one. Recall that fixed point multiplication requires dividing by ONE_20.\\n            int256 product = ONE_20;\\n\\n            if (x >= x2) {\\n                x -= x2;\\n                product = (product * a2) / ONE_20;\\n            }\\n            if (x >= x3) {\\n                x -= x3;\\n                product = (product * a3) / ONE_20;\\n            }\\n            if (x >= x4) {\\n                x -= x4;\\n                product = (product * a4) / ONE_20;\\n            }\\n            if (x >= x5) {\\n                x -= x5;\\n                product = (product * a5) / ONE_20;\\n            }\\n            if (x >= x6) {\\n                x -= x6;\\n                product = (product * a6) / ONE_20;\\n            }\\n            if (x >= x7) {\\n                x -= x7;\\n                product = (product * a7) / ONE_20;\\n            }\\n            if (x >= x8) {\\n                x -= x8;\\n                product = (product * a8) / ONE_20;\\n            }\\n            if (x >= x9) {\\n                x -= x9;\\n                product = (product * a9) / ONE_20;\\n            }\\n\\n            // x10 and x11 are unnecessary here since we have high enough precision already.\\n\\n            // Now we need to compute e^x, where x is small (in particular, it is smaller than x9). We use the Taylor series\\n            // expansion for e^x: 1 + x + (x^2 / 2!) + (x^3 / 3!) + ... + (x^n / n!).\\n\\n            int256 seriesSum = ONE_20; // The initial one in the sum, with 20 decimal places.\\n            int256 term; // Each term in the sum, where the nth term is (x^n / n!).\\n\\n            // The first term is simply x.\\n            term = x;\\n            seriesSum += term;\\n\\n            // Each term (x^n / n!) equals the previous one times x, divided by n. Since x is a fixed point number,\\n            // multiplying by it requires dividing by ONE_20, but dividing by the non-fixed point n values does not.\\n\\n            term = ((term * x) / ONE_20) / 2;\\n            seriesSum += term;\\n\\n            term = ((term * x) / ONE_20) / 3;\\n            seriesSum += term;\\n\\n            term = ((term * x) / ONE_20) / 4;\\n            seriesSum += term;\\n\\n            term = ((term * x) / ONE_20) / 5;\\n            seriesSum += term;\\n\\n            term = ((term * x) / ONE_20) / 6;\\n            seriesSum += term;\\n\\n            term = ((term * x) / ONE_20) / 7;\\n            seriesSum += term;\\n\\n            term = ((term * x) / ONE_20) / 8;\\n            seriesSum += term;\\n\\n            term = ((term * x) / ONE_20) / 9;\\n            seriesSum += term;\\n\\n            term = ((term * x) / ONE_20) / 10;\\n            seriesSum += term;\\n\\n            term = ((term * x) / ONE_20) / 11;\\n            seriesSum += term;\\n\\n            term = ((term * x) / ONE_20) / 12;\\n            seriesSum += term;\\n\\n            // 12 Taylor terms are sufficient for 18 decimal precision.\\n\\n            // We now have the first a_n (with no decimals), and the product of all other a_n present, and the Taylor\\n            // approximation of the exponentiation of the remainder (both with 20 decimals). All that remains is to multiply\\n            // all three (one 20 decimal fixed point multiplication, dividing by ONE_20, and one integer multiplication),\\n            // and then drop two digits to return an 18 decimal value.\\n\\n            return (((product * seriesSum) / ONE_20) * firstAN) / 100;\\n        }\\n    }\\n\\n    /**\\n     * @dev Natural logarithm (ln(a)) with signed 18 decimal fixed point argument.\\n     */\\n    function ln(int256 a) internal pure returns (int256) {\\n        unchecked {\\n            // The real natural logarithm is not defined for negative numbers or zero.\\n            require(a > 0, \\\"out of bounds\\\");\\n            if (LN_36_LOWER_BOUND < a && a < LN_36_UPPER_BOUND) {\\n                return _ln_36(a) / ONE_18;\\n            } else {\\n                return _ln(a);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Exponentiation (x^y) with unsigned 18 decimal fixed point base and exponent.\\n     *\\n     * Reverts if ln(x) * y is smaller than `MIN_NATURAL_EXPONENT`, or larger than `MAX_NATURAL_EXPONENT`.\\n     */\\n    function pow(uint256 x, uint256 y) internal pure returns (uint256) {\\n        unchecked {\\n            if (y == 0) {\\n                // We solve the 0^0 indetermination by making it equal one.\\n                return uint256(ONE_18);\\n            }\\n\\n            if (x == 0) {\\n                return 0;\\n            }\\n\\n            // Instead of computing x^y directly, we instead rely on the properties of logarithms and exponentiation to\\n            // arrive at that r`esult. In particular, exp(ln(x)) = x, and ln(x^y) = y * ln(x). This means\\n            // x^y = exp(y * ln(x)).\\n\\n            // The ln function takes a signed value, so we need to make sure x fits in the signed 256 bit range.\\n            require(x < 2 ** 255, \\\"x out of bounds\\\");\\n            int256 x_int256 = int256(x);\\n\\n            // We will compute y * ln(x) in a single step. Depending on the value of x, we can either use ln or ln_36. In\\n            // both cases, we leave the division by ONE_18 (due to fixed point multiplication) to the end.\\n\\n            // This prevents y * ln(x) from overflowing, and at the same time guarantees y fits in the signed 256 bit range.\\n            require(y < MILD_EXPONENT_BOUND, \\\"y out of bounds\\\");\\n            int256 y_int256 = int256(y);\\n\\n            int256 logx_times_y;\\n            if (LN_36_LOWER_BOUND < x_int256 && x_int256 < LN_36_UPPER_BOUND) {\\n                int256 ln_36_x = _ln_36(x_int256);\\n\\n                // ln_36_x has 36 decimal places, so multiplying by y_int256 isn't as straightforward, since we can't just\\n                // bring y_int256 to 36 decimal places, as it might overflow. Instead, we perform two 18 decimal\\n                // multiplications and add the results: one with the first 18 decimals of ln_36_x, and one with the\\n                // (downscaled) last 18 decimals.\\n                logx_times_y = ((ln_36_x / ONE_18) * y_int256 + ((ln_36_x % ONE_18) * y_int256) / ONE_18);\\n            } else {\\n                logx_times_y = _ln(x_int256) * y_int256;\\n            }\\n            logx_times_y /= ONE_18;\\n\\n            // Finally, we compute exp(y * ln(x)) to arrive at x^y\\n            require(\\n                MIN_NATURAL_EXPONENT <= logx_times_y && logx_times_y <= MAX_NATURAL_EXPONENT,\\n                \\\"product out of bounds\\\"\\n            );\\n\\n            return uint256(exp(logx_times_y));\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal natural logarithm (ln(a)) with signed 18 decimal fixed point argument.\\n     */\\n    function _ln(int256 a) private pure returns (int256) {\\n        unchecked {\\n            if (a < ONE_18) {\\n                // Since ln(a^k) = k * ln(a), we can compute ln(a) as ln(a) = ln((1/a)^(-1)) = - ln((1/a)). If a is less\\n                // than one, 1/a will be greater than one, and this if statement will not be entered in the recursive call.\\n                // Fixed point division requires multiplying by ONE_18.\\n                return (-_ln((ONE_18 * ONE_18) / a));\\n            }\\n\\n            // First, we use the fact that ln^(a * b) = ln(a) + ln(b) to decompose ln(a) into a sum of powers of two, which\\n            // we call x_n, where x_n == 2^(7 - n), which are the natural logarithm of precomputed quantities a_n (that is,\\n            // ln(a_n) = x_n). We choose the first x_n, x0, to equal 2^7 because the exponential of all larger powers cannot\\n            // be represented as 18 fixed point decimal numbers in 256 bits, and are therefore larger than a.\\n            // At the end of this process we will have the sum of all x_n = ln(a_n) that apply, and the remainder of this\\n            // decomposition, which will be lower than the smallest a_n.\\n            // ln(a) = k_0 * x_0 + k_1 * x_1 + ... + k_n * x_n + ln(remainder), where each k_n equals either 0 or 1.\\n            // We mutate a by subtracting a_n, making it the remainder of the decomposition.\\n\\n            // For reasons related to how `exp` works, the first two a_n (e^(2^7) and e^(2^6)) are not stored as fixed point\\n            // numbers with 18 decimals, but instead as plain integers with 0 decimals, so we need to multiply them by\\n            // ONE_18 to convert them to fixed point.\\n            // For each a_n, we test if that term is present in the decomposition (if a is larger than it), and if so divide\\n            // by it and compute the accumulated sum.\\n\\n            int256 sum = 0;\\n            if (a >= a0 * ONE_18) {\\n                a /= a0; // Integer, not fixed point division\\n                sum += x0;\\n            }\\n\\n            if (a >= a1 * ONE_18) {\\n                a /= a1; // Integer, not fixed point division\\n                sum += x1;\\n            }\\n\\n            // All other a_n and x_n are stored as 20 digit fixed point numbers, so we convert the sum and a to this format.\\n            sum *= 100;\\n            a *= 100;\\n\\n            // Because further a_n are  20 digit fixed point numbers, we multiply by ONE_20 when dividing by them.\\n\\n            if (a >= a2) {\\n                a = (a * ONE_20) / a2;\\n                sum += x2;\\n            }\\n\\n            if (a >= a3) {\\n                a = (a * ONE_20) / a3;\\n                sum += x3;\\n            }\\n\\n            if (a >= a4) {\\n                a = (a * ONE_20) / a4;\\n                sum += x4;\\n            }\\n\\n            if (a >= a5) {\\n                a = (a * ONE_20) / a5;\\n                sum += x5;\\n            }\\n\\n            if (a >= a6) {\\n                a = (a * ONE_20) / a6;\\n                sum += x6;\\n            }\\n\\n            if (a >= a7) {\\n                a = (a * ONE_20) / a7;\\n                sum += x7;\\n            }\\n\\n            if (a >= a8) {\\n                a = (a * ONE_20) / a8;\\n                sum += x8;\\n            }\\n\\n            if (a >= a9) {\\n                a = (a * ONE_20) / a9;\\n                sum += x9;\\n            }\\n\\n            if (a >= a10) {\\n                a = (a * ONE_20) / a10;\\n                sum += x10;\\n            }\\n\\n            if (a >= a11) {\\n                a = (a * ONE_20) / a11;\\n                sum += x11;\\n            }\\n\\n            // a is now a small number (smaller than a_11, which roughly equals 1.06). This means we can use a Taylor series\\n            // that converges rapidly for values of `a` close to one - the same one used in ln_36.\\n            // Let z = (a - 1) / (a + 1).\\n            // ln(a) = 2 * (z + z^3 / 3 + z^5 / 5 + z^7 / 7 + ... + z^(2 * n + 1) / (2 * n + 1))\\n\\n            // Recall that 20 digit fixed point division requires multiplying by ONE_20, and multiplication requires\\n            // division by ONE_20.\\n            int256 z = ((a - ONE_20) * ONE_20) / (a + ONE_20);\\n            int256 z_squared = (z * z) / ONE_20;\\n\\n            // num is the numerator of the series: the z^(2 * n + 1) term\\n            int256 num = z;\\n\\n            // seriesSum holds the accumulated sum of each term in the series, starting with the initial z\\n            int256 seriesSum = num;\\n\\n            // In each step, the numerator is multiplied by z^2\\n            num = (num * z_squared) / ONE_20;\\n            seriesSum += num / 3;\\n\\n            num = (num * z_squared) / ONE_20;\\n            seriesSum += num / 5;\\n\\n            num = (num * z_squared) / ONE_20;\\n            seriesSum += num / 7;\\n\\n            num = (num * z_squared) / ONE_20;\\n            seriesSum += num / 9;\\n\\n            num = (num * z_squared) / ONE_20;\\n            seriesSum += num / 11;\\n\\n            // 6 Taylor terms are sufficient for 36 decimal precision.\\n\\n            // Finally, we multiply by 2 (non fixed point) to compute ln(remainder)\\n            seriesSum *= 2;\\n\\n            // We now have the sum of all x_n present, and the Taylor approximation of the logarithm of the remainder (both\\n            // with 20 decimals). All that remains is to sum these two, and then drop two digits to return a 18 decimal\\n            // value.\\n\\n            return (sum + seriesSum) / 100;\\n        }\\n    }\\n\\n    /**\\n     * @dev Intrnal high precision (36 decimal places) natural logarithm (ln(x)) with signed 18 decimal fixed point argument,\\n     * for x close to one.\\n     *\\n     * Should only be used if x is between LN_36_LOWER_BOUND and LN_36_UPPER_BOUND.\\n     */\\n    function _ln_36(int256 x) private pure returns (int256) {\\n        unchecked {\\n            // Since ln(1) = 0, a value of x close to one will yield a very small result, which makes using 36 digits\\n            // worthwhile.\\n\\n            // First, we transform x to a 36 digit fixed point value.\\n            x *= ONE_18;\\n\\n            // We will use the following Taylor expansion, which converges very rapidly. Let z = (x - 1) / (x + 1).\\n            // ln(x) = 2 * (z + z^3 / 3 + z^5 / 5 + z^7 / 7 + ... + z^(2 * n + 1) / (2 * n + 1))\\n\\n            // Recall that 36 digit fixed point division requires multiplying by ONE_36, and multiplication requires\\n            // division by ONE_36.\\n            int256 z = ((x - ONE_36) * ONE_36) / (x + ONE_36);\\n            int256 z_squared = (z * z) / ONE_36;\\n\\n            // num is the numerator of the series: the z^(2 * n + 1) term\\n            int256 num = z;\\n\\n            // seriesSum holds the accumulated sum of each term in the series, starting with the initial z\\n            int256 seriesSum = num;\\n\\n            // In each step, the numerator is multiplied by z^2\\n            num = (num * z_squared) / ONE_36;\\n            seriesSum += num / 3;\\n\\n            num = (num * z_squared) / ONE_36;\\n            seriesSum += num / 5;\\n\\n            num = (num * z_squared) / ONE_36;\\n            seriesSum += num / 7;\\n\\n            num = (num * z_squared) / ONE_36;\\n            seriesSum += num / 9;\\n\\n            num = (num * z_squared) / ONE_36;\\n            seriesSum += num / 11;\\n\\n            num = (num * z_squared) / ONE_36;\\n            seriesSum += num / 13;\\n\\n            num = (num * z_squared) / ONE_36;\\n            seriesSum += num / 15;\\n\\n            // 8 Taylor terms are sufficient for 36 decimal precision.\\n\\n            // All that remains is multiplying by 2 (non fixed point).\\n            return seriesSum * 2;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x844f812a1d2528fbe65c1fbaf1c2fe022658b3ecc29385217b6517715d801b94\",\"license\":\"GPL-3.0-or-later\"},\"@pendle/core-v2/contracts/core/libraries/math/PMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\n/* solhint-disable private-vars-leading-underscore, reason-string */\\n\\nlibrary PMath {\\n    uint256 internal constant ONE = 1e18; // 18 decimal places\\n    int256 internal constant IONE = 1e18; // 18 decimal places\\n\\n    function subMax0(uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            return (a >= b ? a - b : 0);\\n        }\\n    }\\n\\n    function subNoNeg(int256 a, int256 b) internal pure returns (int256) {\\n        require(a >= b, \\\"negative\\\");\\n        return a - b; // no unchecked since if b is very negative, a - b might overflow\\n    }\\n\\n    function mulDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 product = a * b;\\n        unchecked {\\n            return product / ONE;\\n        }\\n    }\\n\\n    function mulDown(int256 a, int256 b) internal pure returns (int256) {\\n        int256 product = a * b;\\n        unchecked {\\n            return product / IONE;\\n        }\\n    }\\n\\n    function divDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 aInflated = a * ONE;\\n        unchecked {\\n            return aInflated / b;\\n        }\\n    }\\n\\n    function divDown(int256 a, int256 b) internal pure returns (int256) {\\n        int256 aInflated = a * IONE;\\n        unchecked {\\n            return aInflated / b;\\n        }\\n    }\\n\\n    function rawDivUp(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a + b - 1) / b;\\n    }\\n\\n    // @author Uniswap\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    function square(uint256 x) internal pure returns (uint256) {\\n        return x * x;\\n    }\\n\\n    function squareDown(uint256 x) internal pure returns (uint256) {\\n        return mulDown(x, x);\\n    }\\n\\n    function abs(int256 x) internal pure returns (uint256) {\\n        return uint256(x > 0 ? x : -x);\\n    }\\n\\n    function neg(int256 x) internal pure returns (int256) {\\n        return x * (-1);\\n    }\\n\\n    function neg(uint256 x) internal pure returns (int256) {\\n        return Int(x) * (-1);\\n    }\\n\\n    function max(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return (x > y ? x : y);\\n    }\\n\\n    function max(int256 x, int256 y) internal pure returns (int256) {\\n        return (x > y ? x : y);\\n    }\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return (x < y ? x : y);\\n    }\\n\\n    function min(int256 x, int256 y) internal pure returns (int256) {\\n        return (x < y ? x : y);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                               SIGNED CASTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function Int(uint256 x) internal pure returns (int256) {\\n        require(x <= uint256(type(int256).max));\\n        return int256(x);\\n    }\\n\\n    function Int128(int256 x) internal pure returns (int128) {\\n        require(type(int128).min <= x && x <= type(int128).max);\\n        return int128(x);\\n    }\\n\\n    function Int128(uint256 x) internal pure returns (int128) {\\n        return Int128(Int(x));\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                               UNSIGNED CASTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function Uint(int256 x) internal pure returns (uint256) {\\n        require(x >= 0);\\n        return uint256(x);\\n    }\\n\\n    function Uint32(uint256 x) internal pure returns (uint32) {\\n        require(x <= type(uint32).max);\\n        return uint32(x);\\n    }\\n\\n    function Uint64(uint256 x) internal pure returns (uint64) {\\n        require(x <= type(uint64).max);\\n        return uint64(x);\\n    }\\n\\n    function Uint112(uint256 x) internal pure returns (uint112) {\\n        require(x <= type(uint112).max);\\n        return uint112(x);\\n    }\\n\\n    function Uint96(uint256 x) internal pure returns (uint96) {\\n        require(x <= type(uint96).max);\\n        return uint96(x);\\n    }\\n\\n    function Uint128(uint256 x) internal pure returns (uint128) {\\n        require(x <= type(uint128).max);\\n        return uint128(x);\\n    }\\n\\n    function Uint192(uint256 x) internal pure returns (uint192) {\\n        require(x <= type(uint192).max);\\n        return uint192(x);\\n    }\\n\\n    function isAApproxB(uint256 a, uint256 b, uint256 eps) internal pure returns (bool) {\\n        return mulDown(b, ONE - eps) <= a && a <= mulDown(b, ONE + eps);\\n    }\\n\\n    function isAGreaterApproxB(uint256 a, uint256 b, uint256 eps) internal pure returns (bool) {\\n        return a >= b && a <= mulDown(b, ONE + eps);\\n    }\\n\\n    function isASmallerApproxB(uint256 a, uint256 b, uint256 eps) internal pure returns (bool) {\\n        return a <= b && a >= mulDown(b, ONE - eps);\\n    }\\n}\\n\",\"keccak256\":\"0x22d2a1e684ea9fe01ad81fd316a721a9ed51f8d93b4889546f612541d2d0f6e8\",\"license\":\"GPL-3.0-or-later\"},\"@pendle/core-v2/contracts/interfaces/IPGauge.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\ninterface IPGauge {\\n    function totalActiveSupply() external view returns (uint256);\\n\\n    function activeBalance(address user) external view returns (uint256);\\n\\n    // only available for newer factories. please check the verified contracts\\n    event RedeemRewards(address indexed user, uint256[] rewardsOut);\\n}\\n\",\"keccak256\":\"0x4ccb46450af0aa70f556b3e9e15c06a50ddbc9fe3543a013577839f2e43322c4\",\"license\":\"GPL-3.0-or-later\"},\"@pendle/core-v2/contracts/interfaces/IPInterestManagerYT.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\ninterface IPInterestManagerYT {\\n    event CollectInterestFee(uint256 amountInterestFee);\\n\\n    function userInterest(address user) external view returns (uint128 lastPYIndex, uint128 accruedInterest);\\n}\\n\",\"keccak256\":\"0x56228298c383a030df33bcf4430ec63ea9ed7e96c5bbf2f8195f179bc958841a\",\"license\":\"GPL-3.0-or-later\"},\"@pendle/core-v2/contracts/interfaces/IPMarket.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./IPPrincipalToken.sol\\\";\\nimport \\\"./IPYieldToken.sol\\\";\\nimport \\\"./IStandardizedYield.sol\\\";\\nimport \\\"./IPGauge.sol\\\";\\nimport \\\"../core/Market/MarketMathCore.sol\\\";\\n\\ninterface IPMarket is IERC20Metadata, IPGauge {\\n    event Mint(address indexed receiver, uint256 netLpMinted, uint256 netSyUsed, uint256 netPtUsed);\\n\\n    event Burn(\\n        address indexed receiverSy,\\n        address indexed receiverPt,\\n        uint256 netLpBurned,\\n        uint256 netSyOut,\\n        uint256 netPtOut\\n    );\\n\\n    event Swap(\\n        address indexed caller,\\n        address indexed receiver,\\n        int256 netPtOut,\\n        int256 netSyOut,\\n        uint256 netSyFee,\\n        uint256 netSyToReserve\\n    );\\n\\n    event UpdateImpliedRate(uint256 indexed timestamp, uint256 lnLastImpliedRate);\\n\\n    event IncreaseObservationCardinalityNext(\\n        uint16 observationCardinalityNextOld,\\n        uint16 observationCardinalityNextNew\\n    );\\n\\n    function mint(\\n        address receiver,\\n        uint256 netSyDesired,\\n        uint256 netPtDesired\\n    ) external returns (uint256 netLpOut, uint256 netSyUsed, uint256 netPtUsed);\\n\\n    function burn(\\n        address receiverSy,\\n        address receiverPt,\\n        uint256 netLpToBurn\\n    ) external returns (uint256 netSyOut, uint256 netPtOut);\\n\\n    function swapExactPtForSy(\\n        address receiver,\\n        uint256 exactPtIn,\\n        bytes calldata data\\n    ) external returns (uint256 netSyOut, uint256 netSyFee);\\n\\n    function swapSyForExactPt(\\n        address receiver,\\n        uint256 exactPtOut,\\n        bytes calldata data\\n    ) external returns (uint256 netSyIn, uint256 netSyFee);\\n\\n    function redeemRewards(address user) external returns (uint256[] memory);\\n\\n    function readState(address router) external view returns (MarketState memory market);\\n\\n    function observe(uint32[] memory secondsAgos) external view returns (uint216[] memory lnImpliedRateCumulative);\\n\\n    function increaseObservationsCardinalityNext(uint16 cardinalityNext) external;\\n\\n    function readTokens() external view returns (IStandardizedYield _SY, IPPrincipalToken _PT, IPYieldToken _YT);\\n\\n    function getRewardTokens() external view returns (address[] memory);\\n\\n    function isExpired() external view returns (bool);\\n\\n    function expiry() external view returns (uint256);\\n\\n    function observations(\\n        uint256 index\\n    ) external view returns (uint32 blockTimestamp, uint216 lnImpliedRateCumulative, bool initialized);\\n\\n    function _storage()\\n        external\\n        view\\n        returns (\\n            int128 totalPt,\\n            int128 totalSy,\\n            uint96 lastLnImpliedRate,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext\\n        );\\n}\\n\",\"keccak256\":\"0xcae6ee152a68790029af41459c47cdd44964467f47a855caee78394ea09ad8df\",\"license\":\"GPL-3.0-or-later\"},\"@pendle/core-v2/contracts/interfaces/IPPrincipalToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IPPrincipalToken is IERC20Metadata {\\n    function burnByYT(address user, uint256 amount) external;\\n\\n    function mintByYT(address user, uint256 amount) external;\\n\\n    function initialize(address _YT) external;\\n\\n    function SY() external view returns (address);\\n\\n    function YT() external view returns (address);\\n\\n    function factory() external view returns (address);\\n\\n    function expiry() external view returns (uint256);\\n\\n    function isExpired() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0879ef0ffafe2ed731c7fe2a0281b602840c4bc715acf4e701ca51a17876fd0f\",\"license\":\"GPL-3.0-or-later\"},\"@pendle/core-v2/contracts/interfaces/IPYieldToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./IRewardManager.sol\\\";\\nimport \\\"./IPInterestManagerYT.sol\\\";\\n\\ninterface IPYieldToken is IERC20Metadata, IRewardManager, IPInterestManagerYT {\\n    event NewInterestIndex(uint256 indexed newIndex);\\n\\n    event Mint(\\n        address indexed caller,\\n        address indexed receiverPT,\\n        address indexed receiverYT,\\n        uint256 amountSyToMint,\\n        uint256 amountPYOut\\n    );\\n\\n    event Burn(address indexed caller, address indexed receiver, uint256 amountPYToRedeem, uint256 amountSyOut);\\n\\n    event RedeemRewards(address indexed user, uint256[] amountRewardsOut);\\n\\n    event RedeemInterest(address indexed user, uint256 interestOut);\\n\\n    event CollectRewardFee(address indexed rewardToken, uint256 amountRewardFee);\\n\\n    function mintPY(address receiverPT, address receiverYT) external returns (uint256 amountPYOut);\\n\\n    function redeemPY(address receiver) external returns (uint256 amountSyOut);\\n\\n    function redeemPYMulti(\\n        address[] calldata receivers,\\n        uint256[] calldata amountPYToRedeems\\n    ) external returns (uint256[] memory amountSyOuts);\\n\\n    function redeemDueInterestAndRewards(\\n        address user,\\n        bool redeemInterest,\\n        bool redeemRewards\\n    ) external returns (uint256 interestOut, uint256[] memory rewardsOut);\\n\\n    function rewardIndexesCurrent() external returns (uint256[] memory);\\n\\n    function pyIndexCurrent() external returns (uint256);\\n\\n    function pyIndexStored() external view returns (uint256);\\n\\n    function getRewardTokens() external view returns (address[] memory);\\n\\n    function SY() external view returns (address);\\n\\n    function PT() external view returns (address);\\n\\n    function factory() external view returns (address);\\n\\n    function expiry() external view returns (uint256);\\n\\n    function isExpired() external view returns (bool);\\n\\n    function doCacheIndexSameBlock() external view returns (bool);\\n\\n    function pyIndexLastUpdatedBlock() external view returns (uint128);\\n}\\n\",\"keccak256\":\"0xcf0a3e1860a9f7b979723d8585196664dc0aa0258a9f4d71170d86e1ffdfb93d\",\"license\":\"GPL-3.0-or-later\"},\"@pendle/core-v2/contracts/interfaces/IRewardManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\ninterface IRewardManager {\\n    function userReward(address token, address user) external view returns (uint128 index, uint128 accrued);\\n}\\n\",\"keccak256\":\"0x8dfa58280700390049f9bdc27bcc6daa9f34aa53fba2d47a5c5bb3d1462ca604\",\"license\":\"GPL-3.0-or-later\"},\"@pendle/core-v2/contracts/interfaces/IStandardizedYield.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n/*\\n * MIT License\\n * ===========\\n *\\n * Permission is hereby granted, free of charge, to any person obtaining a copy\\n * of this software and associated documentation files (the \\\"Software\\\"), to deal\\n * in the Software without restriction, including without limitation the rights\\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n * copies of the Software, and to permit persons to whom the Software is\\n * furnished to do so, subject to the following conditions:\\n *\\n * The above copyright notice and this permission notice shall be included in all\\n * copies or substantial portions of the Software.\\n *\\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n */\\n\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IStandardizedYield is IERC20Metadata {\\n    /// @dev Emitted when any base tokens is deposited to mint shares\\n    event Deposit(\\n        address indexed caller,\\n        address indexed receiver,\\n        address indexed tokenIn,\\n        uint256 amountDeposited,\\n        uint256 amountSyOut\\n    );\\n\\n    /// @dev Emitted when any shares are redeemed for base tokens\\n    event Redeem(\\n        address indexed caller,\\n        address indexed receiver,\\n        address indexed tokenOut,\\n        uint256 amountSyToRedeem,\\n        uint256 amountTokenOut\\n    );\\n\\n    /// @dev check `assetInfo()` for more information\\n    enum AssetType {\\n        TOKEN,\\n        LIQUIDITY\\n    }\\n\\n    /// @dev Emitted when (`user`) claims their rewards\\n    event ClaimRewards(address indexed user, address[] rewardTokens, uint256[] rewardAmounts);\\n\\n    /**\\n     * @notice mints an amount of shares by depositing a base token.\\n     * @param receiver shares recipient address\\n     * @param tokenIn address of the base tokens to mint shares\\n     * @param amountTokenToDeposit amount of base tokens to be transferred from (`msg.sender`)\\n     * @param minSharesOut reverts if amount of shares minted is lower than this\\n     * @return amountSharesOut amount of shares minted\\n     * @dev Emits a {Deposit} event\\n     *\\n     * Requirements:\\n     * - (`tokenIn`) must be a valid base token.\\n     */\\n    function deposit(\\n        address receiver,\\n        address tokenIn,\\n        uint256 amountTokenToDeposit,\\n        uint256 minSharesOut\\n    ) external payable returns (uint256 amountSharesOut);\\n\\n    /**\\n     * @notice redeems an amount of base tokens by burning some shares\\n     * @param receiver recipient address\\n     * @param amountSharesToRedeem amount of shares to be burned\\n     * @param tokenOut address of the base token to be redeemed\\n     * @param minTokenOut reverts if amount of base token redeemed is lower than this\\n     * @param burnFromInternalBalance if true, burns from balance of `address(this)`, otherwise burns from `msg.sender`\\n     * @return amountTokenOut amount of base tokens redeemed\\n     * @dev Emits a {Redeem} event\\n     *\\n     * Requirements:\\n     * - (`tokenOut`) must be a valid base token.\\n     */\\n    function redeem(\\n        address receiver,\\n        uint256 amountSharesToRedeem,\\n        address tokenOut,\\n        uint256 minTokenOut,\\n        bool burnFromInternalBalance\\n    ) external returns (uint256 amountTokenOut);\\n\\n    /**\\n     * @notice exchangeRate * syBalance / 1e18 must return the asset balance of the account\\n     * @notice vice-versa, if a user uses some amount of tokens equivalent to X asset, the amount of sy\\n     he can mint must be X * exchangeRate / 1e18\\n     * @dev SYUtils's assetToSy & syToAsset should be used instead of raw multiplication\\n     & division\\n     */\\n    function exchangeRate() external view returns (uint256 res);\\n\\n    /**\\n     * @notice claims reward for (`user`)\\n     * @param user the user receiving their rewards\\n     * @return rewardAmounts an array of reward amounts in the same order as `getRewardTokens`\\n     * @dev\\n     * Emits a `ClaimRewards` event\\n     * See {getRewardTokens} for list of reward tokens\\n     */\\n    function claimRewards(address user) external returns (uint256[] memory rewardAmounts);\\n\\n    /**\\n     * @notice get the amount of unclaimed rewards for (`user`)\\n     * @param user the user to check for\\n     * @return rewardAmounts an array of reward amounts in the same order as `getRewardTokens`\\n     */\\n    function accruedRewards(address user) external view returns (uint256[] memory rewardAmounts);\\n\\n    function rewardIndexesCurrent() external returns (uint256[] memory indexes);\\n\\n    function rewardIndexesStored() external view returns (uint256[] memory indexes);\\n\\n    /**\\n     * @notice returns the list of reward token addresses\\n     */\\n    function getRewardTokens() external view returns (address[] memory);\\n\\n    /**\\n     * @notice returns the address of the underlying yield token\\n     */\\n    function yieldToken() external view returns (address);\\n\\n    /**\\n     * @notice returns all tokens that can mint this SY\\n     */\\n    function getTokensIn() external view returns (address[] memory res);\\n\\n    /**\\n     * @notice returns all tokens that can be redeemed by this SY\\n     */\\n    function getTokensOut() external view returns (address[] memory res);\\n\\n    function isValidTokenIn(address token) external view returns (bool);\\n\\n    function isValidTokenOut(address token) external view returns (bool);\\n\\n    function previewDeposit(\\n        address tokenIn,\\n        uint256 amountTokenToDeposit\\n    ) external view returns (uint256 amountSharesOut);\\n\\n    function previewRedeem(\\n        address tokenOut,\\n        uint256 amountSharesToRedeem\\n    ) external view returns (uint256 amountTokenOut);\\n\\n    /**\\n     * @notice This function contains information to interpret what the asset is\\n     * @return assetType the type of the asset (0 for ERC20 tokens, 1 for AMM liquidity tokens,\\n        2 for bridged yield bearing tokens like wstETH, rETH on Arbi whose the underlying asset doesn't exist on the chain)\\n     * @return assetAddress the address of the asset\\n     * @return assetDecimals the decimals of the asset\\n     */\\n    function assetInfo() external view returns (AssetType assetType, address assetAddress, uint8 assetDecimals);\\n}\\n\",\"keccak256\":\"0xe85f1526becc30e49ec0d4a42f01c54cc655fb1f815df2c71684fb76c9214ba5\",\"license\":\"GPL-3.0-or-later\"},\"@pendle/core-v2/contracts/oracles/PendleLpOracleLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport \\\"./PendlePYOracleLib.sol\\\";\\n\\nlibrary PendleLpOracleLib {\\n    using PendlePYOracleLib for IPMarket;\\n    using PMath for uint256;\\n    using PMath for int256;\\n    using MarketMathCore for MarketState;\\n\\n    /**\\n      * This function returns the approximated twap rate LP/asset on market, but take into account the current rate of SY\\n     This is to account for special cases where underlying asset becomes insolvent and has decreasing exchangeRate\\n     * @param market market to get rate from\\n     * @param duration twap duration\\n     */\\n    function getLpToAssetRate(IPMarket market, uint32 duration) internal view returns (uint256) {\\n        (uint256 syIndex, uint256 pyIndex) = market.getSYandPYIndexCurrent();\\n        uint256 lpToAssetRateRaw = _getLpToAssetRateRaw(market, duration, pyIndex);\\n        if (syIndex >= pyIndex) {\\n            return lpToAssetRateRaw;\\n        } else {\\n            return (lpToAssetRateRaw * syIndex) / pyIndex;\\n        }\\n    }\\n\\n    /**\\n      * This function returns the approximated twap rate LP/asset on market, but take into account the current rate of SY\\n     This is to account for special cases where underlying asset becomes insolvent and has decreasing exchangeRate\\n     * @param market market to get rate from\\n     * @param duration twap duration\\n     */\\n    function getLpToSyRate(IPMarket market, uint32 duration) internal view returns (uint256) {\\n        (uint256 syIndex, uint256 pyIndex) = market.getSYandPYIndexCurrent();\\n        uint256 lpToAssetRateRaw = _getLpToAssetRateRaw(market, duration, pyIndex);\\n        if (syIndex >= pyIndex) {\\n            return lpToAssetRateRaw.divDown(syIndex);\\n        } else {\\n            return lpToAssetRateRaw.divDown(pyIndex);\\n        }\\n    }\\n\\n    function _getLpToAssetRateRaw(\\n        IPMarket market,\\n        uint32 duration,\\n        uint256 pyIndex\\n    ) private view returns (uint256 lpToAssetRateRaw) {\\n        MarketState memory state = market.readState(address(0));\\n\\n        int256 totalHypotheticalAsset;\\n        if (state.expiry <= block.timestamp) {\\n            // 1 PT = 1 Asset post-expiry\\n            totalHypotheticalAsset = state.totalPt + PYIndexLib.syToAsset(PYIndex.wrap(pyIndex), state.totalSy);\\n        } else {\\n            MarketPreCompute memory comp = state.getMarketPreCompute(PYIndex.wrap(pyIndex), block.timestamp);\\n\\n            (int256 rateOracle, int256 rateHypTrade) = _getPtRatesRaw(market, state, duration);\\n            int256 cParam = LogExpMath.exp(comp.rateScalar.mulDown((rateOracle - comp.rateAnchor)));\\n\\n            int256 tradeSize = (cParam.mulDown(comp.totalAsset) - state.totalPt).divDown(\\n                PMath.IONE + cParam.divDown(rateHypTrade)\\n            );\\n\\n            totalHypotheticalAsset =\\n                comp.totalAsset -\\n                tradeSize.divDown(rateHypTrade) +\\n                (state.totalPt + tradeSize).divDown(rateOracle);\\n        }\\n\\n        lpToAssetRateRaw = totalHypotheticalAsset.divDown(state.totalLp).Uint();\\n    }\\n\\n    function _getPtRatesRaw(\\n        IPMarket market,\\n        MarketState memory state,\\n        uint32 duration\\n    ) private view returns (int256 rateOracle, int256 rateHypTrade) {\\n        uint256 lnImpliedRate = market.getMarketLnImpliedRate(duration);\\n        uint256 timeToExpiry = state.expiry - block.timestamp;\\n        rateOracle = MarketMathCore._getExchangeRateFromImpliedRate(lnImpliedRate, timeToExpiry);\\n\\n        int256 rateLastTrade = MarketMathCore._getExchangeRateFromImpliedRate(state.lastLnImpliedRate, timeToExpiry);\\n        rateHypTrade = (rateLastTrade + rateOracle) / 2;\\n    }\\n}\\n\",\"keccak256\":\"0xe3593acbbe7120bb2ee12591b57e2a53ae8f41d74e824ca9ede58b053cd28a8b\",\"license\":\"GPL-3.0-or-later\"},\"@pendle/core-v2/contracts/oracles/PendlePYOracleLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IPMarket.sol\\\";\\nimport \\\"../core/libraries/math/PMath.sol\\\";\\n\\n// This library can & should be integrated directly for optimal gas usage.\\n// If you prefer not to integrate it directly, the PendlePtOracle contract (a pre-deployed version of this contract) can be used.\\nlibrary PendlePYOracleLib {\\n    using PMath for uint256;\\n    using PMath for int256;\\n\\n    /**\\n     * This function returns the twap rate PT/Asset on market, but take into account the current rate of SY\\n     This is to account for special cases where underlying asset becomes insolvent and has decreasing exchangeRate\\n     * @param market market to get rate from\\n     * @param duration twap duration\\n     */\\n    function getPtToAssetRate(IPMarket market, uint32 duration) internal view returns (uint256) {\\n        (uint256 syIndex, uint256 pyIndex) = getSYandPYIndexCurrent(market);\\n        if (syIndex >= pyIndex) {\\n            return getPtToAssetRateRaw(market, duration);\\n        } else {\\n            return (getPtToAssetRateRaw(market, duration) * syIndex) / pyIndex;\\n        }\\n    }\\n\\n    /**\\n     * This function returns the twap rate YT/Asset on market, but take into account the current rate of SY\\n     This is to account for special cases where underlying asset becomes insolvent and has decreasing exchangeRate\\n     * @param market market to get rate from\\n     * @param duration twap duration\\n     */\\n    function getYtToAssetRate(IPMarket market, uint32 duration) internal view returns (uint256) {\\n        (uint256 syIndex, uint256 pyIndex) = getSYandPYIndexCurrent(market);\\n        if (syIndex >= pyIndex) {\\n            return getYtToAssetRateRaw(market, duration);\\n        } else {\\n            return (getYtToAssetRateRaw(market, duration) * syIndex) / pyIndex;\\n        }\\n    }\\n\\n    /// @notice Similar to getPtToAsset but returns the rate in SY instead\\n    function getPtToSyRate(IPMarket market, uint32 duration) internal view returns (uint256) {\\n        (uint256 syIndex, uint256 pyIndex) = getSYandPYIndexCurrent(market);\\n        if (syIndex >= pyIndex) {\\n            return getPtToAssetRateRaw(market, duration).divDown(syIndex);\\n        } else {\\n            return getPtToAssetRateRaw(market, duration).divDown(pyIndex);\\n        }\\n    }\\n\\n    /// @notice Similar to getPtToAsset but returns the rate in SY instead\\n    function getYtToSyRate(IPMarket market, uint32 duration) internal view returns (uint256) {\\n        (uint256 syIndex, uint256 pyIndex) = getSYandPYIndexCurrent(market);\\n        if (syIndex >= pyIndex) {\\n            return getYtToAssetRateRaw(market, duration).divDown(syIndex);\\n        } else {\\n            return getYtToAssetRateRaw(market, duration).divDown(pyIndex);\\n        }\\n    }\\n\\n    /// @notice returns the raw rate without taking into account whether SY is solvent\\n    function getPtToAssetRateRaw(IPMarket market, uint32 duration) internal view returns (uint256) {\\n        uint256 expiry = market.expiry();\\n\\n        if (expiry <= block.timestamp) {\\n            return PMath.ONE;\\n        } else {\\n            uint256 lnImpliedRate = getMarketLnImpliedRate(market, duration);\\n            uint256 timeToExpiry = expiry - block.timestamp;\\n            uint256 assetToPtRate = MarketMathCore._getExchangeRateFromImpliedRate(lnImpliedRate, timeToExpiry).Uint();\\n            return PMath.ONE.divDown(assetToPtRate);\\n        }\\n    }\\n\\n    /// @notice returns the raw rate without taking into account whether SY is solvent\\n    function getYtToAssetRateRaw(IPMarket market, uint32 duration) internal view returns (uint256) {\\n        return PMath.ONE - getPtToAssetRateRaw(market, duration);\\n    }\\n\\n    function getSYandPYIndexCurrent(IPMarket market) internal view returns (uint256 syIndex, uint256 pyIndex) {\\n        (IStandardizedYield SY, , IPYieldToken YT) = market.readTokens();\\n\\n        syIndex = SY.exchangeRate();\\n        uint256 pyIndexStored = YT.pyIndexStored();\\n\\n        if (YT.doCacheIndexSameBlock() && YT.pyIndexLastUpdatedBlock() == block.number) {\\n            pyIndex = pyIndexStored;\\n        } else {\\n            pyIndex = PMath.max(syIndex, pyIndexStored);\\n        }\\n    }\\n\\n    function getMarketLnImpliedRate(IPMarket market, uint32 duration) internal view returns (uint256) {\\n        uint32[] memory durations = new uint32[](2);\\n        durations[0] = duration;\\n\\n        uint216[] memory lnImpliedRateCumulative = market.observe(durations);\\n        return (lnImpliedRateCumulative[1] - lnImpliedRateCumulative[0]) / duration;\\n    }\\n}\\n\",\"keccak256\":\"0x4898143e60da86e86cd79019d6c6b5606a3b23f692c7c6e76ae1683c89afd6e4\",\"license\":\"GPL-3.0-or-later\"},\"@pendle/core-v2/contracts/oracles/samples/BoringLpSeller.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\nimport \\\"../../interfaces/IPMarket.sol\\\";\\n\\nabstract contract BoringLpSeller {\\n    bytes internal constant EMPTY_BYTES = abi.encode();\\n\\n    constructor() {}\\n\\n    /// @dev slippage control should be done on a higher level with the returned parameter\\n    /// @param market market address\\n    /// @param netLpIn amount of Lp to sell\\n    /// @param tokenOut should be included in SY.getTokensOut()\\n    /// @return netTokenOut amount of token out\\n    function _sellLpForToken(address market, uint256 netLpIn, address tokenOut) internal returns (uint256 netTokenOut) {\\n        (IStandardizedYield SY, IPPrincipalToken PT, IPYieldToken YT) = IPMarket(market).readTokens();\\n\\n        IPMarket(market).transfer(market, netLpIn);\\n\\n        uint256 netSyToRedeem;\\n\\n        if (PT.isExpired()) {\\n            (uint256 netSyRemoved, ) = IPMarket(market).burn(address(SY), address(YT), netLpIn);\\n            uint256 netSyFromPt = YT.redeemPY(address(SY));\\n            netSyToRedeem = netSyRemoved + netSyFromPt;\\n        } else {\\n            (uint256 netSyRemoved, uint256 netPtRemoved) = IPMarket(market).burn(address(SY), market, netLpIn);\\n            (uint256 netSySwappedOut, ) = IPMarket(market).swapExactPtForSy(address(SY), netPtRemoved, EMPTY_BYTES);\\n            netSyToRedeem = netSyRemoved + netSySwappedOut;\\n        }\\n\\n        netTokenOut = SY.redeem(address(this), netSyToRedeem, tokenOut, 0, true);\\n    }\\n}\\n\",\"keccak256\":\"0x8a5fa812165a84c38ba480c2a0adee5c16438b5a4cc447254228c59362544fb4\",\"license\":\"GPL-3.0-or-later\"},\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\",\"keccak256\":\"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd\",\"license\":\"GPL-2.0-or-later\"},\"contracts/periphery/contracts/access-control/SuAccessRoles.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title SuAccessRoles Library\\n * @dev SuAuthenticated and SuAccessControlSingleton need to have this constants\\n * Hierarchy:\\n *      1. DAO - can give admins and system roles\\n *      2.1. Admin - can set Alerters\\n *      2.2. System - includes Minter, Liquidation, Reward and Disabler roles, don't have access to give some roles.\\n *      3. Alerter - can send alerts and trigger rate limits, don't have access to give some roles.\\n */\\nabstract contract SuAccessRoles {\\n    bytes32 public constant ADMIN_ROLE = 0x00;\\n\\n    bytes32 public constant DAO_ROLE = keccak256(\\\"DAO_ROLE\\\");\\n\\n    bytes32 public constant ALERTER_ROLE = keccak256(\\\"ALERTER_ROLE\\\");\\n\\n    // system roles\\n    bytes32 public constant MINT_ACCESS_ROLE = keccak256(\\\"MINT_ACCESS_ROLE\\\");\\n    bytes32 public constant LIQUIDATION_ACCESS_ROLE = keccak256(\\\"LIQUIDATION_ACCESS_ROLE\\\");\\n    bytes32 public constant REWARD_ACCESS_ROLE = keccak256(\\\"REWARD_ACCESS_ROLE\\\");\\n    // bytes32 public constant SYSTEM_ROLE = keccak256(\\\"SYSTEM_ROLE\\\");\\n    bytes32 public constant DISABLER_ROLE = keccak256(\\\"DISABLER_ROLE\\\");\\n    bytes32 public constant CDP_ACCESS_ROLE = keccak256(\\\"CDP_ACCESS_ROLE\\\");\\n    bytes32 public constant VOTING_ESCROW_ROLE = keccak256(\\\"VOTING_ESCROW_ROLE\\\");\\n    bytes32 public constant PROXY_ACTIONS_ROLE = keccak256(\\\"PROXY_ACTIONS_ROLE\\\");\\n}\\n\",\"keccak256\":\"0x76c6b55446c0e7b40405cd0b642650c64a842e5dd71d5c5307f0b2def8898a1b\",\"license\":\"BSL 1.1\"},\"contracts/periphery/contracts/access-control/SuAuthenticated.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/access-control/ISuAccessControl.sol\\\";\\nimport \\\"./SuAccessRoles.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @title SuAuthenticated\\n * @dev other contracts should inherit to be authenticated.\\n * The address of SuAccessControlSingleton should be one for all contract that inherits SuAuthenticated\\n */\\nabstract contract SuAuthenticated is Initializable, SuAccessRoles, IERC165Upgradeable {\\n    ISuAccessControl public ACCESS_CONTROL_SINGLETON;\\n\\n    error OnlyDAOError();\\n    error OnlyAdminError();\\n    error OnlyAlerterError();\\n    error OnlyVaultAccessError();\\n    error OnlyLiquidationAccessError();\\n    error OnlyMintAccessError();\\n    error OnlyRewardAccessError();\\n    error OnlyDisablerAccessError();\\n    error OnlyVotingEscrowError();\\n    error OnlyProxyActionsError();\\n    error OnlyRoleError();\\n    error OnlyCDPAccessError();\\n    error BadAccessControlSingleton();\\n\\n    /**\\n     * @dev should be passed in constructor\\n     */\\n    function __suAuthenticatedInit(address _accessControlSingleton) internal onlyInitializing {\\n        ACCESS_CONTROL_SINGLETON = ISuAccessControl(_accessControlSingleton);\\n        if (\\n            _accessControlSingleton == address(0) ||\\n            !ISuAccessControl(_accessControlSingleton).supportsInterface(type(IAccessControlUpgradeable).interfaceId)\\n        ) revert BadAccessControlSingleton();\\n    }\\n\\n    /** CORE ROLES */\\n\\n    modifier onlyDAO() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(DAO_ROLE, msg.sender)) revert OnlyDAOError();\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(ADMIN_ROLE, msg.sender)) revert OnlyAdminError();\\n        _;\\n    }\\n\\n    modifier onlyAlerter() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(ALERTER_ROLE, msg.sender)) revert OnlyAlerterError();\\n        _;\\n    }\\n\\n    /** SYSTEM ROLES */\\n\\n    modifier onlyLiquidationAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(LIQUIDATION_ACCESS_ROLE, msg.sender)) revert OnlyLiquidationAccessError();\\n        _;\\n    }\\n\\n    modifier onlyMintAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(MINT_ACCESS_ROLE, msg.sender)) revert OnlyMintAccessError();\\n        _;\\n    }\\n\\n    modifier onlyRewardAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(REWARD_ACCESS_ROLE, msg.sender)) revert OnlyRewardAccessError();\\n        _;\\n    }\\n\\n    modifier onlyRewardOrAdminAccess() {\\n        if (\\n            !ACCESS_CONTROL_SINGLETON.hasRole(REWARD_ACCESS_ROLE, msg.sender) &&\\n            !ACCESS_CONTROL_SINGLETON.hasRole(ADMIN_ROLE, msg.sender)\\n        ) revert OnlyRewardAccessError();\\n        _;\\n    }\\n\\n    // @notice This modifier check if user/contract have access to \\\"disable\\\" contracts.\\n    // All main contracts in our lending protocol have disableContract() method that stops contracts main functions.\\n    modifier onlyDisablerAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(DISABLER_ROLE, msg.sender)) revert OnlyDisablerAccessError();\\n        _;\\n    }\\n\\n    modifier onlyCDPAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(CDP_ACCESS_ROLE, msg.sender)) revert OnlyCDPAccessError();\\n        _;\\n    }\\n\\n    modifier onlyVotingEscrow() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(VOTING_ESCROW_ROLE, msg.sender)) revert OnlyVotingEscrowError();\\n        _;\\n    }\\n\\n    modifier onlyProxyActions() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(PROXY_ACTIONS_ROLE, msg.sender)) revert OnlyProxyActionsError();\\n        _;\\n    }\\n\\n    // syntax sugar under ACCESS_CONTROL_SINGLETON\\n    modifier onlyRole(bytes32 role) {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(role, msg.sender)) revert OnlyRoleError();\\n        _;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return ACCESS_CONTROL_SINGLETON.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x786a8dde3d350dde2a6dd004cbb0a4d2885a8237f01c6312b45bfcca0a3c551d\",\"license\":\"BSL 1.1\"},\"contracts/periphery/contracts/adapters/PendleAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\nimport \\\"@pendle/core-v2/contracts/oracles/PendleLpOracleLib.sol\\\";\\nimport \\\"@pendle/core-v2/contracts/oracles/samples/BoringLpSeller.sol\\\";\\n\\nimport \\\"../access-control/SuAuthenticated.sol\\\";\\nimport \\\"../interfaces/adapters/ILPAdapter.sol\\\";\\nimport \\\"../interfaces/oracle/ISuOracleAggregator.sol\\\";\\n\\n/**\\n * @title PendleLPInfo\\n * @notice Struct with info about each  Pendle LP\\n * @param market - address of LPs market (maybe can be removed, because LP address == market address)\\n * @param SY - StandardizedYield, we need it to get underlyingTokens and best token to get after unwrap\\n * @param PT - PrincipalToken, we need it only to check getFiatPrice1e18Unsafe, deleted\\n * @param YT - YieldToken, we need it only to check getFiatPrice1e18Unsafe, deleted\\n * @param underlyingTokens - all tokens that we can receive after unwrapping LP\\n * @param mainUnderlyingToken - main LPs underlying token, rate in getFiatPrice is calculated in this token\\n */\\nstruct PendleLPInfo {\\n    IPMarket market;\\n    IStandardizedYield SY;\\n    // IPPrincipalToken PT;\\n    // IPYieldToken YT;\\n    address[] underlyingTokens;\\n    address mainUnderlyingToken;\\n}\\n\\n/**\\n * @title PendleAdapter\\n * @notice Adapter for Pendle LP token.\\n * @dev See ILPAdapter interface for full details.\\n */\\ncontract PendleAdapter is SuAuthenticated, ILPAdapter, BoringLpSeller {\\n    using PendleLpOracleLib for IPMarket;\\n\\n    mapping(address => PendleLPInfo) public lps; // Mapping from LP token to pool\\n    ISuOracleAggregator public ORACLE;\\n\\n    function initialize(address _authControl, address _oracle) public initializer {\\n        __suAuthenticatedInit(_authControl);\\n        ORACLE = ISuOracleAggregator(_oracle);\\n    }\\n\\n    /**\\n      * @notice Register the given LP token address and set the LP info\\n      * @param lp address of LP token\\n      * @param market market for LP token\\n     **/\\n    // Is LP == market?\\n    function registerLP(address lp, IPMarket market, address mainUnderlyingToken) external onlyAdmin {\\n        if (lps[lp].mainUnderlyingToken != address(0)) revert AlreadyRegistered(lp);\\n\\n        lps[lp].market = market;\\n        (lps[lp].SY, /*lps[lp].PT*/, /*lps[lp].YT*/) = market.readTokens();\\n        lps[lp].underlyingTokens = lps[lp].SY.getTokensOut();\\n        lps[lp].mainUnderlyingToken = mainUnderlyingToken;\\n    }\\n\\n    function isAdapterLP(address asset) public view returns (bool) {\\n        return lps[asset].underlyingTokens.length != 0;\\n    }\\n\\n    /// @notice Is depreceted, only for tests usage\\n    //    function getFiatPrice1e18Unsafe(address asset) external view returns (uint256) {\\n    //        PendleLPInfo memory lpInfo = lps[asset];\\n    //\\n    //        uint256 assetPrice = ORACLE.getFiatPrice1e18(lpInfo.SY.yieldToken());\\n    //        uint256 underlyingTokensValue =\\n    //            (IERC20(lpInfo.SY).balanceOf(asset)\\n    //            + IERC20(lpInfo.PT).balanceOf(asset)\\n    //            + IERC20(lpInfo.YT).balanceOf(asset)) * assetPrice;\\n    ////        address[] memory rewardTokens = lpInfo.market.getRewardTokens();\\n    ////        for (uint16 i = 0; i < rewardTokens.length; ++i) {\\n    ////            address token = rewardTokens[i];\\n    ////            underlyingTokensValue += IERC20(token).balanceOf(asset) * ORACLE.getFiatPrice1e18(token);\\n    ////        }\\n    //        return underlyingTokensValue / lpInfo.market.totalSupply();\\n    //    }\\n\\n    /**\\n     * @notice Idea of this implementation was in Pendle example\\n    **/\\n    function getFiatPrice1e18(address asset) external view returns (uint256) {\\n        if (!isAdapterLP(asset)) revert IsNotLP(asset);\\n        PendleLPInfo memory lpInfo = lps[asset];\\n\\n        uint256 lpRate = lpInfo.market.getLpToAssetRate(300); // TWAPDuration is 5min, in base 10^d\\n        uint256 decimal = IERC20Metadata(lpInfo.mainUnderlyingToken).decimals();\\n        uint256 assetPrice = ORACLE.getFiatPrice1e18(lpInfo.mainUnderlyingToken);\\n\\n        return assetPrice * lpRate / 10 ** decimal;\\n    }\\n\\n    /**\\n     * @notice Pendle unwrap LP only to 1 token, but our ILPAdapter is more general,\\n     * so we need to return here the array of WithdrawResult.\\n    **/\\n    function withdraw(address asset, uint256 amount) external returns (WithdrawResult[] memory results) {\\n        if (!isAdapterLP(asset)) revert IsNotLP(asset);\\n        TransferHelper.safeTransferFrom(asset, msg.sender, address(this), amount);\\n        PendleLPInfo memory lpInfo = lps[asset];\\n\\n        uint256 nTokens = lpInfo.underlyingTokens.length;\\n        results = new WithdrawResult[](1);\\n\\n        // In other adapters there is the method that unwrap LP to all underlyingTokens,\\n        // but here we have Pendle library, that can swap LP only for one token.\\n        // So we need to check what token will have the best USD value. For that we need to multiply token price and\\n        // amount we could receive after this swap.\\n        // This swap in depth is doing by lpInfo.SY, so there is previewRedeem function to check this amount after swap.\\n        address bestTokenOut;\\n        uint256 bestTokenAmountOut;\\n        for (uint16 i = 0; i < nTokens; ++i) {\\n            address tokenToPreview = lpInfo.underlyingTokens[i];\\n            if (ORACLE.hasPriceForAsset(tokenToPreview)) {\\n                uint256 previewAmount =\\n                    lpInfo.SY.previewRedeem(tokenToPreview, amount) * ORACLE.getSafeFiatPrice1e18(tokenToPreview);\\n                if (previewAmount > bestTokenAmountOut) {\\n                    bestTokenAmountOut = previewAmount;\\n                    bestTokenOut = tokenToPreview;\\n                }\\n            }\\n        }\\n\\n        uint256 netTokenOut = _sellLpForToken(address(lpInfo.market), amount, bestTokenOut);\\n\\n        results[0] = WithdrawResult({ token: bestTokenOut, amount: netTokenOut });\\n        TransferHelper.safeTransfer(bestTokenOut, msg.sender, netTokenOut);\\n    }\\n\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x9ce915e9358b872a0edb9162ad515e5dfb024579713eb7c702a7d2f672ea66f1\",\"license\":\"BSL 1.1\"},\"contracts/periphery/contracts/interfaces/access-control/ISuAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\nimport \\\"../../access-control/SuAccessRoles.sol\\\";\\n\\n/**\\n * @notice Access control for contracts\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n **/\\ninterface ISuAccessControl is IAccessControlUpgradeable, IERC165Upgradeable {\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\\n}\\n\",\"keccak256\":\"0x25724ac502fd6418ccd38273b276de4b2fdecd023d723c5d80c9f0a27c407bcd\",\"license\":\"MIT\"},\"contracts/periphery/contracts/interfaces/adapters/ILPAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"../oracle/ISuOracle.sol\\\";\\n\\nstruct WithdrawResult {\\n    address token;\\n    uint256 amount;\\n}\\n\\ninterface ILPAdapter is ISuOracle {\\n    /* ======================== ERRORS ======================== */\\n    error IsNotLP(address asset);\\n    error AlreadyRegistered(address asset);\\n    error LPOracleNotReady();\\n\\n    /* ==================== MUTABLE METHODS ==================== */\\n    /**\\n      * @notice Unwrap LP token with depth = 2 (if underlying token is LP => it's also unwrapping)\\n      * @param asset - address of LP token to withdraw/unwrap\\n      * @param amount - amount of asset to withdraw/unwrap\\n     **/\\n    function withdraw(address asset, uint256 amount) external returns (WithdrawResult[] memory);\\n\\n    /* ====================== VIEW METHODS ==================== */\\n    /**\\n      * @notice Returns if asset ig Balancer LP token, registered in our adapter\\n      * @param asset - address of LP token to check\\n     **/\\n    function isAdapterLP(address asset) external returns (bool);\\n}\",\"keccak256\":\"0x4a1b94f8bdc9063002386f854608c9b600ad2a7d45703ad05deb7536c006a855\",\"license\":\"BSL 1.1\"},\"contracts/periphery/contracts/interfaces/oracle/ISuOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\n// solhint-disable compiler-version\\npragma solidity >=0.7.6;\\n\\ninterface ISuOracle {\\n    /**\\n     * @notice WARNING! Read this description very carefully!\\n     *     function getFiatPrice1e18(address asset) returns (uint256) that:\\n     *         basicAmountOfAsset * getFiatPrice1e18(asset) / 1e18 === $$ * 1e18\\n     *     in other words, it doesn't matter what's the erc20.decimals is,\\n     *     you just multiply token balance in basic units on value from oracle and get dollar amount multiplied on 1e18.\\n     *\\n     * different assets have different deviation threshold (errors)\\n     *     for wBTC it's <= 0.5%, read more https://data.chain.link/ethereum/mainnet/crypto-usd/btc-usd\\n     *     for other asset is can be larger based on particular oracle implementation.\\n     *\\n     * examples:\\n     *     market price of btc = $30k,\\n     *     for 0.1 wBTC the unit256 amount is 0.1 * 1e18\\n     *     0.1 * 1e18 * (price1e18 / 1e18) == $3000 == uint256(3000*1e18)\\n     *     => price1e18 = 30000 * 1e18;\\n     *\\n     *     market price of usdt = $0.97,\\n     *     for 1 usdt uint256 = 1 * 1e6\\n     *     so 1*1e6 * price1e18 / 1e18 == $0.97 == uint256(0.97*1e18)\\n     *     => 1*1e6 * (price1e18 / 1e18) / (0.97*1e18)   = 1\\n     *     =>  price1e18 = 0.97 * (1e18/1e6) * 1e18\\n     *\\n     *    assume market price of wBTC = $31,503.77, oracle error = $158\\n     *\\n     *     case #1: small amount of wBTC\\n     *         we have 0.0,000,001 wBTC that is worth v = $0.00315 \\u00b1 $0.00001 = 0.00315*1e18 = 315*1e13 \\u00b1 1*1e13\\n     *         actual balance on the asset b = wBTC.balanceOf() =  0.0000001*1e18 = 1e11\\n     *         oracle should return or = oracle.getFiatPrice1e18(wBTC) <=>\\n     *         <=> b*or = v => v/b = 315*1e13 / 1e11 = 315*1e2 \\u00b1 1e2\\n     *         error = or.error * b = 1e2 * 1e11 = 1e13 => 1e13/1e18 usd = 1e-5 = 0.00001 usd\\n     *\\n     *     case #2: large amount of wBTC\\n     *         v = 2,000,000 wBTC = $31,503.77 * 2m \\u00b1 158*2m = $63,007,540,000 \\u00b1 $316,000,000 = 63,007*1e24 \\u00b1 316*1e24\\n     *         for calc convenience we increase error on 0.05 and have v = 63,000*24 \\u00b1 300*1e24 = (630 \\u00b1 3)*1e26\\n     *         b = 2*1e6 * 1e18 = 2*1e24\\n     *         or = v/b = (630 \\u00b1 3)*1e26 / 2*1e24 = 315*1e2 \\u00b1 1.5*1e2\\n     *         error = or.error * b = 1.5*100 * 2*1e24 = 3*1e26 = 3*1e8*1e18 = $300,000,000 ~ $316,000,000\\n     *\\n     *     assume the market price of USDT = $0.97 \\u00b1 $0.00485,\\n     *\\n     *     case #3: little amount of USDT\\n     *         v = USDT amount 0.005 = 0.005*(0.97 \\u00b1 0.00485) = 0.00485*1e18 \\u00b1 0.00002425*1e18 = 485*1e13 \\u00b1 3*1e13\\n     *         we rounded error up on (3000-2425)/2425 ~= +24% for calculation convenience.\\n     *         b = USDT.balanceOf() = 0.005*1e6 = 5*1e3\\n     *         b*or = v => or = v/b = (485*1e13 \\u00b1 3*1e13) / 5*1e3 = 970*1e9 \\u00b1 6*1e9\\n     *         error = 6*1e9 * 5*1e3 / 1e18 = 30*1e12/1e18 = 3*1e-5 = $0,00005\\n     *\\n     *     case #4: lot of USDT\\n     *         v = we have 100,000,000,000 USDT = $97B = 97*1e9*1e18 \\u00b1 0.5*1e9*1e18\\n     *         b = USDT.balanceOf() = 1e11*1e6 = 1e17\\n     *         or = v/b = (97*1e9*1e18 \\u00b1 0.5*1e9*1e18) / 1e17 = 970*1e9 \\u00b1 5*1e9\\n     *         error = 5*1e9 * 1e17 = 5*1e26 = 0.5 * 1e8*1e18\\n     *\\n     * @param asset - address of erc20 token contract\\n     * @return usdPrice1e18 such that asset.balanceOf() * getFiatPrice1e18(asset) / 1e18 == $$ * 1e18\\n     **/\\n    function getFiatPrice1e18(address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa56b9cc86ef5935efecc276e6a3188d518f1a99cad960083a8de35849c997687\",\"license\":\"UNLICENSED\"},\"contracts/periphery/contracts/interfaces/oracle/ISuOracleAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ISuOracle.sol\\\";\\n\\ninterface ISuOracleAggregator is ISuOracle {\\n    /* ===================== STRUCT ===================== */\\n    struct AssetLimitation {\\n        uint256 lowerBound;\\n        uint256 upperBound;\\n    }\\n\\n    /* ===================== EVENTS ===================== */\\n    event OracleLowerBoundWarning(uint256 price);\\n    event OracleUpperBoundWarning(uint256 price);\\n\\n    /* ===================== ERRORS ===================== */\\n    error NoOracleFound(address asset);\\n    error NoOracleImplementation();\\n    error BadOracleId();\\n\\n    /* ====================== VARS ====================== */\\n    function assetToOracle (address asset) external view returns ( uint256 );\\n    function oracleImplementations (uint256 oracleId) external view returns ( ISuOracle );\\n\\n    /* ==================== METHODS ==================== */\\n\\n    /**\\n    * @notice Like getFiatPrice1e18 from ISuOracle, but also checks bounds and emit event if there is an error.\\n    * We should call it in non-view method where we need safePrice from Oracle.\\n    * @param asset - address of asset\\n    **/\\n    function getSafeFiatPrice1e18(address asset) external returns (uint256);\\n\\n    /**\\n    * @notice Change lower bound of asset\\n    * @param asset - address of asset\\n    * @param newLowerBound - new value of lower bound\\n    **/\\n    function setLowerBound(address asset, uint256 newLowerBound) external;\\n\\n    /**\\n    * @notice Change upper bound of asset\\n    * @param asset - address of asset\\n    * @param newUpperBound - new value of upper bound\\n    **/\\n    function setUpperBound(address asset, uint256 newUpperBound) external;\\n\\n    /**\\n       * @notice assign address of oracle implementation to the oracleId\\n    * @param oracleId - number 0,1, etc to assign the oracle\\n    * @param oracleImplementation - an address with ISuOracle implementation contract\\n    **/\\n    function setOracleImplementation(uint256 oracleId, ISuOracle oracleImplementation) external;\\n\\n    /**\\n    * @notice specify what oracleId should be used for each assets. Checks that oracleId has an implementation\\n    **/\\n    function setOracleIdForAssets(address[] memory assets, uint256 oracleId) external;\\n\\n    /* ==================== VIEW METHODS ==================== */\\n    /**\\n    * @return true if oracle is set to this asset, false otherwise\\n    **/\\n    function hasPriceForAsset(address asset) external view returns(bool);\\n}\\n\",\"keccak256\":\"0x9e9f77c54257263b4caa12a57fcc53e970df3a07fa1ae18559b243f21c827a9f\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60808060405234610016576127f6908161001c8239f35b600080fdfe608080604052600436101561001357600080fd5b60003560e01c90816301ffc9a7146113fd5750806303ee9f22146113d057806338013f02146113a7578063438280dd1461136c578063485cc9551461111557806351362117146110e857806371d0fb41146110ad57806375b238fc146110915780638e5313e014611056578063b38234f31461101b578063b9ac2b3814610e64578063bd5f5be614610e29578063c7c7ab6d14610b4c578063d0e8fa8214610b11578063d12e733214610aba578063d2351cee14610a7f578063dc97e84e14610a44578063e9c2651814610a095763f3fef3a3146100f057600080fd5b3461037d57604036600319011261037d57610109611488565b6101128161158e565b156109e75760008060405160208101906323b872dd60e01b825261014f81610141602435303360248501612752565b03601f1981018352826114d4565b519082855af161015d612781565b816109b8575b501561098d5760018060a01b0316600052600160205260406000206040519061018b8261149e565b80546001600160a01b0390811683526001820154166020808401919091526040516002830180548083526000918252838220929493859290830191905b81811061096b5750506101dd925003836114d4565b816040840152600360018060a01b039101541660608301525190604051610203816114b9565b6001815260005b60208110610946575060009260009160005b61ffff81168381101561041057604086015190815111156103fa57600582901b621fffe0160160209081015160025460405163a780f13360e01b81526001600160a01b03928316600482018190529391909216919081602481855afa90811561038a576000916103cb575b506102ba575b505061ffff80808316146102a4571660010161021c565b634e487b7160e01b600052601160045260246000fd5b60208781015160405163cbe52ae360e01b815292919083906001600160a01b031681806102ed6024358960048401612721565b03915afa91821561038a57600092610396575b50906020600092602460405180958193632a5001c960e01b83528860048401525af190811561038a5760009161034f575b61033b925061157b565b8581111561028d579096509350388061028d565b90506020823d602011610382575b8161036a602093836114d4565b8101031261037d5761033b915190610331565b600080fd5b3d915061035d565b6040513d6000823e3d90fd5b91506020823d6020116103c3575b816103b1602093836114d4565b8101031261037d579051906020610300565b3d91506103a4565b6103ed915060203d6020116103f3575b6103e581836114d4565b8101906114f7565b38610287565b503d6103db565b634e487b7160e01b600052603260045260246000fd5b8551604051630b2339af60e21b815284918991906001600160a01b0316606082600481845afa801561038a57600092600090600092610910575b5060405163a9059cbb60e01b8152906020828061046d6024358860048401612721565b03816000885af190811561038a576004926020926108f3575b50604051630bc4ed8360e21b815292839182906001600160a01b03165afa90811561038a576000916108d4575b501561075c5760408051633dae446f60e21b8152926001600160a01b03858116931691908490816000816104ee602435888a60048501612752565b03925af190811561038a576000938492610726575b50602460209293604051958693849263bcb7ea5d60e01b845260048401525af190811561038a576000916106f0575b61053c9250612774565b905b60405163769f8e5d60e01b815230600482015260248101929092526001600160a01b0383811660448401819052600060648501819052600160848601529092602092859260a4928492165af191821561038a576000926106b9575b5091600092918392604051906105ae826114b9565b81528160208201526105bf86612714565b526105c985612714565b50826040516105ee81610141602082019563a9059cbb60e01b87523360248401612721565b51925af16105fa612781565b8161068a575b50156106605760405180916020820160208352815180915260206040840192019060005b818110610632575050500390f35b825180516001600160a01b031685526020908101518186015286955060409094019390920191600101610624565b60405162461bcd60e51b815260206004820152600260248201526114d560f21b6044820152606490fd5b805180159250821561069f575b505082610600565b6106b292506020809183010191016114f7565b8280610697565b9150916020823d6020116106e8575b816106d5602093836114d4565b8101031261037d57905190916000610599565b3d91506106c8565b90506020823d60201161071e575b8161070b602093836114d4565b8101031261037d5761053c915190610532565b3d91506106fe565b6020925061074d60249160403d604011610755575b61074581836114d4565b81019061273c565b509250610503565b503d61073b565b5060408051633dae446f60e21b8152908180610788602435866001600160a01b03891660048501612752565b03816000865af191821561038a576000916000936108b1575b5060405160008152926001600160401b03602085019081119085111761089b576020840160408190526329910b1160e01b90526001600160a01b03851660248501526044840152606060648401528251608484018190529060005b8281106108865750600084830160a4018190526040926020860192601f909101601f191686018690036084019183915af190811561038a576108469260009261084c575b50612774565b9061053e565b61087791925060403d60401161087f575b60208161086d82938386016114d4565b830101910161273c565b509086610840565b503d61085d565b80602091860160a483820151910152016107fc565b634e487b7160e01b600052604160045260246000fd5b9092506108cd915060403d6040116107555761074581836114d4565b91866107a1565b6108ed915060203d6020116103f3576103e581836114d4565b866104b3565b61090990833d85116103f3576103e581836114d4565b5088610486565b91505061093591925060603d811161093f575b61092d81836114d4565b81019061150f565b909291928661044a565b503d610923565b602090604051610955816114b9565b600081526000838201528282850101520161020a565b84546001600160a01b03168352600194850194879450602090930192016101c8565b60405162461bcd60e51b815260206004820152600360248201526229aa2360e91b6044820152606490fd5b80518015925082156109cd575b505038610163565b6109e092506020809183010191016114f7565b38806109c5565b604051631e489be560e01b81526001600160a01b039091166004820152602490fd5b3461037d57600036600319011261037d5760206040517f3b5d4cc60d3ec3516ee8ae083bd60934f6eb2a6c54b1229985c41bfb092b26038152f35b3461037d57600036600319011261037d5760206040517f9a9aef7c1247d5fc769b0185c052913e39673da29a880317dfd20ebf86f26a498152f35b3461037d57600036600319011261037d5760206040517fb0fdd1623e42dbffda4acd8bd643e1cb69f00f0e83abeaa8150ee42cf0fd105e8152f35b3461037d57602036600319011261037d5760606001600160a01b0380610ade611488565b16600052600160205260406000208181541691600381600184015416920154169060405192835260208301526040820152f35b3461037d57600036600319011261037d5760206040517f76d0567582f23e1e9d7a13eeba60f9aea9d69b8da87ca27a8bf3698b35c653db8152f35b3461037d57606036600319011261037d57610b65611488565b6024356001600160a01b03818116929183900361037d576044359181831680930361037d578160005460101c16906040518092632474521560e21b82526000600483015233602483015281604460209586935afa90811561038a57600091610e0c575b5015610dfa578216806000526001928383528060036040600020015416610de15760049082600052848452606060406000209760018060a01b031998818a82541617905560405193848092630b2339af60e21b82525afa801561038a57600492600091610dc1575b5083600052858552818660406000200191168882541617905560008186604083200154166040519384809263071bc3c960e01b82525afa91821561038a57600092610d26575b508260005284845260026040600020019082519260018060401b03841161089b57600160401b841161089b5785908354858555808610610cf9575b50019160005284600020908660005b858110610ce55750505050505060005252600360406000200191825416179055600080f35b878386511695019481850155018790610cc0565b8460005288868460002092830192015b828110610d17575050610cb1565b600081558994508a9101610d09565b9091503d806000833e610d3981836114d4565b810190848183031261037d578051906001600160401b03821161037d57019080601f8301121561037d578151610d6e81611550565b92610d7c60405194856114d4565b818452868085019260051b82010192831161037d5786809101915b838310610da957505050509087610c76565b8190610db484611567565b8152019101908690610d97565b610dd9915060603d811161093f5761092d81836114d4565b505088610c30565b6040516345ed80e960e01b815260048101839052602490fd5b604051631886ea7d60e11b8152600490fd5b610e239150833d85116103f3576103e581836114d4565b86610bc8565b3461037d57600036600319011261037d5760206040517f4f14c8366fa999817edc9f29824eb88a00cc31225e2156f399da4bc91049eb108152f35b3461037d5760208060031936011261037d57610e7e611488565b610e878161158e565b156109e75760018060a01b03809116600052600180835260406000208260405192610eb18461149e565b81835416845281818401541686850152600283016040518092888354928381520192600052886000209160005b8a82821061100357878a610f14828060038e8d610efd818f03826114d4565b6040870152015416926060810193845251166115ce565b600484848451166040519283809263313ce56760e01b82525afa801561038a578591600091610fc9575b5060ff16938060025416935116602460405180958193631735856760e31b835260048301525afa801561038a57600090610f9a575b610f7d925061157b565b604d82116102a457610f9291600a0a906115ae565b604051908152f35b508382813d8311610fc2575b610fb081836114d4565b8101031261037d57610f7d9151610f73565b503d610fa6565b82819392503d8311610ffc575b610fe081836114d4565b8101031261037d575160ff8116810361037d57849060ff610f3e565b503d610fd6565b84549097168552899690940193928201928201610ede565b3461037d57600036600319011261037d5760206040517fd83f5343da19b478b15a140c301a868be9e02603958f38fbd822b9d5c0a289168152f35b3461037d57600036600319011261037d5760206040517fe453bacb314e78dcd5192e6b1a2b1f0e7c76e92f6b7e429a6a90f04e39db3b768152f35b3461037d57600036600319011261037d57602060405160008152f35b3461037d57600036600319011261037d5760206040517f880a91047114272656e533301261260c75e4d11543ac7303d6fe4204579ec7278152f35b3461037d57602036600319011261037d57602061110b611106611488565b61158e565b6040519015158152f35b3461037d57604036600319011261037d5761112e611488565b6001600160a01b036024358181169081900361037d576000549060ff8260081c16159182809361135f575b8015611348575b156112ec5760ff198116600117600055826112da575b506000549260ff8460081c16156112815762010000600160b01b03601086901b1662010000600160b01b03198516811760005594168015908115611224575b5061121257600280546001600160a01b0319169190911790556111d457005b610100600160b01b03191617600055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a1005b6040516384d942fd60e01b8152600490fd5b6040516301ffc9a760e01b8152637965db0b60e01b60048201529150602090829060249082905afa90811561038a57600091611263575b5015856111b5565b61127b915060203d81116103f3576103e581836114d4565b8561125b565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b61ffff19166101011760005584611176565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b1580156111605750600160ff821614611160565b50600160ff821610611159565b3461037d57600036600319011261037d5760206040517f39f61ca2a1a28fee144218173ec637b649a353e4026b2738c673800e5bf1437b8152f35b3461037d57600036600319011261037d576002546040516001600160a01b039091168152602090f35b3461037d57600036600319011261037d5760005460405160109190911c6001600160a01b03168152602090f35b3461037d57602036600319011261037d5760043563ffffffff60e01b811680910361037d576000546301ffc9a760e01b835260048301919091526020908290602490829060101c6001600160a01b03165afa801561038a5760209160009161146b575b506040519015158152f35b6114829150823d81116103f3576103e581836114d4565b82611460565b600435906001600160a01b038216820361037d57565b608081019081106001600160401b0382111761089b57604052565b604081019081106001600160401b0382111761089b57604052565b601f909101601f19168101906001600160401b0382119082101761089b57604052565b9081602091031261037d5751801515810361037d5790565b9081606091031261037d5780516001600160a01b039290838116810361037d57926020830151818116810361037d57604090930151908116810361037d5790565b6001600160401b03811161089b5760051b60200190565b51906001600160a01b038216820361037d57565b818102929181159184041417156102a457565b6001600160a01b0316600090815260016020526040902060020154151590565b81156115b8570490565b634e487b7160e01b600052601260045260246000fd5b604051630b2339af60e21b81526001600160a01b0391906000906060816004818787165afa908115611b695784929182918291611e4e575b50602090600460405180988193633ba0b9a960e01b8352165afa948515611b69578295611e1a575b50604051636951ac2760e11b815291908316602083600481845afa928315611b69578293611de6575b5060405163516399df60e01b815290602082600481845afa918215611ddb578392611dba575b5081611d39575b5015611d225750915b60405163794052f360e01b8152600060048201529161012080846024818686165afa93841561038a57600094611c63575b505060a083015160009190421061172d57505050806116fe60406116f461170394516116ee602086015188611f1c565b90611e8c565b925b015191611edc565b611fe0565b916000831261037d5781811061171857505090565b6117259061172a9361157b565b6115ae565b90565b6040519261173a8461149e565b8284528260208501528260408501528260608501524260a08601511115611c51576117694260a0870151611ea8565b60808601516301e133808102908082056301e133801490151715611c29576001600160ff1b038211611b5d578115611c3d57600160ff1b8114600019831416611c2957848282051315611c0f5781900585526117c9602087015188611f1c565b80602087015286519081158015611c07575b611be957505085516101008701516020870151916117fb84895193611eb5565b92670de0b6b3a76400008412611bd057906116fe61181c6118229383611e8c565b91611edc565b670de0b6b3a76400008114611bbe57868112670de0b6b3a764000082810312811690670de0b6b3a76400008381031390151617611baa576118a7926118926301e1338095936116fe61188d611888866116fe61189898670de0b6b3a76400000391611edc565b6122da565b611edc565b90611e73565b604088015260c088015161157b565b046001600160ff1b038111611b65576118bf90611fea565b60608501526040519182606081011060018060401b03606085011117611b965791839160608201604052600282526020820193604036863761012c61190384612714565b5260405163883bdbfd60e01b81526020600482015292516024840181905292948593604485019190865b818110611b7457505050908380920392165afa908115611b69578291611ab8575b50805160011015611aa45760408101516001600160d81b039190821690829061197690612714565b51169003818111611a90576119bf826119ac6002936119ba969561012c6119a14260a08d0151611ea8565b948593160416611eb5565b948591610100890151611eb5565b611e8c565b05906119ec670de0b6b3a76400006119e686516119e0604089015188611e73565b90611ef9565b05611fea565b611a1c836116fe611a16670de0b6b3a7640000611a0d60208b015187611ef9565b058a5190611e73565b93611edc565b9182670de0b6b3a764000001928312600116611a7c5750936116ee6116fe946116fe61188d611a6e6040976118926020611a61611a769a6117039f9e6116fe90611edc565b980151916116fe89611edc565b948951611e8c565b926116f6565b634e487b7160e01b81526011600452602490fd5b634e487b7160e01b83526011600452602483fd5b634e487b7160e01b82526032600452602482fd5b90503d8083833e611ac981836114d4565b810190602081830312611b61578051906001600160401b038211611b6557019080601f83011215611b6157815190611b0082611550565b92611b0e60405194856114d4565b82845260208085019360051b820101918211611b5d57602001915b818310611b39575050503861194e565b82516001600160d81b0381168103611b5957815260209283019201611b29565b8580fd5b8480fd5b8280fd5b8380fd5b6040513d84823e3d90fd5b825163ffffffff1684528997508896506020938401939092019160010161192d565b634e487b7160e01b84526041600452602484fd5b634e487b7160e01b87526011600452602487fd5b60405163a9c8b14d60e01b8152600490fd5b60405163329e322960e21b815260048101859052602490fd5b604492506040519163b1c4aefb60e01b835260048301526024820152fd5b5080156117db565b604051630e520c3b60e11b81529190056004820152602490fd5b634e487b7160e01b85526011600452602485fd5b634e487b7160e01b85526012600452602485fd5b60405163b2094b5960e01b8152600490fd5b9091938282813d8311611d1b575b611c7b81836114d4565b81010312611d1857604051928301906001600160401b03821184831017611d045750604052805182526020810151602083015260408101516040830152611cc460608201611567565b60608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e083015261010080910151908201529138806116be565b634e487b7160e01b81526041600452602490fd5b80fd5b503d611c71565b5080841115611d345750825b9161168d565b611d2e565b6040516360e0a9e160e01b81529150602090829060049082905afa908115611b69578291611d74575b506001600160801b0316431438611684565b90506020813d602011611db2575b81611d8f602093836114d4565b81010312611dae57516001600160801b0381168103611dae5738611d62565b5080fd5b3d9150611d82565b611dd491925060203d6020116103f3576103e581836114d4565b903861167d565b6040513d85823e3d90fd5b9092506020813d602011611e12575b81611e02602093836114d4565b81010312611dae57519138611657565b3d9150611df5565b9094506020813d602011611e46575b81611e36602093836114d4565b81010312611dae5751938261162e565b3d9150611e29565b60209250611e6b915060603d60601161093f5761092d81836114d4565b929050611606565b818103929160001380158285131691841216176102a457565b919091600083820193841291129080158216911516176102a457565b919082039182116102a457565b6301e1338091611ec49161157b565b046001600160ff1b03811161037d5761172a90611fea565b90670de0b6b3a7640000918281029281840514901517156102a457565b818102929160008212600160ff1b8214166102a45781840514901517156102a457565b6000821215611f8057600019915b600080821315611f605750670de0b6b3a764000091611f489161157b565b046001600160ff1b03811161037d5761172a91611ef9565b600160ff1b8214611a7c5791611f4891670de0b6b3a7640000930361157b565b600191611f2a565b15611f8f57565b60405162461bcd60e51b815260206004820152601060248201526f125b9d985b1a5908195e1c1bdb995b9d60821b6044820152606490fd5b80156115b8576a0c097ce7bc90715b34b9f160241b0590565b81156115b8570590565b680238fd42c5cf03ffff19811215806122c7575b61200790611f88565b600081126122b2576064906806f05b59d3b200000081126122655772195e54c5dd42177f53a27172fa9ec63026282760241b9068056bc75e2d631000009083906806f05b59d3b1ffffff19015b0280829168ad78ebc5ac6200000081121561223f575b50806856bc75e2d6310000008492121561221b575b682b5e3af16b188000008112156121f9575b6815af1d78b58c4000008112156121d7575b680ad78ebc5ac62000008112156121b6575b81811215612195575b6802b5e3af16b1880000811215612174575b68015af1d78b58c40000811215612153575b60028282800205056003838383020505600484848302050560058585830205056006868683020505600787878302050590600888888402050592600989898602050594600a8a8a8802050596600b8b8b8a02050598600c8c8c8c0205059a0101010101010101010101010205020590565b6806f5f1775788937937829168015af1d78b58c3ffff1901930205916120e2565b6808f00f760a4b2db55d82916802b5e3af16b187ffff1901930205916120d0565b680ebc5fb41746121110829168056bc75e2d630fffff1901930205916120be565b68280e60114edb805d038291680ad78ebc5ac61fffff1901930205916120b5565b690127fa27722cc06cc5e282916815af1d78b58c3fffff1901930205916120a3565b693f1fce3da636ea5cf8508291682b5e3af16b187fffff190193020591612091565b6b02df0ab5a80a22c61ab5a70082916856bc75e2d630ffffff19019302059161207f565b6e01855144814a7ff805980ff0084000925068ad78ebc5ac61ffffff190190508261206a565b6803782dace9d9000000811261229f576803782dace9d8ffffff190168056bc75e2d63100000826b1425982cf597cd205cef738092612054565b68056bc75e2d6310000082600192612054565b6122be90600003611fea565b61172a90611fc7565b5068070c1cc73b00c80000811315611ffe565b60008113156123ac5780670c7d713b49da0000128061239b575b1561239257670de0b6b3a7640000906a0c097ce7bc90715b34b9f160241b90612336908302828101906ec097ce7bc90715b34b9f0fffffffff19018302611fe0565b9080828002059181838202058284820205838582020591848684020593858786020595808888020597880205600f900596600d900595600b900594600990059360079005926005900591600390050101010101010160011b0590565b61172a906123e1565b50670f43fc2c04ee000081126122f4565b60405162461bcd60e51b815260206004820152600d60248201526c6f7574206f6620626f756e647360981b6044820152606490fd5b670de0b6b3a764000081126126fd576064906000775803bcc5cb9634ba4cfb2213f784019318ed4dcb6017880f60361b8212156126d4575b6f8bcc0026baae9e45e470190267a230cf60191b8212156126b3575b8202908202816e01855144814a7ff805980ff0084000828181121561268c575b5050506b02df0ab5a80a22c61ab5a7008082121561266c575b50693f1fce3da636ea5cf8508082121561264c575b50690127fa27722cc06cc5e28082121561262c575b5068280e60114edb805d038082121561260c575b50680ebc5fb41746121110808212156125f5575b506808f00f760a4b2db55d808212156125d5575b506806f5f1775788937937808212156125b5575b506806248f33704b28660380821215612596575b506805c548670b9510e7ac80821215612577575b5061253668056bc75e2d6310000091828082019168056bc75e2d630fffff190102611fe0565b9080828002059181838202058284820205916003600560076009600b888a89020598808b8b02059a8b0205059805960594059205010101010160011b010590565b68056bc75e2d631000006756bc75e2d631000092020591019038612510565b68056bc75e2d6310000067ad78ebc5ac620000920205910190386124fc565b68056bc75e2d6310000068015af1d78b58c40000920205910190386124e8565b68056bc75e2d631000006802b5e3af16b1880000920205910190386124d4565b68056bc75e2d6310000080920205910190386124c0565b68056bc75e2d63100000680ad78ebc5ac6200000920205910190386124ac565b68056bc75e2d631000006815af1d78b58c40000092020591019038612498565b68056bc75e2d63100000682b5e3af16b1880000092020591019038612483565b68056bc75e2d631000006856bc75e2d6310000009202059101903861246e565b68056bc75e2d631000009192945068ad78ebc5ac6200000093500205910190388080612455565b6b1425982cf597cd205cef7380909105906803782dace9d900000001612435565b5072195e54c5dd42177f53a27172fa9ec63026282760241b90056806f05b59d3b2000000612419565b61270961270e91611fc7565b6123e1565b60000390565b8051156103fa5760200190565b6001600160a01b039091168152602081019190915260400190565b919082604091031261037d576020825192015190565b6001600160a01b03918216815291166020820152604081019190915260600190565b919082018092116102a457565b3d156127bb573d906001600160401b03821161089b57604051916127af601f8201601f1916602001846114d4565b82523d6000602084013e565b60609056fea2646970667358221220a716efb0c8eb9db6ce9ee9757dc34a545f8349739338f83a9131d4934b0e85fc64736f6c63430008110033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b60003560e01c90816301ffc9a7146113fd5750806303ee9f22146113d057806338013f02146113a7578063438280dd1461136c578063485cc9551461111557806351362117146110e857806371d0fb41146110ad57806375b238fc146110915780638e5313e014611056578063b38234f31461101b578063b9ac2b3814610e64578063bd5f5be614610e29578063c7c7ab6d14610b4c578063d0e8fa8214610b11578063d12e733214610aba578063d2351cee14610a7f578063dc97e84e14610a44578063e9c2651814610a095763f3fef3a3146100f057600080fd5b3461037d57604036600319011261037d57610109611488565b6101128161158e565b156109e75760008060405160208101906323b872dd60e01b825261014f81610141602435303360248501612752565b03601f1981018352826114d4565b519082855af161015d612781565b816109b8575b501561098d5760018060a01b0316600052600160205260406000206040519061018b8261149e565b80546001600160a01b0390811683526001820154166020808401919091526040516002830180548083526000918252838220929493859290830191905b81811061096b5750506101dd925003836114d4565b816040840152600360018060a01b039101541660608301525190604051610203816114b9565b6001815260005b60208110610946575060009260009160005b61ffff81168381101561041057604086015190815111156103fa57600582901b621fffe0160160209081015160025460405163a780f13360e01b81526001600160a01b03928316600482018190529391909216919081602481855afa90811561038a576000916103cb575b506102ba575b505061ffff80808316146102a4571660010161021c565b634e487b7160e01b600052601160045260246000fd5b60208781015160405163cbe52ae360e01b815292919083906001600160a01b031681806102ed6024358960048401612721565b03915afa91821561038a57600092610396575b50906020600092602460405180958193632a5001c960e01b83528860048401525af190811561038a5760009161034f575b61033b925061157b565b8581111561028d579096509350388061028d565b90506020823d602011610382575b8161036a602093836114d4565b8101031261037d5761033b915190610331565b600080fd5b3d915061035d565b6040513d6000823e3d90fd5b91506020823d6020116103c3575b816103b1602093836114d4565b8101031261037d579051906020610300565b3d91506103a4565b6103ed915060203d6020116103f3575b6103e581836114d4565b8101906114f7565b38610287565b503d6103db565b634e487b7160e01b600052603260045260246000fd5b8551604051630b2339af60e21b815284918991906001600160a01b0316606082600481845afa801561038a57600092600090600092610910575b5060405163a9059cbb60e01b8152906020828061046d6024358860048401612721565b03816000885af190811561038a576004926020926108f3575b50604051630bc4ed8360e21b815292839182906001600160a01b03165afa90811561038a576000916108d4575b501561075c5760408051633dae446f60e21b8152926001600160a01b03858116931691908490816000816104ee602435888a60048501612752565b03925af190811561038a576000938492610726575b50602460209293604051958693849263bcb7ea5d60e01b845260048401525af190811561038a576000916106f0575b61053c9250612774565b905b60405163769f8e5d60e01b815230600482015260248101929092526001600160a01b0383811660448401819052600060648501819052600160848601529092602092859260a4928492165af191821561038a576000926106b9575b5091600092918392604051906105ae826114b9565b81528160208201526105bf86612714565b526105c985612714565b50826040516105ee81610141602082019563a9059cbb60e01b87523360248401612721565b51925af16105fa612781565b8161068a575b50156106605760405180916020820160208352815180915260206040840192019060005b818110610632575050500390f35b825180516001600160a01b031685526020908101518186015286955060409094019390920191600101610624565b60405162461bcd60e51b815260206004820152600260248201526114d560f21b6044820152606490fd5b805180159250821561069f575b505082610600565b6106b292506020809183010191016114f7565b8280610697565b9150916020823d6020116106e8575b816106d5602093836114d4565b8101031261037d57905190916000610599565b3d91506106c8565b90506020823d60201161071e575b8161070b602093836114d4565b8101031261037d5761053c915190610532565b3d91506106fe565b6020925061074d60249160403d604011610755575b61074581836114d4565b81019061273c565b509250610503565b503d61073b565b5060408051633dae446f60e21b8152908180610788602435866001600160a01b03891660048501612752565b03816000865af191821561038a576000916000936108b1575b5060405160008152926001600160401b03602085019081119085111761089b576020840160408190526329910b1160e01b90526001600160a01b03851660248501526044840152606060648401528251608484018190529060005b8281106108865750600084830160a4018190526040926020860192601f909101601f191686018690036084019183915af190811561038a576108469260009261084c575b50612774565b9061053e565b61087791925060403d60401161087f575b60208161086d82938386016114d4565b830101910161273c565b509086610840565b503d61085d565b80602091860160a483820151910152016107fc565b634e487b7160e01b600052604160045260246000fd5b9092506108cd915060403d6040116107555761074581836114d4565b91866107a1565b6108ed915060203d6020116103f3576103e581836114d4565b866104b3565b61090990833d85116103f3576103e581836114d4565b5088610486565b91505061093591925060603d811161093f575b61092d81836114d4565b81019061150f565b909291928661044a565b503d610923565b602090604051610955816114b9565b600081526000838201528282850101520161020a565b84546001600160a01b03168352600194850194879450602090930192016101c8565b60405162461bcd60e51b815260206004820152600360248201526229aa2360e91b6044820152606490fd5b80518015925082156109cd575b505038610163565b6109e092506020809183010191016114f7565b38806109c5565b604051631e489be560e01b81526001600160a01b039091166004820152602490fd5b3461037d57600036600319011261037d5760206040517f3b5d4cc60d3ec3516ee8ae083bd60934f6eb2a6c54b1229985c41bfb092b26038152f35b3461037d57600036600319011261037d5760206040517f9a9aef7c1247d5fc769b0185c052913e39673da29a880317dfd20ebf86f26a498152f35b3461037d57600036600319011261037d5760206040517fb0fdd1623e42dbffda4acd8bd643e1cb69f00f0e83abeaa8150ee42cf0fd105e8152f35b3461037d57602036600319011261037d5760606001600160a01b0380610ade611488565b16600052600160205260406000208181541691600381600184015416920154169060405192835260208301526040820152f35b3461037d57600036600319011261037d5760206040517f76d0567582f23e1e9d7a13eeba60f9aea9d69b8da87ca27a8bf3698b35c653db8152f35b3461037d57606036600319011261037d57610b65611488565b6024356001600160a01b03818116929183900361037d576044359181831680930361037d578160005460101c16906040518092632474521560e21b82526000600483015233602483015281604460209586935afa90811561038a57600091610e0c575b5015610dfa578216806000526001928383528060036040600020015416610de15760049082600052848452606060406000209760018060a01b031998818a82541617905560405193848092630b2339af60e21b82525afa801561038a57600492600091610dc1575b5083600052858552818660406000200191168882541617905560008186604083200154166040519384809263071bc3c960e01b82525afa91821561038a57600092610d26575b508260005284845260026040600020019082519260018060401b03841161089b57600160401b841161089b5785908354858555808610610cf9575b50019160005284600020908660005b858110610ce55750505050505060005252600360406000200191825416179055600080f35b878386511695019481850155018790610cc0565b8460005288868460002092830192015b828110610d17575050610cb1565b600081558994508a9101610d09565b9091503d806000833e610d3981836114d4565b810190848183031261037d578051906001600160401b03821161037d57019080601f8301121561037d578151610d6e81611550565b92610d7c60405194856114d4565b818452868085019260051b82010192831161037d5786809101915b838310610da957505050509087610c76565b8190610db484611567565b8152019101908690610d97565b610dd9915060603d811161093f5761092d81836114d4565b505088610c30565b6040516345ed80e960e01b815260048101839052602490fd5b604051631886ea7d60e11b8152600490fd5b610e239150833d85116103f3576103e581836114d4565b86610bc8565b3461037d57600036600319011261037d5760206040517f4f14c8366fa999817edc9f29824eb88a00cc31225e2156f399da4bc91049eb108152f35b3461037d5760208060031936011261037d57610e7e611488565b610e878161158e565b156109e75760018060a01b03809116600052600180835260406000208260405192610eb18461149e565b81835416845281818401541686850152600283016040518092888354928381520192600052886000209160005b8a82821061100357878a610f14828060038e8d610efd818f03826114d4565b6040870152015416926060810193845251166115ce565b600484848451166040519283809263313ce56760e01b82525afa801561038a578591600091610fc9575b5060ff16938060025416935116602460405180958193631735856760e31b835260048301525afa801561038a57600090610f9a575b610f7d925061157b565b604d82116102a457610f9291600a0a906115ae565b604051908152f35b508382813d8311610fc2575b610fb081836114d4565b8101031261037d57610f7d9151610f73565b503d610fa6565b82819392503d8311610ffc575b610fe081836114d4565b8101031261037d575160ff8116810361037d57849060ff610f3e565b503d610fd6565b84549097168552899690940193928201928201610ede565b3461037d57600036600319011261037d5760206040517fd83f5343da19b478b15a140c301a868be9e02603958f38fbd822b9d5c0a289168152f35b3461037d57600036600319011261037d5760206040517fe453bacb314e78dcd5192e6b1a2b1f0e7c76e92f6b7e429a6a90f04e39db3b768152f35b3461037d57600036600319011261037d57602060405160008152f35b3461037d57600036600319011261037d5760206040517f880a91047114272656e533301261260c75e4d11543ac7303d6fe4204579ec7278152f35b3461037d57602036600319011261037d57602061110b611106611488565b61158e565b6040519015158152f35b3461037d57604036600319011261037d5761112e611488565b6001600160a01b036024358181169081900361037d576000549060ff8260081c16159182809361135f575b8015611348575b156112ec5760ff198116600117600055826112da575b506000549260ff8460081c16156112815762010000600160b01b03601086901b1662010000600160b01b03198516811760005594168015908115611224575b5061121257600280546001600160a01b0319169190911790556111d457005b610100600160b01b03191617600055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a1005b6040516384d942fd60e01b8152600490fd5b6040516301ffc9a760e01b8152637965db0b60e01b60048201529150602090829060249082905afa90811561038a57600091611263575b5015856111b5565b61127b915060203d81116103f3576103e581836114d4565b8561125b565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b61ffff19166101011760005584611176565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b1580156111605750600160ff821614611160565b50600160ff821610611159565b3461037d57600036600319011261037d5760206040517f39f61ca2a1a28fee144218173ec637b649a353e4026b2738c673800e5bf1437b8152f35b3461037d57600036600319011261037d576002546040516001600160a01b039091168152602090f35b3461037d57600036600319011261037d5760005460405160109190911c6001600160a01b03168152602090f35b3461037d57602036600319011261037d5760043563ffffffff60e01b811680910361037d576000546301ffc9a760e01b835260048301919091526020908290602490829060101c6001600160a01b03165afa801561038a5760209160009161146b575b506040519015158152f35b6114829150823d81116103f3576103e581836114d4565b82611460565b600435906001600160a01b038216820361037d57565b608081019081106001600160401b0382111761089b57604052565b604081019081106001600160401b0382111761089b57604052565b601f909101601f19168101906001600160401b0382119082101761089b57604052565b9081602091031261037d5751801515810361037d5790565b9081606091031261037d5780516001600160a01b039290838116810361037d57926020830151818116810361037d57604090930151908116810361037d5790565b6001600160401b03811161089b5760051b60200190565b51906001600160a01b038216820361037d57565b818102929181159184041417156102a457565b6001600160a01b0316600090815260016020526040902060020154151590565b81156115b8570490565b634e487b7160e01b600052601260045260246000fd5b604051630b2339af60e21b81526001600160a01b0391906000906060816004818787165afa908115611b695784929182918291611e4e575b50602090600460405180988193633ba0b9a960e01b8352165afa948515611b69578295611e1a575b50604051636951ac2760e11b815291908316602083600481845afa928315611b69578293611de6575b5060405163516399df60e01b815290602082600481845afa918215611ddb578392611dba575b5081611d39575b5015611d225750915b60405163794052f360e01b8152600060048201529161012080846024818686165afa93841561038a57600094611c63575b505060a083015160009190421061172d57505050806116fe60406116f461170394516116ee602086015188611f1c565b90611e8c565b925b015191611edc565b611fe0565b916000831261037d5781811061171857505090565b6117259061172a9361157b565b6115ae565b90565b6040519261173a8461149e565b8284528260208501528260408501528260608501524260a08601511115611c51576117694260a0870151611ea8565b60808601516301e133808102908082056301e133801490151715611c29576001600160ff1b038211611b5d578115611c3d57600160ff1b8114600019831416611c2957848282051315611c0f5781900585526117c9602087015188611f1c565b80602087015286519081158015611c07575b611be957505085516101008701516020870151916117fb84895193611eb5565b92670de0b6b3a76400008412611bd057906116fe61181c6118229383611e8c565b91611edc565b670de0b6b3a76400008114611bbe57868112670de0b6b3a764000082810312811690670de0b6b3a76400008381031390151617611baa576118a7926118926301e1338095936116fe61188d611888866116fe61189898670de0b6b3a76400000391611edc565b6122da565b611edc565b90611e73565b604088015260c088015161157b565b046001600160ff1b038111611b65576118bf90611fea565b60608501526040519182606081011060018060401b03606085011117611b965791839160608201604052600282526020820193604036863761012c61190384612714565b5260405163883bdbfd60e01b81526020600482015292516024840181905292948593604485019190865b818110611b7457505050908380920392165afa908115611b69578291611ab8575b50805160011015611aa45760408101516001600160d81b039190821690829061197690612714565b51169003818111611a90576119bf826119ac6002936119ba969561012c6119a14260a08d0151611ea8565b948593160416611eb5565b948591610100890151611eb5565b611e8c565b05906119ec670de0b6b3a76400006119e686516119e0604089015188611e73565b90611ef9565b05611fea565b611a1c836116fe611a16670de0b6b3a7640000611a0d60208b015187611ef9565b058a5190611e73565b93611edc565b9182670de0b6b3a764000001928312600116611a7c5750936116ee6116fe946116fe61188d611a6e6040976118926020611a61611a769a6117039f9e6116fe90611edc565b980151916116fe89611edc565b948951611e8c565b926116f6565b634e487b7160e01b81526011600452602490fd5b634e487b7160e01b83526011600452602483fd5b634e487b7160e01b82526032600452602482fd5b90503d8083833e611ac981836114d4565b810190602081830312611b61578051906001600160401b038211611b6557019080601f83011215611b6157815190611b0082611550565b92611b0e60405194856114d4565b82845260208085019360051b820101918211611b5d57602001915b818310611b39575050503861194e565b82516001600160d81b0381168103611b5957815260209283019201611b29565b8580fd5b8480fd5b8280fd5b8380fd5b6040513d84823e3d90fd5b825163ffffffff1684528997508896506020938401939092019160010161192d565b634e487b7160e01b84526041600452602484fd5b634e487b7160e01b87526011600452602487fd5b60405163a9c8b14d60e01b8152600490fd5b60405163329e322960e21b815260048101859052602490fd5b604492506040519163b1c4aefb60e01b835260048301526024820152fd5b5080156117db565b604051630e520c3b60e11b81529190056004820152602490fd5b634e487b7160e01b85526011600452602485fd5b634e487b7160e01b85526012600452602485fd5b60405163b2094b5960e01b8152600490fd5b9091938282813d8311611d1b575b611c7b81836114d4565b81010312611d1857604051928301906001600160401b03821184831017611d045750604052805182526020810151602083015260408101516040830152611cc460608201611567565b60608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e083015261010080910151908201529138806116be565b634e487b7160e01b81526041600452602490fd5b80fd5b503d611c71565b5080841115611d345750825b9161168d565b611d2e565b6040516360e0a9e160e01b81529150602090829060049082905afa908115611b69578291611d74575b506001600160801b0316431438611684565b90506020813d602011611db2575b81611d8f602093836114d4565b81010312611dae57516001600160801b0381168103611dae5738611d62565b5080fd5b3d9150611d82565b611dd491925060203d6020116103f3576103e581836114d4565b903861167d565b6040513d85823e3d90fd5b9092506020813d602011611e12575b81611e02602093836114d4565b81010312611dae57519138611657565b3d9150611df5565b9094506020813d602011611e46575b81611e36602093836114d4565b81010312611dae5751938261162e565b3d9150611e29565b60209250611e6b915060603d60601161093f5761092d81836114d4565b929050611606565b818103929160001380158285131691841216176102a457565b919091600083820193841291129080158216911516176102a457565b919082039182116102a457565b6301e1338091611ec49161157b565b046001600160ff1b03811161037d5761172a90611fea565b90670de0b6b3a7640000918281029281840514901517156102a457565b818102929160008212600160ff1b8214166102a45781840514901517156102a457565b6000821215611f8057600019915b600080821315611f605750670de0b6b3a764000091611f489161157b565b046001600160ff1b03811161037d5761172a91611ef9565b600160ff1b8214611a7c5791611f4891670de0b6b3a7640000930361157b565b600191611f2a565b15611f8f57565b60405162461bcd60e51b815260206004820152601060248201526f125b9d985b1a5908195e1c1bdb995b9d60821b6044820152606490fd5b80156115b8576a0c097ce7bc90715b34b9f160241b0590565b81156115b8570590565b680238fd42c5cf03ffff19811215806122c7575b61200790611f88565b600081126122b2576064906806f05b59d3b200000081126122655772195e54c5dd42177f53a27172fa9ec63026282760241b9068056bc75e2d631000009083906806f05b59d3b1ffffff19015b0280829168ad78ebc5ac6200000081121561223f575b50806856bc75e2d6310000008492121561221b575b682b5e3af16b188000008112156121f9575b6815af1d78b58c4000008112156121d7575b680ad78ebc5ac62000008112156121b6575b81811215612195575b6802b5e3af16b1880000811215612174575b68015af1d78b58c40000811215612153575b60028282800205056003838383020505600484848302050560058585830205056006868683020505600787878302050590600888888402050592600989898602050594600a8a8a8802050596600b8b8b8a02050598600c8c8c8c0205059a0101010101010101010101010205020590565b6806f5f1775788937937829168015af1d78b58c3ffff1901930205916120e2565b6808f00f760a4b2db55d82916802b5e3af16b187ffff1901930205916120d0565b680ebc5fb41746121110829168056bc75e2d630fffff1901930205916120be565b68280e60114edb805d038291680ad78ebc5ac61fffff1901930205916120b5565b690127fa27722cc06cc5e282916815af1d78b58c3fffff1901930205916120a3565b693f1fce3da636ea5cf8508291682b5e3af16b187fffff190193020591612091565b6b02df0ab5a80a22c61ab5a70082916856bc75e2d630ffffff19019302059161207f565b6e01855144814a7ff805980ff0084000925068ad78ebc5ac61ffffff190190508261206a565b6803782dace9d9000000811261229f576803782dace9d8ffffff190168056bc75e2d63100000826b1425982cf597cd205cef738092612054565b68056bc75e2d6310000082600192612054565b6122be90600003611fea565b61172a90611fc7565b5068070c1cc73b00c80000811315611ffe565b60008113156123ac5780670c7d713b49da0000128061239b575b1561239257670de0b6b3a7640000906a0c097ce7bc90715b34b9f160241b90612336908302828101906ec097ce7bc90715b34b9f0fffffffff19018302611fe0565b9080828002059181838202058284820205838582020591848684020593858786020595808888020597880205600f900596600d900595600b900594600990059360079005926005900591600390050101010101010160011b0590565b61172a906123e1565b50670f43fc2c04ee000081126122f4565b60405162461bcd60e51b815260206004820152600d60248201526c6f7574206f6620626f756e647360981b6044820152606490fd5b670de0b6b3a764000081126126fd576064906000775803bcc5cb9634ba4cfb2213f784019318ed4dcb6017880f60361b8212156126d4575b6f8bcc0026baae9e45e470190267a230cf60191b8212156126b3575b8202908202816e01855144814a7ff805980ff0084000828181121561268c575b5050506b02df0ab5a80a22c61ab5a7008082121561266c575b50693f1fce3da636ea5cf8508082121561264c575b50690127fa27722cc06cc5e28082121561262c575b5068280e60114edb805d038082121561260c575b50680ebc5fb41746121110808212156125f5575b506808f00f760a4b2db55d808212156125d5575b506806f5f1775788937937808212156125b5575b506806248f33704b28660380821215612596575b506805c548670b9510e7ac80821215612577575b5061253668056bc75e2d6310000091828082019168056bc75e2d630fffff190102611fe0565b9080828002059181838202058284820205916003600560076009600b888a89020598808b8b02059a8b0205059805960594059205010101010160011b010590565b68056bc75e2d631000006756bc75e2d631000092020591019038612510565b68056bc75e2d6310000067ad78ebc5ac620000920205910190386124fc565b68056bc75e2d6310000068015af1d78b58c40000920205910190386124e8565b68056bc75e2d631000006802b5e3af16b1880000920205910190386124d4565b68056bc75e2d6310000080920205910190386124c0565b68056bc75e2d63100000680ad78ebc5ac6200000920205910190386124ac565b68056bc75e2d631000006815af1d78b58c40000092020591019038612498565b68056bc75e2d63100000682b5e3af16b1880000092020591019038612483565b68056bc75e2d631000006856bc75e2d6310000009202059101903861246e565b68056bc75e2d631000009192945068ad78ebc5ac6200000093500205910190388080612455565b6b1425982cf597cd205cef7380909105906803782dace9d900000001612435565b5072195e54c5dd42177f53a27172fa9ec63026282760241b90056806f05b59d3b2000000612419565b61270961270e91611fc7565b6123e1565b60000390565b8051156103fa5760200190565b6001600160a01b039091168152602081019190915260400190565b919082604091031261037d576020825192015190565b6001600160a01b03918216815291166020820152604081019190915260600190565b919082018092116102a457565b3d156127bb573d906001600160401b03821161089b57604051916127af601f8201601f1916602001846114d4565b82523d6000602084013e565b60609056fea2646970667358221220a716efb0c8eb9db6ce9ee9757dc34a545f8349739338f83a9131d4934b0e85fc64736f6c63430008110033",
  "devdoc": {
    "details": "See ILPAdapter interface for full details.",
    "kind": "dev",
    "methods": {
      "isAdapterLP(address)": {
        "params": {
          "asset": "- address of LP token to check*"
        }
      },
      "registerLP(address,address,address)": {
        "params": {
          "lp": "address of LP token",
          "market": "market for LP token*"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      }
    },
    "title": "PendleAdapter",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getFiatPrice1e18(address)": {
        "notice": "Idea of this implementation was in Pendle example*"
      },
      "isAdapterLP(address)": {
        "notice": "Returns if asset ig Balancer LP token, registered in our adapter"
      },
      "registerLP(address,address,address)": {
        "notice": "Register the given LP token address and set the LP info"
      },
      "withdraw(address,uint256)": {
        "notice": "Pendle unwrap LP only to 1 token, but our ILPAdapter is more general, so we need to return here the array of WithdrawResult.*"
      }
    },
    "notice": "Adapter for Pendle LP token.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 462,
        "contract": "contracts/periphery/contracts/adapters/PendleAdapter.sol:PendleAdapter",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 465,
        "contract": "contracts/periphery/contracts/adapters/PendleAdapter.sol:PendleAdapter",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 26374,
        "contract": "contracts/periphery/contracts/adapters/PendleAdapter.sol:PendleAdapter",
        "label": "ACCESS_CONTROL_SINGLETON",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(ISuAccessControl)29456"
      },
      {
        "astId": 28723,
        "contract": "contracts/periphery/contracts/adapters/PendleAdapter.sol:PendleAdapter",
        "label": "lps",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(PendleLPInfo)28707_storage)"
      },
      {
        "astId": 28726,
        "contract": "contracts/periphery/contracts/adapters/PendleAdapter.sol:PendleAdapter",
        "label": "ORACLE",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ISuOracleAggregator)29701"
      },
      {
        "astId": 29033,
        "contract": "contracts/periphery/contracts/adapters/PendleAdapter.sol:PendleAdapter",
        "label": "__gap",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)45_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IPMarket)10373": {
        "encoding": "inplace",
        "label": "contract IPMarket",
        "numberOfBytes": "20"
      },
      "t_contract(IStandardizedYield)10775": {
        "encoding": "inplace",
        "label": "contract IStandardizedYield",
        "numberOfBytes": "20"
      },
      "t_contract(ISuAccessControl)29456": {
        "encoding": "inplace",
        "label": "contract ISuAccessControl",
        "numberOfBytes": "20"
      },
      "t_contract(ISuOracleAggregator)29701": {
        "encoding": "inplace",
        "label": "contract ISuOracleAggregator",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(PendleLPInfo)28707_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct PendleLPInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(PendleLPInfo)28707_storage"
      },
      "t_struct(PendleLPInfo)28707_storage": {
        "encoding": "inplace",
        "label": "struct PendleLPInfo",
        "members": [
          {
            "astId": 28698,
            "contract": "contracts/periphery/contracts/adapters/PendleAdapter.sol:PendleAdapter",
            "label": "market",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IPMarket)10373"
          },
          {
            "astId": 28701,
            "contract": "contracts/periphery/contracts/adapters/PendleAdapter.sol:PendleAdapter",
            "label": "SY",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IStandardizedYield)10775"
          },
          {
            "astId": 28704,
            "contract": "contracts/periphery/contracts/adapters/PendleAdapter.sol:PendleAdapter",
            "label": "underlyingTokens",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 28706,
            "contract": "contracts/periphery/contracts/adapters/PendleAdapter.sol:PendleAdapter",
            "label": "mainUnderlyingToken",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}