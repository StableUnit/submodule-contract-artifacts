{
  "address": "0x24542Db4055f10134B0b62ABBEFa586cCeb62791",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "safeEngine_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NotAuthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "DisableContract",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "usr",
          "type": "address"
        }
      ],
      "name": "addAuthorization",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "authorizedAccounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "base",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "collateralTypes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "stabilityFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "latestUpdateTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractEnabled",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disableContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        }
      ],
      "name": "initializeCollateralType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "what",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "data",
          "type": "address"
        }
      ],
      "name": "modifyParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "what",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "data",
          "type": "uint256"
        }
      ],
      "name": "modifyParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "what",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "data",
          "type": "uint256"
        }
      ],
      "name": "modifyParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "primaryTaxReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "usr",
          "type": "address"
        }
      ],
      "name": "removeAuthorization",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "safeEngine",
      "outputs": [
        {
          "internalType": "contract ISafeEngine",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        }
      ],
      "name": "taxSingle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "5a3048d5b2f56301a323a2276b6562ea",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"safeEngine_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotAuthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DisableContract\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"addAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedAccounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"base\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"collateralTypes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stabilityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"latestUpdateTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractEnabled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"}],\"name\":\"initializeCollateralType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"primaryTaxReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"removeAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeEngine\",\"outputs\":[{\"internalType\":\"contract ISafeEngine\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"}],\"name\":\"taxSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"taxSingle(bytes32)\":{\"params\":{\"collateralType\":\"Collateral type to tax\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"taxSingle(bytes32)\":{\"notice\":\"Collect tax from a single collateral type\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/makerdao/core/TaxCollector.sol\":\"TaxCollector\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/makerdao/core/TaxCollector.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\n/// TaxCollector.sol -- Dai Lending Rate\\n\\n// Copyright (C) 2018 Rain <rainbreak@riseup.net>\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/ISafeEngine.sol\\\";\\nimport \\\"../interfaces/ITaxCollector.sol\\\";\\nimport {AuthWithoutContractEnabled} from \\\"../utils/AuthWithoutContractEnabled.sol\\\";\\n\\n// FIXME: This contract was altered compared to the production version.\\n// It doesn't use LibNote anymore.\\n// New deployments of this contract will need to include custom events (TO DO).\\n\\ncontract TaxCollector is ITaxCollector, AuthWithoutContractEnabled {\\n    mapping (bytes32 => CollateralType) public collateralTypes;\\n    ISafeEngine public safeEngine;   // CDP Engine\\n    address public primaryTaxReceiver;   // Debt Engine\\n    uint256 public base;  // Global, per-second stability fee contribution [ray]\\n\\n    // --- Init ---\\n    constructor(address safeEngine_) public {\\n        authorizedAccounts[msg.sender] = 1;\\n        safeEngine = ISafeEngine(safeEngine_);\\n    }\\n\\n    // --- Math ---\\n    function _rpow(uint x, uint n, uint b) internal pure returns (uint z) {\\n      assembly {\\n        switch x case 0 {switch n case 0 {z := b} default {z := 0}}\\n        default {\\n          switch mod(n, 2) case 0 { z := b } default { z := x }\\n          let half := div(b, 2)  // for rounding.\\n          for { n := div(n, 2) } n { n := div(n,2) } {\\n            let xx := mul(x, x)\\n            if iszero(eq(div(xx, x), x)) { revert(0,0) }\\n            let xxRound := add(xx, half)\\n            if lt(xxRound, xx) { revert(0,0) }\\n            x := div(xxRound, b)\\n            if mod(n,2) {\\n              let zx := mul(z, x)\\n              if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) { revert(0,0) }\\n              let zxRound := add(zx, half)\\n              if lt(zxRound, zx) { revert(0,0) }\\n              z := div(zxRound, b)\\n            }\\n          }\\n        }\\n      }\\n    }\\n    uint256 constant ONE = 10 ** 27;\\n    function _add(uint x, uint y) internal pure returns (uint z) {\\n        z = x + y;\\n        require(z >= x);\\n    }\\n    function _diff(uint x, uint y) internal pure returns (int z) {\\n        z = int(x) - int(y);\\n        require(int(x) >= 0 && int(y) >= 0);\\n    }\\n    function _rmul(uint x, uint y) internal pure returns (uint z) {\\n        z = x * y;\\n        require(y == 0 || z / y == x);\\n        z = z / ONE;\\n    }\\n\\n    // --- Administration ---\\n    function initializeCollateralType(bytes32 collateralType) external isAuthorized {\\n        CollateralType storage i = collateralTypes[collateralType];\\n        require(i.stabilityFee == 0, \\\"TaxCollector/collateralType-already-init\\\");\\n        i.stabilityFee = ONE;\\n        i.latestUpdateTime  = block.timestamp;\\n    }\\n    function modifyParameters(bytes32 collateralType, bytes32 what, uint data) external isAuthorized {\\n        require(block.timestamp == collateralTypes[collateralType].latestUpdateTime, \\\"TaxCollector/latestUpdateTime-not-updated\\\");\\n        if (what == \\\"stabilityFee\\\") collateralTypes[collateralType].stabilityFee = data;\\n        else revert(\\\"TaxCollector/modifyParameters-unrecognized-param\\\");\\n    }\\n    function modifyParameters(bytes32 what, uint data) external isAuthorized {\\n        if (what == \\\"base\\\") base = data;\\n        else revert(\\\"TaxCollector/modifyParameters-unrecognized-param\\\");\\n    }\\n    function modifyParameters(bytes32 what, address data) external isAuthorized {\\n        if (what == \\\"primaryTaxReceiver\\\") primaryTaxReceiver = data;\\n        else revert(\\\"TaxCollector/modifyParameters-unrecognized-param\\\");\\n    }\\n\\n    function taxSingle(bytes32 collateralType) external returns (uint rate) {\\n        require(block.timestamp >= collateralTypes[collateralType].latestUpdateTime, \\\"TaxCollector/invalid-block-timestamp\\\");\\n        (, uint prevRate,,,) = safeEngine.collateralTypes(collateralType);\\n        /// rate = oldRate * (1 + StabilityRate)^(time since last taxSingle)\\n        rate = _rmul(\\n            _rpow(\\n                _add(base, collateralTypes[collateralType].stabilityFee),\\n                block.timestamp - collateralTypes[collateralType].latestUpdateTime,\\n                ONE\\n            ),\\n            prevRate\\n        );\\n        safeEngine.updateAccumulatedRate(collateralType, primaryTaxReceiver, _diff(rate, prevRate));\\n        collateralTypes[collateralType].latestUpdateTime = block.timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x3fd044ca8164fedbc5d0cd288aac3b9034e4d735e46c17b3195e39411850d001\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/makerdao/interfaces/IAuth.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\ninterface IAuth {\\n    function addAuthorization(address usr) external;\\n    function removeAuthorization(address usr) external;\\n}\\n\",\"keccak256\":\"0x0ba65ef98ccabdaae896001950518dbbfbea94c2f3ac84b064abe0cbeddd9b89\",\"license\":\"UNLICENSED\"},\"contracts/makerdao/interfaces/IAuthWithContractEnabled.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport {IAuth} from \\\"./IAuth.sol\\\";\\n\\ninterface IAuthWithContractEnabled is IAuth {\\n    event DisableContract();\\n\\n    function disableContract() external;\\n}\\n\",\"keccak256\":\"0x2c6b500483ce79cf7f277949eed8f8f1322227c031eb504ccf316b3ad49aa49c\",\"license\":\"UNLICENSED\"},\"contracts/makerdao/interfaces/ISafeEngine.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title SafeEngine\\n * @notice The single source of truth for the Maker Protocol. It contains the accounting system of the core Vault,\\n * Internal Dai balances, and collateral state. It houses the public interface for Vault management,\\n * allowing safe(= CDP or Vault) owners to adjust their Vault state balances. It also contains the public interface\\n * for Vault fungibility, allowing safe (Vault) owners to transfer, split, and merge Vaults.\\n * Excluding these interfaces, SAFEEngine is accessed through trusted smart contract modules.\\n **/\\ninterface ISafeEngine {\\n    /* ==================== METHODS ==================== */\\n\\n    // --- Data ---\\n    struct CollateralType {\\n        uint256 debtAmount;       // Total debt issued for this specific collateral type                          [wad]\\n        uint256 accumulatedRate;  // Accumulator for interest accrued on this collateral type                     [ray]\\n        uint256 safetyPrice;      // Floor price at which a CDP is allowed to generate debt                       [ray]\\n        uint256 debtCeiling;      // Maximum amount of debt that can be generated with this collateral type       [rad]\\n        uint256 debtFloor;        // Minimum amount of debt that must be generated by a CDP using this collateral [rad]\\n    }\\n    struct SAFE {\\n        uint256 lockedCollateral; // Total amount of collateral locked in a SAFE/CDP  [wad]\\n        uint256 generatedDebt;    // Total amount of debt generated by a SAFE/CDP     [wad]\\n    }\\n\\n    // --- VARS ---\\n\\n    function safes(bytes32, address) external view returns (uint, uint);\\n\\n    function collateralTypes(bytes32) external view returns (\\n        uint256 debtAmount,   // [wad]\\n        uint256 accumulatedRate,   // [ray]\\n        uint256 safetyPrice,\\n        uint256 debtCeiling,\\n        uint256 debtFloor\\n    );\\n\\n    function tokenCollateral(bytes32, address) external view returns (uint256);\\n\\n    function coinBalance(address) external view returns (uint256);\\n\\n    function debtBalance(address) external view returns (uint256);\\n\\n    // --- Auth ---\\n    /**\\n     * @notice Allow an address to modify your CDP\\n     * @param usr Account to give CDP permissions to\\n     */\\n    function approveSAFEModification(address usr) external;\\n\\n    /**\\n     * @notice Deny an address the rights to modify your CDP\\n     * @param usr Account to give CDP permissions to\\n     */\\n    function denySAFEModification(address usr) external;\\n\\n    // --- Administration ---\\n\\n    function initializeCollateralType(bytes32 collateralType) external;\\n    function modifyParameters(bytes32 what, uint data) external;\\n    function modifyParameters(bytes32 collateralType, bytes32 what, uint data) external;\\n\\n    // --- Fungibility ---\\n    function modifyCollateralBalance(bytes32 collateralType, address usr, int256 wad) external;\\n    function transferCollateral(bytes32 collateralType, address src, address dst, uint256 wad) external;\\n    function transferInternalCoins(address src, address dst, uint256 rad) external;\\n\\n    // --- CDP Manipulation ---\\n    /**\\n     * @notice Add/remove collateral or put back/generate more debt in a CDP\\n     * @param collateralType Type of collateral to withdraw/deposit in and from the CDP\\n     * @param cdp Target CDP\\n     * @param collateralSource Account we take collateral from/put collateral into\\n     * @param debtDestination Account from which we credit/debit coins and debt\\n     * @param deltaCollateral Amount of collateral added/extract from the CDP\\n     * @param deltaDebt Amount of debt to generate/repay\\n     */\\n    function modifySAFECollateralization(bytes32 collateralType, address cdp, address collateralSource, address debtDestination, int deltaCollateral, int deltaDebt) external;\\n\\n    // --- CDP Fungibility ---\\n    /**\\n     * @notice Transfer collateral and/or debt between CDPs\\n     * @param collateralType Collateral type transferred between CDPs\\n     * @param src Source CDP\\n     * @param dst Destination CDP\\n     * @param deltaCollateral Amount of collateral to take/add into src and give/take from dst\\n     * @param deltaDebt Amount of debt to take/add into src and give/take from dst\\n     */\\n    function transferSAFECollateralAndDebt(bytes32 collateralType, address src, address dst, int deltaCollateral, int deltaDebt) external;\\n\\n    // --- CDP Confiscation ---\\n    /**\\n     * @notice Normally used by the LiquidationEngine in order to confiscate collateral and\\n       debt from a CDP and give them to someone else\\n     * @param collateralType Collateral type the CDP has locked inside\\n     * @param cdp Target CDP\\n     * @param collateralCounterparty Who we take/give collateral to\\n     * @param debtCounterparty Who we take/give debt to\\n     * @param deltaCollateral Amount of collateral taken/added into the CDP\\n     * @param deltaDebt Amount of debt taken/added into the CDP\\n     */\\n    function confiscateSAFECollateralAndDebt(bytes32 collateralType, address cdp, address collateralCounterparty, address debtCounterparty, int deltaCollateral, int deltaDebt) external;\\n\\n    // --- Settlement ---\\n    /**\\n     * @notice Nullify an amount of coins with an equal amount of debt\\n     * @param rad Amount of debt & coins to destroy (expressed as a number with 45 decimals)\\n     */\\n    function settleDebt(uint rad) external;\\n\\n    /**\\n     * @notice Usually called by CoinSavingsAccount in order to create unbacked debt\\n     * @param debtDestination Usually AccountingEngine that can settle decreaseSoldAmount with surplus\\n     * @param coinDestination Usually CoinSavingsAccount who passes the new coins to depositors\\n     * @param rad Amount of debt to create (expressed as a number with 45 decimals)\\n     */\\n    function createUnbackedDebt(address debtDestination, address coinDestination, uint rad) external;\\n\\n    // --- Rates ---\\n    /**\\n     * @notice Usually called by TaxCollector in order to accrue interest on a specific collateral type\\n     * @param collateralType Collateral type we accrue interest for\\n     * @param surplusDst Destination for amount of surplus created by applying the interest rate\\n       to debt created by CDPs with 'collateralType'\\n     * @param accumulatedRate Multiplier applied to the debtAmount in order to calculate the surplus\\n     */\\n    function updateAccumulatedRate(bytes32 collateralType, address surplusDst, int accumulatedRate) external;\\n}\\n\",\"keccak256\":\"0xf1e715f60362b95b7788deb8531bfefbcc45ab70497f84a13eac55544ad42bb1\",\"license\":\"UNLICENSED\"},\"contracts/makerdao/interfaces/ITaxCollector.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ITaxCollector\\n **/\\ninterface ITaxCollector {\\n    /* ==================== STRUCTS ==================== */\\n\\n    struct CollateralType {\\n        uint256 stabilityFee;      // Collateral-specific, per-second stability fee contribution [ray]\\n        uint256 latestUpdateTime;  // Time of last taxSingle [unix epoch time]\\n    }\\n\\n\\n    /* ==================== METHODS ==================== */\\n\\n    // --- Administration ---\\n    function initializeCollateralType(bytes32 collateralType) external;\\n    function modifyParameters(bytes32 collateralType, bytes32 what, uint data) external;\\n    function modifyParameters(bytes32 what, uint data) external;\\n    function modifyParameters(bytes32 what, address data) external;\\n\\n\\n    // --- Stability Fee Collection ---\\n    /**\\n     * @notice Collect tax from a single collateral type\\n     * @param collateralType Collateral type to tax\\n     */\\n    function taxSingle(bytes32 collateralType) external returns (uint rate);\\n}\\n\",\"keccak256\":\"0x4e074a00ce440b10ed4fc829b01431ce7b91b713df441d6347f1250e544222d9\",\"license\":\"UNLICENSED\"},\"contracts/makerdao/utils/AuthWithoutContractEnabled.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IAuthWithContractEnabled} from \\\"../interfaces/IAuthWithContractEnabled.sol\\\";\\n\\nabstract contract AuthWithoutContractEnabled is IAuthWithContractEnabled {\\n    error NotAuthorized();\\n\\n    // --- Auth ---\\n    mapping (address => uint) public authorizedAccounts;\\n    function addAuthorization(address usr) external isAuthorized { authorizedAccounts[usr] = 1; }\\n    function removeAuthorization(address usr) external isAuthorized { authorizedAccounts[usr] = 0; }\\n    modifier isAuthorized {\\n        if (authorizedAccounts[msg.sender] != 1) revert NotAuthorized();\\n        _;\\n    }\\n\\n    uint256 public contractEnabled; // Access flag, indicates whether this contract is still active\\n    function disableContract() external isAuthorized {\\n        contractEnabled = 0;\\n        emit DisableContract();\\n    }\\n}\\n\",\"keccak256\":\"0x44f65b4acce8fcda0ad1026c491b1479f2246d56a20eecf099398f8f4c786431\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60803461008157601f610af238819003918201601f19168301916001600160401b038311848410176100865780849260209460405283398101031261008157516001600160a01b0381169081900361008157336000526000602052600160406000205560018060a01b03196003541617600355604051610a55908161009d8239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe60806040526004361015610013575b600080fd5b60003560e01c806324ba58841461012b57806335b281531461012257806341b3a0d9146101195780635001f3b514610110578063542f76a6146101075780635e412858146100fe5780636614f010146100f557806367aea313146100ec5780636c50dbba146100e3578063894ba833146100da57806394f3f81d146100d1578063d07900bb146100c8578063d4b9311d146100bf5763fe4f5890146100b757600080fd5b61000e61074f565b5061000e61068f565b5061000e610659565b5061000e6105ff565b5061000e6105ab565b5061000e61040c565b5061000e6103e2565b5061000e610314565b5061000e61026b565b5061000e610241565b5061000e610222565b5061000e610203565b5061000e61019b565b5061000e610160565b600435906001600160a01b038216820361000e57565b602435906001600160a01b038216820361000e57565b503461000e57602036600319011261000e576001600160a01b03610182610134565b1660005260006020526020604060002054604051908152f35b503461000e57602036600319011261000e576101b5610134565b6000903382528160205260016040832054036101e6576001600160a01b031681526020819052604081206001905580f35b60405163ea8e4eb560e01b8152600490fd5b600091031261000e57565b503461000e57600036600319011261000e576020600154604051908152f35b503461000e57600036600319011261000e576020600554604051908152f35b503461000e57600036600319011261000e576004546040516001600160a01b039091168152602090f35b503461000e57602036600319011261000e5760003381528060205260016040822054036101e657600435815260026020526040812080546102be57676765c793fa10079d601b1b81554260019091015580f35b60405162461bcd60e51b815260206004820152602860248201527f546178436f6c6c6563746f722f636f6c6c61746572616c547970652d616c726560448201526718591e4b5a5b9a5d60c21b6064820152608490fd5b503461000e57604036600319011261000e5761032e61014a565b3360005260006020526001604060002054036101e65760043571383934b6b0b93caa30bc2932b1b2b4bb32b960711b0361038457600480546001600160a01b0319166001600160a01b0392909216919091179055005b60405162461bcd60e51b815260206004820152603060248201527f546178436f6c6c6563746f722f6d6f64696679506172616d65746572732d756e60448201526f7265636f676e697a65642d706172616d60801b6064820152608490fd5b503461000e57600036600319011261000e576003546040516001600160a01b039091168152602090f35b503461000e57602036600319011261000e57600435610439600161042f83610649565b015442101561078f565b6003546001600160a01b031660405163d07900bb60e01b8152600481018390529160a083602481855afa92831561059e575b600093610569575b506104b2836104ad61049160055461048a86610649565b5490610951565b6104a7600161049f87610649565b01544261087e565b90610895565b6109b7565b6004549092906104cc906001600160a01b03169484610973565b93813b1561000e57604051630e9e11d360e01b8152600481018490526001600160a01b03919091166024820152604481019490945261053f93906000908290606490829084905af1801561055c575b610543575b50600161052d4292610649565b01556040519081529081906020820190565b0390f35b80610550610556926107e7565b806101f8565b38610520565b61056461085a565b61051b565b61058b91935060a03d8111610597575b6105838183610810565b810190610833565b50505090509138610473565b503d610579565b6105a661085a565b61046b565b503461000e576000806003193601126105fc573381528060205260016040822054036101e657806001557f2d4b4ecff7bd7503135271925520a2f6c0d98c9473ffc1a1e72c92502f51b25e8180a180f35b80fd5b503461000e57602036600319011261000e57610619610134565b6000903382528160205260016040832054036101e6576001600160a01b0316815260208190526040812081905580f35b6000526002602052604060002090565b503461000e57602036600319011261000e5760043560005260026020526040806000206001815491015482519182526020820152f35b503461000e57606036600319011261000e576004356000903382528160205260016040832054036101e6578082526002602052600160408320015442036106f8576024356b73746162696c69747946656560a01b03610384576106f460443591610649565b5580f35b60405162461bcd60e51b815260206004820152602960248201527f546178436f6c6c6563746f722f6c617465737455706461746554696d652d6e6f6044820152681d0b5d5c19185d195960ba1b6064820152608490fd5b503461000e57604036600319011261000e573360005260006020526001604060002054036101e657600435636261736560e01b0361038457602435600555005b1561079657565b60405162461bcd60e51b8152602060048201526024808201527f546178436f6c6c6563746f722f696e76616c69642d626c6f636b2d74696d6573604482015263074616d760e41b6064820152608490fd5b6001600160401b0381116107fa57604052565b634e487b7160e01b600052604160045260246000fd5b601f909101601f19168101906001600160401b038211908210176107fa57604052565b908160a091031261000e578051916020820151916040810151916080606083015192015190565b506040513d6000823e3d90fd5b50634e487b7160e01b600052601160045260246000fd5b9190820391821161088b57565b610893610867565b565b9091908015610936576001838116156109245781935b811c805b6108b857505050565b828002928084040361000e57676765c793fa10079d601a1b9280840190811061000e57676765c793fa10079d601b1b90819004938284166108fe575b5050811c806108af565b8487929397029185830414158515151661000e57810190811061000e57049338806108f4565b676765c793fa10079d601b1b936108ab565b50901561094257600090565b676765c793fa10079d601b1b90565b9190820191828111610966575b821061000e57565b61096e610867565b61095e565b9190600080828503921291821592858212168582138416176109aa575b93121590816109a2575b501561000e57565b90503861099a565b6109b2610867565b610990565b9080820291808304821481151715610a12575b81159182156109ec575b50501561000e57676765c793fa10079d601b1b900490565b90916109fc5782041438806109d4565b634e487b7160e01b600052601260045260246000fd5b610a1a610867565b6109ca56fea26469706673582212207f1ca4c29047bcb8882774d0be4ba877c508f35c3fce06b1122c5d2183d474d064736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361015610013575b600080fd5b60003560e01c806324ba58841461012b57806335b281531461012257806341b3a0d9146101195780635001f3b514610110578063542f76a6146101075780635e412858146100fe5780636614f010146100f557806367aea313146100ec5780636c50dbba146100e3578063894ba833146100da57806394f3f81d146100d1578063d07900bb146100c8578063d4b9311d146100bf5763fe4f5890146100b757600080fd5b61000e61074f565b5061000e61068f565b5061000e610659565b5061000e6105ff565b5061000e6105ab565b5061000e61040c565b5061000e6103e2565b5061000e610314565b5061000e61026b565b5061000e610241565b5061000e610222565b5061000e610203565b5061000e61019b565b5061000e610160565b600435906001600160a01b038216820361000e57565b602435906001600160a01b038216820361000e57565b503461000e57602036600319011261000e576001600160a01b03610182610134565b1660005260006020526020604060002054604051908152f35b503461000e57602036600319011261000e576101b5610134565b6000903382528160205260016040832054036101e6576001600160a01b031681526020819052604081206001905580f35b60405163ea8e4eb560e01b8152600490fd5b600091031261000e57565b503461000e57600036600319011261000e576020600154604051908152f35b503461000e57600036600319011261000e576020600554604051908152f35b503461000e57600036600319011261000e576004546040516001600160a01b039091168152602090f35b503461000e57602036600319011261000e5760003381528060205260016040822054036101e657600435815260026020526040812080546102be57676765c793fa10079d601b1b81554260019091015580f35b60405162461bcd60e51b815260206004820152602860248201527f546178436f6c6c6563746f722f636f6c6c61746572616c547970652d616c726560448201526718591e4b5a5b9a5d60c21b6064820152608490fd5b503461000e57604036600319011261000e5761032e61014a565b3360005260006020526001604060002054036101e65760043571383934b6b0b93caa30bc2932b1b2b4bb32b960711b0361038457600480546001600160a01b0319166001600160a01b0392909216919091179055005b60405162461bcd60e51b815260206004820152603060248201527f546178436f6c6c6563746f722f6d6f64696679506172616d65746572732d756e60448201526f7265636f676e697a65642d706172616d60801b6064820152608490fd5b503461000e57600036600319011261000e576003546040516001600160a01b039091168152602090f35b503461000e57602036600319011261000e57600435610439600161042f83610649565b015442101561078f565b6003546001600160a01b031660405163d07900bb60e01b8152600481018390529160a083602481855afa92831561059e575b600093610569575b506104b2836104ad61049160055461048a86610649565b5490610951565b6104a7600161049f87610649565b01544261087e565b90610895565b6109b7565b6004549092906104cc906001600160a01b03169484610973565b93813b1561000e57604051630e9e11d360e01b8152600481018490526001600160a01b03919091166024820152604481019490945261053f93906000908290606490829084905af1801561055c575b610543575b50600161052d4292610649565b01556040519081529081906020820190565b0390f35b80610550610556926107e7565b806101f8565b38610520565b61056461085a565b61051b565b61058b91935060a03d8111610597575b6105838183610810565b810190610833565b50505090509138610473565b503d610579565b6105a661085a565b61046b565b503461000e576000806003193601126105fc573381528060205260016040822054036101e657806001557f2d4b4ecff7bd7503135271925520a2f6c0d98c9473ffc1a1e72c92502f51b25e8180a180f35b80fd5b503461000e57602036600319011261000e57610619610134565b6000903382528160205260016040832054036101e6576001600160a01b0316815260208190526040812081905580f35b6000526002602052604060002090565b503461000e57602036600319011261000e5760043560005260026020526040806000206001815491015482519182526020820152f35b503461000e57606036600319011261000e576004356000903382528160205260016040832054036101e6578082526002602052600160408320015442036106f8576024356b73746162696c69747946656560a01b03610384576106f460443591610649565b5580f35b60405162461bcd60e51b815260206004820152602960248201527f546178436f6c6c6563746f722f6c617465737455706461746554696d652d6e6f6044820152681d0b5d5c19185d195960ba1b6064820152608490fd5b503461000e57604036600319011261000e573360005260006020526001604060002054036101e657600435636261736560e01b0361038457602435600555005b1561079657565b60405162461bcd60e51b8152602060048201526024808201527f546178436f6c6c6563746f722f696e76616c69642d626c6f636b2d74696d6573604482015263074616d760e41b6064820152608490fd5b6001600160401b0381116107fa57604052565b634e487b7160e01b600052604160045260246000fd5b601f909101601f19168101906001600160401b038211908210176107fa57604052565b908160a091031261000e578051916020820151916040810151916080606083015192015190565b506040513d6000823e3d90fd5b50634e487b7160e01b600052601160045260246000fd5b9190820391821161088b57565b610893610867565b565b9091908015610936576001838116156109245781935b811c805b6108b857505050565b828002928084040361000e57676765c793fa10079d601a1b9280840190811061000e57676765c793fa10079d601b1b90819004938284166108fe575b5050811c806108af565b8487929397029185830414158515151661000e57810190811061000e57049338806108f4565b676765c793fa10079d601b1b936108ab565b50901561094257600090565b676765c793fa10079d601b1b90565b9190820191828111610966575b821061000e57565b61096e610867565b61095e565b9190600080828503921291821592858212168582138416176109aa575b93121590816109a2575b501561000e57565b90503861099a565b6109b2610867565b610990565b9080820291808304821481151715610a12575b81159182156109ec575b50501561000e57676765c793fa10079d601b1b900490565b90916109fc5782041438806109d4565b634e487b7160e01b600052601260045260246000fd5b610a1a610867565b6109ca56fea26469706673582212207f1ca4c29047bcb8882774d0be4ba877c508f35c3fce06b1122c5d2183d474d064736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "taxSingle(bytes32)": {
        "params": {
          "collateralType": "Collateral type to tax"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "taxSingle(bytes32)": {
        "notice": "Collect tax from a single collateral type"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5608,
        "contract": "contracts/makerdao/core/TaxCollector.sol:TaxCollector",
        "label": "authorizedAccounts",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5652,
        "contract": "contracts/makerdao/core/TaxCollector.sol:TaxCollector",
        "label": "contractEnabled",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3157,
        "contract": "contracts/makerdao/core/TaxCollector.sol:TaxCollector",
        "label": "collateralTypes",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_struct(CollateralType)5473_storage)"
      },
      {
        "astId": 3160,
        "contract": "contracts/makerdao/core/TaxCollector.sol:TaxCollector",
        "label": "safeEngine",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ISafeEngine)5465"
      },
      {
        "astId": 3162,
        "contract": "contracts/makerdao/core/TaxCollector.sol:TaxCollector",
        "label": "primaryTaxReceiver",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 3164,
        "contract": "contracts/makerdao/core/TaxCollector.sol:TaxCollector",
        "label": "base",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ISafeEngine)5465": {
        "encoding": "inplace",
        "label": "contract ISafeEngine",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(CollateralType)5473_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct ITaxCollector.CollateralType)",
        "numberOfBytes": "32",
        "value": "t_struct(CollateralType)5473_storage"
      },
      "t_struct(CollateralType)5473_storage": {
        "encoding": "inplace",
        "label": "struct ITaxCollector.CollateralType",
        "members": [
          {
            "astId": 5470,
            "contract": "contracts/makerdao/core/TaxCollector.sol:TaxCollector",
            "label": "stabilityFee",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5472,
            "contract": "contracts/makerdao/core/TaxCollector.sol:TaxCollector",
            "label": "latestUpdateTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}