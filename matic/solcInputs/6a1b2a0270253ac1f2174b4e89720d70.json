{
  "language": "Solidity",
  "sources": {
    "contracts/lib/ds-auth/src/auth.sol": {
      "content": "// SPDX-License-Identifier: GNU-3\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity >=0.4.23;\n\ninterface DSAuthority {\n    function canCall(\n        address src, address dst, bytes4 sig\n    ) external view returns (bool);\n}\n\ncontract DSAuthEvents {\n    event LogSetAuthority (address indexed authority);\n    event LogSetOwner     (address indexed owner);\n}\n\ncontract DSAuth is DSAuthEvents {\n    DSAuthority  public  authority;\n    address      public  owner;\n\n    constructor() public {\n        owner = msg.sender;\n        emit LogSetOwner(msg.sender);\n    }\n\n    function setOwner(address owner_)\n        public\n        auth\n    {\n        owner = owner_;\n        emit LogSetOwner(owner);\n    }\n\n    function setAuthority(DSAuthority authority_)\n        public\n        auth\n    {\n        authority = authority_;\n        emit LogSetAuthority(address(authority));\n    }\n\n    modifier auth {\n        require(isAuthorized(msg.sender, msg.sig), \"ds-auth-unauthorized\");\n        _;\n    }\n\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\n        if (src == address(this)) {\n            return true;\n        } else if (src == owner) {\n            return true;\n        } else if (authority == DSAuthority(address(0))) {\n            return false;\n        } else {\n            return authority.canCall(src, address(this), sig);\n        }\n    }\n}\n"
    },
    "contracts/lib/ds-note/src/note.sol": {
      "content": "/// note.sol -- the `note' modifier, for logging calls as events\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity >=0.4.23;\n\ncontract DSNote {\n    event LogNote(\n        bytes4   indexed  sig,\n        address  indexed  guy,\n        bytes32  indexed  foo,\n        bytes32  indexed  bar,\n        uint256           wad,\n        bytes             fax\n    ) anonymous;\n\n    modifier note {\n        bytes32 foo;\n        bytes32 bar;\n        uint256 wad;\n\n        assembly {\n            foo := calldataload(4)\n            bar := calldataload(36)\n            wad := callvalue()\n        }\n\n        _;\n\n        emit LogNote(msg.sig, msg.sender, foo, bar, wad, msg.data);\n    }\n}\n"
    },
    "contracts/makerdao/core/ProxyRegistry.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n\n/// ProxyRegistry.sol\n\n// Copyright (C) 2018-2021 Dai Foundation\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity >=0.6.0;\n\nimport \"../utils/proxy.sol\";\n\n// This Registry deploys new proxy instances through DSProxyFactory.build(address) and keeps a registry of owner => proxy\ncontract ProxyRegistry {\n    mapping(address => DSProxy) public proxies;\n    DSProxyFactory factory;\n\n    constructor(address factory_) public {\n        factory = DSProxyFactory(factory_);\n    }\n\n    // deploys a new proxy instance\n    // sets owner of proxy to caller\n    function build() public returns (address payable proxy) {\n        proxy = build(msg.sender);\n    }\n\n    // deploys a new proxy instance\n    // sets custom owner of proxy\n    function build(address owner) public returns (address payable proxy) {\n        require(proxies[owner] == DSProxy(0) || proxies[owner].owner() != owner); // Not allow new proxy if the user already has one and remains being the owner\n        proxy = factory.build(owner);\n        proxies[owner] = DSProxy(proxy);\n    }\n}\n"
    },
    "contracts/makerdao/externalContracts/DssProxyActions.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n\n/// DssProxyActions.sol\n\n// Copyright (C) 2018-2020 Maker Ecosystem Growth Holdings, INC.\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity ^0.6.12;\n\ninterface CoinLike {\n    function approve(address, uint) external;\n    function transfer(address, uint) external;\n    function transferFrom(address, address, uint) external;\n    function deposit() external payable;\n    function withdraw(uint) external;\n}\n\ninterface ManagerLike {\n    function cdpCan(address, uint, address) external view returns (uint);\n    function collateralTypes(uint) external view returns (bytes32);\n    function owns(uint) external view returns (address);\n    function safes(uint) external view returns (address);\n    function safeEngine() external view returns (address);\n    function openSafe(bytes32, address) external returns (uint);\n    function transferSafeOwnership(uint, address) external;\n    function modifySAFECollateralization(uint, int, int) external;\n    function transferCollateral(uint, address, uint) external;\n    function transferInternalCoins(uint, address, uint) external;\n    function exit(address, uint, address, uint) external;\n}\n\ninterface SafeEngineLike {\n    function cdpRights(address, address) external view returns (uint);\n    function collateralTypes(bytes32) external view returns (uint, uint, uint, uint, uint);\n    function coinBalance(address) external view returns (uint);\n    function safes(bytes32, address) external view returns (uint, uint);\n    function modifySAFECollateralization(bytes32, address, address, address, int, int) external;\n    function approveSAFEModification(address) external;\n    function transferInternalCoins(address, address, uint) external;\n}\n\ninterface CollateralJoinLike {\n    function decimals() external returns (uint);\n    function collateral() external returns (CoinLike);\n    function join(address, uint) external payable;\n    function exit(address, uint) external;\n}\n\ninterface CoinJoinLike {\n    function safeEngine() external returns (SafeEngineLike);\n    function systemCoin() external returns (CoinLike);\n    function join(address, uint) external payable;\n    function exit(address, uint) external;\n}\n\ninterface SafeModificationLike {\n    function approveSAFEModification(address) external;\n    function denySAFEModification(address) external;\n}\n\ninterface taxCollectorLike {\n    function taxSingle(bytes32) external returns (uint);\n}\n\ninterface ProxyRegistryLike {\n    function proxies(address) external view returns (address);\n    function build(address) external returns (address);\n}\n\ninterface ProxyLike {\n    function owner() external view returns (address);\n}\n\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n// WARNING: These functions meant to be used as a a library for a DSProxy. Some are unsafe if you call them directly.\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\ncontract Common {\n    uint256 constant RAY = 10 ** 27;\n\n    // Internal functions\n\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x, \"mul-overflow\");\n    }\n\n    // Public functions\n\n    function coinJoin_join(address apt, address safe, uint wad) public {\n        // Gets DAI from the user's wallet\n        CoinJoinLike(apt).systemCoin().transferFrom(msg.sender, address(this), wad);\n        // Approves adapter to take the DAI amount\n        CoinJoinLike(apt).systemCoin().approve(apt, wad);\n        // Joins DAI into the safeEngine\n        CoinJoinLike(apt).join(safe, wad);\n    }\n}\n\ncontract DssProxyActions is Common {\n    // Internal functions\n\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x, \"sub-overflow\");\n    }\n\n    function toInt(uint x) internal pure returns (int y) {\n        y = int(x);\n        require(y >= 0, \"int-overflow\");\n    }\n\n    function toRad(uint wad) internal pure returns (uint rad) {\n        rad = mul(wad, 10 ** 27);\n    }\n\n    function convertTo18(address collateralJoin, uint256 amt) internal returns (uint256 wad) {\n        // For those collaterals that have less than 18 decimals precision we need to do the conversion before passing to modifySAFECollateralization function\n        // Adapters will automatically handle the difference of precision\n        wad = mul(\n            amt,\n            10 ** (18 - CollateralJoinLike(collateralJoin).decimals())\n        );\n    }\n\n    function _getGeneratedDeltaDebt(\n        address safeEngine,\n        address taxCollector,\n        address safe,\n        bytes32 collateralType,\n        uint wad\n    ) internal returns (int deltaDebt) {\n        // Updates stability fee rate\n        uint rate = taxCollectorLike(taxCollector).taxSingle(collateralType);\n\n        // Gets DAI balance of the safe in the safeEngine\n        uint dai = SafeEngineLike(safeEngine).coinBalance(safe);\n\n        // If there was already enough DAI in the safeEngine balance, just exits it without adding more debt\n        if (dai < mul(wad, RAY)) {\n            // Calculates the needed deltaDebt so together with the existing dai in the safeEngine is enough to exit wad amount of DAI tokens\n            deltaDebt = toInt(sub(mul(wad, RAY), dai) / rate);\n            // This is neeeded due lack of precision. It might need to sum an extra deltaDebt wei (for the given DAI wad amount)\n            deltaDebt = mul(uint(deltaDebt), rate) < mul(wad, RAY) ? deltaDebt + 1 : deltaDebt;\n        }\n    }\n\n    function _getRepaidDeltaDebt(\n        address safeEngine,\n        uint dai,\n        address safe,\n        bytes32 collateralType\n    ) internal view returns (int deltaDebt) {\n        // Gets actual rate from the safeEngine\n        (, uint rate,,,) = SafeEngineLike(safeEngine).collateralTypes(collateralType);\n        // Gets actual safeDebt value of the safe\n        (, uint safeDebt) = SafeEngineLike(safeEngine).safes(collateralType, safe);\n\n        // Uses the whole dai balance in the safeEngine to reduce the debt\n        deltaDebt = toInt(dai / rate);\n        // Checks the calculated deltaDebt is not higher than safe.safeDebt (total debt), otherwise uses its value\n        deltaDebt = uint(deltaDebt) <= safeDebt ? - deltaDebt : - toInt(safeDebt);\n    }\n\n    function _getWipeAllWad(\n        address safeEngine,\n        address usr,\n        address safe,\n        bytes32 collateralType\n    ) internal view returns (uint wad) {\n        // Gets actual rate from the safeEngine\n        (, uint rate,,,) = SafeEngineLike(safeEngine).collateralTypes(collateralType);\n        // Gets actual safeDebt value of the safe\n        (, uint safeDebt) = SafeEngineLike(safeEngine).safes(collateralType, safe);\n        // Gets actual dai amount in the safe\n        uint dai = SafeEngineLike(safeEngine).coinBalance(usr);\n\n        uint rad = sub(mul(safeDebt, rate), dai);\n        wad = rad / RAY;\n\n        // If the rad precision has some dust, it will need to request for 1 extra wad wei\n        wad = mul(wad, RAY) < rad ? wad + 1 : wad;\n    }\n\n    // Public functions\n\n    function transfer(address gem, address dst, uint amt) public {\n        CoinLike(gem).transfer(dst, amt);\n    }\n\n    function ethJoin_join(address apt, address safe) public payable {\n        // Wraps ETH in WETH\n        CollateralJoinLike(apt).collateral().deposit.value(msg.value)();\n        // Approves adapter to take the WETH amount\n        CollateralJoinLike(apt).collateral().approve(address(apt), msg.value);\n        // Joins WETH collateral into the safeEngine\n        CollateralJoinLike(apt).join(safe, msg.value);\n    }\n\n    function collateralJoin_join(address apt, address safe, uint amt, bool transferFrom) public {\n        // Only executes for tokens that have approval/transferFrom implementation\n        if (transferFrom) {\n            // Gets token from the user's wallet\n            CollateralJoinLike(apt).collateral().transferFrom(msg.sender, address(this), amt);\n            // Approves adapter to take the token amount\n            CollateralJoinLike(apt).collateral().approve(apt, amt);\n        }\n        // Joins token collateral into the safeEngine\n        CollateralJoinLike(apt).join(safe, amt);\n    }\n\n    function approveSAFEModification(\n        address obj,\n        address usr\n    ) public {\n        SafeModificationLike(obj).approveSAFEModification(usr);\n    }\n\n    function denySAFEModification(\n        address obj,\n        address usr\n    ) public {\n        SafeModificationLike(obj).denySAFEModification(usr);\n    }\n\n    function openSafe(\n        address manager,\n        bytes32 collateralType,\n        address usr\n    ) public returns (uint cdp) {\n        cdp = ManagerLike(manager).openSafe(collateralType, usr);\n    }\n\n    function transferSafeOwnership(\n        address manager,\n        uint cdp,\n        address usr\n    ) public {\n        ManagerLike(manager).transferSafeOwnership(cdp, usr);\n    }\n\n    function transferSafeOwnershipToProxy(\n        address proxyRegistry,\n        address manager,\n        uint cdp,\n        address dst\n    ) public {\n        // Gets actual proxy address\n        address proxy = ProxyRegistryLike(proxyRegistry).proxies(dst);\n        // Checks if the proxy address already existed and dst address is still the owner\n        if (proxy == address(0) || ProxyLike(proxy).owner() != dst) {\n            uint csize;\n            assembly {\n                csize := extcodesize(dst)\n            }\n            // We want to avoid creating a proxy for a contract address that might not be able to handle proxies, then losing the CDP\n            require(csize == 0, \"Dst-is-a-contract\");\n            // Creates the proxy for the dst address\n            proxy = ProxyRegistryLike(proxyRegistry).build(dst);\n        }\n        // Transfers CDP to the dst proxy\n        transferSafeOwnership(manager, cdp, proxy);\n    }\n\n    function transferCollateral(\n        address manager,\n        uint cdp,\n        address dst,\n        uint wad\n    ) public {\n        ManagerLike(manager).transferCollateral(cdp, dst, wad);\n    }\n\n    function transferInternalCoins(\n        address manager,\n        uint cdp,\n        address dst,\n        uint rad\n    ) public {\n        ManagerLike(manager).transferInternalCoins(cdp, dst, rad);\n    }\n\n    function modifySAFECollateralization(\n        address manager,\n        uint cdp,\n        int deltaCollateral,\n        int deltaDebt\n    ) public {\n        ManagerLike(manager).modifySAFECollateralization(cdp, deltaCollateral, deltaDebt);\n    }\n\n    function lockETH(\n        address manager,\n        address ethJoin,\n        uint cdp\n    ) public payable {\n        // Receives ETH amount, converts it to WETH and joins it into the safeEngine\n        ethJoin_join(ethJoin, address(this));\n        // Locks WETH amount into the CDP\n        SafeEngineLike(ManagerLike(manager).safeEngine()).modifySAFECollateralization(\n            ManagerLike(manager).collateralTypes(cdp),\n            ManagerLike(manager).safes(cdp),\n            address(this),\n            address(this),\n            toInt(msg.value),\n            0\n        );\n    }\n\n    function lockTokenCollateral(\n        address manager,\n        address collateralJoin,\n        uint cdp,\n        uint amt,\n        bool transferFrom\n    ) public {\n        // Takes token amount from user's wallet and joins into the safeEngine\n        collateralJoin_join(collateralJoin, address(this), amt, transferFrom);\n        // Locks token amount into the CDP\n        SafeEngineLike(ManagerLike(manager).safeEngine()).modifySAFECollateralization(\n            ManagerLike(manager).collateralTypes(cdp),\n            ManagerLike(manager).safes(cdp),\n            address(this),\n            address(this),\n            toInt(convertTo18(collateralJoin, amt)),\n            0\n        );\n    }\n\n//    function safeLockTokenCollateral(\n//        address manager,\n//        address collateralJoin,\n//        uint cdp,\n//        uint amt,\n//        bool transferFrom,\n//        address owner\n//    ) public {\n//        require(ManagerLike(manager).owns(cdp) == owner, \"bad-owner\");\n//        lockTokenCollateral(manager, collateralJoin, cdp, amt, transferFrom);\n//    }\n\n    function freeETH(\n        address manager,\n        address ethJoin,\n        uint cdp,\n        uint wad\n    ) public {\n        // Unlocks WETH amount from the CDP\n        modifySAFECollateralization(manager, cdp, -toInt(wad), 0);\n        // Moves the amount from the CDP safe to proxy's address\n        transferCollateral(manager, cdp, address(this), wad);\n        // Exits WETH amount to proxy address as a token\n        CollateralJoinLike(ethJoin).exit(address(this), wad);\n        // Converts WETH to ETH\n        CollateralJoinLike(ethJoin).collateral().withdraw(wad);\n        // Sends ETH back to the user's wallet\n        msg.sender.transfer(wad);\n    }\n\n    function freeTokenCollateral(\n        address manager,\n        address collateralJoin,\n        uint cdp,\n        uint amt\n    ) public {\n        uint wad = convertTo18(collateralJoin, amt);\n        // Unlocks token amount from the CDP\n        modifySAFECollateralization(manager, cdp, -toInt(wad), 0);\n        // Moves the amount from the CDP safe to proxy's address\n        transferCollateral(manager, cdp, address(this), wad);\n        // Exits token amount to the user's wallet as a token\n        CollateralJoinLike(collateralJoin).exit(msg.sender, amt);\n    }\n\n    function exitETH(\n        address manager,\n        address ethJoin,\n        uint cdp,\n        uint wad\n    ) public {\n        // Moves the amount from the CDP safe to proxy's address\n        transferCollateral(manager, cdp, address(this), wad);\n\n        // Exits WETH amount to proxy address as a token\n        CollateralJoinLike(ethJoin).exit(address(this), wad);\n        // Converts WETH to ETH\n        CollateralJoinLike(ethJoin).collateral().withdraw(wad);\n        // Sends ETH back to the user's wallet\n        msg.sender.transfer(wad);\n    }\n\n    function exitTokenCollateral(\n        address manager,\n        address collateralJoin,\n        uint cdp,\n        uint amt\n    ) public {\n        // Moves the amount from the CDP safe to proxy's address\n        transferCollateral(manager, cdp, address(this), convertTo18(collateralJoin, amt));\n\n        // Exits token amount to the user's wallet as a token\n        CollateralJoinLike(collateralJoin).exit(msg.sender, amt);\n    }\n\n    function generateDebt(\n        address manager,\n        address taxCollector,\n        address coinJoin,\n        uint cdp,\n        uint wad\n    ) public {\n        address safe = ManagerLike(manager).safes(cdp);\n        address safeEngine = ManagerLike(manager).safeEngine();\n        bytes32 collateralType = ManagerLike(manager).collateralTypes(cdp);\n        // Generates debt in the CDP\n        modifySAFECollateralization(manager, cdp, 0, _getGeneratedDeltaDebt(safeEngine, taxCollector, safe, collateralType, wad));\n        // Moves the DAI amount (balance in the safeEngine in rad) to proxy's address\n        transferInternalCoins(manager, cdp, address(this), toRad(wad));\n        // Allows adapter to access to proxy's DAI balance in the safeEngine\n        if (SafeEngineLike(safeEngine).cdpRights(address(this), address(coinJoin)) == 0) {\n            SafeEngineLike(safeEngine).approveSAFEModification(coinJoin);\n        }\n        // Exits DAI to the user's wallet as a token\n        CoinJoinLike(coinJoin).exit(msg.sender, wad);\n    }\n\n    function repayDebt(\n        address manager,\n        address coinJoin,\n        uint cdp,\n        uint wad\n    ) public {\n        address safeEngine = ManagerLike(manager).safeEngine();\n        address safe = ManagerLike(manager).safes(cdp);\n        bytes32 collateralType = ManagerLike(manager).collateralTypes(cdp);\n\n        address own = ManagerLike(manager).owns(cdp);\n        if (own == address(this) || ManagerLike(manager).cdpCan(own, cdp, address(this)) == 1) {\n            // Joins DAI amount into the safeEngine\n            coinJoin_join(coinJoin, safe, wad);\n            // Paybacks debt to the CDP\n            modifySAFECollateralization(manager, cdp, 0, _getRepaidDeltaDebt(safeEngine, SafeEngineLike(safeEngine).coinBalance(safe), safe, collateralType));\n        } else {\n            // Joins DAI amount into the safeEngine\n            coinJoin_join(coinJoin, address(this), wad);\n            // Paybacks debt to the CDP\n            SafeEngineLike(safeEngine).modifySAFECollateralization(\n                collateralType,\n                safe,\n                address(this),\n                address(this),\n                0,\n                _getRepaidDeltaDebt(safeEngine, wad * RAY, safe, collateralType)\n            );\n        }\n    }\n\n//    function safeRepayDebt(\n//        address manager,\n//        address coinJoin,\n//        uint cdp,\n//        uint wad,\n//        address owner\n//    ) public {\n//        require(ManagerLike(manager).owns(cdp) == owner, \"bad-owner\");\n//        repayDebt(manager, coinJoin, cdp, wad);\n//    }\n\n    function repayAllDebt(\n        address manager,\n        address coinJoin,\n        uint cdp\n    ) public {\n        address safeEngine = ManagerLike(manager).safeEngine();\n        address safe = ManagerLike(manager).safes(cdp);\n        bytes32 collateralType = ManagerLike(manager).collateralTypes(cdp);\n        (, uint safeDebt) = SafeEngineLike(safeEngine).safes(collateralType, safe);\n\n        address own = ManagerLike(manager).owns(cdp);\n        if (own == address(this) || ManagerLike(manager).cdpCan(own, cdp, address(this)) == 1) {\n            // Joins DAI amount into the safeEngine\n            coinJoin_join(coinJoin, safe, _getWipeAllWad(safeEngine, safe, safe, collateralType));\n            // Paybacks debt to the CDP\n            modifySAFECollateralization(manager, cdp, 0, -int(safeDebt));\n        } else {\n            // Joins DAI amount into the safeEngine\n            coinJoin_join(coinJoin, address(this), _getWipeAllWad(safeEngine, address(this), safe, collateralType));\n            // Paybacks debt to the CDP\n            SafeEngineLike(safeEngine).modifySAFECollateralization(\n                collateralType,\n                safe,\n                address(this),\n                address(this),\n                0,\n                -int(safeDebt)\n            );\n        }\n    }\n\n//    function safeRepayAllDebt(\n//        address manager,\n//        address coinJoin,\n//        uint cdp,\n//        address owner\n//    ) public {\n//        require(ManagerLike(manager).owns(cdp) == owner, \"bad-owner\");\n//        repayAllDebt(manager, coinJoin, cdp);\n//    }\n\n    function lockETHAndGenerateDebt(\n        address manager,\n        address taxCollector,\n        address ethJoin,\n        address coinJoin,\n        uint cdp,\n        uint wadD\n    ) public payable {\n        address safe = ManagerLike(manager).safes(cdp);\n        address safeEngine = ManagerLike(manager).safeEngine();\n        bytes32 collateralType = ManagerLike(manager).collateralTypes(cdp);\n        // Receives ETH amount, converts it to WETH and joins it into the safeEngine\n        ethJoin_join(ethJoin, safe);\n        // Locks WETH amount into the CDP and generates debt\n        modifySAFECollateralization(manager, cdp, toInt(msg.value), _getGeneratedDeltaDebt(safeEngine, taxCollector, safe, collateralType, wadD));\n        // Moves the DAI amount (balance in the safeEngine in rad) to proxy's address\n        transferInternalCoins(manager, cdp, address(this), toRad(wadD));\n        // Allows adapter to access to proxy's DAI balance in the safeEngine\n        if (SafeEngineLike(safeEngine).cdpRights(address(this), address(coinJoin)) == 0) {\n            SafeEngineLike(safeEngine).approveSAFEModification(coinJoin);\n        }\n        // Exits DAI to the user's wallet as a token\n        CoinJoinLike(coinJoin).exit(msg.sender, wadD);\n    }\n\n    function openLockETHAndGenerateDebt(\n        address manager,\n        address taxCollector,\n        address ethJoin,\n        address coinJoin,\n        bytes32 collateralType,\n        uint wadD\n    ) public payable returns (uint cdp) {\n        cdp = openSafe(manager, collateralType, address(this));\n        lockETHAndGenerateDebt(manager, taxCollector, ethJoin, coinJoin, cdp, wadD);\n    }\n\n    function lockTokenCollateralAndGenerateDebt(\n        address manager,\n        address taxCollector,\n        address collateralJoin,\n        address coinJoin,\n        uint safe,\n        uint collateralAmount,\n        uint deltaWad,\n        bool transferFrom\n    ) public {\n        address safeHandler = ManagerLike(manager).safes(safe);\n        address safeEngine = ManagerLike(manager).safeEngine();\n        bytes32 collateralType = ManagerLike(manager).collateralTypes(safe);\n        // Takes token amount from user's wallet and joins into the safeEngine\n        collateralJoin_join(collateralJoin, safeHandler, collateralAmount, transferFrom);\n        // Locks token amount into the SAFE and generates debt\n        modifySAFECollateralization(manager, safe, toInt(convertTo18(collateralJoin, collateralAmount)), _getGeneratedDeltaDebt(safeEngine, taxCollector, safeHandler, collateralType, deltaWad));\n        // Moves the COIN amount (balance in the safeEngine in rad) to proxy's address\n        transferInternalCoins(manager, safe, address(this), toRad(deltaWad));\n        // Allows adapter to access to proxy's COIN balance in the safeEngine\n        if (SafeEngineLike(safeEngine).cdpRights(address(this), address(coinJoin)) == 0) {\n            SafeEngineLike(safeEngine).approveSAFEModification(coinJoin);\n        }\n        // Exits COIN to the user's wallet as a token\n        CoinJoinLike(coinJoin).exit(msg.sender, deltaWad);\n    }\n\n    function openLockTokenCollateralAndGenerateDebt(\n        address manager,\n        address taxCollector,\n        address collateralJoin,\n        address coinJoin,\n        bytes32 collateralType,\n        uint amtC,\n        uint wadD,\n        bool transferFrom\n    ) public returns (uint cdp) {\n        cdp = openSafe(manager, collateralType, address(this));\n        lockTokenCollateralAndGenerateDebt(manager, taxCollector, collateralJoin, coinJoin, cdp, amtC, wadD, transferFrom);\n    }\n\n    function repayDebtAndFreeETH(\n        address manager,\n        address ethJoin,\n        address coinJoin,\n        uint cdp,\n        uint wadC,\n        uint wadD\n    ) public {\n        address safe = ManagerLike(manager).safes(cdp);\n        // Joins DAI amount into the safeEngine\n        coinJoin_join(coinJoin, safe, wadD);\n        // Paybacks debt to the CDP and unlocks WETH amount from it\n        modifySAFECollateralization(\n            manager,\n            cdp,\n            -toInt(wadC),\n            _getRepaidDeltaDebt(ManagerLike(manager).safeEngine(), SafeEngineLike(ManagerLike(manager).safeEngine()).coinBalance(safe), safe, ManagerLike(manager).collateralTypes(cdp))\n        );\n        // Moves the amount from the CDP safe to proxy's address\n        transferCollateral(manager, cdp, address(this), wadC);\n        // Exits WETH amount to proxy address as a token\n        CollateralJoinLike(ethJoin).exit(address(this), wadC);\n        // Converts WETH to ETH\n        CollateralJoinLike(ethJoin).collateral().withdraw(wadC);\n        // Sends ETH back to the user's wallet\n        msg.sender.transfer(wadC);\n    }\n\n    function repayAllDebtAndFreeETH(\n        address manager,\n        address ethJoin,\n        address coinJoin,\n        uint cdp,\n        uint wadC\n    ) public {\n        address safeEngine = ManagerLike(manager).safeEngine();\n        address safe = ManagerLike(manager).safes(cdp);\n        bytes32 collateralType = ManagerLike(manager).collateralTypes(cdp);\n        (, uint safeDebt) = SafeEngineLike(safeEngine).safes(collateralType, safe);\n\n        // Joins DAI amount into the safeEngine\n        coinJoin_join(coinJoin, safe, _getWipeAllWad(safeEngine, safe, safe, collateralType));\n        // Paybacks debt to the CDP and unlocks WETH amount from it\n        modifySAFECollateralization(\n            manager,\n            cdp,\n            -toInt(wadC),\n            -int(safeDebt)\n        );\n        // Moves the amount from the CDP safe to proxy's address\n        transferCollateral(manager, cdp, address(this), wadC);\n        // Exits WETH amount to proxy address as a token\n        CollateralJoinLike(ethJoin).exit(address(this), wadC);\n        // Converts WETH to ETH\n        CollateralJoinLike(ethJoin).collateral().withdraw(wadC);\n        // Sends ETH back to the user's wallet\n        msg.sender.transfer(wadC);\n    }\n\n    function repayDebtAndFreeTokenCollateral(\n        address manager,\n        address collateralJoin,\n        address coinJoin,\n        uint cdp,\n        uint amtC,\n        uint wadD\n    ) public {\n        address safe = ManagerLike(manager).safes(cdp);\n        // Joins DAI amount into the safeEngine\n        coinJoin_join(coinJoin, safe, wadD);\n        uint wadC = convertTo18(collateralJoin, amtC);\n        // Paybacks debt to the CDP and unlocks token amount from it\n        modifySAFECollateralization(\n            manager,\n            cdp,\n            -toInt(wadC),\n            _getRepaidDeltaDebt(ManagerLike(manager).safeEngine(), SafeEngineLike(ManagerLike(manager).safeEngine()).coinBalance(safe), safe, ManagerLike(manager).collateralTypes(cdp))\n        );\n        // Moves the amount from the CDP safe to proxy's address\n        transferCollateral(manager, cdp, address(this), wadC);\n        // Exits token amount to the user's wallet as a token\n        CollateralJoinLike(collateralJoin).exit(msg.sender, amtC);\n    }\n\n    function repayAllDebtAndFreeTokenCollateral(\n        address manager,\n        address collateralJoin,\n        address coinJoin,\n        uint cdp,\n        uint amtC\n    ) public {\n        address safeEngine = ManagerLike(manager).safeEngine();\n        address safe = ManagerLike(manager).safes(cdp);\n        bytes32 collateralType = ManagerLike(manager).collateralTypes(cdp);\n        (, uint safeDebt) = SafeEngineLike(safeEngine).safes(collateralType, safe);\n\n        // Joins DAI amount into the safeEngine\n        coinJoin_join(coinJoin, safe, _getWipeAllWad(safeEngine, safe, safe, collateralType));\n        uint wadC = convertTo18(collateralJoin, amtC);\n        // Paybacks debt to the CDP and unlocks token amount from it\n        modifySAFECollateralization(\n            manager,\n            cdp,\n            -toInt(wadC),\n            -int(safeDebt)\n        );\n        // Moves the amount from the CDP safe to proxy's address\n        transferCollateral(manager, cdp, address(this), wadC);\n        // Exits token amount to the user's wallet as a token\n        CollateralJoinLike(collateralJoin).exit(msg.sender, amtC);\n    }\n}\n"
    },
    "contracts/makerdao/utils/proxy.sol": {
      "content": "// proxy.sol - execute actions atomically through the proxy's identity\n\n// Copyright (C) 2017  DappHub, LLC\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity >=0.6.0 <0.7.0;\n\nimport \"../../lib/ds-auth/src/auth.sol\";\nimport \"../../lib/ds-note/src/note.sol\";\n\n// DSProxy\n// Allows code execution using a persistant identity This can be very\n// useful to execute a sequence of atomic actions. Since the owner of\n// the proxy can be changed, this allows for dynamic ownership models\n// i.e. a multisig\ncontract DSProxy is DSAuth, DSNote {\n    DSProxyCache public cache;  // global cache for contracts\n\n    constructor(address _cacheAddr) public {\n        setCache(_cacheAddr);\n    }\n\n    receive() external payable {\n    }\n\n    // use the proxy to execute calldata _data on contract _code\n    function execute(bytes memory _code, bytes memory _data)\n    public\n    payable\n    returns (address target, bytes memory response)\n    {\n        target = cache.read(_code);\n        if (target == address(0)) {\n            // deploy contract & store its address in cache\n            target = cache.write(_code);\n        }\n\n        response = execute(target, _data);\n    }\n\n    function execute(address _target, bytes memory _data)\n    public\n    auth\n    note\n    payable\n    returns (bytes memory response)\n    {\n        require(_target != address(0), \"ds-proxy-target-address-required\");\n\n        // call contract in current context\n        assembly {\n            let succeeded := delegatecall(sub(gas(), 5000), _target, add(_data, 0x20), mload(_data), 0, 0)\n            let size := returndatasize()\n\n            response := mload(0x40)\n            mstore(0x40, add(response, and(add(add(size, 0x20), 0x1f), not(0x1f))))\n            mstore(response, size)\n            returndatacopy(add(response, 0x20), 0, size)\n\n            switch iszero(succeeded)\n            case 1 {\n            // throw if delegatecall failed\n                revert(add(response, 0x20), size)\n            }\n        }\n    }\n\n    //set new cache\n    function setCache(address _cacheAddr)\n    public\n    auth\n    note\n    returns (bool)\n    {\n        require(_cacheAddr != address(0), \"ds-proxy-cache-address-required\");\n        cache = DSProxyCache(_cacheAddr);  // overwrite cache\n        return true;\n    }\n}\n\n// DSProxyFactory\n// This factory deploys new proxy instances through build()\n// Deployed proxy addresses are logged\ncontract DSProxyFactory {\n    event Created(address indexed sender, address indexed owner, address proxy, address cache);\n    mapping(address=>bool) public isProxy;\n    DSProxyCache public cache;\n\n    constructor() public {\n        cache = new DSProxyCache();\n    }\n\n    // deploys a new proxy instance\n    // sets owner of proxy to caller\n    function build() public returns (address payable proxy) {\n        proxy = build(msg.sender);\n    }\n\n    // deploys a new proxy instance\n    // sets custom owner of proxy\n    function build(address owner) public returns (address payable proxy) {\n        proxy = address(new DSProxy(address(cache)));\n        emit Created(msg.sender, owner, address(proxy), address(cache));\n        DSProxy(proxy).setOwner(owner);\n        isProxy[proxy] = true;\n    }\n}\n\n// DSProxyCache\n// This global cache stores addresses of contracts previously deployed\n// by a proxy. This saves gas from repeat deployment of the same\n// contracts and eliminates blockchain bloat.\n\n// By default, all proxies deployed from the same factory store\n// contracts in the same cache. The cache a proxy instance uses can be\n// changed.  The cache uses the sha3 hash of a contract's bytecode to\n// lookup the address\ncontract DSProxyCache {\n    mapping(bytes32 => address) cache;\n\n    function read(bytes memory _code) public view returns (address) {\n        bytes32 hash = keccak256(_code);\n        return cache[hash];\n    }\n\n    function write(bytes memory _code) public returns (address target) {\n        assembly {\n            target := create(0, add(_code, 0x20), mload(_code))\n            switch iszero(extcodesize(target))\n            case 1 {\n            // throw if contract failed to deploy\n                revert(0, 0)\n            }\n        }\n        bytes32 hash = keccak256(_code);\n        cache[hash] = target;\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}