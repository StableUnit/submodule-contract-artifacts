{
  "language": "Solidity",
  "sources": {
    "contracts/makerdao/externalContracts/DssProxyActions.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n\n/// DssProxyActions.sol\n\n// Copyright (C) 2018-2020 Maker Ecosystem Growth Holdings, INC.\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// CHANGED: removed some functions. As default this contract was too large to deploy. Also\n// TODO: Need to remove *Like interfaces.\n// TODO: Check if all functions are safe to call\n// TODO: Remove unused functions\n// TODO: Remove 0.6.12\n\npragma solidity ^0.6.12;\n\ninterface CoinLike {\n    function approve(address, uint) external;\n    function transfer(address, uint) external;\n    function transferFrom(address, address, uint) external;\n    function deposit() external payable;\n    function withdraw(uint) external;\n}\n\ninterface ManagerLike {\n    function cdpCan(address, uint, address) external view returns (uint);\n    function collateralTypes(uint) external view returns (bytes32);\n    function list(uint) external view returns (uint,uint);\n    function cdpCount(address) external view returns (uint);\n    function firstCdpId(address) external view returns (uint);\n    function owns(uint) external view returns (address);\n    function safes(uint) external view returns (address);\n    function safeEngine() external view returns (address);\n    function openSafe(bytes32, address) external returns (uint);\n    function transferSafeOwnership(uint, address) external;\n    function modifySAFECollateralization(uint, int, int) external;\n    function transferCollateral(uint, address, uint) external;\n    function transferInternalCoins(uint, address, uint) external;\n    function exit(address, uint, address, uint) external;\n}\n\ninterface SafeEngineLike {\n    function cdpRights(address, address) external view returns (uint);\n    function collateralTypes(bytes32) external view returns (uint, uint, uint, uint, uint);\n    function coinBalance(address) external view returns (uint);\n    function safes(bytes32, address) external view returns (uint, uint);\n    function modifySAFECollateralization(bytes32, address, address, address, int, int) external;\n    function approveSAFEModification(address) external;\n    function transferInternalCoins(address, address, uint) external;\n}\n\ninterface CollateralJoinLike {\n    function decimals() external returns (uint);\n    function collateral() external returns (CoinLike);\n    function join(address, uint) external payable;\n    function exit(address, uint) external;\n}\n\ninterface CoinJoinLike {\n    function safeEngine() external returns (SafeEngineLike);\n    function systemCoin() external returns (CoinLike);\n    function join(bytes32, address, address, uint) external payable;\n    function exit(bytes32, address, address, uint) external;\n}\n\ninterface SafeModificationLike {\n    function approveSAFEModification(address) external;\n    function denySAFEModification(address) external;\n}\n\ninterface taxCollectorLike {\n    function taxSingle(bytes32) external returns (uint);\n}\n\ninterface ProxyRegistryLike {\n    function proxies(address) external view returns (address);\n    function build(address) external returns (address);\n}\n\ninterface ProxyLike {\n    function owner() external view returns (address);\n}\n\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n// WARNING: These functions meant to be used as a a library for a DSProxy. Some are unsafe if you call them directly.\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\ncontract Common {\n    uint256 constant RAY = 10 ** 27;\n\n    // Internal functions\n\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x, \"mul-overflow\");\n    }\n\n    // Public functions\n\n    function coinJoin_join(bytes32 collateralType, address apt, address cdp, uint wad) public {\n        // Gets StablePro from the user's wallet\n        CoinJoinLike(apt).systemCoin().transferFrom(msg.sender, address(this), wad);\n        // Approves adapter to take the StablePro amount\n        CoinJoinLike(apt).systemCoin().approve(apt, wad);\n        // Joins StablePro into the safeEngine\n        CoinJoinLike(apt).join(collateralType, msg.sender, cdp, wad);\n    }\n}\n\ncontract DssProxyActions is Common {\n//    constructor(address systemCoin) public {\n//        CoinLike(systemCoin).approve(address(this), uint(-1));\n//    }\n\n    // Internal functions\n\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x, \"sub-overflow\");\n    }\n\n    function toInt(uint x) internal pure returns (int y) {\n        y = int(x);\n        require(y >= 0, \"int-overflow\");\n    }\n\n    function toRad(uint wad) internal pure returns (uint rad) {\n        rad = mul(wad, 10 ** 27);\n    }\n\n    function convertTo18(address collateralJoin, uint256 amt) internal returns (uint256 wad) {\n        // For those collaterals that have less than 18 decimals precision we need to do the conversion\n        // before passing to modifySAFECollateralization function\n        // Adapters will automatically handle the difference of precision\n        wad = mul(\n            amt,\n            10 ** (18 - CollateralJoinLike(collateralJoin).decimals())\n        );\n    }\n\n    function _getGeneratedDeltaDebt(\n        address safeEngine,\n        address taxCollector,\n        address safe,\n        bytes32 collateralType,\n        uint wad\n    ) internal returns (int deltaDebt) {\n        // Updates stability fee rate\n        uint rate = taxCollectorLike(taxCollector).taxSingle(collateralType);\n\n        // Gets StablePro balance of the safe in the safeEngine\n        uint stableProBalance = SafeEngineLike(safeEngine).coinBalance(safe);\n\n        // If there was already enough StablePro in the safeEngine balance, just exits it without adding more debt\n        if (stableProBalance < mul(wad, RAY)) {\n            // Calculates the needed deltaDebt so together with the existing StablePro in the safeEngine\n            // is enough to exit wad amount of StablePro tokens\n            deltaDebt = toInt(sub(mul(wad, RAY), stableProBalance) / rate);\n            // This is neeeded due lack of precision. It might need to sum an extra deltaDebt wei\n            // (for the given StablePro wad amount)\n            deltaDebt = mul(uint(deltaDebt), rate) < mul(wad, RAY) ? deltaDebt + 1 : deltaDebt;\n        }\n    }\n\n    function _getRepaidDeltaDebt(\n        address safeEngine,\n        uint stablePro,\n        address safe,\n        bytes32 collateralType\n    ) internal view returns (int deltaDebt) {\n        // Gets actual rate from the safeEngine\n        (, uint rate,,,) = SafeEngineLike(safeEngine).collateralTypes(collateralType);\n        // Gets actual safeDebt value of the safe\n        (, uint safeDebt) = SafeEngineLike(safeEngine).safes(collateralType, safe);\n\n        // Uses the whole StablePro balance in the safeEngine to reduce the debt\n        deltaDebt = toInt(stablePro / rate);\n        // Checks the calculated deltaDebt is not higher than safe.safeDebt (total debt), otherwise uses its value\n        deltaDebt = uint(deltaDebt) <= safeDebt ? - deltaDebt : - toInt(safeDebt);\n    }\n\n    function _getWipeAllWad(\n        address safeEngine,\n        address usr,\n        address safe,\n        bytes32 collateralType\n    ) internal view returns (uint wad) {\n        // Gets actual rate from the safeEngine\n        (, uint rate,,,) = SafeEngineLike(safeEngine).collateralTypes(collateralType);\n        // Gets actual safeDebt value of the safe\n        (, uint safeDebt) = SafeEngineLike(safeEngine).safes(collateralType, safe);\n        // Gets actual StablePro amount in the safe\n        uint stablePro = SafeEngineLike(safeEngine).coinBalance(usr);\n\n        uint rad = sub(mul(safeDebt, rate), stablePro);\n        wad = rad / RAY;\n\n        // If the rad precision has some dust, it will need to request for 1 extra wad wei\n        wad = mul(wad, RAY) < rad ? wad + 1 : wad;\n    }\n\n    //TODO: optimize\n    function transferCollateral(address manager, uint cdp, address dst, uint wad) internal {\n        ManagerLike(manager).transferCollateral(cdp, dst, wad);\n    }\n\n    function modifySAFECollateralization(address manager, uint cdp, int deltaCollateral, int deltaDebt) public {\n        ManagerLike(manager).modifySAFECollateralization(cdp, deltaCollateral, deltaDebt);\n    }\n\n    function openSafe(address manager, bytes32 collateralType, address usr) internal returns (uint cdp) {\n        cdp = ManagerLike(manager).openSafe(collateralType, usr);\n    }\n\n    function transferInternalCoins(address manager, uint cdp, address dst, uint rad) internal {\n        ManagerLike(manager).transferInternalCoins(cdp, dst, rad);\n    }\n\n    // Public functions\n\n    function collateralJoin_join(address apt, address safe, uint amt) public {\n        // Gets token from the user's wallet\n        CollateralJoinLike(apt).collateral().transferFrom(msg.sender, address(this), amt);\n        // Approves adapter to take the token amount\n        CollateralJoinLike(apt).collateral().approve(apt, amt);\n        // Joins token collateral into the safeEngine\n        CollateralJoinLike(apt).join(safe, amt);\n    }\n\n    function lockTokenCollateral(\n        address manager,\n        address collateralJoin,\n        uint cdp,\n        uint amt\n    ) public {\n        // Takes token amount from user's wallet and joins into the safeEngine\n        collateralJoin_join(collateralJoin, address(this), amt);\n        // Locks token amount into the CDP\n        SafeEngineLike(ManagerLike(manager).safeEngine()).modifySAFECollateralization(\n            ManagerLike(manager).collateralTypes(cdp),\n            ManagerLike(manager).safes(cdp),\n            address(this),\n            address(this),\n            toInt(convertTo18(collateralJoin, amt)),\n            0\n        );\n    }\n\n//    function safeLockTokenCollateral(\n//        address manager,\n//        address collateralJoin,\n//        uint cdp,\n//        uint amt,\n//        bool transferFrom,\n//        address owner\n//    ) public {\n//        require(ManagerLike(manager).owns(cdp) == owner, \"bad-owner\");\n//        lockTokenCollateral(manager, collateralJoin, cdp, amt, transferFrom);\n//    }\n\n    function freeTokenCollateral(\n        address manager,\n        address collateralJoin,\n        uint cdp,\n        uint amt\n    ) public {\n        uint wad = convertTo18(collateralJoin, amt);\n        // Unlocks token amount from the CDP\n        modifySAFECollateralization(manager, cdp, -toInt(wad), 0);\n        // Moves the amount from the CDP safe to proxy's address\n        transferCollateral(manager, cdp, address(this), wad);\n        // Exits token amount to the user's wallet as a token\n        CollateralJoinLike(collateralJoin).exit(msg.sender, amt);\n    }\n\n    function exitTokenCollateral(\n        address manager,\n        address collateralJoin,\n        uint cdp,\n        uint amt\n    ) public {\n        // Moves the amount from the CDP safe to proxy's address\n        transferCollateral(manager, cdp, address(this), convertTo18(collateralJoin, amt));\n\n        // Exits token amount to the user's wallet as a token\n        CollateralJoinLike(collateralJoin).exit(msg.sender, amt);\n    }\n\n    function generateDebt(\n        address manager,\n        address taxCollector,\n        address coinJoin,\n        uint cdp,\n        uint wad\n    ) public {\n        address safe = ManagerLike(manager).safes(cdp);\n        address safeEngine = ManagerLike(manager).safeEngine();\n        bytes32 collateralType = ManagerLike(manager).collateralTypes(cdp);\n        // Generates debt in the CDP\n        modifySAFECollateralization(\n            manager,\n            cdp,\n            0,\n            _getGeneratedDeltaDebt(safeEngine, taxCollector, safe, collateralType, wad)\n        );\n        // Moves the StablePro amount (balance in the safeEngine in rad) to proxy's address\n        transferInternalCoins(manager, cdp, address(this), toRad(wad));\n        // Allows adapter to access to proxy's StablePro balance in the safeEngine\n        if (SafeEngineLike(safeEngine).cdpRights(address(this), address(coinJoin)) == 0) {\n            SafeEngineLike(safeEngine).approveSAFEModification(coinJoin);\n        }\n        // Exits StablePro to the user's wallet as a token\n        CoinJoinLike(coinJoin).exit(collateralType, msg.sender, msg.sender, wad);\n    }\n\n    function repayDebt(\n        address manager,\n        address coinJoin,\n        uint cdp,\n        uint wad\n    ) public {\n        address safeEngine = ManagerLike(manager).safeEngine();\n        address safe = ManagerLike(manager).safes(cdp);\n        bytes32 collateralType = ManagerLike(manager).collateralTypes(cdp);\n\n        address own = ManagerLike(manager).owns(cdp);\n        if (own == address(this) || ManagerLike(manager).cdpCan(own, cdp, address(this)) == 1) {\n            // Joins StablePro amount into the safeEngine\n            coinJoin_join(collateralType, coinJoin, safe, wad);\n            // Paybacks debt to the CDP\n            modifySAFECollateralization(\n                manager,\n                cdp,\n                0,\n                _getRepaidDeltaDebt(safeEngine, SafeEngineLike(safeEngine).coinBalance(safe), safe, collateralType)\n            );\n        } else {\n            // Joins StablePro amount into the safeEngine\n            coinJoin_join(collateralType, coinJoin, address(this), wad);\n            // Paybacks debt to the CDP\n            SafeEngineLike(safeEngine).modifySAFECollateralization(\n                collateralType,\n                safe,\n                address(this),\n                address(this),\n                0,\n                _getRepaidDeltaDebt(safeEngine, wad * RAY, safe, collateralType)\n            );\n        }\n    }\n\n//    function safeRepayDebt(\n//        address manager,\n//        address coinJoin,\n//        uint cdp,\n//        uint wad,\n//        address owner\n//    ) public {\n//        require(ManagerLike(manager).owns(cdp) == owner, \"bad-owner\");\n//        repayDebt(manager, coinJoin, cdp, wad);\n//    }\n\n    function repayAllDebt(\n        address manager,\n        address coinJoin,\n        uint cdp\n    ) public {\n        address safeEngine = ManagerLike(manager).safeEngine();\n        address safe = ManagerLike(manager).safes(cdp);\n        bytes32 collateralType = ManagerLike(manager).collateralTypes(cdp);\n        (, uint safeDebt) = SafeEngineLike(safeEngine).safes(collateralType, safe);\n\n        address own = ManagerLike(manager).owns(cdp);\n        if (own == address(this) || ManagerLike(manager).cdpCan(own, cdp, address(this)) == 1) {\n            // Joins StablePro amount into the safeEngine\n            coinJoin_join(collateralType, coinJoin, safe, _getWipeAllWad(safeEngine, safe, safe, collateralType));\n            // Paybacks debt to the CDP\n            modifySAFECollateralization(manager, cdp, 0, -int(safeDebt));\n        } else {\n            // Joins StablePro amount into the safeEngine\n            coinJoin_join(collateralType, coinJoin, address(this), _getWipeAllWad(safeEngine, address(this), safe, collateralType));\n            // Paybacks debt to the CDP\n            SafeEngineLike(safeEngine).modifySAFECollateralization(\n                collateralType,\n                safe,\n                address(this),\n                address(this),\n                0,\n                -int(safeDebt)\n            );\n        }\n    }\n\n//    function safeRepayAllDebt(\n//        address manager,\n//        address coinJoin,\n//        uint cdp,\n//        address owner\n//    ) public {\n//        require(ManagerLike(manager).owns(cdp) == owner, \"bad-owner\");\n//        repayAllDebt(manager, coinJoin, cdp);\n//    }\n\n\n    function lockTokenCollateralAndGenerateDebt(\n        address manager,\n        address taxCollector,\n        address collateralJoin,\n        address coinJoin,\n        uint cdp,\n        uint collateralAmount,\n        uint deltaWad\n    ) public {\n        address safeHandler = ManagerLike(manager).safes(cdp);\n        address safeEngine = ManagerLike(manager).safeEngine();\n        bytes32 collateralType = ManagerLike(manager).collateralTypes(cdp);\n        // Takes token amount from user's wallet and joins into the safeEngine\n        collateralJoin_join(collateralJoin, safeHandler, collateralAmount);\n        // Locks token amount into the SAFE and generates debt\n        modifySAFECollateralization(\n            manager,\n            cdp,\n            toInt(convertTo18(collateralJoin, collateralAmount)),\n            _getGeneratedDeltaDebt(safeEngine, taxCollector, safeHandler, collateralType, deltaWad)\n        );\n        // Moves the COIN amount (balance in the safeEngine in rad) to proxy's address\n        transferInternalCoins(manager, cdp, address(this), toRad(deltaWad));\n        // Allows adapter to access to proxy's COIN balance in the safeEngine\n        if (SafeEngineLike(safeEngine).cdpRights(address(this), address(coinJoin)) == 0) {\n            SafeEngineLike(safeEngine).approveSAFEModification(coinJoin);\n        }\n        // Exits COIN to the user's wallet as a token\n        CoinJoinLike(coinJoin).exit(collateralType, msg.sender, msg.sender, deltaWad);\n    }\n\n    function openLockTokenCollateralAndGenerateDebt(\n        address manager,\n        address taxCollector,\n        address collateralJoin,\n        address coinJoin,\n        bytes32 collateralType,\n        uint amtC,\n        uint wadD\n    ) public returns (uint cdp) {\n        cdp = openSafe(manager, collateralType, address(this));\n        lockTokenCollateralAndGenerateDebt(\n            manager, taxCollector, collateralJoin, coinJoin, cdp, amtC, wadD\n        );\n    }\n\n    function repayDebtAndFreeTokenCollateral(\n        address manager,\n        address collateralJoin,\n        address coinJoin,\n        uint cdp,\n        uint amtC,\n        uint wadD\n    ) public {\n        address safe = ManagerLike(manager).safes(cdp);\n        bytes32 collateralType = ManagerLike(manager).collateralTypes(cdp);\n        address safeEngine = ManagerLike(manager).safeEngine();\n        // Joins StablePro amount into the safeEngine\n        coinJoin_join(collateralType, coinJoin, safe, wadD);\n        uint wadC = convertTo18(collateralJoin, amtC);\n        // Paybacks debt to the CDP and unlocks token amount from it\n        modifySAFECollateralization(\n            manager,\n            cdp,\n            -toInt(wadC),\n            _getRepaidDeltaDebt(\n                safeEngine,\n                SafeEngineLike(safeEngine).coinBalance(safe),\n                safe,\n                collateralType\n            )\n        );\n        // Moves the amount from the CDP safe to proxy's address\n        transferCollateral(manager, cdp, address(this), wadC);\n        // Exits token amount to the user's wallet as a token\n        CollateralJoinLike(collateralJoin).exit(msg.sender, amtC);\n    }\n\n    function repayAllDebtAndFreeTokenCollateral(\n        address manager,\n        address collateralJoin,\n        address coinJoin,\n        uint cdp,\n        uint amtC\n    ) public {\n        address safeEngine = ManagerLike(manager).safeEngine();\n        address safe = ManagerLike(manager).safes(cdp);\n        bytes32 collateralType = ManagerLike(manager).collateralTypes(cdp);\n        (, uint safeDebt) = SafeEngineLike(safeEngine).safes(collateralType, safe);\n\n        // Joins StablePro amount into the safeEngine\n        coinJoin_join(collateralType, coinJoin, safe, _getWipeAllWad(safeEngine, safe, safe, collateralType));\n        uint wadC = convertTo18(collateralJoin, amtC);\n        // Paybacks debt to the CDP and unlocks token amount from it\n        modifySAFECollateralization(\n            manager,\n            cdp,\n            -toInt(wadC),\n            -int(safeDebt)\n        );\n        // Moves the amount from the CDP safe to proxy's address\n        transferCollateral(manager, cdp, address(this), wadC);\n        // Exits token amount to the user's wallet as a token\n        CollateralJoinLike(collateralJoin).exit(msg.sender, amtC);\n    }\n\n    // Public view functions\n\n    function getCdpId(address manager, address user, bytes32 collateralType) public view returns(uint) {\n        //TODO: optimize\n        uint256 cdpCount = ManagerLike(manager).cdpCount(user);\n        uint256 cdpId = ManagerLike(manager).firstCdpId(user);\n        for (uint256 i; i < cdpCount; ++i) {\n            if (ManagerLike(manager).collateralTypes(cdpId) == collateralType) {\n                return cdpId;\n            }\n            (,uint256 nextCdpId) = ManagerLike(manager).list(cdpId);\n            cdpId = nextCdpId;\n        }\n\n        return uint256(-1);\n    }\n\n    function getCdpInfo(address manager, address user, bytes32 collateralType) public view returns(uint, uint) {\n        uint256 cdpId = getCdpId(manager, user, collateralType);\n        if (cdpId == uint256(-1)) return (0,0);\n\n        address safeEngine = ManagerLike(manager).safeEngine();\n        address safe = ManagerLike(manager).safes(cdpId);\n        return SafeEngineLike(safeEngine).safes(collateralType, safe);\n    }\n\n    // TODO: add checks with debtCeiling and debtFloor\n    function getAvailableToWithdraw(address manager, address user, bytes32 collateralType) external view returns(uint) {\n        address safeEngine = ManagerLike(manager).safeEngine();\n\n        (uint256 lockedCollateral, uint256 generatedDebt) = getCdpInfo(manager, user, collateralType);\n        (, uint rate, uint safetyPrice,,) = SafeEngineLike(safeEngine).collateralTypes(collateralType);\n\n        uint256 minCollateralAmount = mul(generatedDebt, rate) / safetyPrice;\n        return lockedCollateral > minCollateralAmount ? sub(lockedCollateral, minCollateralAmount) : 0;\n    }\n\n    function getAvailableToBorrow(address manager, address user, bytes32 collateralType) external view returns(uint) {\n        address safeEngine = ManagerLike(manager).safeEngine();\n\n        (uint256 lockedCollateral, uint256 generatedDebt) = getCdpInfo(manager, user, collateralType);\n        (, uint rate, uint safetyPrice,,) = SafeEngineLike(safeEngine).collateralTypes(collateralType);\n\n        uint256 usdLimit = mul(lockedCollateral, safetyPrice) / rate;\n        return usdLimit > generatedDebt ? sub(usdLimit, generatedDebt) : 0;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}