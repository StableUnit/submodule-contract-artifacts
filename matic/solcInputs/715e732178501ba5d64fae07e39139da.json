{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.6.0;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\nlibrary TransferHelper {\n    /// @notice Transfers tokens from the targeted address to the given destination\n    /// @notice Errors with 'STF' if transfer fails\n    /// @param token The contract address of the token to be transferred\n    /// @param from The originating address from which the tokens will be transferred\n    /// @param to The destination address of the transfer\n    /// @param value The amount to be transferred\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) =\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\n    }\n\n    /// @notice Transfers tokens from msg.sender to a recipient\n    /// @dev Errors with ST if transfer fails\n    /// @param token The contract address of the token which will be transferred\n    /// @param to The recipient of the transfer\n    /// @param value The value of the transfer\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\n    }\n\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\n    /// @dev Errors with 'SA' if transfer fails\n    /// @param token The contract address of the token to be approved\n    /// @param to The target of the approval\n    /// @param value The amount of the given token the target will be allowed to spend\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\n    }\n\n    /// @notice Transfers ETH to the recipient address\n    /// @dev Fails with `STE`\n    /// @param to The destination of the transfer\n    /// @param value The value to be transferred\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, 'STE');\n    }\n}\n"
    },
    "contracts/exchange/interfaces/IExchange.sol": {
      "content": "// SPDX-License-Identifier: BSL 1.1\npragma solidity ^0.8.0;\n\nstruct Order {\n    address token2sell;\n    address token2buy;\n    address beneficiary;\n    address caller;\n    uint256 amountLeft;\n    uint256 token2buyAmount;\n    uint64 creationTimestamp;\n    uint8 discountType;\n}\n\nstruct OrderWithId {\n    Order order;\n    uint256 orderId;\n}\n\ninterface IExchange {\n    /* ===================== ERRORS ===================== */\n    error OrderExist(uint256 orderId);\n    error OrderNotExist(uint256 orderId);\n    error IncorrectToken(address orderToken2buy, address inToken);\n    error SmallAmountLeft();\n    error BadOutAmount();\n    error UserIsNotBeneficiary();\n    error IsNotTopStaker(address staker);\n    error IsNotStaker(address staker);\n    error OrderNotForThisStaker(uint256 orderId, address staker);\n    error NotEnoughReturnValue();\n    error CallbackError();\n\n    /* ======================== EVENTS ========================= */\n    event OrderAdded(uint256 orderId);\n    event OrderCanceled(uint256 orderId);\n    event OrderFilled(uint256 orderId);\n    event OrderFilledPartially(uint256 orderId);\n    event LpOrdersAdded(address LPToken, uint256[] orderIds);\n\n    /* ==================== MUTABLE METHODS ==================== */\n\n    /**\n      * @notice Add order to swap {token2sell} to {token2buy}.\n      * @dev This swap is async, because depends on how arbitrage bots will fill this order. Emits OrderAdded() event.\n      * Before addOrder user needs to approve token2sell for exchange contract\n      * @param token2sell - Address of token to sell\n      * @param amount2sell - Amount of {token2sell} to sell\n      * @param token2buy - Address of token to buy\n      * @param beneficiary - Address that will receive {token2buy} after filling order.\n      * @param discountType - Speed of decreasing swap price. { 0 - aggressive, 1 - middle, 2 - conservative }\n      * @param collateralJoin - address of collateral adapter\n     **/\n    function addOrder (\n        address token2sell,\n        uint256 amount2sell,\n        address token2buy,\n        address beneficiary,\n        uint8 discountType,\n        address collateralJoin\n    ) external returns (uint256);\n\n    /**\n      * @notice Only user who place order or who is beneficiary can cancelOrder();\n      * @param orderId - Id of order to cancel.\n     **/\n    function cancelOrder (uint256 orderId) external;\n\n    /**\n      * @notice Fill order with flash-loan like logic\n      * @dev Caller contract receive orders {token2sell} and after that his stableunitFillOrderCallback() is called.\n      * At the end of thi callback contract should send some amount of another token back to Exchange contract.\n      * @param orderId - Id of order to fill.\n      * @param inAmount - Amount of {token2sell} to receive\n      * @param data - encoded data to pass to callback function\n     **/\n    function fillOrderAsFlashLoan (\n        uint256 orderId,\n        uint256 inAmount,\n        bytes memory data\n    ) external returns (uint256 outAmount);\n\n    /**\n      * @notice Function to update price curve - how fast {token2sell} price will decrease/increase\n      * @param discountType - discount type to change\n      * @param newPriceCurve - parameters of formula\n     **/\n    function setPriceCurve(uint8 discountType, uint256[2] calldata newPriceCurve) external;\n\n    /* ==================== VIEW METHODS ==================== */\n    /**\n      * @return The amount of outcome that caller will receive if he will fill {orderId} with {inAmount} of {token2sell}\n     **/\n    function getExpectedOrderOutcome (uint256 orderId, uint256 inAmount) external view returns (uint256);\n\n    /**\n      * @return Order with id = {orderId}\n     **/\n    function getOrder (uint256 orderId) external view returns (Order memory);\n\n    /**\n      * @return The amount of not full-filled orders\n     **/\n    function getOrdersCount () external view returns (uint256);\n\n    /**\n      * @return The array of all not-filled orders. May be deleted after adding GraphQL for orderIds\n     **/\n    function getAllOrders (uint256 offset, uint256 limit) external view returns (OrderWithId[] memory);\n}\n"
    },
    "contracts/interfaces/IRewardChefV2.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"../periphery/contracts/interfaces/oracle/ISuOracle.sol\";\n\n/**\n * @title RewardChefV2\n * @notice fork of MasterChefV2(13/05/2023) https://etherscan.io/address/0xef0881ec094552b2e128cf945ef17a6752b4ec5d#code\n * @dev This contract is based on MVC2, but uses \"virtual\" balances instead of storing real ERC20 tokens\n * and uses address of this assets instead of pid.\n * Rewards that are distributed have to be deposited using refillReward(uint256 amount, uint64 endBlock)\n **/\ninterface IRewardChefV2 {\n    /**\n      * @notice Info of each reward pool.\n      * @param accSushiPerShare -\n      * @param lastRewardBlock -\n      * @param allocPoint - The amount of allocation points assigned to the pool.\n      * Also known as the amount of REWARD_TOKEN to distribute per block.\n      * @param lpSupply -\n     **/\n    struct PoolInfo {\n        uint128 accSushiPerShare;\n        uint64 lastRewardBlock;\n        uint64 allocPoint;\n        uint256 lpSupply;\n    }\n\n    /**\n      * @notice Info of each user.\n      * @param amount - token amount the user has provided.\n      * @param rewardDebt - The amount of rewards entitled to the user.\n      * @param multiplicator1e18 - deposit amount multiplicator for current user, that depends on his lockupPeriod\n      * @param lockupPeriodSeconds - users lockupPeriod in seconds\n      * @param lockupStartTimestamp - timestamp when user start lockup\n     **/\n    struct UserInfo {\n        uint256 amount;\n        int256 rewardDebt;\n\n        uint256 multiplicator1e18;\n        uint256 lockupPeriodSeconds;\n        uint256 lockupStartTimestamp;\n    }\n\n    /**\n      * @notice Lockup info struct for a view method getPossibleLockupPeriodsSeconds()\n      * @param lockupPeriodSeconds - available lockupPeriod in seconds\n      * @param multiplicator1e18 - deposit amount multiplicator for this lockup period\n     **/\n    struct ILockupPeriod {\n        uint256 lockupPeriodSeconds;\n        uint256 multiplicator1e18;\n    }\n\n    // =======================================EVENTS=============================================\n    event VirtualDeposit(address indexed user, address indexed asset, uint256 amount);\n    event VirtualWithdraw(address indexed user, address indexed asset, uint256 amount);\n    event ResetAmount(\n        address indexed user, address indexed asset, address indexed to, uint256 amount, uint256 lockupPeriodSeconds\n    );\n    event Harvest(address indexed user, address indexed asset, uint256 amount);\n    event LogPoolAddition(address indexed asset, uint256 allocPoint);\n    event LogSetPool(address indexed asset, uint256 allocPoint);\n    event LogUpdatePool(address indexed asset, uint64 lastRewardBlock, uint256 lpSupply, uint256 accSushiPerShare);\n\n    // =======================================ERRORS=============================================\n    error BadEndBlockForRefill();\n    error ZeroLockupPeriod();\n    error ZeroMultiplicator();\n    error PoolExist();\n    error PoolNotExist();\n    error DifferentLockup();\n    error HarvestBeforeLockup();\n\n    // =========================================VARS=============================================\n    /**\n     *  @dev Total allocation points. Must be the sum of all allocation points in all pools.\n     * The good practice, to always keep this variable is equal 1000.\n     */\n    function totalAllocPoint() external view returns ( uint256 );\n\n    // =======================================REWARDER=============================================\n    // solhint-disable-next-line func-name-mixedcase\n    function REWARD_TOKEN() external view returns ( IERC20Upgradeable );\n    // solhint-disable-next-line func-name-mixedcase\n    function ORACLE() external view returns ( ISuOracle );\n    function rewardPerBlock() external view returns ( uint256 );\n    function rewardEndBlock() external view returns ( uint256 );\n\n    /**\n     * @dev admin transfer REWARD_TOKEN to contract to increase rewards per block\n     */\n    function refillReward(uint256 amount, uint64 endBlock) external;\n    /**\n     * @dev returns total amount of rewards allocated to the all pools on the rage (startBlock, endBlock]\n     * i.e. excluding startBlock but including endBlock\n     */\n    function rewardsBetweenBlocks(uint256 startBlock, uint256 endBlock) external returns ( uint256 );\n\n    //=======================================LOCKUP LOGIC===========================================\n    /**\n     * @notice view method that return all lockupPeriods in ILockupPeriod struct\n     */\n    function getPossibleLockupPeriodsSeconds() external view returns (ILockupPeriod[] memory);\n\n    function getUserLockupPeriodsSeconds(address asset, address user) external view returns (uint256 lockupPeriodSeconds);\n\n    /**\n     * @notice method to add new LockupPeriods with it multiplicator\n     * @dev If multiplicator1e18 == 0 => we remove lockupPeriodSeconds else we add it\n     * @param lockupPeriodSeconds Amount of seconds of lockupPeriod we want to add/remove\n     * @param multiplicator1e18 Multiplicator for that lockupPeriod\n     */\n    function setPossibleLockupPeriodsSeconds(uint256 lockupPeriodSeconds, uint256 multiplicator1e18) external;\n\n    //================================CORE REWARD CHEF METHODS======================================\n    /**\n     * @notice Add a new reward pool. Can only be called by the admin. Can't add the same LP token more than once.\n     * @param allocPoint AP of the new pool.\n     * @param _asset Address of the ERC-20 token.\n     */\n    function add(uint256 allocPoint, address _asset) external;\n\n    /**\n     * @notice Update the given pool's REWARD_TOKEN allocation point. Can only be called by the admin.\n     * Can't be called for asset that was not added by add() function.\n     * @param _asset Address of the ERC-20 token.\n     * @param _allocPoint New AP of the pool.\n     */\n    function set(address _asset, uint256 _allocPoint) external;\n\n    /**\n     * @notice View function to see pending REWARD_TOKEN on frontend.\n     * @param _asset Address of the ERC-20 token.\n     * @param _user Address of user.\n     * @return pending REWARD_TOKEN reward for a given user.\n     */\n    function pendingSushi(address _asset, address _user) external view returns ( uint256 );\n\n    /**\n     * @notice Update reward variables of the given pool.\n     * @param asset Asset address\n     * @return updated pool info\n     */\n    function updatePool(address asset) external returns ( PoolInfo memory );\n\n    /**\n     * @notice Update reward variables for all pools. Be careful of gas spending!\n     */\n    function updateAllPools() external;\n\n    /**\n     * @notice analogues to MCV2 Deposit method, but can be called only by trusted address (onlyRewardAccess)\n     * that is trusted to honestly calc how many \"virtual\" tokens have to be allocated for each user.\n     * @param asset Asset address\n     * @param to User for whom we will increase the virtual balance\n     * @param amountEDecimal Quantity without taking into account the multiplier that we will add\n     * @param lockupPeriodSeconds Current deposit lockup period. Can't increase amount with 2 different lockupPeriods\n     */\n    function increaseAmount(address asset, address to, uint256 amountEDecimal, uint256 lockupPeriodSeconds) external;\n\n    /**\n     * @notice Analogues to MVC2 Withdraw method, that can be called only by trusted address (onlyRewardAccess)\n     * that is trusted to honestly calc how many \"virtual\" tokens have to be allocated for each user.\n     * @param asset Asset address\n     * @param to User for whom we will subtract the virtual balance\n     * @param amountEDecimal Quantity without taking into account the multiplier that we will subtract\n     */\n    function decreaseAmount(address asset, address to, uint256 amountEDecimal) external;\n\n    /**\n     * @notice View method that return penalty for user that will decrease amount by {amountEDecimal}\n     * @param asset Asset address\n     * @param to User who will decrease his deposit amount\n     * @param amountEDecimal Quantity without taking into account the multiplier that we will subtract\n     */\n    function getDecreaseAmountRewardPenalty(\n        address asset,\n        address to,\n        uint256 amountEDecimal\n    ) external view returns (uint256);\n\n    /**\n     * @notice Harvest proceeds for transaction sender to {to}.\n     * @dev Here we send msg.sender pendingSushi to {to} and update lockup period.\n     * @param asset Asset address\n     * @param to Receiver of REWARD_TOKEN rewards.\n     */\n    function harvest(address asset, address to, uint256 newLockupPeriodSeconds) external;\n\n    /**\n     * @notice Withdraw without caring about rewards. EMERGENCY ONLY.\n     * @param asset Asset address\n     * @param to The address of the user whose information will be cleared\n     */\n    function resetAmount(address asset, address to) external;\n\n    //================================VIEW METHODS======================================\n    /**\n     * @notice Method for frontend that return pool APR in base of 1e18\n     * @param asset Asset address\n     */\n    function getPoolApr(address asset) external view returns (uint256);\n\n    /**\n     * @notice Reward tokens can be locked for certain period of time.\n     * So user have to wait until at least timestamp to be able to harvest them.\n     * There's no lock or any restriction on withdrawing principle.\n     * This function return end timestamp for that lock.\n     * @param asset Asset address\n     * @param user User address\n     */\n    function getHarvestLockupEndTimestamp(address asset, address user) external view returns (uint256);\n}\n"
    },
    "contracts/makerdao/core/adapters/CoinJoin.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n\npragma solidity ^0.8.0;\n\nimport \"../../../interfaces/IRewardChefV2.sol\";\nimport \"../../../periphery/contracts/access-control/SuAuthenticatedNonUpgradeable.sol\";\nimport \"../../interfaces/ICoin.sol\";\nimport \"../../interfaces/ICoinJoin.sol\";\nimport \"../../interfaces/ICollateralJoin.sol\";\nimport \"../../interfaces/ISafeEngine.sol\";\nimport {ProxyOwner} from \"../../utils/ProxyOwner.sol\";\n\n// CHANGED: in dss all joins contracts are in join.sol. We split and rename them to read this better.\n// In CoinJoin (DaiJoin) we added events and integration with rewardChef during join and exit.\n// Added SuAuthenticated instead of authorizedAccounts.\n\ncontract CoinJoin is ICoinJoin, SuAuthenticatedNonUpgradeable, ProxyOwner {\n    address public rewardChef;\n    ISafeEngine public safeEngine;\n    // Coin created by the system; this is the external, ERC-20 representation, not the internal 'coinBalance'\n    ICoin public systemCoin;\n    mapping (bytes32 => address) public collateralAddress; // CollateralType => address of collateral\n\n    constructor(address accessControlSingleton, address safeEngine_, address systemCoin_, address rewardChef_)\n        SuAuthenticatedNonUpgradeable(accessControlSingleton) public {\n        contractEnabled = 1;\n        safeEngine = ISafeEngine(safeEngine_);\n        systemCoin = ICoin(systemCoin_);\n        rewardChef = rewardChef_;\n    }\n\n    uint public contractEnabled;\n    function disableContract() external onlyDisablerAccess {\n        contractEnabled = 0;\n        emit DisableContract();\n    }\n\n    uint constant ONE = 10 ** 27;\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x);\n    }\n\n    function updateRewardChef(address rewardChef_) external onlyDAO {\n        rewardChef = rewardChef_;\n        emit UpdateRewardChef();\n    }\n\n    function initializeCollateralType(bytes32 _collateralType, address _collateralAddress) external onlyAdmin {\n        collateralAddress[_collateralType] = _collateralAddress;\n    }\n\n    function join(bytes32 collateralType, address user, address cdp, uint wad) external onlyProxyOwner(user) {\n        safeEngine.transferInternalCoins(address(this), cdp, mul(ONE, wad));\n        systemCoin.burn(msg.sender, wad);\n\n        address colAddr = collateralAddress[collateralType];\n        (bool success,) = rewardChef.call(\n            abi.encodeWithSignature(\"decreaseAmount(address,address,uint256)\", colAddr, user, wad)\n        );\n        if (!success) {\n            emit DecreaseAmountFailed(colAddr, user, wad);\n        }\n\n        emit Join(cdp, wad);\n    }\n    function joinNoReward(address cdp, uint wad) external {\n        safeEngine.transferInternalCoins(address(this), cdp, mul(ONE, wad));\n        systemCoin.burn(msg.sender, wad);\n        emit JoinNoReward(cdp, wad);\n    }\n\n    function exit(\n        bytes32 collateralType, address user, uint256 lockupPeriodSeconds, address cdp, uint wad\n    ) external onlyProxyOwner(user) {\n        require(contractEnabled == 1, \"CoinJoin/not-contractEnabled\");\n        safeEngine.transferInternalCoins(msg.sender, address(this), mul(ONE, wad));\n        systemCoin.mint(cdp, wad);\n\n        address colAddr = collateralAddress[collateralType];\n        uint256 userLockupPeriod = IRewardChefV2(rewardChef).getUserLockupPeriodsSeconds(colAddr, user);\n        if (userLockupPeriod != 0 && userLockupPeriod != lockupPeriodSeconds) revert BadLockupPeriod();\n        (bool success,) = rewardChef.call(\n            abi.encodeWithSignature(\n                \"increaseAmount(address,address,uint256,uint256)\", colAddr, user, wad, lockupPeriodSeconds\n            )\n        );\n        if (!success) {\n            emit IncreaseAmountFailed(colAddr, user, wad, 1);\n        }\n\n        emit Exit(cdp, wad);\n    }\n\n    function exitNoReward(address cdp, uint wad) external {\n        require(contractEnabled == 1, \"CoinJoin/not-contractEnabled\");\n        safeEngine.transferInternalCoins(msg.sender, address(this), mul(ONE, wad));\n        systemCoin.mint(cdp, wad);\n        emit ExitNoReward(cdp, wad);\n    }\n\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(ICoinJoin).interfaceId || interfaceId == type(IERC165).interfaceId || ACCESS_CONTROL_SINGLETON.supportsInterface(interfaceId);\n    }\n}\n\n"
    },
    "contracts/makerdao/externalContracts/AccountingEngine.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n\n/// AccountingEngine.sol -- StablePro settlement module\n\n// Copyright (C) 2018 Rain <rainbreak@riseup.net>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\n\nimport {Math} from \"../utils/Math.sol\";\nimport \"../interfaces/IAccountingEngine.sol\";\nimport \"../interfaces/ISafeEngine.sol\";\nimport \"../interfaces/ICoinJoin.sol\";\nimport \"../../interfaces/IRewardChefV2.sol\";\nimport \"../../periphery/contracts/interfaces/oracle/ISuOracle.sol\";\nimport \"../../periphery/contracts/access-control/SuAuthenticatedNonUpgradeable.sol\";\nimport \"../../periphery/contracts/interfaces/oracle/ISuOracleAggregator.sol\";\n\n// FIXME: This contract was altered compared to the production version.\n// It doesn't use LibNote anymore.\n// New deployments of this contract will need to include custom events (TO DO).\n// Changed the way how we work with Auctions - we use Exchange module.\n// Also we added new manual functions to work with rewardChef, stablecoinWhitelist, coinJoin and transfer/swaps.\n\ncontract AccountingEngine is SuAuthenticatedNonUpgradeable, Math, IAccountingEngine {\n    // --- Data ---\n    ISafeEngine public immutable safeEngine;   // CDP Engine\n    IExchange public exchange;       // Exchange module\n    ISuOracleAggregator public oracle;         // Oracle\n    IERC20 public suDAO;             // Protocol governance token\n    IERC20 public immutable stablePro; // System coin\n    IRewardChefV2 public rewardChef; // RewardModule\n    ICoinJoin public coinJoin;       // Adapter to join StablePro\n\n    mapping(address => bool) internal stablecoinWhitelist;\n    address public stablecoinToSwap; // Stablecoin to which the collateral will be exchanged during liquidation\n\n    mapping (uint256 => uint256) public debtQueue;  // debt queue\n    uint256 public totalQueuedDebt;   // Queued debt            [rad]\n    uint256 public totalOnAuctionDebt;   // On-auction debt        [rad]\n\n    uint256 public popDebtDelay;  // DebtAuctionHouse delay             [seconds]\n\n    uint256 public surplusBuffer;  // Surplus buffer         [rad]\n\n    uint256 public contractEnabled;  // Active Flag\n\n    uint256 public defaultRewardEndBlock;  // Active Flag\n\n    // --- Init ---\n    constructor(\n        address accessControl_,\n        address safeEngine_,\n        address exchange_,\n        address oracle_,\n        address suDAO_,\n        address rewardChef_,\n        address stablePro_,\n        address coinJoin_\n    ) SuAuthenticatedNonUpgradeable(accessControl_) public {\n        safeEngine = ISafeEngine(safeEngine_);\n        exchange = IExchange(exchange_);\n        oracle = ISuOracleAggregator(oracle_);\n        suDAO = IERC20(suDAO_);\n        stablePro = IERC20(stablePro_);\n        rewardChef = IRewardChefV2(rewardChef_);\n        coinJoin = ICoinJoin(coinJoin_);\n\n        safeEngine.approveSAFEModification(coinJoin_);\n        contractEnabled = 1;\n        defaultRewardEndBlock = 172800; // 1 MONTH\n\n        if (rewardChef_ != address(0)) {\n            suDAO.approve(rewardChef_, type(uint256).max); // to call refillReward\n        }\n    }\n\n    // --- Administration ---\n    function modifyParameters(bytes32 what, uint data) external onlyDAO {\n        if (what == \"popDebtDelay\") popDebtDelay = data;\n        else if (what == \"surplusBuffer\") surplusBuffer = data;\n        else if (what == \"defaultRewardEndBlock\") defaultRewardEndBlock = data;\n        else revert BadModifyParameters();\n    }\n\n    function modifyParameters(bytes32 what, address data) external onlyDAO {\n        if (what == \"exchange\") exchange = IExchange(data);\n        if (what == \"oracle\") oracle = ISuOracleAggregator(data);\n        if (what == \"suDAO\") suDAO = IERC20(suDAO);\n        if (what == \"coinJoin\") coinJoin = ICoinJoin(data);\n        if (what == \"rewardChef\") {\n            rewardChef = IRewardChefV2(data);\n            suDAO.approve(address(rewardChef), type(uint256).max); // to call refillReward\n        } else revert BadModifyParameters();\n    }\n\n    function pushDebtToQueue(uint amountToRaise) external onlyLiquidationAccess {\n        debtQueue[block.timestamp] = _add(debtQueue[block.timestamp], amountToRaise);\n        totalQueuedDebt = _add(totalQueuedDebt, amountToRaise);\n    }\n\n    function popDebtFromQueue(uint era) external {\n        if (_add(era, popDebtDelay) > block.timestamp) revert PopDebtDelayNotFinished();\n        totalQueuedDebt = _sub(totalQueuedDebt, debtQueue[era]);\n        debtQueue[era] = 0;\n    }\n\n    // Debt settlement\n    function settleDebt(uint rad) external {\n        if (rad > safeEngine.coinBalance(address(this))) revert InsufficientSurplus();\n        if (rad > _sub(_sub(safeEngine.debtBalance(address(this)), totalQueuedDebt), totalOnAuctionDebt)) revert InsufficientDebt();\n        safeEngine.settleDebt(rad);\n    }\n\n    function cancelAuctionedDebtWithSurplus(uint rad) external {\n        if (rad > totalOnAuctionDebt) revert NotEnoughAsh();\n        if (rad > safeEngine.coinBalance(address(this))) revert InsufficientSurplus();\n        totalOnAuctionDebt = _sub(totalOnAuctionDebt, rad);\n        safeEngine.settleDebt(rad);\n    }\n\n    function auctionDebt(address token2sell, uint256 amountToSell, uint8 discountType, uint256 auctionDebt) external onlyAdmin returns (uint orderId) {\n        uint256 sellValue = oracle.getSafeFiatPrice1e18(token2sell) * amountToSell / 1e18;\n        if (safeEngine.coinBalance(address(this)) != 0) revert SurplusNotZero();\n\n        totalOnAuctionDebt = _add(totalOnAuctionDebt, auctionDebt);\n\n        orderId = exchange.addOrder(\n            token2sell, // we want to sell token2sell\n            amountToSell,\n            address(stablePro), // token2buy is stablecoin\n            address(this), // beneficiary is the AccountingEngine itself\n            discountType, // or whatever discount type you want to use\n            address(0) // no collateral join, since it's a direct debt sale\n        );\n    }\n\n    function auctionSurplus(uint256 surplusAmount, uint8 discountType) external onlyAdmin returns (uint orderId) {\n        uint256 coinBalance = safeEngine.coinBalance(address(this));\n        uint256 debtBalance = safeEngine.debtBalance(address(this));\n        uint256 realBalance = IERC20(stablePro).balanceOf(address(this));\n        if (\n            coinBalance < surplusBuffer ||\n            _add(coinBalance, realBalance * 1e27) < _add(_add(debtBalance, surplusAmount * 1e27), surplusBuffer)\n        ) revert InsufficientSurplus();\n        if (_sub(_sub(debtBalance, totalQueuedDebt), totalOnAuctionDebt) != 0) revert DebtNotZero();\n        // Auction some system coins in return for protocol tokens that are then burnt\n        orderId = exchange.addOrder(\n            address(stablePro), // we sell StablePro\n            surplusAmount,\n            address(suDAO), // we buy SuDAO (governance token)\n            address(this), // beneficiary is the AccountingEngine itself\n            discountType, // or whatever discount type you want to use\n            address(0) // no collateral join, since it's a direct surplus sale\n        );\n        // After filling we can call distributeSurplus();\n    }\n\n    function disableContract() external onlyDisablerAccess {\n        if (contractEnabled == 0) revert ContractDisabled();\n        contractEnabled = 0;\n        totalQueuedDebt = 0;\n        totalOnAuctionDebt = 0;\n        safeEngine.settleDebt(min(safeEngine.coinBalance(address(this)), safeEngine.debtBalance(address(this))));\n    }\n\n    // --- Manual functions ---\n    function joinStablePro(uint256 amount) external onlyAdmin {\n        totalOnAuctionDebt = totalOnAuctionDebt < amount ? 0 : _sub(totalOnAuctionDebt, amount);\n        coinJoin.joinNoReward(address(this), amount);\n    }\n\n    function getRealStablePro(uint256 amount) external onlyAdmin {\n        coinJoin.exitNoReward(address(this), amount);\n    }\n\n    function refillStablecoin(address stablecoin, uint256 amount) external {\n        TransferHelper.safeTransferFrom(stablecoin, msg.sender, address(this), amount);\n        emit StablecoinRefilled(stablecoin, amount);\n    }\n\n    function distributeSurplus(uint256 amount) external onlyAdmin {\n        if (address(rewardChef.REWARD_TOKEN()) != address(suDAO)) revert BadRewardToken();\n        uint256 rewardBlock = rewardChef.rewardEndBlock();\n        rewardChef.refillReward(\n            amount,\n            rewardBlock > 0 ? uint64(rewardBlock) : uint64(block.number + defaultRewardEndBlock)\n        );\n    }\n\n    function swapStableProToStablecoin(address stablecoinToken, uint256 stableProAmountE18) public {\n        if (!stablecoinWhitelist[stablecoinToken]) revert BadStablecoin(stablecoinToken);\n\n        uint256 stablecoinAmountEDecimal = stableProAmountE18 * 1e18 / oracle.getFiatPrice1e18(stablecoinToken);\n\n        TransferHelper.safeTransferFrom(address(stablePro), msg.sender, address(this), stableProAmountE18);\n        TransferHelper.safeTransfer(stablecoinToken, msg.sender, stablecoinAmountEDecimal);\n\n        emit StableProSwapped(stableProAmountE18);\n    }\n\n    // --- Stablecoin Whitelist ---\n    function addWhitelistStablecoin(address stablecoin) external onlyDAO {\n        if (stablecoinWhitelist[stablecoin]) revert StablecoinExists(stablecoin);\n        stablecoinWhitelist[stablecoin] = true;\n        TransferHelper.safeApprove(stablecoin, address(exchange), type(uint256).max);\n    }\n\n    function removeWhitelistStablecoin(address stablecoin) external onlyDAO {\n        if (!stablecoinWhitelist[stablecoin]) revert StablecoinNotExist(stablecoin);\n        stablecoinWhitelist[stablecoin] = false;\n        TransferHelper.safeApprove(stablecoin, address(exchange), 0);\n    }\n\n    function hasWhitelistStablecoin(address stablecoin) external view returns (bool) {\n        return stablecoinWhitelist[stablecoin];\n    }\n\n    function setStablecoinToSwap(address stablecoin) external onlyAdmin {\n        if (!stablecoinWhitelist[stablecoin]) revert BadStablecoin(stablecoin);\n        stablecoinToSwap = stablecoin;\n    }\n}\n"
    },
    "contracts/makerdao/externalContracts/DssProxyActions.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n\n/// DssProxyActions.sol\n\n// Copyright (C) 2018-2020 Maker Ecosystem Growth Holdings, INC.\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// CHANGED: removed some functions. As default this contract was too large to deploy. Also\n\nimport \"../interfaces/ICoinJoin.sol\";\nimport \"../interfaces/ICollateralJoin.sol\";\nimport \"../interfaces/IDssCdpManager.sol\";\nimport \"../interfaces/ITaxCollector.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\npragma solidity ^0.8.0;\n\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n// WARNING: These functions meant to be used as a a library for a DSProxy. Some are unsafe if you call them directly.\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\nabstract contract Math {\n    uint256 constant RAY = 10 ** 27;\n\n    // Internal functions\n\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x, \"mul-overflow\");\n    }\n\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x);\n    }\n\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x, \"sub-overflow\");\n    }\n\n    function toInt(uint x) internal pure returns (int y) {\n        y = int(x);\n        require(y >= 0, \"int-overflow\");\n    }\n\n    function toRad(uint wad) internal pure returns (uint rad) {\n        rad = mul(wad, 10 ** 27);\n    }\n\n    function convertTo18(ICollateralJoin collateralJoin, uint256 amt) internal returns (uint256 wad) {\n        // For those collaterals that have less than 18 decimals precision we need to do the conversion\n        // before passing to modifySAFECollateralization function\n        // Adapters will automatically handle the difference of precision\n        wad = mul(\n            amt,\n            10 ** (18 - collateralJoin.decimals())\n        );\n    }\n}\n\ncontract DssProxyActions is Math {\n    // Internal functions\n    function _getGeneratedDeltaDebt(\n        ISafeEngine safeEngine,\n        address taxCollector,\n        address safe,\n        bytes32 collateralType,\n        uint wad\n    ) internal returns (int deltaDebt) {\n        // Updates stability fee rate\n        uint rate = ITaxCollector(taxCollector).taxSingle(collateralType);\n\n        // Gets StablePro balance of the safe in the safeEngine\n        uint stableProBalance = safeEngine.coinBalance(safe);\n\n        // If there was already enough StablePro in the safeEngine balance, just exits it without adding more debt\n        if (stableProBalance < mul(wad, RAY)) {\n            // Calculates the needed deltaDebt so together with the existing StablePro in the safeEngine\n            // is enough to exit wad amount of StablePro tokens\n            deltaDebt = toInt(sub(mul(wad, RAY), stableProBalance) / rate);\n            // This is neeeded due lack of precision. It might need to sum an extra deltaDebt wei\n            // (for the given StablePro wad amount)\n            deltaDebt = mul(uint(deltaDebt), rate) < mul(wad, RAY) ? deltaDebt + 1 : deltaDebt;\n        }\n    }\n\n    function _getRepaidDeltaDebt(\n        ISafeEngine safeEngine,\n        uint stablePro,\n        address safe,\n        bytes32 collateralType\n    ) internal view returns (int deltaDebt) {\n        // Gets actual rate from the safeEngine\n        (, uint rate,,,,,,) = safeEngine.collateralTypes(collateralType);\n        // Gets actual safeDebt value of the safe\n        (, uint safeDebt) = safeEngine.safes(collateralType, safe);\n\n        // Uses the whole StablePro balance in the safeEngine to reduce the debt\n        deltaDebt = toInt(stablePro / rate);\n        // Checks the calculated deltaDebt is not higher than safe.safeDebt (total debt), otherwise uses its value\n        deltaDebt = uint(deltaDebt) <= safeDebt ? - deltaDebt : - toInt(safeDebt);\n    }\n\n    function _getRepaidAllWad(\n        ISafeEngine safeEngine,\n        address usr,\n        address safe,\n        bytes32 collateralType\n    ) internal view returns (uint wad) {\n        // Gets actual rate from the safeEngine\n        (, uint rate,,,,,,) = safeEngine.collateralTypes(collateralType);\n        // Gets actual safeDebt value of the safe\n        (, uint safeDebt) = safeEngine.safes(collateralType, safe);\n        // Gets actual StablePro amount in the safe\n        uint stablePro = safeEngine.coinBalance(usr);\n\n        uint rad = sub(mul(safeDebt, rate), stablePro);\n        wad = rad / RAY;\n\n        // If the rad precision has some dust, it will need to request for 1 extra wad wei\n        wad = mul(wad, RAY) < rad ? wad + 1 : wad;\n    }\n\n//    function transfer(address gem, address dst, uint amt) public {\n//        GemLike(gem).transfer(dst, amt);\n//    }\n\n    // We make it internal to save some gas\n    // Also we need more args instead of MakerDAO version, because of RewardChef during join/exit\n    function _coinJoin_join(bytes32 collateralType, address apt, address cdp, uint wad) internal {\n        // Gets StablePro from the user's wallet\n        ICoinJoin(apt).systemCoin().transferFrom(msg.sender, address(this), wad);\n        // Approves adapter to take the StablePro amount\n        ICoinJoin(apt).systemCoin().approve(address(apt), wad);\n        // Joins StablePro into the safeEngine\n        ICoinJoin(apt).join(collateralType, msg.sender, cdp, wad);\n    }\n\n    // we make it internal to save some gas\n    function _collateralJoin_join(ICollateralJoin apt, address safe, uint amt) internal {\n        // Gets token from the user's wallet\n        apt.collateral().transferFrom(msg.sender, address(this), amt);\n        // Approves adapter to take the token amount\n        apt.collateral().approve(address(apt), amt);\n        // Joins token collateral into the safeEngine\n        apt.join(safe, amt);\n    }\n\n    /**\n     * For main flow we don't need that functions:\n    function approveSAFEModification(address obj, address usr) public {\n        ISafeEngine(obj).approveSAFEModification(usr);\n    }\n\n    function denySAFEModification(address obj, address usr) public {\n        ISafeEngine(obj).denySAFEModification(usr);\n    }\n\n    function transferSAFEOwnership(address manager, uint cdp, address usr) public {\n        IDssCdpManager(manager).transferSAFEOwnership(cdp, usr);\n    }\n\n    function giveToProxy(address proxyRegistry, address manager, uint cdp, address dst) public {\n        // Gets actual proxy address\n        address proxy = ProxyRegistryLike(proxyRegistry).proxies(dst);\n        // Checks if the proxy address already existed and dst address is still the owner\n        if (proxy == address(0) || ProxyLike(proxy).owner() != dst) {\n            uint csize;\n            assembly {\n                csize := extcodesize(dst)\n            }\n            // We want to avoid creating a proxy for a contract address that might not be able to handle proxies, then losing the CDP\n            require(csize == 0, \"Dst-is-a-contract\");\n            // Creates the proxy for the dst address\n            proxy = ProxyRegistryLike(proxyRegistry).build(dst);\n        }\n        // Transfers CDP to the dst proxy\n        give(manager, cdp, proxy);\n    }\n\n    function cdpAllow(address manager, uint cdp, address usr, uint ok) public {\n        IDssCdpManager(manager).cdpAllow(cdp, usr, ok);\n    }\n\n    function allowHandler(address manager, address usr, uint ok) public {\n        IDssCdpManager(manager).allowHandler(usr, ok);\n    }\n\n    function quit(address manager, uint cdp, address dst) public {\n        IDssCdpManager(manager).quit(cdp, dst);\n    }\n\n    function enter(address manager, address src, uint cdp) public {\n        IDssCdpManager(manager).enter(src, cdp);\n    }\n\n    function moveSAFE(address manager, uint cdpSrc, uint cdpOrg) public {\n        IDssCdpManager(manager).shift(cdpSrc, cdpOrg);\n    }\n    **/\n\n    // We also make this functions internal to save gas\n    function transferCollateral(address manager, uint cdp, address dst, uint wad) internal {\n        IDssCdpManager(manager).transferCollateral(cdp, dst, wad);\n    }\n\n    function transferInternalCoins(address manager, uint cdp, address dst, uint rad) internal {\n        IDssCdpManager(manager).transferInternalCoins(cdp, dst, rad);\n    }\n\n    function modifySAFECollateralization(address manager, uint cdp, int deltaCollateral, int deltaDebt) internal {\n        IDssCdpManager(manager).modifySAFECollateralization(cdp, deltaCollateral, deltaDebt);\n    }\n\n    function openSafe(address manager, bytes32 collateralType, address usr) internal returns (uint cdp) {\n        cdp = IDssCdpManager(manager).openSafe(collateralType, usr);\n    }\n\n    // Public functions\n\n    /**\n    // We don't have GNT and don't need ETH as collateral, so we commented this functions\n    function makeGemBag(address gemJoin) public returns (address bag) {\n        bag = GNTJoinLike(gemJoin).make(address(this));\n    }\n\n    function lockETH(address manager, address ethJoin, uint cdp) public payable {\n        // Receives ETH amount, converts it to WETH and joins it into the vat\n        ethJoin_join(ethJoin, address(this));\n        // Locks WETH amount into the CDP\n        IDssCdpManager(manager).safeEngine().modifySAFECollateralization(\n            IDssCdpManager(manager).collateralTypes(cdp),\n            IDssCdpManager(manager).safes(cdp),\n            address(this),\n            address(this),\n            toInt(msg.value),\n            0\n        );\n    }\n\n    function safeLockETH(address manager, address ethJoin, uint cdp, address owner) public payable {\n        require(IDssCdpManager(manager).owns(cdp) == owner, \"bad-owner\");\n        lockETH(manager, ethJoin, cdp);\n    }\n    **/\n\n    function lockTokenCollateral(address manager, ICollateralJoin collateralJoin, uint cdp, uint amt) external {\n        // Takes token amount from user's wallet and joins into the safeEngine\n        _collateralJoin_join(collateralJoin, address(this), amt);\n        // Locks token amount into the CDP\n        IDssCdpManager(manager).safeEngine().modifySAFECollateralization(\n            IDssCdpManager(manager).collateralTypes(cdp),\n            IDssCdpManager(manager).safes(cdp),\n            address(this),\n            address(this),\n            toInt(convertTo18(collateralJoin, amt)),\n            0\n        );\n    }\n\n    /**\n     * Don't see any additional security because attacker could potentially call safeLockGem\n     * with the correct owner address (just get IDssCdpManager(manager).owns(cdp))\n     * and bypass the intended security check\n    function safeLockTokenCollateral(address manager,address collateralJoin,uint cdp,uint amt,address owner) public {\n        require(IDssCdpManager(manager).owns(cdp) == owner, \"bad-owner\");\n        lockTokenCollateral(manager, collateralJoin, cdp, amt);\n    }\n\n    function freeETH(address manager, address ethJoin, uint cdp, uint wad) public {\n        // Unlocks WETH amount from the CDP\n        frob(manager, cdp, -toInt(wad), 0);\n        // Moves the amount from the CDP urn to proxy's address\n        flux(manager, cdp, address(this), wad);\n        // Exits WETH amount to proxy address as a token\n        GemJoinLike(ethJoin).exit(address(this), wad);\n        // Converts WETH to ETH\n        GemJoinLike(ethJoin).gem().withdraw(wad);\n        // Sends ETH back to the user's wallet\n        msg.sender.transfer(wad);\n    }\n    **/\n\n    function freeTokenCollateral(address manager, ICollateralJoin collateralJoin, uint cdp, uint amt) external {\n        uint wad = convertTo18(collateralJoin, amt);\n        // Unlocks token amount from the CDP\n        modifySAFECollateralization(manager, cdp, -toInt(wad), 0);\n        // Moves the amount from the CDP safe to proxy's address\n        transferCollateral(manager, cdp, address(this), wad);\n        // Exits token amount to the user's wallet as a token\n        collateralJoin.exit(msg.sender, amt);\n    }\n    \n    /**\n    function exitETH(address manager, address ethJoin, uint cdp, uint wad) public {\n        // Moves the amount from the CDP urn to proxy's address\n        flux(manager, cdp, address(this), wad);\n\n        // Exits WETH amount to proxy address as a token\n        GemJoinLike(ethJoin).exit(address(this), wad);\n        // Converts WETH to ETH\n        GemJoinLike(ethJoin).gem().withdraw(wad);\n        // Sends ETH back to the user's wallet\n        msg.sender.transfer(wad);\n    }\n    **/\n\n    function exitTokenCollateral(address manager, ICollateralJoin collateralJoin, uint cdp, uint amt) external {\n        // Moves the amount from the CDP safe to proxy's address\n        transferCollateral(manager, cdp, address(this), convertTo18(collateralJoin, amt));\n\n        // Exits token amount to the user's wallet as a token\n        collateralJoin.exit(msg.sender, amt);\n    }\n\n    function generateDebt(\n        address manager, address taxCollector, address coinJoin, uint cdp, uint wad, uint256 lockupPeriod\n    ) external {\n        address safe = IDssCdpManager(manager).safes(cdp);\n        ISafeEngine safeEngine = IDssCdpManager(manager).safeEngine();\n        bytes32 collateralType = IDssCdpManager(manager).collateralTypes(cdp);\n        // Generates debt in the CDP\n        modifySAFECollateralization(\n            manager,\n            cdp,\n            0,\n            _getGeneratedDeltaDebt(safeEngine, taxCollector, safe, collateralType, wad)\n        );\n        // Moves the StablePro amount (balance in the safeEngine in rad) to proxy's address\n        transferInternalCoins(manager, cdp, address(this), toRad(wad));\n        // Allows adapter to access to proxy's StablePro balance in the safeEngine\n        if (safeEngine.cdpRights(address(this), address(coinJoin)) == 0) {\n            safeEngine.approveSAFEModification(coinJoin);\n        }\n        // Exits StablePro to the user's wallet as a token\n        ICoinJoin(coinJoin).exit(collateralType, msg.sender, lockupPeriod, msg.sender, wad);\n    }\n\n    function repayDebt(address manager, address coinJoin, uint cdp, uint wad) external {\n        ISafeEngine safeEngine = IDssCdpManager(manager).safeEngine();\n        address safe = IDssCdpManager(manager).safes(cdp);\n        bytes32 collateralType = IDssCdpManager(manager).collateralTypes(cdp);\n\n        address own = IDssCdpManager(manager).owns(cdp);\n        if (own == address(this) || IDssCdpManager(manager).cdpCan(own, cdp, address(this)) == 1) {\n            // Joins StablePro amount into the safeEngine\n            _coinJoin_join(collateralType, coinJoin, safe, wad);\n            // Paybacks debt to the CDP\n            modifySAFECollateralization(\n                manager,\n                cdp,\n                0,\n                _getRepaidDeltaDebt(safeEngine, safeEngine.coinBalance(safe), safe, collateralType)\n            );\n        } else {\n            // Joins StablePro amount into the safeEngine\n            _coinJoin_join(collateralType, coinJoin, address(this), wad);\n            // Paybacks debt to the CDP\n            safeEngine.modifySAFECollateralization(\n                collateralType,\n                safe,\n                address(this),\n                address(this),\n                0,\n                _getRepaidDeltaDebt(safeEngine, wad * RAY, safe, collateralType)\n            );\n        }\n    }\n    \n    /**\n    * Same as in safeLockTokenCollateral\n    function safeRepayDebt(address manager, address daiJoin, uint cdp, uint wad, address owner) public {\n        require(IDssCdpManager(manager).owns(cdp) == owner, \"bad-owner\");\n        repayDebt(manager, daiJoin, cdp, wad);\n    }\n    **/\n\n    function repayAllDebt(address manager, address coinJoin, uint cdp) external {\n        ISafeEngine safeEngine = IDssCdpManager(manager).safeEngine();\n        address safe = IDssCdpManager(manager).safes(cdp);\n        bytes32 collateralType = IDssCdpManager(manager).collateralTypes(cdp);\n        (, uint safeDebt) = safeEngine.safes(collateralType, safe);\n\n        address own = IDssCdpManager(manager).owns(cdp);\n        if (own == address(this) || IDssCdpManager(manager).cdpCan(own, cdp, address(this)) == 1) {\n            // Joins StablePro amount into the safeEngine\n            _coinJoin_join(collateralType, coinJoin, safe, _getRepaidAllWad(safeEngine, safe, safe, collateralType));\n            // Paybacks debt to the CDP\n            modifySAFECollateralization(manager, cdp, 0, -int(safeDebt));\n        } else {\n            // Joins StablePro amount into the safeEngine\n            _coinJoin_join(\n                collateralType,\n                coinJoin,\n                address(this),\n                _getRepaidAllWad(safeEngine, address(this), safe, collateralType)\n            );\n            // Paybacks debt to the CDP\n            safeEngine.modifySAFECollateralization(\n                collateralType,\n                safe,\n                address(this),\n                address(this),\n                0,\n                -int(safeDebt)\n            );\n        }\n    }\n\n    /**\n    * Same as in safeLockTokenCollateral\n    function safeRepayAllDebt(address manager, address daiJoin, uint cdp, address owner) public {\n        require(IDssCdpManager(manager).owns(cdp) == owner, \"bad-owner\");\n        repayAllDebt(manager, daiJoin, cdp);\n    }\n\n    function lockETHAndDraw(\n        address manager, address jug, address ethJoin, address daiJoin, uint cdp, uint wadD\n    ) public payable {\n        address urn = ManagerLike(manager).urns(cdp);\n        address vat = ManagerLike(manager).vat();\n        bytes32 ilk = ManagerLike(manager).ilks(cdp);\n        // Receives ETH amount, converts it to WETH and joins it into the vat\n        ethJoin_join(ethJoin, urn);\n        // Locks WETH amount into the CDP and generates debt\n        frob(manager, cdp, toInt(msg.value), _getDrawDart(vat, jug, urn, ilk, wadD));\n        // Moves the DAI amount (balance in the vat in rad) to proxy's address\n        move(manager, cdp, address(this), toRad(wadD));\n        // Allows adapter to access to proxy's DAI balance in the vat\n        if (VatLike(vat).can(address(this), address(daiJoin)) == 0) {\n            VatLike(vat).hope(daiJoin);\n        }\n        // Exits DAI to the user's wallet as a token\n        DaiJoinLike(daiJoin).exit(msg.sender, wadD);\n    }\n\n    function openLockETHAndDraw(\n        address manager, address jug, address ethJoin, address daiJoin, bytes32 ilk, uint wadD\n    ) public payable returns (uint cdp) {\n        cdp = open(manager, ilk, address(this));\n        lockETHAndDraw(manager, jug, ethJoin, daiJoin, cdp, wadD);\n    }\n    **/\n\n    function lockTokenCollateralAndGenerateDebt(\n        address manager,\n        address taxCollector,\n        ICollateralJoin collateralJoin,\n        address coinJoin,\n        uint cdp,\n        uint collateralAmount,\n        uint deltaWad,\n        uint256 lockupPeriod\n    ) public {\n        address safeHandler = IDssCdpManager(manager).safes(cdp);\n        ISafeEngine safeEngine = IDssCdpManager(manager).safeEngine();\n        bytes32 collateralType = IDssCdpManager(manager).collateralTypes(cdp);\n        // Takes token amount from user's wallet and joins into the safeEngine\n        _collateralJoin_join(collateralJoin, safeHandler, collateralAmount);\n        // Locks token amount into the SAFE and generates debt\n        modifySAFECollateralization(\n            manager,\n            cdp,\n            toInt(convertTo18(collateralJoin, collateralAmount)),\n            _getGeneratedDeltaDebt(safeEngine, taxCollector, safeHandler, collateralType, deltaWad)\n        );\n        // Moves the COIN amount (balance in the safeEngine in rad) to proxy's address\n        transferInternalCoins(manager, cdp, address(this), toRad(deltaWad));\n        // Allows adapter to access to proxy's COIN balance in the safeEngine\n        if (safeEngine.cdpRights(address(this), address(coinJoin)) == 0) {\n            safeEngine.approveSAFEModification(coinJoin);\n        }\n        // Exits COIN to the user's wallet as a token\n        ICoinJoin(coinJoin).exit(collateralType, msg.sender, lockupPeriod, msg.sender, deltaWad);\n    }\n\n    function openLockTokenCollateralAndGenerateDebt(\n        address manager,\n        address taxCollector,\n        ICollateralJoin collateralJoin,\n        address coinJoin,\n        bytes32 collateralType,\n        uint amtC,\n        uint wadD,\n        uint256 lockupPeriod\n    ) external returns (uint cdp) {\n        cdp = openSafe(manager, collateralType, address(this));\n        lockTokenCollateralAndGenerateDebt(\n            manager, taxCollector, collateralJoin, coinJoin, cdp, amtC, wadD, lockupPeriod\n        );\n    }\n\n    /**\n     * We don't use GNT and ETH\n    function openLockGNTAndDraw(\n        address manager,naddress jug, address gntJoin, address daiJoin, bytes32 ilk, uint wadC, uint wadD\n    ) public returns (address bag, uint cdp) {\n        // Creates bag (if doesn't exist) to hold GNT\n        bag = GNTJoinLike(gntJoin).bags(address(this));\n        if (bag == address(0)) {\n            bag = makeGemBag(gntJoin);\n        }\n        // Transfer funds to the funds which previously were sent to the proxy\n        GemLike(GemJoinLike(gntJoin).gem()).transfer(bag, wadC);\n        cdp = openLockGemAndDraw(manager, jug, gntJoin, daiJoin, ilk, wadC, wadD, false);\n    }\n\n    function wipeAndFreeETH(address manager, address ethJoin, address daiJoin, uint cdp, uint wadC, uint wadD) public {\n        address urn = ManagerLike(manager).urns(cdp);\n        // Joins DAI amount into the vat\n        daiJoin_join(daiJoin, urn, wadD);\n        // Paybacks debt to the CDP and unlocks WETH amount from it\n        frob(\n            manager,\n            cdp,\n            -toInt(wadC),\n            _getWipeDart(ManagerLike(manager).vat(), VatLike(ManagerLike(manager).vat()).dai(urn), urn, ManagerLike(manager).ilks(cdp))\n        );\n        // Moves the amount from the CDP urn to proxy's address\n        flux(manager, cdp, address(this), wadC);\n        // Exits WETH amount to proxy address as a token\n        GemJoinLike(ethJoin).exit(address(this), wadC);\n        // Converts WETH to ETH\n        GemJoinLike(ethJoin).gem().withdraw(wadC);\n        // Sends ETH back to the user's wallet\n        msg.sender.transfer(wadC);\n    }\n\n    function wipeAllAndFreeETH(address manager, address ethJoin, address daiJoin, uint cdp, uint wadC) public {\n        address vat = ManagerLike(manager).vat();\n        address urn = ManagerLike(manager).urns(cdp);\n        bytes32 ilk = ManagerLike(manager).ilks(cdp);\n        (, uint art) = VatLike(vat).urns(ilk, urn);\n\n        // Joins DAI amount into the vat\n        daiJoin_join(daiJoin, urn, _getWipeAllWad(vat, urn, urn, ilk));\n        // Paybacks debt to the CDP and unlocks WETH amount from it\n        frob(\n            manager,\n            cdp,\n            -toInt(wadC),\n            -int(art)\n        );\n        // Moves the amount from the CDP urn to proxy's address\n        flux(manager, cdp, address(this), wadC);\n        // Exits WETH amount to proxy address as a token\n        GemJoinLike(ethJoin).exit(address(this), wadC);\n        // Converts WETH to ETH\n        GemJoinLike(ethJoin).gem().withdraw(wadC);\n        // Sends ETH back to the user's wallet\n        msg.sender.transfer(wadC);\n    }\n    **/\n\n    function repayDebtAndFreeTokenCollateral(\n        address manager,\n        ICollateralJoin collateralJoin,\n        address coinJoin,\n        uint cdp,\n        uint amtC,\n        uint wadD\n    ) external {\n        address safe = IDssCdpManager(manager).safes(cdp);\n        bytes32 collateralType = IDssCdpManager(manager).collateralTypes(cdp);\n        ISafeEngine safeEngine = IDssCdpManager(manager).safeEngine();\n        // Joins StablePro amount into the safeEngine\n        _coinJoin_join(collateralType, coinJoin, safe, wadD);\n        uint wadC = convertTo18(collateralJoin, amtC);\n        // Paybacks debt to the CDP and unlocks token amount from it\n        modifySAFECollateralization(\n            manager,\n            cdp,\n            -toInt(wadC),\n            _getRepaidDeltaDebt(\n                safeEngine,\n                safeEngine.coinBalance(safe),\n                safe,\n                collateralType\n            )\n        );\n        // Moves the amount from the CDP safe to proxy's address\n        transferCollateral(manager, cdp, address(this), wadC);\n        // Exits token amount to the user's wallet as a token\n        collateralJoin.exit(msg.sender, amtC);\n    }\n\n    function repayAllDebtAndFreeTokenCollateral(\n        address manager,\n        ICollateralJoin collateralJoin,\n        address coinJoin,\n        uint cdp,\n        uint amtC\n    ) external {\n        ISafeEngine safeEngine = IDssCdpManager(manager).safeEngine();\n        address safe = IDssCdpManager(manager).safes(cdp);\n        bytes32 collateralType = IDssCdpManager(manager).collateralTypes(cdp);\n        (, uint safeDebt) = safeEngine.safes(collateralType, safe);\n\n        // Joins StablePro amount into the safeEngine\n        _coinJoin_join(collateralType, coinJoin, safe, _getRepaidAllWad(safeEngine, safe, safe, collateralType));\n        uint wadC = convertTo18(collateralJoin, amtC);\n        // Paybacks debt to the CDP and unlocks token amount from it\n        modifySAFECollateralization(\n            manager,\n            cdp,\n            -toInt(wadC),\n            -int(safeDebt)\n        );\n        // Moves the amount from the CDP safe to proxy's address\n        transferCollateral(manager, cdp, address(this), wadC);\n        // Exits token amount to the user's wallet as a token\n        collateralJoin.exit(msg.sender, amtC);\n    }\n\n    // Public view functions. There is no such functions in original MakerDAO version.\n\n    // @notice Returns cdpId of users cdp that is stored in DssCdpManager.\n    // TODO: We need to optimize it.\n    function getCdpId(address manager, address user, bytes32 collateralType) public view returns(uint) {\n        uint256 cdpCount = IDssCdpManager(manager).cdpCount(user);\n        uint256 cdpId = IDssCdpManager(manager).firstCdpId(user);\n        IDssCdpManager managerContract = IDssCdpManager(manager);\n\n        for (uint256 i; i < cdpCount; ++i) {\n            if (managerContract.collateralTypes(cdpId) == collateralType) {\n                return cdpId;\n            }\n            (, uint256 nextCdpId) = managerContract.list(cdpId);\n            cdpId = nextCdpId;\n        }\n\n        return type(uint256).max;\n    }\n\n    // @notice UI function to get cdp info of user.\n    function getCdpInfo(address manager, address user, bytes32 collateralType) public view returns(uint, uint) {\n        uint256 cdpId = getCdpId(manager, user, collateralType);\n        if (cdpId == type(uint256).max) return (0,0);\n\n        ISafeEngine safeEngine = IDssCdpManager(manager).safeEngine();\n        address safe = IDssCdpManager(manager).safes(cdpId);\n        return safeEngine.safes(collateralType, safe);\n    }\n\n    // @notice UI function that returns how much user is available to withdraw collateral.\n    function getAvailableToWithdraw(address manager, address user, bytes32 collateralType) external view returns(uint) {\n        ISafeEngine safeEngine = IDssCdpManager(manager).safeEngine();\n\n        (uint256 lockedCollateral, uint256 generatedDebt) = getCdpInfo(manager, user, collateralType);\n        (, uint rate,,, uint safetyPrice,,,) = safeEngine.collateralTypes(collateralType);\n\n        // If safetyPrice is not set, then answer is 0\n        if (safetyPrice == 0) return 0;\n\n        // 1e18 * 1e27 / 1e27 = 1e18\n        uint256 minCollateralAmount = mul(generatedDebt, rate) / safetyPrice; // result in base of 1e27\n        return lockedCollateral > minCollateralAmount ? sub(lockedCollateral, minCollateralAmount) : 0;\n    }\n\n    // @notice UI function that returns how much user is available to borrow stablePro using collateral.\n    function getAvailableToBorrow(address manager, address user, bytes32 collateralType) external view returns(uint) {\n        ISafeEngine safeEngine = IDssCdpManager(manager).safeEngine();\n\n        (uint256 lockedCollateral, uint256 generatedDebt) = getCdpInfo(manager, user, collateralType);\n        (\n            uint256 debtAmount, uint256 rate, uint256 debtCeiling,, uint safetyPrice,,,\n        ) = safeEngine.collateralTypes(collateralType);\n\n        uint256 usdLimitE18 = mul(lockedCollateral, safetyPrice) / rate; // 1e18 * 1e27 / 1e27 = 1e18\n        if (usdLimitE18 > generatedDebt) {\n            uint256 availableToBorrow = sub(usdLimitE18, generatedDebt); // 1e18\n\n            uint256 globalAvailableToBorrow = sub(safeEngine.globalDebtCeiling(), safeEngine.globalDebt()); // 1e45\n            if (globalAvailableToBorrow < toRad(availableToBorrow)) return globalAvailableToBorrow  / RAY;\n\n            uint256 collateralAvailableToBorrow = sub(debtCeiling, toRad(debtAmount)); // 1e45\n            if (collateralAvailableToBorrow < toRad(add(debtAmount, availableToBorrow))) {\n                return collateralAvailableToBorrow / RAY;\n            }\n\n            return availableToBorrow;\n        }\n\n        return 0;\n    }\n}\n\n// We also don't need DssProxyActionsEnd and DssProxyActionsDsr contracts\n"
    },
    "contracts/makerdao/interfaces/IAccountingEngine.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport \"../../exchange/interfaces/IExchange.sol\";\n\n/**\n * @title IAccountingEngine\n **/\ninterface IAccountingEngine {\n    /* ==================== EVENTS ===============-===== */\n    event StableProSwapped(uint256 amount);\n    event DisableContract();\n    event StablecoinRefilled(address stablecoin, uint256 amount);\n\n    /* ==================== ERRORS ===============-===== */\n    error ContractDisabled();\n    error BadModifyParameters();\n    error BadStablecoin(address asset);\n    error BadRewardToken();\n    error DebtNotZero();\n    error SurplusNotZero();\n    error InsufficientDebt();\n    error InsufficientSurplus();\n    error NotEnoughAsh();\n    error PopDebtDelayNotFinished();\n    error StablecoinNotExist(address asset);\n    error StablecoinExists(address asset);\n\n    /* ====================== VARS ===================== */\n\n    function stablecoinToSwap() external view returns (address);\n\n    /* ==================== MUTABLE METHODS ==================== */\n\n    /**\n     * @notice Push debt (that the system tries to cover with collateral auctions) to a queue\n     * @dev Debt is locked in a queue to give the system enough time to auction collateral\n     *      and gather surplus\n     * @param amountToRaise Amount of debt to push\n     */\n    function pushDebtToQueue(uint amountToRaise) external;\n\n    /**\n     * @notice A block of debt can be popped from the queue after popDebtDelay seconds passed since it was\n     *         added there\n     * @param era Timestamp of the block of debt that should be popped out\n     */\n    function popDebtFromQueue(uint era) external;\n\n    // Debt settlement\n    /**\n     * @notice Destroy an equal amount of coins and debt\n     * @dev We can only destroy debt that is not locked in the queue and also not in a debt auction\n     * @param rad Amount of coins/debt to destroy (number with 45 decimals)\n    **/\n    function settleDebt(uint rad) external;\n\n    /**\n     * @notice Use surplus coins to destroy debt that is/was in a debt auction\n     * @param rad Amount of coins/debt to destroy (number with 45 decimals)\n    **/\n    function cancelAuctionedDebtWithSurplus(uint rad) external;\n\n    /**\n     * @notice Start a debt auction (we have debt = x$, token2sell with value of y$, where y >= x)\n     * @dev We can only auction debt that is not already being auctioned and is not locked in the debt queue.\n     * Firstly, we should donate token2sell (it's collateral or stablecoin) by refillStablecoin\n    **/\n    function auctionDebt(\n        address token2sell,\n        uint256 amountToSell,\n        uint8 discountType,\n        uint256 auctionDebt\n    ) external returns (uint orderId);\n\n    /**\n     * @notice Start a surplus auction\n     * @dev We can only auction surplus if we wait at least 'surplusAuctionDelay' seconds since the last\n     *      auction trigger, if we keep enough surplus in the buffer and if there is no bad debt to settle\n    **/\n    function auctionSurplus(uint256 surplusAmount, uint8 discountType) external returns (uint orderId);\n\n    /**\n     * @notice Disable this contract (normally called by Global Settlement)\n     * @dev When we disable, the contract tries to settle as much debt as possible (if there's any) with\n            any surplus that's left in the system. After erasing debt, the contract will either transfer any\n            remaining surplus right away (if disableCooldown == 0) or will only record the timestamp when\n            it was disabled\n    **/\n    function disableContract() external;\n\n    /* ================= Stablecoin Whitelist ================== */\n\n    /**\n     * @notice Add new stablecoin to whitelist of stablecoins protocol works with\n    **/\n    function addWhitelistStablecoin(address stablecoin) external;\n\n    /**\n     * @notice Remove stablecoin from whitelist of stablecoins protocol works with\n    **/\n    function removeWhitelistStablecoin(address stablecoin) external;\n\n    /**\n     * @notice Check if give token is in stablecoins whitelist\n    **/\n    function hasWhitelistStablecoin(address stablecoin) external view returns (bool);\n\n    /**\n     * @notice Change var stablecoinToSwap, that is used in liquidation process\n    **/\n    function setStablecoinToSwap(address stablecoin) external;\n\n    /* =================== MANUAL FUNCTIONS ==================== */\n    /**\n     * @notice Admin function to join protocol using real StablePro (= join in coinJoin)\n    **/\n    function joinStablePro(uint256 amount) external;\n\n    /**\n     * @notice Admin function to get real StablePro tokens instead of records in protocol (= exit from coinJoin)\n    **/\n    function getRealStablePro(uint256 amount) external;\n\n    /**\n     * @notice Function to send stablecoin to AccountingEngine contract\n    **/\n    function refillStablecoin(address stablecoin, uint256 amount) external;\n\n    /**\n     * @notice Admin function to distribute surplus after getting it\n    **/\n    function distributeSurplus(uint256 amount) external;\n\n    /**\n     * @notice Function to swap sender's stablePro to stablecoin that is in whitelist\n    **/\n    function swapStableProToStablecoin(address stablecoinToken, uint256 stableProAmountE18) external;\n}\n"
    },
    "contracts/makerdao/interfaces/ICoin.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface ICoin is IERC20 {\n    function mint(address account, uint256 amount) external;\n    function burn(address account, uint256 amount) external;\n}\n"
    },
    "contracts/makerdao/interfaces/ICoinJoin.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport {IDisable} from \"./IDisable.sol\";\nimport {ICoin} from \"./ICoin.sol\";\n\n/**\n * @title ITaxCollector\n **/\ninterface ICoinJoin is IDisable {\n    /* ==================== EVENTS ==================== */\n    event Join(address indexed usr, uint256 wad);\n    event JoinNoReward(address indexed usr, uint256 wad);\n    event Exit(address indexed usr, uint256 wad);\n    event ExitNoReward(address indexed usr, uint256 wad);\n    event UpdateRewardChef();\n    event DecreaseAmountFailed(address indexed collateralType, address indexed user, uint amount);\n    event IncreaseAmountFailed(\n        address indexed collateralType,\n        address indexed user,\n        uint amount,\n        uint256 lockupPeriodSeconds\n    );\n\n    /* ===================== ERRORS ==================== */\n    error BadLockupPeriod();\n\n    /* ====================== VARS ===================== */\n    function systemCoin() external returns (ICoin);\n\n    /* ==================== METHODS ==================== */\n\n    /**\n    * @notice Join pegged-coins in the system\n    * @dev Exited coins have 18 decimals but inside the system they have 45 (rad) decimals.\n           When we join, the amount (wad) is multiplied by 10**27 (ray).\n           Can only be called by authorized contracts.\n    * @param collateralType Collateral that will be used for borrow\n    * @param user Account that call borrow/repay function and will receive rewards in RewardChef\n    * @param cdp Account that will receive the joined coins\n    * @param wad Amount of external coins to join (18 decimal number)\n    **/\n    function join(bytes32 collateralType, address user, address cdp, uint wad) external;\n\n    /**\n    * @notice Simple version of join(). Don't have Rewards, it is useful for our smart-contracts.\n    * @param cdp Account that will receive the joined coins\n    * @param wad Amount of external coins to join (18 decimal number)\n    **/\n    function joinNoReward(address cdp, uint wad) external;\n\n    /**\n    * @notice Exit pegged-coins from the system and inside 'Coin.sol'\n    * @dev Inside the system, coins have 45 (rad) decimals but outside they have 18 decimals (wad).\n           When we exit, we specify a wad amount of coins and then the contract automatically multiplies\n           wad by 10**27 to move the correct 45 decimal coin amount to this adapter.\n           Can only be called by authorized contracts.\n    * @param collateralType Collateral that will be used for repay\n    * @param user Account that call borrow/repay function and will receive rewards in RewardChef\n    * @param lockupPeriodSeconds Lockup period for rewardChef that calculate user rewards\n    * @param cdp Account that will receive the exited coins\n    * @param wad Amount of internal coins to join (18 decimal number that will be multiplied by ray)\n    **/\n    function exit(bytes32 collateralType, address user, uint256 lockupPeriodSeconds, address cdp, uint wad) external;\n\n    /**\n    * @notice Simple version of exit(). Don't have Rewards, it is useful for our smart-contracts.\n    * @param cdp Account that will receive the joined coins\n    * @param wad Amount of external coins to join (18 decimal number)\n    **/\n    function exitNoReward(address cdp, uint wad) external;\n\n    /**\n    * @notice We use rewardChef to increaseAmount/decreaseAmount during join and exit,\n    * so admin should be able to change RewardChef contract's address.\n    * @param rewardChef New address of RewardChef contract.\n    **/\n    function updateRewardChef(address rewardChef) external;\n\n    /**\n    * @notice We need to save mapping of collateralType => collateralAddress to work with RewardChef.\n    * @param _collateralType Collateral type as bytes32, that we use in our protocol.\n    * @param _collateralAddress Address of collateral\n    **/\n    function initializeCollateralType(bytes32 _collateralType, address _collateralAddress) external;\n}\n"
    },
    "contracts/makerdao/interfaces/ICollateralJoin.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport {IDisable} from \"./IDisable.sol\";\n\n/**\n * @title ITaxCollector\n **/\ninterface ICollateralJoin is IDisable {\n\n    /* ===================== EVENTS ===================== */\n\n    event Join(address indexed usr, uint256 wad);\n    event Exit(address indexed usr, uint256 wad);\n\n    /* ====================== VARS ===================== */\n    function decimals() external returns (uint);\n    function collateral() external view returns(IERC20Metadata);\n\n    /* ==================== METHODS ==================== */\n\n    /**\n    * @notice Join collateral in the system\n    * @param usr Account from which we transferFrom collateral and add it in the system\n    * @param wad Amount of collateral to transfer in the system (represented as a number with 18 decimals)\n    **/\n    function join(address usr, uint wad) external;\n\n    /**\n    * @notice Exit collateral from the system\n    * @param usr Account to which we transfer the collateral\n    * @param wad Amount of collateral to transfer to 'account' (represented as a number with 18 decimals)\n    **/\n    function exit(address usr, uint wad) external;\n}\n"
    },
    "contracts/makerdao/interfaces/IDisable.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\ninterface IDisable {\n    event DisableContract();\n\n    function disableContract() external;\n}\n"
    },
    "contracts/makerdao/interfaces/IDssCdpManager.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport \"../interfaces/ISafeEngine.sol\";\n\n/**\n * @title IDssMiddleware\n **/\ninterface IDssCdpManager {\n\n    /* ==================== STRUCTS ==================== */\n\n    struct List {\n        uint prev;\n        uint next;\n    }\n\n    /* ==================== EVENTS ===================== */\n\n    event NewCdp(address indexed usr, address indexed own, uint indexed cdp);\n\n\n    /* ===================== VARS ====================== */\n\n    // @notice CDPId => CollateralType\n    function collateralTypes(uint cdp) external view returns (bytes32);\n    // @notice CDPId => CdpHandler\n    function safes(uint cdp) external view returns (address);\n    // @notice Address of safeEngine\n    function safeEngine() external view returns (ISafeEngine);\n    // @notice CDPId => Owner\n    function owns(uint cdp) external view returns (address);\n    // @notice Owner => CDPId => Allowed Addr => True/False\n    function cdpCan(address owner, uint cdp, address allowedAddress) external view returns (uint);\n    // @notice Owner => Amount of CDPs\n    function cdpCount(address owner) external view returns (uint);\n    // @notice Owner => First CDPId\n    function firstCdpId(address owner) external view returns (uint);\n    // @notice Owner => Last CDPId\n    function lastCdpId(address owner) external view returns (uint);\n    // @notice CDPId => Prev & Next CDPIds (double linked list)\n    function list(uint cdp) external view returns (uint prev, uint next);\n\n    /* ==================== METHODS ==================== */\n\n    // @notice Allow/disallow a usr address to manage the cdp.\n    function cdpAllow(uint cdp, address usr, uint ok) external;\n\n    // @notice Allow/disallow a usr address to quit to the the sender urn.\n    function allowHandler(address usr, uint ok) external;\n\n    // @notice Open a new cdp for a given usr address.\n    function openSafe(bytes32 collateralType, address usr) external returns (uint);\n\n    // @notice Give the cdp ownership to a dst address.\n    function transferSafeOwnership(uint cdp, address dst) external;\n\n    // @notice Modify the cdp keeping the generated StablePro or collateral freed in the cdp urn address.\n    function modifySAFECollateralization(uint cdp, int deltaCollateral, int deltaDebt) external;\n\n    // @notice Transfer wad amount of cdp collateral from the cdp address to a dst address.\n    function transferCollateral(uint cdp, address dst, uint wad) external;\n\n    // @notice Transfer wad amount of any type of collateral (ilk) from the cdp address to a dst address.\n    // This function has the purpose to take away collateral from the system that doesn't correspond to the cdp\n    // but was sent there wrongly.\n    function transferCollateral(bytes32 ilk, uint cdp, address dst, uint wad) external;\n\n    // @notice Transfer wad amount of StablePro from the cdp address to a dst address.\n    function transferInternalCoins(uint cdp, address dst, uint rad) external;\n\n    // @notice Quit the system, migrating the cdp (lockedCollateral, generatedDebt) to a different dst urn\n    function quit(uint cdp, address dst) external;\n\n    // @notice Import a position from src urn to the urn owned by cdp\n    function enter(address src, uint cdp) external;\n\n    // @notice Move a position from cdpSrc urn to the cdpDst urn\n    function moveSAFE(uint cdpSrc, uint cdpDst) external;\n}\n"
    },
    "contracts/makerdao/interfaces/ISafeEngine.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// TODO: check how to operate with license and use one for all contracts\n\npragma solidity ^0.8.0;\n\nimport \"./IDisable.sol\";\n\n/**\n * @title SafeEngine\n * @notice The single source of truth for the Maker Protocol. It contains the accounting system of the core Vault,\n * Internal StablePro balances, and collateral state. It houses the public interface for Vault management,\n * allowing safe(= CDP or Vault) owners to adjust their Vault state balances. It also contains the public interface\n * for Vault fungibility, allowing safe (Vault) owners to transfer, split, and merge Vaults.\n * Excluding these interfaces, SAFEEngine is accessed through trusted smart contract modules.\n **/\ninterface ISafeEngine is IDisable {\n    /* ==================== METHODS ==================== */\n\n    // --- Data ---\n    struct CollateralType {\n        uint256 debtAmount;        // Total debt issued for this specific collateral type                          [wad]\n        uint256 accumulatedRate;   // Accumulator for interest accrued on this collateral type                     [ray]\n        uint256 debtCeiling;       // Maximum amount of debt that can be generated with this collateral type       [rad]\n        uint256 debtFloor;         // Minimum amount of debt that must be generated by a CDP using this collateral [rad]\n        uint256 safetyPrice;       // Floor price at which a CDP is allowed to generate debt                       [ray]\n        uint256 liquidationRatio;  // Liquidation ratio to calculate safety price                                  [ray]\n        address collateralAddress; // Address of collateral\n        uint256 safetyPriceBlockNumber; // Block when safetyPrice was updated\n    }\n    struct SAFE {\n        uint256 lockedCollateral; // Total amount of collateral locked in a SAFE/CDP  [wad]\n        uint256 generatedDebt;    // Total amount of debt generated by a SAFE/CDP     [wad]\n    }\n\n    // --- VARS ---\n\n    function safes(bytes32, address) external view returns (uint, uint);\n\n    function collateralTypes(bytes32) external view returns (\n        uint256 debtAmount,       // [wad]\n        uint256 accumulatedRate,  // [ray]\n        uint256 debtCeiling,      // [rad]\n        uint256 debtFloor,        // [rad]\n        uint256 safetyPrice,      // [ray]\n        uint256 liquidationRatio, // [ray]\n        address collateralAddress,\n        uint256 safetyPriceBlockNumber\n);\n\n    function tokenCollateral(bytes32, address) external view returns (uint256);\n\n    function coinBalance(address) external view returns (uint256);\n\n    function debtBalance(address) external view returns (uint256);\n\n    function cdpRights(address, address) external view returns (uint256);\n\n    function globalDebtCeiling() external view returns (uint256);\n\n    function globalDebt() external view returns (uint256);\n\n    // --- Auth ---\n    /**\n     * @notice Allow an address to modify your CDP.\n     * For example coinAdapter should be able to modify your CDP to withdraw all correctly.\n     * @param usr Account to give CDP permissions to\n     */\n    function approveSAFEModification(address usr) external;\n\n    /**\n     * @notice Deny an address the rights to modify your CDP\n     * @param usr Account to give CDP permissions to\n     */\n    function denySAFEModification(address usr) external;\n\n    // --- Administration ---\n\n    function initializeCollateralType(bytes32 collateralType, address collateralAddress) external;\n\n    /**\n     * @notice Method to modify some global variables\n     * @param what - name of variable we want to change\n     * @param data - new value of this variable\n     */\n    function modifyParameters(bytes32 what, uint data) external;\n    /**\n     * @notice Method to modify values in struct of collateralTypes\n     * @param collateralType - collateral type we want to modify (collateralTypes[collateralType])\n     * @param what - name of variable in struct we want to change\n     * @param data - new value of this variable\n     */\n    function modifyParameters(bytes32 collateralType, bytes32 what, uint data) external;\n\n    // --- Fungibility ---\n    function modifyCollateralBalance(bytes32 collateralType, address usr, int256 wad) external;\n    function transferCollateral(bytes32 collateralType, address src, address dst, uint256 wad) external;\n    function transferInternalCoins(address src, address dst, uint256 rad) external;\n\n    // --- SafetyPrice Manipulation ---\n    /**\n     * @notice Method to update safetyPrice, it's called each time, when function need actual safetyPrice\n     * @param collateralType - safetyPrice's collateral type we want to update\n     */\n    function updateSafetyPrice(bytes32 collateralType) external;\n\n    // --- CDP Manipulation ---\n    /**\n     * @notice Add/remove collateral or put back/generate more debt in a CDP\n     * @param collateralType Type of collateral to withdraw/deposit in and from the CDP\n     * @param cdp Target CDP\n     * @param collateralSource Account we take collateral from/put collateral into\n     * @param debtDestination Account from which we credit/debit coins and debt\n     * @param deltaCollateral Amount of collateral added/extract from the CDP\n     * @param deltaDebt Amount of debt to generate/repay\n     */\n    function modifySAFECollateralization(\n        bytes32 collateralType,\n        address cdp,\n        address collateralSource,\n        address debtDestination,\n        int deltaCollateral,\n        int deltaDebt\n    ) external;\n\n    // --- CDP Fungibility ---\n    /**\n     * @notice Transfer collateral and/or debt between CDPs\n     * @param collateralType Collateral type transferred between CDPs\n     * @param src Source CDP\n     * @param dst Destination CDP\n     * @param deltaCollateral Amount of collateral to take/add into src and give/take from dst\n     * @param deltaDebt Amount of debt to take/add into src and give/take from dst\n     */\n    function transferSAFECollateralAndDebt(\n        bytes32 collateralType,\n        address src,\n        address dst,\n        int deltaCollateral,\n        int deltaDebt\n    ) external;\n\n    // --- CDP Confiscation ---\n    /**\n     * @notice Normally used by the LiquidationEngine in order to confiscate collateral and\n       debt from a CDP and give them to someone else\n     * @param collateralType Collateral type the CDP has locked inside\n     * @param cdp Target CDP\n     * @param collateralCounterparty Who we take/give collateral to\n     * @param debtCounterparty Who we take/give debt to\n     * @param deltaCollateral Amount of collateral taken/added into the CDP\n     * @param deltaDebt Amount of debt taken/added into the CDP\n     */\n    function confiscateSAFECollateralAndDebt(\n        bytes32 collateralType,\n        address cdp,\n        address collateralCounterparty,\n        address debtCounterparty,\n        int deltaCollateral,\n        int deltaDebt\n    ) external;\n\n    // --- Settlement ---\n    /**\n     * @notice Nullify an amount of coins with an equal amount of debt\n     * @param rad Amount of debt & coins to destroy (expressed as a number with 45 decimals)\n     */\n    function settleDebt(uint rad) external;\n\n    /**\n     * @notice Usually called by CoinSavingsAccount in order to create unbacked debt\n     * @param debtDestination Usually AccountingEngine that can settle decreaseSoldAmount with surplus\n     * @param coinDestination Usually CoinSavingsAccount who passes the new coins to depositors\n     * @param rad Amount of debt to create (expressed as a number with 45 decimals)\n     */\n    function createUnbackedDebt(address debtDestination, address coinDestination, uint rad) external;\n\n    // --- Rates ---\n    /**\n     * @notice Usually called by TaxCollector in order to accrue interest on a specific collateral type\n     * @param collateralType Collateral type we accrue interest for\n     * @param surplusDst Destination for amount of surplus created by applying the interest rate\n       to debt created by CDPs with 'collateralType'\n     * @param accumulatedRate Multiplier applied to the debtAmount in order to calculate the surplus\n     */\n    function updateAccumulatedRate(bytes32 collateralType, address surplusDst, int accumulatedRate) external;\n}\n"
    },
    "contracts/makerdao/interfaces/ITaxCollector.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\n/**\n * @title ITaxCollector\n **/\ninterface ITaxCollector {\n    /* ==================== EVENTS ==================== */\n    event DisableContract();\n\n    /* ==================== STRUCTS ==================== */\n\n    struct CollateralType {\n        uint256 stabilityFee;      // Collateral-specific, per-second stability fee contribution [ray]\n        uint256 latestUpdateTime;  // Time of last taxSingle [unix epoch time]\n    }\n\n\n    /* ==================== METHODS ==================== */\n\n    // --- Administration ---\n    function initializeCollateralType(bytes32 collateralType) external;\n    function modifyParameters(bytes32 collateralType, bytes32 what, uint data) external;\n    function modifyParameters(bytes32 what, uint data) external;\n    function modifyParameters(bytes32 what, address data) external;\n\n\n    // --- Stability Fee Collection ---\n    /**\n     * @notice Collect tax from a single collateral type\n     * @param collateralType Collateral type to tax\n     */\n    function taxSingle(bytes32 collateralType) external returns (uint rate);\n}\n"
    },
    "contracts/makerdao/utils/Math.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n\npragma solidity ^0.8.0;\n\nabstract contract Math {\n    uint256 constant ONE = 10 ** 27;\n    uint256 constant WAD = 10 ** 18;\n\n    /**\n    * @notice Calculates the sum of an unsigned integer and a signed integer\n    * @param  x Unsigned integer\n    * @param  y Signed integer\n    * @return z Unsigned sum of `x` and `y`\n    */\n    function _add(uint x, int y) internal pure returns (uint z) {\n        if (y >= 0) {\n            z = x + uint256(y);\n        } else {\n            z = x - uint256(-y);\n        }\n        require(y >= 0 || z <= x);\n        require(y <= 0 || z >= x);\n    }\n\n    /**\n    * @notice Calculates the substraction of an unsigned integer and a signed integer\n    * @param  x Unsigned integer\n    * @param  y Signed integer\n    * @return z Unsigned substraction of `x` and `y`\n    */\n    function _sub(uint x, int y) internal pure returns (uint z) {\n        if (y >= 0) {\n            z = x - uint256(y);\n        } else {\n            z = x + uint256(-y);\n        }\n        require(y <= 0 || z <= x);\n        require(y >= 0 || z >= x);\n    }\n    function _mul(uint x, int y) internal pure returns (int z) {\n        z = int(x) * y;\n        require(int(x) >= 0);\n        require(y == 0 || z / y == int(x));\n    }\n\n    function _rdiv(uint x, uint y) internal pure returns (uint z) {\n        z = _mul(x, ONE) / y;\n    }\n\n    function _add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x);\n    }\n    function _sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x);\n    }\n    function _mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x);\n    }\n\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = x <= y ? x : y;\n    }\n\n    function either(bool x, bool y) internal pure returns (bool z) {\n        assembly{ z := or(x, y)}\n    }\n    function both(bool x, bool y) internal pure returns (bool z) {\n        assembly{ z := and(x, y)}\n    }\n}\n"
    },
    "contracts/makerdao/utils/ProxyOwner.sol": {
      "content": "pragma solidity ^0.8.0;\n\nabstract contract ProxyOwner {\n    error InvalidProxyOwner();\n    error InvalidProxy();\n\n    // User through Proxy call exit function, so only owner can be the real user\n    modifier onlyProxyOwner(address user) {\n        // Check if msg.sender is contract\n        if (msg.sender.code.length == 0) revert InvalidProxy();\n\n        // Check if msg.sender's contract can get owner\n        (bool success, bytes memory data) = msg.sender.call(abi.encodeWithSignature(\"owner()\"));\n        if (!success) revert InvalidProxy();\n        address proxyOwner = abi.decode(data, (address));\n\n        // Check Proxy owner is user\n        if (proxyOwner != user) revert InvalidProxyOwner();\n        _;\n    }\n}"
    },
    "contracts/periphery/contracts/access-control/SuAccessRoles.sol": {
      "content": "// SPDX-License-Identifier: BSL 1.1\n\npragma solidity ^0.8.0;\n\n/**\n * @title SuAccessRoles Library\n * @dev SuAuthenticated and SuAccessControlSingleton need to have this constants\n * Hierarchy:\n *      1. DAO - can give admins and system roles\n *      2.1. Admin - can set Alerters\n *      2.2. System - includes Minter, Liquidation, Reward and Disabler roles, don't have access to give some roles.\n *      3. Alerter - can send alerts and trigger rate limits, don't have access to give some roles.\n */\nabstract contract SuAccessRoles {\n    bytes32 public constant ADMIN_ROLE = 0x00;\n\n    bytes32 public constant DAO_ROLE = keccak256(\"DAO_ROLE\");\n\n    bytes32 public constant ALERTER_ROLE = keccak256(\"ALERTER_ROLE\");\n\n    // system roles\n    bytes32 public constant MINT_ACCESS_ROLE = keccak256(\"MINT_ACCESS_ROLE\");\n    bytes32 public constant LIQUIDATION_ACCESS_ROLE = keccak256(\"LIQUIDATION_ACCESS_ROLE\");\n    bytes32 public constant REWARD_ACCESS_ROLE = keccak256(\"REWARD_ACCESS_ROLE\");\n    // bytes32 public constant SYSTEM_ROLE = keccak256(\"SYSTEM_ROLE\");\n    bytes32 public constant DISABLER_ROLE = keccak256(\"DISABLER_ROLE\");\n    bytes32 public constant CDP_ACCESS_ROLE = keccak256(\"CDP_ACCESS_ROLE\");\n    bytes32 public constant VOTING_ESCROW_ROLE = keccak256(\"VOTING_ESCROW_ROLE\");\n    bytes32 public constant PROXY_ACTIONS_ROLE = keccak256(\"PROXY_ACTIONS_ROLE\");\n}\n"
    },
    "contracts/periphery/contracts/access-control/SuAuthenticatedNonUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: BSL 1.1\n\npragma solidity ^0.8.0;\n\nimport \"../interfaces/access-control/ISuAccessControl.sol\";\nimport \"./SuAccessRoles.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport \"hardhat/console.sol\";\n\n/**\n * @title SuAuthenticated\n * @dev other contracts should inherit to be authenticated.\n * The address of SuAccessControlSingleton should be one for all contract that inherits SuAuthenticated\n */\nabstract contract SuAuthenticatedNonUpgradeable is SuAccessRoles, IERC165 {\n    ISuAccessControl public ACCESS_CONTROL_SINGLETON;\n\n    error OnlyDAOError();\n    error OnlyAdminError();\n    error OnlyAlerterError();\n    error OnlyVaultAccessError();\n    error OnlyLiquidationAccessError();\n    error OnlyMintAccessError();\n    error OnlyRewardAccessError();\n    error OnlyDisablerAccessError();\n    error OnlyVotingEscrowError();\n    error OnlyProxyActionsError();\n    error OnlyRoleError();\n    error OnlyCDPAccessError();\n    error BadAccessControlSingleton();\n\n    constructor (address _accessControlSingleton) internal {\n        ACCESS_CONTROL_SINGLETON = ISuAccessControl(_accessControlSingleton);\n        if (\n            _accessControlSingleton == address(0) ||\n            !ISuAccessControl(_accessControlSingleton).supportsInterface(type(IAccessControlUpgradeable).interfaceId)\n        ) revert BadAccessControlSingleton();\n    }\n\n    /** CORE ROLES */\n\n    modifier onlyDAO() {\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(DAO_ROLE, msg.sender)) revert OnlyDAOError();\n        _;\n    }\n\n    modifier onlyAdmin() {\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(ADMIN_ROLE, msg.sender)) revert OnlyAdminError();\n        _;\n    }\n\n    modifier onlyAlerter() {\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(ALERTER_ROLE, msg.sender)) revert OnlyAlerterError();\n        _;\n    }\n\n    /** SYSTEM ROLES */\n\n    modifier onlyLiquidationAccess() {\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(LIQUIDATION_ACCESS_ROLE, msg.sender)) revert OnlyLiquidationAccessError();\n        _;\n    }\n\n    modifier onlyMintAccess() {\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(MINT_ACCESS_ROLE, msg.sender)) revert OnlyMintAccessError();\n        _;\n    }\n\n    modifier onlyRewardAccess() {\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(REWARD_ACCESS_ROLE, msg.sender)) revert OnlyRewardAccessError();\n        _;\n    }\n\n    modifier onlyRewardOrAdminAccess() {\n        if (\n            !ACCESS_CONTROL_SINGLETON.hasRole(REWARD_ACCESS_ROLE, msg.sender) &&\n        !ACCESS_CONTROL_SINGLETON.hasRole(ADMIN_ROLE, msg.sender)\n        ) revert OnlyRewardAccessError();\n        _;\n    }\n\n    // @notice This modifier check if user/contract have access to \"disable\" contracts.\n    // All main contracts in our lending protocol have disableContract() method that stops contracts main functions.\n    modifier onlyDisablerAccess() {\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(DISABLER_ROLE, msg.sender)) revert OnlyDisablerAccessError();\n        _;\n    }\n\n    modifier onlyCDPAccess() {\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(CDP_ACCESS_ROLE, msg.sender)) revert OnlyCDPAccessError();\n        _;\n    }\n\n    modifier onlyVotingEscrow() {\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(VOTING_ESCROW_ROLE, msg.sender)) revert OnlyVotingEscrowError();\n        _;\n    }\n\n    modifier onlyProxyActions() {\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(PROXY_ACTIONS_ROLE, msg.sender)) revert OnlyProxyActionsError();\n        _;\n    }\n\n    // syntax sugar under ACCESS_CONTROL_SINGLETON\n    modifier onlyRole(bytes32 role) {\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(role, msg.sender)) revert OnlyRoleError();\n        _;\n    }\n\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return ACCESS_CONTROL_SINGLETON.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "contracts/periphery/contracts/interfaces/access-control/ISuAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\";\nimport \"../../access-control/SuAccessRoles.sol\";\n\n/**\n * @notice Access control for contracts\n * @dev External interface of AccessControl declared to support ERC165 detection.\n **/\ninterface ISuAccessControl is IAccessControlUpgradeable, IERC165Upgradeable {\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\n}\n"
    },
    "contracts/periphery/contracts/interfaces/oracle/ISuOracle.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\n// solhint-disable compiler-version\npragma solidity >=0.7.6;\n\ninterface ISuOracle {\n    /**\n     * @notice WARNING! Read this description very carefully!\n     *     function getFiatPrice1e18(address asset) returns (uint256) that:\n     *         basicAmountOfAsset * getFiatPrice1e18(asset) / 1e18 === $$ * 1e18\n     *     in other words, it doesn't matter what's the erc20.decimals is,\n     *     you just multiply token balance in basic units on value from oracle and get dollar amount multiplied on 1e18.\n     *\n     * different assets have different deviation threshold (errors)\n     *     for wBTC it's <= 0.5%, read more https://data.chain.link/ethereum/mainnet/crypto-usd/btc-usd\n     *     for other asset is can be larger based on particular oracle implementation.\n     *\n     * examples:\n     *     market price of btc = $30k,\n     *     for 0.1 wBTC the unit256 amount is 0.1 * 1e18\n     *     0.1 * 1e18 * (price1e18 / 1e18) == $3000 == uint256(3000*1e18)\n     *     => price1e18 = 30000 * 1e18;\n     *\n     *     market price of usdt = $0.97,\n     *     for 1 usdt uint256 = 1 * 1e6\n     *     so 1*1e6 * price1e18 / 1e18 == $0.97 == uint256(0.97*1e18)\n     *     => 1*1e6 * (price1e18 / 1e18) / (0.97*1e18)   = 1\n     *     =>  price1e18 = 0.97 * (1e18/1e6) * 1e18\n     *\n     *    assume market price of wBTC = $31,503.77, oracle error = $158\n     *\n     *     case #1: small amount of wBTC\n     *         we have 0.0,000,001 wBTC that is worth v = $0.00315 ± $0.00001 = 0.00315*1e18 = 315*1e13 ± 1*1e13\n     *         actual balance on the asset b = wBTC.balanceOf() =  0.0000001*1e18 = 1e11\n     *         oracle should return or = oracle.getFiatPrice1e18(wBTC) <=>\n     *         <=> b*or = v => v/b = 315*1e13 / 1e11 = 315*1e2 ± 1e2\n     *         error = or.error * b = 1e2 * 1e11 = 1e13 => 1e13/1e18 usd = 1e-5 = 0.00001 usd\n     *\n     *     case #2: large amount of wBTC\n     *         v = 2,000,000 wBTC = $31,503.77 * 2m ± 158*2m = $63,007,540,000 ± $316,000,000 = 63,007*1e24 ± 316*1e24\n     *         for calc convenience we increase error on 0.05 and have v = 63,000*24 ± 300*1e24 = (630 ± 3)*1e26\n     *         b = 2*1e6 * 1e18 = 2*1e24\n     *         or = v/b = (630 ± 3)*1e26 / 2*1e24 = 315*1e2 ± 1.5*1e2\n     *         error = or.error * b = 1.5*100 * 2*1e24 = 3*1e26 = 3*1e8*1e18 = $300,000,000 ~ $316,000,000\n     *\n     *     assume the market price of USDT = $0.97 ± $0.00485,\n     *\n     *     case #3: little amount of USDT\n     *         v = USDT amount 0.005 = 0.005*(0.97 ± 0.00485) = 0.00485*1e18 ± 0.00002425*1e18 = 485*1e13 ± 3*1e13\n     *         we rounded error up on (3000-2425)/2425 ~= +24% for calculation convenience.\n     *         b = USDT.balanceOf() = 0.005*1e6 = 5*1e3\n     *         b*or = v => or = v/b = (485*1e13 ± 3*1e13) / 5*1e3 = 970*1e9 ± 6*1e9\n     *         error = 6*1e9 * 5*1e3 / 1e18 = 30*1e12/1e18 = 3*1e-5 = $0,00005\n     *\n     *     case #4: lot of USDT\n     *         v = we have 100,000,000,000 USDT = $97B = 97*1e9*1e18 ± 0.5*1e9*1e18\n     *         b = USDT.balanceOf() = 1e11*1e6 = 1e17\n     *         or = v/b = (97*1e9*1e18 ± 0.5*1e9*1e18) / 1e17 = 970*1e9 ± 5*1e9\n     *         error = 5*1e9 * 1e17 = 5*1e26 = 0.5 * 1e8*1e18\n     *\n     * @param asset - address of erc20 token contract\n     * @return usdPrice1e18 such that asset.balanceOf() * getFiatPrice1e18(asset) / 1e18 == $$ * 1e18\n     **/\n    function getFiatPrice1e18(address asset) external view returns (uint256);\n}\n"
    },
    "contracts/periphery/contracts/interfaces/oracle/ISuOracleAggregator.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport \"./ISuOracle.sol\";\n\ninterface ISuOracleAggregator is ISuOracle {\n    /* ===================== STRUCT ===================== */\n    struct AssetLimitation {\n        uint256 lowerBound;\n        uint256 upperBound;\n    }\n\n    /* ===================== EVENTS ===================== */\n    event OracleLowerBoundWarning(uint256 price);\n    event OracleUpperBoundWarning(uint256 price);\n\n    /* ===================== ERRORS ===================== */\n    error NoOracleFound(address asset);\n    error NoOracleImplementation();\n    error BadOracleId();\n\n    /* ====================== VARS ====================== */\n    function assetToOracle (address asset) external view returns ( uint256 );\n    function oracleImplementations (uint256 oracleId) external view returns ( ISuOracle );\n\n    /* ==================== METHODS ==================== */\n\n    /**\n    * @notice Like getFiatPrice1e18 from ISuOracle, but also checks bounds and emit event if there is an error.\n    * We should call it in non-view method where we need safePrice from Oracle.\n    * @param asset - address of asset\n    **/\n    function getSafeFiatPrice1e18(address asset) external returns (uint256);\n\n    /**\n    * @notice Change lower bound of asset\n    * @param asset - address of asset\n    * @param newLowerBound - new value of lower bound\n    **/\n    function setLowerBound(address asset, uint256 newLowerBound) external;\n\n    /**\n    * @notice Change upper bound of asset\n    * @param asset - address of asset\n    * @param newUpperBound - new value of upper bound\n    **/\n    function setUpperBound(address asset, uint256 newUpperBound) external;\n\n    /**\n       * @notice assign address of oracle implementation to the oracleId\n    * @param oracleId - number 0,1, etc to assign the oracle\n    * @param oracleImplementation - an address with ISuOracle implementation contract\n    **/\n    function setOracleImplementation(uint256 oracleId, ISuOracle oracleImplementation) external;\n\n    /**\n    * @notice specify what oracleId should be used for each assets. Checks that oracleId has an implementation\n    **/\n    function setOracleIdForAssets(address[] memory assets, uint256 oracleId) external;\n\n    /* ==================== VIEW METHODS ==================== */\n    /**\n    * @return true if oracle is set to this asset, false otherwise\n    **/\n    function hasPriceForAsset(address asset) external view returns(bool);\n}\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\nlibrary console {\n    address constant CONSOLE_ADDRESS =\n        0x000000000000000000636F6e736F6c652e6c6f67;\n\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\n        address consoleAddress = CONSOLE_ADDRESS;\n        /// @solidity memory-safe-assembly\n        assembly {\n            pop(\n                staticcall(\n                    gas(),\n                    consoleAddress,\n                    add(payload, 32),\n                    mload(payload),\n                    0,\n                    0\n                )\n            )\n        }\n    }\n\n    function _castToPure(\n      function(bytes memory) internal view fnIn\n    ) internal pure returns (function(bytes memory) pure fnOut) {\n        assembly {\n            fnOut := fnIn\n        }\n    }\n\n    function _sendLogPayload(bytes memory payload) internal pure {\n        _castToPure(_sendLogPayloadImplementation)(payload);\n    }\n\n    function log() internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log()\"));\n    }\n\n    function logInt(int256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(int256)\", p0));\n    }\n\n    function logUint(uint256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n    }\n\n    function logString(string memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function logBool(bool p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function logAddress(address p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function logBytes(bytes memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n    }\n\n    function logBytes1(bytes1 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n    }\n\n    function logBytes2(bytes2 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n    }\n\n    function logBytes3(bytes3 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n    }\n\n    function logBytes4(bytes4 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n    }\n\n    function logBytes5(bytes5 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n    }\n\n    function logBytes6(bytes6 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n    }\n\n    function logBytes7(bytes7 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n    }\n\n    function logBytes8(bytes8 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n    }\n\n    function logBytes9(bytes9 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n    }\n\n    function logBytes10(bytes10 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n    }\n\n    function logBytes11(bytes11 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n    }\n\n    function logBytes12(bytes12 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n    }\n\n    function logBytes13(bytes13 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n    }\n\n    function logBytes14(bytes14 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n    }\n\n    function logBytes15(bytes15 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n    }\n\n    function logBytes16(bytes16 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n    }\n\n    function logBytes17(bytes17 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n    }\n\n    function logBytes18(bytes18 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n    }\n\n    function logBytes19(bytes19 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n    }\n\n    function logBytes20(bytes20 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n    }\n\n    function logBytes21(bytes21 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n    }\n\n    function logBytes22(bytes22 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n    }\n\n    function logBytes23(bytes23 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n    }\n\n    function logBytes24(bytes24 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n    }\n\n    function logBytes25(bytes25 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n    }\n\n    function logBytes26(bytes26 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n    }\n\n    function logBytes27(bytes27 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n    }\n\n    function logBytes28(bytes28 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n    }\n\n    function logBytes29(bytes29 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n    }\n\n    function logBytes30(bytes30 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n    }\n\n    function logBytes31(bytes31 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n    }\n\n    function logBytes32(bytes32 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n    }\n\n    function log(uint256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n    }\n\n    function log(string memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function log(bool p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function log(address p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function log(uint256 p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256)\", p0, p1));\n    }\n\n    function log(uint256 p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string)\", p0, p1));\n    }\n\n    function log(uint256 p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool)\", p0, p1));\n    }\n\n    function log(uint256 p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address)\", p0, p1));\n    }\n\n    function log(string memory p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256)\", p0, p1));\n    }\n\n    function log(string memory p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n    }\n\n    function log(string memory p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n    }\n\n    function log(string memory p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n    }\n\n    function log(bool p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256)\", p0, p1));\n    }\n\n    function log(bool p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n    }\n\n    function log(bool p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n    }\n\n    function log(bool p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n    }\n\n    function log(address p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256)\", p0, p1));\n    }\n\n    function log(address p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n    }\n\n    function log(address p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n    }\n\n    function log(address p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1
    },
    "viaIR": true,
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}