{
  "address": "0x3A57f3F5DeCE8C61302FC02AC58766f03dfDB2D5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "safeEngine_",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "collateralType_",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "collateral_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "usr",
          "type": "address"
        }
      ],
      "name": "AddAuthorization",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "DisableContract",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "usr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "Exit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "usr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "Join",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "usr",
          "type": "address"
        }
      ],
      "name": "RemoveAuthorization",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "usr",
          "type": "address"
        }
      ],
      "name": "addAuthorization",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "authorizedAccounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateral",
      "outputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralType",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractEnabled",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disableContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "usr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "exit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "usr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "join",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "usr",
          "type": "address"
        }
      ],
      "name": "removeAuthorization",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardChef",
      "outputs": [
        {
          "internalType": "contract IRewardChefV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "safeEngine",
      "outputs": [
        {
          "internalType": "contract ISafeEngine",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "6e931fdc81ca54b8c04b70713702c588",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"safeEngine_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"collateralType_\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"collateral_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"AddAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DisableContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Exit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Join\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"RemoveAuthorization\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"addAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedAccounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateral\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralType\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractEnabled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"join\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"removeAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardChef\",\"outputs\":[{\"internalType\":\"contract IRewardChefV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeEngine\",\"outputs\":[{\"internalType\":\"contract ISafeEngine\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This adapter assumes that the collateral has 18 decimals\",\"kind\":\"dev\",\"methods\":{\"exit(address,uint256)\":{\"params\":{\"usr\":\"Account to which we transfer the collateral\",\"wad\":\"Amount of collateral to transfer to 'account' (represented as a number with 18 decimals)*\"}},\"join(address,uint256)\":{\"params\":{\"usr\":\"Account from which we transferFrom collateral and add it in the system\",\"wad\":\"Amount of collateral to transfer in the system (represented as a number with 18 decimals)*\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"exit(address,uint256)\":{\"notice\":\"Exit collateral from the system\"},\"join(address,uint256)\":{\"notice\":\"Join collateral in the system\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/makerdao/core/adapters/CollateralJoin.sol\":\"CollateralJoin\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"contracts/interfaces/IRewardChefV2.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"../periphery/contracts/interfaces/oracle/ISuOracle.sol\\\";\\n\\n/**\\n * @title RewardChefV2\\n * @notice fork of MasterChefV2(13/05/2023) https://etherscan.io/address/0xef0881ec094552b2e128cf945ef17a6752b4ec5d#code\\n * @dev This contract is based on MVC2, but uses \\\"virtual\\\" balances instead of storing real ERC20 tokens\\n * and uses address of this assets instead of pid.\\n * Rewards that are distributed have to be deposited using refillReward(uint256 amount, uint64 endBlock)\\n **/\\ninterface IRewardChefV2 {\\n    /**\\n      * @notice Info of each reward pool.\\n      * @param accSushiPerShare -\\n      * @param lastRewardBlock -\\n      * @param allocPoint - The amount of allocation points assigned to the pool.\\n      * Also known as the amount of REWARD_TOKEN to distribute per block.\\n      * @param lpSupply -\\n     **/\\n    struct PoolInfo {\\n        uint128 accSushiPerShare;\\n        uint64 lastRewardBlock;\\n        uint64 allocPoint;\\n        uint256 lpSupply;\\n    }\\n\\n    /**\\n      * @notice Info of each user.\\n      * @param amount - token amount the user has provided.\\n      * @param rewardDebt - The amount of rewards entitled to the user.\\n      * @param multiplicator1e18 - deposit amount multiplicator for current user, that depends on his lockupPeriod\\n      * @param lockupPeriodSeconds - users lockupPeriod in seconds\\n      * @param lockupStartTimestamp - timestamp when user start lockup\\n     **/\\n    struct UserInfo {\\n        uint256 amount;\\n        int256 rewardDebt;\\n\\n        uint256 multiplicator1e18;\\n        uint256 lockupPeriodSeconds;\\n        uint256 lockupStartTimestamp;\\n    }\\n\\n    /**\\n      * @notice Lockup info struct for a view method getPossibleLockupPeriodsSeconds()\\n      * @param lockupPeriodSeconds - available lockupPeriod in seconds\\n      * @param multiplicator1e18 - deposit amount multiplicator for this lockup period\\n     **/\\n    struct ILockupPeriod {\\n        uint256 lockupPeriodSeconds;\\n        uint256 multiplicator1e18;\\n    }\\n\\n    // =======================================EVENTS=============================================\\n    event VirtualDeposit(address indexed user, address indexed asset, uint256 amount);\\n    event VirtualWithdraw(address indexed user, address indexed asset, uint256 amount);\\n    event ResetAmount(\\n        address indexed user, address indexed asset, address indexed to, uint256 amount, uint256 lockupPeriodSeconds\\n    );\\n    event Harvest(address indexed user, address indexed asset, uint256 amount);\\n    event LogPoolAddition(address indexed asset, uint256 allocPoint);\\n    event LogSetPool(address indexed asset, uint256 allocPoint);\\n    event LogUpdatePool(address indexed asset, uint64 lastRewardBlock, uint256 lpSupply, uint256 accSushiPerShare);\\n\\n    // =======================================ERRORS=============================================\\n    error BadEndBlockForRefill();\\n    error ZeroLockupPeriod();\\n    error ZeroMultiplicator();\\n    error PoolExist();\\n    error PoolNotExist();\\n    error DifferentLockup();\\n    error HarvestBeforeLockup();\\n\\n    // =========================================VARS=============================================\\n    /**\\n     *  @dev Total allocation points. Must be the sum of all allocation points in all pools.\\n     * The good practice, to always keep this variable is equal 1000.\\n     */\\n    function totalAllocPoint() external view returns ( uint256 );\\n\\n    // =======================================REWARDER=============================================\\n    // solhint-disable-next-line func-name-mixedcase\\n    function REWARD_TOKEN() external view returns ( IERC20Upgradeable );\\n    // solhint-disable-next-line func-name-mixedcase\\n    function ORACLE() external view returns ( ISuOracle );\\n    function rewardPerBlock() external view returns ( uint256 );\\n    function rewardEndBlock() external view returns ( uint256 );\\n\\n    /**\\n     * @dev admin transfer REWARD_TOKEN to contract to increase rewards per block\\n     */\\n    function refillReward(uint256 amount, uint64 endBlock) external;\\n    /**\\n     * @dev returns total amount of rewards allocated to the all pools on the rage (startBlock, endBlock]\\n     * i.e. excluding startBlock but including endBlock\\n     */\\n    function rewardsBetweenBlocks(uint256 startBlock, uint256 endBlock) external returns ( uint256 );\\n\\n    //=======================================LOCKUP LOGIC===========================================\\n    /**\\n     * @notice view method that return all lockupPeriods in ILockupPeriod struct\\n     */\\n    function getPossibleLockupPeriodsSeconds() external view returns (ILockupPeriod[] memory);\\n\\n    /**\\n     * @notice method to add new LockupPeriods with it multiplicator\\n     * @dev If multiplicator1e18 == 0 => we remove lockupPeriodSeconds else we add it\\n     * @param lockupPeriodSeconds Amount of seconds of lockupPeriod we want to add/remove\\n     * @param multiplicator1e18 Multiplicator for that lockupPeriod\\n     */\\n    function setPossibleLockupPeriodsSeconds(uint256 lockupPeriodSeconds, uint256 multiplicator1e18) external;\\n\\n    //================================CORE REWARD CHEF METHODS======================================\\n    /**\\n     * @notice Add a new reward pool. Can only be called by the admin. Can't add the same LP token more than once.\\n     * @param allocPoint AP of the new pool.\\n     * @param _asset Address of the ERC-20 token.\\n     */\\n    function add(uint256 allocPoint, address _asset) external;\\n\\n    /**\\n     * @notice Update the given pool's REWARD_TOKEN allocation point. Can only be called by the admin.\\n     * Can't be called for asset that was not added by add() function.\\n     * @param _asset Address of the ERC-20 token.\\n     * @param _allocPoint New AP of the pool.\\n     */\\n    function set(address _asset, uint256 _allocPoint) external;\\n\\n    /**\\n     * @notice View function to see pending REWARD_TOKEN on frontend.\\n     * @param _asset Address of the ERC-20 token.\\n     * @param _user Address of user.\\n     * @return pending REWARD_TOKEN reward for a given user.\\n     */\\n    function pendingSushi(address _asset, address _user) external view returns ( uint256 );\\n\\n    /**\\n     * @notice Update reward variables of the given pool.\\n     * @param asset Asset address\\n     * @return updated pool info\\n     */\\n    function updatePool(address asset) external returns ( PoolInfo memory );\\n\\n    /**\\n     * @notice Update reward variables for all pools. Be careful of gas spending!\\n     */\\n    function updateAllPools() external;\\n\\n    /**\\n     * @notice analogues to MCV2 Deposit method, but can be called only by trusted address (onlyRewardAccess)\\n     * that is trusted to honestly calc how many \\\"virtual\\\" tokens have to be allocated for each user.\\n     * @param asset Asset address\\n     * @param to User for whom we will increase the virtual balance\\n     * @param amountEDecimal Quantity without taking into account the multiplier that we will add\\n     * @param lockupPeriodSeconds Current deposit lockup period. Can't increase amount with 2 different lockupPeriods\\n     */\\n    function increaseAmount(address asset, address to, uint256 amountEDecimal, uint256 lockupPeriodSeconds) external;\\n\\n    /**\\n     * @notice Analogues to MVC2 Withdraw method, that can be called only by trusted address (onlyRewardAccess)\\n     * that is trusted to honestly calc how many \\\"virtual\\\" tokens have to be allocated for each user.\\n     * @param asset Asset address\\n     * @param to User for whom we will subtract the virtual balance\\n     * @param amountEDecimal Quantity without taking into account the multiplier that we will subtract\\n     */\\n    function decreaseAmount(address asset, address to, uint256 amountEDecimal) external;\\n\\n    /**\\n     * @notice View method that return penalty for user that will decrease amount by {amountEDecimal}\\n     * @param asset Asset address\\n     * @param to User who will decrease his deposit amount\\n     * @param amountEDecimal Quantity without taking into account the multiplier that we will subtract\\n     */\\n    function getDecreaseAmountRewardPenalty(\\n        address asset,\\n        address to,\\n        uint256 amountEDecimal\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Harvest proceeds for transaction sender to {to}.\\n     * @dev Here we send msg.sender pendingSushi to {to} and update lockup period.\\n     * @param asset Asset address\\n     * @param to Receiver of REWARD_TOKEN rewards.\\n     */\\n    function harvest(address asset, address to, uint256 newLockupPeriodSeconds) external;\\n\\n    // TODO: check for exploits\\n    /**\\n     * @notice Withdraw without caring about rewards. EMERGENCY ONLY.\\n     * @param asset Asset address\\n     * @param to The address of the user whose information will be cleared\\n     */\\n    function resetAmount(address asset, address to) external;\\n\\n    //================================VIEW METHODS======================================\\n    /**\\n     * @notice Method for frontend that return pool APR\\n     * @param asset Asset address\\n     */\\n    function getPoolApr(address asset) external view returns (uint256);\\n\\n    /**\\n     * @notice Reward tokens can be locked for certain period of time.\\n     * So user have to wait until at least timestamp to be able to harvest them.\\n     * There's no lock or any restriction on withdrawing principle.\\n     * This function return end timestamp for that lock.\\n     * @param asset Asset address\\n     * @param user User address\\n     */\\n    function getHarvestLockupEndTimestamp(address asset, address user) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc03f1bb9765cbe888e07c506481afe4c17e46b22a71f6e955ce65e1427ad5c40\",\"license\":\"UNLICENSED\"},\"contracts/makerdao/core/adapters/CollateralJoin.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/ICollateralJoin.sol\\\";\\nimport \\\"../../interfaces/ISafeEngine.sol\\\";\\nimport \\\"../../../interfaces/IRewardChefV2.sol\\\";\\n\\n// CHANGED: In CollateralJoin (GemJoin) I only added events.\\n// Added rewardChef and increaseAmount/decreaseAmount in join/exit functions\\n\\n/// @dev This adapter assumes that the collateral has 18 decimals\\ncontract CollateralJoin is ICollateralJoin {\\n    // --- Auth ---\\n    mapping (address => uint) public authorizedAccounts;\\n    function addAuthorization(address usr) external isAuthorized {\\n        authorizedAccounts[usr] = 1;\\n        emit AddAuthorization(usr);\\n    }\\n    function removeAuthorization(address usr) external isAuthorized {\\n        authorizedAccounts[usr] = 0;\\n        emit RemoveAuthorization(usr);\\n    }\\n    modifier isAuthorized {\\n        require(authorizedAccounts[msg.sender] == 1, \\\"CollateralJoin/not-authorized\\\");\\n        _;\\n    }\\n\\n    IRewardChefV2 public rewardChef;\\n    ISafeEngine public safeEngine;\\n    bytes32 public collateralType;\\n    IERC20Metadata public collateral;      // Actual collateral token contract\\n    uint    public decimals;        // How many decimals the collateral token has\\n    uint    public contractEnabled; // Whether this adapter contract is enabled or not\\n\\n    // Events\\n    event AddAuthorization(address indexed usr);\\n    event RemoveAuthorization(address indexed usr);\\n    event Join(address indexed usr, uint256 wad);\\n    event Exit(address indexed usr, uint256 wad);\\n\\n    constructor(address safeEngine_, bytes32 collateralType_, address collateral_) public {\\n        authorizedAccounts[msg.sender] = 1;\\n        contractEnabled = 1;\\n        safeEngine = ISafeEngine(safeEngine_);\\n        collateralType = collateralType_;\\n        collateral = IERC20Metadata(collateral_);\\n        decimals = collateral.decimals();\\n        emit AddAuthorization(msg.sender);\\n    }\\n    function disableContract() external isAuthorized {\\n        contractEnabled = 0;\\n        emit DisableContract();\\n    }\\n\\n    function join(address usr, uint wad) external {\\n        require(contractEnabled == 1, \\\"CollateralJoin/not-contractEnabled\\\");\\n        require(int(wad) >= 0, \\\"CollateralJoin/overflow\\\");\\n        safeEngine.modifyCollateralBalance(collateralType, usr, int(wad));\\n        rewardChef.increaseAmount(address(collateral), usr, wad, 1); // As default we set lockupPeriodSeconds to 1\\n        require(collateral.transferFrom(msg.sender, address(this), wad), \\\"CollateralJoin/failed-transfer\\\");\\n        emit Join(usr, wad);\\n    }\\n\\n    function exit(address usr, uint wad) external {\\n        require(wad <= 2 ** 255, \\\"CollateralJoin/overflow\\\");\\n        safeEngine.modifyCollateralBalance(collateralType, msg.sender, -int(wad));\\n        rewardChef.decreaseAmount(address(collateral), usr, wad);\\n        require(collateral.transfer(usr, wad), \\\"CollateralJoin/failed-transfer\\\");\\n        emit Exit(usr, wad);\\n    }\\n}\\n\",\"keccak256\":\"0x7c0564a7bc1dce63a6185f10162159ec6bbd06adb4e279cf013bc0f66d38f631\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/makerdao/interfaces/IAuth.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\ninterface IAuth {\\n    function addAuthorization(address usr) external;\\n    function removeAuthorization(address usr) external;\\n}\\n\",\"keccak256\":\"0x0ba65ef98ccabdaae896001950518dbbfbea94c2f3ac84b064abe0cbeddd9b89\",\"license\":\"UNLICENSED\"},\"contracts/makerdao/interfaces/IAuthWithContractEnabled.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport {IAuth} from \\\"./IAuth.sol\\\";\\n\\ninterface IAuthWithContractEnabled is IAuth {\\n    event DisableContract();\\n\\n    function disableContract() external;\\n}\\n\",\"keccak256\":\"0x2c6b500483ce79cf7f277949eed8f8f1322227c031eb504ccf316b3ad49aa49c\",\"license\":\"UNLICENSED\"},\"contracts/makerdao/interfaces/ICollateralJoin.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {IAuthWithContractEnabled} from \\\"./IAuthWithContractEnabled.sol\\\";\\n\\n/**\\n * @title ITaxCollector\\n **/\\ninterface ICollateralJoin is IAuthWithContractEnabled {\\n    /* ==================== METHODS ==================== */\\n\\n    function collateral() external view returns(IERC20Metadata);\\n\\n    /**\\n    * @notice Join collateral in the system\\n    * @param usr Account from which we transferFrom collateral and add it in the system\\n    * @param wad Amount of collateral to transfer in the system (represented as a number with 18 decimals)\\n    **/\\n    function join(address usr, uint wad) external;\\n\\n    /**\\n    * @notice Exit collateral from the system\\n    * @param usr Account to which we transfer the collateral\\n    * @param wad Amount of collateral to transfer to 'account' (represented as a number with 18 decimals)\\n    **/\\n    function exit(address usr, uint wad) external;\\n}\\n\",\"keccak256\":\"0xac3c5caf0b77793b80e69273531b93a40c60ac18532ac3e5a104c0cb13e03821\",\"license\":\"UNLICENSED\"},\"contracts/makerdao/interfaces/ISafeEngine.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// TODO: check how to operate with license and use one for all contracts\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title SafeEngine\\n * @notice The single source of truth for the Maker Protocol. It contains the accounting system of the core Vault,\\n * Internal StablePro balances, and collateral state. It houses the public interface for Vault management,\\n * allowing safe(= CDP or Vault) owners to adjust their Vault state balances. It also contains the public interface\\n * for Vault fungibility, allowing safe (Vault) owners to transfer, split, and merge Vaults.\\n * Excluding these interfaces, SAFEEngine is accessed through trusted smart contract modules.\\n **/\\ninterface ISafeEngine {\\n    /* ==================== METHODS ==================== */\\n\\n    // --- Data ---\\n    struct CollateralType {\\n        uint256 debtAmount;       // Total debt issued for this specific collateral type                          [wad]\\n        uint256 accumulatedRate;  // Accumulator for interest accrued on this collateral type                     [ray]\\n        uint256 safetyPrice;      // Floor price at which a CDP is allowed to generate debt                       [ray]\\n        uint256 debtCeiling;      // Maximum amount of debt that can be generated with this collateral type       [rad]\\n        uint256 debtFloor;        // Minimum amount of debt that must be generated by a CDP using this collateral [rad]\\n    }\\n    struct SAFE {\\n        uint256 lockedCollateral; // Total amount of collateral locked in a SAFE/CDP  [wad]\\n        uint256 generatedDebt;    // Total amount of debt generated by a SAFE/CDP     [wad]\\n    }\\n\\n    // --- VARS ---\\n\\n    function safes(bytes32, address) external view returns (uint, uint);\\n\\n    function collateralTypes(bytes32) external view returns (\\n        uint256 debtAmount,      // [wad]\\n        uint256 accumulatedRate, // [ray]\\n        uint256 safetyPrice,     // [ray]\\n        uint256 debtCeiling,     // [rad]\\n        uint256 debtFloor        // [rad]\\n    );\\n\\n    function tokenCollateral(bytes32, address) external view returns (uint256);\\n\\n    function coinBalance(address) external view returns (uint256);\\n\\n    function debtBalance(address) external view returns (uint256);\\n\\n    // --- Auth ---\\n    /**\\n     * @notice Allow an address to modify your CDP.\\n     * For example coinAdapter should be able to modify your CDP to withdraw all correctly.\\n     * @param usr Account to give CDP permissions to\\n     */\\n    function approveSAFEModification(address usr) external;\\n\\n    /**\\n     * @notice Deny an address the rights to modify your CDP\\n     * @param usr Account to give CDP permissions to\\n     */\\n    function denySAFEModification(address usr) external;\\n\\n    // --- Administration ---\\n\\n    function initializeCollateralType(bytes32 collateralType) external;\\n    // TODO: check why not to use strings instead of bytes32\\n    /**\\n     * @notice Method to modify some global variables\\n     * @param what - name of variable we want to change\\n     * @param data - new value of this variable\\n     */\\n    function modifyParameters(bytes32 what, uint data) external;\\n    /**\\n     * @notice Method to modify values in struct of collateralTypes\\n     * @param collateralType - collateral type we wand to modify (collateralTypes[collateralType])\\n     * @param what - name of variable in struct we want to change\\n     * @param data - new value of this variable\\n     */\\n    function modifyParameters(bytes32 collateralType, bytes32 what, uint data) external;\\n\\n    // --- Fungibility ---\\n    function modifyCollateralBalance(bytes32 collateralType, address usr, int256 wad) external;\\n    function transferCollateral(bytes32 collateralType, address src, address dst, uint256 wad) external;\\n    function transferInternalCoins(address src, address dst, uint256 rad) external;\\n\\n    // --- CDP Manipulation ---\\n    /**\\n     * @notice Add/remove collateral or put back/generate more debt in a CDP\\n     * @param collateralType Type of collateral to withdraw/deposit in and from the CDP\\n     * @param cdp Target CDP\\n     * @param collateralSource Account we take collateral from/put collateral into\\n     * @param debtDestination Account from which we credit/debit coins and debt\\n     * @param deltaCollateral Amount of collateral added/extract from the CDP\\n     * @param deltaDebt Amount of debt to generate/repay\\n     */\\n    function modifySAFECollateralization(\\n        bytes32 collateralType,\\n        address cdp,\\n        address collateralSource,\\n        address debtDestination,\\n        int deltaCollateral,\\n        int deltaDebt\\n    ) external;\\n\\n    // --- CDP Fungibility ---\\n    /**\\n     * @notice Transfer collateral and/or debt between CDPs\\n     * @param collateralType Collateral type transferred between CDPs\\n     * @param src Source CDP\\n     * @param dst Destination CDP\\n     * @param deltaCollateral Amount of collateral to take/add into src and give/take from dst\\n     * @param deltaDebt Amount of debt to take/add into src and give/take from dst\\n     */\\n    function transferSAFECollateralAndDebt(\\n        bytes32 collateralType,\\n        address src,\\n        address dst,\\n        int deltaCollateral,\\n        int deltaDebt\\n    ) external;\\n\\n    // --- CDP Confiscation ---\\n    /**\\n     * @notice Normally used by the LiquidationEngine in order to confiscate collateral and\\n       debt from a CDP and give them to someone else\\n     * @param collateralType Collateral type the CDP has locked inside\\n     * @param cdp Target CDP\\n     * @param collateralCounterparty Who we take/give collateral to\\n     * @param debtCounterparty Who we take/give debt to\\n     * @param deltaCollateral Amount of collateral taken/added into the CDP\\n     * @param deltaDebt Amount of debt taken/added into the CDP\\n     */\\n    function confiscateSAFECollateralAndDebt(\\n        bytes32 collateralType,\\n        address cdp,\\n        address collateralCounterparty,\\n        address debtCounterparty,\\n        int deltaCollateral,\\n        int deltaDebt\\n    ) external;\\n\\n    // --- Settlement ---\\n    /**\\n     * @notice Nullify an amount of coins with an equal amount of debt\\n     * @param rad Amount of debt & coins to destroy (expressed as a number with 45 decimals)\\n     */\\n    function settleDebt(uint rad) external;\\n\\n    /**\\n     * @notice Usually called by CoinSavingsAccount in order to create unbacked debt\\n     * @param debtDestination Usually AccountingEngine that can settle decreaseSoldAmount with surplus\\n     * @param coinDestination Usually CoinSavingsAccount who passes the new coins to depositors\\n     * @param rad Amount of debt to create (expressed as a number with 45 decimals)\\n     */\\n    function createUnbackedDebt(address debtDestination, address coinDestination, uint rad) external;\\n\\n    // --- Rates ---\\n    /**\\n     * @notice Usually called by TaxCollector in order to accrue interest on a specific collateral type\\n     * @param collateralType Collateral type we accrue interest for\\n     * @param surplusDst Destination for amount of surplus created by applying the interest rate\\n       to debt created by CDPs with 'collateralType'\\n     * @param accumulatedRate Multiplier applied to the debtAmount in order to calculate the surplus\\n     */\\n    function updateAccumulatedRate(bytes32 collateralType, address surplusDst, int accumulatedRate) external;\\n}\\n\",\"keccak256\":\"0x61c7e1efdad6fbaa3ac100eedcc48d62affe692ede6e9a15b0af0a9ab288444a\",\"license\":\"UNLICENSED\"},\"contracts/periphery/contracts/interfaces/oracle/ISuOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\n// solhint-disable compiler-version\\npragma solidity >=0.7.6;\\n\\ninterface ISuOracle {\\n    /**\\n     * @notice WARNING! Read this description very carefully!\\n     *     function getFiatPrice1e18(address asset) returns (uint256) that:\\n     *         basicAmountOfAsset * getFiatPrice1e18(asset) / 1e18 === $$ * 1e18\\n     *     in other words, it doesn't matter what's the erc20.decimals is,\\n     *     you just multiply token balance in basic units on value from oracle and get dollar amount multiplied on 1e18.\\n     *\\n     * different assets have different deviation threshold (errors)\\n     *     for wBTC it's <= 0.5%, read more https://data.chain.link/ethereum/mainnet/crypto-usd/btc-usd\\n     *     for other asset is can be larger based on particular oracle implementation.\\n     *\\n     * examples:\\n     *     market price of btc = $30k,\\n     *     for 0.1 wBTC the unit256 amount is 0.1 * 1e18\\n     *     0.1 * 1e18 * (price1e18 / 1e18) == $3000 == uint256(3000*1e18)\\n     *     => price1e18 = 30000 * 1e18;\\n     *\\n     *     market price of usdt = $0.97,\\n     *     for 1 usdt uint256 = 1 * 1e6\\n     *     so 1*1e6 * price1e18 / 1e18 == $0.97 == uint256(0.97*1e18)\\n     *     => 1*1e6 * (price1e18 / 1e18) / (0.97*1e18)   = 1\\n     *     =>  price1e18 = 0.97 * (1e18/1e6) * 1e18\\n     *\\n     *    assume market price of wBTC = $31,503.77, oracle error = $158\\n     *\\n     *     case #1: small amount of wBTC\\n     *         we have 0.0,000,001 wBTC that is worth v = $0.00315 \\u00b1 $0.00001 = 0.00315*1e18 = 315*1e13 \\u00b1 1*1e13\\n     *         actual balance on the asset b = wBTC.balanceOf() =  0.0000001*1e18 = 1e11\\n     *         oracle should return or = oracle.getFiatPrice1e18(wBTC) <=>\\n     *         <=> b*or = v => v/b = 315*1e13 / 1e11 = 315*1e2 \\u00b1 1e2\\n     *         error = or.error * b = 1e2 * 1e11 = 1e13 => 1e13/1e18 usd = 1e-5 = 0.00001 usd\\n     *\\n     *     case #2: large amount of wBTC\\n     *         v = 2,000,000 wBTC = $31,503.77 * 2m \\u00b1 158*2m = $63,007,540,000 \\u00b1 $316,000,000 = 63,007*1e24 \\u00b1 316*1e24\\n     *         for calc convenience we increase error on 0.05 and have v = 63,000*24 \\u00b1 300*1e24 = (630 \\u00b1 3)*1e26\\n     *         b = 2*1e6 * 1e18 = 2*1e24\\n     *         or = v/b = (630 \\u00b1 3)*1e26 / 2*1e24 = 315*1e2 \\u00b1 1.5*1e2\\n     *         error = or.error * b = 1.5*100 * 2*1e24 = 3*1e26 = 3*1e8*1e18 = $300,000,000 ~ $316,000,000\\n     *\\n     *     assume the market price of USDT = $0.97 \\u00b1 $0.00485,\\n     *\\n     *     case #3: little amount of USDT\\n     *         v = USDT amount 0.005 = 0.005*(0.97 \\u00b1 0.00485) = 0.00485*1e18 \\u00b1 0.00002425*1e18 = 485*1e13 \\u00b1 3*1e13\\n     *         we rounded error up on (3000-2425)/2425 ~= +24% for calculation convenience.\\n     *         b = USDT.balanceOf() = 0.005*1e6 = 5*1e3\\n     *         b*or = v => or = v/b = (485*1e13 \\u00b1 3*1e13) / 5*1e3 = 970*1e9 \\u00b1 6*1e9\\n     *         error = 6*1e9 * 5*1e3 / 1e18 = 30*1e12/1e18 = 3*1e-5 = $0,00005\\n     *\\n     *     case #4: lot of USDT\\n     *         v = we have 100,000,000,000 USDT = $97B = 97*1e9*1e18 \\u00b1 0.5*1e9*1e18\\n     *         b = USDT.balanceOf() = 1e11*1e6 = 1e17\\n     *         or = v/b = (97*1e9*1e18 \\u00b1 0.5*1e9*1e18) / 1e17 = 970*1e9 \\u00b1 5*1e9\\n     *         error = 5*1e9 * 1e17 = 5*1e26 = 0.5 * 1e8*1e18\\n     *\\n     * @param asset - address of erc20 token contract\\n     * @return usdPrice1e18 such that asset.balanceOf() * getFiatPrice1e18(asset) / 1e18 == $$ * 1e18\\n     **/\\n    function getFiatPrice1e18(address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa56b9cc86ef5935efecc276e6a3188d518f1a99cad960083a8de35849c997687\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x6080604081815234610135576060826109cd8038038091610020828561013a565b83398101031261013557600461003583610173565b6020809161004885838801519701610173565b336000908152808452868120600190819055600655600280546001600160a01b03199081166001600160a01b0395861617909155600398909855855490971691169081178455845163313ce56760e01b815293849182905afa9081156101285784916100eb575b5060ff91501660055551907f599a298163e1678bb1c676052a8930bf0b8a1261ed6e01b8a2391e55f7000102339180a261084590816101888239f35b905081813d8311610121575b610101818361013a565b8101031261011d575160ff8116810361011d5760ff90386100af565b8280fd5b503d6100f7565b50505051903d90823e3d90fd5b600080fd5b601f909101601f19168101906001600160401b0382119082101761015d57604052565b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036101355756fe608060408181526004908136101561001657600080fd5b600092833560e01c90816324ba58841461063c57508063313ce5671461061d57806335b28153146105b25780633b4da69f146103e957806341b3a0d9146103ca57806367aea313146103a1578063894ba8331461034e57806394f3f81d146102e0578063c9bc4384146102b7578063d8dfeb451461028f578063e824600f1461026c5763ef693bed146100a857600080fd5b346102415780600319360112610241576100c061066f565b6024359190600160ff1b6100d6818511156106d6565b6002546003546001600160a01b03929091831690861461025957908188923b156102415761012291839189838a8a5196879586948593632508c12f60e11b855285039133918501610768565b03925af1801561023757610245575b5081600154168287541690803b15610241578483918893838b6101678b5197889687958694636aed34f760e01b865285016107a1565b03925af180156102375761021f575b505080604460209287541693888651958694859363a9059cbb60e01b855216809a8401528860248401525af190811561021557916101e07f22d324652c93739755cf4581508b60875ebdd78c20c0cff5cf8e23452b299631949260209488916101e8575b506107c3565b51908152a280f35b6102089150853d811161020e575b6102008183610745565b810190610789565b386101da565b503d6101f6565b82513d87823e3d90fd5b6102289061071c565b610233578538610176565b8580fd5b85513d84823e3d90fd5b8280fd5b61024e9061071c565b610233578538610131565b634e487b7160e01b885260118752602488fd5b83823461028b578160031936011261028b576020906003549051908152f35b5080fd5b5090346102415782600319360112610241575490516001600160a01b03909116815260209150f35b83823461028b578160031936011261028b5760015490516001600160a01b039091168152602090f35b83823461028b57602036600319011261028b57816102fc61066f565b338252816020526103126001848420541461068a565b6001600160a01b03168082526020829052918120557f8834a87e641e9716be4f34527af5d23e11624f1ddeefede6ad75a9acfc31b9038280a280f35b83823461028b578160031936011261028b57600161037691338452836020528320541461068a565b806006557f2d4b4ecff7bd7503135271925520a2f6c0d98c9473ffc1a1e72c92502f51b25e8180a180f35b83823461028b578160031936011261028b5760025490516001600160a01b039091168152602090f35b83823461028b578160031936011261028b576020906006549051908152f35b50903461024157816003193601126102415761040361066f565b91602435916001600654036105655761041e858412156106d6565b6002546003546001600160a01b03918216908790823b1561028b5761045c9288838993895196879586948593632508c12f60e11b85528c8501610768565b03925af1801561055b57610548575b508581600154169582845416873b15610241578391608484928389519586948593633deffa8b60e21b85528b850152169b8c60248401528b6044840152600160648401525af180156102375790869493929161052f575b505091816104ee936020935416908886518096819582946323b872dd60e01b84523090339085016107a1565b03925af190811561021557916101e07fb4e09949657f21548b58afe74e7b86cd2295da5ff1598ae1e5faecb1cf19ca95949260209488916101e857506107c3565b61053b9192945061071c565b61023357839186386104c2565b6105549096919661071c565b943861046b565b84513d89823e3d90fd5b6020608492519162461bcd60e51b8352820152602260248201527f436f6c6c61746572616c4a6f696e2f6e6f742d636f6e7472616374456e61626c604482015261195960f21b6064820152fd5b83823461028b57602036600319011261028b5760016105cf61066f565b338452836020526105e482848620541461068a565b818060a01b031691828452836020528320557f599a298163e1678bb1c676052a8930bf0b8a1261ed6e01b8a2391e55f70001028280a280f35b83823461028b578160031936011261028b576020906005549051908152f35b92505034610241576020366003190112610241576020926001600160a01b0361066361066f565b16815280845220548152f35b600435906001600160a01b038216820361068557565b600080fd5b1561069157565b60405162461bcd60e51b815260206004820152601d60248201527f436f6c6c61746572616c4a6f696e2f6e6f742d617574686f72697a65640000006044820152606490fd5b156106dd57565b60405162461bcd60e51b8152602060048201526017602482015276436f6c6c61746572616c4a6f696e2f6f766572666c6f7760481b6044820152606490fd5b6001600160401b03811161072f57604052565b634e487b7160e01b600052604160045260246000fd5b601f909101601f19168101906001600160401b0382119082101761072f57604052565b9081526001600160a01b039091166020820152604081019190915260600190565b90816020910312610685575180151581036106855790565b6001600160a01b03918216815291166020820152604081019190915260600190565b156107ca57565b60405162461bcd60e51b815260206004820152601e60248201527f436f6c6c61746572616c4a6f696e2f6661696c65642d7472616e7366657200006044820152606490fdfea26469706673582212206aeff66b1d4d8f72ab3da8da74ee7ab514e2d26b53fce0696b5a4f5014be813a64736f6c63430008110033",
  "deployedBytecode": "0x608060408181526004908136101561001657600080fd5b600092833560e01c90816324ba58841461063c57508063313ce5671461061d57806335b28153146105b25780633b4da69f146103e957806341b3a0d9146103ca57806367aea313146103a1578063894ba8331461034e57806394f3f81d146102e0578063c9bc4384146102b7578063d8dfeb451461028f578063e824600f1461026c5763ef693bed146100a857600080fd5b346102415780600319360112610241576100c061066f565b6024359190600160ff1b6100d6818511156106d6565b6002546003546001600160a01b03929091831690861461025957908188923b156102415761012291839189838a8a5196879586948593632508c12f60e11b855285039133918501610768565b03925af1801561023757610245575b5081600154168287541690803b15610241578483918893838b6101678b5197889687958694636aed34f760e01b865285016107a1565b03925af180156102375761021f575b505080604460209287541693888651958694859363a9059cbb60e01b855216809a8401528860248401525af190811561021557916101e07f22d324652c93739755cf4581508b60875ebdd78c20c0cff5cf8e23452b299631949260209488916101e8575b506107c3565b51908152a280f35b6102089150853d811161020e575b6102008183610745565b810190610789565b386101da565b503d6101f6565b82513d87823e3d90fd5b6102289061071c565b610233578538610176565b8580fd5b85513d84823e3d90fd5b8280fd5b61024e9061071c565b610233578538610131565b634e487b7160e01b885260118752602488fd5b83823461028b578160031936011261028b576020906003549051908152f35b5080fd5b5090346102415782600319360112610241575490516001600160a01b03909116815260209150f35b83823461028b578160031936011261028b5760015490516001600160a01b039091168152602090f35b83823461028b57602036600319011261028b57816102fc61066f565b338252816020526103126001848420541461068a565b6001600160a01b03168082526020829052918120557f8834a87e641e9716be4f34527af5d23e11624f1ddeefede6ad75a9acfc31b9038280a280f35b83823461028b578160031936011261028b57600161037691338452836020528320541461068a565b806006557f2d4b4ecff7bd7503135271925520a2f6c0d98c9473ffc1a1e72c92502f51b25e8180a180f35b83823461028b578160031936011261028b5760025490516001600160a01b039091168152602090f35b83823461028b578160031936011261028b576020906006549051908152f35b50903461024157816003193601126102415761040361066f565b91602435916001600654036105655761041e858412156106d6565b6002546003546001600160a01b03918216908790823b1561028b5761045c9288838993895196879586948593632508c12f60e11b85528c8501610768565b03925af1801561055b57610548575b508581600154169582845416873b15610241578391608484928389519586948593633deffa8b60e21b85528b850152169b8c60248401528b6044840152600160648401525af180156102375790869493929161052f575b505091816104ee936020935416908886518096819582946323b872dd60e01b84523090339085016107a1565b03925af190811561021557916101e07fb4e09949657f21548b58afe74e7b86cd2295da5ff1598ae1e5faecb1cf19ca95949260209488916101e857506107c3565b61053b9192945061071c565b61023357839186386104c2565b6105549096919661071c565b943861046b565b84513d89823e3d90fd5b6020608492519162461bcd60e51b8352820152602260248201527f436f6c6c61746572616c4a6f696e2f6e6f742d636f6e7472616374456e61626c604482015261195960f21b6064820152fd5b83823461028b57602036600319011261028b5760016105cf61066f565b338452836020526105e482848620541461068a565b818060a01b031691828452836020528320557f599a298163e1678bb1c676052a8930bf0b8a1261ed6e01b8a2391e55f70001028280a280f35b83823461028b578160031936011261028b576020906005549051908152f35b92505034610241576020366003190112610241576020926001600160a01b0361066361066f565b16815280845220548152f35b600435906001600160a01b038216820361068557565b600080fd5b1561069157565b60405162461bcd60e51b815260206004820152601d60248201527f436f6c6c61746572616c4a6f696e2f6e6f742d617574686f72697a65640000006044820152606490fd5b156106dd57565b60405162461bcd60e51b8152602060048201526017602482015276436f6c6c61746572616c4a6f696e2f6f766572666c6f7760481b6044820152606490fd5b6001600160401b03811161072f57604052565b634e487b7160e01b600052604160045260246000fd5b601f909101601f19168101906001600160401b0382119082101761072f57604052565b9081526001600160a01b039091166020820152604081019190915260600190565b90816020910312610685575180151581036106855790565b6001600160a01b03918216815291166020820152604081019190915260600190565b156107ca57565b60405162461bcd60e51b815260206004820152601e60248201527f436f6c6c61746572616c4a6f696e2f6661696c65642d7472616e7366657200006044820152606490fdfea26469706673582212206aeff66b1d4d8f72ab3da8da74ee7ab514e2d26b53fce0696b5a4f5014be813a64736f6c63430008110033",
  "devdoc": {
    "details": "This adapter assumes that the collateral has 18 decimals",
    "kind": "dev",
    "methods": {
      "exit(address,uint256)": {
        "params": {
          "usr": "Account to which we transfer the collateral",
          "wad": "Amount of collateral to transfer to 'account' (represented as a number with 18 decimals)*"
        }
      },
      "join(address,uint256)": {
        "params": {
          "usr": "Account from which we transferFrom collateral and add it in the system",
          "wad": "Amount of collateral to transfer in the system (represented as a number with 18 decimals)*"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "exit(address,uint256)": {
        "notice": "Exit collateral from the system"
      },
      "join(address,uint256)": {
        "notice": "Join collateral in the system"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 29568,
        "contract": "contracts/makerdao/core/adapters/CollateralJoin.sol:CollateralJoin",
        "label": "authorizedAccounts",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 29621,
        "contract": "contracts/makerdao/core/adapters/CollateralJoin.sol:CollateralJoin",
        "label": "rewardChef",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IRewardChefV2)23112"
      },
      {
        "astId": 29624,
        "contract": "contracts/makerdao/core/adapters/CollateralJoin.sol:CollateralJoin",
        "label": "safeEngine",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ISafeEngine)31345"
      },
      {
        "astId": 29626,
        "contract": "contracts/makerdao/core/adapters/CollateralJoin.sol:CollateralJoin",
        "label": "collateralType",
        "offset": 0,
        "slot": "3",
        "type": "t_bytes32"
      },
      {
        "astId": 29629,
        "contract": "contracts/makerdao/core/adapters/CollateralJoin.sol:CollateralJoin",
        "label": "collateral",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IERC20Metadata)6006"
      },
      {
        "astId": 29631,
        "contract": "contracts/makerdao/core/adapters/CollateralJoin.sol:CollateralJoin",
        "label": "decimals",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 29633,
        "contract": "contracts/makerdao/core/adapters/CollateralJoin.sol:CollateralJoin",
        "label": "contractEnabled",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20Metadata)6006": {
        "encoding": "inplace",
        "label": "contract IERC20Metadata",
        "numberOfBytes": "20"
      },
      "t_contract(IRewardChefV2)23112": {
        "encoding": "inplace",
        "label": "contract IRewardChefV2",
        "numberOfBytes": "20"
      },
      "t_contract(ISafeEngine)31345": {
        "encoding": "inplace",
        "label": "contract ISafeEngine",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}