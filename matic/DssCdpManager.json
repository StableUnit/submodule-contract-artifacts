{
  "address": "0xE0B1B06EF06FF20b4Bd65D41B8b7C50E1bFD57b1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "safeEngine_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "usr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "own",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        }
      ],
      "name": "NewCdp",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "usr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "ok",
          "type": "uint256"
        }
      ],
      "name": "allowHandler",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "usr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "ok",
          "type": "uint256"
        }
      ],
      "name": "cdpAllow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "cdpCan",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "cdpCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cdpi",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "collateralTypes",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        }
      ],
      "name": "enter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "firstCdpId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "handlerCan",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastCdpId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "list",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "prev",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "next",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "deltaCollateral",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "deltaDebt",
          "type": "int256"
        }
      ],
      "name": "modifySAFECollateralization",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cdpSrc",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cdpDst",
          "type": "uint256"
        }
      ],
      "name": "moveSAFE",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "usr",
          "type": "address"
        }
      ],
      "name": "openSafe",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "owns",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        }
      ],
      "name": "quit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "safeEngine",
      "outputs": [
        {
          "internalType": "contract ISafeEngine",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "safes",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "transferCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "ilk",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "transferCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rad",
          "type": "uint256"
        }
      ],
      "name": "transferInternalCoins",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        }
      ],
      "name": "transferSafeOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "numDeployments": 2,
  "solcInputHash": "4b4827c185e49f5250e237ecb28af247",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"safeEngine_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"own\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"}],\"name\":\"NewCdp\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ok\",\"type\":\"uint256\"}],\"name\":\"allowHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ok\",\"type\":\"uint256\"}],\"name\":\"cdpAllow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cdpCan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cdpCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cdpi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"collateralTypes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"}],\"name\":\"enter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"firstCdpId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"handlerCan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastCdpId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"list\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"prev\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"next\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"deltaCollateral\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"deltaDebt\",\"type\":\"int256\"}],\"name\":\"modifySAFECollateralization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cdpSrc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cdpDst\",\"type\":\"uint256\"}],\"name\":\"moveSAFE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"openSafe\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owns\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"}],\"name\":\"quit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeEngine\",\"outputs\":[{\"internalType\":\"contract ISafeEngine\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"safes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transferCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transferCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rad\",\"type\":\"uint256\"}],\"name\":\"transferInternalCoins\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"}],\"name\":\"transferSafeOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/makerdao/core/DssCdpManager.sol\":\"DssCdpManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/makerdao/core/DssCdpManager.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\n/// DssCdpManager.sol\\n\\n// Copyright (C) 2018-2020 Maker Ecosystem Growth Holdings, INC.\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/ISafeEngine.sol\\\";\\nimport \\\"../interfaces/IDssCdpManager.sol\\\";\\n\\n// CHANGED: interface created and struct and events moved there\\n\\ncontract CdpHandler {\\n    constructor(ISafeEngine safeEngine) public {\\n        safeEngine.approveSAFEModification(msg.sender);\\n    }\\n}\\n\\ncontract DssCdpManager is IDssCdpManager {\\n    ISafeEngine               public safeEngine;\\n    uint                      public cdpi;  // Auto incremental\\n    mapping (uint => address) public safes; // CDPId => CdpHandler\\n    mapping (uint => List)    public list;  // CDPId => Prev & Next CDPIds (double linked list)\\n    mapping (uint => address) public owns;  // CDPId => Owner\\n    mapping (uint => bytes32) public collateralTypes; // CDPId => CollateralType\\n\\n    mapping (address => uint) public firstCdpId; // Owner => First CDPId\\n    mapping (address => uint) public lastCdpId; // Owner => Last CDPId\\n    mapping (address => uint) public cdpCount; // Owner => Amount of CDPs\\n\\n    mapping (\\n        address => mapping (\\n            uint => mapping (\\n                address => uint\\n            )\\n        )\\n    ) public cdpCan; // Owner => CDPId => Allowed Addr => True/False\\n\\n    mapping (\\n        address => mapping (\\n            address => uint\\n        )\\n    ) public handlerCan; // Cdp => Allowed Addr => True/False\\n    \\n    modifier cdpAllowed(uint cdp) {\\n        require(msg.sender == owns[cdp] || cdpCan[owns[cdp]][cdp][msg.sender] == 1, \\\"cdp-not-allowed\\\");\\n        _;\\n    }\\n\\n    modifier handlerAlloweded(address urn) {\\n        require(msg.sender == urn || handlerCan[urn][msg.sender] == 1, \\\"urn-not-allowed\\\");\\n        _;\\n    }\\n\\n    constructor(address safeEngine_) public {\\n        safeEngine = ISafeEngine(safeEngine_);\\n    }\\n\\n    function _add(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x + y) >= x);\\n    }\\n\\n    function _sub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) <= x);\\n    }\\n\\n    function toInt(uint x) internal pure returns (int y) {\\n        y = int(x);\\n        require(y >= 0);\\n    }\\n\\n    function cdpAllow(uint cdp, address usr, uint ok) public cdpAllowed(cdp) {\\n        cdpCan[owns[cdp]][cdp][usr] = ok;\\n    }\\n\\n    function allowHandler(address usr, uint ok) public {\\n        handlerCan[msg.sender][usr] = ok;\\n    }\\n\\n    function openSafe(bytes32 collateralType, address usr) public returns (uint) {\\n        require(usr != address(0), \\\"usr-address-0\\\");\\n\\n        cdpi = _add(cdpi, 1);\\n        safes[cdpi] = address(new CdpHandler(safeEngine));\\n        owns[cdpi] = usr;\\n        collateralTypes[cdpi] = collateralType;\\n\\n        // Add new CDP to double linked list and pointers\\n        if (firstCdpId[usr] == 0) {\\n            firstCdpId[usr] = cdpi;\\n        }\\n        if (lastCdpId[usr] != 0) {\\n            list[cdpi].prev = lastCdpId[usr];\\n            list[lastCdpId[usr]].next = cdpi;\\n        }\\n        lastCdpId[usr] = cdpi;\\n        cdpCount[usr] = _add(cdpCount[usr], 1);\\n\\n        emit NewCdp(msg.sender, usr, cdpi);\\n        return cdpi;\\n    }\\n\\n    function transferSafeOwnership(uint cdp, address dst) public cdpAllowed(cdp) {\\n        require(dst != address(0), \\\"dst-address-0\\\");\\n        require(dst != owns[cdp], \\\"dst-already-owner\\\");\\n\\n        // Remove transferred CDP from double linked list of origin user and pointers\\n        if (list[cdp].prev != 0) {\\n            // Set the next pointer of the prev cdp (if exists) to the next of the transferred one\\n            list[list[cdp].prev].next = list[cdp].next;\\n        }\\n        if (list[cdp].next != 0) {\\n            // If wasn't the last one - Set the prev pointer of the next cdp to the prev of the transferred one\\n            list[list[cdp].next].prev = list[cdp].prev;\\n        } else {\\n            // If was the last one - Update last pointer of the owner\\n            lastCdpId[owns[cdp]] = list[cdp].prev;\\n        }\\n        if (firstCdpId[owns[cdp]] == cdp) {\\n            // If was the first one - Update first pointer of the owner\\n            firstCdpId[owns[cdp]] = list[cdp].next;\\n        }\\n        cdpCount[owns[cdp]] = _sub(cdpCount[owns[cdp]], 1);\\n\\n        // Transfer ownership\\n        owns[cdp] = dst;\\n\\n        // Add transferred CDP to double linked list of destiny user and pointers\\n        list[cdp].prev = lastCdpId[dst];\\n        list[cdp].next = 0;\\n        if (lastCdpId[dst] != 0) {\\n            list[lastCdpId[dst]].next = cdp;\\n        }\\n        if (firstCdpId[dst] == 0) {\\n            firstCdpId[dst] = cdp;\\n        }\\n        lastCdpId[dst] = cdp;\\n        cdpCount[dst] = _add(cdpCount[dst], 1);\\n    }\\n\\n    function modifySAFECollateralization(\\n        uint cdp,\\n        int deltaCollateral,\\n        int deltaDebt\\n    ) public cdpAllowed(cdp) {\\n        address urn = safes[cdp];\\n        safeEngine.modifySAFECollateralization(\\n            collateralTypes[cdp],\\n            urn,\\n            urn,\\n            urn,\\n            deltaCollateral,\\n            deltaDebt\\n        );\\n    }\\n\\n    function transferCollateral(\\n        uint cdp,\\n        address dst,\\n        uint wad\\n    ) public cdpAllowed(cdp) {\\n        safeEngine.transferCollateral(collateralTypes[cdp], safes[cdp], dst, wad);\\n    }\\n\\n    function transferCollateral(\\n        bytes32 ilk,\\n        uint cdp,\\n        address dst,\\n        uint wad\\n    ) public cdpAllowed(cdp) {\\n        safeEngine.transferCollateral(ilk, safes[cdp], dst, wad);\\n    }\\n\\n    function transferInternalCoins(uint cdp, address dst, uint rad) public cdpAllowed(cdp) {\\n        safeEngine.transferInternalCoins(safes[cdp], dst, rad);\\n    }\\n\\n    function quit(uint cdp, address dst) public cdpAllowed(cdp) handlerAlloweded(dst) {\\n        (uint lockedCollateral, uint generatedDebt) = safeEngine.safes(collateralTypes[cdp], safes[cdp]);\\n        safeEngine.transferSAFECollateralAndDebt(\\n            collateralTypes[cdp],\\n            safes[cdp],\\n            dst,\\n            toInt(lockedCollateral),\\n            toInt(generatedDebt)\\n        );\\n    }\\n\\n    function enter(address src, uint cdp) public handlerAlloweded(src) cdpAllowed(cdp) {\\n        (uint lockedCollateral, uint generatedDebt) = safeEngine.safes(collateralTypes[cdp], src);\\n        safeEngine.transferSAFECollateralAndDebt(\\n            collateralTypes[cdp],\\n            src,\\n            safes[cdp],\\n            toInt(lockedCollateral),\\n            toInt(generatedDebt)\\n        );\\n    }\\n\\n    function moveSAFE(uint cdpSrc, uint cdpDst) public cdpAllowed(cdpSrc) cdpAllowed(cdpDst) {\\n        require(collateralTypes[cdpSrc] == collateralTypes[cdpDst], \\\"non-matching-cdps\\\");\\n        (uint lockedCollateral, uint generatedDebt) = safeEngine.safes(collateralTypes[cdpSrc], safes[cdpSrc]);\\n        safeEngine.transferSAFECollateralAndDebt(\\n            collateralTypes[cdpSrc],\\n            safes[cdpSrc],\\n            safes[cdpDst],\\n            toInt(lockedCollateral),\\n            toInt(generatedDebt)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x97c1b31648cf9c21c5c63b280584e15e0c261079b373a5143da9fc531c52e7ff\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/makerdao/interfaces/IDssCdpManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IDssMiddleware\\n **/\\ninterface IDssCdpManager {\\n\\n    /* ==================== STRUCTS ==================== */\\n\\n    struct List {\\n        uint prev;\\n        uint next;\\n    }\\n\\n    /* ==================== EVENTS ===================== */\\n\\n    event NewCdp(address indexed usr, address indexed own, uint indexed cdp);\\n\\n\\n    /* ==================== METHODS ==================== */\\n\\n    // @notice Allow/disallow a usr address to manage the cdp.\\n    function cdpAllow(uint cdp, address usr, uint ok) external;\\n\\n    // @notice Allow/disallow a usr address to quit to the the sender urn.\\n    function allowHandler(address usr, uint ok) external;\\n\\n    // @notice Open a new cdp for a given usr address.\\n    function openSafe(bytes32 collateralType, address usr) external returns (uint);\\n\\n    // @notice Give the cdp ownership to a dst address.\\n    function transferSafeOwnership(uint cdp, address dst) external;\\n\\n    // @notice Modify the cdp keeping the generated StablePro or collateral freed in the cdp urn address.\\n    function modifySAFECollateralization(uint cdp, int deltaCollateral, int deltaDebt) external;\\n\\n    // @notice Transfer wad amount of cdp collateral from the cdp address to a dst address.\\n    function transferCollateral(uint cdp, address dst, uint wad) external;\\n\\n    // @notice Transfer wad amount of any type of collateral (ilk) from the cdp address to a dst address.\\n    // This function has the purpose to take away collateral from the system that doesn't correspond to the cdp\\n    // but was sent there wrongly.\\n    function transferCollateral(bytes32 ilk, uint cdp, address dst, uint wad) external;\\n\\n    // @notice Transfer wad amount of StablePro from the cdp address to a dst address.\\n    function transferInternalCoins(uint cdp, address dst, uint rad) external;\\n\\n    // @notice Quit the system, migrating the cdp (lockedCollateral, generatedDebt) to a different dst urn\\n    function quit(uint cdp, address dst) external;\\n\\n    // @notice Import a position from src urn to the urn owned by cdp\\n    function enter(address src, uint cdp) external;\\n\\n    // @notice Move a position from cdpSrc urn to the cdpDst urn\\n    function moveSAFE(uint cdpSrc, uint cdpDst) external;\\n}\\n\",\"keccak256\":\"0xe61fde90dc026e90112db16c2b1245b9afdb60a74b9d6734fe556f11047f5448\",\"license\":\"UNLICENSED\"},\"contracts/makerdao/interfaces/ISafeEngine.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// TODO: check how to operate with license and use one for all contracts\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title SafeEngine\\n * @notice The single source of truth for the Maker Protocol. It contains the accounting system of the core Vault,\\n * Internal StablePro balances, and collateral state. It houses the public interface for Vault management,\\n * allowing safe(= CDP or Vault) owners to adjust their Vault state balances. It also contains the public interface\\n * for Vault fungibility, allowing safe (Vault) owners to transfer, split, and merge Vaults.\\n * Excluding these interfaces, SAFEEngine is accessed through trusted smart contract modules.\\n **/\\ninterface ISafeEngine {\\n    /* ==================== METHODS ==================== */\\n\\n    // --- Data ---\\n    struct CollateralType {\\n        uint256 debtAmount;       // Total debt issued for this specific collateral type                          [wad]\\n        uint256 accumulatedRate;  // Accumulator for interest accrued on this collateral type                     [ray]\\n        uint256 safetyPrice;      // Floor price at which a CDP is allowed to generate debt                       [ray]\\n        uint256 debtCeiling;      // Maximum amount of debt that can be generated with this collateral type       [rad]\\n        uint256 debtFloor;        // Minimum amount of debt that must be generated by a CDP using this collateral [rad]\\n    }\\n    struct SAFE {\\n        uint256 lockedCollateral; // Total amount of collateral locked in a SAFE/CDP  [wad]\\n        uint256 generatedDebt;    // Total amount of debt generated by a SAFE/CDP     [wad]\\n    }\\n\\n    // --- VARS ---\\n\\n    function safes(bytes32, address) external view returns (uint, uint);\\n\\n    function collateralTypes(bytes32) external view returns (\\n        uint256 debtAmount,      // [wad]\\n        uint256 accumulatedRate, // [ray]\\n        uint256 safetyPrice,     // [ray]\\n        uint256 debtCeiling,     // [rad]\\n        uint256 debtFloor        // [rad]\\n    );\\n\\n    function tokenCollateral(bytes32, address) external view returns (uint256);\\n\\n    function coinBalance(address) external view returns (uint256);\\n\\n    function debtBalance(address) external view returns (uint256);\\n\\n    // --- Auth ---\\n    /**\\n     * @notice Allow an address to modify your CDP.\\n     * For example coinAdapter should be able to modify your CDP to withdraw all correctly.\\n     * @param usr Account to give CDP permissions to\\n     */\\n    function approveSAFEModification(address usr) external;\\n\\n    /**\\n     * @notice Deny an address the rights to modify your CDP\\n     * @param usr Account to give CDP permissions to\\n     */\\n    function denySAFEModification(address usr) external;\\n\\n    // --- Administration ---\\n\\n    function initializeCollateralType(bytes32 collateralType) external;\\n    // TODO: check why not to use strings instead of bytes32\\n    /**\\n     * @notice Method to modify some global variables\\n     * @param what - name of variable we want to change\\n     * @param data - new value of this variable\\n     */\\n    function modifyParameters(bytes32 what, uint data) external;\\n    /**\\n     * @notice Method to modify values in struct of collateralTypes\\n     * @param collateralType - collateral type we wand to modify (collateralTypes[collateralType])\\n     * @param what - name of variable in struct we want to change\\n     * @param data - new value of this variable\\n     */\\n    function modifyParameters(bytes32 collateralType, bytes32 what, uint data) external;\\n\\n    // --- Fungibility ---\\n    function modifyCollateralBalance(bytes32 collateralType, address usr, int256 wad) external;\\n    function transferCollateral(bytes32 collateralType, address src, address dst, uint256 wad) external;\\n    function transferInternalCoins(address src, address dst, uint256 rad) external;\\n\\n    // --- CDP Manipulation ---\\n    /**\\n     * @notice Add/remove collateral or put back/generate more debt in a CDP\\n     * @param collateralType Type of collateral to withdraw/deposit in and from the CDP\\n     * @param cdp Target CDP\\n     * @param collateralSource Account we take collateral from/put collateral into\\n     * @param debtDestination Account from which we credit/debit coins and debt\\n     * @param deltaCollateral Amount of collateral added/extract from the CDP\\n     * @param deltaDebt Amount of debt to generate/repay\\n     */\\n    function modifySAFECollateralization(\\n        bytes32 collateralType,\\n        address cdp,\\n        address collateralSource,\\n        address debtDestination,\\n        int deltaCollateral,\\n        int deltaDebt\\n    ) external;\\n\\n    // --- CDP Fungibility ---\\n    /**\\n     * @notice Transfer collateral and/or debt between CDPs\\n     * @param collateralType Collateral type transferred between CDPs\\n     * @param src Source CDP\\n     * @param dst Destination CDP\\n     * @param deltaCollateral Amount of collateral to take/add into src and give/take from dst\\n     * @param deltaDebt Amount of debt to take/add into src and give/take from dst\\n     */\\n    function transferSAFECollateralAndDebt(\\n        bytes32 collateralType,\\n        address src,\\n        address dst,\\n        int deltaCollateral,\\n        int deltaDebt\\n    ) external;\\n\\n    // --- CDP Confiscation ---\\n    /**\\n     * @notice Normally used by the LiquidationEngine in order to confiscate collateral and\\n       debt from a CDP and give them to someone else\\n     * @param collateralType Collateral type the CDP has locked inside\\n     * @param cdp Target CDP\\n     * @param collateralCounterparty Who we take/give collateral to\\n     * @param debtCounterparty Who we take/give debt to\\n     * @param deltaCollateral Amount of collateral taken/added into the CDP\\n     * @param deltaDebt Amount of debt taken/added into the CDP\\n     */\\n    function confiscateSAFECollateralAndDebt(\\n        bytes32 collateralType,\\n        address cdp,\\n        address collateralCounterparty,\\n        address debtCounterparty,\\n        int deltaCollateral,\\n        int deltaDebt\\n    ) external;\\n\\n    // --- Settlement ---\\n    /**\\n     * @notice Nullify an amount of coins with an equal amount of debt\\n     * @param rad Amount of debt & coins to destroy (expressed as a number with 45 decimals)\\n     */\\n    function settleDebt(uint rad) external;\\n\\n    /**\\n     * @notice Usually called by CoinSavingsAccount in order to create unbacked debt\\n     * @param debtDestination Usually AccountingEngine that can settle decreaseSoldAmount with surplus\\n     * @param coinDestination Usually CoinSavingsAccount who passes the new coins to depositors\\n     * @param rad Amount of debt to create (expressed as a number with 45 decimals)\\n     */\\n    function createUnbackedDebt(address debtDestination, address coinDestination, uint rad) external;\\n\\n    // --- Rates ---\\n    /**\\n     * @notice Usually called by TaxCollector in order to accrue interest on a specific collateral type\\n     * @param collateralType Collateral type we accrue interest for\\n     * @param surplusDst Destination for amount of surplus created by applying the interest rate\\n       to debt created by CDPs with 'collateralType'\\n     * @param accumulatedRate Multiplier applied to the debtAmount in order to calculate the surplus\\n     */\\n    function updateAccumulatedRate(bytes32 collateralType, address surplusDst, int accumulatedRate) external;\\n}\\n\",\"keccak256\":\"0x61c7e1efdad6fbaa3ac100eedcc48d62affe692ede6e9a15b0af0a9ab288444a\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60803461007457601f61148638819003918201601f19168301916001600160401b038311848410176100795780849260209460405283398101031261007457516001600160a01b0381169081900361007457600080546001600160a01b0319169190911790556040516113f690816100908239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe60406080815260048036101561001457600080fd5b600091823560e01c8063018477a514610ee45780630b63fb6214610e4d578381631b0dbf7214610cdf575080632516c46f14610ca7578063391735c114610c68578063434efcbd14610c355780635aebb46014610bdc57838163660e160714610b1c5750806367aea31314610af4578063730abfa214610942578063782c549c1461090a578381637e348b7d146107885750806380c9419e146107565780638161b1201461072457838163871581a21461067457508063918b7cfe1461064c57838163aa1d8d811461057f57508063b3d178f214610560578063b77b80e31461052857838163c78101f81461042757508063ce05264d146103d55763ce34aae91461011e57600080fd5b346103d157806003193601126103d15781356101386110de565b81855260209084825260018060a01b038091818689205416331480156103a1575b6101629061114a565b1692831561036e578087528583528185882054168414610337578087526003835284872054610320575b808752600191828689200154151560001461030457818852600384528588208054908401548952868920555b8188528684528086892054168852600684528186892054146102df575b818852868452858820548116885260088452858820546000198101919082116102cc5782895287855286892054168852600884528588205580875285835284872080546001600160a01b03191685179055838752600780845285882054828952600385528689205585882083018890558488528352848720546102b6575b8387526006835284872054156102ac575b6007835284872055600882528386205490810194858211610297575084106102925760089185525282205580f35b600080fd5b601190634e487b7160e01b6000525260246000fd5b8085882055610264565b8487205487526003835280828689200155610253565b634e487b7160e01b895260118852602489fd5b8188526003845282868920015487855281878a205416895260068552868920556101d5565b8588205487855281878a205416895260078552868920556101b8565b84872060018181015491548952868920015561018c565b845162461bcd60e51b815280870184905260116024820152703239ba16b0b63932b0b23c96b7bbb732b960791b6044820152606490fd5b845162461bcd60e51b8152808701849052600d60248201526c06473742d616464726573732d3609c1b6044820152606490fd5b50818689205416885260098452858820858952845285882033600052845261016260018760002054149050610159565b8280fd5b8382346104235780600319360112610423576020916103f26110f4565b826103fb6110de565b6001600160a01b039283168452600a8652922091166000908152908352819020549051908152f35b5080fd5b808484346105245760603660031901126105245781358084526020838152828520546001600160a01b039492908516331480156104f4575b6104689061114a565b85526002815260058484872054169486541691528285205490803b156104f05785928360c492865197889586946399bec31560e01b86528501528060248501528060448501526064840152602435608484015260443560a48401525af19081156104e757506104d45750f35b6104dd906111b3565b6104e45780f35b80fd5b513d84823e3d90fd5b8580fd5b5084848720541686526009825283862081875282528386203360005282526104686001856000205414905061045f565b5050fd5b8382346104235760203660031901126104235760209181906001600160a01b036105506110f4565b1681526008845220549051908152f35b8382346104235781600319360112610423576020906001549051908152f35b808484346105245760803660031901126105245760243561059e61110a565b928185528060205260018060a01b0380848720541633148015610619575b6105c59061114a565b808654169286526002602052838620541691803b156104f0576106069486809486519788958694859363272888d360e11b85526064359280359086016111ff565b03925af19081156104e757506104d45750f35b5080848720541686526009602052838620838752602052838620336000526020526105c5600185600020541490506105bc565b5090346103d15760203660031901126103d15760209282913581526005845220549051908152f35b808484346105245761068536611120565b909391808652602083815260018060a01b03808689205416331480156106f4575b6106af9061114a565b80885416928852600582526002868920549252858820541692823b156106f057879461060686928851998a978896879563272888d360e11b875286016111ff565b8780fd5b5080868920541688526009825285882083895282528588203360005282526106af600187600020541490506106a6565b5090346103d15760203660031901126103d157803583526020908152918190205490516001600160a01b039091168152f35b5090346103d15760203660031901126103d1579181923581526003602052206001815491015482519182526020820152f35b808484346105245780600319360112610524576108146107a66110f4565b6001600160a01b0360243582821633811480156108e8575b6107c89150611227565b808752602090868252828689205416331480156108b8575b6107e99061114a565b8288541692818952600583528685818b205482519889928392630f50894160e21b84528d840161127b565b0381875afa9182156108ae5789968a93610879575b508952600583526002878a205493528689205416968886126108755788821261087557833b1561087557610606899692879389519a8b988997889663476bb6ef60e01b88528701611294565b8880fd5b90925061089d919650873d89116108a7575b61089581836111dc565b810190611265565b959095918b610829565b503d61088b565b87513d8b823e3d90fd5b5082868920541688526009825285882081895282528588203360005282526107e9600187600020541490506107e0565b508752600a602052848720336000526020526107c860018660002054146107be565b8382346104235760203660031901126104235760209181906001600160a01b036109326110f4565b1681526006845220549051908152f35b509190346104235782600319360112610423576001600160a01b0392836109676110de565b16918215610ac25760019061097c8254611188565b825584548351969060fc808901918316906001600160401b0383118a841017610aaf57908992916112c584398152602098899103019087f0908115610aa55783548752600288528487209060018060a01b031992168282541617905582548652818752848487209182541617905581548552600586523582852055828452600685528184205415610a9a575b6007855281842054610a6c575b8054838552600786528285205560088552610a3282852054611188565b83855260088652828520555491829151937fd6be0bc178658a382ff4f91c8c68b542aa6b71685b8fe427966b87745c3ea7a2339180a48152f35b8184205481548552600386528285205580548385526007865282852054855260038652818386200155610a15565b805482852055610a08565b84513d88823e3d90fd5b634e487b7160e01b895260418552602489fd5b6020606492519162461bcd60e51b8352820152600d60248201526c07573722d616464726573732d3609c1b6044820152fd5b838234610423578160031936011261042357905490516001600160a01b039091168152602090f35b8084843461052457610b2d36611120565b82865260208590528386205491946001600160a01b0392831633148015610ba9575b610b589061114a565b82875416938752600260205282858820541692843b156106f057879460649386928851998a978896633beaf2b760e21b885287015216602485015260448401525af19081156104e757506104d45750f35b508285882054168752600960205284872084885260205284872033600052602052610b5860018660002054149050610b4f565b83823461042357606036600319011261042357602091610bfa6110f4565b82610c0361110a565b6001600160a01b0392831684526009865281842060243585528652922091166000908152908352819020549051908152f35b5090346103d15760203660031901126103d15735825260026020908152918190205490516001600160a01b039091168152f35b838234610423578060031936011261042357610c826110f4565b338352600a6020528183209060018060a01b0316600052602052602435906000205580f35b8382346104235760203660031901126104235760209181906001600160a01b03610ccf6110f4565b1681526007845220549051908152f35b80848434610524578060031936011261052457610d77823592610d006110de565b84865260208281528487205491956001600160a01b0392831633148015610e1d575b610d2b9061114a565b8287168033148015610dfd575b610d429150611227565b82885416928189526005835286808a20546002855282828c2054169082519889928392630f50894160e21b84528a840161127b565b0381875afa9182156108ae5789968a93610dd8575b508952600583526002878a205493528689205416938886126108755788821261087557833b1561087557610606899692879389519a8b988997889663476bb6ef60e01b88528701611294565b909250610df3919650873d89116108a75761089581836111dc565b959095918b610d8c565b508852600a8252858820336000528252610d426001876000205414610d38565b508286892054168852600982528588208189528252858820336000528252610d2b60018760002054149050610d22565b50346103d157610e5c36611120565b8286526020858152848720549195929390926001600160a01b0392831633148015610eb4575b610e8b9061114a565b818852835281858820541687526009835284872090875282528386209216600052526000205580f35b508286892054168852600984528588208289528452858820336000528452610e8b60018760002054149050610e82565b5090346103d157816003193601126103d1578035808452602082815283852054602435936001600160a01b0393918416331480156110b5575b610f269061114a565b8487528083528386882054163314801561108c575b610f449061114a565b8187526005835285872054858852868820540361105557918391610f9a9695938895865416938287526005845287808820546002865282828a2054169082519b8c928392630f50894160e21b845287840161127b565b0381885afa92831561104b5787998894611026575b5087526005845260028888205494528088882054169587528787205416978681126110225786831261102257843b156110225786926110029189519a8b988997889663476bb6ef60e01b88528701611294565b03925af19081156104e75750611016575080f35b61101f906111b3565b80f35b8680fd5b909350611041919950883d8a116108a75761089581836111dc565b9890989238610faf565b88513d89823e3d90fd5b855162461bcd60e51b815290810183905260116024820152706e6f6e2d6d61746368696e672d6364707360781b6044820152606490fd5b508587205484168752600983528587208588528352858720338852835285872054600114610f3b565b508587205484168752600983528587208288528352858720338852835285872054600114610f1d565b602435906001600160a01b038216820361029257565b600435906001600160a01b038216820361029257565b604435906001600160a01b038216820361029257565b606090600319011261029257600435906024356001600160a01b0381168103610292579060443590565b1561115157565b60405162461bcd60e51b815260206004820152600f60248201526e18d91c0b5b9bdd0b585b1b1bddd959608a1b6044820152606490fd5b90600182019182811161119d57821061029257565b634e487b7160e01b600052601160045260246000fd5b6001600160401b0381116111c657604052565b634e487b7160e01b600052604160045260246000fd5b601f909101601f19168101906001600160401b038211908210176111c657604052565b9081526001600160a01b03918216602082015291166040820152606081019190915260800190565b1561122e57565b60405162461bcd60e51b815260206004820152600f60248201526e1d5c9b8b5b9bdd0b585b1b1bddd959608a1b6044820152606490fd5b9190826040910312610292576020825192015190565b9081526001600160a01b03909116602082015260400190565b9081526001600160a01b039182166020820152911660408201526060810191909152608081019190915260a0019056fe60803460bc576001600160401b0390601f6100fc38819003918201601f191683019184831184841017609a5780849260209460405283398101031260bc57516001600160a01b038116919082900360bc57813b1560bc5760008092602460405180958193631b29a84160e31b83523360048401525af1801560b057608c575b604051603a90816100c28239f35b8111609a576040523880607e565b634e487b7160e01b600052604160045260246000fd5b6040513d6000823e3d90fd5b600080fdfe600080fdfea2646970667358221220caa851cedaed0d9d74bef467eb66c4269c4b35ce1cae9630bf9b0dc6190774b664736f6c63430008110033a2646970667358221220ac437344d8f09529278ee413bcf11202ee450689cfc879aa2d188bec985c0da864736f6c63430008110033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 27095,
        "contract": "contracts/makerdao/core/DssCdpManager.sol:DssCdpManager",
        "label": "safeEngine",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ISafeEngine)31538"
      },
      {
        "astId": 27097,
        "contract": "contracts/makerdao/core/DssCdpManager.sol:DssCdpManager",
        "label": "cdpi",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 27101,
        "contract": "contracts/makerdao/core/DssCdpManager.sol:DssCdpManager",
        "label": "safes",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 27106,
        "contract": "contracts/makerdao/core/DssCdpManager.sol:DssCdpManager",
        "label": "list",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(List)31085_storage)"
      },
      {
        "astId": 27110,
        "contract": "contracts/makerdao/core/DssCdpManager.sol:DssCdpManager",
        "label": "owns",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 27114,
        "contract": "contracts/makerdao/core/DssCdpManager.sol:DssCdpManager",
        "label": "collateralTypes",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 27118,
        "contract": "contracts/makerdao/core/DssCdpManager.sol:DssCdpManager",
        "label": "firstCdpId",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 27122,
        "contract": "contracts/makerdao/core/DssCdpManager.sol:DssCdpManager",
        "label": "lastCdpId",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 27126,
        "contract": "contracts/makerdao/core/DssCdpManager.sol:DssCdpManager",
        "label": "cdpCount",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 27134,
        "contract": "contracts/makerdao/core/DssCdpManager.sol:DssCdpManager",
        "label": "cdpCan",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_uint256)))"
      },
      {
        "astId": 27140,
        "contract": "contracts/makerdao/core/DssCdpManager.sol:DssCdpManager",
        "label": "handlerCan",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ISafeEngine)31538": {
        "encoding": "inplace",
        "label": "contract ISafeEngine",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => mapping(address => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(List)31085_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IDssCdpManager.List)",
        "numberOfBytes": "32",
        "value": "t_struct(List)31085_storage"
      },
      "t_struct(List)31085_storage": {
        "encoding": "inplace",
        "label": "struct IDssCdpManager.List",
        "members": [
          {
            "astId": 31082,
            "contract": "contracts/makerdao/core/DssCdpManager.sol:DssCdpManager",
            "label": "prev",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 31084,
            "contract": "contracts/makerdao/core/DssCdpManager.sol:DssCdpManager",
            "label": "next",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}