{
  "address": "0x022942e1e0cCbB214E6D257C5BEE41A7AA9A4F8D",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "BadAccessControlSingleton",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "BadDecimals",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BadMainUnderlyingToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInterface",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPoolConfiguration",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSlippage",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "IsNotLP",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LPOracleNotReady",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MissingPoolReentrancyConfig",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NativeETHNotSupported",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAdminError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAlerterError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyCDPAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyDAOError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyDisablerAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyLiquidationAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyMintAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyProxyActionsError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyRewardAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyRoleError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyVaultAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyVotingEscrowError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrantLockError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RemoveLiquidityError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "expectedValueUSD",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "receivedValueUSD",
          "type": "uint256"
        }
      ],
      "name": "SlippageExceeded",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenCount",
          "type": "uint256"
        }
      ],
      "name": "UnsupportedTokenCount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroPrice",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroRecipient",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "priceProvider",
          "type": "address"
        }
      ],
      "name": "PriceProviderUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_gasLimit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum ICurveReentrancyCheck.N_COINS",
          "name": "_nCoins",
          "type": "uint8"
        }
      ],
      "name": "ReentrancyCheckConfigUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "lp",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lpPool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nTokens",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum ICurveAdapter.CurvePoolType",
          "name": "poolType",
          "type": "uint8"
        }
      ],
      "name": "TokenRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "lp",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lpPool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nTokens",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum ICurveAdapter.CurvePoolType",
          "name": "poolType",
          "type": "uint8"
        }
      ],
      "name": "TokenRegisteredRepeat",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACCESS_CONTROL_SINGLETON",
      "outputs": [
        {
          "internalType": "contract ISuAccessControl",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ALERTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CDP_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DAO_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DISABLER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIQUIDATION_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINT_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_GAS_LIMIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ORACLE",
      "outputs": [
        {
          "internalType": "contract ISuOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROXY_ACTIONS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARD_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VOTING_ESCROW_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getFiatPrice1e18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_authControl",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "isAdapterLP",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "isLocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lps",
      "outputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "enum ICurveAdapter.CurvePoolType",
          "name": "poolType",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lpsWithoutLpPrice",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolReentrancyConfig",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "gasLimit",
          "type": "uint128"
        },
        {
          "internalType": "enum ICurveReentrancyCheck.N_COINS",
          "name": "nCoins",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lp",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lpPool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nTokens",
          "type": "uint256"
        },
        {
          "internalType": "enum ICurveAdapter.CurvePoolType",
          "name": "poolType",
          "type": "uint8"
        }
      ],
      "name": "registerLP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "_gasLimit",
          "type": "uint128"
        },
        {
          "internalType": "enum ICurveReentrancyCheck.N_COINS",
          "name": "_nCoins",
          "type": "uint8"
        }
      ],
      "name": "setReentrancyVerificationConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lp",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "priceProvider",
          "type": "address"
        }
      ],
      "name": "updateLpPriceProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxSlippageBps",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct WithdrawResult[]",
          "name": "results",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "403b958b64b1c77d13b9eddc7dda2091",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BadAccessControlSingleton\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"BadDecimals\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BadMainUnderlyingToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInterface\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPoolConfiguration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSlippage\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"IsNotLP\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LPOracleNotReady\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MissingPoolReentrancyConfig\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NativeETHNotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAdminError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAlerterError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyCDPAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyDAOError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyDisablerAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyLiquidationAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyMintAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyProxyActionsError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRewardAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRoleError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyVaultAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyVotingEscrowError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrantLockError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RemoveLiquidityError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expectedValueUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivedValueUSD\",\"type\":\"uint256\"}],\"name\":\"SlippageExceeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenCount\",\"type\":\"uint256\"}],\"name\":\"UnsupportedTokenCount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroRecipient\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"priceProvider\",\"type\":\"address\"}],\"name\":\"PriceProviderUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_gasLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum ICurveReentrancyCheck.N_COINS\",\"name\":\"_nCoins\",\"type\":\"uint8\"}],\"name\":\"ReentrancyCheckConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lpPool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum ICurveAdapter.CurvePoolType\",\"name\":\"poolType\",\"type\":\"uint8\"}],\"name\":\"TokenRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lpPool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum ICurveAdapter.CurvePoolType\",\"name\":\"poolType\",\"type\":\"uint8\"}],\"name\":\"TokenRegisteredRepeat\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACCESS_CONTROL_SINGLETON\",\"outputs\":[{\"internalType\":\"contract ISuAccessControl\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ALERTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CDP_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAO_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DISABLER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDATION_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_GAS_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ORACLE\",\"outputs\":[{\"internalType\":\"contract ISuOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROXY_ACTIONS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VOTING_ESCROW_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getFiatPrice1e18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_authControl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"isAdapterLP\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"isLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lps\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"enum ICurveAdapter.CurvePoolType\",\"name\":\"poolType\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lpsWithoutLpPrice\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolReentrancyConfig\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"gasLimit\",\"type\":\"uint128\"},{\"internalType\":\"enum ICurveReentrancyCheck.N_COINS\",\"name\":\"nCoins\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lpPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nTokens\",\"type\":\"uint256\"},{\"internalType\":\"enum ICurveAdapter.CurvePoolType\",\"name\":\"poolType\",\"type\":\"uint8\"}],\"name\":\"registerLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_gasLimit\",\"type\":\"uint128\"},{\"internalType\":\"enum ICurveReentrancyCheck.N_COINS\",\"name\":\"_nCoins\",\"type\":\"uint8\"}],\"name\":\"setReentrancyVerificationConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceProvider\",\"type\":\"address\"}],\"name\":\"updateLpPriceProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSlippageBps\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct WithdrawResult[]\",\"name\":\"results\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This adapter does not support pools containing native ETH as an underlying token.      Also adapter support LP tokens with <= 4 underlying tokens      (it seems that Curve don't have Stable and V2 pools with more amount of underlying tokens).      See ILPAdapter interface for full details.      We copied some logic from Silo CurveNPAPTokensPriceProvider for V2 and CurvePAPTokensPriceProvider for Stable:      https://github.com/silo-finance/silo-core-v1/blob/master/contracts/priceProviders/curveLPTokens/nonPeggedAssetsPools/CurveNPAPTokensPriceProviderETH.sol\",\"errors\":{\"InvalidInterface()\":[{\"details\":\"Pool interface validation\"}],\"InvalidPoolConfiguration()\":[{\"details\":\"Revert on the invalid pool configuration\"}],\"MissingPoolReentrancyConfig()\":[{\"details\":\"Revert if the pool reentrancy config is not configured\"}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"emergencyWithdraw(address[],address)\":{\"details\":\"This function is restricted to the admin and allows for emergency withdrawal of tokens.\",\"params\":{\"receiver\":\"Address of the receiver to receive the tokens.\",\"tokens\":\"List of tokens to withdraw.\"}},\"getFiatPrice1e18(address)\":{\"params\":{\"asset\":\"- address of erc20 token contract\"},\"returns\":{\"_0\":\"usdPrice1e18 such that asset.balanceOf() * getFiatPrice1e18(asset) / 1e18 == $$ * 1e18*\"}},\"isAdapterLP(address)\":{\"params\":{\"asset\":\"- address of LP token to check*\"}},\"registerLP(address,address,uint256,uint8)\":{\"details\":\"Checks that none of the underlying tokens is native ETH\",\"params\":{\"lp\":\"address of LP token\",\"lpPool\":\"address of pool of {lp} LP-token\",\"nTokens\":\"number of underlyingTokens*\"}},\"setReentrancyVerificationConfig(address,uint128,uint8)\":{\"params\":{\"_gasLimit\":\"the gas limit to be set on the check execution\",\"_nCoins\":\"the number of the coins in the Curve pool (N_COINS)\",\"_pool\":\"address\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"updateLpPriceProvider(address,address)\":{\"details\":\"We have a particular case with the tricrypto2 pool in the Ethereum network, as it is without the lp_rice() function, and it is implemented in the separate smart contract. Function can be called only for registered lp and only by admin.\",\"params\":{\"lp\":\"address of LP token\",\"priceProvider\":\"address of separate smart contract that contains lp_price() function*\"}},\"withdraw(address,uint256,uint256)\":{\"params\":{\"amount\":\"The amount of LP tokens to withdraw\",\"asset\":\"The LP token address\",\"maxSlippageBps\":\"Maximum allowed slippage in basis points (1 = 0.01%)\"},\"returns\":{\"results\":\"Array of withdrawal results\"}}},\"title\":\"CurveAdapter\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"emergencyWithdraw(address[],address)\":{\"notice\":\"Withdraw tokens from the adapter in case of emergency.\"},\"getFiatPrice1e18(address)\":{\"notice\":\"WARNING! Read this description very carefully!     function getFiatPrice1e18(address asset) returns (uint256) that:         basicAmountOfAsset * getFiatPrice1e18(asset) / 1e18 === $$ * 1e18     in other words, it doesn't matter what's the erc20.decimals is,     you just multiply token balance in basic units on value from oracle and get dollar amount multiplied on 1e18. different assets have different deviation threshold (errors)     for wBTC it's <= 0.5%, read more https://data.chain.link/ethereum/mainnet/crypto-usd/btc-usd     for other asset is can be larger based on particular oracle implementation. examples:     market price of btc = $30k,     for 0.1 wBTC the unit256 amount is 0.1 * 1e18     0.1 * 1e18 * (price1e18 / 1e18) == $3000 == uint256(3000*1e18)     => price1e18 = 30000 * 1e18;     market price of usdt = $0.97,     for 1 usdt uint256 = 1 * 1e6     so 1*1e6 * price1e18 / 1e18 == $0.97 == uint256(0.97*1e18)     => 1*1e6 * (price1e18 / 1e18) / (0.97*1e18)   = 1     =>  price1e18 = 0.97 * (1e18/1e6) * 1e18    assume market price of wBTC = $31,503.77, oracle error = $158     case #1: small amount of wBTC         we have 0.0,000,001 wBTC that is worth v = $0.00315 \\u00b1 $0.00001 = 0.00315*1e18 = 315*1e13 \\u00b1 1*1e13         actual balance on the asset b = wBTC.balanceOf() =  0.0000001*1e18 = 1e11         oracle should return or = oracle.getFiatPrice1e18(wBTC) <=>         <=> b*or = v => v/b = 315*1e13 / 1e11 = 315*1e2 \\u00b1 1e2         error = or.error * b = 1e2 * 1e11 = 1e13 => 1e13/1e18 usd = 1e-5 = 0.00001 usd     case #2: large amount of wBTC         v = 2,000,000 wBTC = $31,503.77 * 2m \\u00b1 158*2m = $63,007,540,000 \\u00b1 $316,000,000 = 63,007*1e24 \\u00b1 316*1e24         for calc convenience we increase error on 0.05 and have v = 63,000*24 \\u00b1 300*1e24 = (630 \\u00b1 3)*1e26         b = 2*1e6 * 1e18 = 2*1e24         or = v/b = (630 \\u00b1 3)*1e26 / 2*1e24 = 315*1e2 \\u00b1 1.5*1e2         error = or.error * b = 1.5*100 * 2*1e24 = 3*1e26 = 3*1e8*1e18 = $300,000,000 ~ $316,000,000     assume the market price of USDT = $0.97 \\u00b1 $0.00485,     case #3: little amount of USDT         v = USDT amount 0.005 = 0.005*(0.97 \\u00b1 0.00485) = 0.00485*1e18 \\u00b1 0.00002425*1e18 = 485*1e13 \\u00b1 3*1e13         we rounded error up on (3000-2425)/2425 ~= +24% for calculation convenience.         b = USDT.balanceOf() = 0.005*1e6 = 5*1e3         b*or = v => or = v/b = (485*1e13 \\u00b1 3*1e13) / 5*1e3 = 970*1e9 \\u00b1 6*1e9         error = 6*1e9 * 5*1e3 / 1e18 = 30*1e12/1e18 = 3*1e-5 = $0,00005     case #4: lot of USDT         v = we have 100,000,000,000 USDT = $97B = 97*1e9*1e18 \\u00b1 0.5*1e9*1e18         b = USDT.balanceOf() = 1e11*1e6 = 1e17         or = v/b = (97*1e9*1e18 \\u00b1 0.5*1e9*1e18) / 1e17 = 970*1e9 \\u00b1 5*1e9         error = 5*1e9 * 1e17 = 5*1e26 = 0.5 * 1e8*1e18\"},\"isAdapterLP(address)\":{\"notice\":\"Returns if asset ig Balancer LP token, registered in our adapter\"},\"isLocked(address)\":{\"notice\":\"Verifies if the `lock` is activate on the Curve pool\"},\"registerLP(address,address,uint256,uint8)\":{\"notice\":\"Register the given LP token address and set the LP pool\"},\"setReentrancyVerificationConfig(address,uint128,uint8)\":{\"notice\":\"Set/Update a pool configuration for the reentrancy check\"},\"updateLpPriceProvider(address,address)\":{\"notice\":\"Add/remove priceProvider address for lp token.\"},\"withdraw(address,uint256,uint256)\":{\"notice\":\"Withdraw LP tokens with slippage protection using basis points\"}},\"notice\":\"Adapter for Curve LP token.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/exchange/contracts/periphery/contracts/adapters/Curve/CurveAdapter.sol\":\"CurveAdapter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"contracts/exchange/contracts/periphery/contracts/access-control/SuAccessRoles.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title SuAccessRoles Library\\n * @dev SuAuthenticated and SuAccessControlSingleton need to have this constants\\n * Hierarchy:\\n *      1. DAO - can give admins and system roles\\n *      2.1. Admin - can set Alerters\\n *      2.2. System - includes Minter, Liquidation, Reward and Disabler roles, don't have access to give some roles.\\n *      3. Alerter - can send alerts and trigger rate limits, don't have access to give some roles.\\n */\\nabstract contract SuAccessRoles {\\n    bytes32 public constant ADMIN_ROLE = 0x00;\\n\\n    bytes32 public constant DAO_ROLE = keccak256(\\\"DAO_ROLE\\\");\\n\\n    bytes32 public constant ALERTER_ROLE = keccak256(\\\"ALERTER_ROLE\\\");\\n\\n    // system roles\\n    bytes32 public constant MINT_ACCESS_ROLE = keccak256(\\\"MINT_ACCESS_ROLE\\\");\\n    bytes32 public constant LIQUIDATION_ACCESS_ROLE = keccak256(\\\"LIQUIDATION_ACCESS_ROLE\\\");\\n    bytes32 public constant REWARD_ACCESS_ROLE = keccak256(\\\"REWARD_ACCESS_ROLE\\\");\\n    // bytes32 public constant SYSTEM_ROLE = keccak256(\\\"SYSTEM_ROLE\\\");\\n    bytes32 public constant DISABLER_ROLE = keccak256(\\\"DISABLER_ROLE\\\");\\n    bytes32 public constant CDP_ACCESS_ROLE = keccak256(\\\"CDP_ACCESS_ROLE\\\");\\n    bytes32 public constant VOTING_ESCROW_ROLE = keccak256(\\\"VOTING_ESCROW_ROLE\\\");\\n    bytes32 public constant PROXY_ACTIONS_ROLE = keccak256(\\\"PROXY_ACTIONS_ROLE\\\");\\n}\\n\",\"keccak256\":\"0x76c6b55446c0e7b40405cd0b642650c64a842e5dd71d5c5307f0b2def8898a1b\",\"license\":\"BSL 1.1\"},\"contracts/exchange/contracts/periphery/contracts/access-control/SuAuthenticated.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/access-control/ISuAccessControl.sol\\\";\\nimport \\\"./SuAccessRoles.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @title SuAuthenticated\\n * @dev other contracts should inherit to be authenticated.\\n * The address of SuAccessControlSingleton should be one for all contract that inherits SuAuthenticated\\n */\\nabstract contract SuAuthenticated is Initializable, SuAccessRoles, IERC165Upgradeable {\\n    ISuAccessControl public ACCESS_CONTROL_SINGLETON;\\n\\n    error OnlyDAOError();\\n    error OnlyAdminError();\\n    error OnlyAlerterError();\\n    error OnlyVaultAccessError();\\n    error OnlyLiquidationAccessError();\\n    error OnlyMintAccessError();\\n    error OnlyRewardAccessError();\\n    error OnlyDisablerAccessError();\\n    error OnlyVotingEscrowError();\\n    error OnlyProxyActionsError();\\n    error OnlyRoleError();\\n    error OnlyCDPAccessError();\\n    error BadAccessControlSingleton();\\n\\n    /**\\n     * @dev should be passed in constructor\\n     */\\n    function __suAuthenticatedInit(address _accessControlSingleton) internal onlyInitializing {\\n        ACCESS_CONTROL_SINGLETON = ISuAccessControl(_accessControlSingleton);\\n        if (\\n            _accessControlSingleton == address(0) ||\\n            !ISuAccessControl(_accessControlSingleton).supportsInterface(type(IAccessControlUpgradeable).interfaceId)\\n        ) revert BadAccessControlSingleton();\\n    }\\n\\n    /** CORE ROLES */\\n\\n    modifier onlyDAO() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(DAO_ROLE, msg.sender)) revert OnlyDAOError();\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(ADMIN_ROLE, msg.sender)) revert OnlyAdminError();\\n        _;\\n    }\\n\\n    modifier onlyAlerter() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(ALERTER_ROLE, msg.sender)) revert OnlyAlerterError();\\n        _;\\n    }\\n\\n    /** SYSTEM ROLES */\\n\\n    modifier onlyLiquidationAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(LIQUIDATION_ACCESS_ROLE, msg.sender)) revert OnlyLiquidationAccessError();\\n        _;\\n    }\\n\\n    modifier onlyMintAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(MINT_ACCESS_ROLE, msg.sender)) revert OnlyMintAccessError();\\n        _;\\n    }\\n\\n    modifier onlyRewardAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(REWARD_ACCESS_ROLE, msg.sender)) revert OnlyRewardAccessError();\\n        _;\\n    }\\n\\n    modifier onlyRewardOrAdminAccess() {\\n        if (\\n            !ACCESS_CONTROL_SINGLETON.hasRole(REWARD_ACCESS_ROLE, msg.sender) &&\\n            !ACCESS_CONTROL_SINGLETON.hasRole(ADMIN_ROLE, msg.sender)\\n        ) revert OnlyRewardAccessError();\\n        _;\\n    }\\n\\n    // @notice This modifier check if user/contract have access to \\\"disable\\\" contracts.\\n    // All main contracts in our lending protocol have disableContract() method that stops contracts main functions.\\n    modifier onlyDisablerAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(DISABLER_ROLE, msg.sender)) revert OnlyDisablerAccessError();\\n        _;\\n    }\\n\\n    modifier onlyCDPAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(CDP_ACCESS_ROLE, msg.sender)) revert OnlyCDPAccessError();\\n        _;\\n    }\\n\\n    modifier onlyVotingEscrow() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(VOTING_ESCROW_ROLE, msg.sender)) revert OnlyVotingEscrowError();\\n        _;\\n    }\\n\\n    modifier onlyProxyActions() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(PROXY_ACTIONS_ROLE, msg.sender)) revert OnlyProxyActionsError();\\n        _;\\n    }\\n\\n    // syntax sugar under ACCESS_CONTROL_SINGLETON\\n    modifier onlyRole(bytes32 role) {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(role, msg.sender)) revert OnlyRoleError();\\n        _;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return ACCESS_CONTROL_SINGLETON.supportsInterface(interfaceId);\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcfde5118b09a0dd37d9b4d3c34459b2e2650f59f247ddb9b116733b03ad80d21\",\"license\":\"BSL 1.1\"},\"contracts/exchange/contracts/periphery/contracts/adapters/Curve/CurveAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"../../access-control/SuAuthenticated.sol\\\";\\nimport \\\"../../interfaces/adapters/ICurveAdapter.sol\\\";\\nimport \\\"../../vendor/curve/ICurveLP.sol\\\";\\nimport \\\"./CurveReentrancyCheck.sol\\\";\\n\\n// solhint-disable max-line-length\\n/**\\n * @title CurveAdapter\\n * @notice Adapter for Curve LP token.\\n * @dev This adapter does not support pools containing native ETH as an underlying token.\\n *      Also adapter support LP tokens with <= 4 underlying tokens\\n *      (it seems that Curve don't have Stable and V2 pools with more amount of underlying tokens).\\n *      See ILPAdapter interface for full details.\\n *      We copied some logic from Silo CurveNPAPTokensPriceProvider for V2 and CurvePAPTokensPriceProvider for Stable:\\n *      https://github.com/silo-finance/silo-core-v1/blob/master/contracts/priceProviders/curveLPTokens/nonPeggedAssetsPools/CurveNPAPTokensPriceProviderETH.sol\\n */\\n// solhint-enable max-line-length\\ncontract CurveAdapter is SuAuthenticated, ICurveAdapter, CurveReentrancyCheck {\\n    using SafeERC20 for IERC20;\\n\\n    mapping(address => CurveLPInfo) public lps; // Mapping from LP token to pool\\n    // Some pools don't have lp_price() function, so Curve suggest to use manual oracle for that\\n    // For such tokens we'll use this mapping\\n    mapping(address => address) public lpsWithoutLpPrice;\\n    ISuOracle public ORACLE;\\n    uint256 internal constant MAX_BPS = 10000; // 100% in basis points\\n    bytes4 constant REMOVE_LIQUIDITY_SELECTOR = bytes4(keccak256(\\\"remove_liquidity(uint256,uint256[])\\\"));\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(address _authControl, address _oracle) public initializer {\\n        __suAuthenticatedInit(_authControl);\\n        ORACLE = ISuOracle(_oracle);\\n    }\\n\\n    function registerLP(address lp, address lpPool, uint256 nTokens, CurvePoolType poolType) external onlyAdmin {\\n        if (nTokens > 4) revert UnsupportedTokenCount(nTokens);\\n        bool wasRegistered = lps[lp].pool != address(0);\\n        // If admin make mistake in this function, for example he pass wrong nTokens, poolType or lpPool address,\\n        // then he should be able to fix it by repeating register call with correct arguments.\\n        // if (wasRegistered) revert AlreadyRegistered(lp);\\n\\n        // Store pool details in the lps mapping.\\n        if (IERC20Metadata(lp).decimals() != 18) revert BadDecimals(lp);\\n        lps[lp].pool = lpPool;\\n        lps[lp].poolType = poolType;\\n        lps[lp].underlyingTokens = new address[](nTokens);\\n        for (uint256 i = 0; i < nTokens; ++i) {\\n            address token = ICurveLP(lpPool).coins(i);\\n            if (token == address(0) || token == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {\\n                revert NativeETHNotSupported();\\n            }\\n            lps[lp].underlyingTokens[i] = token;\\n        }\\n\\n        if (wasRegistered) {\\n            emit TokenRegisteredRepeat(lp, lpPool, nTokens, poolType);\\n        } else {\\n            emit TokenRegistered(lp, lpPool, nTokens, poolType);\\n        }\\n    }\\n\\n    function updateLpPriceProvider(address lp, address priceProvider) external onlyAdmin {\\n        if (!isAdapterLP(lp)) revert IsNotLP(lp);\\n\\n        lpsWithoutLpPrice[lp] = priceProvider;\\n\\n        emit PriceProviderUpdated(lp, priceProvider);\\n    }\\n\\n    function isAdapterLP(address asset) public view returns (bool) {\\n        return lps[asset].pool != address(0);\\n    }\\n\\n    /// @inheritdoc ICurveReentrancyCheck\\n    function setReentrancyVerificationConfig(\\n        address _pool, uint128 _gasLimit, N_COINS _nCoins\\n    ) external virtual onlyAdmin {\\n        _setReentrancyVerificationConfig(_pool, _gasLimit, _nCoins);\\n    }\\n\\n    /// @notice Get the minimum price among all underlying tokens in a Curve LP pool\\n    /// @param _lpToken Curve LP Token address\\n    /// @return minPrice Minimum price among pool coins, denominated in fiat with 18 decimals.\\n    function _lpTokenPoolCoinsMinPrice(address _lpToken) internal view returns (uint256 minPrice) {\\n        CurveLPInfo memory lpInfo = lps[_lpToken];\\n        uint256 length = lpInfo.underlyingTokens.length;\\n\\n        minPrice = 0;\\n        for(uint256 i = 0; i < length; i++) {\\n            address underlyingToken = lpInfo.underlyingTokens[i];\\n            uint256 decimals = IERC20Metadata(underlyingToken).decimals();\\n            // We should unify all prices to find minimal\\n            // We don't need to check if it's 0, because it will be reverted in _getFiatPriceStablePool\\n            // If decimals != 18: price base = (36 - d) + d - 18 = 18, where d = decimals\\n            uint256 price = decimals == 18\\n                ? ORACLE.getFiatPrice1e18(underlyingToken)\\n                : ORACLE.getFiatPrice1e18(underlyingToken) * 10**decimals / 1e18;\\n\\n            if (i == 0) {\\n                minPrice = price;\\n            } else {\\n                minPrice = price < minPrice ? price : minPrice;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Internal function to get the fiat price of a stable Curve LP token.\\n     * @dev Uses the virtual price of the pool to determine the fiat value.\\n     * @param asset Address of the LP token.\\n     * @return price The fiat price of the LP token scaled to 1e18.\\n     */\\n    function _getFiatPriceStablePool(address asset) internal view returns (uint256 price) {\\n        if (!isAdapterLP(asset)) revert IsNotLP(asset);\\n        CurveLPInfo memory lpInfo = lps[asset];\\n\\n        uint256 minPrice = _lpTokenPoolCoinsMinPrice(asset);\\n        uint256 virtualPrice = ICurveLP(lpInfo.pool).get_virtual_price();\\n\\n        // `_lpToken` price calculation\\n        // Expect a `virtualPrice` to be a value close to 10 ** 18.\\n        // So, to have an overflow here a `minPrice` value must be approximately > 10 ** 59.\\n        // About the price calculation algorithm:\\n        // https://news.curve.fi/chainlink-oracles-and-curve-pools/\\n        // As result in base we'll have 18 + 18 - 18 = 18\\n        price = minPrice * virtualPrice / 1e18;\\n        if (price == 0) revert ZeroPrice(); // Zero price is unacceptable\\n    }\\n\\n    /**\\n     * @notice Internal function to get the fiat price of a Curve V2 pool LP token.\\n     * @dev Uses the `lp_price` function of the pool to determine the fiat value.\\n     * @param asset Address of the LP token.\\n     * @return price The fiat price of the LP token scaled to 1e18.\\n     */\\n    function _getFiatPricePoolV2(address asset) internal view returns (uint256 price) {\\n        if (!isAdapterLP(asset)) revert IsNotLP(asset);\\n        CurveLPInfo memory lpInfo = lps[asset];\\n        address provider = lpsWithoutLpPrice[asset] == address(0) ? lpInfo.pool : lpsWithoutLpPrice[asset];\\n\\n        // lp_price() function returns the price in the local quote token (indexed at 0), not in USD.\\n        // To calculate the price in fiat, the oracle must multiply the returned value by the token price.\\n        uint256 lpPrice = ICurveLP(provider).lp_price();\\n        address firstCoin = lps[asset].underlyingTokens[0];\\n        uint256 decimals = IERC20Metadata(firstCoin).decimals();\\n        uint256 coinPrice = ORACLE.getFiatPrice1e18(firstCoin); // in base of 10^(36-decimals)\\n\\n        price = lpPrice * coinPrice / 1e18; // decimals here: 18 + 36 - d - 18 = 36 - d\\n        if (decimals != 18) {\\n            price = price * 10**decimals / 1e18; // if d != 18 => (36 - d) + d - 18 = 18\\n        }\\n        if (price == 0) revert ZeroPrice();\\n    }\\n\\n    function getFiatPrice1e18(address asset) external view returns (uint256) {\\n        if (!isAdapterLP(asset)) revert IsNotLP(asset);\\n        CurveLPInfo memory lpInfo = lps[asset];\\n\\n        if (isLocked(lpInfo.pool)) revert ReentrantLockError();\\n\\n        if (lpInfo.poolType == CurvePoolType.Stable) {\\n            return _getFiatPriceStablePool(asset);\\n        }\\n        if (lpInfo.poolType == CurvePoolType.V2) {\\n            return _getFiatPricePoolV2(asset);\\n        }\\n\\n        // If pool type is CurvePoolType.Default, unknown or not set, revert with an error.\\n        revert LPOracleNotReady();\\n    }\\n\\n    function _safeRemoveLiquidity(address pool, uint256 amount, uint256 nTokens) internal {\\n        // If regular array version fails, try fixed array version with no return value\\n        if (nTokens == 2) {\\n            try ICurveLP(pool).remove_liquidity(amount, [uint256(0), 0]) {\\n                return;\\n            } catch {}\\n        } else if (nTokens == 3) {\\n            try ICurveLP(pool).remove_liquidity(amount, [uint256(0), 0, 0]) {\\n                return;\\n            } catch {}\\n        } else if (nTokens == 4) {\\n            try ICurveLP(pool).remove_liquidity(amount, [uint256(0), 0, 0, 0]) {\\n                return;\\n            } catch {}\\n        }\\n\\n        // If we get here, try the dynamic array version with return value\\n        try ICurveLP(pool).remove_liquidity(amount, new uint256[](nTokens)) {\\n            return;\\n        } catch {\\n            revert RemoveLiquidityError();\\n        }\\n    }\\n\\n    /**\\n     * @notice Withdraw LP tokens with slippage protection using basis points\\n     * @param asset The LP token address\\n     * @param amount The amount of LP tokens to withdraw\\n     * @param maxSlippageBps Maximum allowed slippage in basis points (1 = 0.01%)\\n     * @return results Array of withdrawal results\\n     */\\n    function withdraw(\\n        address asset,\\n        uint256 amount,\\n        uint256 maxSlippageBps\\n    ) public returns (WithdrawResult[] memory results) {\\n        if (!isAdapterLP(asset)) revert IsNotLP(asset);\\n        if (maxSlippageBps >= MAX_BPS) revert InvalidSlippage();\\n\\n        // Calculate expected value of LP tokens being withdrawn\\n        uint256 lpTokenPrice = this.getFiatPrice1e18(asset);\\n        uint256 expectedValueUSD = (amount * lpTokenPrice) / 1e18;\\n        // Calculate minimum acceptable value based on slippage\\n        uint256 minValueUSD = (expectedValueUSD * (MAX_BPS - maxSlippageBps)) / MAX_BPS;\\n\\n        IERC20(asset).safeTransferFrom(msg.sender, address(this), amount);\\n        CurveLPInfo memory lpInfo = lps[asset];\\n\\n        uint256 nTokens = lpInfo.underlyingTokens.length;\\n        results = new WithdrawResult[](nTokens);\\n\\n        // Approve the Curve pool if necessary to enable withdrawal.\\n        if (asset != lpInfo.pool && IERC20(asset).allowance(address(this), lpInfo.pool) < amount) {\\n            IERC20(asset).approve(lpInfo.pool, amount);\\n        }\\n\\n        // Record balances of underlying tokens before liquidity removal.\\n        uint256[] memory balancesBefore = new uint256[](nTokens);\\n        for (uint256 i = 0; i < nTokens; ++i) {\\n            // Due to the check in registerLP we are sure that there is no native ETH here\\n            balancesBefore[i] = IERC20(lpInfo.underlyingTokens[i]).balanceOf(address(this));\\n        }\\n\\n        // Remove liquidity from the pool based on the number of tokens.\\n        _safeRemoveLiquidity(lpInfo.pool, amount, nTokens);\\n\\n        // Calculate results, actual received amounts, and total USD value in one loop\\n        uint256 receivedValueUSD;\\n        for (uint256 i = 0; i < nTokens; ++i) {\\n            address underlyingToken = lpInfo.underlyingTokens[i];\\n            uint256 underlineTokenAmount = IERC20(underlyingToken).balanceOf(address(this)) - balancesBefore[i];\\n            results[i] = WithdrawResult({ token: underlyingToken, amount: underlineTokenAmount });\\n\\n            // Calculate USD value - uses basic token amount directly as per ISuOracle interface\\n            uint256 tokenPrice = ORACLE.getFiatPrice1e18(underlyingToken);\\n            receivedValueUSD += (underlineTokenAmount * tokenPrice) / 1e18;\\n\\n            // Transfer the obtained tokens to the sender.\\n            IERC20(underlyingToken).safeTransfer(msg.sender, underlineTokenAmount);\\n        }\\n\\n        // Check slippage\\n        if (receivedValueUSD < minValueUSD) {\\n            revert SlippageExceeded(expectedValueUSD, receivedValueUSD);\\n        }\\n\\n        emit Withdraw(asset, amount);\\n    }\\n\\n    function emergencyWithdraw(address[] calldata tokens, address receiver) external onlyAdmin {\\n        if (receiver == address(0)) revert ZeroRecipient();\\n\\n        for(uint256 i = 0; i < tokens.length; i++) {\\n            address token = tokens[i];\\n            uint256 balance = IERC20(token).balanceOf(address(this));\\n            if (balance > 0) {\\n                IERC20(token).safeTransfer(receiver, balance);\\n                emit EmergencyWithdraw(token, balance, receiver);\\n            }\\n        }\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x3b7462c11c74346104e8bf154a1a96140486a45fe0cb0afb282b2bd12fa02585\",\"license\":\"BSL 1.1\"},\"contracts/exchange/contracts/periphery/contracts/adapters/Curve/CurveReentrancyCheck.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/adapters/ICurveHackyPool.sol\\\";\\nimport \\\"../../interfaces/adapters/ICurveReentrancyCheck.sol\\\";\\n\\n// solhint-disable max-line-length, no-empty-blocks\\n/// @title Curve read-only reentrancy check\\n/// Copied from Silo: https://github.com/silo-finance/silo-core-v1/blob/master/contracts/priceProviders/curveLPTokens/peggedAssetsPools/CurveReentrancyCheck.sol\\n// solhint-enable max-line-length\\nabstract contract CurveReentrancyCheck is ICurveReentrancyCheck {\\n    /// @dev Minimal acceptable gas limit for the check\\n    // ~2700 - 5600 when we do a call to an invalid interface (depends on an input data size)\\n    // ~1800 if the pool is locked\\n    uint256 constant public MIN_GAS_LIMIT = 3000;\\n\\n    mapping(address => ReentrancyConfig) public poolReentrancyConfig;\\n\\n    /// @notice Set/Update a pool configuration for the reentrancy check\\n    /// @param _pool address\\n    /// @param _gasLimit the gas limit to be set on the check execution\\n    /// @param _nCoins the number of the coins in the Curve pool (N_COINS)\\n    function _setReentrancyVerificationConfig(address _pool, uint128 _gasLimit, N_COINS _nCoins) internal virtual {\\n        if (_pool == address(0)) revert InvalidPoolConfiguration();\\n        if (_gasLimit < MIN_GAS_LIMIT) revert InvalidPoolConfiguration();\\n        if (_nCoins < N_COINS.TWO_COINS) revert InvalidPoolConfiguration();\\n\\n        poolReentrancyConfig[_pool] = ReentrancyConfig({\\n            gasLimit: _gasLimit,\\n            nCoins: _nCoins\\n        });\\n\\n        // The call to the pool with an invalid input also reverts with the gas consumption lower\\n        // than defined threshold. Approximately 2700 gas for an input with 3 coins and 5600 for 8.\\n        // We do a sanity check of the interface by checking if a pool is locked on a setup.\\n        // The call to the valid interface will consume more than `MIN_GAS_LIMIT`.\\n        if (isLocked(_pool)) revert InvalidInterface();\\n\\n        emit ReentrancyCheckConfigUpdated(_pool, _gasLimit, _nCoins);\\n    }\\n\\n    /// @notice Verifies if the `lock` is activate on the Curve pool\\n    // The idea is to measure the gas consumption of the `remove_liquidity` fn.\\n    function isLocked(address _pool) public virtual view returns (bool) {\\n        ReentrancyConfig memory config = poolReentrancyConfig[_pool];\\n\\n        if (config.gasLimit == 0) revert MissingPoolReentrancyConfig();\\n\\n        uint256 gasStart = gasleft();\\n\\n        ICurveHackyPool pool = ICurveHackyPool(_pool);\\n\\n        if (config.nCoins == N_COINS.TWO_COINS) {\\n            uint256[2] memory amounts;\\n            try pool.remove_liquidity{gas: config.gasLimit}(0, amounts) {} catch (bytes memory) {}\\n        } else if (config.nCoins == N_COINS.THREE_COINS) {\\n            uint256[3] memory amounts;\\n            try pool.remove_liquidity{gas: config.gasLimit}(0, amounts) {} catch (bytes memory) {}\\n        } if (config.nCoins == N_COINS.FOUR_COINS) {\\n            uint256[4] memory amounts;\\n            try pool.remove_liquidity{gas: config.gasLimit}(0, amounts) {} catch (bytes memory) {}\\n        }\\n\\n        uint256 gasSpent;\\n        // `gasStart` will be always > `gasleft()`\\n        unchecked { gasSpent = gasStart - gasleft(); }\\n\\n        return gasSpent > config.gasLimit ? false /* is not locked */ : true /* locked */;\\n    }\\n}\\n// solhint-enable no-empty-blocks\\n\",\"keccak256\":\"0xea2e3587a63a55718a3f34b8276e7f0fe5e244e7af06998cb4519e6801978878\",\"license\":\"BUSL-1.1\"},\"contracts/exchange/contracts/periphery/contracts/interfaces/access-control/ISuAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\nimport \\\"../../access-control/SuAccessRoles.sol\\\";\\n\\n/**\\n * @notice Access control for contracts\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n **/\\ninterface ISuAccessControl is IAccessControlUpgradeable, IERC165Upgradeable {\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\\n}\\n\",\"keccak256\":\"0x25724ac502fd6418ccd38273b276de4b2fdecd023d723c5d80c9f0a27c407bcd\",\"license\":\"MIT\"},\"contracts/exchange/contracts/periphery/contracts/interfaces/adapters/ICurveAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ILPAdapter.sol\\\";\\n\\n/**\\n * @title ICurveAdapter\\n * @notice Interface for CurveAdapter contract.\\n */\\ninterface ICurveAdapter is ILPAdapter {\\n    /**\\n     * @dev\\n     * Default - It's pool that is not from stablecoins and is not V2 Factory.\\n     Oracle for this pool isn't secured from pool manipulations, so we can't create secure getPrice function.\\n     the example of such pool is tricrypto2 (USDT/WBTC/ETH): 0xD51a44d3FaE010294C616388b506AcdA1bfAAE46.\\n     * STABLE - It's pool based on stablecoins or eth, like 3pool, crvUSD/USDT or steth\\n     *          3pool: 0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7\\n     * V2 - It's V2 Factory pool that have LP-oracle inside, like TriCRV, TricryptoUSDC\\n     *      TricryptoUSDC pool: 0x7f86bf177dd4f3494b841a37e810a34dd56c829b\\n    */\\n    enum CurvePoolType { Default, Stable, V2 }\\n\\n    error RemoveLiquidityError();\\n    error ReentrantLockError();\\n    error ZeroPrice();\\n    error NativeETHNotSupported();\\n    error InvalidSlippage();\\n    error SlippageExceeded(uint256 expectedValueUSD, uint256 receivedValueUSD);\\n    error UnsupportedTokenCount(uint256 tokenCount);\\n\\n    event TokenRegisteredRepeat(address lp, address lpPool, uint256 nTokens, CurvePoolType poolType);\\n    event TokenRegistered(address lp, address lpPool, uint256 nTokens, CurvePoolType poolType);\\n    event Withdraw(address asset, uint256 amount);\\n    event PriceProviderUpdated(address asset, address priceProvider);\\n\\n    struct CurveLPInfo {\\n        address pool;\\n        CurvePoolType poolType;\\n        address[] underlyingTokens;\\n    }\\n\\n    /* ==================== MUTABLE METHODS ==================== */\\n    /**\\n      * @notice Register the given LP token address and set the LP pool\\n      * @dev Checks that none of the underlying tokens is native ETH\\n      * @param lp address of LP token\\n      * @param lpPool address of pool of {lp} LP-token\\n      * @param nTokens number of underlyingTokens\\n     **/\\n    function registerLP(address lp, address lpPool, uint256 nTokens, CurvePoolType poolType) external;\\n\\n    /**\\n    * @notice Add/remove priceProvider address for lp token.\\n      * @dev We have a particular case with the tricrypto2 pool in the Ethereum network,\\n      * as it is without the lp_rice() function, and it is implemented in the separate smart contract.\\n      * Function can be called only for registered lp and only by admin.\\n      * @param lp address of LP token\\n      * @param priceProvider address of separate smart contract that contains lp_price() function\\n     **/\\n    function updateLpPriceProvider(address lp, address priceProvider) external;\\n}\",\"keccak256\":\"0xd787907e6d9a8b6b10c4f0761024bb486ecdf0023fb9c5266b23818be66e5b6c\",\"license\":\"BSL 1.1\"},\"contracts/exchange/contracts/periphery/contracts/interfaces/adapters/ICurveHackyPool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n// solhint-disable func-name-mixedcase\\ninterface ICurveHackyPool {\\n    // We do not expect to write in the store on this call.\\n    // Our expectation is 1 sload operation for the `lock` status check + revert.\\n    // Because of it this function can be view which opens a possibility to do\\n    // a verification in the price provider on the `getPrice` fn execution.\\n    function remove_liquidity(uint256 _tokenAmount, uint256[2] calldata _amounts) external view;\\n    function remove_liquidity(uint256 _tokenAmount, uint256[3] calldata _amounts) external view;\\n    function remove_liquidity(uint256 _tokenAmount, uint256[4] calldata _amounts) external view;\\n    function remove_liquidity(uint256 _tokenAmount, uint256[5] calldata _amounts) external view;\\n    function remove_liquidity(uint256 _tokenAmount, uint256[6] calldata _amounts) external view;\\n    function remove_liquidity(uint256 _tokenAmount, uint256[7] calldata _amounts) external view;\\n    function remove_liquidity(uint256 _tokenAmount, uint256[8] calldata _amounts) external view;\\n}\\n// solhint-enable func-name-mixedcase\\n\",\"keccak256\":\"0xa1879d7ffd93b0fe9ef58a42842ccce6f0c0b19786ca9619f8812065fc2aa7b0\",\"license\":\"BUSL-1.1\"},\"contracts/exchange/contracts/periphery/contracts/interfaces/adapters/ICurveReentrancyCheck.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\ninterface ICurveReentrancyCheck {\\n    /* ==================== ENUMS ==================== */\\n    enum N_COINS {\\n        NOT_CONFIGURED,\\n        INVALID,\\n        TWO_COINS,\\n        THREE_COINS,\\n        FOUR_COINS\\n    }\\n\\n    /* ==================== STRUCTS ==================== */\\n    struct ReentrancyConfig {\\n        uint128 gasLimit;\\n        N_COINS nCoins;\\n    }\\n\\n    /* ==================== ERRORS ==================== */\\n    /// @dev Revert if the pool reentrancy config is not configured\\n    error MissingPoolReentrancyConfig();\\n    /// @dev Revert on the invalid pool configuration\\n    error InvalidPoolConfiguration();\\n    /// @dev Pool interface validation\\n    error InvalidInterface();\\n\\n    /* ==================== EVENTS ==================== */\\n    /// @dev Write info the log about the Curve pool reentrancy check config update\\n    event ReentrancyCheckConfigUpdated(address _pool, uint256 _gasLimit, N_COINS _nCoins);\\n\\n    /// @notice Set/Update a pool configuration for the reentrancy check\\n    /// @param _pool address\\n    /// @param _gasLimit the gas limit to be set on the check execution\\n    /// @param _nCoins the number of the coins in the Curve pool (N_COINS)\\n    function setReentrancyVerificationConfig(address _pool, uint128 _gasLimit, N_COINS _nCoins) external;\\n}\",\"keccak256\":\"0x032ea5ef7bf9be8731ffaf32d024c86d6cd47e07ecaa62a32dfbee69945f19b3\",\"license\":\"BUSL-1.1\"},\"contracts/exchange/contracts/periphery/contracts/interfaces/adapters/ILPAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"../oracle/ISuOracle.sol\\\";\\n\\nstruct WithdrawResult {\\n    address token;\\n    uint256 amount;\\n}\\n\\ninterface ILPAdapter is ISuOracle {\\n    /* ======================== ERRORS ======================== */\\n    error IsNotLP(address asset);\\n    error LPOracleNotReady();\\n    error BadMainUnderlyingToken();\\n    error BadDecimals(address asset);\\n    error ZeroRecipient();\\n\\n    /* ========================= EVENTS ========================= */\\n    event EmergencyWithdraw(address indexed token, uint256 amount, address receiver);\\n\\n    /* ==================== MUTABLE METHODS ==================== */\\n    /**\\n      * @notice Unwrap LP token with depth 2 (if underlying token is LP, it's also unwrapping) with slippage protection\\n      * @param asset - address of LP token to withdraw/unwrap\\n      * @param amount - amount of asset to withdraw/unwrap\\n      * @param maxSlippageBps Maximum allowed slippage in basis points (1 = 0.01%)\\n     **/\\n    function withdraw(address asset, uint256 amount, uint256 maxSlippageBps) external returns (WithdrawResult[] memory);\\n\\n    /**\\n     * @notice Withdraw tokens from the adapter in case of emergency.\\n     * @dev This function is restricted to the admin and allows for emergency withdrawal of tokens.\\n     * @param tokens List of tokens to withdraw.\\n     * @param receiver Address of the receiver to receive the tokens.\\n     */\\n    function emergencyWithdraw(address[] calldata tokens, address receiver) external;\\n\\n    /* ====================== VIEW METHODS ==================== */\\n    /**\\n      * @notice Returns if asset ig Balancer LP token, registered in our adapter\\n      * @param asset - address of LP token to check\\n     **/\\n    function isAdapterLP(address asset) external returns (bool);\\n}\",\"keccak256\":\"0x6b173310065afa386f75f4c548ca483b3db8a2464331da73a5d2092ff0f1aff8\",\"license\":\"BSL 1.1\"},\"contracts/exchange/contracts/periphery/contracts/interfaces/oracle/ISuOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\n// solhint-disable compiler-version\\npragma solidity >=0.7.6;\\n\\ninterface ISuOracle {\\n    /**\\n     * @notice WARNING! Read this description very carefully!\\n     *     function getFiatPrice1e18(address asset) returns (uint256) that:\\n     *         basicAmountOfAsset * getFiatPrice1e18(asset) / 1e18 === $$ * 1e18\\n     *     in other words, it doesn't matter what's the erc20.decimals is,\\n     *     you just multiply token balance in basic units on value from oracle and get dollar amount multiplied on 1e18.\\n     *\\n     * different assets have different deviation threshold (errors)\\n     *     for wBTC it's <= 0.5%, read more https://data.chain.link/ethereum/mainnet/crypto-usd/btc-usd\\n     *     for other asset is can be larger based on particular oracle implementation.\\n     *\\n     * examples:\\n     *     market price of btc = $30k,\\n     *     for 0.1 wBTC the unit256 amount is 0.1 * 1e18\\n     *     0.1 * 1e18 * (price1e18 / 1e18) == $3000 == uint256(3000*1e18)\\n     *     => price1e18 = 30000 * 1e18;\\n     *\\n     *     market price of usdt = $0.97,\\n     *     for 1 usdt uint256 = 1 * 1e6\\n     *     so 1*1e6 * price1e18 / 1e18 == $0.97 == uint256(0.97*1e18)\\n     *     => 1*1e6 * (price1e18 / 1e18) / (0.97*1e18)   = 1\\n     *     =>  price1e18 = 0.97 * (1e18/1e6) * 1e18\\n     *\\n     *    assume market price of wBTC = $31,503.77, oracle error = $158\\n     *\\n     *     case #1: small amount of wBTC\\n     *         we have 0.0,000,001 wBTC that is worth v = $0.00315 \\u00b1 $0.00001 = 0.00315*1e18 = 315*1e13 \\u00b1 1*1e13\\n     *         actual balance on the asset b = wBTC.balanceOf() =  0.0000001*1e18 = 1e11\\n     *         oracle should return or = oracle.getFiatPrice1e18(wBTC) <=>\\n     *         <=> b*or = v => v/b = 315*1e13 / 1e11 = 315*1e2 \\u00b1 1e2\\n     *         error = or.error * b = 1e2 * 1e11 = 1e13 => 1e13/1e18 usd = 1e-5 = 0.00001 usd\\n     *\\n     *     case #2: large amount of wBTC\\n     *         v = 2,000,000 wBTC = $31,503.77 * 2m \\u00b1 158*2m = $63,007,540,000 \\u00b1 $316,000,000 = 63,007*1e24 \\u00b1 316*1e24\\n     *         for calc convenience we increase error on 0.05 and have v = 63,000*24 \\u00b1 300*1e24 = (630 \\u00b1 3)*1e26\\n     *         b = 2*1e6 * 1e18 = 2*1e24\\n     *         or = v/b = (630 \\u00b1 3)*1e26 / 2*1e24 = 315*1e2 \\u00b1 1.5*1e2\\n     *         error = or.error * b = 1.5*100 * 2*1e24 = 3*1e26 = 3*1e8*1e18 = $300,000,000 ~ $316,000,000\\n     *\\n     *     assume the market price of USDT = $0.97 \\u00b1 $0.00485,\\n     *\\n     *     case #3: little amount of USDT\\n     *         v = USDT amount 0.005 = 0.005*(0.97 \\u00b1 0.00485) = 0.00485*1e18 \\u00b1 0.00002425*1e18 = 485*1e13 \\u00b1 3*1e13\\n     *         we rounded error up on (3000-2425)/2425 ~= +24% for calculation convenience.\\n     *         b = USDT.balanceOf() = 0.005*1e6 = 5*1e3\\n     *         b*or = v => or = v/b = (485*1e13 \\u00b1 3*1e13) / 5*1e3 = 970*1e9 \\u00b1 6*1e9\\n     *         error = 6*1e9 * 5*1e3 / 1e18 = 30*1e12/1e18 = 3*1e-5 = $0,00005\\n     *\\n     *     case #4: lot of USDT\\n     *         v = we have 100,000,000,000 USDT = $97B = 97*1e9*1e18 \\u00b1 0.5*1e9*1e18\\n     *         b = USDT.balanceOf() = 1e11*1e6 = 1e17\\n     *         or = v/b = (97*1e9*1e18 \\u00b1 0.5*1e9*1e18) / 1e17 = 970*1e9 \\u00b1 5*1e9\\n     *         error = 5*1e9 * 1e17 = 5*1e26 = 0.5 * 1e8*1e18\\n     *\\n     * @param asset - address of erc20 token contract\\n     * @return usdPrice1e18 such that asset.balanceOf() * getFiatPrice1e18(asset) / 1e18 == $$ * 1e18\\n     **/\\n    function getFiatPrice1e18(address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa56b9cc86ef5935efecc276e6a3188d518f1a99cad960083a8de35849c997687\",\"license\":\"UNLICENSED\"},\"contracts/exchange/contracts/periphery/contracts/vendor/curve/ICurveLP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICurveLP {\\n    function add_liquidity(uint256[2] memory, uint256) external;\\n    function add_liquidity(uint256[3] memory, uint256) external;\\n\\n    function remove_liquidity(uint256, uint256[] memory) external returns (uint256[] memory);\\n    function remove_liquidity(uint256, uint256[2] memory) external;\\n    function remove_liquidity(uint256, uint256[3] memory) external;\\n    function remove_liquidity(uint256, uint256[4] memory) external;\\n\\n    /// @notice Removes liquidity from the pool in a specified asset\\n    function remove_liquidity_one_coin(uint256 tokenAmount, int128 i, uint256 minAmount) external;\\n\\n    function coins(uint256 i) external view returns (address);\\n\\n    function balances(uint256 i) external view returns (uint256);\\n\\n    function calc_add_one_coin(uint256[] memory amounts, bool deposit) external view returns (uint256);\\n\\n    function get_virtual_price() external view returns (uint256);\\n\\n    // only for V2 Pools\\n    function lp_price() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x8cd28cbb95cfb004743c31253fdcabc7b8c625e690fe785964b153d2a5707007\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608080604052346100c1576000549060ff8260081c1661006f575060ff80821603610034575b60405161287290816100c78239f35b60ff90811916176000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160ff8152a138610025565b62461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b6064820152608490fd5b600080fdfe608080604052600436101561001357600080fd5b60003560e01c90816301ffc9a7146116c35750806303ee9f2214611696578063103d208b1461164457806338013f021461161b578063438280dd146115e057806346faa4d5146111a9578063485cc95514610f595780634a4fbeec14610f365780635136211714610f0957806371d0fb4114610ece57806375b238fc14610eb25780637ce1ffeb14610e955780638e5313e014610e5a5780638ee7106714610e1f578063a50dfab914610d18578063b38234f314610cdd578063b5c5f67214610657578063b9ac2b381461062c578063bd5f5be6146105f1578063d0e8fa82146105b6578063d12e733214610568578063d1dff44f146103c1578063d2351cee14610386578063dc97e84e1461034b578063e9c26518146103105763ef89002d1461013d57600080fd5b3461030b57606036600319011261030b5761015661174e565b6001600160801b0390602435828116919082900361030b5760443592600584101561030b5760008054604051632474521560e21b81526004810192909252336024830152602092916001600160a01b039184908290604490829060101c86165afa9081156102ff576000916102d2575b50156102c05783169283156102ae57610bb885106102ae57600286106102ae576040516101f2816117af565b8581528381019261020388856125c1565b856000526033855260406000209151169281549051936005851015610298576102439460ff60801b9060801b169160018060881b031916171790556125cd565b610286577f2662467752a8b3cb3826319467b64a8cbad9d903fbbd8b4c31523f72f7ae915d9360609361028392604051948552840152604083019061177a565ba1005b6040516382542ee160e01b8152600490fd5b634e487b7160e01b600052602160045260246000fd5b60405163153e50cf60e11b8152600490fd5b604051631886ea7d60e11b8152600490fd5b6102f29150843d86116102f8575b6102ea81836117dd565b810190611800565b386101c6565b503d6102e0565b6040513d6000823e3d90fd5b600080fd5b3461030b57600036600319011261030b5760206040517f3b5d4cc60d3ec3516ee8ae083bd60934f6eb2a6c54b1229985c41bfb092b26038152f35b3461030b57600036600319011261030b5760206040517f9a9aef7c1247d5fc769b0185c052913e39673da29a880317dfd20ebf86f26a498152f35b3461030b57600036600319011261030b5760206040517fb0fdd1623e42dbffda4acd8bd643e1cb69f00f0e83abeaa8150ee42cf0fd105e8152f35b3461030b57604036600319011261030b576004356001600160401b0380821161030b573660238301121561030b57816004013590811161030b576024916005368484831b8401011161030b57610415611764565b60018060a01b03928360005460101c16926040518094632474521560e21b825260006004830152338983015281604460209788935afa9081156102ff5760009161054b575b50156102c0578483169182156105395760005b87811061047657005b8881841b830101359087821680920361030b576040516370a0823160e01b81523060048201529187838c81845afa80156102ff5760009061050a575b6104c49350806104c9575b505061185b565b61046d565b6040816104f87faaeda929aa102e867049528ec7cd2499e3a2f8846e736ae7935f234dfbf500d9938b8661207a565b8151908152888b820152a28a806104bd565b508783813d8311610532575b61052081836117dd565b8101031261030b576104c492516104b2565b503d610516565b60405163d27b444360e01b8152600490fd5b6105629150853d87116102f8576102ea81836117dd565b8861045a565b3461030b57602036600319011261030b5760406001600160a01b038061058c61174e565b1660005260346020526105b482600020548351928116835260ff602084019160a01c16611787565bf35b3461030b57600036600319011261030b5760206040517f76d0567582f23e1e9d7a13eeba60f9aea9d69b8da87ca27a8bf3698b35c653db8152f35b3461030b57600036600319011261030b5760206040517f4f14c8366fa999817edc9f29824eb88a00cc31225e2156f399da4bc91049eb108152f35b3461030b57602036600319011261030b57602061064f61064a61174e565b6118d5565b604051908152f35b3461030b57606036600319011261030b5761067061174e565b6044359061067d816118b5565b15610cbb5761271080831015610ca957604051631735856760e31b81526001600160a01b0383166004820152602081602481305afa9081156102ff57600091610c75575b506106d7670de0b6b3a764000091602435611848565b04928103818111610a12576106ec9084611848565b04916040516323b872dd60e01b602082015233602482015230604482015260243560648201526064815260a081019080821060018060401b03831117610c5f57604091909152610745906001600160a01b0384166120af565b60018060a01b038216600052603460205260406000206040519061076882611794565b80546001600160a01b038116835260a01c60ff16906003821015610298576001916020840152016040518082602082945493848152019060005260206000209260005b818110610c3d5750506107c0925003826117dd565b80604083015251936107d185611831565b946107df60405196876117dd565b8086526107eb81611831565b60005b601f1982018110610c1857505082516001600160a01b038681169116908114159081610b9a575b50610b29575b9161082583612048565b9260005b818110610a905750815161084b908290602435906001600160a01b0316612320565b6000936000925b828410610913575050505081106108f55760405184907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243649080610898602435888361202d565b0390a160405180916020820160208352815180915260206040840192019060005b8181106108c7575050500390f35b825180516001600160a01b0316855260209081015181860152869550604090940193909201916001016108b9565b60449250604051916371c4efed60e01b835260048301526024820152fd5b9091929460018060a01b0361092c87604085015161200b565b511695604051916370a0823160e01b83523060048401526020836024818b5afa9283156102ff57600093610a5c575b50610966828661200b565b518303928311610a125760405161097c816117af565b88815283602082015261098f838d61200b565b5261099a828c61200b565b50603654604051631735856760e31b8152600481018a905290602090829060249082906001600160a01b03165afa9081156102ff57600091610a28575b506109eb670de0b6b3a76400009185611848565b048101809111610a1257610a0a92610a059198339061207a565b61185b565b929190610852565b634e487b7160e01b600052601160045260246000fd5b90506020813d602011610a54575b81610a43602093836117dd565b8101031261030b57516109eb6109d7565b3d9150610a36565b9092506020813d602011610a88575b81610a78602093836117dd565b8101031261030b5751918b61095b565b3d9150610a6b565b602490602060018060a0989596981b03610aae8360408a015161200b565b5116604051938480926370a0823160e01b82523060048301525afa80156102ff57600090610af5575b610aec9250610ae6828561200b565b5261185b565b93919093610829565b506020823d602011610b21575b81610b0f602093836117dd565b8101031261030b57610aec9151610ad7565b3d9150610b02565b825160405163095ea7b360e01b81529060209082908190610b5a90602435906001600160a01b03166004840161202d565b038160006001600160a01b038b165af180156102ff57610b7b575b5061081b565b610b939060203d6020116102f8576102ea81836117dd565b5086610b75565b604051636eb1769f60e11b8152915060209082908190610bbe90306004840161189b565b03816001600160a01b038a165afa9081156102ff57600091610be6575b506024351187610815565b90506020813d602011610c10575b81610c01602093836117dd565b8101031261030b575187610bdb565b3d9150610bf4565b602090604051610c27816117af565b6000815260008382015282828b010152016107ee565b84546001600160a01b03168352600194850194869450602090930192016107ab565b634e487b7160e01b600052604160045260246000fd5b90506020813d602011610ca1575b81610c90602093836117dd565b8101031261030b57516106d76106c1565b3d9150610c83565b60405163334ee9a160e01b8152600490fd5b604051631e489be560e01b81526001600160a01b039091166004820152602490fd5b3461030b57600036600319011261030b5760206040517fd83f5343da19b478b15a140c301a868be9e02603958f38fbd822b9d5c0a289168152f35b3461030b57604036600319011261030b57610d3161174e565b610d39611764565b60018060a01b0391604460208460005460101c1660405192838092632474521560e21b8252600060048301523360248301525afa9081156102ff57600091610e01575b50156102c057610d8b816118b5565b15610de757827ff01c4ba47ffa16ddc86be088e27d891895d6944b4f1b88a7d30fedb0296de55c9382166000526035602052604060002090831660018060a01b0319825416179055610de26040519283928361189b565b0390a1005b604051631e489be560e01b81529083166004820152602490fd5b610e19915060203d81116102f8576102ea81836117dd565b84610d7c565b3461030b57602036600319011261030b5760206001600160a01b0380610e4361174e565b166000526035825260406000205416604051908152f35b3461030b57600036600319011261030b5760206040517fe453bacb314e78dcd5192e6b1a2b1f0e7c76e92f6b7e429a6a90f04e39db3b768152f35b3461030b57600036600319011261030b576020604051610bb88152f35b3461030b57600036600319011261030b57602060405160008152f35b3461030b57600036600319011261030b5760206040517f880a91047114272656e533301261260c75e4d11543ac7303d6fe4204579ec7278152f35b3461030b57602036600319011261030b576020610f2c610f2761174e565b6118b5565b6040519015158152f35b3461030b57602036600319011261030b576020610f2c610f5461174e565b6125cd565b3461030b57604036600319011261030b57610f7261174e565b610f7a611764565b60005460ff8160081c16159081809261119c575b8015611185575b156111295760ff19811660011760005581611117575b506000549160ff8360081c16156110be5762010000600160b01b03601085901b1662010000600160b01b031984168117600055936001600160a01b03919082168015908115611061575b5061104f571660018060a01b0319603654161760365561101157005b610100600160b01b03191617600055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a1005b6040516384d942fd60e01b8152600490fd5b6040516301ffc9a760e01b8152637965db0b60e01b60048201529150602090829060249082905afa9081156102ff576000916110a0575b501586610ff5565b6110b8915060203d81116102f8576102ea81836117dd565b86611098565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b61ffff19166101011760005583610fab565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b158015610f955750600160ff821614610f95565b50600160ff821610610f8e565b3461030b57608036600319011261030b576111c261174e565b6111ca611764565b6003606435101561030b5760008054604051632474521560e21b815260048101929092523360248301526020908290604490829060101c6001600160a01b03165afa9081156102ff576000916115c1575b50156102c0576004604435116115a7576001600160a01b0382811660008181526034602090815260409182902054915163313ce56760e01b8152919093161515929091829060049082905afa9081156102ff5760129160ff91600091611578575b501603611557576001600160a01b03838116600090815260346020526040902080546001600160a81b0319169184169190911760643560a01b60ff60a01b161790556112c9604435611831565b6112d660405191826117dd565b6044358152601f196112e9604435611831565b013660208301376001600160a01b03841660009081526034602052604090208151916001909101906001600160401b038311610c5f57600160401b8311610c5f57815483835580841061152d575b5060200190600052602060002060005b838110611510575050505060005b60443581106113d657501561139d577f8dcd8acd4741b1da9306006a2b3bf810b8de7eab39555875d014798096663b7d91610de260405192839260643591604435918561186a565b7f88b1242df2c48c77c22838236f32ce429163319eedcdfbc5e0e6ac2d1cb4ef1291610de260405192839260643591604435918561186a565b60405163c661065760e01b815260048101829052906020826024816001600160a01b0388165afa9182156102ff576000926114cc575b506001600160a01b0382161580156114a6575b6114945760018060a01b0385166000526034602052600160406000200191825482101561147e5760009283526020909220810180546001600160a01b0319166001600160a01b03909316929092179091556114799061185b565b611355565b634e487b7160e01b600052603260045260246000fd5b60405163b70c48fd60e01b8152600490fd5b506001600160a01b03821673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1461141f565b9091506020813d602011611508575b816114e8602093836117dd565b8101031261030b57516001600160a01b038116810361030b57908561140c565b3d91506114db565b82516001600160a01b031681830155602090920191600101611347565b826000526020600020908482015b818301811061154b575050611337565b6000815560010161153b565b60405163144a426560e31b81526001600160a01b0384166004820152602490fd5b61159a915060203d6020116115a0575b61159281836117dd565b810190611818565b8661127c565b503d611588565b604051630a4fd85f60e31b81526044356004820152602490fd5b6115da915060203d6020116102f8576102ea81836117dd565b8361121b565b3461030b57600036600319011261030b5760206040517f39f61ca2a1a28fee144218173ec637b649a353e4026b2738c673800e5bf1437b8152f35b3461030b57600036600319011261030b576036546040516001600160a01b039091168152602090f35b3461030b57602036600319011261030b576001600160a01b0361166561174e565b166000526033602052604080600020546105b482519160018060801b038116835260ff602084019160801c1661177a565b3461030b57600036600319011261030b5760005460405160109190911c6001600160a01b03168152602090f35b3461030b57602036600319011261030b5760043563ffffffff60e01b811680910361030b576000546301ffc9a760e01b835260048301919091526020908290602490829060101c6001600160a01b03165afa80156102ff57602091600091611731575b506040519015158152f35b6117489150823d81116102f8576102ea81836117dd565b82611726565b600435906001600160a01b038216820361030b57565b602435906001600160a01b038216820361030b57565b9060058210156102985752565b9060038210156102985752565b606081019081106001600160401b03821117610c5f57604052565b604081019081106001600160401b03821117610c5f57604052565b6001600160401b038111610c5f57604052565b601f909101601f19168101906001600160401b03821190821017610c5f57604052565b9081602091031261030b5751801515810361030b5790565b9081602091031261030b575160ff8116810361030b5790565b6001600160401b038111610c5f5760051b60200190565b81810292918115918404141715610a1257565b6000198114610a125760010190565b6001600160a01b0391821681529116602082015260408101919091526080810192916118999160600190611787565b565b6001600160a01b0391821681529116602082015260400190565b6001600160a01b0390811660009081526034602052604090205416151590565b906000906118e2836118b5565b15611fea5760018060a01b03808416938484526020906034825260409485812086519761190e89611794565b8154938685168a5260ff809560a01c16998681019060039b8c811015611f545782528860018096018c5190818b82549182815201918a528b8a20908c8a8c915b838310611fd05750505050509061196b81611976959303826117dd565b8d82015251166125cd565b611fbf5780518b811015611fab578414611c2357518a811015611bf8576002146119ab578851636844a2db60e11b8152600490fd5b969795966119b8906118b5565b15611c0c57808352603485528583208651996119d38b611794565b8582548a81168d5260a01c1690811015611bf8578a8701528651908301805480835290855286852082880191865b818110611be3575050509780999a82611a21899a9b94849a9503826117dd565b818b015283865260358352898620548216611bd85751165b60048951809881936354f0f7d560e01b8352165afa948515611b87578395611ba5575b5082526034855285822001805415611b9157815285848220541691855163313ce56760e01b81528581600481875afa908115611b8757908692918491611b6a575b50169660365416926024875180958193631735856760e31b835260048301525afa938415611b5e578194611b28575b505050611ae3670de0b6b3a7640000928392611848565b049260128103611b0a575b50508115611afa575090565b51634dfba02360e01b8152600490fd5b92611b19611b1f92939461201f565b90611848565b04903880611aee565b909180939450813d8311611b57575b611b4181836117dd565b81010312611b5457505190388080611acc565b80fd5b503d611b37565b508451903d90823e3d90fd5b611b819150833d85116115a05761159281836117dd565b38611a9d565b87513d85823e3d90fd5b634e487b7160e01b82526032600452602482fd5b9094508581813d8311611bd1575b611bbd81836117dd565b81010312611bcd57519338611a5c565b8280fd5b503d611bb3565b508885205416611a39565b82548c16845292890192918601918601611a01565b634e487b7160e01b85526021600452602485fd5b602490865190631e489be560e01b82526004820152fd5b50611c36909991939596949297996118b5565b15611f93578285526034865287852092885193611c5285611794565b838154878116875260a01c1683811015611f7f578589015289519089018054808352908852888820908290818b01908a5b8d8d838310611f685750505050611c9c925003826117dd565b89850152855260348652878520885191611cb583611794565b838254878116855260a01c1690811015611f5457978291819499898c9501520182518094898354928381520192895289892091895b818110611f3c575050505083611d019103846117dd565b01908082525195849685925b818410611d9d57505050506004929184915116865193848092630176f71760e71b82525afa928315611b5e578193611d62575b505050611d5690670de0b6b3a764000092611848565b04908115611afa575090565b9091809350813d8311611d96575b611d7a81836117dd565b81010312611b5457505181611d56670de0b6b3a7640000611d40565b503d611d70565b9091929785611dad8a845161200b565b51168a5163313ce56760e01b81526004908a818381865afa908115611f325791878e9594928d948d91611f15575b501660128103611e8257506024908a6036541695519586938492631735856760e31b84528301525afa8015611e78578890611e43575b611e249250905b8a611e2c57509861185b565b929190611d0d565b80821015611e3c57505b9861185b565b9050611e36565b50908881813d8311611e71575b611e5a81836117dd565b81010312611e6d5790611e249151611e11565b8780fd5b503d611e50565b8b513d8a823e3d90fd5b9291906024908b6036979697541695519586938492631735856760e31b84528301525afa918215611f0b578992611ed6575b50611ecf611e249392611b19670de0b6b3a76400009361201f565b0490611e18565b9091508981813d8311611f04575b611eee81836117dd565b81010312611f00575190611ecf611eb4565b8880fd5b503d611ee4565b8c513d8b823e3d90fd5b611f2c9150853d87116115a05761159281836117dd565b38611ddb565b8d513d8c823e3d90fd5b83548a1685528d9650938b0193928201928201611cea565b634e487b7160e01b87526021600452602487fd5b86548d168552958101958795509093019201611c83565b634e487b7160e01b88526021600452602488fd5b8751631e489be560e01b815260048101849052602490fd5b634e487b7160e01b86526021600452602486fd5b895163038c2bd760e61b8152600490fd5b845490971685528f96949094019392830192018a8e61194e565b604051631e489be560e01b81526001600160a01b0384166004820152602490fd5b805182101561147e5760209160051b010190565b604d8111610a1257600a0a90565b6001600160a01b039091168152602081019190915260400190565b9061205282611831565b61205f60405191826117dd565b8281528092612070601f1991611831565b0190602036910137565b6120af61189993926120a160405194859263a9059cbb60e01b60208501526024840161202d565b03601f1981018452836117dd565b60405161210d916001600160a01b03166120c8826117af565b6000806020958685527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656487860152868151910182855af1612107612195565b916121d4565b80519082821592831561217d575b505050156121265750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b61218d9350820181019101611800565b38828161211b565b3d156121cf573d906001600160401b038211610c5f57604051916121c3601f8201601f1916602001846117dd565b82523d6000602084013e565b606090565b9192901561223657508151156121e8575090565b3b156121f15790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156122495750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b82851061228f575050604492506000838284010152601f80199101168101030190fd5b848101820151868601604401529381019385935061226c565b6000915b600483106122b957505050565b6001908251815260208091019201920191906122ac565b6000915b600383106122e157505050565b6001908251815260208091019201920191906122d4565b6000915b6002831061230957505050565b6001908251815260208091019201920191906122fc565b9091600281036124bc576040516001600160a01b03831690612341816117af565b600090818152816020820152823b156124b857606461237d918360405195869485936316cd8e2760e21b85528b600486015260248501906122f8565b5af190816124a9575b506124a45761239490612048565b90604051809363350376e360e21b825260448201906004830152604060248301528351809152606482019060208095019060005b8682821061248d575050505091816000818195039260018060a01b03165af19182612406575b505061189957604051638ad816d360e01b8152600490fd5b3d806000833e61241681836117dd565b810190828183031261030b578051906001600160401b03821161030b570181601f8201121561030b57805190838061244d84611831565b61245a60405191826117dd565b848152019260051b82010192831161030b578301905b82821061247e5750506123ee565b81518152908301908301612470565b8351855288955093840193909201916001016123c8565b505050565b6124b2906117ca565b38612386565b5080fd5b6003810361251d576040516001600160a01b038316906124db81611794565b600090818152816020820152816040820152823b156124b857608461237d9183604051958694859363ecb586a560e01b85528b600486015260248501906122d0565b6004811461252f575b61239490612048565b6040516001600160a01b03831690608081016001600160401b03811182821017610c5f57604052600090818152816020820152816040820152816060820152823b156124b85760a461259e91836040519586948593637d49d87560e01b85528b600486015260248501906122a8565b5af190816125b2575b501561252657505050565b6125bb906117ca565b386125a7565b60058210156102985752565b6001600160a01b031660008181526033602052604080822081519293916001600160401b039184820183811186821017612828578252546001600160801b038082168652936020860193916126289060801c60ff16856125c1565b8486511615612817575a93805160058110156128035760020361277e57835184810181811085821117610c5f578552843682378688511690833b1561277a578961269160648293878a5196879485936316cd8e2760e21b855287600486015260248501906122f8565bfa9182612766575b5050612761576126a7612195565b505b516005811015611f7f576004146126d5575b5050505a9003915116106000146126cf5790565b50600190565b8251916080830190811183821017610c5f57835260803683378486511692813b15611e6d5760a48893849361272493519687948593637d49d87560e01b855287600486015260248501906122a8565bfa9182612749575b50506127445761273a612195565b505b3880806126bb565b61273c565b612752906117ca565b61275d57843861272c565b8480fd5b6126a9565b61276f906117ca565b611f00578838612699565b8980fd5b80516005811015612803576003036126a957835161279b81611794565b60603682378688511690833b1561277a576127d560848b92868951958694859363ecb586a560e01b855287600486015260248501906122d0565bfa90816127f0575b50612761576127ea612195565b506126a9565b6127fc909991996117ca565b97386127dd565b634e487b7160e01b89526021600452602489fd5b8251631f43ca0b60e11b8152600490fd5b634e487b7160e01b87526041600452602487fdfea2646970667358221220e61b11f86474b6041226778523bf1da78c5f64f862e550e3c6077325d2e080e764736f6c63430008110033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b60003560e01c90816301ffc9a7146116c35750806303ee9f2214611696578063103d208b1461164457806338013f021461161b578063438280dd146115e057806346faa4d5146111a9578063485cc95514610f595780634a4fbeec14610f365780635136211714610f0957806371d0fb4114610ece57806375b238fc14610eb25780637ce1ffeb14610e955780638e5313e014610e5a5780638ee7106714610e1f578063a50dfab914610d18578063b38234f314610cdd578063b5c5f67214610657578063b9ac2b381461062c578063bd5f5be6146105f1578063d0e8fa82146105b6578063d12e733214610568578063d1dff44f146103c1578063d2351cee14610386578063dc97e84e1461034b578063e9c26518146103105763ef89002d1461013d57600080fd5b3461030b57606036600319011261030b5761015661174e565b6001600160801b0390602435828116919082900361030b5760443592600584101561030b5760008054604051632474521560e21b81526004810192909252336024830152602092916001600160a01b039184908290604490829060101c86165afa9081156102ff576000916102d2575b50156102c05783169283156102ae57610bb885106102ae57600286106102ae576040516101f2816117af565b8581528381019261020388856125c1565b856000526033855260406000209151169281549051936005851015610298576102439460ff60801b9060801b169160018060881b031916171790556125cd565b610286577f2662467752a8b3cb3826319467b64a8cbad9d903fbbd8b4c31523f72f7ae915d9360609361028392604051948552840152604083019061177a565ba1005b6040516382542ee160e01b8152600490fd5b634e487b7160e01b600052602160045260246000fd5b60405163153e50cf60e11b8152600490fd5b604051631886ea7d60e11b8152600490fd5b6102f29150843d86116102f8575b6102ea81836117dd565b810190611800565b386101c6565b503d6102e0565b6040513d6000823e3d90fd5b600080fd5b3461030b57600036600319011261030b5760206040517f3b5d4cc60d3ec3516ee8ae083bd60934f6eb2a6c54b1229985c41bfb092b26038152f35b3461030b57600036600319011261030b5760206040517f9a9aef7c1247d5fc769b0185c052913e39673da29a880317dfd20ebf86f26a498152f35b3461030b57600036600319011261030b5760206040517fb0fdd1623e42dbffda4acd8bd643e1cb69f00f0e83abeaa8150ee42cf0fd105e8152f35b3461030b57604036600319011261030b576004356001600160401b0380821161030b573660238301121561030b57816004013590811161030b576024916005368484831b8401011161030b57610415611764565b60018060a01b03928360005460101c16926040518094632474521560e21b825260006004830152338983015281604460209788935afa9081156102ff5760009161054b575b50156102c0578483169182156105395760005b87811061047657005b8881841b830101359087821680920361030b576040516370a0823160e01b81523060048201529187838c81845afa80156102ff5760009061050a575b6104c49350806104c9575b505061185b565b61046d565b6040816104f87faaeda929aa102e867049528ec7cd2499e3a2f8846e736ae7935f234dfbf500d9938b8661207a565b8151908152888b820152a28a806104bd565b508783813d8311610532575b61052081836117dd565b8101031261030b576104c492516104b2565b503d610516565b60405163d27b444360e01b8152600490fd5b6105629150853d87116102f8576102ea81836117dd565b8861045a565b3461030b57602036600319011261030b5760406001600160a01b038061058c61174e565b1660005260346020526105b482600020548351928116835260ff602084019160a01c16611787565bf35b3461030b57600036600319011261030b5760206040517f76d0567582f23e1e9d7a13eeba60f9aea9d69b8da87ca27a8bf3698b35c653db8152f35b3461030b57600036600319011261030b5760206040517f4f14c8366fa999817edc9f29824eb88a00cc31225e2156f399da4bc91049eb108152f35b3461030b57602036600319011261030b57602061064f61064a61174e565b6118d5565b604051908152f35b3461030b57606036600319011261030b5761067061174e565b6044359061067d816118b5565b15610cbb5761271080831015610ca957604051631735856760e31b81526001600160a01b0383166004820152602081602481305afa9081156102ff57600091610c75575b506106d7670de0b6b3a764000091602435611848565b04928103818111610a12576106ec9084611848565b04916040516323b872dd60e01b602082015233602482015230604482015260243560648201526064815260a081019080821060018060401b03831117610c5f57604091909152610745906001600160a01b0384166120af565b60018060a01b038216600052603460205260406000206040519061076882611794565b80546001600160a01b038116835260a01c60ff16906003821015610298576001916020840152016040518082602082945493848152019060005260206000209260005b818110610c3d5750506107c0925003826117dd565b80604083015251936107d185611831565b946107df60405196876117dd565b8086526107eb81611831565b60005b601f1982018110610c1857505082516001600160a01b038681169116908114159081610b9a575b50610b29575b9161082583612048565b9260005b818110610a905750815161084b908290602435906001600160a01b0316612320565b6000936000925b828410610913575050505081106108f55760405184907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243649080610898602435888361202d565b0390a160405180916020820160208352815180915260206040840192019060005b8181106108c7575050500390f35b825180516001600160a01b0316855260209081015181860152869550604090940193909201916001016108b9565b60449250604051916371c4efed60e01b835260048301526024820152fd5b9091929460018060a01b0361092c87604085015161200b565b511695604051916370a0823160e01b83523060048401526020836024818b5afa9283156102ff57600093610a5c575b50610966828661200b565b518303928311610a125760405161097c816117af565b88815283602082015261098f838d61200b565b5261099a828c61200b565b50603654604051631735856760e31b8152600481018a905290602090829060249082906001600160a01b03165afa9081156102ff57600091610a28575b506109eb670de0b6b3a76400009185611848565b048101809111610a1257610a0a92610a059198339061207a565b61185b565b929190610852565b634e487b7160e01b600052601160045260246000fd5b90506020813d602011610a54575b81610a43602093836117dd565b8101031261030b57516109eb6109d7565b3d9150610a36565b9092506020813d602011610a88575b81610a78602093836117dd565b8101031261030b5751918b61095b565b3d9150610a6b565b602490602060018060a0989596981b03610aae8360408a015161200b565b5116604051938480926370a0823160e01b82523060048301525afa80156102ff57600090610af5575b610aec9250610ae6828561200b565b5261185b565b93919093610829565b506020823d602011610b21575b81610b0f602093836117dd565b8101031261030b57610aec9151610ad7565b3d9150610b02565b825160405163095ea7b360e01b81529060209082908190610b5a90602435906001600160a01b03166004840161202d565b038160006001600160a01b038b165af180156102ff57610b7b575b5061081b565b610b939060203d6020116102f8576102ea81836117dd565b5086610b75565b604051636eb1769f60e11b8152915060209082908190610bbe90306004840161189b565b03816001600160a01b038a165afa9081156102ff57600091610be6575b506024351187610815565b90506020813d602011610c10575b81610c01602093836117dd565b8101031261030b575187610bdb565b3d9150610bf4565b602090604051610c27816117af565b6000815260008382015282828b010152016107ee565b84546001600160a01b03168352600194850194869450602090930192016107ab565b634e487b7160e01b600052604160045260246000fd5b90506020813d602011610ca1575b81610c90602093836117dd565b8101031261030b57516106d76106c1565b3d9150610c83565b60405163334ee9a160e01b8152600490fd5b604051631e489be560e01b81526001600160a01b039091166004820152602490fd5b3461030b57600036600319011261030b5760206040517fd83f5343da19b478b15a140c301a868be9e02603958f38fbd822b9d5c0a289168152f35b3461030b57604036600319011261030b57610d3161174e565b610d39611764565b60018060a01b0391604460208460005460101c1660405192838092632474521560e21b8252600060048301523360248301525afa9081156102ff57600091610e01575b50156102c057610d8b816118b5565b15610de757827ff01c4ba47ffa16ddc86be088e27d891895d6944b4f1b88a7d30fedb0296de55c9382166000526035602052604060002090831660018060a01b0319825416179055610de26040519283928361189b565b0390a1005b604051631e489be560e01b81529083166004820152602490fd5b610e19915060203d81116102f8576102ea81836117dd565b84610d7c565b3461030b57602036600319011261030b5760206001600160a01b0380610e4361174e565b166000526035825260406000205416604051908152f35b3461030b57600036600319011261030b5760206040517fe453bacb314e78dcd5192e6b1a2b1f0e7c76e92f6b7e429a6a90f04e39db3b768152f35b3461030b57600036600319011261030b576020604051610bb88152f35b3461030b57600036600319011261030b57602060405160008152f35b3461030b57600036600319011261030b5760206040517f880a91047114272656e533301261260c75e4d11543ac7303d6fe4204579ec7278152f35b3461030b57602036600319011261030b576020610f2c610f2761174e565b6118b5565b6040519015158152f35b3461030b57602036600319011261030b576020610f2c610f5461174e565b6125cd565b3461030b57604036600319011261030b57610f7261174e565b610f7a611764565b60005460ff8160081c16159081809261119c575b8015611185575b156111295760ff19811660011760005581611117575b506000549160ff8360081c16156110be5762010000600160b01b03601085901b1662010000600160b01b031984168117600055936001600160a01b03919082168015908115611061575b5061104f571660018060a01b0319603654161760365561101157005b610100600160b01b03191617600055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a1005b6040516384d942fd60e01b8152600490fd5b6040516301ffc9a760e01b8152637965db0b60e01b60048201529150602090829060249082905afa9081156102ff576000916110a0575b501586610ff5565b6110b8915060203d81116102f8576102ea81836117dd565b86611098565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b61ffff19166101011760005583610fab565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b158015610f955750600160ff821614610f95565b50600160ff821610610f8e565b3461030b57608036600319011261030b576111c261174e565b6111ca611764565b6003606435101561030b5760008054604051632474521560e21b815260048101929092523360248301526020908290604490829060101c6001600160a01b03165afa9081156102ff576000916115c1575b50156102c0576004604435116115a7576001600160a01b0382811660008181526034602090815260409182902054915163313ce56760e01b8152919093161515929091829060049082905afa9081156102ff5760129160ff91600091611578575b501603611557576001600160a01b03838116600090815260346020526040902080546001600160a81b0319169184169190911760643560a01b60ff60a01b161790556112c9604435611831565b6112d660405191826117dd565b6044358152601f196112e9604435611831565b013660208301376001600160a01b03841660009081526034602052604090208151916001909101906001600160401b038311610c5f57600160401b8311610c5f57815483835580841061152d575b5060200190600052602060002060005b838110611510575050505060005b60443581106113d657501561139d577f8dcd8acd4741b1da9306006a2b3bf810b8de7eab39555875d014798096663b7d91610de260405192839260643591604435918561186a565b7f88b1242df2c48c77c22838236f32ce429163319eedcdfbc5e0e6ac2d1cb4ef1291610de260405192839260643591604435918561186a565b60405163c661065760e01b815260048101829052906020826024816001600160a01b0388165afa9182156102ff576000926114cc575b506001600160a01b0382161580156114a6575b6114945760018060a01b0385166000526034602052600160406000200191825482101561147e5760009283526020909220810180546001600160a01b0319166001600160a01b03909316929092179091556114799061185b565b611355565b634e487b7160e01b600052603260045260246000fd5b60405163b70c48fd60e01b8152600490fd5b506001600160a01b03821673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1461141f565b9091506020813d602011611508575b816114e8602093836117dd565b8101031261030b57516001600160a01b038116810361030b57908561140c565b3d91506114db565b82516001600160a01b031681830155602090920191600101611347565b826000526020600020908482015b818301811061154b575050611337565b6000815560010161153b565b60405163144a426560e31b81526001600160a01b0384166004820152602490fd5b61159a915060203d6020116115a0575b61159281836117dd565b810190611818565b8661127c565b503d611588565b604051630a4fd85f60e31b81526044356004820152602490fd5b6115da915060203d6020116102f8576102ea81836117dd565b8361121b565b3461030b57600036600319011261030b5760206040517f39f61ca2a1a28fee144218173ec637b649a353e4026b2738c673800e5bf1437b8152f35b3461030b57600036600319011261030b576036546040516001600160a01b039091168152602090f35b3461030b57602036600319011261030b576001600160a01b0361166561174e565b166000526033602052604080600020546105b482519160018060801b038116835260ff602084019160801c1661177a565b3461030b57600036600319011261030b5760005460405160109190911c6001600160a01b03168152602090f35b3461030b57602036600319011261030b5760043563ffffffff60e01b811680910361030b576000546301ffc9a760e01b835260048301919091526020908290602490829060101c6001600160a01b03165afa80156102ff57602091600091611731575b506040519015158152f35b6117489150823d81116102f8576102ea81836117dd565b82611726565b600435906001600160a01b038216820361030b57565b602435906001600160a01b038216820361030b57565b9060058210156102985752565b9060038210156102985752565b606081019081106001600160401b03821117610c5f57604052565b604081019081106001600160401b03821117610c5f57604052565b6001600160401b038111610c5f57604052565b601f909101601f19168101906001600160401b03821190821017610c5f57604052565b9081602091031261030b5751801515810361030b5790565b9081602091031261030b575160ff8116810361030b5790565b6001600160401b038111610c5f5760051b60200190565b81810292918115918404141715610a1257565b6000198114610a125760010190565b6001600160a01b0391821681529116602082015260408101919091526080810192916118999160600190611787565b565b6001600160a01b0391821681529116602082015260400190565b6001600160a01b0390811660009081526034602052604090205416151590565b906000906118e2836118b5565b15611fea5760018060a01b03808416938484526020906034825260409485812086519761190e89611794565b8154938685168a5260ff809560a01c16998681019060039b8c811015611f545782528860018096018c5190818b82549182815201918a528b8a20908c8a8c915b838310611fd05750505050509061196b81611976959303826117dd565b8d82015251166125cd565b611fbf5780518b811015611fab578414611c2357518a811015611bf8576002146119ab578851636844a2db60e11b8152600490fd5b969795966119b8906118b5565b15611c0c57808352603485528583208651996119d38b611794565b8582548a81168d5260a01c1690811015611bf8578a8701528651908301805480835290855286852082880191865b818110611be3575050509780999a82611a21899a9b94849a9503826117dd565b818b015283865260358352898620548216611bd85751165b60048951809881936354f0f7d560e01b8352165afa948515611b87578395611ba5575b5082526034855285822001805415611b9157815285848220541691855163313ce56760e01b81528581600481875afa908115611b8757908692918491611b6a575b50169660365416926024875180958193631735856760e31b835260048301525afa938415611b5e578194611b28575b505050611ae3670de0b6b3a7640000928392611848565b049260128103611b0a575b50508115611afa575090565b51634dfba02360e01b8152600490fd5b92611b19611b1f92939461201f565b90611848565b04903880611aee565b909180939450813d8311611b57575b611b4181836117dd565b81010312611b5457505190388080611acc565b80fd5b503d611b37565b508451903d90823e3d90fd5b611b819150833d85116115a05761159281836117dd565b38611a9d565b87513d85823e3d90fd5b634e487b7160e01b82526032600452602482fd5b9094508581813d8311611bd1575b611bbd81836117dd565b81010312611bcd57519338611a5c565b8280fd5b503d611bb3565b508885205416611a39565b82548c16845292890192918601918601611a01565b634e487b7160e01b85526021600452602485fd5b602490865190631e489be560e01b82526004820152fd5b50611c36909991939596949297996118b5565b15611f93578285526034865287852092885193611c5285611794565b838154878116875260a01c1683811015611f7f578589015289519089018054808352908852888820908290818b01908a5b8d8d838310611f685750505050611c9c925003826117dd565b89850152855260348652878520885191611cb583611794565b838254878116855260a01c1690811015611f5457978291819499898c9501520182518094898354928381520192895289892091895b818110611f3c575050505083611d019103846117dd565b01908082525195849685925b818410611d9d57505050506004929184915116865193848092630176f71760e71b82525afa928315611b5e578193611d62575b505050611d5690670de0b6b3a764000092611848565b04908115611afa575090565b9091809350813d8311611d96575b611d7a81836117dd565b81010312611b5457505181611d56670de0b6b3a7640000611d40565b503d611d70565b9091929785611dad8a845161200b565b51168a5163313ce56760e01b81526004908a818381865afa908115611f325791878e9594928d948d91611f15575b501660128103611e8257506024908a6036541695519586938492631735856760e31b84528301525afa8015611e78578890611e43575b611e249250905b8a611e2c57509861185b565b929190611d0d565b80821015611e3c57505b9861185b565b9050611e36565b50908881813d8311611e71575b611e5a81836117dd565b81010312611e6d5790611e249151611e11565b8780fd5b503d611e50565b8b513d8a823e3d90fd5b9291906024908b6036979697541695519586938492631735856760e31b84528301525afa918215611f0b578992611ed6575b50611ecf611e249392611b19670de0b6b3a76400009361201f565b0490611e18565b9091508981813d8311611f04575b611eee81836117dd565b81010312611f00575190611ecf611eb4565b8880fd5b503d611ee4565b8c513d8b823e3d90fd5b611f2c9150853d87116115a05761159281836117dd565b38611ddb565b8d513d8c823e3d90fd5b83548a1685528d9650938b0193928201928201611cea565b634e487b7160e01b87526021600452602487fd5b86548d168552958101958795509093019201611c83565b634e487b7160e01b88526021600452602488fd5b8751631e489be560e01b815260048101849052602490fd5b634e487b7160e01b86526021600452602486fd5b895163038c2bd760e61b8152600490fd5b845490971685528f96949094019392830192018a8e61194e565b604051631e489be560e01b81526001600160a01b0384166004820152602490fd5b805182101561147e5760209160051b010190565b604d8111610a1257600a0a90565b6001600160a01b039091168152602081019190915260400190565b9061205282611831565b61205f60405191826117dd565b8281528092612070601f1991611831565b0190602036910137565b6120af61189993926120a160405194859263a9059cbb60e01b60208501526024840161202d565b03601f1981018452836117dd565b60405161210d916001600160a01b03166120c8826117af565b6000806020958685527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656487860152868151910182855af1612107612195565b916121d4565b80519082821592831561217d575b505050156121265750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b61218d9350820181019101611800565b38828161211b565b3d156121cf573d906001600160401b038211610c5f57604051916121c3601f8201601f1916602001846117dd565b82523d6000602084013e565b606090565b9192901561223657508151156121e8575090565b3b156121f15790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156122495750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b82851061228f575050604492506000838284010152601f80199101168101030190fd5b848101820151868601604401529381019385935061226c565b6000915b600483106122b957505050565b6001908251815260208091019201920191906122ac565b6000915b600383106122e157505050565b6001908251815260208091019201920191906122d4565b6000915b6002831061230957505050565b6001908251815260208091019201920191906122fc565b9091600281036124bc576040516001600160a01b03831690612341816117af565b600090818152816020820152823b156124b857606461237d918360405195869485936316cd8e2760e21b85528b600486015260248501906122f8565b5af190816124a9575b506124a45761239490612048565b90604051809363350376e360e21b825260448201906004830152604060248301528351809152606482019060208095019060005b8682821061248d575050505091816000818195039260018060a01b03165af19182612406575b505061189957604051638ad816d360e01b8152600490fd5b3d806000833e61241681836117dd565b810190828183031261030b578051906001600160401b03821161030b570181601f8201121561030b57805190838061244d84611831565b61245a60405191826117dd565b848152019260051b82010192831161030b578301905b82821061247e5750506123ee565b81518152908301908301612470565b8351855288955093840193909201916001016123c8565b505050565b6124b2906117ca565b38612386565b5080fd5b6003810361251d576040516001600160a01b038316906124db81611794565b600090818152816020820152816040820152823b156124b857608461237d9183604051958694859363ecb586a560e01b85528b600486015260248501906122d0565b6004811461252f575b61239490612048565b6040516001600160a01b03831690608081016001600160401b03811182821017610c5f57604052600090818152816020820152816040820152816060820152823b156124b85760a461259e91836040519586948593637d49d87560e01b85528b600486015260248501906122a8565b5af190816125b2575b501561252657505050565b6125bb906117ca565b386125a7565b60058210156102985752565b6001600160a01b031660008181526033602052604080822081519293916001600160401b039184820183811186821017612828578252546001600160801b038082168652936020860193916126289060801c60ff16856125c1565b8486511615612817575a93805160058110156128035760020361277e57835184810181811085821117610c5f578552843682378688511690833b1561277a578961269160648293878a5196879485936316cd8e2760e21b855287600486015260248501906122f8565bfa9182612766575b5050612761576126a7612195565b505b516005811015611f7f576004146126d5575b5050505a9003915116106000146126cf5790565b50600190565b8251916080830190811183821017610c5f57835260803683378486511692813b15611e6d5760a48893849361272493519687948593637d49d87560e01b855287600486015260248501906122a8565bfa9182612749575b50506127445761273a612195565b505b3880806126bb565b61273c565b612752906117ca565b61275d57843861272c565b8480fd5b6126a9565b61276f906117ca565b611f00578838612699565b8980fd5b80516005811015612803576003036126a957835161279b81611794565b60603682378688511690833b1561277a576127d560848b92868951958694859363ecb586a560e01b855287600486015260248501906122d0565bfa90816127f0575b50612761576127ea612195565b506126a9565b6127fc909991996117ca565b97386127dd565b634e487b7160e01b89526021600452602489fd5b8251631f43ca0b60e11b8152600490fd5b634e487b7160e01b87526041600452602487fdfea2646970667358221220e61b11f86474b6041226778523bf1da78c5f64f862e550e3c6077325d2e080e764736f6c63430008110033",
  "devdoc": {
    "details": "This adapter does not support pools containing native ETH as an underlying token.      Also adapter support LP tokens with <= 4 underlying tokens      (it seems that Curve don't have Stable and V2 pools with more amount of underlying tokens).      See ILPAdapter interface for full details.      We copied some logic from Silo CurveNPAPTokensPriceProvider for V2 and CurvePAPTokensPriceProvider for Stable:      https://github.com/silo-finance/silo-core-v1/blob/master/contracts/priceProviders/curveLPTokens/nonPeggedAssetsPools/CurveNPAPTokensPriceProviderETH.sol",
    "errors": {
      "InvalidInterface()": [
        {
          "details": "Pool interface validation"
        }
      ],
      "InvalidPoolConfiguration()": [
        {
          "details": "Revert on the invalid pool configuration"
        }
      ],
      "MissingPoolReentrancyConfig()": [
        {
          "details": "Revert if the pool reentrancy config is not configured"
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "emergencyWithdraw(address[],address)": {
        "details": "This function is restricted to the admin and allows for emergency withdrawal of tokens.",
        "params": {
          "receiver": "Address of the receiver to receive the tokens.",
          "tokens": "List of tokens to withdraw."
        }
      },
      "getFiatPrice1e18(address)": {
        "params": {
          "asset": "- address of erc20 token contract"
        },
        "returns": {
          "_0": "usdPrice1e18 such that asset.balanceOf() * getFiatPrice1e18(asset) / 1e18 == $$ * 1e18*"
        }
      },
      "isAdapterLP(address)": {
        "params": {
          "asset": "- address of LP token to check*"
        }
      },
      "registerLP(address,address,uint256,uint8)": {
        "details": "Checks that none of the underlying tokens is native ETH",
        "params": {
          "lp": "address of LP token",
          "lpPool": "address of pool of {lp} LP-token",
          "nTokens": "number of underlyingTokens*"
        }
      },
      "setReentrancyVerificationConfig(address,uint128,uint8)": {
        "params": {
          "_gasLimit": "the gas limit to be set on the check execution",
          "_nCoins": "the number of the coins in the Curve pool (N_COINS)",
          "_pool": "address"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      },
      "updateLpPriceProvider(address,address)": {
        "details": "We have a particular case with the tricrypto2 pool in the Ethereum network, as it is without the lp_rice() function, and it is implemented in the separate smart contract. Function can be called only for registered lp and only by admin.",
        "params": {
          "lp": "address of LP token",
          "priceProvider": "address of separate smart contract that contains lp_price() function*"
        }
      },
      "withdraw(address,uint256,uint256)": {
        "params": {
          "amount": "The amount of LP tokens to withdraw",
          "asset": "The LP token address",
          "maxSlippageBps": "Maximum allowed slippage in basis points (1 = 0.01%)"
        },
        "returns": {
          "results": "Array of withdrawal results"
        }
      }
    },
    "title": "CurveAdapter",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "emergencyWithdraw(address[],address)": {
        "notice": "Withdraw tokens from the adapter in case of emergency."
      },
      "getFiatPrice1e18(address)": {
        "notice": "WARNING! Read this description very carefully!     function getFiatPrice1e18(address asset) returns (uint256) that:         basicAmountOfAsset * getFiatPrice1e18(asset) / 1e18 === $$ * 1e18     in other words, it doesn't matter what's the erc20.decimals is,     you just multiply token balance in basic units on value from oracle and get dollar amount multiplied on 1e18. different assets have different deviation threshold (errors)     for wBTC it's <= 0.5%, read more https://data.chain.link/ethereum/mainnet/crypto-usd/btc-usd     for other asset is can be larger based on particular oracle implementation. examples:     market price of btc = $30k,     for 0.1 wBTC the unit256 amount is 0.1 * 1e18     0.1 * 1e18 * (price1e18 / 1e18) == $3000 == uint256(3000*1e18)     => price1e18 = 30000 * 1e18;     market price of usdt = $0.97,     for 1 usdt uint256 = 1 * 1e6     so 1*1e6 * price1e18 / 1e18 == $0.97 == uint256(0.97*1e18)     => 1*1e6 * (price1e18 / 1e18) / (0.97*1e18)   = 1     =>  price1e18 = 0.97 * (1e18/1e6) * 1e18    assume market price of wBTC = $31,503.77, oracle error = $158     case #1: small amount of wBTC         we have 0.0,000,001 wBTC that is worth v = $0.00315 ± $0.00001 = 0.00315*1e18 = 315*1e13 ± 1*1e13         actual balance on the asset b = wBTC.balanceOf() =  0.0000001*1e18 = 1e11         oracle should return or = oracle.getFiatPrice1e18(wBTC) <=>         <=> b*or = v => v/b = 315*1e13 / 1e11 = 315*1e2 ± 1e2         error = or.error * b = 1e2 * 1e11 = 1e13 => 1e13/1e18 usd = 1e-5 = 0.00001 usd     case #2: large amount of wBTC         v = 2,000,000 wBTC = $31,503.77 * 2m ± 158*2m = $63,007,540,000 ± $316,000,000 = 63,007*1e24 ± 316*1e24         for calc convenience we increase error on 0.05 and have v = 63,000*24 ± 300*1e24 = (630 ± 3)*1e26         b = 2*1e6 * 1e18 = 2*1e24         or = v/b = (630 ± 3)*1e26 / 2*1e24 = 315*1e2 ± 1.5*1e2         error = or.error * b = 1.5*100 * 2*1e24 = 3*1e26 = 3*1e8*1e18 = $300,000,000 ~ $316,000,000     assume the market price of USDT = $0.97 ± $0.00485,     case #3: little amount of USDT         v = USDT amount 0.005 = 0.005*(0.97 ± 0.00485) = 0.00485*1e18 ± 0.00002425*1e18 = 485*1e13 ± 3*1e13         we rounded error up on (3000-2425)/2425 ~= +24% for calculation convenience.         b = USDT.balanceOf() = 0.005*1e6 = 5*1e3         b*or = v => or = v/b = (485*1e13 ± 3*1e13) / 5*1e3 = 970*1e9 ± 6*1e9         error = 6*1e9 * 5*1e3 / 1e18 = 30*1e12/1e18 = 3*1e-5 = $0,00005     case #4: lot of USDT         v = we have 100,000,000,000 USDT = $97B = 97*1e9*1e18 ± 0.5*1e9*1e18         b = USDT.balanceOf() = 1e11*1e6 = 1e17         or = v/b = (97*1e9*1e18 ± 0.5*1e9*1e18) / 1e17 = 970*1e9 ± 5*1e9         error = 5*1e9 * 1e17 = 5*1e26 = 0.5 * 1e8*1e18"
      },
      "isAdapterLP(address)": {
        "notice": "Returns if asset ig Balancer LP token, registered in our adapter"
      },
      "isLocked(address)": {
        "notice": "Verifies if the `lock` is activate on the Curve pool"
      },
      "registerLP(address,address,uint256,uint8)": {
        "notice": "Register the given LP token address and set the LP pool"
      },
      "setReentrancyVerificationConfig(address,uint128,uint8)": {
        "notice": "Set/Update a pool configuration for the reentrancy check"
      },
      "updateLpPriceProvider(address,address)": {
        "notice": "Add/remove priceProvider address for lp token."
      },
      "withdraw(address,uint256,uint256)": {
        "notice": "Withdraw LP tokens with slippage protection using basis points"
      }
    },
    "notice": "Adapter for Curve LP token.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1226,
        "contract": "contracts/exchange/contracts/periphery/contracts/adapters/Curve/CurveAdapter.sol:CurveAdapter",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 1229,
        "contract": "contracts/exchange/contracts/periphery/contracts/adapters/Curve/CurveAdapter.sol:CurveAdapter",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 22590,
        "contract": "contracts/exchange/contracts/periphery/contracts/adapters/Curve/CurveAdapter.sol:CurveAdapter",
        "label": "ACCESS_CONTROL_SINGLETON",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(ISuAccessControl)27027"
      },
      {
        "astId": 22861,
        "contract": "contracts/exchange/contracts/periphery/contracts/adapters/Curve/CurveAdapter.sol:CurveAdapter",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 25864,
        "contract": "contracts/exchange/contracts/periphery/contracts/adapters/Curve/CurveAdapter.sol:CurveAdapter",
        "label": "poolReentrancyConfig",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_struct(ReentrancyConfig)27352_storage)"
      },
      {
        "astId": 24855,
        "contract": "contracts/exchange/contracts/periphery/contracts/adapters/Curve/CurveAdapter.sol:CurveAdapter",
        "label": "lps",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_struct(CurveLPInfo)27250_storage)"
      },
      {
        "astId": 24859,
        "contract": "contracts/exchange/contracts/periphery/contracts/adapters/Curve/CurveAdapter.sol:CurveAdapter",
        "label": "lpsWithoutLpPrice",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 24862,
        "contract": "contracts/exchange/contracts/periphery/contracts/adapters/Curve/CurveAdapter.sol:CurveAdapter",
        "label": "ORACLE",
        "offset": 0,
        "slot": "54",
        "type": "t_contract(ISuOracle)27701"
      },
      {
        "astId": 25847,
        "contract": "contracts/exchange/contracts/periphery/contracts/adapters/Curve/CurveAdapter.sol:CurveAdapter",
        "label": "__gap",
        "offset": 0,
        "slot": "55",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ISuAccessControl)27027": {
        "encoding": "inplace",
        "label": "contract ISuAccessControl",
        "numberOfBytes": "20"
      },
      "t_contract(ISuOracle)27701": {
        "encoding": "inplace",
        "label": "contract ISuOracle",
        "numberOfBytes": "20"
      },
      "t_enum(CurvePoolType)27187": {
        "encoding": "inplace",
        "label": "enum ICurveAdapter.CurvePoolType",
        "numberOfBytes": "1"
      },
      "t_enum(N_COINS)27346": {
        "encoding": "inplace",
        "label": "enum ICurveReentrancyCheck.N_COINS",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_struct(CurveLPInfo)27250_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ICurveAdapter.CurveLPInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(CurveLPInfo)27250_storage"
      },
      "t_mapping(t_address,t_struct(ReentrancyConfig)27352_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ICurveReentrancyCheck.ReentrancyConfig)",
        "numberOfBytes": "32",
        "value": "t_struct(ReentrancyConfig)27352_storage"
      },
      "t_struct(CurveLPInfo)27250_storage": {
        "encoding": "inplace",
        "label": "struct ICurveAdapter.CurveLPInfo",
        "members": [
          {
            "astId": 27243,
            "contract": "contracts/exchange/contracts/periphery/contracts/adapters/Curve/CurveAdapter.sol:CurveAdapter",
            "label": "pool",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 27246,
            "contract": "contracts/exchange/contracts/periphery/contracts/adapters/Curve/CurveAdapter.sol:CurveAdapter",
            "label": "poolType",
            "offset": 20,
            "slot": "0",
            "type": "t_enum(CurvePoolType)27187"
          },
          {
            "astId": 27249,
            "contract": "contracts/exchange/contracts/periphery/contracts/adapters/Curve/CurveAdapter.sol:CurveAdapter",
            "label": "underlyingTokens",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ReentrancyConfig)27352_storage": {
        "encoding": "inplace",
        "label": "struct ICurveReentrancyCheck.ReentrancyConfig",
        "members": [
          {
            "astId": 27348,
            "contract": "contracts/exchange/contracts/periphery/contracts/adapters/Curve/CurveAdapter.sol:CurveAdapter",
            "label": "gasLimit",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 27351,
            "contract": "contracts/exchange/contracts/periphery/contracts/adapters/Curve/CurveAdapter.sol:CurveAdapter",
            "label": "nCoins",
            "offset": 16,
            "slot": "0",
            "type": "t_enum(N_COINS)27346"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}