{
  "address": "0xDbA5e85126152aC93Eb8201B1D597D477EB47D83",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "AlreadyRegistered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BadAccessControlSingleton",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "IsNotLP",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LPOracleNotReady",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAdminError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAlerterError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyDAOError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyLiquidationAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyMintAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyRewardAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyRoleError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyVaultAccessError",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACCESS_CONTROL_SINGLETON",
      "outputs": [
        {
          "internalType": "contract ISuAccessControl",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ALERTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DAO_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIQUIDATION_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINT_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ORACLE",
      "outputs": [
        {
          "internalType": "contract ISuOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARD_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SYSTEM_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VAULT_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getFiatPrice1e18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getFiatPrice1e18Unsafe",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_authControl",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "isAdapterLP",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lps",
      "outputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "enum CurvePoolType",
          "name": "poolType",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lp",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lpPool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nTokens",
          "type": "uint256"
        },
        {
          "internalType": "enum CurvePoolType",
          "name": "poolType",
          "type": "uint8"
        }
      ],
      "name": "registerLP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct WithdrawResult[]",
          "name": "results",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "numDeployments": 2,
  "solcInputHash": "763a020caf9e1e6ef21291ab55ec3cde",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"AlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BadAccessControlSingleton\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"IsNotLP\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LPOracleNotReady\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAdminError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAlerterError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyDAOError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyLiquidationAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyMintAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRewardAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRoleError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyVaultAccessError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACCESS_CONTROL_SINGLETON\",\"outputs\":[{\"internalType\":\"contract ISuAccessControl\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ALERTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAO_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDATION_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ORACLE\",\"outputs\":[{\"internalType\":\"contract ISuOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SYSTEM_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VAULT_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getFiatPrice1e18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getFiatPrice1e18Unsafe\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_authControl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"isAdapterLP\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lps\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"enum CurvePoolType\",\"name\":\"poolType\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lpPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nTokens\",\"type\":\"uint256\"},{\"internalType\":\"enum CurvePoolType\",\"name\":\"poolType\",\"type\":\"uint8\"}],\"name\":\"registerLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct WithdrawResult[]\",\"name\":\"results\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See ILPAdapter interface for full details.\",\"kind\":\"dev\",\"methods\":{\"getFiatPrice1e18(address)\":{\"params\":{\"asset\":\"- address of erc20 token contract\"},\"returns\":{\"_0\":\"usdPrice1e18 such that asset.balanceOf() * getFiatPrice1e18(asset) / 1e18 == $$ * 1e18*\"}},\"isAdapterLP(address)\":{\"params\":{\"asset\":\"- address of LP token to check*\"}},\"registerLP(address,address,uint256,uint8)\":{\"params\":{\"lp\":\"address of LP token\",\"lpPool\":\"address of pool of {lp} LP-token\",\"nTokens\":\"amount of underlyingTokens*\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"withdraw(address,uint256)\":{\"params\":{\"amount\":\"- amount of asset to withdraw/unwrap*\",\"asset\":\"- address of LP token to withdraw/unwrap\"}}},\"title\":\"CurveAdapter\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getFiatPrice1e18(address)\":{\"notice\":\"WARNING! Read this description very carefully!     function getFiatPrice1e18(address asset) returns (uint256) that:         basicAmountOfAsset * getFiatPrice1e18(asset) / 1e18 === $$ * 1e18     in other words, it doesn't matter what's the erc20.decimals is,     you just multiply token balance in basic units on value from oracle and get dollar amount multiplied on 1e18. different assets have different deviation threshold (errors)     for wBTC it's <= 0.5%, read more https://data.chain.link/ethereum/mainnet/crypto-usd/btc-usd     for other asset is can be larger based on particular oracle implementation. examples:     market price of btc = $30k,     for 0.1 wBTC the unit256 amount is 0.1 * 1e18     0.1 * 1e18 * (price1e18 / 1e18) == $3000 == uint256(3000*1e18)     => price1e18 = 30000 * 1e18;     market price of usdt = $0.97,     for 1 usdt uint256 = 1 * 1e6     so 1*1e6 * price1e18 / 1e18 == $0.97 == uint256(0.97*1e18)     => 1*1e6 * (price1e18 / 1e18) / (0.97*1e18)   = 1     =>  price1e18 = 0.97 * (1e18/1e6) * 1e18    assume market price of wBTC = $31,503.77, oracle error = $158     case #1: small amount of wBTC         we have 0.0,000,001 wBTC that is worth v = $0.00315 \\u00b1 $0.00001 = 0.00315*1e18 = 315*1e13 \\u00b1 1*1e13         actual balance on the asset b = wBTC.balanceOf() =  0.0000001*1e18 = 1e11         oracle should return or = oracle.getFiatPrice1e18(wBTC) <=>         <=> b*or = v => v/b = 315*1e13 / 1e11 = 315*1e2 \\u00b1 1e2         error = or.error * b = 1e2 * 1e11 = 1e13 => 1e13/1e18 usd = 1e-5 = 0.00001 usd     case #2: large amount of wBTC         v = 2,000,000 wBTC = $31,503.77 * 2m \\u00b1 158*2m = $63,007,540,000 \\u00b1 $316,000,000 = 63,007*1e24 \\u00b1 316*1e24         for calc convenience we increase error on 0.05 and have v = 63,000*24 \\u00b1 300*1e24 = (630 \\u00b1 3)*1e26         b = 2*1e6 * 1e18 = 2*1e24         or = v/b = (630 \\u00b1 3)*1e26 / 2*1e24 = 315*1e2 \\u00b1 1.5*1e2         error = or.error * b = 1.5*100 * 2*1e24 = 3*1e26 = 3*1e8*1e18 = $300,000,000 ~ $316,000,000     assume the market price of USDT = $0.97 \\u00b1 $0.00485,     case #3: little amount of USDT         v = USDT amount 0.005 = 0.005*(0.97 \\u00b1 0.00485) = 0.00485*1e18 \\u00b1 0.00002425*1e18 = 485*1e13 \\u00b1 3*1e13         we rounded error up on (3000-2425)/2425 ~= +24% for calculation convenience.         b = USDT.balanceOf() = 0.005*1e6 = 5*1e3         b*or = v => or = v/b = (485*1e13 \\u00b1 3*1e13) / 5*1e3 = 970*1e9 \\u00b1 6*1e9         error = 6*1e9 * 5*1e3 / 1e18 = 30*1e12/1e18 = 3*1e-5 = $0,00005     case #4: lot of USDT         v = we have 100,000,000,000 USDT = $97B = 97*1e9*1e18 \\u00b1 0.5*1e9*1e18         b = USDT.balanceOf() = 1e11*1e6 = 1e17         or = v/b = (97*1e9*1e18 \\u00b1 0.5*1e9*1e18) / 1e17 = 970*1e9 \\u00b1 5*1e9         error = 5*1e9 * 1e17 = 5*1e26 = 0.5 * 1e8*1e18\"},\"getFiatPrice1e18Unsafe(address)\":{\"notice\":\"Is depreceted, only for tests usage\"},\"isAdapterLP(address)\":{\"notice\":\"Returns if asset ig Balancer LP token, registered in our adapter\"},\"registerLP(address,address,uint256,uint8)\":{\"notice\":\"Register the given LP token address and set the LP pool\"},\"withdraw(address,uint256)\":{\"notice\":\"Unwrap LP token with depth = 2 (if underlying token is LP => it's also unwrapping)\"}},\"notice\":\"Adapter for Curve LP token.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/periphery/contracts/adapters/CurveAdapter.sol\":\"CurveAdapter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\",\"keccak256\":\"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd\",\"license\":\"GPL-2.0-or-later\"},\"contracts/periphery/contracts/access-control/SuAccessRoles.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title SuAccessRoles Library\\n * @dev SuAuthenticated and SuAccessControlSingleton need to have this constants\\n * Hierarchy:\\n *      1. DAO - can give admins and system roles\\n *      2.1. Admin - can set Alerters\\n *      2.2. System - includes Minter, Vault, Liquidation and Reward roles, don't have access to give some roles.\\n *      3. Alerter - can send alerts and trigger rate limits, don't have access to give some roles.\\n */\\nabstract contract SuAccessRoles {\\n    bytes32 public constant ADMIN_ROLE = 0x00;\\n\\n    bytes32 public constant DAO_ROLE = keccak256(\\\"DAO_ROLE\\\");\\n\\n    bytes32 public constant ALERTER_ROLE = keccak256(\\\"ALERTER_ROLE\\\");\\n\\n    // system roles\\n    bytes32 public constant MINT_ACCESS_ROLE = keccak256(\\\"MINT_ACCESS_ROLE\\\");\\n    bytes32 public constant VAULT_ACCESS_ROLE = keccak256(\\\"VAULT_ACCESS_ROLE\\\");\\n    bytes32 public constant LIQUIDATION_ACCESS_ROLE = keccak256(\\\"LIQUIDATION_ACCESS_ROLE\\\");\\n    bytes32 public constant REWARD_ACCESS_ROLE = keccak256(\\\"REWARD_ACCESS_ROLE\\\");\\n    bytes32 public constant SYSTEM_ROLE = keccak256(\\\"SYSTEM_ROLE\\\");\\n}\\n\",\"keccak256\":\"0xce71310378d7b30dfc4beda0af58490c09cb2cc6c4d951ce1b62bf2fb62d6dbc\",\"license\":\"BSL 1.1\"},\"contracts/periphery/contracts/access-control/SuAuthenticated.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/access-control/ISuAccessControl.sol\\\";\\nimport \\\"./SuAccessRoles.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @title SuAuthenticated\\n * @dev other contracts should inherit to be authenticated.\\n * The address of SuAccessControlSingleton should be one for all contract that inherits SuAuthenticated\\n */\\nabstract contract SuAuthenticated is Initializable, SuAccessRoles, IERC165Upgradeable {\\n    ISuAccessControl public ACCESS_CONTROL_SINGLETON;\\n\\n    error OnlyDAOError();\\n    error OnlyAdminError();\\n    error OnlyAlerterError();\\n    error OnlyVaultAccessError();\\n    error OnlyLiquidationAccessError();\\n    error OnlyMintAccessError();\\n    error OnlyRewardAccessError();\\n    error OnlyRoleError();\\n    error BadAccessControlSingleton();\\n\\n    /**\\n     * @dev should be passed in constructor\\n     */\\n    function __suAuthenticatedInit(address _accessControlSingleton) internal onlyInitializing {\\n        ACCESS_CONTROL_SINGLETON = ISuAccessControl(_accessControlSingleton);\\n        if (\\n            _accessControlSingleton != address(0) &&\\n            !ISuAccessControl(_accessControlSingleton).supportsInterface(type(IAccessControlUpgradeable).interfaceId)\\n        ) revert BadAccessControlSingleton();\\n    }\\n\\n    /** CORE ROLES */\\n\\n    modifier onlyDAO() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(DAO_ROLE, msg.sender)) revert OnlyDAOError();\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(ADMIN_ROLE, msg.sender)) revert OnlyAdminError();\\n        _;\\n    }\\n\\n    modifier onlyAlerter() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(ALERTER_ROLE, msg.sender)) revert OnlyAlerterError();\\n        _;\\n    }\\n\\n    /** SYSTEM ROLES */\\n\\n    modifier onlyVaultAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(VAULT_ACCESS_ROLE, msg.sender)) revert OnlyVaultAccessError();\\n        _;\\n    }\\n\\n    modifier onlyLiquidationAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(LIQUIDATION_ACCESS_ROLE, msg.sender)) revert OnlyLiquidationAccessError();\\n        _;\\n    }\\n\\n    modifier onlyMintAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(MINT_ACCESS_ROLE, msg.sender)) revert OnlyMintAccessError();\\n        _;\\n    }\\n\\n    modifier onlyRewardAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(REWARD_ACCESS_ROLE, msg.sender)) revert OnlyRewardAccessError();\\n        _;\\n    }\\n\\n    // syntax sugar under ACCESS_CONTROL_SINGLETON\\n    modifier onlyRole(bytes32 role) {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(role, msg.sender)) revert OnlyRoleError();\\n        _;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return ACCESS_CONTROL_SINGLETON.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x4e1ac84371a46e7534714397cf0ea5cf30d0e338caee0fde64771f276a5a4303\",\"license\":\"BSL 1.1\"},\"contracts/periphery/contracts/adapters/CurveAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\n\\nimport \\\"../access-control/SuAuthenticated.sol\\\";\\nimport \\\"../interfaces/adapters/ILPAdapter.sol\\\";\\nimport \\\"../vendor/curve/ICurveLP.sol\\\";\\n\\n/**\\n * @dev\\n * Default - It's pool that is not from stablecoins and is not V2 Factory.\\n Oracle for this pool isn't secured from pool manipulations, so we can't create secure getPrice function.\\n the example of such pool is tricrypto2 (USDT/WBTC/ETH).\\n * STABLE - It's pool based on stablecoins ot eth, like 3pool, crvUSD/USDT ot steth\\n * V2 - It's V2 Factory pool that have LP-oracle inside, like TriCRV, TricryptoUSDC\\n*/\\nenum CurvePoolType { Default, Stable, V2 }\\n\\nstruct CurveLPInfo {\\n    address pool;\\n    CurvePoolType poolType;\\n    address[] underlyingTokens;\\n}\\n\\n/**\\n * @title CurveAdapter\\n * @notice Adapter for Curve LP token.\\n * @dev See ILPAdapter interface for full details.\\n */\\ncontract CurveAdapter is SuAuthenticated, ILPAdapter {\\n    mapping(address => CurveLPInfo) public lps; // Mapping from LP token to pool\\n    ISuOracle public ORACLE;\\n\\n    function initialize(address _authControl, address _oracle) public initializer {\\n        __suAuthenticatedInit(_authControl);\\n        ORACLE = ISuOracle(_oracle);\\n    }\\n\\n    /**\\n      * @notice Register the given LP token address and set the LP pool\\n      * @param lp address of LP token\\n      * @param lpPool address of pool of {lp} LP-token\\n      * @param nTokens amount of underlyingTokens\\n     **/\\n    function registerLP(address lp, address lpPool, uint256 nTokens, CurvePoolType poolType) external onlyAdmin {\\n        lps[lp].pool = lpPool;\\n        lps[lp].poolType = poolType;\\n        lps[lp].underlyingTokens = new address[](nTokens);\\n        for (uint16 i = 0; i < nTokens; ++i) {\\n            lps[lp].underlyingTokens[i] = ICurveLP(lpPool).coins(i);\\n        }\\n    }\\n\\n    function isAdapterLP(address asset) public view returns (bool) {\\n        return lps[asset].pool != address(0);\\n    }\\n\\n    /// @notice Is depreceted, only for tests usage\\n    function getFiatPrice1e18Unsafe(address asset) public view returns (uint256) {\\n        if (!isAdapterLP(asset)) revert IsNotLP(asset);\\n        CurveLPInfo memory lpInfo = lps[asset];\\n\\n        uint256 sumBalances = 0;\\n        uint256 nTokens = lpInfo.underlyingTokens.length;\\n        for (uint256 i = 0; i < nTokens; ++i) {\\n            uint256 newTokenBalance = ICurveLP(lpInfo.pool).balances(i);\\n            sumBalances += newTokenBalance * ORACLE.getFiatPrice1e18(address(lpInfo.underlyingTokens[i]));\\n        }\\n\\n        return sumBalances / IERC20(asset).totalSupply();\\n    }\\n\\n    function _getFiatPriceStablePool(address asset) internal view returns (uint256) {\\n        if (!isAdapterLP(asset)) revert IsNotLP(asset);\\n        CurveLPInfo memory lpInfo = lps[asset];\\n\\n        return ICurveLP(lpInfo.pool).get_virtual_price();\\n    }\\n\\n    function _getFiatPricePoolV2(address asset) internal view returns (uint256) {\\n        if (!isAdapterLP(asset)) revert IsNotLP(asset);\\n        CurveLPInfo memory lpInfo = lps[asset];\\n\\n        return ICurveLP(lpInfo.pool).lp_price();\\n    }\\n\\n    function getFiatPrice1e18(address asset) external view returns (uint256) {\\n        if (!isAdapterLP(asset)) revert IsNotLP(asset);\\n        CurveLPInfo memory lpInfo = lps[asset];\\n\\n        if (lpInfo.poolType == CurvePoolType.Stable) {\\n            return _getFiatPriceStablePool(asset);\\n        }\\n        if (lpInfo.poolType == CurvePoolType.V2) {\\n            return _getFiatPricePoolV2(asset);\\n        }\\n\\n        // If lpInfo.poolType == CurvePoolType.Default or not set:\\n        revert LPOracleNotReady();\\n    }\\n\\n    function withdraw(address asset, uint256 amount) external returns (WithdrawResult[] memory results) {\\n        if (!isAdapterLP(asset)) revert IsNotLP(asset);\\n        TransferHelper.safeTransferFrom(asset, msg.sender, address(this), amount);\\n        CurveLPInfo memory lpInfo = lps[asset];\\n\\n        uint256 nTokens = lpInfo.underlyingTokens.length;\\n        results = new WithdrawResult[](nTokens);\\n\\n        if (asset != lpInfo.pool && IERC20(asset).allowance(address(this), lpInfo.pool) < amount) {\\n            IERC20(asset).approve(lpInfo.pool, amount);\\n        }\\n\\n        uint256[] memory balancesBefore = new uint256[](nTokens);\\n        for (uint16 i = 0; i < nTokens; ++i) {\\n            balancesBefore[i] = IERC20(lpInfo.underlyingTokens[i]).balanceOf(address(this));\\n        }\\n\\n        if (nTokens == 2) {\\n            uint256[2] memory minAmounts;\\n            minAmounts[0] = 0;\\n            minAmounts[1] = 0;\\n            ICurveLP(lpInfo.pool).remove_liquidity(amount, minAmounts);\\n        }\\n        if (nTokens == 3) {\\n            uint256[3] memory minAmounts;\\n            minAmounts[0] = 0;\\n            minAmounts[1] = 0;\\n            minAmounts[2] = 0;\\n            ICurveLP(lpInfo.pool).remove_liquidity(amount, minAmounts);\\n        }\\n\\n        for (uint16 i = 0; i < nTokens; ++i) {\\n            address underlyingToken = lpInfo.underlyingTokens[i];\\n            uint256 underlineTokenAmount = IERC20(underlyingToken).balanceOf(address(this)) - balancesBefore[i];\\n            results[i] = WithdrawResult({ token: underlyingToken, amount: underlineTokenAmount });\\n            TransferHelper.safeTransfer(underlyingToken, msg.sender, underlineTokenAmount);\\n        }\\n    }\\n\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x41cd6448516f2fc8a861f1c901720e4f3a7fd9c94a4d5323578cf001e9f5a21d\",\"license\":\"BSL 1.1\"},\"contracts/periphery/contracts/interfaces/access-control/ISuAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\nimport \\\"../../access-control/SuAccessRoles.sol\\\";\\n\\n/**\\n * @notice Access control for contracts\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n **/\\ninterface ISuAccessControl is IAccessControlUpgradeable, IERC165Upgradeable {\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\\n}\\n\",\"keccak256\":\"0x25724ac502fd6418ccd38273b276de4b2fdecd023d723c5d80c9f0a27c407bcd\",\"license\":\"MIT\"},\"contracts/periphery/contracts/interfaces/adapters/ILPAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"../oracle/ISuOracle.sol\\\";\\n\\nstruct WithdrawResult {\\n    address token;\\n    uint256 amount;\\n}\\n\\ninterface ILPAdapter is ISuOracle {\\n    /* ======================== ERRORS ======================== */\\n    error IsNotLP(address asset);\\n    error AlreadyRegistered(address asset);\\n    error LPOracleNotReady();\\n\\n    /* ==================== MUTABLE METHODS ==================== */\\n    /**\\n      * @notice Unwrap LP token with depth = 2 (if underlying token is LP => it's also unwrapping)\\n      * @param asset - address of LP token to withdraw/unwrap\\n      * @param amount - amount of asset to withdraw/unwrap\\n     **/\\n    function withdraw(address asset, uint256 amount) external returns (WithdrawResult[] memory);\\n\\n    /* ====================== VIEW METHODS ==================== */\\n    /**\\n      * @notice Returns if asset ig Balancer LP token, registered in our adapter\\n      * @param asset - address of LP token to check\\n     **/\\n    function isAdapterLP(address asset) external returns (bool);\\n}\",\"keccak256\":\"0x4a1b94f8bdc9063002386f854608c9b600ad2a7d45703ad05deb7536c006a855\",\"license\":\"BSL 1.1\"},\"contracts/periphery/contracts/interfaces/oracle/ISuOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\n// solhint-disable compiler-version\\npragma solidity >=0.7.6;\\n\\ninterface ISuOracle {\\n    /**\\n     * @notice WARNING! Read this description very carefully!\\n     *     function getFiatPrice1e18(address asset) returns (uint256) that:\\n     *         basicAmountOfAsset * getFiatPrice1e18(asset) / 1e18 === $$ * 1e18\\n     *     in other words, it doesn't matter what's the erc20.decimals is,\\n     *     you just multiply token balance in basic units on value from oracle and get dollar amount multiplied on 1e18.\\n     *\\n     * different assets have different deviation threshold (errors)\\n     *     for wBTC it's <= 0.5%, read more https://data.chain.link/ethereum/mainnet/crypto-usd/btc-usd\\n     *     for other asset is can be larger based on particular oracle implementation.\\n     *\\n     * examples:\\n     *     market price of btc = $30k,\\n     *     for 0.1 wBTC the unit256 amount is 0.1 * 1e18\\n     *     0.1 * 1e18 * (price1e18 / 1e18) == $3000 == uint256(3000*1e18)\\n     *     => price1e18 = 30000 * 1e18;\\n     *\\n     *     market price of usdt = $0.97,\\n     *     for 1 usdt uint256 = 1 * 1e6\\n     *     so 1*1e6 * price1e18 / 1e18 == $0.97 == uint256(0.97*1e18)\\n     *     => 1*1e6 * (price1e18 / 1e18) / (0.97*1e18)   = 1\\n     *     =>  price1e18 = 0.97 * (1e18/1e6) * 1e18\\n     *\\n     *    assume market price of wBTC = $31,503.77, oracle error = $158\\n     *\\n     *     case #1: small amount of wBTC\\n     *         we have 0.0,000,001 wBTC that is worth v = $0.00315 \\u00b1 $0.00001 = 0.00315*1e18 = 315*1e13 \\u00b1 1*1e13\\n     *         actual balance on the asset b = wBTC.balanceOf() =  0.0000001*1e18 = 1e11\\n     *         oracle should return or = oracle.getFiatPrice1e18(wBTC) <=>\\n     *         <=> b*or = v => v/b = 315*1e13 / 1e11 = 315*1e2 \\u00b1 1e2\\n     *         error = or.error * b = 1e2 * 1e11 = 1e13 => 1e13/1e18 usd = 1e-5 = 0.00001 usd\\n     *\\n     *     case #2: large amount of wBTC\\n     *         v = 2,000,000 wBTC = $31,503.77 * 2m \\u00b1 158*2m = $63,007,540,000 \\u00b1 $316,000,000 = 63,007*1e24 \\u00b1 316*1e24\\n     *         for calc convenience we increase error on 0.05 and have v = 63,000*24 \\u00b1 300*1e24 = (630 \\u00b1 3)*1e26\\n     *         b = 2*1e6 * 1e18 = 2*1e24\\n     *         or = v/b = (630 \\u00b1 3)*1e26 / 2*1e24 = 315*1e2 \\u00b1 1.5*1e2\\n     *         error = or.error * b = 1.5*100 * 2*1e24 = 3*1e26 = 3*1e8*1e18 = $300,000,000 ~ $316,000,000\\n     *\\n     *     assume the market price of USDT = $0.97 \\u00b1 $0.00485,\\n     *\\n     *     case #3: little amount of USDT\\n     *         v = USDT amount 0.005 = 0.005*(0.97 \\u00b1 0.00485) = 0.00485*1e18 \\u00b1 0.00002425*1e18 = 485*1e13 \\u00b1 3*1e13\\n     *         we rounded error up on (3000-2425)/2425 ~= +24% for calculation convenience.\\n     *         b = USDT.balanceOf() = 0.005*1e6 = 5*1e3\\n     *         b*or = v => or = v/b = (485*1e13 \\u00b1 3*1e13) / 5*1e3 = 970*1e9 \\u00b1 6*1e9\\n     *         error = 6*1e9 * 5*1e3 / 1e18 = 30*1e12/1e18 = 3*1e-5 = $0,00005\\n     *\\n     *     case #4: lot of USDT\\n     *         v = we have 100,000,000,000 USDT = $97B = 97*1e9*1e18 \\u00b1 0.5*1e9*1e18\\n     *         b = USDT.balanceOf() = 1e11*1e6 = 1e17\\n     *         or = v/b = (97*1e9*1e18 \\u00b1 0.5*1e9*1e18) / 1e17 = 970*1e9 \\u00b1 5*1e9\\n     *         error = 5*1e9 * 1e17 = 5*1e26 = 0.5 * 1e8*1e18\\n     *\\n     * @param asset - address of erc20 token contract\\n     * @return usdPrice1e18 such that asset.balanceOf() * getFiatPrice1e18(asset) / 1e18 == $$ * 1e18\\n     **/\\n    function getFiatPrice1e18(address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa56b9cc86ef5935efecc276e6a3188d518f1a99cad960083a8de35849c997687\",\"license\":\"UNLICENSED\"},\"contracts/periphery/contracts/vendor/curve/ICurveLP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICurveLP {\\n    function add_liquidity(uint256[2] memory, uint256) external;\\n    function add_liquidity(uint256[3] memory, uint256) external;\\n\\n    function remove_liquidity(uint256, uint256[2] memory) external;\\n    function remove_liquidity(uint256, uint256[3] memory) external;\\n\\n    // function remove_liquidity(uint256, uint256[3] memory) external returns (uint256[3] memory);\\n\\n    /// @notice Removes liquidity from the pool in a specified asset\\n    function remove_liquidity_one_coin(uint256 tokenAmount, int128 i, uint256 minAmount) external;\\n\\n    function coins(uint256 i) external view returns (address);\\n\\n    function balances(uint256 i) external view returns (uint256);\\n\\n    function calc_add_one_coin(uint256[] memory amounts, bool deposit) external view returns (uint256);\\n\\n    function get_virtual_price() external view returns (uint256);\\n\\n    // only for V2 Pools\\n    function lp_price() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd90967cfd4637e6ea6829d4b94ec14544aad86114b851d59931f1be700587c3d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657611888908161001c8239f35b600080fdfe608080604052600436101561001357600080fd5b600090813560e01c90816301ffc9a7146113385750806303ee9f221461130d57806314c376dc146112d257806338013f02146112a9578063438280dd1461126e57806346faa4d514610fcc578063485cc95514610d7c5780635136211714610d4e57806371d0fb4114610d1357806375071d2a14610cd857806375b238fc14610cbc5780638e5313e014610c81578063b9ac2b3814610c55578063c02d9db114610977578063d12e733214610911578063dc97e84e146108d6578063e9c265181461089b5763f3fef3a3146100e757600080fd5b34610898576040366003190112610898576101006113ce565b610109816114d4565b156108765760405160208101906323b872dd60e01b825233602482015230604482015260243560648201526064815260a0810181811060018060401b038211176108625760405251839182919082855af1610162611813565b81610833575b5015610808576001600160a01b038116825260016020526040808320905190610190826113fa565b80546001600160a01b038116835260a01c60ff1660038110156107f457906001916020840152016040518082602082945493848152019087526020872092875b8181106107d25750506101e592500382611459565b8060408301525190836101f783611494565b936102056040519586611459565b83855261021184611494565b825b601f19820181106107a857505082516001600160a01b03828116911690811415908161071f575b5061069c575b505061024b82611494565b916102596040519384611459565b808352601f1961026882611494565b01366020850137845b8161ffff8216101561032457602490602060018060a01b0361029b61ffff841660408801516114f4565b5116604051938480926370a0823160e01b82523060048301525afa80156103195787906102e1575b6102dc92506102d661ffff8316876114f4565b526114ab565b610271565b506020823d602011610311575b816102fb60209383611459565b8101031261030d576102dc91516102c3565b8680fd5b3d91506102ee565b6040513d89823e3d90fd5b5093929190600285146105fb575b6003851461053b575b835b8561ffff821610156104de5760408201516001600160a01b03906103669061ffff8416906114f4565b51166040516370a0823160e01b8152306004820152602081602481855afa9081156103195787916104a7575b506103a161ffff8416866114f4565b51810390811161049357869182916040516103bb8161142b565b8281528160208201526103d261ffff87168a6114f4565b526103e161ffff8616896114f4565b508260405161041481610406602082019563a9059cbb60e01b875233602484016117f8565b03601f198101835282611459565b51925af1610420611813565b81610464575b501561043a57610435906114ab565b61033d565b60405162461bcd60e51b815260206004820152600260248201526114d560f21b6044820152606490fd5b8051801592508215610479575b505038610426565b61048c925060208091830101910161147c565b3880610471565b634e487b7160e01b87526011600452602487fd5b90506020813d6020116104d6575b816104c260209383611459565b810103126104d1575138610392565b600080fd5b3d91506104b5565b50505090604051918291602083016020845282518091526020604085019301915b81811061050d575050500390f35b825180516001600160a01b0316855260209081015181860152869550604090940193909201916001016104ff565b604051610547816113fa565b6060368237848152602081018590526040810185905281516001600160a01b0316803b156105f75790859060405192839163ecb586a560e01b835260243560048401526024830184905b600382106105db5750505081836084925af180156105d0579085916105b8575b505061033b565b6105c190611446565b6105cc5783386105b1565b8380fd5b6040513d87823e3d90fd5b825181528a955086945060209283019260019092019101610591565b8580fd5b6040516106078161142b565b60403682378481526020810185905281516001600160a01b0316803b156105f7579085906040519283916316cd8e2760e21b835260243560048401526024830184905b600282106106805750505081836064925af180156105d05761066d575b50610332565b61067990949194611446565b9238610667565b825181528a95508694506020928301926001909201910161064a565b825160405163095ea7b360e01b81529260209284929091839182906106d190602435906001600160a01b0316600484016117f8565b03926001600160a01b03165af180156105d0576106f0575b8490610240565b6107119060203d602011610718575b6107098183611459565b81019061147c565b50386106e9565b503d6106ff565b604051636eb1769f60e11b8152306004820152602481019190915290506020816044816001600160a01b0386165afa90811561079d578391610767575b50602435113861023a565b90506020813d602011610795575b8161078260209383611459565b8101031261079157513861075c565b8280fd5b3d9150610775565b6040513d85823e3d90fd5b6020919293506040516107ba8161142b565b88815288838201528282890101520190869291610213565b84546001600160a01b03168352600194850194869450602090930192016101d0565b634e487b7160e01b85526021600452602485fd5b60405162461bcd60e51b815260206004820152600360248201526229aa2360e91b6044820152606490fd5b8051801592508215610848575b505038610168565b61085b925060208091830101910161147c565b3880610840565b634e487b7160e01b85526041600452602485fd5b604051631e489be560e01b81526001600160a01b039091166004820152602490fd5b80fd5b503461089857806003193601126108985760206040517f3b5d4cc60d3ec3516ee8ae083bd60934f6eb2a6c54b1229985c41bfb092b26038152f35b503461089857806003193601126108985760206040517f9a9aef7c1247d5fc769b0185c052913e39673da29a880317dfd20ebf86f26a498152f35b5034610898576020366003190112610898576001600160a01b03806109346113ce565b16825260016020526040808320549051918116825260a01c60ff16600381101561096357604092506020820152f35b634e487b7160e01b83526021600452602483fd5b50346108985760209081600319360112610898576109936113ce565b9061099d826114d4565b15610c34576001600160a01b03918216808252600180855260408084209051906109c6826113fa565b60ff8154878116845260a01c166003811015610c20579280918894858599989795015201946040519586858254918281520191875285872090875b818110610c095750505086610a17910387611459565b60408701968688528596519186988160025416925b848b10610ac0576040516318160ddd60e01b815288908b908b83826004818e5afa918215610ab3578192610a80575b508115610a6c575060405191048152f35b634e487b7160e01b81526012600452602490fd5b9091508381813d8311610aac575b610a988183611459565b81010312610aa857519084610a5b565b5080fd5b503d610a8e565b50604051903d90823e3d90fd5b91809496989991939597508251168b8b602460405180948193634903b0d160e01b835260048301525afa908115610bfe578a91610bcd575b5084610b058c86516114f4565b51604051631735856760e31b815291166004820152908c826024818a5afa918215610bc2578b92610b8f575b50818102918183041490151715610b7b578101809111610b6757986000198114610b67578601989796949290918a969492610a2c565b634e487b7160e01b89526011600452602489fd5b634e487b7160e01b8a52601160045260248afd5b9091508c81813d8311610bbb575b610ba78183611459565b81010312610bb757519038610b31565b8a80fd5b503d610b9d565b6040513d8d823e3d90fd5b90508b81813d8311610bf7575b610be48183611459565b81010312610bf3575138610af8565b8980fd5b503d610bda565b6040513d8c823e3d90fd5b8254851684528b9790930192918501918501610a01565b634e487b7160e01b86526021600452602486fd5b604051631e489be560e01b81526001600160a01b0383166004820152602490fd5b5034610898576020366003190112610898576020610c79610c746113ce565b61151e565b604051908152f35b503461089857806003193601126108985760206040517fe453bacb314e78dcd5192e6b1a2b1f0e7c76e92f6b7e429a6a90f04e39db3b768152f35b5034610898578060031936011261089857602090604051908152f35b503461089857806003193601126108985760206040517f5719df9ef2c4678b547f89e4f5ae410dbf400fc51cf3ded434c55f6adea2c43f8152f35b503461089857806003193601126108985760206040517f880a91047114272656e533301261260c75e4d11543ac7303d6fe4204579ec7278152f35b5034610898576020366003190112610898576020610d72610d6d6113ce565b6114d4565b6040519015158152f35b503461089857604036600319011261089857610d966113ce565b610d9e6113e4565b825460ff8160081c161590818092610fbf575b8015610fa8575b15610f4c5760ff198116600117855581610f3b575b5083549160ff8360081c1615610ee25762010000600160b01b03601085901b1662010000600160b01b0319841681178655936001600160a01b03919082168015159081610e86575b50610e74571660018060a01b03196002541617600255610e33578280f35b610100600160b01b031916178155604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a138808280f35b6040516384d942fd60e01b8152600490fd5b6040516301ffc9a760e01b8152637965db0b60e01b60048201529150602090829060249082905afa908115610319578791610ec4575b501538610e15565b610edc915060203d8111610718576107098183611459565b38610ebc565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b61ffff191661010117845538610dcd565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b158015610db85750600160ff821614610db8565b50600160ff821610610db1565b503461089857608036600319011261089857610fe66113ce565b610fee6113e4565b906044359160643591600383101561126a578454604051632474521560e21b8152600481018790523360248201526001600160a01b039260209290919083908290604490829060101c88165afa90811561125f578891611242575b5015611230578216808752600180835260408820805460ff60a01b199686169687166001600160a81b03199091161760a09790971b60ff60a01b1696909617909555939492936001600160a01b0319936110a281611494565b6110af6040519182611459565b8181526110bb82611494565b8482019190601f1901368337838a5288855260408a20905191908901906001600160401b03831161121c57600160401b831161121c5781548383558084106111f5575b50908a52848a20898b5b8481106111e157509250505088905b61111f578880f35b61ffff8116828110156111dc576040519063c661065760e01b8252600482015284816024818b5afa908115610bfe578a916111a6575b50838a528885528860408b20018054831015611192579161118a918782888e8e999897815220019116898254161790556114ab565b909192611117565b634e487b7160e01b8b52603260045260248bfd5b90508481813d83116111d5575b6111bd8183611459565b81010312610bf357518581168103610bf35738611155565b503d6111b3565b508880f35b878985511694019381840155018a90611108565b8a84888e8681522092830192015b8281106112115750506110fe565b8d8155018b90611203565b634e487b7160e01b8b52604160045260248bfd5b604051631886ea7d60e11b8152600490fd5b6112599150833d8511610718576107098183611459565b38611049565b6040513d8a823e3d90fd5b8480fd5b503461089857806003193601126108985760206040517f39f61ca2a1a28fee144218173ec637b649a353e4026b2738c673800e5bf1437b8152f35b50346108985780600319360112610898576002546040516001600160a01b039091168152602090f35b503461089857806003193601126108985760206040517fe965846df3dd5b1dfa65f58e31477079e90140e0908b6dd31b5aead5a57cf3658152f35b50346108985780600319360112610898575460405160109190911c6001600160a01b03168152602090f35b905034610aa8576020366003190112610aa85760043563ffffffff60e01b81168091036107915782546301ffc9a760e01b835260048301919091526020908290602490829060101c6001600160a01b03165afa9081156113c357602092916113a6575b506040519015158152f35b6113bd9150823d8111610718576107098183611459565b3861139b565b6040513d84823e3d90fd5b600435906001600160a01b03821682036104d157565b602435906001600160a01b03821682036104d157565b606081019081106001600160401b0382111761141557604052565b634e487b7160e01b600052604160045260246000fd5b604081019081106001600160401b0382111761141557604052565b6001600160401b03811161141557604052565b601f909101601f19168101906001600160401b0382119082101761141557604052565b908160209103126104d1575180151581036104d15790565b6001600160401b0381116114155760051b60200190565b61ffff8091169081146114be5760010190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0390811660009081526001602052604090205416151590565b80518210156115085760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b60009161152a826114d4565b15610c345760018060a01b039283831680825260016020918183526040958685208751611556816113fa565b60ff82548b8116835260a01c16918682019260038110156117e4578a918791855201918b8251938a8586938c845492838152019383528b8d80852094925b8484106117bd57505050505050906115ad910384611459565b0152805160038110156117a95784146116ef57516003811015610c20576002146115e2578651636844a2db60e11b8152600490fd5b6115ee909695966114d4565b156116d857835280825283832090845191611608836113fa565b60ff8154898116855260a01c166003811015610c2057908291858501520185518092858354928381520192875285872091875b8181106116c35750505050918161165a60049798999386950382611459565b8782015251168551948580926354f0f7d560e01b82525afa9384156116b857508193611687575b50505090565b9091809350813d83116116b1575b61169f8183611459565b81010312610898575051388080611681565b503d611695565b51913d9150823e3d90fd5b83548c1685529387019392820192820161163b565b602490855190631e489be560e01b82526004820152fd5b506116fc909695966114d4565b156116d857835280825283832090845191611716836113fa565b60ff8154898116855260a01c166003811015610c2057908291858501520185518092858354928381520192875285872091875b8181106117945750505050918161176860049798999386950382611459565b878201525116855194858092630176f71760e71b82525afa9384156116b8575081936116875750505090565b83548c16855293870193928201928201611749565b634e487b7160e01b87526021600452602487fd5b909295919480989950859497505416815201940191019085928f928f9695938d8d91611594565b634e487b7160e01b89526021600452602489fd5b6001600160a01b039091168152602081019190915260400190565b3d1561184d573d906001600160401b0382116114155760405191611841601f8201601f191660200184611459565b82523d6000602084013e565b60609056fea26469706673582212209ef515e2e55230de58c07c6a92490223c680a16ecb96c4f6a957fa22f2229c1864736f6c63430008110033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b600090813560e01c90816301ffc9a7146113385750806303ee9f221461130d57806314c376dc146112d257806338013f02146112a9578063438280dd1461126e57806346faa4d514610fcc578063485cc95514610d7c5780635136211714610d4e57806371d0fb4114610d1357806375071d2a14610cd857806375b238fc14610cbc5780638e5313e014610c81578063b9ac2b3814610c55578063c02d9db114610977578063d12e733214610911578063dc97e84e146108d6578063e9c265181461089b5763f3fef3a3146100e757600080fd5b34610898576040366003190112610898576101006113ce565b610109816114d4565b156108765760405160208101906323b872dd60e01b825233602482015230604482015260243560648201526064815260a0810181811060018060401b038211176108625760405251839182919082855af1610162611813565b81610833575b5015610808576001600160a01b038116825260016020526040808320905190610190826113fa565b80546001600160a01b038116835260a01c60ff1660038110156107f457906001916020840152016040518082602082945493848152019087526020872092875b8181106107d25750506101e592500382611459565b8060408301525190836101f783611494565b936102056040519586611459565b83855261021184611494565b825b601f19820181106107a857505082516001600160a01b03828116911690811415908161071f575b5061069c575b505061024b82611494565b916102596040519384611459565b808352601f1961026882611494565b01366020850137845b8161ffff8216101561032457602490602060018060a01b0361029b61ffff841660408801516114f4565b5116604051938480926370a0823160e01b82523060048301525afa80156103195787906102e1575b6102dc92506102d661ffff8316876114f4565b526114ab565b610271565b506020823d602011610311575b816102fb60209383611459565b8101031261030d576102dc91516102c3565b8680fd5b3d91506102ee565b6040513d89823e3d90fd5b5093929190600285146105fb575b6003851461053b575b835b8561ffff821610156104de5760408201516001600160a01b03906103669061ffff8416906114f4565b51166040516370a0823160e01b8152306004820152602081602481855afa9081156103195787916104a7575b506103a161ffff8416866114f4565b51810390811161049357869182916040516103bb8161142b565b8281528160208201526103d261ffff87168a6114f4565b526103e161ffff8616896114f4565b508260405161041481610406602082019563a9059cbb60e01b875233602484016117f8565b03601f198101835282611459565b51925af1610420611813565b81610464575b501561043a57610435906114ab565b61033d565b60405162461bcd60e51b815260206004820152600260248201526114d560f21b6044820152606490fd5b8051801592508215610479575b505038610426565b61048c925060208091830101910161147c565b3880610471565b634e487b7160e01b87526011600452602487fd5b90506020813d6020116104d6575b816104c260209383611459565b810103126104d1575138610392565b600080fd5b3d91506104b5565b50505090604051918291602083016020845282518091526020604085019301915b81811061050d575050500390f35b825180516001600160a01b0316855260209081015181860152869550604090940193909201916001016104ff565b604051610547816113fa565b6060368237848152602081018590526040810185905281516001600160a01b0316803b156105f75790859060405192839163ecb586a560e01b835260243560048401526024830184905b600382106105db5750505081836084925af180156105d0579085916105b8575b505061033b565b6105c190611446565b6105cc5783386105b1565b8380fd5b6040513d87823e3d90fd5b825181528a955086945060209283019260019092019101610591565b8580fd5b6040516106078161142b565b60403682378481526020810185905281516001600160a01b0316803b156105f7579085906040519283916316cd8e2760e21b835260243560048401526024830184905b600282106106805750505081836064925af180156105d05761066d575b50610332565b61067990949194611446565b9238610667565b825181528a95508694506020928301926001909201910161064a565b825160405163095ea7b360e01b81529260209284929091839182906106d190602435906001600160a01b0316600484016117f8565b03926001600160a01b03165af180156105d0576106f0575b8490610240565b6107119060203d602011610718575b6107098183611459565b81019061147c565b50386106e9565b503d6106ff565b604051636eb1769f60e11b8152306004820152602481019190915290506020816044816001600160a01b0386165afa90811561079d578391610767575b50602435113861023a565b90506020813d602011610795575b8161078260209383611459565b8101031261079157513861075c565b8280fd5b3d9150610775565b6040513d85823e3d90fd5b6020919293506040516107ba8161142b565b88815288838201528282890101520190869291610213565b84546001600160a01b03168352600194850194869450602090930192016101d0565b634e487b7160e01b85526021600452602485fd5b60405162461bcd60e51b815260206004820152600360248201526229aa2360e91b6044820152606490fd5b8051801592508215610848575b505038610168565b61085b925060208091830101910161147c565b3880610840565b634e487b7160e01b85526041600452602485fd5b604051631e489be560e01b81526001600160a01b039091166004820152602490fd5b80fd5b503461089857806003193601126108985760206040517f3b5d4cc60d3ec3516ee8ae083bd60934f6eb2a6c54b1229985c41bfb092b26038152f35b503461089857806003193601126108985760206040517f9a9aef7c1247d5fc769b0185c052913e39673da29a880317dfd20ebf86f26a498152f35b5034610898576020366003190112610898576001600160a01b03806109346113ce565b16825260016020526040808320549051918116825260a01c60ff16600381101561096357604092506020820152f35b634e487b7160e01b83526021600452602483fd5b50346108985760209081600319360112610898576109936113ce565b9061099d826114d4565b15610c34576001600160a01b03918216808252600180855260408084209051906109c6826113fa565b60ff8154878116845260a01c166003811015610c20579280918894858599989795015201946040519586858254918281520191875285872090875b818110610c095750505086610a17910387611459565b60408701968688528596519186988160025416925b848b10610ac0576040516318160ddd60e01b815288908b908b83826004818e5afa918215610ab3578192610a80575b508115610a6c575060405191048152f35b634e487b7160e01b81526012600452602490fd5b9091508381813d8311610aac575b610a988183611459565b81010312610aa857519084610a5b565b5080fd5b503d610a8e565b50604051903d90823e3d90fd5b91809496989991939597508251168b8b602460405180948193634903b0d160e01b835260048301525afa908115610bfe578a91610bcd575b5084610b058c86516114f4565b51604051631735856760e31b815291166004820152908c826024818a5afa918215610bc2578b92610b8f575b50818102918183041490151715610b7b578101809111610b6757986000198114610b67578601989796949290918a969492610a2c565b634e487b7160e01b89526011600452602489fd5b634e487b7160e01b8a52601160045260248afd5b9091508c81813d8311610bbb575b610ba78183611459565b81010312610bb757519038610b31565b8a80fd5b503d610b9d565b6040513d8d823e3d90fd5b90508b81813d8311610bf7575b610be48183611459565b81010312610bf3575138610af8565b8980fd5b503d610bda565b6040513d8c823e3d90fd5b8254851684528b9790930192918501918501610a01565b634e487b7160e01b86526021600452602486fd5b604051631e489be560e01b81526001600160a01b0383166004820152602490fd5b5034610898576020366003190112610898576020610c79610c746113ce565b61151e565b604051908152f35b503461089857806003193601126108985760206040517fe453bacb314e78dcd5192e6b1a2b1f0e7c76e92f6b7e429a6a90f04e39db3b768152f35b5034610898578060031936011261089857602090604051908152f35b503461089857806003193601126108985760206040517f5719df9ef2c4678b547f89e4f5ae410dbf400fc51cf3ded434c55f6adea2c43f8152f35b503461089857806003193601126108985760206040517f880a91047114272656e533301261260c75e4d11543ac7303d6fe4204579ec7278152f35b5034610898576020366003190112610898576020610d72610d6d6113ce565b6114d4565b6040519015158152f35b503461089857604036600319011261089857610d966113ce565b610d9e6113e4565b825460ff8160081c161590818092610fbf575b8015610fa8575b15610f4c5760ff198116600117855581610f3b575b5083549160ff8360081c1615610ee25762010000600160b01b03601085901b1662010000600160b01b0319841681178655936001600160a01b03919082168015159081610e86575b50610e74571660018060a01b03196002541617600255610e33578280f35b610100600160b01b031916178155604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a138808280f35b6040516384d942fd60e01b8152600490fd5b6040516301ffc9a760e01b8152637965db0b60e01b60048201529150602090829060249082905afa908115610319578791610ec4575b501538610e15565b610edc915060203d8111610718576107098183611459565b38610ebc565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b61ffff191661010117845538610dcd565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b158015610db85750600160ff821614610db8565b50600160ff821610610db1565b503461089857608036600319011261089857610fe66113ce565b610fee6113e4565b906044359160643591600383101561126a578454604051632474521560e21b8152600481018790523360248201526001600160a01b039260209290919083908290604490829060101c88165afa90811561125f578891611242575b5015611230578216808752600180835260408820805460ff60a01b199686169687166001600160a81b03199091161760a09790971b60ff60a01b1696909617909555939492936001600160a01b0319936110a281611494565b6110af6040519182611459565b8181526110bb82611494565b8482019190601f1901368337838a5288855260408a20905191908901906001600160401b03831161121c57600160401b831161121c5781548383558084106111f5575b50908a52848a20898b5b8481106111e157509250505088905b61111f578880f35b61ffff8116828110156111dc576040519063c661065760e01b8252600482015284816024818b5afa908115610bfe578a916111a6575b50838a528885528860408b20018054831015611192579161118a918782888e8e999897815220019116898254161790556114ab565b909192611117565b634e487b7160e01b8b52603260045260248bfd5b90508481813d83116111d5575b6111bd8183611459565b81010312610bf357518581168103610bf35738611155565b503d6111b3565b508880f35b878985511694019381840155018a90611108565b8a84888e8681522092830192015b8281106112115750506110fe565b8d8155018b90611203565b634e487b7160e01b8b52604160045260248bfd5b604051631886ea7d60e11b8152600490fd5b6112599150833d8511610718576107098183611459565b38611049565b6040513d8a823e3d90fd5b8480fd5b503461089857806003193601126108985760206040517f39f61ca2a1a28fee144218173ec637b649a353e4026b2738c673800e5bf1437b8152f35b50346108985780600319360112610898576002546040516001600160a01b039091168152602090f35b503461089857806003193601126108985760206040517fe965846df3dd5b1dfa65f58e31477079e90140e0908b6dd31b5aead5a57cf3658152f35b50346108985780600319360112610898575460405160109190911c6001600160a01b03168152602090f35b905034610aa8576020366003190112610aa85760043563ffffffff60e01b81168091036107915782546301ffc9a760e01b835260048301919091526020908290602490829060101c6001600160a01b03165afa9081156113c357602092916113a6575b506040519015158152f35b6113bd9150823d8111610718576107098183611459565b3861139b565b6040513d84823e3d90fd5b600435906001600160a01b03821682036104d157565b602435906001600160a01b03821682036104d157565b606081019081106001600160401b0382111761141557604052565b634e487b7160e01b600052604160045260246000fd5b604081019081106001600160401b0382111761141557604052565b6001600160401b03811161141557604052565b601f909101601f19168101906001600160401b0382119082101761141557604052565b908160209103126104d1575180151581036104d15790565b6001600160401b0381116114155760051b60200190565b61ffff8091169081146114be5760010190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0390811660009081526001602052604090205416151590565b80518210156115085760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b60009161152a826114d4565b15610c345760018060a01b039283831680825260016020918183526040958685208751611556816113fa565b60ff82548b8116835260a01c16918682019260038110156117e4578a918791855201918b8251938a8586938c845492838152019383528b8d80852094925b8484106117bd57505050505050906115ad910384611459565b0152805160038110156117a95784146116ef57516003811015610c20576002146115e2578651636844a2db60e11b8152600490fd5b6115ee909695966114d4565b156116d857835280825283832090845191611608836113fa565b60ff8154898116855260a01c166003811015610c2057908291858501520185518092858354928381520192875285872091875b8181106116c35750505050918161165a60049798999386950382611459565b8782015251168551948580926354f0f7d560e01b82525afa9384156116b857508193611687575b50505090565b9091809350813d83116116b1575b61169f8183611459565b81010312610898575051388080611681565b503d611695565b51913d9150823e3d90fd5b83548c1685529387019392820192820161163b565b602490855190631e489be560e01b82526004820152fd5b506116fc909695966114d4565b156116d857835280825283832090845191611716836113fa565b60ff8154898116855260a01c166003811015610c2057908291858501520185518092858354928381520192875285872091875b8181106117945750505050918161176860049798999386950382611459565b878201525116855194858092630176f71760e71b82525afa9384156116b8575081936116875750505090565b83548c16855293870193928201928201611749565b634e487b7160e01b87526021600452602487fd5b909295919480989950859497505416815201940191019085928f928f9695938d8d91611594565b634e487b7160e01b89526021600452602489fd5b6001600160a01b039091168152602081019190915260400190565b3d1561184d573d906001600160401b0382116114155760405191611841601f8201601f191660200184611459565b82523d6000602084013e565b60609056fea26469706673582212209ef515e2e55230de58c07c6a92490223c680a16ecb96c4f6a957fa22f2229c1864736f6c63430008110033",
  "devdoc": {
    "details": "See ILPAdapter interface for full details.",
    "kind": "dev",
    "methods": {
      "getFiatPrice1e18(address)": {
        "params": {
          "asset": "- address of erc20 token contract"
        },
        "returns": {
          "_0": "usdPrice1e18 such that asset.balanceOf() * getFiatPrice1e18(asset) / 1e18 == $$ * 1e18*"
        }
      },
      "isAdapterLP(address)": {
        "params": {
          "asset": "- address of LP token to check*"
        }
      },
      "registerLP(address,address,uint256,uint8)": {
        "params": {
          "lp": "address of LP token",
          "lpPool": "address of pool of {lp} LP-token",
          "nTokens": "amount of underlyingTokens*"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      },
      "withdraw(address,uint256)": {
        "params": {
          "amount": "- amount of asset to withdraw/unwrap*",
          "asset": "- address of LP token to withdraw/unwrap"
        }
      }
    },
    "title": "CurveAdapter",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getFiatPrice1e18(address)": {
        "notice": "WARNING! Read this description very carefully!     function getFiatPrice1e18(address asset) returns (uint256) that:         basicAmountOfAsset * getFiatPrice1e18(asset) / 1e18 === $$ * 1e18     in other words, it doesn't matter what's the erc20.decimals is,     you just multiply token balance in basic units on value from oracle and get dollar amount multiplied on 1e18. different assets have different deviation threshold (errors)     for wBTC it's <= 0.5%, read more https://data.chain.link/ethereum/mainnet/crypto-usd/btc-usd     for other asset is can be larger based on particular oracle implementation. examples:     market price of btc = $30k,     for 0.1 wBTC the unit256 amount is 0.1 * 1e18     0.1 * 1e18 * (price1e18 / 1e18) == $3000 == uint256(3000*1e18)     => price1e18 = 30000 * 1e18;     market price of usdt = $0.97,     for 1 usdt uint256 = 1 * 1e6     so 1*1e6 * price1e18 / 1e18 == $0.97 == uint256(0.97*1e18)     => 1*1e6 * (price1e18 / 1e18) / (0.97*1e18)   = 1     =>  price1e18 = 0.97 * (1e18/1e6) * 1e18    assume market price of wBTC = $31,503.77, oracle error = $158     case #1: small amount of wBTC         we have 0.0,000,001 wBTC that is worth v = $0.00315 ± $0.00001 = 0.00315*1e18 = 315*1e13 ± 1*1e13         actual balance on the asset b = wBTC.balanceOf() =  0.0000001*1e18 = 1e11         oracle should return or = oracle.getFiatPrice1e18(wBTC) <=>         <=> b*or = v => v/b = 315*1e13 / 1e11 = 315*1e2 ± 1e2         error = or.error * b = 1e2 * 1e11 = 1e13 => 1e13/1e18 usd = 1e-5 = 0.00001 usd     case #2: large amount of wBTC         v = 2,000,000 wBTC = $31,503.77 * 2m ± 158*2m = $63,007,540,000 ± $316,000,000 = 63,007*1e24 ± 316*1e24         for calc convenience we increase error on 0.05 and have v = 63,000*24 ± 300*1e24 = (630 ± 3)*1e26         b = 2*1e6 * 1e18 = 2*1e24         or = v/b = (630 ± 3)*1e26 / 2*1e24 = 315*1e2 ± 1.5*1e2         error = or.error * b = 1.5*100 * 2*1e24 = 3*1e26 = 3*1e8*1e18 = $300,000,000 ~ $316,000,000     assume the market price of USDT = $0.97 ± $0.00485,     case #3: little amount of USDT         v = USDT amount 0.005 = 0.005*(0.97 ± 0.00485) = 0.00485*1e18 ± 0.00002425*1e18 = 485*1e13 ± 3*1e13         we rounded error up on (3000-2425)/2425 ~= +24% for calculation convenience.         b = USDT.balanceOf() = 0.005*1e6 = 5*1e3         b*or = v => or = v/b = (485*1e13 ± 3*1e13) / 5*1e3 = 970*1e9 ± 6*1e9         error = 6*1e9 * 5*1e3 / 1e18 = 30*1e12/1e18 = 3*1e-5 = $0,00005     case #4: lot of USDT         v = we have 100,000,000,000 USDT = $97B = 97*1e9*1e18 ± 0.5*1e9*1e18         b = USDT.balanceOf() = 1e11*1e6 = 1e17         or = v/b = (97*1e9*1e18 ± 0.5*1e9*1e18) / 1e17 = 970*1e9 ± 5*1e9         error = 5*1e9 * 1e17 = 5*1e26 = 0.5 * 1e8*1e18"
      },
      "getFiatPrice1e18Unsafe(address)": {
        "notice": "Is depreceted, only for tests usage"
      },
      "isAdapterLP(address)": {
        "notice": "Returns if asset ig Balancer LP token, registered in our adapter"
      },
      "registerLP(address,address,uint256,uint8)": {
        "notice": "Register the given LP token address and set the LP pool"
      },
      "withdraw(address,uint256)": {
        "notice": "Unwrap LP token with depth = 2 (if underlying token is LP => it's also unwrapping)"
      }
    },
    "notice": "Adapter for Curve LP token.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 671,
        "contract": "contracts/periphery/contracts/adapters/CurveAdapter.sol:CurveAdapter",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 674,
        "contract": "contracts/periphery/contracts/adapters/CurveAdapter.sol:CurveAdapter",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 34698,
        "contract": "contracts/periphery/contracts/adapters/CurveAdapter.sol:CurveAdapter",
        "label": "ACCESS_CONTROL_SINGLETON",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(ISuAccessControl)38513"
      },
      {
        "astId": 36157,
        "contract": "contracts/periphery/contracts/adapters/CurveAdapter.sol:CurveAdapter",
        "label": "lps",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(CurveLPInfo)36147_storage)"
      },
      {
        "astId": 36160,
        "contract": "contracts/periphery/contracts/adapters/CurveAdapter.sol:CurveAdapter",
        "label": "ORACLE",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ISuOracle)38704"
      },
      {
        "astId": 36710,
        "contract": "contracts/periphery/contracts/adapters/CurveAdapter.sol:CurveAdapter",
        "label": "__gap",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)45_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ISuAccessControl)38513": {
        "encoding": "inplace",
        "label": "contract ISuAccessControl",
        "numberOfBytes": "20"
      },
      "t_contract(ISuOracle)38704": {
        "encoding": "inplace",
        "label": "contract ISuOracle",
        "numberOfBytes": "20"
      },
      "t_enum(CurvePoolType)36138": {
        "encoding": "inplace",
        "label": "enum CurvePoolType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(CurveLPInfo)36147_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CurveLPInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(CurveLPInfo)36147_storage"
      },
      "t_struct(CurveLPInfo)36147_storage": {
        "encoding": "inplace",
        "label": "struct CurveLPInfo",
        "members": [
          {
            "astId": 36140,
            "contract": "contracts/periphery/contracts/adapters/CurveAdapter.sol:CurveAdapter",
            "label": "pool",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 36143,
            "contract": "contracts/periphery/contracts/adapters/CurveAdapter.sol:CurveAdapter",
            "label": "poolType",
            "offset": 20,
            "slot": "0",
            "type": "t_enum(CurvePoolType)36138"
          },
          {
            "astId": 36146,
            "contract": "contracts/periphery/contracts/adapters/CurveAdapter.sol:CurveAdapter",
            "label": "underlyingTokens",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}