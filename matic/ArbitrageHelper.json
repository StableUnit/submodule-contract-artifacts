{
  "address": "0x7050622D0E01C39eefB13409117359155A51ca7a",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "BadSender",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidProfitPercent",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        }
      ],
      "name": "LPTokenNotRegistered",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        }
      ],
      "name": "LPTokenNotSupported",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "NotAPool",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SwapBy1InchError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SwapByParaSwapError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "expectedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "realAmount",
          "type": "uint256"
        }
      ],
      "name": "SwapNotProfitable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroRecipient",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lp",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        }
      ],
      "name": "ApprovalRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lp",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        }
      ],
      "name": "LPRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approveToVeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "newAmount",
          "type": "uint256"
        }
      ],
      "name": "changeCalldataAmount",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "clipperExchange",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "srcToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dstToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "outputAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "goodUntil",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "vs",
          "type": "bytes32"
        }
      ],
      "name": "clipperSwap",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "delegateVotingPower",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_exchange",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gov",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_veGov",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_topStakers",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lpToAdapter",
      "outputs": [
        {
          "internalType": "contract ILPAdapter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lp",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lpAdapter",
          "type": "address"
        }
      ],
      "name": "registerLP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lp",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lpAdapter",
          "type": "address"
        }
      ],
      "name": "revokeApprove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "returnAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "stableunitFillOrderCallback",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unlockTime",
          "type": "uint256"
        }
      ],
      "name": "stakeTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "subscribeInTopStaker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "srcToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "dstToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "srcReceiver",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "dstReceiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minReturnAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "flags",
              "type": "uint256"
            }
          ],
          "internalType": "struct SwapDescription",
          "name": "",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "swap",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "token2sellAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minProfitPercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minUnwrapSlippage",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            }
          ],
          "internalType": "struct InchData[]",
          "name": "inchData",
          "type": "tuple[]"
        }
      ],
      "name": "swapLPWithFlashLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "token2sellAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minProfitPercent",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            }
          ],
          "internalType": "struct InchData",
          "name": "inchData",
          "type": "tuple"
        }
      ],
      "name": "swapWithFlashLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "name": "uniswapV3Swap",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "name": "unoswap",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unsubscribeFromTopStaker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "4b662494c2d36519e2003da4fb264050",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"BadSender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidProfitPercent\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"}],\"name\":\"LPTokenNotRegistered\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"}],\"name\":\"LPTokenNotSupported\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"NotAPool\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapBy1InchError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapByParaSwapError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expectedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"realAmount\",\"type\":\"uint256\"}],\"name\":\"SwapNotProfitable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroRecipient\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"}],\"name\":\"ApprovalRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"}],\"name\":\"LPRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approveToVeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"changeCalldataAmount\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"clipperExchange\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"goodUntil\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"vs\",\"type\":\"bytes32\"}],\"name\":\"clipperSwap\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"delegateVotingPower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchange\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_veGov\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_topStakers\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lpToAdapter\",\"outputs\":[{\"internalType\":\"contract ILPAdapter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lpAdapter\",\"type\":\"address\"}],\"name\":\"registerLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lpAdapter\",\"type\":\"address\"}],\"name\":\"revokeApprove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"returnAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"stableunitFillOrderCallback\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"name\":\"stakeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscribeInTopStaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"srcReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flags\",\"type\":\"uint256\"}],\"internalType\":\"struct SwapDescription\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token2sellAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minProfitPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minUnwrapSlippage\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"internalType\":\"struct InchData[]\",\"name\":\"inchData\",\"type\":\"tuple[]\"}],\"name\":\"swapLPWithFlashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token2sellAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minProfitPercent\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"internalType\":\"struct InchData\",\"name\":\"inchData\",\"type\":\"tuple\"}],\"name\":\"swapWithFlashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"name\":\"uniswapV3Swap\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"name\":\"unoswap\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unsubscribeFromTopStaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See IArbitrageHelper interface for full details.\",\"kind\":\"dev\",\"methods\":{\"changeCalldataAmount(bytes,uint256)\":{\"params\":{\"data\":\"- calldata to edit\",\"newAmount\":\"- new amount that should replace amount in {data}\"},\"returns\":{\"_0\":\"edited calldata with new amount inside*\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"stableunitFillOrderCallback(address,uint256,address,bytes)\":{\"details\":\"behaviour like in uniswapV3FlashCallback: https://docs.uniswap.org/contracts/v3/guides/flash-integrations/flash-callback and AAVE flash-loan callback: https://github.com/aave/aave-v3-core/blob/master/contracts/flashloan/interfaces/IFlashLoanSimpleReceiver.sol*\"},\"swapLPWithFlashLoan(uint256,uint256,uint256,uint256,(address,bytes,address)[])\":{\"details\":\"Contract receive LP-token from exchange module, unwrap it and swap with 1inch all underline tokens to token that exchange module need.- minProfitPercent must be > 0 and <= 10000 (100%)      - Transaction reverts if actual profit is less than minProfitPercent of the flash loan amount      - Higher minProfitPercent provides better protection against sandwich attacks        but may result in fewer successful arbitrages*\",\"params\":{\"inchData\":\"- 1inch callData and contract array to swap every underline token of LP\",\"minProfitPercent\":\"Minimum required profit in basis points (1 bp = 0.01%)\",\"minUnwrapSlippage\":\"Minimum slippage to unwrap LP, in basis points (1 bp = 0.01%)\",\"orderId\":\"- Id of order in Exchange module to fill\",\"token2sellAmount\":\"- Amount of token in order to get as flash-loan\"}},\"swapWithFlashLoan(uint256,uint256,uint256,(address,bytes,address))\":{\"details\":\"Contract receive loan from exchange module, sell it on 1inch and get profit = received amount - fee- minProfitPercent must be > 0 and <= 10000 (100%)      - Transaction reverts if actual profit is less than minProfitPercent of the flash loan amount      - Higher minProfitPercent provides better protection against sandwich attacks        but may result in fewer successful arbitrages*\",\"params\":{\"inchData\":\"- 1inch callData and contract to swap loan\",\"minProfitPercent\":\"Minimum required profit in basis points (1 bp = 0.01%)\",\"orderId\":\"- Id of order in Exchange module to fill\",\"token2sellAmount\":\"- Amount of token in order to get as flash-loan\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"ArbitrageHelper\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approveToVeToken(uint256)\":{\"notice\":\"Before stake we need to approve veToken contract to use our Governance tokens*\"},\"changeCalldataAmount(bytes,uint256)\":{\"notice\":\"Helper function to change amount parameter on callback that depends on return by 1inch API calldata for swap. We also change minAmount proportionally to newAmount. Route path don't depend on that - this path was calculated previously in backend part and is stored in {data}.\"},\"delegateVotingPower(address)\":{\"notice\":\"Delegate voting power to another contract or user*\"},\"emergencyWithdraw(address,address,uint256)\":{\"notice\":\"Emergency withdraw in case contract have some tokens, that can be transferred by default functions*\"},\"stableunitFillOrderCallback(address,uint256,address,bytes)\":{\"notice\":\"This is callback function from Exchange contract. fillOrderAsFlashLoan call (msg.sender).executeOperation(...) after transferring loan to sender\"},\"stakeTokens(uint256,uint256)\":{\"notice\":\"We stake Governance token from contract to receive voting power to make a contract be able to be a top-staker.*\"},\"subscribeInTopStaker()\":{\"notice\":\"Subscribe contract to be a staker in TopStaker contract*\"},\"swapLPWithFlashLoan(uint256,uint256,uint256,uint256,(address,bytes,address)[])\":{\"notice\":\"The same as swapWithFlashLoan, but loan is LP-token that we need to unwrap\"},\"swapWithFlashLoan(uint256,uint256,uint256,(address,bytes,address))\":{\"notice\":\"Reference implementation of Arbitrage bot contract, that use Exchange module to get profit\"},\"uniswapV3Swap(uint256,uint256,uint256[])\":{\"notice\":\"We need this functions to check their selector and functionSelector in calldata for changeCalldataAmount() function*\"},\"unsubscribeFromTopStaker()\":{\"notice\":\"Unsubscribe contract from stakers list in TopStaker contract*\"}},\"notice\":\"Helper contract to arbitrage using Exchange module. This is reference implementation that is enough to start arbitrage in Exchange Module. Anyone can update the code and deploy own ArbitrageHelper.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/stableunit-exchange/contracts/exchange/ArbitrageHelper.sol\":\"ArbitrageHelper\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x359a1ab89b46b9aba7bcad3fb651924baf4893d15153049b9976b0fc9be1358e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2025ccf05f6f1f2fd4e078e552836f525a1864e3854ed555047cd732320ab29b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"contracts/stableunit-exchange/contracts/exchange/ArbitrageHelper.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport \\\"../interfaces/IArbitrageHelper.sol\\\";\\nimport \\\"../interfaces/IExchange.sol\\\";\\nimport \\\"./CalldataDecoder.sol\\\";\\nimport \\\"../periphery/contracts/interfaces/adapters/ILPAdapter.sol\\\";\\nimport \\\"../interfaces/IVotingEscrow.sol\\\";\\nimport \\\"../interfaces/ITopStakers.sol\\\";\\n\\n/**\\n * @title ArbitrageHelper\\n * @notice Helper contract to arbitrage using Exchange module.\\n * This is reference implementation that is enough to start arbitrage in Exchange Module.\\n * Anyone can update the code and deploy own ArbitrageHelper.\\n * @dev See IArbitrageHelper interface for full details.\\n */\\ncontract ArbitrageHelper is OwnableUpgradeable, IArbitrageHelper, CalldataDecoder, ReentrancyGuardUpgradeable {\\n    using SafeERC20 for IERC20;\\n\\n    IExchange internal EXCHANGE;\\n    IVotingEscrow internal VE_GOV;\\n    IERC20 internal GOV;\\n    ITopStakers internal TOP_STAKERS;\\n    mapping(address => ILPAdapter) public lpToAdapter; // Mapping LP address to it's adapter to withdraw it\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(address _exchange, address _gov, address _veGov, address _topStakers) public initializer {\\n        __Ownable_init();\\n        __ReentrancyGuard_init();\\n\\n        EXCHANGE = IExchange(_exchange);\\n        GOV = IERC20(_gov);\\n        VE_GOV = IVotingEscrow(_veGov);\\n        TOP_STAKERS = ITopStakers(_topStakers);\\n    }\\n\\n    function registerLP(address _lp, address _lpAdapter) public onlyOwner {\\n        lpToAdapter[_lp] = ILPAdapter(_lpAdapter);\\n        uint256 allowance = IERC20(_lp).allowance(address(this), _lpAdapter);\\n        uint256 MAX_UINT = 2**256 - 1;\\n\\n        if (allowance != MAX_UINT) {\\n            IERC20(_lp).forceApprove(_lpAdapter, MAX_UINT);\\n        }\\n\\n        emit LPRegistered(_lp, _lpAdapter);\\n    }\\n\\n    function revokeApprove(address _lp, address _lpAdapter) public onlyOwner {\\n        uint256 allowance = IERC20(_lp).allowance(address(this), _lpAdapter);\\n\\n        if (allowance > 0) {\\n            // We don't need forceApprove because we set allowance to 0\\n            IERC20(_lp).safeApprove(_lpAdapter, 0);\\n        }\\n\\n        emit ApprovalRevoked(_lp, _lpAdapter);\\n    }\\n\\n    /**\\n     * @notice Swap using Paraswap. Sell {amount2sell} token2sell to token using route encoded in paraswapData.data\\n     * @dev We get that data in bot using ParaSwap API (apiv5.paraswap.io)\\n     * Docs: https://developers.paraswap.network/api/build-parameters-for-transaction\\n     * DEPRECATED, we use 1inch here, but it's possible to use Paraswap instead\\n     */\\n    //    function swapByParaswap(address token2sell, uint256 amount2sell, ParaswapData memory paraswapData) internal {\\n    //        // All token transfers are through tokenTransferProxy, so we need to make approve to this contract\\n    //        IERC20(token2sell).forceApprove(paraswapData.tokenTransferProxy, amount2sell);\\n    //        // solhint-disable-next-line avoid-low-level-calls\\n    //        (bool success,) = paraswapData.contractAddress.call(paraswapData.data);\\n    //        if (!success) {\\n    //            revert SwapByParaSwapError();\\n    //        }\\n    //    }\\n    /**\\n     * @notice as in swapByParaswap, look into utils/1inch.ts\\n     * @dev Docs: https://docs.1inch.io/docs/aggregation-protocol/api/swap-params/\\n     */\\n    function swapBy1Inch(address token2sell, uint256 amount2sell, address contractAddress, bytes memory data) internal {\\n        IERC20(token2sell).forceApprove(contractAddress, amount2sell);\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success,) = contractAddress.call(data);\\n        if (!success) {\\n            revert SwapBy1InchError();\\n        }\\n    }\\n\\n    function swapWithFlashLoan(\\n        uint256 orderId,\\n        uint256 token2sellAmount,\\n        uint256 minProfitPercent,\\n        InchData memory inchData\\n    ) public onlyOwner {\\n        if (minProfitPercent == 0 || minProfitPercent > 10000) revert InvalidProfitPercent();\\n        Order memory order = EXCHANGE.getOrder(orderId);\\n\\n        InchData[] memory inchDataArr = new InchData[](1);\\n        inchDataArr[0] = inchData;\\n        // We do a flash-loan of {token2sell} in amount of {token2sellAmount} to our contract.\\n        // {data} will be decoded in stableunitFillOrderCallback() - the callback after we get flash-loan\\n        EXCHANGE.fillOrderAsFlashLoan(\\n            orderId,\\n            token2sellAmount,\\n            abi.encode(FlashCallbackData({\\n                isLP: false,\\n                orderId: orderId,\\n                token2sell: order.token2sell,\\n                token2sellAmount: token2sellAmount,\\n                minProfitPercent: minProfitPercent,\\n                minUnwrapSlippage: 0, // we don't need it here\\n                recipient: msg.sender,\\n                inchData: inchDataArr\\n            }))\\n        );\\n    }\\n\\n    function swapLPWithFlashLoan(\\n        uint256 orderId,\\n        uint256 token2sellAmount,\\n        uint256 minProfitPercent,\\n        uint256 minUnwrapSlippage,\\n        InchData[] memory inchData\\n    ) public onlyOwner {\\n        if (minProfitPercent == 0 || minProfitPercent > 10000) revert InvalidProfitPercent();\\n        Order memory order = EXCHANGE.getOrder(orderId);\\n\\n        EXCHANGE.fillOrderAsFlashLoan(\\n            orderId,\\n            token2sellAmount,\\n            abi.encode(FlashCallbackData({\\n                isLP: true,\\n                orderId: orderId,\\n                token2sell: order.token2sell,\\n                token2sellAmount: token2sellAmount,\\n                minProfitPercent: minProfitPercent,\\n                minUnwrapSlippage: minUnwrapSlippage,\\n                recipient: msg.sender,\\n                inchData: inchData\\n            }))\\n        );\\n    }\\n\\n    /**\\n     * @notice This is callback function from Exchange contract.\\n     * fillOrderAsFlashLoan call (msg.sender).executeOperation(...) after transferring loan to sender\\n     * @dev behaviour like in uniswapV3FlashCallback:\\n     * https://docs.uniswap.org/contracts/v3/guides/flash-integrations/flash-callback\\n     * and AAVE flash-loan callback:\\n     * https://github.com/aave/aave-v3-core/blob/master/contracts/flashloan/interfaces/IFlashLoanSimpleReceiver.sol\\n    **/\\n    function stableunitFillOrderCallback(\\n        address returnAsset,\\n        uint256 amount,\\n        address sender,\\n        bytes calldata data\\n    ) external nonReentrant returns (bool) {\\n        FlashCallbackData memory decoded = abi.decode(data, (FlashCallbackData));\\n        address token2sell = decoded.token2sell;\\n        uint256 token2sellAmount = decoded.token2sellAmount;\\n\\n        if (msg.sender != address(EXCHANGE)) revert NotAPool(msg.sender);\\n        if (sender != address(this)) revert BadSender(sender);\\n\\n        uint256 balanceBefore = IERC20(returnAsset).balanceOf(address(this));\\n\\n        if (decoded.isLP) {\\n            if (address(lpToAdapter[token2sell]) == address(0)) revert LPTokenNotRegistered(token2sell);\\n            if (!lpToAdapter[token2sell].isAdapterLP(token2sell)) revert LPTokenNotSupported(token2sell);\\n\\n            WithdrawResult[] memory unwrapResult = lpToAdapter[token2sell].withdraw(token2sell, token2sellAmount, decoded.minUnwrapSlippage);\\n            uint256 inchDataNTokens = decoded.inchData.length;\\n            uint256 unwrapNTokens = unwrapResult.length;\\n\\n            // if withdraw don't unwrap to all underlying tokens, then we need to find 1inch data to use in swap\\n            // else we need to use all 1inch data for each unwrapped tokens\\n            bool isCorrectUnwrap = inchDataNTokens == unwrapNTokens;\\n            for (uint16 i = 0; i < unwrapNTokens; ++i) {\\n                address underlineToken = unwrapResult[i].token;\\n                uint256 underlineTokenAmount = unwrapResult[i].amount;\\n\\n                // If token2buy is underline token of LP-token token2sell => this part of order is done\\n                if (underlineToken != returnAsset) {\\n                    if (isCorrectUnwrap) {\\n                        swapBy1Inch(\\n                            underlineToken,\\n                            underlineTokenAmount,\\n                            decoded.inchData[i].contractAddress,\\n                            this.changeCalldataAmount(decoded.inchData[i].data, underlineTokenAmount)\\n                        );\\n                    } else { // we need to find correct 1inch data for that unwrapped token\\n                        for (uint16 j = 0; j < inchDataNTokens; ++j) {\\n                            if (unwrapResult[i].token == decoded.inchData[j].token) {\\n                                swapBy1Inch(\\n                                    underlineToken,\\n                                    underlineTokenAmount,\\n                                    decoded.inchData[j].contractAddress,\\n                                    this.changeCalldataAmount(decoded.inchData[j].data, underlineTokenAmount)\\n                                );\\n                                break;\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n        } else {\\n            swapBy1Inch(\\n                token2sell,\\n                token2sellAmount,\\n                decoded.inchData[0].contractAddress,\\n                decoded.inchData[0].data\\n            );\\n        }\\n\\n        uint256 balanceAfter = IERC20(returnAsset).balanceOf(address(this));\\n        uint256 tokenBReceived = balanceAfter - balanceBefore;\\n\\n        if (tokenBReceived < amount) revert SwapNotProfitable(amount, tokenBReceived);\\n        uint256 swapProfit = tokenBReceived - amount;\\n        uint256 minProfit = (amount * decoded.minProfitPercent) / 10000;\\n        if (swapProfit < minProfit) revert SwapNotProfitable(minProfit, swapProfit);\\n\\n        // Return flash-loan debt to Exchange contract\\n        IERC20(returnAsset).safeTransfer(address(EXCHANGE), amount);\\n\\n        // Send swapped {returnAsset} minus debt from flash-loan to liquidator (it's user profit)\\n        IERC20(returnAsset).safeTransfer(decoded.recipient, swapProfit);\\n\\n        return true;\\n    }\\n\\n    // Staker Module Integration\\n\\n    function approveToVeToken(uint256 amount) external onlyOwner {\\n        GOV.approve(address(VE_GOV), amount);\\n    }\\n\\n    function stakeTokens(uint256 amount, uint256 unlockTime) external onlyOwner {\\n        VE_GOV.createLock(amount, unlockTime);\\n    }\\n\\n    function subscribeInTopStaker() external onlyOwner {\\n        TOP_STAKERS.subscribe();\\n    }\\n\\n    function unsubscribeFromTopStaker() external onlyOwner {\\n        TOP_STAKERS.unsubscribe();\\n    }\\n\\n    function delegateVotingPower(address to) external onlyOwner {\\n        VE_GOV.delegate(to);\\n    }\\n\\n    function emergencyWithdraw(address token, address recipient, uint256 amount) external onlyOwner {\\n        if (recipient == address(0)) revert ZeroRecipient();\\n        IERC20(token).safeTransfer(recipient, amount);\\n        emit EmergencyWithdraw(token, recipient, amount);\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x4e1079b56fdfc6c576b520b9992d1024dd1918a8fd9cba163e7569104ce33464\",\"license\":\"BSL 1.1\"},\"contracts/stableunit-exchange/contracts/exchange/CalldataDecoder.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\npragma solidity ^0.8.0;\\n\\nstruct SwapDescription {\\n    address srcToken;\\n    address dstToken;\\n    address srcReceiver;\\n    address dstReceiver;\\n    uint256 amount;\\n    uint256 minReturnAmount;\\n    uint256 flags;\\n}\\n\\n/**\\n * @notice Helper abstract contract to work with calldata\\n**/\\nabstract contract CalldataDecoder {\\n    /**\\n     * @notice We need this functions to check their selector and functionSelector in calldata\\n     * for changeCalldataAmount() function\\n    **/\\n    /* solhint-disable no-empty-blocks */\\n    function uniswapV3Swap(uint256, uint256, uint256[] calldata) public pure {}\\n    function unoswap(address, uint256, uint256, uint256[] calldata) public pure {}\\n    function swap(address, SwapDescription calldata, bytes calldata, bytes calldata) public pure {}\\n    function clipperSwap(\\n        address clipperExchange,\\n        address srcToken,\\n        address dstToken,\\n        uint256 inputAmount,\\n        uint256 outputAmount,\\n        uint256 goodUntil,\\n        bytes32 r,\\n        bytes32 vs\\n    ) public pure {}\\n    /* solhint-enable no-empty-blocks */\\n\\n    /**\\n      * @notice\\n      * Helper function to change amount parameter on callback that depends on return by 1inch API calldata for swap.\\n      * We also change minAmount proportionally to newAmount.\\n      * Route path don't depend on that - this path was calculated previously in backend part and is stored in {data}.\\n      * @param data - calldata to edit\\n      * @param newAmount - new amount that should replace amount in {data}\\n      * @return edited calldata with new amount inside\\n     **/\\n    function changeCalldataAmount(bytes calldata data, uint256 newAmount) public pure returns (bytes memory) {\\n        bytes4 functionSelector = bytes4(data[:4]);\\n        if (functionSelector == this.uniswapV3Swap.selector) {\\n            (\\n                uint256 oldAmount, uint256 oldMinReturn, uint256[] memory pools\\n            ) = abi.decode(data[4:], (uint256, uint256, uint256[]));\\n            uint256 newMinReturn = oldAmount > 0 ? (oldMinReturn * newAmount) / oldAmount : 1;\\n            return abi.encodeWithSignature(\\\"uniswapV3Swap(uint256,uint256,uint256[])\\\", newAmount, newMinReturn, pools);\\n        }\\n        if (functionSelector == this.unoswap.selector) {\\n            (\\n                address token, uint256 oldAmount, uint256 oldMinReturn, uint256[] memory pools\\n            ) = abi.decode(data[4:], (address,uint256,uint256,uint256[]));\\n            uint256 newMinReturn = oldAmount > 0 ? (oldMinReturn * newAmount) / oldAmount : 1;\\n            return abi.encodeWithSignature(\\\"unoswap(address,uint256,uint256,uint256[])\\\", token, newAmount, newMinReturn, pools);\\n        }\\n        if (functionSelector == this.swap.selector) {\\n            (\\n                address caller, SwapDescription memory description, bytes memory permit, bytes memory swapData\\n            ) = abi.decode(data[4:], (address, SwapDescription, bytes, bytes));\\n            uint256 newMinReturn = description.amount > 0\\n                ? (description.minReturnAmount * newAmount) / description.amount\\n                : 1;\\n            return abi.encodeWithSignature(\\n                \\\"swap(address,(address,address,address,address,uint256,uint256,uint256),bytes,bytes)\\\",\\n                caller,\\n                SwapDescription({\\n                    srcToken: description.srcToken,\\n                    dstToken: description.dstToken,\\n                    srcReceiver: description.srcReceiver,\\n                    dstReceiver: description.dstReceiver,\\n                    amount: newAmount,\\n                    minReturnAmount: newMinReturn,\\n                    flags: description.flags\\n                }),\\n                permit,\\n                swapData\\n            );\\n        }\\n        if (functionSelector == this.clipperSwap.selector) {\\n            (\\n                address clipperExchange,\\n                address srcToken,\\n                address dstToken,\\n                uint256 oldInputAmount,\\n                uint256 oldOutputAmount,\\n                uint256 goodUntil,\\n                bytes32 r,\\n                bytes32 vs\\n            ) = abi.decode(data[4:], (address, address, address, uint256, uint256, uint256, bytes32, bytes32));\\n            uint256 newOutputAmount = oldInputAmount > 0 ?\\n                (oldOutputAmount * newAmount) / oldInputAmount : 1;\\n            return abi.encodeWithSignature(\\n                \\\"clipperSwap(address,address,address,uint256,uint256,uint256,bytes32,bytes32)\\\",\\n                clipperExchange,\\n                srcToken,\\n                dstToken,\\n                newAmount,\\n                newOutputAmount,\\n                goodUntil,\\n                r,\\n                vs\\n            );\\n        }\\n\\n        return data;\\n    }\\n}\\n\",\"keccak256\":\"0x43d123da8c69456805df5b854affa919a5bac775588572c4fcc02ab3b2cc9827\",\"license\":\"BSL 1.1\"},\"contracts/stableunit-exchange/contracts/interfaces/IArbitrageHelper.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IExchangeCallback.sol\\\";\\n\\nstruct FlashCallbackData {\\n    bool isLP;\\n    uint256 orderId;\\n    address token2sell;\\n    uint256 token2sellAmount;\\n    uint256 minProfitPercent;\\n    uint256 minUnwrapSlippage;\\n    address recipient;\\n    InchData[] inchData;\\n}\\n\\nstruct ParaswapData {\\n    address contractAddress;\\n    address tokenTransferProxy;\\n    bytes data;\\n}\\n\\nstruct InchData {\\n    address contractAddress;\\n    bytes data;\\n    address token; // needed only if adapter unwrap not to all underlying tokens\\n}\\n\\ninterface IArbitrageHelper is IExchangeCallback {\\n    /* ===================== ERRORS ===================== */\\n    error NotAPool(address sender);\\n    error SwapNotProfitable(uint256 expectedAmount, uint256 realAmount);\\n    error SwapByParaSwapError();\\n    error SwapBy1InchError();\\n    error BadSender(address sender);\\n    error LPTokenNotSupported(address lpToken);\\n    error LPTokenNotRegistered(address lpToken);\\n    error InvalidProfitPercent();\\n    error ZeroRecipient();\\n\\n    /* ===================== EVENTS ===================== */\\n    // event SwapByUniswap(address tokenA, address tokenB);\\n    event LPRegistered(address indexed lp, address indexed adapter);\\n    event ApprovalRevoked(address indexed lp, address indexed adapter);\\n    event EmergencyWithdraw(address indexed token, address indexed recipient, uint256 amount);\\n\\n    /* ==================== MUTABLE METHODS ==================== */\\n\\n    /**\\n      * @notice Register LP to use it adapter to withdraw or get price of LP later in swapLPWithFlashLoan();\\n      * @param lp - address of LP token\\n      * @param lpAdapter - address of LPAdapter for this LP token\\n    **/\\n    function registerLP(address lp, address lpAdapter) external;\\n\\n    /**\\n     * @notice Revoke the approval granted to adapter.\\n     * @param lp LP token address for which approval should be revoked.\\n     * @param adapter Address of the adapter whose approval should be revoked.\\n     */\\n    function revokeApprove(address lp, address adapter) external;\\n\\n    /**\\n      * @notice Reference implementation of Arbitrage bot contract, that use Exchange module to get profit\\n      * @dev Contract receive loan from exchange module, sell it on 1inch and get profit = received amount - fee\\n      * @param orderId - Id of order in Exchange module to fill\\n      * @param token2sellAmount - Amount of token in order to get as flash-loan\\n      * @param minProfitPercent Minimum required profit in basis points (1 bp = 0.01%)\\n      * @param inchData - 1inch callData and contract to swap loan\\n      * @dev - minProfitPercent must be > 0 and <= 10000 (100%)\\n      *      - Transaction reverts if actual profit is less than minProfitPercent of the flash loan amount\\n      *      - Higher minProfitPercent provides better protection against sandwich attacks\\n      *        but may result in fewer successful arbitrages\\n     **/\\n    function swapWithFlashLoan(\\n        uint256 orderId,\\n        uint256 token2sellAmount,\\n        uint256 minProfitPercent,\\n        InchData memory inchData\\n    ) external;\\n\\n    /**\\n      * @notice The same as swapWithFlashLoan, but loan is LP-token that we need to unwrap\\n      * @dev Contract receive LP-token from exchange module, unwrap it and swap with 1inch all underline tokens\\n      * to token that exchange module need.\\n      * @param orderId - Id of order in Exchange module to fill\\n      * @param token2sellAmount - Amount of token in order to get as flash-loan\\n      * @param minProfitPercent Minimum required profit in basis points (1 bp = 0.01%)\\n      * @param minUnwrapSlippage Minimum slippage to unwrap LP, in basis points (1 bp = 0.01%)\\n      * @param inchData - 1inch callData and contract array to swap every underline token of LP\\n      * @dev - minProfitPercent must be > 0 and <= 10000 (100%)\\n      *      - Transaction reverts if actual profit is less than minProfitPercent of the flash loan amount\\n      *      - Higher minProfitPercent provides better protection against sandwich attacks\\n      *        but may result in fewer successful arbitrages\\n     **/\\n    function swapLPWithFlashLoan(\\n        uint256 orderId,\\n        uint256 token2sellAmount,\\n        uint256 minProfitPercent,\\n        uint256 minUnwrapSlippage,\\n        InchData[] memory inchData\\n    ) external;\\n\\n\\n    /* ==================== STAKE MODULE  ==================== */\\n\\n    /**\\n      * @notice Before stake we need to approve veToken contract to use our Governance tokens\\n     **/\\n    function approveToVeToken(uint256 amount) external;\\n\\n    /**\\n      * @notice We stake Governance token from contract to receive voting power\\n      * to make a contract be able to be a top-staker.\\n     **/\\n    function stakeTokens(uint256 amount, uint256 unlockTime) external;\\n\\n    /**\\n      * @notice Subscribe contract to be a staker in TopStaker contract\\n     **/\\n    function subscribeInTopStaker() external;\\n\\n    /**\\n     * @notice Unsubscribe contract from stakers list in TopStaker contract\\n     **/\\n    function unsubscribeFromTopStaker() external;\\n\\n    /**\\n      * @notice Delegate voting power to another contract or user\\n     **/\\n    function delegateVotingPower(address to) external;\\n\\n    /**\\n      * @notice Emergency withdraw in case contract have some tokens, that can be transferred by default functions\\n     **/\\n    function emergencyWithdraw(address token, address recipient, uint256 amount) external;\\n}\",\"keccak256\":\"0xabe1e2d21030a2001c0264b497175ec453cacaec9db8ed1eb26c6ab4be5cc754\",\"license\":\"BSL 1.1\"},\"contracts/stableunit-exchange/contracts/interfaces/IExchange.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\npragma solidity ^0.8.0;\\n\\nstruct Order {\\n    address token2sell;\\n    address token2buy;\\n    address beneficiary;\\n    address caller;\\n    uint256 amountLeft;\\n    uint256 token2buyAmount;\\n    uint64 creationTimestamp;\\n    uint8 discountType;\\n}\\n\\nstruct OrderWithId {\\n    Order order;\\n    uint256 orderId;\\n}\\n\\ninterface IExchange {\\n    /* ===================== ERRORS ===================== */\\n    error OnlyAdminError();\\n    error OrderExist(uint256 orderId);\\n    error OrderNotExist(uint256 orderId);\\n    error IncorrectToken(address orderToken2buy, address inToken);\\n    error SmallAmountLeft();\\n    error BadOutAmount();\\n    error UserIsNotBeneficiary();\\n    error IsNotTopStaker(address staker);\\n    error IsNotStaker(address staker);\\n    error OrderNotForThisStaker(uint256 orderId, address staker);\\n    error NotEnoughReturnValue();\\n    error CallbackError();\\n    error ZeroPriceError();\\n    error InvalidDiscountType();\\n    error InvalidAddress();\\n    error InvalidTokens();\\n    error InvalidAmount();\\n    error IsNotWhitelisted();\\n    error MaxDiscountTooHigh();\\n    error NoStakersAvailable();\\n    error ZeroRecipient();\\n\\n    /* ======================== EVENTS ========================= */\\n    event PriceCurveChanged();\\n    event OrderAdded(uint256 orderId);\\n    event OrderCanceled(uint256 orderId);\\n    event OrderFilled(uint256 orderId);\\n    event OrderFilledPartially(uint256 orderId);\\n    event LpOrdersAdded(address LPToken, uint256[] orderIds);\\n    event DustThresholdChanged(uint256 oldValue, uint256 newValue);\\n    event WhitelistUpdated(address user, bool isWhitelisted);\\n    event MaxDiscountPercentChanged(uint256 oldMaxDiscountPercent, uint256 newMaxDiscountPercent);\\n    event EmergencyWithdraw(address indexed token, address indexed recipient, uint256 amount);\\n\\n    /* ==================== MUTABLE METHODS ==================== */\\n\\n    /**\\n      * @notice Add order to swap {token2sell} to {token2buy}.\\n      * @dev This swap is async, because depends on how arbitrage bots will fill this order. Emits OrderAdded() event.\\n      * Before addOrder user needs to approve token2sell for exchange contract\\n      * @param token2sell - Address of token to sell\\n      * @param amount2sell - Amount of {token2sell} to sell\\n      * @param token2buy - Address of token to buy\\n      * @param beneficiary - Address that will receive {token2buy} after filling order.\\n      * @param discountType - Speed of decreasing swap price. { 0 - aggressive, 1 - middle, 2 - conservative }\\n      * @param collateralJoin - address of collateral adapter\\n     **/\\n    function addOrder (\\n        address token2sell,\\n        uint256 amount2sell,\\n        address token2buy,\\n        address beneficiary,\\n        uint8 discountType,\\n        address collateralJoin\\n    ) external returns (uint256);\\n\\n    /**\\n      * @notice Only user who place order or who is beneficiary can cancelOrder();\\n      * @param orderId - Id of order to cancel.\\n     **/\\n    function cancelOrder (uint256 orderId) external;\\n\\n    /**\\n      * @notice Fill order with flash-loan like logic\\n      * @dev Caller contract receive orders {token2sell} and after that his stableunitFillOrderCallback() is called.\\n      * At the end of thi callback contract should send some amount of another token back to Exchange contract.\\n      * @dev We don't need slippage protection because:\\n      * 1. Prices are determined by Oracle, not DEX market conditions\\n      * 2. Output amount is calculated deterministically at execution time\\n      * @param orderId - Id of order to fill.\\n      * @param inAmount - Amount of {token2sell} to receive\\n      * @param data - encoded data to pass to callback function\\n     **/\\n    function fillOrderAsFlashLoan (\\n        uint256 orderId,\\n        uint256 inAmount,\\n        bytes memory data\\n    ) external returns (uint256 outAmount);\\n\\n    /**\\n      * @notice Fill order without a flash-loan\\n      * @dev Caller contract send tokens and receive another tokens depends on the order\\n      * @param orderId - Id of order to fill.\\n      * @param inAmount - Amount of {token2sell} to receive\\n     **/\\n    function fillOrderSimple(uint256 orderId, uint256 inAmount) external returns (uint256 outAmount);\\n\\n    /**\\n     * @notice Updates the maximum allowed discount percentage for all order types\\n     * @dev This function can only be called by the contract owner\\n     * @param newMaxDiscountPercent New maximum discount value (in percentage points).\\n     *        Value is bounded to 90% to prevent configuration mistakes\\n     */\\n    function setMaxDiscountPercent(uint256 newMaxDiscountPercent) external;\\n\\n    /**\\n      * @notice Add or remove user from whitelist\\n      * @param user - address of user\\n      * @param isWhitelisted - bool, false if we want to remove, true if we want to add user to whitelist.\\n     **/\\n    function updateWhitelistUser(address user, bool isWhitelisted) external;\\n\\n    /**\\n      * @notice Function to update price curve - how fast {token2sell} price will decrease/increase\\n      * @param discountType - discount type to change\\n      * @param newPriceCurve - parameters of formula\\n     **/\\n    function setPriceCurve(uint8 discountType, uint256[2] calldata newPriceCurve) external;\\n\\n    /**\\n      * @notice Function to update dust threshold\\n      * @param newThreshold - new dust threshold\\n     **/\\n    function setDustThreshold(uint256 newThreshold) external;\\n\\n    /* ==================== VIEW METHODS ==================== */\\n    /**\\n      * @return The amount of outcome that caller will receive if he will fill {orderId} with {inAmount} of {token2sell}\\n     **/\\n    function getExpectedOrderOutcome (uint256 orderId, uint256 inAmount) external view returns (uint256);\\n\\n    /**\\n      * @return Order with id = {orderId}\\n     **/\\n    function getOrder (uint256 orderId) external view returns (Order memory);\\n\\n    /**\\n      * @return The amount of not full-filled orders\\n     **/\\n    function getOrdersCount () external view returns (uint256);\\n\\n    /**\\n      * @return The array of all not-filled orders. May be deleted after adding GraphQL for orderIds\\n     **/\\n    function getAllOrders (uint256 offset, uint256 limit) external view returns (OrderWithId[] memory);\\n\\n    /**\\n     * @notice Returns the address of the staker assigned to an order during grace period\\n     * @param orderId The ID of the order to check\\n     * @return assignedStaker The address of the assigned staker, or zero address if:\\n     *         - Order doesn't exist\\n     *         - Order is past grace period\\n     *         - No top stakers available\\n     */\\n    function getAssignedStaker(uint256 orderId) external view returns (address);\\n\\n    /**\\n  * @notice Emergency withdraw in case contract have some tokens, that can be transferred by default functions\\n     **/\\n    function emergencyWithdraw(address token, address recipient, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xd984d6b394172dd53590c46c8e8f6449559a2c280b44a70bec23e5c2478cb52c\",\"license\":\"BSL 1.1\"},\"contracts/stableunit-exchange/contracts/interfaces/IExchangeCallback.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\npragma solidity ^0.8.0;\\n\\ninterface IExchangeCallback {\\n    /**\\n     * @notice Callback that will be called by Exchange module in fillOrderAsFlashLoan()\\n     * after sending collateral to msg.sender.\\n     * In the implementation you must pay stablecoin for Exchange contract.\\n     * @dev Any contract that calls Exchange#fillOrderAsFlashLoan must implement this interface\\n     * @param returnAsset - The address of the token that should be returned\\n     * @param amount - The amount of the {token} to return\\n     * @param initiator The address of the flashloan initiator\\n     * @return True if the execution of the operation succeeds, false otherwise\\n     */\\n    function stableunitFillOrderCallback (\\n        address returnAsset,\\n        uint256 amount,\\n        address initiator,\\n        bytes calldata params\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xbd2f7dd3ace336acbc49cb598bd6ed0874111569d79a1050b00c114125fadace\",\"license\":\"BSL 1.1\"},\"contracts/stableunit-exchange/contracts/interfaces/ITopStakers.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\npragma solidity ^0.8.0;\\n\\ninterface ITopStakers {\\n    /* ===================== ERRORS ===================== */\\n    error NotStakerFound();\\n    error SubscriptionDelayError();\\n    error AmountMustBeMoreThatMinimum();\\n    error InsufficientStake(uint256 available, uint256 requested);\\n    error LockExpired();\\n    error TokensDelegated();\\n    error AlreadyInTop();\\n    error OnlyAdminError();\\n    error InvalidAddress();\\n    error OutOfBounds();\\n\\n    /* ===================== EVENTS ===================== */\\n\\n    event SubscriptionRequested(address indexed user, uint256 amount, uint256 activationTime);\\n    event TopStakersMaxCountUpdated(uint256 newTopStakersCount);\\n    event VeTokenUpdated(address _veToken);\\n    event MinStakingAmountUpdated(uint256 newAmount);\\n    event SubscriptionDelayUpdated(uint256 newDelay);\\n    event SubscriptionRemoved(address user);\\n\\n    /* ========================= VARS ========================== */\\n\\n    function maxTopStakersCount() external view returns(uint256);\\n\\n    /* ==================== MUTABLE METHODS ==================== */\\n\\n    /**\\n      * @notice Admin function to change number of top stakers\\n     **/\\n    function changeMaxTopStakersCount(uint256 newTopStakersCount) external;\\n\\n    /**\\n      * @notice Admin function to change veToken address\\n     **/\\n    function changeVeToken(address veToken) external;\\n\\n    /**\\n      * @notice Admin function to change minStakingAmount\\n     **/\\n    function changeMinStakingAmount(uint256 minStakingAmount) external;\\n\\n    /**\\n     * @notice Admin function to change subscriptionDelay\\n     **/\\n    function changeSubscriptionDelay(uint256 minStakingAmount) external;\\n\\n    /**\\n      * @notice User function to add yourself in stakers list to be able to be topStaker for liquidation\\n     **/\\n    function subscribe() external;\\n\\n    /**\\n      * @notice User function to remove yourself from stakers list\\n     **/\\n    function unsubscribe() external;\\n\\n    /* ==================== VIEW METHODS ==================== */\\n\\n    /**\\n      * @notice Returns if user is top staker or not\\n     **/\\n    function isTopStaker(address staker) external view returns(bool);\\n\\n\\n    /**\\n      * @notice Returns if user is staker with not expired stake\\n     **/\\n    function isStaker(address user) external view returns(bool);\\n\\n    /**\\n      * @notice Returns the list of users that are topStakers\\n     **/\\n    function getTopStakers() external view returns(address[] memory);\\n\\n    /**\\n      * @notice Returns the amount of subscribed users (stakers list length)\\n     **/\\n    function getTopStakersLength() external view returns(uint256);\\n\\n    /**\\n     * @notice Returns the address of staker in {index} place\\n     **/\\n    function getStakerAt(uint256 index) external view returns(address);\\n\\n    /**\\n     * @notice Returns the time left in seconds, before user can call subscribe/unsubscribe\\n     **/\\n    function getTimeUntilNextSubscribe(address user) external view returns(uint256);\\n}\",\"keccak256\":\"0x1d3506b5d5957398877d4096bde73edbcd69cdeceb4624774805f18a9d9890fe\",\"license\":\"BSL 1.1\"},\"contracts/stableunit-exchange/contracts/interfaces/IVotingEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.3;\\n\\ninterface IVotingEscrow {\\n    function createLock(uint256 _value, uint256 _unlockTime) external;\\n\\n    function increaseAmount(uint256 _value) external;\\n\\n    function increaseUnlockTime(uint256 _unlockTime) external;\\n\\n    function withdraw() external;\\n\\n    function delegate(address _addr) external;\\n\\n    function quitLock() external;\\n\\n    function balanceOf(address _owner) external view returns (uint256);\\n\\n    function balanceOfAt(address _owner, uint256 _blockNumber) external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function totalSupplyAt(uint256 _blockNumber) external view returns (uint256);\\n\\n    function forceUndelegate(address _addr) external;\\n}\\n\",\"keccak256\":\"0x8f8542df2050d4711697e930976df0acae493845f5ce16e29af844faa710b383\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/stableunit-exchange/contracts/periphery/contracts/interfaces/adapters/ILPAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"../oracle/ISuOracle.sol\\\";\\n\\nstruct WithdrawResult {\\n    address token;\\n    uint256 amount;\\n}\\n\\ninterface ILPAdapter is ISuOracle {\\n    /* ======================== ERRORS ======================== */\\n    error IsNotLP(address asset);\\n    error LPOracleNotReady();\\n    error BadMainUnderlyingToken();\\n    error BadDecimals(address asset);\\n    error ZeroRecipient();\\n\\n    /* ========================= EVENTS ========================= */\\n    event EmergencyWithdraw(address indexed token, uint256 amount, address receiver);\\n\\n    /* ==================== MUTABLE METHODS ==================== */\\n    /**\\n      * @notice Unwrap LP token with depth 2 (if underlying token is LP, it's also unwrapping) with slippage protection\\n      * @param asset - address of LP token to withdraw/unwrap\\n      * @param amount - amount of asset to withdraw/unwrap\\n      * @param maxSlippageBps Maximum allowed slippage in basis points (1 = 0.01%)\\n     **/\\n    function withdraw(address asset, uint256 amount, uint256 maxSlippageBps) external returns (WithdrawResult[] memory);\\n\\n    /**\\n     * @notice Withdraw tokens from the adapter in case of emergency.\\n     * @dev This function is restricted to the admin and allows for emergency withdrawal of tokens.\\n     * @param tokens List of tokens to withdraw.\\n     * @param receiver Address of the receiver to receive the tokens.\\n     */\\n    function emergencyWithdraw(address[] calldata tokens, address receiver) external;\\n\\n    /* ====================== VIEW METHODS ==================== */\\n    /**\\n      * @notice Returns if asset ig Balancer LP token, registered in our adapter\\n      * @param asset - address of LP token to check\\n     **/\\n    function isAdapterLP(address asset) external returns (bool);\\n}\",\"keccak256\":\"0x6b173310065afa386f75f4c548ca483b3db8a2464331da73a5d2092ff0f1aff8\",\"license\":\"BSL 1.1\"},\"contracts/stableunit-exchange/contracts/periphery/contracts/interfaces/oracle/ISuOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\n// solhint-disable compiler-version\\npragma solidity >=0.7.6;\\n\\ninterface ISuOracle {\\n    /**\\n     * @notice WARNING! Read this description very carefully!\\n     *     function getFiatPrice1e18(address asset) returns (uint256) that:\\n     *         basicAmountOfAsset * getFiatPrice1e18(asset) / 1e18 === $$ * 1e18\\n     *     in other words, it doesn't matter what's the erc20.decimals is,\\n     *     you just multiply token balance in basic units on value from oracle and get dollar amount multiplied on 1e18.\\n     *\\n     * different assets have different deviation threshold (errors)\\n     *     for wBTC it's <= 0.5%, read more https://data.chain.link/ethereum/mainnet/crypto-usd/btc-usd\\n     *     for other asset is can be larger based on particular oracle implementation.\\n     *\\n     * examples:\\n     *     market price of btc = $30k,\\n     *     for 0.1 wBTC the unit256 amount is 0.1 * 1e18\\n     *     0.1 * 1e18 * (price1e18 / 1e18) == $3000 == uint256(3000*1e18)\\n     *     => price1e18 = 30000 * 1e18;\\n     *\\n     *     market price of usdt = $0.97,\\n     *     for 1 usdt uint256 = 1 * 1e6\\n     *     so 1*1e6 * price1e18 / 1e18 == $0.97 == uint256(0.97*1e18)\\n     *     => 1*1e6 * (price1e18 / 1e18) / (0.97*1e18)   = 1\\n     *     =>  price1e18 = 0.97 * (1e18/1e6) * 1e18\\n     *\\n     *    assume market price of wBTC = $31,503.77, oracle error = $158\\n     *\\n     *     case #1: small amount of wBTC\\n     *         we have 0.0,000,001 wBTC that is worth v = $0.00315 \\u00b1 $0.00001 = 0.00315*1e18 = 315*1e13 \\u00b1 1*1e13\\n     *         actual balance on the asset b = wBTC.balanceOf() =  0.0000001*1e18 = 1e11\\n     *         oracle should return or = oracle.getFiatPrice1e18(wBTC) <=>\\n     *         <=> b*or = v => v/b = 315*1e13 / 1e11 = 315*1e2 \\u00b1 1e2\\n     *         error = or.error * b = 1e2 * 1e11 = 1e13 => 1e13/1e18 usd = 1e-5 = 0.00001 usd\\n     *\\n     *     case #2: large amount of wBTC\\n     *         v = 2,000,000 wBTC = $31,503.77 * 2m \\u00b1 158*2m = $63,007,540,000 \\u00b1 $316,000,000 = 63,007*1e24 \\u00b1 316*1e24\\n     *         for calc convenience we increase error on 0.05 and have v = 63,000*24 \\u00b1 300*1e24 = (630 \\u00b1 3)*1e26\\n     *         b = 2*1e6 * 1e18 = 2*1e24\\n     *         or = v/b = (630 \\u00b1 3)*1e26 / 2*1e24 = 315*1e2 \\u00b1 1.5*1e2\\n     *         error = or.error * b = 1.5*100 * 2*1e24 = 3*1e26 = 3*1e8*1e18 = $300,000,000 ~ $316,000,000\\n     *\\n     *     assume the market price of USDT = $0.97 \\u00b1 $0.00485,\\n     *\\n     *     case #3: little amount of USDT\\n     *         v = USDT amount 0.005 = 0.005*(0.97 \\u00b1 0.00485) = 0.00485*1e18 \\u00b1 0.00002425*1e18 = 485*1e13 \\u00b1 3*1e13\\n     *         we rounded error up on (3000-2425)/2425 ~= +24% for calculation convenience.\\n     *         b = USDT.balanceOf() = 0.005*1e6 = 5*1e3\\n     *         b*or = v => or = v/b = (485*1e13 \\u00b1 3*1e13) / 5*1e3 = 970*1e9 \\u00b1 6*1e9\\n     *         error = 6*1e9 * 5*1e3 / 1e18 = 30*1e12/1e18 = 3*1e-5 = $0,00005\\n     *\\n     *     case #4: lot of USDT\\n     *         v = we have 100,000,000,000 USDT = $97B = 97*1e9*1e18 \\u00b1 0.5*1e9*1e18\\n     *         b = USDT.balanceOf() = 1e11*1e6 = 1e17\\n     *         or = v/b = (97*1e9*1e18 \\u00b1 0.5*1e9*1e18) / 1e17 = 970*1e9 \\u00b1 5*1e9\\n     *         error = 5*1e9 * 1e17 = 5*1e26 = 0.5 * 1e8*1e18\\n     *\\n     * @param asset - address of erc20 token contract\\n     * @return usdPrice1e18 such that asset.balanceOf() * getFiatPrice1e18(asset) / 1e18 == $$ * 1e18\\n     **/\\n    function getFiatPrice1e18(address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa56b9cc86ef5935efecc276e6a3188d518f1a99cad960083a8de35849c997687\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608080604052346100c1576000549060ff8260081c1661006f575060ff80821603610034575b60405161261a90816100c78239f35b60ff90811916176000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160ff8152a138610025565b62461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b6064820152608490fd5b600080fdfe6080604052600436101561001257600080fd5b600060e08135811c9081630502b1c5146116695781630da291f91461160d57816312aa3caf146115a65781631e6113061461154e5781633b7b6188146114ea5781634d77406e1461132c5781634dec53e0146112f05781636a2f53c214610b12578163715018a614610ac657816384bd6d2914610a995781638da5cb5b14610a70578163943a0f13146108ac57816396238d2d146106f757508063cda502e1146106a1578063d65a3a2e1461052d578063e449022e146104f3578063e63ea40814610463578063e75c0f2d146103d5578063f2fde38b14610344578063f3ff955a146102be5763f8c8765e1461010757600080fd5b346102bb5760803660031901126102bb576101206116a3565b6101286116cf565b906101316116b9565b906064356001600160a01b0381811692918390036102b65785549360ff8560081c1615948580966102a9575b8015610292575b156102365760ff198116600117885585610225575b5061019360ff885460081c1661018e81611a3f565b611a3f565b61019c33611a08565b818754966101b360ff8960081c1661018e81611a3f565b60016065558160018060a01b031995168560975416176097551683609954161760995516816098541617609855609a541617609a556101f0575080f35b61ff00191681557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a180f35b61ffff191661010117875538610179565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b1580156101645750600160ff821614610164565b50600160ff82161061015d565b600080fd5b80fd5b50346102bb5760203660031901126102bb57806102d96116a3565b6102e16119b0565b6098546001600160a01b039081169190823b1561033f57602484928360405195869485936317066a5760e21b85521660048401525af18015610334576103245750f35b61032d9061179e565b6102bb5780f35b6040513d84823e3d90fd5b505050fd5b50346102bb5760203660031901126102bb5761035e6116a3565b6103666119b0565b6001600160a01b038116156103815761037e90611a08565b80f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b50346102bb5760203660031901126102bb576103ef6119b0565b80602061042660018060a01b038060995416906098541660405194858094819363095ea7b360e01b83526004359060048401611ab9565b03925af1801561033457610438575080f35b6104589060203d811161045c575b610450818361181e565b810190611ad4565b5080f35b503d610446565b50346102bb5760603660031901126102bb5761047d6116a3565b6104856116cf565b604435916104916119b0565b6001600160a01b038281169390919084156104e1576104d7817ff24ef89f38eadc1bde50701ad6e4d6d11a2dc24f7cf834a486991f388332850494602094169586611f55565b604051908152a380f35b60405163d27b444360e01b8152600490fd5b50346102bb5760603660031901126102bb576044356001600160401b038111610529576105249036906004016116f9565b505080f35b5080fd5b50346102bb5760403660031901126102bb576105476116a3565b61054f6116cf565b906105586119b0565b604051636eb1769f60e11b81526001600160a01b0391821692906020908590828180610588873060048401611a9f565b0381895afa908115610334578291610670575b506105cc575b505016907f97a94ee714dc2c5c1889f6fe8e8909a95e0307c4b272c7df374bf76582099f878380a380f35b61060d57610606906040519063095ea7b360e01b908201528383166024820152600060448201526044815261060081611803565b84611aec565b38846105a1565b6084906040519062461bcd60e51b82526004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152fd5b809250838092503d831161069a575b610689818361181e565b810103126102b6578590513861059b565b503d61067f565b50346102bb57806003193601126102bb576106ba6119b0565b609a5481906001600160a01b0316803b156106f457818091600460405180948193633f2b912160e21b83525af18015610334576103245750f35b50fd5b9050346105295760a0366003190112610529576044359060243590600435906084356001600160401b0381116108a857610735903690600401611930565b9161073e6119b0565b8415801561089d575b61088b5760018060a01b0393868560975416926040519463d09ef24160e01b8652816004870152610100908187602481895afa9889156108805761080e996107e3986107f1948792610853575b5050511697604051916107a6836117b1565b6001835260209b8c9a868c8601526040850152876060850152608084015260643560a08401523360c0840152820152604051968791898301611d87565b03601f19810187528661181e565b604051637176836f60e11b81529687958694859360048501611e72565b03925af1801561084857610820578280f35b813d8311610841575b610833818361181e565b810103126102b65738808280f35b503d610829565b6040513d85823e3d90fd5b6108729250803d10610879575b61086a818361181e565b810190611cb3565b3880610794565b503d610860565b6040513d86823e3d90fd5b6040516363358a5760e01b8152600490fd5b506127108511610747565b8580fd5b82346102bb5760403660031901126102bb576108c66116a3565b6108ce6116cf565b6108d66119b0565b6001600160a01b03918216808452609b6020908152604080862080546001600160a01b031916958516958617905551636eb1769f60e11b81529192909190829082908190610928903060048401611a9f565b0381865afa908115610a65578591610a38575b5060001990600101610971575b50507fd10f56385a196925f272a951681f1d659519962e5e8a1ba95c6d0c0916ac89338380a380f35b6040519060008084840163095ea7b360e01b9384825288602487015260448601526044855261099f85611803565b84519082885af16109ae611bd2565b81610a08575b50806109fe575b156109c7575b50610948565b6109f6926109f09160405191820152856024820152600060448201526044815261060081611803565b82611aec565b8380806109c1565b50833b15156109bb565b80518015925085908315610a20575b505050876109b4565b610a309350820181019101611ad4565b878481610a17565b90508181813d8311610a5e575b610a4f818361181e565b810103126102b657518561093b565b503d610a45565b6040513d87823e3d90fd5b82346102bb57806003193601126102bb576033546040516001600160a01b039091168152602090f35b82346102bb576101003660031901126102bb57610ab46116a3565b50610abd6116cf565b506104586116b9565b82346102bb57806003193601126102bb57610adf6119b0565b603380546001600160a01b031981169091556000906001600160a01b03166000805160206125c58339815191528280a380f35b82346102bb5760803660031901126102bb57610b2c6116a3565b91610b356116b9565b906064356001600160401b0381116112ec57610b55903690600401611729565b6002606596929654146112a75760026065558501946020818703126112a3578035906001600160401b0382116108a857016101009384828803126108a8576040519485016001600160401b0381118682101761117a576040528135801515810361119857855260208201356020860152610bd1604083016116e5565b604086019081526060860197606084013589526080840135608088015260a087019360a08101358552610c0660c082016116e5565b60c089015280870135906001600160401b03821161119457610c29929101611930565b868601525196516097546001600160a01b039889169891929116330361128b576001600160a01b031630810361127357506040516370a0823160e01b8152306004820152966020886024816001600160a01b0388165afa978815611268578798611234575b508551156111f657808752609b60205260408720546001600160a01b0316156111de57808752609b60205286602060018060a01b03604083205416602460405180948193635136211760e01b83528760048401525af19081156111d35788916111b4575b501561119c579060648288938452609b6020528360018060a01b036040822054169551956040519687958694635ae2fb3960e11b86526004860152602485015260448401525af1908115610a6557859161108d575b508284015151815191865b8361ffff82161015610f54576001600160a01b03610d7461ffff831684611d73565b5151166020610d8761ffff841685611d73565b5101516001600160a01b0387168203610dab575b5050610da690611e8e565b610d52565b848603610e715790610e0d9160018060a01b03610dcf61ffff86168b8d0151611d73565b515116918b6020610de88d8d61ffff8a16910151611d73565b51015160405180968192630f30898360e11b8352604060048401526044830190611779565b8560248301520381305afa938415610e665791610e3a9391610da69695938e8095610e41575b5050611f91565b908a610d9b565b610e5e9295503d8091833e610e56818361181e565b810190611eb7565b928f8e610e33565b6040513d8e823e3d90fd5b9693989990958a989592985b8a61ffff82161015610f41576001600160a01b03610e9f61ffff8c1687611d73565b51511660018060a01b036040610ebc61ffff85168a8c0151611d73565b5101511614610ed357610ece90611e8e565b610e7d565b90969785988c6020610de8610f10969f9e999a809e989b61ffff60018060a01b03610f03828b1684860151611d73565b5151169816910151611d73565b8560248301520381305afa938415610e665791610f3c9391610da69695938e8095610e41575050611f91565b610e3a565b50955098979295509295610da690610e3a565b505050509390509190915b6040516370a0823160e01b8152306004820152916020836024816001600160a01b0389165afa908115611081579061104d575b610f9c9250611f15565b916024359283811061102f5783610fb291611f15565b91612710610fc4608083015186611f22565b04808410611011575060975461100194610feb916001600160a01b03908116908516611f55565b60c001516001600160a01b039081169116611f55565b6001606555602060405160018152f35b604490846040519163bc7857df60e01b835260048301526024820152fd5b836044916040519163bc7857df60e01b835260048301526024820152fd5b506020823d602011611079575b816110676020938361181e565b810103126102b657610f9c9151610f92565b3d915061105a565b604051903d90823e3d90fd5b90503d8086833e61109e818361181e565b60208282810103126108a8578151906001600160401b03821161119857808301601f8385010112156111985781830151906110d882611919565b936110e6604051958661181e565b828552602085019382820160208560061b8385010101116111945793602085830101945b60208560061b828501010186106111275750505050505086610d47565b60408685850103126111905760408051929083018084116001600160401b039091111761117a576020604091848383960184526111638a611c9f565b8152828a015183820152815201960195915061110a565b634e487b7160e01b600052604160045260246000fd5b8a80fd5b8980fd5b8680fd5b602490604051906325eadd2560e01b82526004820152fd5b6111cd915060203d60201161045c57610450818361181e565b89610cf2565b6040513d8a823e3d90fd5b60249060405190637d250b0b60e11b82526004820152fd5b91509261122f929693602061122660018060a09a999a1b0361121a858b0151611d50565b51511693890151611d50565b51015192611f91565b610f5f565b9097506020813d602011611260575b816112506020938361181e565b810103126102b657519688610c8e565b3d9150611243565b6040513d89823e3d90fd5b60249060405190637d85130d60e11b82526004820152fd5b60405163e372835960e01b8152336004820152602490fd5b8480fd5b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b8380fd5b82346102bb5760203660031901126102bb576020906001600160a01b03906040908261131a6116a3565b168152609b8452205416604051908152f35b82346102bb5760803660031901126102bb5760043591602435916001600160401b0391604435906064358481116112ec5761136b9036906004016118b1565b946113746119b0565b821580156114df575b61088b5760975460405163d09ef24160e01b815260048101899052610100986001600160a01b0392831694909290918a81602481895afa9a8b156111d357889b6114c0575b5050604051996113d18b6117e8565b60018b52875b6020811015611415576040519060608201918083108c84111761117a576020828f82956040528d84526060838501528d6040850152010152016113d7565b506107e3936107f161148697948d97948b948e6114318b611d50565b5261143b8a611d50565b505116976040519161144c836117b1565b85835260209b8c9a868c860152604085015287606085015260808401528560a08401523360c0840152820152604051968791898301611d87565b03925af1801561084857611498578280f35b813d83116114b9575b6114ab818361181e565b810103126102b65781808280f35b503d6114a1565b6114d7929b50803d106108795761086a818361181e565b988a806113c2565b50612710831161137d565b82346102bb5760403660031901126102bb576115046119b0565b60985481906001600160a01b0316803b156106f457818091604460405180948193635a9602ff60e11b8352600435600484015260243560248401525af18015610334576103245750f35b82346102bb5760403660031901126102bb57600435906001600160401b0382116102bb576115a261158e6115853660048601611729565b6024359161211c565b604051918291602083526020830190611779565b0390f35b90503461052957610140366003190112610529576115c26116a3565b503660231901126102bb576001600160401b0361010435818111611609576115ee903690600401611729565b50506101243590811161052957610524903690600401611729565b8280fd5b82346102bb57806003193601126102bb576116266119b0565b609a5481906001600160a01b0316803b156106f4578190600460405180948193638f449a0560e01b83525af1801561033457611660575080f35b61037e9061179e565b82346102bb5760803660031901126102bb576116836116a3565b506064356001600160401b038111610529576105249036906004016116f9565b600435906001600160a01b03821682036102b657565b604435906001600160a01b03821682036102b657565b602435906001600160a01b03821682036102b657565b35906001600160a01b03821682036102b657565b9181601f840112156102b6578235916001600160401b0383116102b6576020808501948460051b0101116102b657565b9181601f840112156102b6578235916001600160401b0383116102b657602083818601950101116102b657565b60005b8381106117695750506000910152565b8181015183820152602001611759565b9060209161179281518092818552858086019101611756565b601f01601f1916010190565b6001600160401b03811161117a57604052565b61010081019081106001600160401b0382111761117a57604052565b60e081019081106001600160401b0382111761117a57604052565b604081019081106001600160401b0382111761117a57604052565b608081019081106001600160401b0382111761117a57604052565b601f909101601f19168101906001600160401b0382119082101761117a57604052565b6001600160401b03811161117a57601f01601f191660200190565b92919261186882611841565b91611876604051938461181e565b8294818452818301116102b6578281602093846000960137010152565b9080601f830112156102b6578160206118ae9335910161185c565b90565b9190916060818403126102b657604051906001600160401b03606083018181118482101761117a5760405282946118e7836116e5565b845260208301359182116102b657826119096040949261191494869401611893565b6020860152016116e5565b910152565b6001600160401b03811161117a5760051b60200190565b9080601f830112156102b65781359061194882611919565b92611956604051948561181e565b828452602092838086019160051b830101928084116102b657848301915b8483106119845750505050505090565b82356001600160401b0381116102b65786916119a5848480948901016118b1565b815201920191611974565b6033546001600160a01b031633036119c457565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b603380546001600160a01b039283166001600160a01b0319821681179092559091166000805160206125c5833981519152600080a3565b15611a4657565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b6001600160a01b0391821681529116602082015260400190565b6001600160a01b039091168152602081019190915260400190565b908160209103126102b6575180151581036102b65790565b604051611b4a916001600160a01b0316611b05826117e8565b6000806020958685527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656487860152868151910182855af1611b44611bd2565b91611c02565b805190828215928315611bba575b50505015611b635750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b611bca9350820181019101611ad4565b388281611b58565b3d15611bfd573d90611be382611841565b91611bf1604051938461181e565b82523d6000602084013e565b606090565b91929015611c645750815115611c16575090565b3b15611c1f5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b825190915015611c775750805190602001fd5b60405162461bcd60e51b815260206004820152908190611c9b906024830190611779565b0390fd5b51906001600160a01b03821682036102b657565b90816101009103126102b65760405190611ccc826117b1565b611cd581611c9f565b8252611ce360208201611c9f565b6020830152611cf460408201611c9f565b6040830152611d0560608201611c9f565b60608301526080818101519083015260a0808201519083015260c0810151906001600160401b03821682036102b65760e09160c0840152015160ff811681036102b65760e082015290565b805115611d5d5760200190565b634e487b7160e01b600052603260045260246000fd5b8051821015611d5d5760209160051b010190565b6020808252610120820190835115158184015280840151926040938482015260018060a01b039360e08582880151169660609788850152878101516080850152608081015160a085015260a081015160c08501528660c082015116828501520151956101008084015286518095526101409184838501938760051b8601019801966000945b878610611e1f5750505050505050505090565b909192939495969798878060019261013f198582030189528c5190868251168152878781611e58868601518d888701528d860190611779565b940151169101529b01960196019497969593929190611e0c565b6118ae9392606092825260208201528160408201520190611779565b61ffff809116908114611ea15760010190565b634e487b7160e01b600052601160045260246000fd5b6020818303126102b6578051906001600160401b0382116102b6570181601f820112156102b6578051611ee981611841565b92611ef7604051948561181e565b818452602082840101116102b6576118ae9160208085019101611756565b91908203918211611ea157565b81810292918115918404141715611ea157565b8115611f3f570490565b634e487b7160e01b600052601260045260246000fd5b611f8a611f8f9392611f7c60405194859263a9059cbb60e01b602085015260248401611ab9565b03601f19810184528361181e565b611aec565b565b92909160018060a01b03809416926040516020810194611fc482611f7c63095ea7b360e01b95868a528760248401611ab9565b6000968780809885519082865af1611fda611bd2565b8161205b575b5080612051575b1561201d575b5050505082602083519301915af1612003611bd2565b501561200b57565b604051635aa0560760e11b8152600490fd5b61204893611f8a9160405191602083015286166024820152876044820152604481526109f081611803565b38808080611fed565b50813b1515611fe7565b8051801592508215612070575b505038611fe0565b6120839250602080918301019101611ad4565b3880612068565b81601f820112156102b6578035916120a183611919565b926120af604051948561181e565b808452602092838086019260051b8201019283116102b6578301905b8282106120d9575050505090565b813581529083019083016120cb565b90815180825260208080930193019160005b828110612108575050505090565b8351855293810193928101926001016120fa565b90600481811193846102b65783356001600160e01b03191694637224811760e11b8087146125325750630502b1c560e01b86811461248457506312aa3caf60e01b8614612272576384bd6d2960e01b958614612181575050506118ae9250369161185c565b93929091936102b65761010090830183900360031901126102b6576121a78383016116e5565b906121b4602484016116e5565b6121c0604485016116e5565b60648501358015612269576121e2906121dd856084890135611f22565b611f35565b935b60405197602089015260018060a01b03928380921660248a0152166044880152166064860152608485015260a484015260a481013560c484015260c481013560e484015260e461010491013581840152825261014082019082821060018060401b03831117612254575060405290565b604190634e487b7160e01b6000525260246000fd5b506001936121e4565b9094509190916102b6578201828103916101406003198401126102b65760e061229c8286016116e5565b9360231901126102b657604051906122b3826117cd565b6122bf602486016116e5565b82526122cd604486016116e5565b602083019081526122e0606487016116e5565b90604084019182526122f4608488016116e5565b9360608101948552608081019860a48901358a5260a082019560c48a0135875260c083019060e48b013582526101048b01359560018060401b03968781116102b6578a89612344928f0101611893565b966101248d01359081116102b6576123bc9d61236f61246b9c6118ae9f9b88946124589d0101611893565b8151909b90156124795761238f926123879151611f22565b905190611f35565b945b5195519051915192516040519d90966001600160a01b0394851694938416939283169216908e6117cd565b8d526020808e019182526040808f0193845260608f0194855260808f0195865260a08f0196875260c08f01978852516312aa3caf60e01b918101919091526001600160a01b039b8c1660248201529c518b1660448e0152518a1660648d015251891660848c01525190971660a48a0152955160c4890152945160e488015293516101048701526101406101248701528593610164850190611779565b8381036023190161014485015290611779565b03601f19810183528261181e565b505050600194612391565b939195509391936102b657810190608081830360031901126102b6576124ab8482016116e5565b9460648201359460248301356001600160401b0387116102b6576124da61246b9584936118ae9987010161208a565b938115612527576124f29260446121dd920135611f22565b905b604051968795602087015260018060a01b03166024860152604485015260648401526080608484015260a48301906120e8565b5050506001906124f4565b94919550506000928101606060031983830301126112ec57818301359260448301356001600160401b0381116108a8579261257b889361246b96936118ae99989684010161208a565b935081156125ba576125949260246121dd920135611f22565b6040519586946020860152602485015260448401526060606484015260848301906120e8565b505050600161259456fe8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0a264697066735822122049bb31666cd1d18886b40dcc1cab85c457a869cdfcab88bc3e5141086cc4472a64736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b600060e08135811c9081630502b1c5146116695781630da291f91461160d57816312aa3caf146115a65781631e6113061461154e5781633b7b6188146114ea5781634d77406e1461132c5781634dec53e0146112f05781636a2f53c214610b12578163715018a614610ac657816384bd6d2914610a995781638da5cb5b14610a70578163943a0f13146108ac57816396238d2d146106f757508063cda502e1146106a1578063d65a3a2e1461052d578063e449022e146104f3578063e63ea40814610463578063e75c0f2d146103d5578063f2fde38b14610344578063f3ff955a146102be5763f8c8765e1461010757600080fd5b346102bb5760803660031901126102bb576101206116a3565b6101286116cf565b906101316116b9565b906064356001600160a01b0381811692918390036102b65785549360ff8560081c1615948580966102a9575b8015610292575b156102365760ff198116600117885585610225575b5061019360ff885460081c1661018e81611a3f565b611a3f565b61019c33611a08565b818754966101b360ff8960081c1661018e81611a3f565b60016065558160018060a01b031995168560975416176097551683609954161760995516816098541617609855609a541617609a556101f0575080f35b61ff00191681557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a180f35b61ffff191661010117875538610179565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b1580156101645750600160ff821614610164565b50600160ff82161061015d565b600080fd5b80fd5b50346102bb5760203660031901126102bb57806102d96116a3565b6102e16119b0565b6098546001600160a01b039081169190823b1561033f57602484928360405195869485936317066a5760e21b85521660048401525af18015610334576103245750f35b61032d9061179e565b6102bb5780f35b6040513d84823e3d90fd5b505050fd5b50346102bb5760203660031901126102bb5761035e6116a3565b6103666119b0565b6001600160a01b038116156103815761037e90611a08565b80f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b50346102bb5760203660031901126102bb576103ef6119b0565b80602061042660018060a01b038060995416906098541660405194858094819363095ea7b360e01b83526004359060048401611ab9565b03925af1801561033457610438575080f35b6104589060203d811161045c575b610450818361181e565b810190611ad4565b5080f35b503d610446565b50346102bb5760603660031901126102bb5761047d6116a3565b6104856116cf565b604435916104916119b0565b6001600160a01b038281169390919084156104e1576104d7817ff24ef89f38eadc1bde50701ad6e4d6d11a2dc24f7cf834a486991f388332850494602094169586611f55565b604051908152a380f35b60405163d27b444360e01b8152600490fd5b50346102bb5760603660031901126102bb576044356001600160401b038111610529576105249036906004016116f9565b505080f35b5080fd5b50346102bb5760403660031901126102bb576105476116a3565b61054f6116cf565b906105586119b0565b604051636eb1769f60e11b81526001600160a01b0391821692906020908590828180610588873060048401611a9f565b0381895afa908115610334578291610670575b506105cc575b505016907f97a94ee714dc2c5c1889f6fe8e8909a95e0307c4b272c7df374bf76582099f878380a380f35b61060d57610606906040519063095ea7b360e01b908201528383166024820152600060448201526044815261060081611803565b84611aec565b38846105a1565b6084906040519062461bcd60e51b82526004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152fd5b809250838092503d831161069a575b610689818361181e565b810103126102b6578590513861059b565b503d61067f565b50346102bb57806003193601126102bb576106ba6119b0565b609a5481906001600160a01b0316803b156106f457818091600460405180948193633f2b912160e21b83525af18015610334576103245750f35b50fd5b9050346105295760a0366003190112610529576044359060243590600435906084356001600160401b0381116108a857610735903690600401611930565b9161073e6119b0565b8415801561089d575b61088b5760018060a01b0393868560975416926040519463d09ef24160e01b8652816004870152610100908187602481895afa9889156108805761080e996107e3986107f1948792610853575b5050511697604051916107a6836117b1565b6001835260209b8c9a868c8601526040850152876060850152608084015260643560a08401523360c0840152820152604051968791898301611d87565b03601f19810187528661181e565b604051637176836f60e11b81529687958694859360048501611e72565b03925af1801561084857610820578280f35b813d8311610841575b610833818361181e565b810103126102b65738808280f35b503d610829565b6040513d85823e3d90fd5b6108729250803d10610879575b61086a818361181e565b810190611cb3565b3880610794565b503d610860565b6040513d86823e3d90fd5b6040516363358a5760e01b8152600490fd5b506127108511610747565b8580fd5b82346102bb5760403660031901126102bb576108c66116a3565b6108ce6116cf565b6108d66119b0565b6001600160a01b03918216808452609b6020908152604080862080546001600160a01b031916958516958617905551636eb1769f60e11b81529192909190829082908190610928903060048401611a9f565b0381865afa908115610a65578591610a38575b5060001990600101610971575b50507fd10f56385a196925f272a951681f1d659519962e5e8a1ba95c6d0c0916ac89338380a380f35b6040519060008084840163095ea7b360e01b9384825288602487015260448601526044855261099f85611803565b84519082885af16109ae611bd2565b81610a08575b50806109fe575b156109c7575b50610948565b6109f6926109f09160405191820152856024820152600060448201526044815261060081611803565b82611aec565b8380806109c1565b50833b15156109bb565b80518015925085908315610a20575b505050876109b4565b610a309350820181019101611ad4565b878481610a17565b90508181813d8311610a5e575b610a4f818361181e565b810103126102b657518561093b565b503d610a45565b6040513d87823e3d90fd5b82346102bb57806003193601126102bb576033546040516001600160a01b039091168152602090f35b82346102bb576101003660031901126102bb57610ab46116a3565b50610abd6116cf565b506104586116b9565b82346102bb57806003193601126102bb57610adf6119b0565b603380546001600160a01b031981169091556000906001600160a01b03166000805160206125c58339815191528280a380f35b82346102bb5760803660031901126102bb57610b2c6116a3565b91610b356116b9565b906064356001600160401b0381116112ec57610b55903690600401611729565b6002606596929654146112a75760026065558501946020818703126112a3578035906001600160401b0382116108a857016101009384828803126108a8576040519485016001600160401b0381118682101761117a576040528135801515810361119857855260208201356020860152610bd1604083016116e5565b604086019081526060860197606084013589526080840135608088015260a087019360a08101358552610c0660c082016116e5565b60c089015280870135906001600160401b03821161119457610c29929101611930565b868601525196516097546001600160a01b039889169891929116330361128b576001600160a01b031630810361127357506040516370a0823160e01b8152306004820152966020886024816001600160a01b0388165afa978815611268578798611234575b508551156111f657808752609b60205260408720546001600160a01b0316156111de57808752609b60205286602060018060a01b03604083205416602460405180948193635136211760e01b83528760048401525af19081156111d35788916111b4575b501561119c579060648288938452609b6020528360018060a01b036040822054169551956040519687958694635ae2fb3960e11b86526004860152602485015260448401525af1908115610a6557859161108d575b508284015151815191865b8361ffff82161015610f54576001600160a01b03610d7461ffff831684611d73565b5151166020610d8761ffff841685611d73565b5101516001600160a01b0387168203610dab575b5050610da690611e8e565b610d52565b848603610e715790610e0d9160018060a01b03610dcf61ffff86168b8d0151611d73565b515116918b6020610de88d8d61ffff8a16910151611d73565b51015160405180968192630f30898360e11b8352604060048401526044830190611779565b8560248301520381305afa938415610e665791610e3a9391610da69695938e8095610e41575b5050611f91565b908a610d9b565b610e5e9295503d8091833e610e56818361181e565b810190611eb7565b928f8e610e33565b6040513d8e823e3d90fd5b9693989990958a989592985b8a61ffff82161015610f41576001600160a01b03610e9f61ffff8c1687611d73565b51511660018060a01b036040610ebc61ffff85168a8c0151611d73565b5101511614610ed357610ece90611e8e565b610e7d565b90969785988c6020610de8610f10969f9e999a809e989b61ffff60018060a01b03610f03828b1684860151611d73565b5151169816910151611d73565b8560248301520381305afa938415610e665791610f3c9391610da69695938e8095610e41575050611f91565b610e3a565b50955098979295509295610da690610e3a565b505050509390509190915b6040516370a0823160e01b8152306004820152916020836024816001600160a01b0389165afa908115611081579061104d575b610f9c9250611f15565b916024359283811061102f5783610fb291611f15565b91612710610fc4608083015186611f22565b04808410611011575060975461100194610feb916001600160a01b03908116908516611f55565b60c001516001600160a01b039081169116611f55565b6001606555602060405160018152f35b604490846040519163bc7857df60e01b835260048301526024820152fd5b836044916040519163bc7857df60e01b835260048301526024820152fd5b506020823d602011611079575b816110676020938361181e565b810103126102b657610f9c9151610f92565b3d915061105a565b604051903d90823e3d90fd5b90503d8086833e61109e818361181e565b60208282810103126108a8578151906001600160401b03821161119857808301601f8385010112156111985781830151906110d882611919565b936110e6604051958661181e565b828552602085019382820160208560061b8385010101116111945793602085830101945b60208560061b828501010186106111275750505050505086610d47565b60408685850103126111905760408051929083018084116001600160401b039091111761117a576020604091848383960184526111638a611c9f565b8152828a015183820152815201960195915061110a565b634e487b7160e01b600052604160045260246000fd5b8a80fd5b8980fd5b8680fd5b602490604051906325eadd2560e01b82526004820152fd5b6111cd915060203d60201161045c57610450818361181e565b89610cf2565b6040513d8a823e3d90fd5b60249060405190637d250b0b60e11b82526004820152fd5b91509261122f929693602061122660018060a09a999a1b0361121a858b0151611d50565b51511693890151611d50565b51015192611f91565b610f5f565b9097506020813d602011611260575b816112506020938361181e565b810103126102b657519688610c8e565b3d9150611243565b6040513d89823e3d90fd5b60249060405190637d85130d60e11b82526004820152fd5b60405163e372835960e01b8152336004820152602490fd5b8480fd5b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b8380fd5b82346102bb5760203660031901126102bb576020906001600160a01b03906040908261131a6116a3565b168152609b8452205416604051908152f35b82346102bb5760803660031901126102bb5760043591602435916001600160401b0391604435906064358481116112ec5761136b9036906004016118b1565b946113746119b0565b821580156114df575b61088b5760975460405163d09ef24160e01b815260048101899052610100986001600160a01b0392831694909290918a81602481895afa9a8b156111d357889b6114c0575b5050604051996113d18b6117e8565b60018b52875b6020811015611415576040519060608201918083108c84111761117a576020828f82956040528d84526060838501528d6040850152010152016113d7565b506107e3936107f161148697948d97948b948e6114318b611d50565b5261143b8a611d50565b505116976040519161144c836117b1565b85835260209b8c9a868c860152604085015287606085015260808401528560a08401523360c0840152820152604051968791898301611d87565b03925af1801561084857611498578280f35b813d83116114b9575b6114ab818361181e565b810103126102b65781808280f35b503d6114a1565b6114d7929b50803d106108795761086a818361181e565b988a806113c2565b50612710831161137d565b82346102bb5760403660031901126102bb576115046119b0565b60985481906001600160a01b0316803b156106f457818091604460405180948193635a9602ff60e11b8352600435600484015260243560248401525af18015610334576103245750f35b82346102bb5760403660031901126102bb57600435906001600160401b0382116102bb576115a261158e6115853660048601611729565b6024359161211c565b604051918291602083526020830190611779565b0390f35b90503461052957610140366003190112610529576115c26116a3565b503660231901126102bb576001600160401b0361010435818111611609576115ee903690600401611729565b50506101243590811161052957610524903690600401611729565b8280fd5b82346102bb57806003193601126102bb576116266119b0565b609a5481906001600160a01b0316803b156106f4578190600460405180948193638f449a0560e01b83525af1801561033457611660575080f35b61037e9061179e565b82346102bb5760803660031901126102bb576116836116a3565b506064356001600160401b038111610529576105249036906004016116f9565b600435906001600160a01b03821682036102b657565b604435906001600160a01b03821682036102b657565b602435906001600160a01b03821682036102b657565b35906001600160a01b03821682036102b657565b9181601f840112156102b6578235916001600160401b0383116102b6576020808501948460051b0101116102b657565b9181601f840112156102b6578235916001600160401b0383116102b657602083818601950101116102b657565b60005b8381106117695750506000910152565b8181015183820152602001611759565b9060209161179281518092818552858086019101611756565b601f01601f1916010190565b6001600160401b03811161117a57604052565b61010081019081106001600160401b0382111761117a57604052565b60e081019081106001600160401b0382111761117a57604052565b604081019081106001600160401b0382111761117a57604052565b608081019081106001600160401b0382111761117a57604052565b601f909101601f19168101906001600160401b0382119082101761117a57604052565b6001600160401b03811161117a57601f01601f191660200190565b92919261186882611841565b91611876604051938461181e565b8294818452818301116102b6578281602093846000960137010152565b9080601f830112156102b6578160206118ae9335910161185c565b90565b9190916060818403126102b657604051906001600160401b03606083018181118482101761117a5760405282946118e7836116e5565b845260208301359182116102b657826119096040949261191494869401611893565b6020860152016116e5565b910152565b6001600160401b03811161117a5760051b60200190565b9080601f830112156102b65781359061194882611919565b92611956604051948561181e565b828452602092838086019160051b830101928084116102b657848301915b8483106119845750505050505090565b82356001600160401b0381116102b65786916119a5848480948901016118b1565b815201920191611974565b6033546001600160a01b031633036119c457565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b603380546001600160a01b039283166001600160a01b0319821681179092559091166000805160206125c5833981519152600080a3565b15611a4657565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b6001600160a01b0391821681529116602082015260400190565b6001600160a01b039091168152602081019190915260400190565b908160209103126102b6575180151581036102b65790565b604051611b4a916001600160a01b0316611b05826117e8565b6000806020958685527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656487860152868151910182855af1611b44611bd2565b91611c02565b805190828215928315611bba575b50505015611b635750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b611bca9350820181019101611ad4565b388281611b58565b3d15611bfd573d90611be382611841565b91611bf1604051938461181e565b82523d6000602084013e565b606090565b91929015611c645750815115611c16575090565b3b15611c1f5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b825190915015611c775750805190602001fd5b60405162461bcd60e51b815260206004820152908190611c9b906024830190611779565b0390fd5b51906001600160a01b03821682036102b657565b90816101009103126102b65760405190611ccc826117b1565b611cd581611c9f565b8252611ce360208201611c9f565b6020830152611cf460408201611c9f565b6040830152611d0560608201611c9f565b60608301526080818101519083015260a0808201519083015260c0810151906001600160401b03821682036102b65760e09160c0840152015160ff811681036102b65760e082015290565b805115611d5d5760200190565b634e487b7160e01b600052603260045260246000fd5b8051821015611d5d5760209160051b010190565b6020808252610120820190835115158184015280840151926040938482015260018060a01b039360e08582880151169660609788850152878101516080850152608081015160a085015260a081015160c08501528660c082015116828501520151956101008084015286518095526101409184838501938760051b8601019801966000945b878610611e1f5750505050505050505090565b909192939495969798878060019261013f198582030189528c5190868251168152878781611e58868601518d888701528d860190611779565b940151169101529b01960196019497969593929190611e0c565b6118ae9392606092825260208201528160408201520190611779565b61ffff809116908114611ea15760010190565b634e487b7160e01b600052601160045260246000fd5b6020818303126102b6578051906001600160401b0382116102b6570181601f820112156102b6578051611ee981611841565b92611ef7604051948561181e565b818452602082840101116102b6576118ae9160208085019101611756565b91908203918211611ea157565b81810292918115918404141715611ea157565b8115611f3f570490565b634e487b7160e01b600052601260045260246000fd5b611f8a611f8f9392611f7c60405194859263a9059cbb60e01b602085015260248401611ab9565b03601f19810184528361181e565b611aec565b565b92909160018060a01b03809416926040516020810194611fc482611f7c63095ea7b360e01b95868a528760248401611ab9565b6000968780809885519082865af1611fda611bd2565b8161205b575b5080612051575b1561201d575b5050505082602083519301915af1612003611bd2565b501561200b57565b604051635aa0560760e11b8152600490fd5b61204893611f8a9160405191602083015286166024820152876044820152604481526109f081611803565b38808080611fed565b50813b1515611fe7565b8051801592508215612070575b505038611fe0565b6120839250602080918301019101611ad4565b3880612068565b81601f820112156102b6578035916120a183611919565b926120af604051948561181e565b808452602092838086019260051b8201019283116102b6578301905b8282106120d9575050505090565b813581529083019083016120cb565b90815180825260208080930193019160005b828110612108575050505090565b8351855293810193928101926001016120fa565b90600481811193846102b65783356001600160e01b03191694637224811760e11b8087146125325750630502b1c560e01b86811461248457506312aa3caf60e01b8614612272576384bd6d2960e01b958614612181575050506118ae9250369161185c565b93929091936102b65761010090830183900360031901126102b6576121a78383016116e5565b906121b4602484016116e5565b6121c0604485016116e5565b60648501358015612269576121e2906121dd856084890135611f22565b611f35565b935b60405197602089015260018060a01b03928380921660248a0152166044880152166064860152608485015260a484015260a481013560c484015260c481013560e484015260e461010491013581840152825261014082019082821060018060401b03831117612254575060405290565b604190634e487b7160e01b6000525260246000fd5b506001936121e4565b9094509190916102b6578201828103916101406003198401126102b65760e061229c8286016116e5565b9360231901126102b657604051906122b3826117cd565b6122bf602486016116e5565b82526122cd604486016116e5565b602083019081526122e0606487016116e5565b90604084019182526122f4608488016116e5565b9360608101948552608081019860a48901358a5260a082019560c48a0135875260c083019060e48b013582526101048b01359560018060401b03968781116102b6578a89612344928f0101611893565b966101248d01359081116102b6576123bc9d61236f61246b9c6118ae9f9b88946124589d0101611893565b8151909b90156124795761238f926123879151611f22565b905190611f35565b945b5195519051915192516040519d90966001600160a01b0394851694938416939283169216908e6117cd565b8d526020808e019182526040808f0193845260608f0194855260808f0195865260a08f0196875260c08f01978852516312aa3caf60e01b918101919091526001600160a01b039b8c1660248201529c518b1660448e0152518a1660648d015251891660848c01525190971660a48a0152955160c4890152945160e488015293516101048701526101406101248701528593610164850190611779565b8381036023190161014485015290611779565b03601f19810183528261181e565b505050600194612391565b939195509391936102b657810190608081830360031901126102b6576124ab8482016116e5565b9460648201359460248301356001600160401b0387116102b6576124da61246b9584936118ae9987010161208a565b938115612527576124f29260446121dd920135611f22565b905b604051968795602087015260018060a01b03166024860152604485015260648401526080608484015260a48301906120e8565b5050506001906124f4565b94919550506000928101606060031983830301126112ec57818301359260448301356001600160401b0381116108a8579261257b889361246b96936118ae99989684010161208a565b935081156125ba576125949260246121dd920135611f22565b6040519586946020860152602485015260448401526060606484015260848301906120e8565b505050600161259456fe8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0a264697066735822122049bb31666cd1d18886b40dcc1cab85c457a869cdfcab88bc3e5141086cc4472a64736f6c63430008110033",
  "devdoc": {
    "details": "See IArbitrageHelper interface for full details.",
    "kind": "dev",
    "methods": {
      "changeCalldataAmount(bytes,uint256)": {
        "params": {
          "data": "- calldata to edit",
          "newAmount": "- new amount that should replace amount in {data}"
        },
        "returns": {
          "_0": "edited calldata with new amount inside*"
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "stableunitFillOrderCallback(address,uint256,address,bytes)": {
        "details": "behaviour like in uniswapV3FlashCallback: https://docs.uniswap.org/contracts/v3/guides/flash-integrations/flash-callback and AAVE flash-loan callback: https://github.com/aave/aave-v3-core/blob/master/contracts/flashloan/interfaces/IFlashLoanSimpleReceiver.sol*"
      },
      "swapLPWithFlashLoan(uint256,uint256,uint256,uint256,(address,bytes,address)[])": {
        "details": "Contract receive LP-token from exchange module, unwrap it and swap with 1inch all underline tokens to token that exchange module need.- minProfitPercent must be > 0 and <= 10000 (100%)      - Transaction reverts if actual profit is less than minProfitPercent of the flash loan amount      - Higher minProfitPercent provides better protection against sandwich attacks        but may result in fewer successful arbitrages*",
        "params": {
          "inchData": "- 1inch callData and contract array to swap every underline token of LP",
          "minProfitPercent": "Minimum required profit in basis points (1 bp = 0.01%)",
          "minUnwrapSlippage": "Minimum slippage to unwrap LP, in basis points (1 bp = 0.01%)",
          "orderId": "- Id of order in Exchange module to fill",
          "token2sellAmount": "- Amount of token in order to get as flash-loan"
        }
      },
      "swapWithFlashLoan(uint256,uint256,uint256,(address,bytes,address))": {
        "details": "Contract receive loan from exchange module, sell it on 1inch and get profit = received amount - fee- minProfitPercent must be > 0 and <= 10000 (100%)      - Transaction reverts if actual profit is less than minProfitPercent of the flash loan amount      - Higher minProfitPercent provides better protection against sandwich attacks        but may result in fewer successful arbitrages*",
        "params": {
          "inchData": "- 1inch callData and contract to swap loan",
          "minProfitPercent": "Minimum required profit in basis points (1 bp = 0.01%)",
          "orderId": "- Id of order in Exchange module to fill",
          "token2sellAmount": "- Amount of token in order to get as flash-loan"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "ArbitrageHelper",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approveToVeToken(uint256)": {
        "notice": "Before stake we need to approve veToken contract to use our Governance tokens*"
      },
      "changeCalldataAmount(bytes,uint256)": {
        "notice": "Helper function to change amount parameter on callback that depends on return by 1inch API calldata for swap. We also change minAmount proportionally to newAmount. Route path don't depend on that - this path was calculated previously in backend part and is stored in {data}."
      },
      "delegateVotingPower(address)": {
        "notice": "Delegate voting power to another contract or user*"
      },
      "emergencyWithdraw(address,address,uint256)": {
        "notice": "Emergency withdraw in case contract have some tokens, that can be transferred by default functions*"
      },
      "stableunitFillOrderCallback(address,uint256,address,bytes)": {
        "notice": "This is callback function from Exchange contract. fillOrderAsFlashLoan call (msg.sender).executeOperation(...) after transferring loan to sender"
      },
      "stakeTokens(uint256,uint256)": {
        "notice": "We stake Governance token from contract to receive voting power to make a contract be able to be a top-staker.*"
      },
      "subscribeInTopStaker()": {
        "notice": "Subscribe contract to be a staker in TopStaker contract*"
      },
      "swapLPWithFlashLoan(uint256,uint256,uint256,uint256,(address,bytes,address)[])": {
        "notice": "The same as swapWithFlashLoan, but loan is LP-token that we need to unwrap"
      },
      "swapWithFlashLoan(uint256,uint256,uint256,(address,bytes,address))": {
        "notice": "Reference implementation of Arbitrage bot contract, that use Exchange module to get profit"
      },
      "uniswapV3Swap(uint256,uint256,uint256[])": {
        "notice": "We need this functions to check their selector and functionSelector in calldata for changeCalldataAmount() function*"
      },
      "unsubscribeFromTopStaker()": {
        "notice": "Unsubscribe contract from stakers list in TopStaker contract*"
      }
    },
    "notice": "Helper contract to arbitrage using Exchange module. This is reference implementation that is enough to start arbitrage in Exchange Module. Anyone can update the code and deploy own ArbitrageHelper.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1226,
        "contract": "contracts/stableunit-exchange/contracts/exchange/ArbitrageHelper.sol:ArbitrageHelper",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 1229,
        "contract": "contracts/stableunit-exchange/contracts/exchange/ArbitrageHelper.sol:ArbitrageHelper",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1853,
        "contract": "contracts/stableunit-exchange/contracts/exchange/ArbitrageHelper.sol:ArbitrageHelper",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1098,
        "contract": "contracts/stableunit-exchange/contracts/exchange/ArbitrageHelper.sol:ArbitrageHelper",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 1218,
        "contract": "contracts/stableunit-exchange/contracts/exchange/ArbitrageHelper.sol:ArbitrageHelper",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1403,
        "contract": "contracts/stableunit-exchange/contracts/exchange/ArbitrageHelper.sol:ArbitrageHelper",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 1472,
        "contract": "contracts/stableunit-exchange/contracts/exchange/ArbitrageHelper.sol:ArbitrageHelper",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 15200,
        "contract": "contracts/stableunit-exchange/contracts/exchange/ArbitrageHelper.sol:ArbitrageHelper",
        "label": "EXCHANGE",
        "offset": 0,
        "slot": "151",
        "type": "t_contract(IExchange)18074"
      },
      {
        "astId": 15203,
        "contract": "contracts/stableunit-exchange/contracts/exchange/ArbitrageHelper.sol:ArbitrageHelper",
        "label": "VE_GOV",
        "offset": 0,
        "slot": "152",
        "type": "t_contract(IVotingEscrow)18292"
      },
      {
        "astId": 15206,
        "contract": "contracts/stableunit-exchange/contracts/exchange/ArbitrageHelper.sol:ArbitrageHelper",
        "label": "GOV",
        "offset": 0,
        "slot": "153",
        "type": "t_contract(IERC20)4205"
      },
      {
        "astId": 15209,
        "contract": "contracts/stableunit-exchange/contracts/exchange/ArbitrageHelper.sol:ArbitrageHelper",
        "label": "TOP_STAKERS",
        "offset": 0,
        "slot": "154",
        "type": "t_contract(ITopStakers)18228"
      },
      {
        "astId": 15214,
        "contract": "contracts/stableunit-exchange/contracts/exchange/ArbitrageHelper.sol:ArbitrageHelper",
        "label": "lpToAdapter",
        "offset": 0,
        "slot": "155",
        "type": "t_mapping(t_address,t_contract(ILPAdapter)24129)"
      },
      {
        "astId": 15968,
        "contract": "contracts/stableunit-exchange/contracts/exchange/ArbitrageHelper.sol:ArbitrageHelper",
        "label": "__gap",
        "offset": 0,
        "slot": "156",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)4205": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IExchange)18074": {
        "encoding": "inplace",
        "label": "contract IExchange",
        "numberOfBytes": "20"
      },
      "t_contract(ILPAdapter)24129": {
        "encoding": "inplace",
        "label": "contract ILPAdapter",
        "numberOfBytes": "20"
      },
      "t_contract(ITopStakers)18228": {
        "encoding": "inplace",
        "label": "contract ITopStakers",
        "numberOfBytes": "20"
      },
      "t_contract(IVotingEscrow)18292": {
        "encoding": "inplace",
        "label": "contract IVotingEscrow",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_contract(ILPAdapter)24129)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract ILPAdapter)",
        "numberOfBytes": "32",
        "value": "t_contract(ILPAdapter)24129"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}