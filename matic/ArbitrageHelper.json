{
  "address": "0xBd64505a0E5Afb50Ba9E199D3074697FdeaDEE61",
  "abi": [
    {
      "inputs": [],
      "name": "BadAccessControlSingleton",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "BadSender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        }
      ],
      "name": "LPTokenNotRegistered",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        }
      ],
      "name": "LPTokenNotSupported",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "NotAPool",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAdminError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAlerterError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyDAOError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyLiquidationAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyMintAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyRewardAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyRoleError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyVaultAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SwapBy1InchError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SwapByParaSwapError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SwapNotProfitable",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACCESS_CONTROL_SINGLETON",
      "outputs": [
        {
          "internalType": "contract ISuAccessControl",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ALERTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DAO_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIQUIDATION_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINT_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARD_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SYSTEM_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VAULT_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "newAmount",
          "type": "uint256"
        }
      ],
      "name": "changeCalldataAmount",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "clipperExchange",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "srcToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dstToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "outputAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "goodUntil",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "vs",
          "type": "bytes32"
        }
      ],
      "name": "clipperSwap",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_authControl",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_exchange",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lpToAdapter",
      "outputs": [
        {
          "internalType": "contract ILPAdapter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lp",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lpAdapter",
          "type": "address"
        }
      ],
      "name": "registerLP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "stableunitFillOrderCallback",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "srcToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "dstToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "srcReceiver",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "dstReceiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minReturnAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "flags",
              "type": "uint256"
            }
          ],
          "internalType": "struct SwapDescription",
          "name": "",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "swap",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token2sell",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "token2sellAmount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            }
          ],
          "internalType": "struct InchData[]",
          "name": "inchData",
          "type": "tuple[]"
        }
      ],
      "name": "swapLPWithFlashLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token2sell",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "token2sellAmount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            }
          ],
          "internalType": "struct InchData",
          "name": "inchData",
          "type": "tuple"
        }
      ],
      "name": "swapWithFlashLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "name": "uniswapV3Swap",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "name": "unoswap",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "numDeployments": 7,
  "solcInputHash": "4b4827c185e49f5250e237ecb28af247",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"BadAccessControlSingleton\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"BadSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"}],\"name\":\"LPTokenNotRegistered\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"}],\"name\":\"LPTokenNotSupported\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"NotAPool\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAdminError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAlerterError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyDAOError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyLiquidationAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyMintAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRewardAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRoleError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyVaultAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapBy1InchError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapByParaSwapError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapNotProfitable\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACCESS_CONTROL_SINGLETON\",\"outputs\":[{\"internalType\":\"contract ISuAccessControl\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ALERTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAO_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDATION_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SYSTEM_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VAULT_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"changeCalldataAmount\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"clipperExchange\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"goodUntil\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"vs\",\"type\":\"bytes32\"}],\"name\":\"clipperSwap\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_authControl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_exchange\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lpToAdapter\",\"outputs\":[{\"internalType\":\"contract ILPAdapter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lpAdapter\",\"type\":\"address\"}],\"name\":\"registerLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"stableunitFillOrderCallback\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"srcReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flags\",\"type\":\"uint256\"}],\"internalType\":\"struct SwapDescription\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token2sell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"token2sellAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"internalType\":\"struct InchData[]\",\"name\":\"inchData\",\"type\":\"tuple[]\"}],\"name\":\"swapLPWithFlashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token2sell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"token2sellAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"internalType\":\"struct InchData\",\"name\":\"inchData\",\"type\":\"tuple\"}],\"name\":\"swapWithFlashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"name\":\"uniswapV3Swap\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"name\":\"unoswap\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See IArbitrageHelper interface for full details.\",\"kind\":\"dev\",\"methods\":{\"changeCalldataAmount(bytes,uint256)\":{\"params\":{\"data\":\"- calldata to edit\",\"newAmount\":\"- new amount that should replace amount in {data}\"},\"returns\":{\"_0\":\"edited calldata with new amount inside*\"}},\"stableunitFillOrderCallback(address,uint256,address,bytes)\":{\"details\":\"behaviour like in uniswapV3FlashCallback: https://docs.uniswap.org/contracts/v3/guides/flash-integrations/flash-callback and AAVE flash-loan callback: https://github.com/aave/aave-v3-core/blob/master/contracts/flashloan/interfaces/IFlashLoanSimpleReceiver.sol*\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"swapLPWithFlashLoan(uint256,address,uint256,(address,bytes,address)[])\":{\"details\":\"Contract receive LP-token from exchange module, unwrap it and swap with 1inch all underline tokens to token that exchange module need.\",\"params\":{\"inchData\":\"- 1inch callData and contract array to swap every underline token of LP*\",\"orderId\":\"- Id of order in Exchange module to fill\",\"token2sell\":\"- Token in order to get as flash-loan\",\"token2sellAmount\":\"- Amount of token in order to get as flash-loan\"}},\"swapWithFlashLoan(uint256,address,uint256,(address,bytes,address))\":{\"details\":\"Contract receive loan from exchange module, sell it on 1inch and get profit = received amount - fee\",\"params\":{\"inchData\":\"- 1inch callData and contract to swap loan*\",\"orderId\":\"- Id of order in Exchange module to fill\",\"token2sell\":\"- Token in order to get as flash-loan\",\"token2sellAmount\":\"- Amount of token in order to get as flash-loan\"}}},\"title\":\"ArbitrageHelper\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"changeCalldataAmount(bytes,uint256)\":{\"notice\":\"Helper function to change amount parameter on callback that depends on return by 1inch API calldata for swap We set minAmount to 1 to be sure, that swap will be created. Route path don't depend on that - this path was calculated previously in backend part and is stored in {data}.\"},\"stableunitFillOrderCallback(address,uint256,address,bytes)\":{\"notice\":\"This is callback function from Exchange contract. fillOrderAsFlashLoan call (msg.sender).executeOperation(...) after transferring loan to sender\"},\"swapLPWithFlashLoan(uint256,address,uint256,(address,bytes,address)[])\":{\"notice\":\"The same as swapWithFlashLoan, but loan is LP-token that we need to unwrap\"},\"swapWithFlashLoan(uint256,address,uint256,(address,bytes,address))\":{\"notice\":\"Reference implementation of Arbitrage bot contract, that use Exchange module to get profit\"},\"uniswapV3Swap(uint256,uint256,uint256[])\":{\"notice\":\"We need this functions to check their selector and functionSelector in calldata for changeCalldataAmount() function*\"}},\"notice\":\"Helper contract to arbitrage using Exchange module\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/exchange/contracts/ArbitrageHelper.sol\":\"ArbitrageHelper\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\",\"keccak256\":\"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd\",\"license\":\"GPL-2.0-or-later\"},\"contracts/exchange/contracts/ArbitrageHelper.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../interfaces/IArbitrageHelper.sol\\\";\\nimport \\\"../interfaces/IExchange.sol\\\";\\nimport \\\"./CalldataDecoder.sol\\\";\\nimport \\\"../../periphery/contracts/access-control/SuAuthenticated.sol\\\";\\nimport \\\"../../periphery/contracts/interfaces/adapters/ILPAdapter.sol\\\";\\n\\n/**\\n * @title ArbitrageHelper\\n * @notice Helper contract to arbitrage using Exchange module\\n * @dev See IArbitrageHelper interface for full details.\\n */\\ncontract ArbitrageHelper is SuAuthenticated, IArbitrageHelper, CalldataDecoder {\\n    IExchange internal EXCHANGE;\\n    mapping(address => ILPAdapter) public lpToAdapter;\\n\\n    function initialize(address _authControl, address _exchange) public initializer {\\n        __suAuthenticatedInit(_authControl);\\n\\n        EXCHANGE = IExchange(_exchange);\\n    }\\n\\n    function registerLP(address _lp, address _lpAdapter) public onlyAdmin {\\n        lpToAdapter[_lp] = ILPAdapter(_lpAdapter);\\n\\n        TransferHelper.safeApprove(_lp, _lpAdapter, 2**256 - 1);\\n    }\\n\\n    /**\\n     * @notice Swap using Paraswap. Sell {amount2sell} token2sell to token using route encoded in paraswapData.data\\n     * @dev We get that data in bot using ParaSwap API (apiv5.paraswap.io)\\n     * Docs: https://developers.paraswap.network/api/build-parameters-for-transaction\\n     */\\n    function swapByParaswap(address token2sell, uint256 amount2sell, ParaswapData memory paraswapData) internal {\\n        // All token transfers are through tokenTransferProxy, so we need to make approve to this contract\\n        TransferHelper.safeApprove(token2sell, paraswapData.tokenTransferProxy, amount2sell);\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success,) = paraswapData.contractAddress.call(paraswapData.data);\\n        if (!success) {\\n            revert SwapByParaSwapError();\\n        }\\n    }\\n    /**\\n     * @notice as in swapByParaswap, look into utils/1inch.ts\\n     * @dev Docs: https://docs.1inch.io/docs/aggregation-protocol/api/swap-params/\\n     */\\n    function swapBy1Inch(address token2sell, uint256 amount2sell, address contractAddress, bytes memory data) internal {\\n        TransferHelper.safeApprove(token2sell, contractAddress, amount2sell);\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success,) = contractAddress.call(data);\\n        if (!success) {\\n            revert SwapBy1InchError();\\n        }\\n    }\\n\\n    function swapWithFlashLoan(\\n        uint256 orderId,\\n        address token2sell,\\n        uint256 token2sellAmount,\\n        InchData memory inchData\\n    ) public {\\n        InchData[] memory inchDataArr = new InchData[](1);\\n        inchDataArr[0] = inchData;\\n        // We do a flash-loan of {token2sell} in amount of {token2sellAmount} to our contract.\\n        // {data} will be decoded in stableunitFillOrderCallback() - the callback after we get flash-loan\\n        EXCHANGE.fillOrderAsFlashLoan(\\n            orderId,\\n            token2sellAmount,\\n            abi.encode(FlashCallbackData({\\n                isLP: false,\\n                orderId: orderId,\\n                token2sell: token2sell,\\n                token2sellAmount: token2sellAmount,\\n                recipient: msg.sender,\\n                inchData: inchDataArr\\n            }))\\n        );\\n    }\\n\\n    function swapLPWithFlashLoan(\\n        uint256 orderId,\\n        address token2sell,\\n        uint256 token2sellAmount,\\n        InchData[] memory inchData\\n    ) public {\\n        EXCHANGE.fillOrderAsFlashLoan(\\n            orderId,\\n            token2sellAmount,\\n            abi.encode(FlashCallbackData({\\n                isLP: true,\\n                orderId: orderId,\\n                token2sell: token2sell,\\n                token2sellAmount: token2sellAmount,\\n                recipient: msg.sender,\\n                inchData: inchData\\n            }))\\n        );\\n    }\\n\\n    /**\\n     * @notice This is callback function from Exchange contract.\\n     * fillOrderAsFlashLoan call (msg.sender).executeOperation(...) after transferring loan to sender\\n     * @dev behaviour like in uniswapV3FlashCallback:\\n     * https://docs.uniswap.org/contracts/v3/guides/flash-integrations/flash-callback\\n     * and AAVE flash-loan callback:\\n     * https://github.com/aave/aave-v3-core/blob/master/contracts/flashloan/interfaces/IFlashLoanSimpleReceiver.sol\\n    **/\\n    function stableunitFillOrderCallback(\\n        address asset,\\n        uint256 amount,\\n        address sender,\\n        bytes calldata data\\n    ) external returns (bool) {\\n        FlashCallbackData memory decoded = abi.decode(data, (FlashCallbackData));\\n\\n        if (msg.sender != address(EXCHANGE)) revert NotAPool(msg.sender);\\n        if (sender != address(this)) revert BadSender(sender);\\n\\n        uint256 balanceBefore = IERC20(asset).balanceOf(address(this));\\n\\n        if (decoded.isLP) {\\n            if (address(lpToAdapter[decoded.token2sell]) == address(0)) revert LPTokenNotRegistered(decoded.token2sell);\\n            if (\\n                !lpToAdapter[decoded.token2sell].isAdapterLP(decoded.token2sell)\\n            ) revert LPTokenNotSupported(decoded.token2sell);\\n\\n            WithdrawResult[] memory unwrapResult = lpToAdapter[decoded.token2sell].withdraw(\\n                decoded.token2sell,\\n                decoded.token2sellAmount\\n            );\\n            uint256 inchDataNTokens = decoded.inchData.length;\\n            uint256 unwrapNTokens = unwrapResult.length;\\n\\n            // if withdraw don't unwrap to all underlying tokens, then we need to find 1inch data to use in swap\\n            // else we need to use all 1inch data for each unwrapped tokens\\n            bool isCorrectUnwrap = inchDataNTokens == unwrapNTokens;\\n            for (uint16 i = 0; i < unwrapNTokens; ++i) {\\n                address underlineToken = unwrapResult[i].token;\\n                uint256 underlineTokenAmount = unwrapResult[i].amount;\\n\\n                // If token2buy is underline token of LP-token token2sell => this part of order is done\\n                if (underlineToken != asset) {\\n                    if (isCorrectUnwrap) {\\n                        swapBy1Inch(\\n                            underlineToken,\\n                            underlineTokenAmount,\\n                            decoded.inchData[i].contractAddress,\\n                            this.changeCalldataAmount(decoded.inchData[i].data, underlineTokenAmount)\\n                        );\\n                    } else { // we need to find correct 1inch data for that unwrapped token\\n                        for (uint16 j = 0; j < inchDataNTokens; ++j) {\\n                            if (unwrapResult[i].token == decoded.inchData[j].token) {\\n                                swapBy1Inch(\\n                                    underlineToken,\\n                                    underlineTokenAmount,\\n                                    decoded.inchData[j].contractAddress,\\n                                    this.changeCalldataAmount(decoded.inchData[j].data, underlineTokenAmount)\\n                                );\\n                                break;\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n        } else {\\n            swapBy1Inch(\\n                decoded.token2sell,\\n                decoded.token2sellAmount,\\n                decoded.inchData[0].contractAddress,\\n                decoded.inchData[0].data\\n            );\\n        }\\n\\n        uint256 balanceAfter = IERC20(asset).balanceOf(address(this));\\n        uint256 tokenBReceived = balanceAfter - balanceBefore;\\n\\n        if (tokenBReceived < amount) revert SwapNotProfitable();\\n        uint256 swapProfit = tokenBReceived - amount;\\n\\n        // Return flash-loan debt to Exchange contract\\n        TransferHelper.safeTransfer(asset, address(EXCHANGE), amount);\\n\\n        // Send swapped {asset} minus debt from flash-loan to liquidator (it's user profit)\\n        TransferHelper.safeTransfer(asset, decoded.recipient, swapProfit);\\n\\n        return true;\\n    }\\n\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x488d03e0ad5659f25c89c982172988af0fa52e6ed25ddf8fa5a1623fb545358b\",\"license\":\"BSL 1.1\"},\"contracts/exchange/contracts/CalldataDecoder.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\npragma solidity ^0.8.0;\\n\\nstruct SwapDescription {\\n    address srcToken;\\n    address dstToken;\\n    address srcReceiver;\\n    address dstReceiver;\\n    uint256 amount;\\n    uint256 minReturnAmount;\\n    uint256 flags;\\n}\\n\\n/**\\n * @notice Helper abstract contract to work with calldata\\n**/\\nabstract contract CalldataDecoder {\\n    /**\\n     * @notice We need this functions to check their selector and functionSelector in calldata\\n     * for changeCalldataAmount() function\\n    **/\\n    /* solhint-disable no-empty-blocks */\\n    function uniswapV3Swap(uint256, uint256, uint256[] calldata) public pure {}\\n    function unoswap(address, uint256, uint256, uint256[] calldata) public pure {}\\n    function swap(address, SwapDescription calldata, bytes calldata, bytes calldata) public pure {}\\n    function clipperSwap(\\n        address clipperExchange,\\n        address srcToken,\\n        address dstToken,\\n        uint256 inputAmount,\\n        uint256 outputAmount,\\n        uint256 goodUntil,\\n        bytes32 r,\\n        bytes32 vs\\n    ) public pure {}\\n    /* solhint-enable no-empty-blocks */\\n\\n    // TODO: add comment about minAmount\\n    // TODO: use byteToChange position in TS + check how much gas spent\\n    /**\\n      * @notice\\n      * Helper function to change amount parameter on callback that depends on return by 1inch API calldata for swap\\n      * We set minAmount to 1 to be sure, that swap will be created. Route path don't depend on that -\\n      * this path was calculated previously in backend part and is stored in {data}.\\n      * @param data - calldata to edit\\n      * @param newAmount - new amount that should replace amount in {data}\\n      * @return edited calldata with new amount inside\\n     **/\\n    function changeCalldataAmount(bytes calldata data, uint256 newAmount) public pure returns (bytes memory) {\\n        bytes4 functionSelector = bytes4(data[:4]);\\n        if (functionSelector == this.uniswapV3Swap.selector) {\\n            (\\n                /*uint256 _amount */, /*uint256 minReturn*/, uint256[] memory pools\\n            ) = abi.decode(data[4:], (uint256, uint256, uint256[]));\\n            return abi.encodeWithSignature(\\\"uniswapV3Swap(uint256,uint256,uint256[])\\\", newAmount, 1, pools);\\n        }\\n        if (functionSelector == this.unoswap.selector) {\\n            (\\n                address token, /* uint256 _amount */, /*uint256 minReturn*/, uint256[] memory pools\\n            ) = abi.decode(data[4:], (address,uint256,uint256,uint256[]));\\n            return abi.encodeWithSignature(\\\"unoswap(address,uint256,uint256,uint256[])\\\", token, newAmount, 1, pools);\\n        }\\n        if (functionSelector == this.swap.selector) {\\n            (\\n                address caller, SwapDescription memory description, bytes memory permit, bytes memory swapData\\n            ) = abi.decode(data[4:], (address, SwapDescription, bytes, bytes));\\n            return abi.encodeWithSignature(\\n                \\\"swap(address,(address,address,address,address,uint256,uint256,uint256),bytes,bytes)\\\",\\n                caller,\\n                SwapDescription({\\n                    srcToken: description.srcToken,\\n                    dstToken: description.dstToken,\\n                    srcReceiver: description.srcReceiver,\\n                    dstReceiver: description.dstReceiver,\\n                    amount: newAmount,\\n                    minReturnAmount: 1,\\n                    flags: description.flags\\n                }),\\n                permit,\\n                swapData\\n            );\\n        }\\n        if (functionSelector == this.clipperSwap.selector) {\\n            (\\n                address clipperExchange,\\n                address srcToken,\\n                address dstToken,\\n                /*uint256 _inputAmount*/,\\n                /*uint256 outputAmount*/,\\n                uint256 goodUntil,\\n                bytes32 r,\\n                bytes32 vs\\n            ) = abi.decode(data[4:], (address, address, address, uint256, uint256, uint256, bytes32, bytes32));\\n            return abi.encodeWithSignature(\\n                \\\"clipperSwap(address,address,address,uint256,uint256,uint256,bytes32,bytes32)\\\",\\n                clipperExchange,\\n                srcToken,\\n                dstToken,\\n                newAmount,\\n                1,\\n                goodUntil,\\n                r,\\n                vs\\n            );\\n        }\\n\\n        return data;\\n    }\\n}\\n\",\"keccak256\":\"0xfa2bc27d4ef08083b91ed485503eccd94f0340205ffdb6db53c374f858a1bd2b\",\"license\":\"BSL 1.1\"},\"contracts/exchange/interfaces/IArbitrageHelper.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IExchangeCallback.sol\\\";\\n\\nstruct FlashCallbackData {\\n    bool isLP;\\n    uint256 orderId;\\n    address token2sell;\\n    uint256 token2sellAmount;\\n    address recipient;\\n    InchData[] inchData;\\n}\\n\\nstruct ParaswapData {\\n    address contractAddress;\\n    address tokenTransferProxy;\\n    bytes data;\\n}\\n\\nstruct InchData {\\n    address contractAddress;\\n    bytes data;\\n    address token; // needed only if adapter unwrap not to all underlying tokens\\n}\\n\\ninterface IArbitrageHelper is IExchangeCallback {\\n    /* ===================== ERRORS ===================== */\\n    error NotAPool(address sender);\\n    error SwapNotProfitable();\\n    error SwapByParaSwapError();\\n    error SwapBy1InchError();\\n    error BadSender(address sender);\\n    error LPTokenNotSupported(address lpToken);\\n    error LPTokenNotRegistered(address lpToken);\\n\\n    /* ===================== EVENTS ===================== */\\n    // event SwapByUniswap(address tokenA, address tokenB);\\n\\n    /* ==================== MUTABLE METHODS ==================== */\\n\\n\\n    /**\\n      * @notice Register LP to use it adapter to withdraw or get price of LP later in swapLPWithFlashLoan();\\n      * @param lp - address of LP token\\n      * @param lpAdapter - address of LPAdapter for this LP token\\n    **/\\n    function registerLP(address lp, address lpAdapter) external;\\n\\n    /**\\n      * @notice Reference implementation of Arbitrage bot contract, that use Exchange module to get profit\\n      * @dev Contract receive loan from exchange module, sell it on 1inch and get profit = received amount - fee\\n      * @param orderId - Id of order in Exchange module to fill\\n      * @param token2sell - Token in order to get as flash-loan\\n      * @param token2sellAmount - Amount of token in order to get as flash-loan\\n      * @param inchData - 1inch callData and contract to swap loan\\n     **/\\n    function swapWithFlashLoan(\\n        uint256 orderId,\\n        address token2sell,\\n        uint256 token2sellAmount,\\n        InchData memory inchData\\n    ) external;\\n\\n    /**\\n      * @notice The same as swapWithFlashLoan, but loan is LP-token that we need to unwrap\\n      * @dev Contract receive LP-token from exchange module, unwrap it and swap with 1inch all underline tokens\\n      * to token that exchange module need.\\n      * @param orderId - Id of order in Exchange module to fill\\n      * @param token2sell - Token in order to get as flash-loan\\n      * @param token2sellAmount - Amount of token in order to get as flash-loan\\n      * @param inchData - 1inch callData and contract array to swap every underline token of LP\\n     **/\\n    function swapLPWithFlashLoan(\\n        uint256 orderId,\\n        address token2sell,\\n        uint256 token2sellAmount,\\n        InchData[] memory inchData\\n    ) external;\\n}\",\"keccak256\":\"0x013640eb50f02a5ba876524f4a9b5fcf82bd2071e2121a217a6399e9867f1d96\",\"license\":\"BSL 1.1\"},\"contracts/exchange/interfaces/IExchange.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\npragma solidity ^0.8.0;\\n\\nenum DiscountType {\\n    aggressive,\\n    middle,\\n    conservative\\n}\\n\\nstruct Order {\\n    address token2sell;\\n    uint256 amountLeft;\\n    address token2buy;\\n    uint256 token2buyAmount;\\n    address beneficiary;\\n    uint256 creationTimestamp;\\n    DiscountType discountType;\\n    address caller;\\n}\\n\\nstruct OrderWithId {\\n    Order order;\\n    uint256 orderId;\\n}\\n\\ninterface IExchange {\\n    /* ===================== ERRORS ===================== */\\n    error OrderExist(uint256 orderId);\\n    error OrderNotExist(uint256 orderId);\\n    error IncorrectToken(address orderToken2buy, address inToken);\\n    error SmallAmountLeft();\\n    error UserIsNotBeneficiary();\\n    error IsNotTopStaker(address staker);\\n    error OrderNotForThisStaker(uint256 orderId, address staker);\\n    error NotEnoughReturnValue();\\n    error CallbackError();\\n\\n    /* ======================== EVENTS ========================= */\\n    event OrderAdded(uint256 orderId);\\n    event OrderCanceled(uint256 orderId);\\n    event OrderFilled(uint256 orderId);\\n    event OrderFilledPartially(uint256 orderId);\\n    event LpOrdersAdded(address LPToken, uint256[] orderIds);\\n\\n    /* ==================== MUTABLE METHODS ==================== */\\n\\n    /**\\n      * @notice Add order to swap {token2sell} to {token2buy}.\\n      * @dev This swap is async, because depends on how arbitrage bots will fill this order. Emits OrderAdded() event.\\n      * Before addOrder user needs to approve token2sell for exchange contract\\n      * @param token2sell - Address of token to sell\\n      * @param amount2sell - Amount of {token2sell} to sell\\n      * @param token2buy - Address of token to buy\\n      * @param beneficiary - Address that will receive {token2buy} after filling order.\\n      * @param discountType - Speed of decreasing swap price. { 0 - aggressive, 1 - middle, 2 - conservative }\\n      * @param collateralJoin - address of collateral adapter\\n     **/\\n    function addOrder (\\n        address token2sell,\\n        uint256 amount2sell,\\n        address token2buy,\\n        address beneficiary,\\n        DiscountType discountType,\\n        address collateralJoin\\n    ) external returns (uint256);\\n\\n    /**\\n      * @notice Only user who place order or who is beneficiary can cancelOrder();\\n      * @param orderId - Id of order to cancel.\\n     **/\\n    function cancelOrder (uint256 orderId) external;\\n\\n    /**\\n      * @notice Fill order with flash-loan like logic\\n      * @dev Caller contract receive orders {token2sell} and after that his stableunitFillOrderCallback() is called.\\n      * At the end of thi callback contract should send some amount of another token back to Exchange contract.\\n      * @param orderId - Id of order to fill.\\n      * @param inAmount - Amount of {token2sell} to receive\\n      * @param data - encoded data to pass to callback function\\n     **/\\n    function fillOrderAsFlashLoan (\\n        uint256 orderId,\\n        uint256 inAmount,\\n        bytes memory data\\n    ) external returns (uint256 outAmount);\\n\\n    /**\\n      * @notice Function to update price curve - how fast {token2sell} price will decrease/increase\\n      * @param discountType - discount type to change\\n      * @param newPriceCurve - parameters of formula\\n     **/\\n    function setPriceCurve(DiscountType discountType, uint256[2] calldata newPriceCurve) external;\\n\\n    /* ==================== VIEW METHODS ==================== */\\n    /**\\n      * @return The amount of outcome that caller will receive if he will fill {orderId} with {inAmount} of {token2sell}\\n     **/\\n    function getExpectedOrderOutcome (uint256 orderId, uint256 inAmount) external view returns (uint256);\\n\\n    /**\\n      * @return Order with id = {orderId}\\n     **/\\n    function getOrder (uint256 orderId) external view returns (Order memory);\\n\\n    /**\\n      * @return The amount of not full-filled orders\\n     **/\\n    function getOrdersCount () external view returns (uint256);\\n\\n    /**\\n      * @return The array of all not-filled orders. May be deleted after adding GraphQL for orderIds\\n     **/\\n    function getAllOrders () external view returns (OrderWithId[] memory);\\n}\\n\",\"keccak256\":\"0x53787e6c6540f7972889e73059e082c37982a613beb038684d49aa1192c39074\",\"license\":\"BSL 1.1\"},\"contracts/exchange/interfaces/IExchangeCallback.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\npragma solidity ^0.8.0;\\n\\ninterface IExchangeCallback {\\n    /**\\n     * @notice Callback that will be called by Exchange module in fillOrderAsFlashLoan()\\n     * after sending collateral to msg.sender.\\n     * In the implementation you must pay stablecoin for Exchange contract.\\n     * @dev Any contract that calls Exchange#fillOrderAsFlashLoan must implement this interface\\n     * @param asset - The address of the token that should be returned\\n     * @param amount - The amount of the {token} to return\\n     * @param initiator The address of the flashloan initiator\\n     * @return True if the execution of the operation succeeds, false otherwise\\n     */\\n    function stableunitFillOrderCallback (\\n        address asset,\\n        uint256 amount,\\n        address initiator,\\n        bytes calldata params\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x83d01cfa5b53319a2111163fd3d2f51dbe426069eb552818edbbbc4ef097582e\",\"license\":\"BSL 1.1\"},\"contracts/periphery/contracts/access-control/SuAccessRoles.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title SuAccessRoles Library\\n * @dev SuAuthenticated and SuAccessControlSingleton need to have this constants\\n * Hierarchy:\\n *      1. DAO - can give admins and system roles\\n *      2.1. Admin - can set Alerters\\n *      2.2. System - includes Minter, Vault, Liquidation and Reward roles, don't have access to give some roles.\\n *      3. Alerter - can send alerts and trigger rate limits, don't have access to give some roles.\\n */\\nabstract contract SuAccessRoles {\\n    bytes32 public constant ADMIN_ROLE = 0x00;\\n\\n    bytes32 public constant DAO_ROLE = keccak256(\\\"DAO_ROLE\\\");\\n\\n    bytes32 public constant ALERTER_ROLE = keccak256(\\\"ALERTER_ROLE\\\");\\n\\n    // system roles\\n    bytes32 public constant MINT_ACCESS_ROLE = keccak256(\\\"MINT_ACCESS_ROLE\\\");\\n    bytes32 public constant VAULT_ACCESS_ROLE = keccak256(\\\"VAULT_ACCESS_ROLE\\\");\\n    bytes32 public constant LIQUIDATION_ACCESS_ROLE = keccak256(\\\"LIQUIDATION_ACCESS_ROLE\\\");\\n    bytes32 public constant REWARD_ACCESS_ROLE = keccak256(\\\"REWARD_ACCESS_ROLE\\\");\\n    bytes32 public constant SYSTEM_ROLE = keccak256(\\\"SYSTEM_ROLE\\\");\\n}\\n\",\"keccak256\":\"0xce71310378d7b30dfc4beda0af58490c09cb2cc6c4d951ce1b62bf2fb62d6dbc\",\"license\":\"BSL 1.1\"},\"contracts/periphery/contracts/access-control/SuAuthenticated.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/access-control/ISuAccessControl.sol\\\";\\nimport \\\"./SuAccessRoles.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @title SuAuthenticated\\n * @dev other contracts should inherit to be authenticated.\\n * The address of SuAccessControlSingleton should be one for all contract that inherits SuAuthenticated\\n */\\nabstract contract SuAuthenticated is Initializable, SuAccessRoles, IERC165Upgradeable {\\n    ISuAccessControl public ACCESS_CONTROL_SINGLETON;\\n\\n    error OnlyDAOError();\\n    error OnlyAdminError();\\n    error OnlyAlerterError();\\n    error OnlyVaultAccessError();\\n    error OnlyLiquidationAccessError();\\n    error OnlyMintAccessError();\\n    error OnlyRewardAccessError();\\n    error OnlyRoleError();\\n    error BadAccessControlSingleton();\\n\\n    /**\\n     * @dev should be passed in constructor\\n     */\\n    function __suAuthenticatedInit(address _accessControlSingleton) internal onlyInitializing {\\n        ACCESS_CONTROL_SINGLETON = ISuAccessControl(_accessControlSingleton);\\n        if (\\n            _accessControlSingleton != address(0) &&\\n            !ISuAccessControl(_accessControlSingleton).supportsInterface(type(IAccessControlUpgradeable).interfaceId)\\n        ) revert BadAccessControlSingleton();\\n    }\\n\\n    /** CORE ROLES */\\n\\n    modifier onlyDAO() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(DAO_ROLE, msg.sender)) revert OnlyDAOError();\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(ADMIN_ROLE, msg.sender)) revert OnlyAdminError();\\n        _;\\n    }\\n\\n    modifier onlyAlerter() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(ALERTER_ROLE, msg.sender)) revert OnlyAlerterError();\\n        _;\\n    }\\n\\n    /** SYSTEM ROLES */\\n\\n    modifier onlyVaultAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(VAULT_ACCESS_ROLE, msg.sender)) revert OnlyVaultAccessError();\\n        _;\\n    }\\n\\n    modifier onlyLiquidationAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(LIQUIDATION_ACCESS_ROLE, msg.sender)) revert OnlyLiquidationAccessError();\\n        _;\\n    }\\n\\n    modifier onlyMintAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(MINT_ACCESS_ROLE, msg.sender)) revert OnlyMintAccessError();\\n        _;\\n    }\\n\\n    modifier onlyRewardAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(REWARD_ACCESS_ROLE, msg.sender)) revert OnlyRewardAccessError();\\n        _;\\n    }\\n\\n    // syntax sugar under ACCESS_CONTROL_SINGLETON\\n    modifier onlyRole(bytes32 role) {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(role, msg.sender)) revert OnlyRoleError();\\n        _;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return ACCESS_CONTROL_SINGLETON.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x4e1ac84371a46e7534714397cf0ea5cf30d0e338caee0fde64771f276a5a4303\",\"license\":\"BSL 1.1\"},\"contracts/periphery/contracts/interfaces/access-control/ISuAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\nimport \\\"../../access-control/SuAccessRoles.sol\\\";\\n\\n/**\\n * @notice Access control for contracts\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n **/\\ninterface ISuAccessControl is IAccessControlUpgradeable, IERC165Upgradeable {\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\\n}\\n\",\"keccak256\":\"0x25724ac502fd6418ccd38273b276de4b2fdecd023d723c5d80c9f0a27c407bcd\",\"license\":\"MIT\"},\"contracts/periphery/contracts/interfaces/adapters/ILPAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"../oracle/ISuOracle.sol\\\";\\n\\nstruct WithdrawResult {\\n    address token;\\n    uint256 amount;\\n}\\n\\ninterface ILPAdapter is ISuOracle {\\n    /* ======================== ERRORS ======================== */\\n    error IsNotLP(address asset);\\n    error AlreadyRegistered(address asset);\\n    error LPOracleNotReady();\\n\\n    /* ==================== MUTABLE METHODS ==================== */\\n    /**\\n      * @notice Unwrap LP token with depth = 2 (if underlying token is LP => it's also unwrapping)\\n      * @param asset - address of LP token to withdraw/unwrap\\n      * @param amount - amount of asset to withdraw/unwrap\\n     **/\\n    function withdraw(address asset, uint256 amount) external returns (WithdrawResult[] memory);\\n\\n    /* ====================== VIEW METHODS ==================== */\\n    /**\\n      * @notice Returns if asset ig Balancer LP token, registered in our adapter\\n      * @param asset - address of LP token to check\\n     **/\\n    function isAdapterLP(address asset) external returns (bool);\\n}\",\"keccak256\":\"0x4a1b94f8bdc9063002386f854608c9b600ad2a7d45703ad05deb7536c006a855\",\"license\":\"BSL 1.1\"},\"contracts/periphery/contracts/interfaces/oracle/ISuOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\n// solhint-disable compiler-version\\npragma solidity >=0.7.6;\\n\\ninterface ISuOracle {\\n    /**\\n     * @notice WARNING! Read this description very carefully!\\n     *     function getFiatPrice1e18(address asset) returns (uint256) that:\\n     *         basicAmountOfAsset * getFiatPrice1e18(asset) / 1e18 === $$ * 1e18\\n     *     in other words, it doesn't matter what's the erc20.decimals is,\\n     *     you just multiply token balance in basic units on value from oracle and get dollar amount multiplied on 1e18.\\n     *\\n     * different assets have different deviation threshold (errors)\\n     *     for wBTC it's <= 0.5%, read more https://data.chain.link/ethereum/mainnet/crypto-usd/btc-usd\\n     *     for other asset is can be larger based on particular oracle implementation.\\n     *\\n     * examples:\\n     *     market price of btc = $30k,\\n     *     for 0.1 wBTC the unit256 amount is 0.1 * 1e18\\n     *     0.1 * 1e18 * (price1e18 / 1e18) == $3000 == uint256(3000*1e18)\\n     *     => price1e18 = 30000 * 1e18;\\n     *\\n     *     market price of usdt = $0.97,\\n     *     for 1 usdt uint256 = 1 * 1e6\\n     *     so 1*1e6 * price1e18 / 1e18 == $0.97 == uint256(0.97*1e18)\\n     *     => 1*1e6 * (price1e18 / 1e18) / (0.97*1e18)   = 1\\n     *     =>  price1e18 = 0.97 * (1e18/1e6) * 1e18\\n     *\\n     *    assume market price of wBTC = $31,503.77, oracle error = $158\\n     *\\n     *     case #1: small amount of wBTC\\n     *         we have 0.0,000,001 wBTC that is worth v = $0.00315 \\u00b1 $0.00001 = 0.00315*1e18 = 315*1e13 \\u00b1 1*1e13\\n     *         actual balance on the asset b = wBTC.balanceOf() =  0.0000001*1e18 = 1e11\\n     *         oracle should return or = oracle.getFiatPrice1e18(wBTC) <=>\\n     *         <=> b*or = v => v/b = 315*1e13 / 1e11 = 315*1e2 \\u00b1 1e2\\n     *         error = or.error * b = 1e2 * 1e11 = 1e13 => 1e13/1e18 usd = 1e-5 = 0.00001 usd\\n     *\\n     *     case #2: large amount of wBTC\\n     *         v = 2,000,000 wBTC = $31,503.77 * 2m \\u00b1 158*2m = $63,007,540,000 \\u00b1 $316,000,000 = 63,007*1e24 \\u00b1 316*1e24\\n     *         for calc convenience we increase error on 0.05 and have v = 63,000*24 \\u00b1 300*1e24 = (630 \\u00b1 3)*1e26\\n     *         b = 2*1e6 * 1e18 = 2*1e24\\n     *         or = v/b = (630 \\u00b1 3)*1e26 / 2*1e24 = 315*1e2 \\u00b1 1.5*1e2\\n     *         error = or.error * b = 1.5*100 * 2*1e24 = 3*1e26 = 3*1e8*1e18 = $300,000,000 ~ $316,000,000\\n     *\\n     *     assume the market price of USDT = $0.97 \\u00b1 $0.00485,\\n     *\\n     *     case #3: little amount of USDT\\n     *         v = USDT amount 0.005 = 0.005*(0.97 \\u00b1 0.00485) = 0.00485*1e18 \\u00b1 0.00002425*1e18 = 485*1e13 \\u00b1 3*1e13\\n     *         we rounded error up on (3000-2425)/2425 ~= +24% for calculation convenience.\\n     *         b = USDT.balanceOf() = 0.005*1e6 = 5*1e3\\n     *         b*or = v => or = v/b = (485*1e13 \\u00b1 3*1e13) / 5*1e3 = 970*1e9 \\u00b1 6*1e9\\n     *         error = 6*1e9 * 5*1e3 / 1e18 = 30*1e12/1e18 = 3*1e-5 = $0,00005\\n     *\\n     *     case #4: lot of USDT\\n     *         v = we have 100,000,000,000 USDT = $97B = 97*1e9*1e18 \\u00b1 0.5*1e9*1e18\\n     *         b = USDT.balanceOf() = 1e11*1e6 = 1e17\\n     *         or = v/b = (97*1e9*1e18 \\u00b1 0.5*1e9*1e18) / 1e17 = 970*1e9 \\u00b1 5*1e9\\n     *         error = 5*1e9 * 1e17 = 5*1e26 = 0.5 * 1e8*1e18\\n     *\\n     * @param asset - address of erc20 token contract\\n     * @return usdPrice1e18 such that asset.balanceOf() * getFiatPrice1e18(asset) / 1e18 == $$ * 1e18\\n     **/\\n    function getFiatPrice1e18(address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa56b9cc86ef5935efecc276e6a3188d518f1a99cad960083a8de35849c997687\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657611d4b908161001c8239f35b600080fdfe608080604052600436101561001357600080fd5b60003560e01c90816301ffc9a7146111a35750806303ee9f22146111765780630502b1c51461113d57806312aa3caf146110da57806314c376dc1461109f5780631e61130614611048578063438280dd1461100d578063485cc95514610dbd5780634dec53e014610d825780636a2f53c21461066357806371d0fb411461062857806374cc2bdd1461058a57806375071d2a1461054f57806375b238fc1461053357806384bd6d29146105075780638e5313e0146104cc578063943a0f1314610349578063dc97e84e1461030e578063e37c74a114610178578063e449022e146101465763e9c265181461010657600080fd5b346101415760003660031901126101415760206040517f3b5d4cc60d3ec3516ee8ae083bd60934f6eb2a6c54b1229985c41bfb092b26038152f35b600080fd5b34610141576060366003190112610141576044356001600160401b03811161014157610176903690600401611284565b005b3461014157608036600319011261014157600435610194611244565b90604435906001600160401b0390606435828111610141576101ba903690600401611409565b90604051946040860186811085821117610218576040526001865260005b6020908181101561022e57604051606092838201938285108986111761021857602094604052600083528183015260006040830152828a010152016101d8565b634e487b7160e01b600052604160045260246000fd5b836102ce846102a38b8b8a61024283611554565b5261024c82611554565b506001546040516001600160a01b039791881693600092916102b19161027182611329565b84825260209a8b99858b85015216604083015285606083015233608083015260a082015260405196879189830161158b565b03601f19810187528661135f565b604051637176836f60e11b8152968795869485936004850161165f565b03925af18015610302576102de57005b813d83116102fb575b6102f1818361135f565b8101031261014157005b503d6102e7565b6040513d6000823e3d90fd5b346101415760003660031901126101415760206040517f9a9aef7c1247d5fc769b0185c052913e39673da29a880317dfd20ebf86f26a498152f35b346101415760403660031901126101415761036261122e565b61036a611244565b9060018060a01b03908160005460101c16926040518094632474521560e21b82526000600483015233602483015281604460209788935afa9081156103025760009161049f575b501561048d5782169181166000526002835260406000208260018060a01b0319825416179055604051908382019263095ea7b360e01b84526024830152600019604483015260448252608082019282841060018060401b03851117610218576000809493819460405251925af1610426611524565b8161045d575b501561043457005b6064906040519062461bcd60e51b825260048201526002602482015261534160f01b6044820152fd5b80518015925083908315610475575b5050508261042c565b61048593508201810191016114f1565b82828161046c565b604051631886ea7d60e11b8152600490fd5b6104bf9150853d87116104c5575b6104b7818361135f565b8101906114f1565b856103b1565b503d6104ad565b346101415760003660031901126101415760206040517fe453bacb314e78dcd5192e6b1a2b1f0e7c76e92f6b7e429a6a90f04e39db3b768152f35b34610141576101003660031901126101415761052161122e565b5061052a611244565b5061017661125a565b3461014157600036600319011261014157602060405160008152f35b346101415760003660031901126101415760206040517f5719df9ef2c4678b547f89e4f5ae410dbf400fc51cf3ded434c55f6adea2c43f8152f35b34610141576080366003190112610141576004356105a6611244565b604435906064356001600160401b038111610141576102ce926105d06102a3923690600401611471565b6001546040516001600160a01b03979188169392600092916102b1916105f582611329565b6001825260209a8b99858b85015216604083015285606083015233608083015260a082015260405196879189830161158b565b346101415760003660031901126101415760206040517f880a91047114272656e533301261260c75e4d11543ac7303d6fe4204579ec7278152f35b346101415760803660031901126101415761067c61122e565b61068461125a565b906064356001600160401b038111610141576106a49036906004016112b4565b81019290602081850312610141578035906001600160401b038211610141570160c081850312610141576040519360c085016001600160401b0381118682101761021857604052813580151581036101415785526020820135602086015261070e60408301611270565b60408601526060820135606086015261072960808301611270565b608086015260a08201356001600160401b0381116101415761074b9201611471565b60a08401526001546001600160a01b03163303610d6a576001600160a01b0316308103610d5257506040516370a0823160e01b8152306004820152906020826024816001600160a01b0385165afa91821561030257600092610d1e575b50825115610cd0576040838101516001600160a01b039081166000908152600260205291909120541615610ca957604083810180516001600160a01b039081166000908152600260209081528482205493519451635136211760e01b8152948316600486015292849260249284929091165af190811561030257600091610c8a575b5015610c6357604080840180516001600160a01b03908116600090815260026020528381205492516060880151945163f3fef3a360e01b815297959491938893908116928492869284926108849290911660048401611509565b03925af193841561030257600094610b68575b5060a0820151519184519460005b8661ffff82161015610a8d576001600160a01b036108c761ffff831684611577565b5151169060206108db61ffff831685611577565b5101516001600160a01b03861683036108ff575b506108fa915061167b565b6108a5565b8689036109b4576109619060018060a01b0361092361ffff851660a0890151611577565b5151166000602061093c61ffff871660a08b0151611577565b51015160405180958192630f30898360e11b8352604060048401526044830190611304565b8560248301520381305afa918215610302576108fa956109899460009461098f575b506117bb565b886108ef565b6109ad9194503d806000833e6109a5818361135f565b8101906116a4565b928d610983565b94919790959660005b8861ffff82161015610a7c576001600160a01b036109df61ffff8a1687611577565b51511660018060a01b0360406109fd61ffff851660a08b0151611577565b5101511614610a1457610a0f9061167b565b6109bd565b95610a50919897929993966000602061093c61ffff60018060a01b03610a418c60a0848916910151611577565b515116941660a08b0151611577565b8560248301520381305afa918215610302576108fa95610a779460009461098f57506117bb565b610989565b5096959097506108fa919450610989565b505092915092505b6040516370a0823160e01b8152306004820152906020826024816001600160a01b0388165afa801561030257600090610b34575b610ad39250611702565b9160243591828410610b2257610b04610aef84610b1796611702565b6001549094906001600160a01b03168461170f565b608001516001600160a01b03169061170f565b602060405160018152f35b60405163510a529560e01b8152600490fd5b506020823d602011610b60575b81610b4e6020938361135f565b8101031261014157610ad39151610ac9565b3d9150610b41565b9093503d806000833e610b7b818361135f565b6020828281010312610141578151906001600160401b03821161014157808301601f838501011215610141578183015190610bb582611382565b93610bc3604051958661135f565b828552602085019382820160208560061b8385010101116101415793602085830101945b60208560061b82850101018610610c05575050505050509284610897565b604086858501031261014157604080519081018082116001600160401b0390911117610218576040818101905286516001600160a01b03811681036101415760209382859260409452828a0151838201528152019601959150610be7565b60408381015190516325eadd2560e01b81526001600160a01b039091166004820152602490fd5b610ca3915060203d6020116104c5576104b7818361135f565b8461082a565b6040838101519051637d250b0b60e11b81526001600160a01b039091166004820152602490fd5b6040830151606084015160a085015192949392610d19926001600160a01b039081169291610cfd90611554565b515116906020610d1060a0880151611554565b510151926117bb565b610a95565b9091506020813d602011610d4a575b81610d3a6020938361135f565b81010312610141575190836107a8565b3d9150610d2d565b60249060405190637d85130d60e11b82526004820152fd5b60405163e372835960e01b8152336004820152602490fd5b346101415760203660031901126101415760206001600160a01b0380610da661122e565b166000526002825260406000205416604051908152f35b3461014157604036600319011261014157610dd661122e565b610dde611244565b60005460ff8160081c161590818092611000575b8015610fe9575b15610f8d5760ff19811660011760005581610f7b575b506000549160ff8360081c1615610f225762010000600160b01b03601085901b1662010000600160b01b031984168117600055936001600160a01b03919082168015159081610ec5575b50610eb3571660018060a01b03196001541617600155610e7557005b610100600160b01b03191617600055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a1005b6040516384d942fd60e01b8152600490fd5b6040516301ffc9a760e01b8152637965db0b60e01b60048201529150602090829060249082905afa90811561030257600091610f04575b501586610e59565b610f1c915060203d81116104c5576104b7818361135f565b86610efc565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b61ffff19166101011760005583610e0f565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b158015610df95750600160ff821614610df9565b50600160ff821610610df2565b346101415760003660031901126101415760206040517f39f61ca2a1a28fee144218173ec637b649a353e4026b2738c673800e5bf1437b8152f35b34610141576040366003190112610141576004356001600160401b0381116101415761108761107e61109b9236906004016112b4565b60243591611919565b604051918291602083526020830190611304565b0390f35b346101415760003660031901126101415760206040517fe965846df3dd5b1dfa65f58e31477079e90140e0908b6dd31b5aead5a57cf3658152f35b3461014157610140366003190112610141576110f461122e565b5060e0366023190112610141576001600160401b0361010435818111610141576111229036906004016112b4565b505061012435908111610141576101769036906004016112b4565b346101415760803660031901126101415761115661122e565b506064356001600160401b03811161014157610176903690600401611284565b346101415760003660031901126101415760005460405160109190911c6001600160a01b03168152602090f35b346101415760203660031901126101415760043563ffffffff60e01b8116809103610141576000546301ffc9a760e01b835260048301919091526020908290602490829060101c6001600160a01b03165afa801561030257602091600091611211575b506040519015158152f35b6112289150823d81116104c5576104b7818361135f565b82611206565b600435906001600160a01b038216820361014157565b602435906001600160a01b038216820361014157565b604435906001600160a01b038216820361014157565b35906001600160a01b038216820361014157565b9181601f84011215610141578235916001600160401b038311610141576020808501948460051b01011161014157565b9181601f84011215610141578235916001600160401b038311610141576020838186019501011161014157565b60005b8381106112f45750506000910152565b81810151838201526020016112e4565b9060209161131d815180928185528580860191016112e1565b601f01601f1916010190565b60c081019081106001600160401b0382111761021857604052565b60e081019081106001600160401b0382111761021857604052565b601f909101601f19168101906001600160401b0382119082101761021857604052565b6001600160401b0381116102185760051b60200190565b6001600160401b03811161021857601f01601f191660200190565b9291926113c082611399565b916113ce604051938461135f565b829481845281830111610141578281602093846000960137010152565b9080601f8301121561014157816020611406933591016113b4565b90565b91909160608184031261014157604051906001600160401b03606083018181118482101761021857604052829461143f83611270565b8452602083013591821161014157826114616040949261146c948694016113eb565b602086015201611270565b910152565b9080601f830112156101415781359061148982611382565b92611497604051948561135f565b828452602092838086019160051b8301019280841161014157848301915b8483106114c55750505050505090565b82356001600160401b0381116101415786916114e684848094890101611409565b8152019201916114b5565b90816020910312610141575180151581036101415790565b6001600160a01b039091168152602081019190915260400190565b3d1561154f573d9061153582611399565b91611543604051938461135f565b82523d6000602084013e565b606090565b8051156115615760200190565b634e487b7160e01b600052603260045260246000fd5b80518210156115615760209160051b010190565b602080825260e0820190835115158184015280840151926040938482015260018060a01b039360a08582880151169660609788850152878101516080850152866080820151168285015201519560c08084015286518095526101009184838501938760051b8601019801966000945b87861061160d5750505050505050505090565b909192939495969798878060019260ff198582030189528c5190868251168152878781611645868601518d888701528d860190611304565b940151169101529b019601960194979695939291906115fa565b6114069392606092825260208201528160408201520190611304565b61ffff80911690811461168e5760010190565b634e487b7160e01b600052601160045260246000fd5b602081830312610141578051906001600160401b038211610141570181601f820112156101415780516116d681611399565b926116e4604051948561135f565b818452602082840101116101415761140691602080850191016112e1565b9190820391821161168e57565b600092918361173a6117488295604051928391602083019663a9059cbb60e01b885260248401611509565b03601f19810183528261135f565b51925af1611754611524565b8161178c575b501561176257565b60405162461bcd60e51b815260206004820152600260248201526114d560f21b6044820152606490fd5b80518015925082156117a1575b50503861175a565b6117b492506020809183010191016114f1565b3880611799565b92906040516117e08161173a602082019463095ea7b360e01b86528760248401611509565b600094859283809351925af16117f4611524565b81611858575b501561182e57829182602083519301915af1611814611524565b501561181c57565b604051635aa0560760e11b8152600490fd5b60405162461bcd60e51b8152602060048201526002602482015261534160f01b6044820152606490fd5b805180159250821561186d575b5050386117fa565b61188092506020809183010191016114f1565b3880611865565b81601f820112156101415780359161189e83611382565b926118ac604051948561135f565b808452602092838086019260051b820101928311610141578301905b8282106118d6575050505090565b813581529083019083016118c8565b90815180825260208080930193019160005b828110611905575050505090565b8351855293810193928101926001016118f7565b90600481811193846101415783356001600160e01b03191694637224811760e11b808714611ca25750630502b1c560e01b868114611c1e57506312aa3caf60e01b8614611a45576384bd6d2960e01b95861461197e57505050611406925036916113b4565b9392909193610141576101009083018390036003190112610141576119a4838301611270565b6119b060248401611270565b906119bd60448501611270565b9060405196602088015260018060a01b03928380921660248901521660448701521660648501526084840152600160a484015260a481013560c484015260c481013560e484015260e461010491013581840152825261014082019082821060018060401b03831117611a30575060405290565b604190634e487b7160e01b6000525260246000fd5b90929193945061014157830191838303916101406003198401126101415760e0611a70838701611270565b9360231901126101415760405190611a8782611344565b611a9360248701611270565b8252611aa160448701611270565b9560208301968752611ab560648201611270565b60408401908152611ac860848301611270565b6060850190815260a4830135608086015260c483013560a086015260e483013560c086019081526001600160401b039491610104850135868111610141578a89611b14928801016113eb565b94610124810135968711610141576114069a61173a99611c0b98611b399301016113eb565b96519a519351905191516040519b90946001600160a01b0393841693928316929081169116611b678d611344565b8c526020808d019182526040808e0193845260608e0194855260808e01958652600160a08f0190815260c08f0197885290516312aa3caf60e01b928101929092526001600160a01b039b8c1660248301529c518b16604482015290518a166064820152905189166084820152905190971660a48801525160c4870152965160e486015295516101048501526101406101248501529294859390610164850190611304565b8381036023190161014485015290611304565b939192949550610141578401906080858303600319011261014157611c44848601611270565b946064810135926001600160401b038411610141576114069561173a94611c6c930101611887565b90604051958694602086015260018060a01b031660248501526044840152600160648401526080608484015260a48301906118e5565b94939195505060009083019260606003198286030112611d11576044810135916001600160401b038311611d0e57509261173a92611ce69261140696950101611887565b60405194859360208501526024840152600160448401526060606484015260848301906118e5565b80fd5b5080fdfea26469706673582212200659d5c4dee2c5a4388f0cadefd6678e42cc61b0e1f01b9264ad014b2e0c2da764736f6c63430008110033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b60003560e01c90816301ffc9a7146111a35750806303ee9f22146111765780630502b1c51461113d57806312aa3caf146110da57806314c376dc1461109f5780631e61130614611048578063438280dd1461100d578063485cc95514610dbd5780634dec53e014610d825780636a2f53c21461066357806371d0fb411461062857806374cc2bdd1461058a57806375071d2a1461054f57806375b238fc1461053357806384bd6d29146105075780638e5313e0146104cc578063943a0f1314610349578063dc97e84e1461030e578063e37c74a114610178578063e449022e146101465763e9c265181461010657600080fd5b346101415760003660031901126101415760206040517f3b5d4cc60d3ec3516ee8ae083bd60934f6eb2a6c54b1229985c41bfb092b26038152f35b600080fd5b34610141576060366003190112610141576044356001600160401b03811161014157610176903690600401611284565b005b3461014157608036600319011261014157600435610194611244565b90604435906001600160401b0390606435828111610141576101ba903690600401611409565b90604051946040860186811085821117610218576040526001865260005b6020908181101561022e57604051606092838201938285108986111761021857602094604052600083528183015260006040830152828a010152016101d8565b634e487b7160e01b600052604160045260246000fd5b836102ce846102a38b8b8a61024283611554565b5261024c82611554565b506001546040516001600160a01b039791881693600092916102b19161027182611329565b84825260209a8b99858b85015216604083015285606083015233608083015260a082015260405196879189830161158b565b03601f19810187528661135f565b604051637176836f60e11b8152968795869485936004850161165f565b03925af18015610302576102de57005b813d83116102fb575b6102f1818361135f565b8101031261014157005b503d6102e7565b6040513d6000823e3d90fd5b346101415760003660031901126101415760206040517f9a9aef7c1247d5fc769b0185c052913e39673da29a880317dfd20ebf86f26a498152f35b346101415760403660031901126101415761036261122e565b61036a611244565b9060018060a01b03908160005460101c16926040518094632474521560e21b82526000600483015233602483015281604460209788935afa9081156103025760009161049f575b501561048d5782169181166000526002835260406000208260018060a01b0319825416179055604051908382019263095ea7b360e01b84526024830152600019604483015260448252608082019282841060018060401b03851117610218576000809493819460405251925af1610426611524565b8161045d575b501561043457005b6064906040519062461bcd60e51b825260048201526002602482015261534160f01b6044820152fd5b80518015925083908315610475575b5050508261042c565b61048593508201810191016114f1565b82828161046c565b604051631886ea7d60e11b8152600490fd5b6104bf9150853d87116104c5575b6104b7818361135f565b8101906114f1565b856103b1565b503d6104ad565b346101415760003660031901126101415760206040517fe453bacb314e78dcd5192e6b1a2b1f0e7c76e92f6b7e429a6a90f04e39db3b768152f35b34610141576101003660031901126101415761052161122e565b5061052a611244565b5061017661125a565b3461014157600036600319011261014157602060405160008152f35b346101415760003660031901126101415760206040517f5719df9ef2c4678b547f89e4f5ae410dbf400fc51cf3ded434c55f6adea2c43f8152f35b34610141576080366003190112610141576004356105a6611244565b604435906064356001600160401b038111610141576102ce926105d06102a3923690600401611471565b6001546040516001600160a01b03979188169392600092916102b1916105f582611329565b6001825260209a8b99858b85015216604083015285606083015233608083015260a082015260405196879189830161158b565b346101415760003660031901126101415760206040517f880a91047114272656e533301261260c75e4d11543ac7303d6fe4204579ec7278152f35b346101415760803660031901126101415761067c61122e565b61068461125a565b906064356001600160401b038111610141576106a49036906004016112b4565b81019290602081850312610141578035906001600160401b038211610141570160c081850312610141576040519360c085016001600160401b0381118682101761021857604052813580151581036101415785526020820135602086015261070e60408301611270565b60408601526060820135606086015261072960808301611270565b608086015260a08201356001600160401b0381116101415761074b9201611471565b60a08401526001546001600160a01b03163303610d6a576001600160a01b0316308103610d5257506040516370a0823160e01b8152306004820152906020826024816001600160a01b0385165afa91821561030257600092610d1e575b50825115610cd0576040838101516001600160a01b039081166000908152600260205291909120541615610ca957604083810180516001600160a01b039081166000908152600260209081528482205493519451635136211760e01b8152948316600486015292849260249284929091165af190811561030257600091610c8a575b5015610c6357604080840180516001600160a01b03908116600090815260026020528381205492516060880151945163f3fef3a360e01b815297959491938893908116928492869284926108849290911660048401611509565b03925af193841561030257600094610b68575b5060a0820151519184519460005b8661ffff82161015610a8d576001600160a01b036108c761ffff831684611577565b5151169060206108db61ffff831685611577565b5101516001600160a01b03861683036108ff575b506108fa915061167b565b6108a5565b8689036109b4576109619060018060a01b0361092361ffff851660a0890151611577565b5151166000602061093c61ffff871660a08b0151611577565b51015160405180958192630f30898360e11b8352604060048401526044830190611304565b8560248301520381305afa918215610302576108fa956109899460009461098f575b506117bb565b886108ef565b6109ad9194503d806000833e6109a5818361135f565b8101906116a4565b928d610983565b94919790959660005b8861ffff82161015610a7c576001600160a01b036109df61ffff8a1687611577565b51511660018060a01b0360406109fd61ffff851660a08b0151611577565b5101511614610a1457610a0f9061167b565b6109bd565b95610a50919897929993966000602061093c61ffff60018060a01b03610a418c60a0848916910151611577565b515116941660a08b0151611577565b8560248301520381305afa918215610302576108fa95610a779460009461098f57506117bb565b610989565b5096959097506108fa919450610989565b505092915092505b6040516370a0823160e01b8152306004820152906020826024816001600160a01b0388165afa801561030257600090610b34575b610ad39250611702565b9160243591828410610b2257610b04610aef84610b1796611702565b6001549094906001600160a01b03168461170f565b608001516001600160a01b03169061170f565b602060405160018152f35b60405163510a529560e01b8152600490fd5b506020823d602011610b60575b81610b4e6020938361135f565b8101031261014157610ad39151610ac9565b3d9150610b41565b9093503d806000833e610b7b818361135f565b6020828281010312610141578151906001600160401b03821161014157808301601f838501011215610141578183015190610bb582611382565b93610bc3604051958661135f565b828552602085019382820160208560061b8385010101116101415793602085830101945b60208560061b82850101018610610c05575050505050509284610897565b604086858501031261014157604080519081018082116001600160401b0390911117610218576040818101905286516001600160a01b03811681036101415760209382859260409452828a0151838201528152019601959150610be7565b60408381015190516325eadd2560e01b81526001600160a01b039091166004820152602490fd5b610ca3915060203d6020116104c5576104b7818361135f565b8461082a565b6040838101519051637d250b0b60e11b81526001600160a01b039091166004820152602490fd5b6040830151606084015160a085015192949392610d19926001600160a01b039081169291610cfd90611554565b515116906020610d1060a0880151611554565b510151926117bb565b610a95565b9091506020813d602011610d4a575b81610d3a6020938361135f565b81010312610141575190836107a8565b3d9150610d2d565b60249060405190637d85130d60e11b82526004820152fd5b60405163e372835960e01b8152336004820152602490fd5b346101415760203660031901126101415760206001600160a01b0380610da661122e565b166000526002825260406000205416604051908152f35b3461014157604036600319011261014157610dd661122e565b610dde611244565b60005460ff8160081c161590818092611000575b8015610fe9575b15610f8d5760ff19811660011760005581610f7b575b506000549160ff8360081c1615610f225762010000600160b01b03601085901b1662010000600160b01b031984168117600055936001600160a01b03919082168015159081610ec5575b50610eb3571660018060a01b03196001541617600155610e7557005b610100600160b01b03191617600055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a1005b6040516384d942fd60e01b8152600490fd5b6040516301ffc9a760e01b8152637965db0b60e01b60048201529150602090829060249082905afa90811561030257600091610f04575b501586610e59565b610f1c915060203d81116104c5576104b7818361135f565b86610efc565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b61ffff19166101011760005583610e0f565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b158015610df95750600160ff821614610df9565b50600160ff821610610df2565b346101415760003660031901126101415760206040517f39f61ca2a1a28fee144218173ec637b649a353e4026b2738c673800e5bf1437b8152f35b34610141576040366003190112610141576004356001600160401b0381116101415761108761107e61109b9236906004016112b4565b60243591611919565b604051918291602083526020830190611304565b0390f35b346101415760003660031901126101415760206040517fe965846df3dd5b1dfa65f58e31477079e90140e0908b6dd31b5aead5a57cf3658152f35b3461014157610140366003190112610141576110f461122e565b5060e0366023190112610141576001600160401b0361010435818111610141576111229036906004016112b4565b505061012435908111610141576101769036906004016112b4565b346101415760803660031901126101415761115661122e565b506064356001600160401b03811161014157610176903690600401611284565b346101415760003660031901126101415760005460405160109190911c6001600160a01b03168152602090f35b346101415760203660031901126101415760043563ffffffff60e01b8116809103610141576000546301ffc9a760e01b835260048301919091526020908290602490829060101c6001600160a01b03165afa801561030257602091600091611211575b506040519015158152f35b6112289150823d81116104c5576104b7818361135f565b82611206565b600435906001600160a01b038216820361014157565b602435906001600160a01b038216820361014157565b604435906001600160a01b038216820361014157565b35906001600160a01b038216820361014157565b9181601f84011215610141578235916001600160401b038311610141576020808501948460051b01011161014157565b9181601f84011215610141578235916001600160401b038311610141576020838186019501011161014157565b60005b8381106112f45750506000910152565b81810151838201526020016112e4565b9060209161131d815180928185528580860191016112e1565b601f01601f1916010190565b60c081019081106001600160401b0382111761021857604052565b60e081019081106001600160401b0382111761021857604052565b601f909101601f19168101906001600160401b0382119082101761021857604052565b6001600160401b0381116102185760051b60200190565b6001600160401b03811161021857601f01601f191660200190565b9291926113c082611399565b916113ce604051938461135f565b829481845281830111610141578281602093846000960137010152565b9080601f8301121561014157816020611406933591016113b4565b90565b91909160608184031261014157604051906001600160401b03606083018181118482101761021857604052829461143f83611270565b8452602083013591821161014157826114616040949261146c948694016113eb565b602086015201611270565b910152565b9080601f830112156101415781359061148982611382565b92611497604051948561135f565b828452602092838086019160051b8301019280841161014157848301915b8483106114c55750505050505090565b82356001600160401b0381116101415786916114e684848094890101611409565b8152019201916114b5565b90816020910312610141575180151581036101415790565b6001600160a01b039091168152602081019190915260400190565b3d1561154f573d9061153582611399565b91611543604051938461135f565b82523d6000602084013e565b606090565b8051156115615760200190565b634e487b7160e01b600052603260045260246000fd5b80518210156115615760209160051b010190565b602080825260e0820190835115158184015280840151926040938482015260018060a01b039360a08582880151169660609788850152878101516080850152866080820151168285015201519560c08084015286518095526101009184838501938760051b8601019801966000945b87861061160d5750505050505050505090565b909192939495969798878060019260ff198582030189528c5190868251168152878781611645868601518d888701528d860190611304565b940151169101529b019601960194979695939291906115fa565b6114069392606092825260208201528160408201520190611304565b61ffff80911690811461168e5760010190565b634e487b7160e01b600052601160045260246000fd5b602081830312610141578051906001600160401b038211610141570181601f820112156101415780516116d681611399565b926116e4604051948561135f565b818452602082840101116101415761140691602080850191016112e1565b9190820391821161168e57565b600092918361173a6117488295604051928391602083019663a9059cbb60e01b885260248401611509565b03601f19810183528261135f565b51925af1611754611524565b8161178c575b501561176257565b60405162461bcd60e51b815260206004820152600260248201526114d560f21b6044820152606490fd5b80518015925082156117a1575b50503861175a565b6117b492506020809183010191016114f1565b3880611799565b92906040516117e08161173a602082019463095ea7b360e01b86528760248401611509565b600094859283809351925af16117f4611524565b81611858575b501561182e57829182602083519301915af1611814611524565b501561181c57565b604051635aa0560760e11b8152600490fd5b60405162461bcd60e51b8152602060048201526002602482015261534160f01b6044820152606490fd5b805180159250821561186d575b5050386117fa565b61188092506020809183010191016114f1565b3880611865565b81601f820112156101415780359161189e83611382565b926118ac604051948561135f565b808452602092838086019260051b820101928311610141578301905b8282106118d6575050505090565b813581529083019083016118c8565b90815180825260208080930193019160005b828110611905575050505090565b8351855293810193928101926001016118f7565b90600481811193846101415783356001600160e01b03191694637224811760e11b808714611ca25750630502b1c560e01b868114611c1e57506312aa3caf60e01b8614611a45576384bd6d2960e01b95861461197e57505050611406925036916113b4565b9392909193610141576101009083018390036003190112610141576119a4838301611270565b6119b060248401611270565b906119bd60448501611270565b9060405196602088015260018060a01b03928380921660248901521660448701521660648501526084840152600160a484015260a481013560c484015260c481013560e484015260e461010491013581840152825261014082019082821060018060401b03831117611a30575060405290565b604190634e487b7160e01b6000525260246000fd5b90929193945061014157830191838303916101406003198401126101415760e0611a70838701611270565b9360231901126101415760405190611a8782611344565b611a9360248701611270565b8252611aa160448701611270565b9560208301968752611ab560648201611270565b60408401908152611ac860848301611270565b6060850190815260a4830135608086015260c483013560a086015260e483013560c086019081526001600160401b039491610104850135868111610141578a89611b14928801016113eb565b94610124810135968711610141576114069a61173a99611c0b98611b399301016113eb565b96519a519351905191516040519b90946001600160a01b0393841693928316929081169116611b678d611344565b8c526020808d019182526040808e0193845260608e0194855260808e01958652600160a08f0190815260c08f0197885290516312aa3caf60e01b928101929092526001600160a01b039b8c1660248301529c518b16604482015290518a166064820152905189166084820152905190971660a48801525160c4870152965160e486015295516101048501526101406101248501529294859390610164850190611304565b8381036023190161014485015290611304565b939192949550610141578401906080858303600319011261014157611c44848601611270565b946064810135926001600160401b038411610141576114069561173a94611c6c930101611887565b90604051958694602086015260018060a01b031660248501526044840152600160648401526080608484015260a48301906118e5565b94939195505060009083019260606003198286030112611d11576044810135916001600160401b038311611d0e57509261173a92611ce69261140696950101611887565b60405194859360208501526024840152600160448401526060606484015260848301906118e5565b80fd5b5080fdfea26469706673582212200659d5c4dee2c5a4388f0cadefd6678e42cc61b0e1f01b9264ad014b2e0c2da764736f6c63430008110033",
  "devdoc": {
    "details": "See IArbitrageHelper interface for full details.",
    "kind": "dev",
    "methods": {
      "changeCalldataAmount(bytes,uint256)": {
        "params": {
          "data": "- calldata to edit",
          "newAmount": "- new amount that should replace amount in {data}"
        },
        "returns": {
          "_0": "edited calldata with new amount inside*"
        }
      },
      "stableunitFillOrderCallback(address,uint256,address,bytes)": {
        "details": "behaviour like in uniswapV3FlashCallback: https://docs.uniswap.org/contracts/v3/guides/flash-integrations/flash-callback and AAVE flash-loan callback: https://github.com/aave/aave-v3-core/blob/master/contracts/flashloan/interfaces/IFlashLoanSimpleReceiver.sol*"
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      },
      "swapLPWithFlashLoan(uint256,address,uint256,(address,bytes,address)[])": {
        "details": "Contract receive LP-token from exchange module, unwrap it and swap with 1inch all underline tokens to token that exchange module need.",
        "params": {
          "inchData": "- 1inch callData and contract array to swap every underline token of LP*",
          "orderId": "- Id of order in Exchange module to fill",
          "token2sell": "- Token in order to get as flash-loan",
          "token2sellAmount": "- Amount of token in order to get as flash-loan"
        }
      },
      "swapWithFlashLoan(uint256,address,uint256,(address,bytes,address))": {
        "details": "Contract receive loan from exchange module, sell it on 1inch and get profit = received amount - fee",
        "params": {
          "inchData": "- 1inch callData and contract to swap loan*",
          "orderId": "- Id of order in Exchange module to fill",
          "token2sell": "- Token in order to get as flash-loan",
          "token2sellAmount": "- Amount of token in order to get as flash-loan"
        }
      }
    },
    "title": "ArbitrageHelper",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "changeCalldataAmount(bytes,uint256)": {
        "notice": "Helper function to change amount parameter on callback that depends on return by 1inch API calldata for swap We set minAmount to 1 to be sure, that swap will be created. Route path don't depend on that - this path was calculated previously in backend part and is stored in {data}."
      },
      "stableunitFillOrderCallback(address,uint256,address,bytes)": {
        "notice": "This is callback function from Exchange contract. fillOrderAsFlashLoan call (msg.sender).executeOperation(...) after transferring loan to sender"
      },
      "swapLPWithFlashLoan(uint256,address,uint256,(address,bytes,address)[])": {
        "notice": "The same as swapWithFlashLoan, but loan is LP-token that we need to unwrap"
      },
      "swapWithFlashLoan(uint256,address,uint256,(address,bytes,address))": {
        "notice": "Reference implementation of Arbitrage bot contract, that use Exchange module to get profit"
      },
      "uniswapV3Swap(uint256,uint256,uint256[])": {
        "notice": "We need this functions to check their selector and functionSelector in calldata for changeCalldataAmount() function*"
      }
    },
    "notice": "Helper contract to arbitrage using Exchange module",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 672,
        "contract": "contracts/exchange/contracts/ArbitrageHelper.sol:ArbitrageHelper",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 675,
        "contract": "contracts/exchange/contracts/ArbitrageHelper.sol:ArbitrageHelper",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 33377,
        "contract": "contracts/exchange/contracts/ArbitrageHelper.sol:ArbitrageHelper",
        "label": "ACCESS_CONTROL_SINGLETON",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(ISuAccessControl)37440"
      },
      {
        "astId": 18132,
        "contract": "contracts/exchange/contracts/ArbitrageHelper.sol:ArbitrageHelper",
        "label": "EXCHANGE",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IExchange)20052"
      },
      {
        "astId": 18137,
        "contract": "contracts/exchange/contracts/ArbitrageHelper.sol:ArbitrageHelper",
        "label": "lpToAdapter",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_contract(ILPAdapter)37501)"
      },
      {
        "astId": 18646,
        "contract": "contracts/exchange/contracts/ArbitrageHelper.sol:ArbitrageHelper",
        "label": "__gap",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)45_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IExchange)20052": {
        "encoding": "inplace",
        "label": "contract IExchange",
        "numberOfBytes": "20"
      },
      "t_contract(ILPAdapter)37501": {
        "encoding": "inplace",
        "label": "contract ILPAdapter",
        "numberOfBytes": "20"
      },
      "t_contract(ISuAccessControl)37440": {
        "encoding": "inplace",
        "label": "contract ISuAccessControl",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_contract(ILPAdapter)37501)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract ILPAdapter)",
        "numberOfBytes": "32",
        "value": "t_contract(ILPAdapter)37501"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}