{
  "address": "0xbF777F01C792dE9362121d3e91F1b3a1403bC679",
  "abi": [
    {
      "inputs": [],
      "name": "AmountMustBeMoreThatMinimum",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BadAccessControlSingleton",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "available",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "requested",
          "type": "uint256"
        }
      ],
      "name": "InsufficientStake",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotStakerFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAdminError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAlerterError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyCDPAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyDAOError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyDisablerAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyLiquidationAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyMintAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyProxyActionsError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyRewardAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyRoleError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyVaultAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyVotingEscrowError",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACCESS_CONTROL_SINGLETON",
      "outputs": [
        {
          "internalType": "contract ISuAccessControl",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ALERTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CDP_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DAO_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DISABLER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIQUIDATION_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINT_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROXY_ACTIONS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARD_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VOTING_ESCROW_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minStakingAmount",
          "type": "uint256"
        }
      ],
      "name": "changeMinStakingAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newTopStakersCount",
          "type": "uint256"
        }
      ],
      "name": "changeTopStakersCount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_veToken",
          "type": "address"
        }
      ],
      "name": "changeVeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cleanExpiredTopStakers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStakersLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTopStakers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_authControl",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_veToken",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "isStaker",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "isTopStaker",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minStakingAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "prevDelegatee",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newDelegatee",
          "type": "address"
        }
      ],
      "name": "onDelegationChanged",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "subscribe",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "topStakersCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unsubscribe",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "veToken",
      "outputs": [
        {
          "internalType": "contract IVeToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "numDeployments": 5,
  "solcInputHash": "063b59c64b6b03a7efa7d47f22e02344",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AmountMustBeMoreThatMinimum\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BadAccessControlSingleton\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requested\",\"type\":\"uint256\"}],\"name\":\"InsufficientStake\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotStakerFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAdminError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAlerterError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyCDPAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyDAOError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyDisablerAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyLiquidationAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyMintAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyProxyActionsError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRewardAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRoleError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyVaultAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyVotingEscrowError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACCESS_CONTROL_SINGLETON\",\"outputs\":[{\"internalType\":\"contract ISuAccessControl\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ALERTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CDP_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAO_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DISABLER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDATION_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROXY_ACTIONS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VOTING_ESCROW_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minStakingAmount\",\"type\":\"uint256\"}],\"name\":\"changeMinStakingAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTopStakersCount\",\"type\":\"uint256\"}],\"name\":\"changeTopStakersCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_veToken\",\"type\":\"address\"}],\"name\":\"changeVeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cleanExpiredTopStakers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakersLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTopStakers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_authControl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_veToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isStaker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isTopStaker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minStakingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"prevDelegatee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newDelegatee\",\"type\":\"address\"}],\"name\":\"onDelegationChanged\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscribe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"topStakersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unsubscribe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veToken\",\"outputs\":[{\"internalType\":\"contract IVeToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"title\":\"TopStakers\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"changeTopStakersCount(uint256)\":{\"notice\":\"Admin function to change number of top stakers*\"},\"cleanExpiredTopStakers()\":{\"notice\":\"Sometimes topStakers can be expired (lock date is over), this function remove such topStakers*\"},\"getStakersLength()\":{\"notice\":\"Returns the amount of subscribed users (stakers list length)*\"},\"getTopStakers()\":{\"notice\":\"Returns the list of users that are topStakers*\"},\"isStaker(address)\":{\"notice\":\"Returns if user is staker with not expired stake*\"},\"isTopStaker(address)\":{\"notice\":\"Returns if user is top staker or not*\"},\"onDelegationChanged(address,address,address)\":{\"notice\":\"Callback that is calling by veToken after adding/removing delegation*\"},\"subscribe()\":{\"notice\":\"User function to add yourself in stakers list to be able to be topStaker for liquidation*\"},\"unsubscribe()\":{\"notice\":\"User function to remove yourself from stakers list*\"}},\"notice\":\"Contract that have functionality to work with Top Stakers. They need to have veToken and call subscribe to participate in this list.*\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/staking/contracts/TopStakers.sol\":\"TopStakers\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x1c65595a26548a1b2263315b08a56334a2d7087319814437559c3c96025e939f\",\"license\":\"MIT\"},\"contracts/libraries/SortedLinkedList.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary SortedLinkedList {\\n    struct Node {\\n        address key;\\n        uint value;\\n        address prev;\\n        address next;\\n    }\\n\\n    struct List {\\n        mapping(address => Node) nodes;\\n        address head;\\n        address tail;\\n        uint size;\\n    }\\n\\n    function insert(List storage self, address key, uint value) internal {\\n        require(key != address(0), \\\"Invalid address\\\");\\n\\n        if (self.size == 0) {\\n            self.head = key;\\n            self.tail = key;\\n            self.nodes[key] = Node({key: key, value: value, prev: address(0), next: address(0)});\\n        } else {\\n            address current = self.head;\\n            while (current != address(0) && self.nodes[current].value > value) {\\n                current = self.nodes[current].next;\\n            }\\n\\n            if (current == address(0)) {\\n                self.nodes[self.tail].next = key;\\n                self.nodes[key] = Node({key: key, value: value, prev: self.tail, next: address(0)});\\n                self.tail = key;\\n            } else {\\n                if (current == self.head) {\\n                    self.nodes[key] = Node({key: key, value: value, prev: address(0), next: self.head});\\n                    self.nodes[self.head].prev = key;\\n                    self.head = key;\\n                } else {\\n                    address prev = self.nodes[current].prev;\\n                    self.nodes[prev].next = key;\\n                    self.nodes[key] = Node({key: key, value: value, prev: prev, next: current});\\n                    self.nodes[current].prev = key;\\n                }\\n            }\\n        }\\n\\n        self.size++;\\n    }\\n\\n    function remove(List storage self, address key) internal {\\n        require(key != address(0), \\\"Invalid address\\\");\\n        require(self.size > 0, \\\"List is empty\\\");\\n\\n        Node memory node = self.nodes[key];\\n        if (node.prev != address(0)) {\\n            self.nodes[node.prev].next = node.next;\\n        } else {\\n            self.head = node.next;\\n        }\\n\\n        if (node.next != address(0)) {\\n            self.nodes[node.next].prev = node.prev;\\n        } else {\\n            self.tail = node.prev;\\n        }\\n\\n        delete self.nodes[key];\\n        self.size--;\\n    }\\n\\n    function getTop(List storage self, uint n) internal view returns (address[] memory) {\\n        require(n <= self.size, \\\"Requested more elements than available\\\");\\n\\n        address[] memory top = new address[](n);\\n        address current = self.head;\\n        for (uint i = 0; i < n; i++) {\\n            top[i] = current;\\n            current = self.nodes[current].next;\\n        }\\n\\n        return top;\\n    }\\n\\n    function exists(List storage self, address key) internal view returns (bool) {\\n        return self.nodes[key].key != address(0);\\n    }\\n}\",\"keccak256\":\"0x1a729136c0c5ee2417b3193b9c11eb8bf4e8d6071ae3664c67b059ae27acb12c\",\"license\":\"MIT\"},\"contracts/periphery/contracts/access-control/SuAccessRoles.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title SuAccessRoles Library\\n * @dev SuAuthenticated and SuAccessControlSingleton need to have this constants\\n * Hierarchy:\\n *      1. DAO - can give admins and system roles\\n *      2.1. Admin - can set Alerters\\n *      2.2. System - includes Minter, Liquidation, Reward and Disabler roles, don't have access to give some roles.\\n *      3. Alerter - can send alerts and trigger rate limits, don't have access to give some roles.\\n */\\nabstract contract SuAccessRoles {\\n    bytes32 public constant ADMIN_ROLE = 0x00;\\n\\n    bytes32 public constant DAO_ROLE = keccak256(\\\"DAO_ROLE\\\");\\n\\n    bytes32 public constant ALERTER_ROLE = keccak256(\\\"ALERTER_ROLE\\\");\\n\\n    // system roles\\n    bytes32 public constant MINT_ACCESS_ROLE = keccak256(\\\"MINT_ACCESS_ROLE\\\");\\n    bytes32 public constant LIQUIDATION_ACCESS_ROLE = keccak256(\\\"LIQUIDATION_ACCESS_ROLE\\\");\\n    bytes32 public constant REWARD_ACCESS_ROLE = keccak256(\\\"REWARD_ACCESS_ROLE\\\");\\n    // bytes32 public constant SYSTEM_ROLE = keccak256(\\\"SYSTEM_ROLE\\\");\\n    bytes32 public constant DISABLER_ROLE = keccak256(\\\"DISABLER_ROLE\\\");\\n    bytes32 public constant CDP_ACCESS_ROLE = keccak256(\\\"CDP_ACCESS_ROLE\\\");\\n    bytes32 public constant VOTING_ESCROW_ROLE = keccak256(\\\"VOTING_ESCROW_ROLE\\\");\\n    bytes32 public constant PROXY_ACTIONS_ROLE = keccak256(\\\"PROXY_ACTIONS_ROLE\\\");\\n}\\n\",\"keccak256\":\"0x76c6b55446c0e7b40405cd0b642650c64a842e5dd71d5c5307f0b2def8898a1b\",\"license\":\"BSL 1.1\"},\"contracts/periphery/contracts/access-control/SuAuthenticated.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/access-control/ISuAccessControl.sol\\\";\\nimport \\\"./SuAccessRoles.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @title SuAuthenticated\\n * @dev other contracts should inherit to be authenticated.\\n * The address of SuAccessControlSingleton should be one for all contract that inherits SuAuthenticated\\n */\\nabstract contract SuAuthenticated is Initializable, SuAccessRoles, IERC165Upgradeable {\\n    ISuAccessControl public ACCESS_CONTROL_SINGLETON;\\n\\n    error OnlyDAOError();\\n    error OnlyAdminError();\\n    error OnlyAlerterError();\\n    error OnlyVaultAccessError();\\n    error OnlyLiquidationAccessError();\\n    error OnlyMintAccessError();\\n    error OnlyRewardAccessError();\\n    error OnlyDisablerAccessError();\\n    error OnlyVotingEscrowError();\\n    error OnlyProxyActionsError();\\n    error OnlyRoleError();\\n    error OnlyCDPAccessError();\\n    error BadAccessControlSingleton();\\n\\n    /**\\n     * @dev should be passed in constructor\\n     */\\n    function __suAuthenticatedInit(address _accessControlSingleton) internal onlyInitializing {\\n        ACCESS_CONTROL_SINGLETON = ISuAccessControl(_accessControlSingleton);\\n        if (\\n            _accessControlSingleton == address(0) ||\\n            !ISuAccessControl(_accessControlSingleton).supportsInterface(type(IAccessControlUpgradeable).interfaceId)\\n        ) revert BadAccessControlSingleton();\\n    }\\n\\n    /** CORE ROLES */\\n\\n    modifier onlyDAO() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(DAO_ROLE, msg.sender)) revert OnlyDAOError();\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(ADMIN_ROLE, msg.sender)) revert OnlyAdminError();\\n        _;\\n    }\\n\\n    modifier onlyAlerter() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(ALERTER_ROLE, msg.sender)) revert OnlyAlerterError();\\n        _;\\n    }\\n\\n    /** SYSTEM ROLES */\\n\\n    modifier onlyLiquidationAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(LIQUIDATION_ACCESS_ROLE, msg.sender)) revert OnlyLiquidationAccessError();\\n        _;\\n    }\\n\\n    modifier onlyMintAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(MINT_ACCESS_ROLE, msg.sender)) revert OnlyMintAccessError();\\n        _;\\n    }\\n\\n    modifier onlyRewardAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(REWARD_ACCESS_ROLE, msg.sender)) revert OnlyRewardAccessError();\\n        _;\\n    }\\n\\n    modifier onlyRewardOrAdminAccess() {\\n        if (\\n            !ACCESS_CONTROL_SINGLETON.hasRole(REWARD_ACCESS_ROLE, msg.sender) &&\\n            !ACCESS_CONTROL_SINGLETON.hasRole(ADMIN_ROLE, msg.sender)\\n        ) revert OnlyRewardAccessError();\\n        _;\\n    }\\n\\n    // @notice This modifier check if user/contract have access to \\\"disable\\\" contracts.\\n    // All main contracts in our lending protocol have disableContract() method that stops contracts main functions.\\n    modifier onlyDisablerAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(DISABLER_ROLE, msg.sender)) revert OnlyDisablerAccessError();\\n        _;\\n    }\\n\\n    modifier onlyCDPAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(CDP_ACCESS_ROLE, msg.sender)) revert OnlyCDPAccessError();\\n        _;\\n    }\\n\\n    modifier onlyVotingEscrow() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(VOTING_ESCROW_ROLE, msg.sender)) revert OnlyVotingEscrowError();\\n        _;\\n    }\\n\\n    modifier onlyProxyActions() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(PROXY_ACTIONS_ROLE, msg.sender)) revert OnlyProxyActionsError();\\n        _;\\n    }\\n\\n    // syntax sugar under ACCESS_CONTROL_SINGLETON\\n    modifier onlyRole(bytes32 role) {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(role, msg.sender)) revert OnlyRoleError();\\n        _;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return ACCESS_CONTROL_SINGLETON.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x786a8dde3d350dde2a6dd004cbb0a4d2885a8237f01c6312b45bfcca0a3c551d\",\"license\":\"BSL 1.1\"},\"contracts/periphery/contracts/interfaces/access-control/ISuAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\nimport \\\"../../access-control/SuAccessRoles.sol\\\";\\n\\n/**\\n * @notice Access control for contracts\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n **/\\ninterface ISuAccessControl is IAccessControlUpgradeable, IERC165Upgradeable {\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\\n}\\n\",\"keccak256\":\"0x25724ac502fd6418ccd38273b276de4b2fdecd023d723c5d80c9f0a27c407bcd\",\"license\":\"MIT\"},\"contracts/staking/contracts/TopStakers.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../interfaces/ITopStakers.sol\\\";\\nimport \\\"../../periphery/contracts/access-control/SuAuthenticated.sol\\\";\\nimport \\\"../../libraries/SortedLinkedList.sol\\\";\\n\\nstruct LockedBalance {\\n    int128 amount;\\n    int128 delegated;\\n    uint256 end;\\n    address delegatee;\\n}\\n\\ninterface IVeToken {\\n    function balanceOf(address _owner) external view returns (uint256);\\n    function locked(address user) external view returns (LockedBalance memory);\\n}\\n\\n/**\\n  * @title TopStakers\\n  * @notice Contract that have functionality to work with Top Stakers.\\n  * They need to have veToken and call subscribe to participate in this list.\\n **/\\ncontract TopStakers is SuAuthenticated, ITopStakers {\\n    // TODO: REMOVE THIS UNAUDITED DEPENDENCY BEFORE PRODUCTION USE\\n    using SortedLinkedList for SortedLinkedList.List;\\n    SortedLinkedList.List private stakers;\\n\\n    uint256 public topStakersCount; // Max number of stakers we want to store on the top\\n    uint256 public minStakingAmount; // minimal amount of staked token to be able to subscribe in the list\\n    IVeToken public veToken; // Address(interface) of vested escrow token\\n\\n    function initialize(address _authControl, address _veToken) public initializer {\\n        __suAuthenticatedInit(_authControl);\\n        veToken = IVeToken(_veToken);\\n        topStakersCount = 21;\\n        minStakingAmount = 0;\\n    }\\n\\n    function changeTopStakersCount(uint256 newTopStakersCount) external onlyAdmin {\\n        topStakersCount = newTopStakersCount;\\n    }\\n\\n    function changeVeToken(address _veToken) external onlyAdmin {\\n        veToken = IVeToken(_veToken);\\n    }\\n\\n    function changeMinStakingAmount(uint256 _minStakingAmount) external onlyAdmin {\\n        minStakingAmount = _minStakingAmount;\\n    }\\n\\n    function subscribe() external {\\n        uint256 amount = veToken.balanceOf(msg.sender);\\n        if (amount <= minStakingAmount) revert AmountMustBeMoreThatMinimum();\\n\\n        if (stakers.exists(msg.sender)) {\\n            stakers.remove(msg.sender);\\n        }\\n\\n        stakers.insert(msg.sender, amount);\\n    }\\n\\n    function _unsubscribe(address user) internal {\\n        if (!stakers.exists(user)) revert NotStakerFound();\\n        stakers.remove(user);\\n    }\\n\\n    function unsubscribe() external {\\n        _unsubscribe(msg.sender);\\n    }\\n\\n    // We can update later with while(all topStakersCount are not expired) fund expired topStaker\\n    // Also we should check if the amount was changed in case of delegate\\n    function cleanExpiredTopStakers() external {\\n        uint count = 0;\\n        address current = stakers.head;\\n        while (current != address(0) && count < topStakersCount) {\\n            address staker = current;\\n            bool isExpired = veToken.locked(staker).end < block.timestamp;\\n\\n            current = stakers.nodes[staker].next;\\n\\n            if (isExpired) {\\n                _unsubscribe(staker);\\n            }\\n\\n            count++;\\n        }\\n    }\\n\\n    function onDelegationChanged(address user, address prevDelegatee, address newDelegatee) external onlyVotingEscrow {\\n        _updateStakerPosition(user);\\n        // Handle the previous delegatee if it's different from the user and new delegatee\\n        if (prevDelegatee != user && prevDelegatee != newDelegatee) {\\n            _updateStakerPosition(prevDelegatee);\\n        }\\n        // Handle the new delegatee if it's different from the user\\n        if (newDelegatee != user) {\\n            _updateStakerPosition(newDelegatee);\\n        }\\n    }\\n\\n    function _updateStakerPosition(address account) internal {\\n        LockedBalance memory locked = veToken.locked(account);\\n        uint256 amount = uint256(uint128(locked.amount));\\n\\n        if (stakers.exists(account)) {\\n            stakers.remove(account);\\n        }\\n\\n        // If is not delegating and has enough amount to be a staker\\n        if (locked.delegatee == account && amount > minStakingAmount) {\\n            stakers.insert(account, amount);\\n        }\\n    }\\n\\n    /* ==================== VIEW METHODS ==================== */\\n\\n    function isStaker(address user) public view returns (bool) {\\n        bool isExpired = veToken.locked(user).end < block.timestamp;\\n\\n        return !isExpired && stakers.exists(user);\\n    }\\n\\n    function isTopStaker(address staker) public view returns (bool) {\\n        if (stakers.exists(staker)) {\\n            // Check if it's a direct top staker\\n            uint count = 0;\\n            address current = stakers.head;\\n            while (current != address(0) && count < topStakersCount) {\\n                if (current == staker) {\\n                    return true;\\n                }\\n                current = stakers.nodes[current].next;\\n                count++;\\n            }\\n        }\\n\\n        // If not a direct top staker, check if it's delegated to by a top staker\\n        address current = stakers.head;\\n        uint count = 0;\\n        while (current != address(0) && count < topStakersCount) {\\n            if (veToken.locked(current).delegatee == staker) {\\n                return true;\\n            }\\n            current = stakers.nodes[current].next;\\n            count++;\\n        }\\n\\n        return false;\\n    }\\n\\n    function getTopStakers() public view returns (address[] memory) {\\n        uint256 n = topStakersCount > stakers.size ? stakers.size : topStakersCount;\\n        return stakers.getTop(n);\\n    }\\n\\n    function getStakersLength() public view returns (uint256) {\\n        return stakers.size;\\n    }\\n}\\n\",\"keccak256\":\"0x67b115d4b4a5479f554c695f957d986c446ceeceabcebdf20d0f73fdb629f54f\",\"license\":\"BSL 1.1\"},\"contracts/staking/interfaces/ITopStakers.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\npragma solidity ^0.8.0;\\n\\ninterface ITopStakers {\\n    /* ===================== ERRORS ===================== */\\n    error NotStakerFound();\\n    error AmountMustBeMoreThatMinimum();\\n    error InsufficientStake(uint256 available, uint256 requested);\\n\\n    /* ========================= VARS ========================== */\\n\\n    function topStakersCount() external view returns(uint256);\\n\\n    /* ==================== MUTABLE METHODS ==================== */\\n\\n    /**\\n      * @notice Admin function to change number of top stakers\\n     **/\\n    function changeTopStakersCount(uint256 newTopStakersCount) external;\\n\\n    /**\\n      * @notice Admin function to change veToken address\\n     **/\\n    function changeVeToken(address veToken) external;\\n\\n    /**\\n      * @notice Admin function to change minStakingAmount\\n     **/\\n    function changeMinStakingAmount(uint256 minStakingAmount) external;\\n\\n    /**\\n      * @notice User function to add yourself in stakers list to be able to be topStaker for liquidation\\n     **/\\n    function subscribe() external;\\n\\n    /**\\n      * @notice User function to remove yourself from stakers list\\n     **/\\n    function unsubscribe() external;\\n\\n    /**\\n      * @notice Sometimes topStakers can be expired (lock date is over), this function remove such topStakers\\n     **/\\n    function cleanExpiredTopStakers() external;\\n\\n    /**\\n      * @notice Callback that is calling by veToken after adding/removing delegation\\n     **/\\n    function onDelegationChanged(address user, address prevDelegatee, address newDelegatee) external;\\n\\n    /* ==================== VIEW METHODS ==================== */\\n\\n    /**\\n      * @notice Returns if user is top staker or not\\n     **/\\n    function isTopStaker(address staker) external view returns(bool);\\n\\n\\n    /**\\n      * @notice Returns if user is staker with not expired stake\\n     **/\\n    function isStaker(address user) external view returns(bool);\\n\\n    /**\\n      * @notice Returns the list of users that are topStakers\\n     **/\\n    function getTopStakers() external view returns(address[] memory);\\n\\n    /**\\n      * @notice Returns the amount of subscribed users (stakers list length)\\n     **/\\n    function getStakersLength() external view returns(uint256);\\n}\",\"keccak256\":\"0x08d0472df25faa8e9cec77e7f25fa937825df73ffde12474bc17be66a6501fdc\",\"license\":\"BSL 1.1\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657611685908161001c8239f35b600080fdfe60806040908082526004918236101561001757600080fd5b600092833560e01c92836301ffc9a714610d6f5750826303287e6814610d4057826303ee9f2214610d1457826325c065b114610cf55782633841c5bf14610c565782633b92eb2314610c2d5782634375995d14610bad578263438280dd14610b72578263485cc955146109115782634a390d151461087a5782636f1e8533146107c95782636f7fc6dc146107aa57826370bb9a251461065457826371d0fb411461061957826375b238fc146105fe5782638e5313e0146105c35782638f449a05146104f25782639fabeb00146104d3578263b38234f314610498578263b757b75b14610377578263bd5f5be61461033c578263d0e8fa8214610313578263d16538621461022457508163d2351cee146101e9578163dc97e84e146101ae578163e9c265181461016f575063fcae44841461015057600080fd5b3461016c578060031936011261016c576101693361136b565b80f35b80fd5b9050346101aa57816003193601126101aa57602090517f3b5d4cc60d3ec3516ee8ae083bd60934f6eb2a6c54b1229985c41bfb092b26038152f35b5080fd5b9050346101aa57816003193601126101aa57602090517f9a9aef7c1247d5fc769b0185c052913e39673da29a880317dfd20ebf86f26a498152f35b9050346101aa57816003193601126101aa57602090517fb0fdd1623e42dbffda4acd8bd643e1cb69f00f0e83abeaa8150ee42cf0fd105e8152f35b9091503461030f578260031936011261030f576002546001600160a01b0390811690845b8183169283151580610304575b1561030057908260075416918651809363cbf9fe5f60e01b8252868883015281602460809687935afa9081156102f6576102b5948a926102c9575b50508742910151109488526001602052836003888a20015416946102ba575b50610ef8565b610248565b6102c39061136b565b386102af565b6102e89250803d106102ef575b6102e08183610e65565b8101906113ae565b3880610290565b503d6102d6565b88513d8b823e3d90fd5b8680f35b506005548210610255565b8280fd5b8382346101aa57816003193601126101aa57602090516000805160206116308339815191528152f35b8382346101aa57816003193601126101aa57602090517f4f14c8366fa999817edc9f29824eb88a00cc31225e2156f399da4bc91049eb108152f35b9091503461030f57606036600319011261030f57610393610e03565b9161039c610e1e565b604435936001600160a01b0393848616938487036104945760446020878a5460101c16835192838092632474521560e21b8252600080516020611630833981519152888301523360248301525afa90811561048a57899161045c575b501561044f5750508061040b8592611408565b1692811682848214159182610444575b5050610435575b500361042c575080f35b61016990611408565b61043e90611408565b38610422565b14159050823861041b565b51631f4ead2d60e01b8152fd5b61047d915060203d8111610483575b6104758183610e65565b810190610e88565b386103f8565b503d61046b565b82513d8b823e3d90fd5b8780fd5b8382346101aa57816003193601126101aa57602090517fd83f5343da19b478b15a140c301a868be9e02603958f38fbd822b9d5c0a289168152f35b9091503461030f578260031936011261030f5760209250549051908152f35b8382346101aa57816003193601126101aa5760075481516370a0823160e01b81523385820152916001600160a01b03916020908490602490829086165afa9283156105b9578493610582575b506006548311156105735750906101699161055833610ede565b5416610565575b33610f1d565b61056e33611205565b61055f565b51632891f68760e21b81528490fd5b9092506020813d82116105b1575b8161059d60209383610e65565b810103126105ad5751918561053e565b8380fd5b3d9150610590565b81513d86823e3d90fd5b8382346101aa57816003193601126101aa57602090517fe453bacb314e78dcd5192e6b1a2b1f0e7c76e92f6b7e429a6a90f04e39db3b768152f35b8382346101aa57816003193601126101aa5751908152602090f35b8382346101aa57816003193601126101aa57602090517f880a91047114272656e533301261260c75e4d11543ac7303d6fe4204579ec7278152f35b9091503461030f578260031936011261030f5760059283548254908181116000146107a45750805b81116107525761068b81611618565b9061069885519283610e65565b8082526106a481611618565b9360209182840195601f19013687376002546001600160a01b039886918a165b8383106107065750505050508451948186019282875251809352850193925b8281106106f05785850386f35b83518716855293810193928101926001016106e3565b869795965183101561073f578a600361072c838361073595168b8d89891b010152610ede565b01541692610ef8565b91969594966106c4565b634e487b7160e01b865260328552602486fd5b835162461bcd60e51b8152602081850152602660248201527f526571756573746564206d6f726520656c656d656e7473207468616e20617661604482015265696c61626c6560d01b6064820152608490fd5b9061067c565b8382346101aa57816003193601126101aa576020906005549051908152f35b91503461030f57602036600319011261030f576107e4610e03565b9160018060a01b03906080826007541691602485518094819363cbf9fe5f60e01b8352878a16908301525afa9081156108705790839160209691610852575b500151421115928361083a575b5050519015158152f35b61084691929350610ede565b54161515903880610830565b61086a915060803d81116102ef576102e08183610e65565b38610823565b83513d87823e3d90fd5b91503461030f57602036600319011261030f5782548151632474521560e21b8152838101859052336024820152906020908290604490829060101c6001600160a01b03165afa9081156109075784916108e9575b50156108dc57503560055580f35b51631886ea7d60e11b8152fd5b610901915060203d8111610483576104758183610e65565b386108ce565b82513d86823e3d90fd5b9091503461030f578160031936011261030f5761092c610e03565b91610935610e1e565b9184549060ff8260081c161591828093610b65575b8015610b4e575b15610af45760ff198116600117875582610ae3575b5085549360ff8560081c1615610a8c5762010000600160b01b03601087901b1662010000600160b01b0319861681178855956001600160a01b03929083168015908115610a28575b50610a1a57501660018060a01b031960075416176007556015600555846006556109d6578380f35b610100600160b01b0319909116909117825551600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a13880808380f35b84516384d942fd60e01b8152fd5b86516301ffc9a760e01b8152637965db0b60e01b848201529150602090829060249082905afa908115610a82578991610a64575b5015386109ae565b610a7c915060203d8111610483576104758183610e65565b38610a5c565b86513d8b823e3d90fd5b835162461bcd60e51b8152602081840152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b61ffff191661010117865538610966565b835162461bcd60e51b8152602081840152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b1580156109515750600160ff821614610951565b50600160ff82161061094a565b8382346101aa57816003193601126101aa57602090517f39f61ca2a1a28fee144218173ec637b649a353e4026b2738c673800e5bf1437b8152f35b91503461030f57602036600319011261030f5782548151632474521560e21b8152838101859052336024820152906020908290604490829060101c6001600160a01b03165afa908115610907578491610c0f575b50156108dc57503560065580f35b610c27915060203d8111610483576104758183610e65565b38610c01565b8382346101aa57816003193601126101aa5760075490516001600160a01b039091168152602090f35b9091503461030f57602036600319011261030f57610c72610e03565b9060018060a01b03926044602085875460101c16835192838092632474521560e21b82528a888301523360248301525afa908115610ceb578691610ccd575b50156108dc5750501660018060a01b0319600754161760075580f35b610ce5915060203d8111610483576104758183610e65565b38610cb1565b82513d88823e3d90fd5b8382346101aa57816003193601126101aa576020906006549051908152f35b8382346101aa57816003193601126101aa579054905160109190911c6001600160a01b03168152602090f35b8382346101aa5760203660031901126101aa57602090610d66610d61610e03565b6114ca565b90519015158152f35b9250346105ad5760203660031901126105ad57803563ffffffff60e01b8116809103610dff5784546301ffc9a760e01b8552918401526020908390602490829060101c6001600160a01b03165afa918215610df55760209392610dd6575b50519015158152f35b610dee919250833d8111610483576104758183610e65565b9038610dcd565b81513d85823e3d90fd5b8480fd5b600435906001600160a01b0382168203610e1957565b600080fd5b602435906001600160a01b0382168203610e1957565b608081019081106001600160401b03821117610e4f57604052565b634e487b7160e01b600052604160045260246000fd5b601f909101601f19168101906001600160401b03821190821017610e4f57604052565b90816020910312610e1957518015158103610e195790565b15610ea757565b60405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b6044820152606490fd5b6001600160a01b0316600090815260016020526040902090565b6000198114610f075760010190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b039081169190610f35831515610ea0565b600454610fcb57600360018060a01b03199284846002541617600255848483541617825560405190610f6682610e34565b8582526020820190815260408201906000825260608301966000885260005260016020528460406000209351168684541617835551600183015583600283019151168582541617905501925116908254161790555b610fc6600454610ef8565b600455565b9160029391938381541694855b85811690811515806111ec575b1561100457506003604087926000908152600160205220015416610fd8565b869150969192939496169081156000146110b057505060039380855416600052600160205284806040600020019360018060a01b031994868682541617905582825416836040519261105584610e34565b8884526020840196875260408401928352606084019660008852896000526001602052826040600020955116898654161785555160018501558301915116868254161790550191511682825416179055825416179055610fbb565b9294919281036111495750808454168160036040516110ce81610e34565b868152602081019586526040810160008152606082019485528760005260016020528360406000209251169660018060a01b0319978884541617835551600183015583898301915116878254161790550191511683825416179055835416600052826040600020018282825416179055825416179055610fbb565b6000818152600160205260408082208701548416808352818320600390810180546001600160a01b03199081168a17909155835190999793969495949261118f82610e34565b8982526020820194855287820190815260608201948686528a88526001602052848989209351168c845416178355516001830155838983019151168b82541617905501915116878254161790558152200191825416179055610fbb565b5082600083815260406001918260205220015411610fe5565b6001600160a01b039081169061121c821515610ea0565b60045415611336576003600092838093828252600192836020526040918284209080845161124981610e34565b83548216815287840154602082015260028401548216868201818152948a0154831660609092018281529190801561131c57885260208990528688208a0180546001600160a01b03191690911790555b51169182156113045751918552602086905283852060020180546001600160a01b031916919092161790555b82528260205281209181835582015582600282015501556004549081156112f0575060001901600455565b634e487b7160e01b81526011600452602490fd5b5187546001600160a01b0319169116178655506112c5565b50600280546001600160a01b031916919091179055611299565b60405162461bcd60e51b815260206004820152600d60248201526c4c69737420697320656d70747960981b6044820152606490fd5b6001600160a01b0361137c82610ede565b54161561138e5761138c90611205565b565b6040516306fceae360e01b8152600490fd5b519081600f0b8203610e1957565b90816080910312610e19576060604051916113c883610e34565b6113d1816113a0565b83526113df602082016113a0565b60208401526040818101519084015201516001600160a01b0381168103610e1957606082015290565b60075460405163cbf9fe5f60e01b81526001600160a01b038381166004830181905291926080908490602490829085165afa9283156114be5760009361149e575b5082516001600160801b0316926060908261146387610ede565b5416611490575b0151161480611485575b61147c575050565b61138c91610f1d565b506006548111611474565b61149986611205565b61146a565b6114b791935060803d81116102ef576102e08183610e65565b9138611449565b6040513d6000823e3d90fd5b906001600160a01b03806114dd84610ede565b54166115b3575b806002541692600092828060075416955b16801515806115a8575b1561159d57604090815163cbf9fe5f60e01b815281600482015260809081816024818c5afa91821561159257916060918893600092611575575b50500151168585161461156957846003819361156393600052600160205260002001541695610ef8565b946114f5565b50509350505050600190565b61158b9250803d106102ef576102e08183610e65565b3880611539565b84513d6000823e3d90fd5b509350505050600090565b5060055485106114ff565b60009283928280600254165b168015158061160d575b156116035783831681146115f85785526001602052826115f28160036040892001541695610ef8565b946115bf565b509350505050600190565b50925092506114e4565b5060055485106115c9565b6001600160401b038111610e4f5760051b6020019056fe76d0567582f23e1e9d7a13eeba60f9aea9d69b8da87ca27a8bf3698b35c653dba26469706673582212203f5b6f1943a776cc7dbfd08c566ca67e5b6089a9300e26d07a714123cfa8e21764736f6c63430008110033",
  "deployedBytecode": "0x60806040908082526004918236101561001757600080fd5b600092833560e01c92836301ffc9a714610d6f5750826303287e6814610d4057826303ee9f2214610d1457826325c065b114610cf55782633841c5bf14610c565782633b92eb2314610c2d5782634375995d14610bad578263438280dd14610b72578263485cc955146109115782634a390d151461087a5782636f1e8533146107c95782636f7fc6dc146107aa57826370bb9a251461065457826371d0fb411461061957826375b238fc146105fe5782638e5313e0146105c35782638f449a05146104f25782639fabeb00146104d3578263b38234f314610498578263b757b75b14610377578263bd5f5be61461033c578263d0e8fa8214610313578263d16538621461022457508163d2351cee146101e9578163dc97e84e146101ae578163e9c265181461016f575063fcae44841461015057600080fd5b3461016c578060031936011261016c576101693361136b565b80f35b80fd5b9050346101aa57816003193601126101aa57602090517f3b5d4cc60d3ec3516ee8ae083bd60934f6eb2a6c54b1229985c41bfb092b26038152f35b5080fd5b9050346101aa57816003193601126101aa57602090517f9a9aef7c1247d5fc769b0185c052913e39673da29a880317dfd20ebf86f26a498152f35b9050346101aa57816003193601126101aa57602090517fb0fdd1623e42dbffda4acd8bd643e1cb69f00f0e83abeaa8150ee42cf0fd105e8152f35b9091503461030f578260031936011261030f576002546001600160a01b0390811690845b8183169283151580610304575b1561030057908260075416918651809363cbf9fe5f60e01b8252868883015281602460809687935afa9081156102f6576102b5948a926102c9575b50508742910151109488526001602052836003888a20015416946102ba575b50610ef8565b610248565b6102c39061136b565b386102af565b6102e89250803d106102ef575b6102e08183610e65565b8101906113ae565b3880610290565b503d6102d6565b88513d8b823e3d90fd5b8680f35b506005548210610255565b8280fd5b8382346101aa57816003193601126101aa57602090516000805160206116308339815191528152f35b8382346101aa57816003193601126101aa57602090517f4f14c8366fa999817edc9f29824eb88a00cc31225e2156f399da4bc91049eb108152f35b9091503461030f57606036600319011261030f57610393610e03565b9161039c610e1e565b604435936001600160a01b0393848616938487036104945760446020878a5460101c16835192838092632474521560e21b8252600080516020611630833981519152888301523360248301525afa90811561048a57899161045c575b501561044f5750508061040b8592611408565b1692811682848214159182610444575b5050610435575b500361042c575080f35b61016990611408565b61043e90611408565b38610422565b14159050823861041b565b51631f4ead2d60e01b8152fd5b61047d915060203d8111610483575b6104758183610e65565b810190610e88565b386103f8565b503d61046b565b82513d8b823e3d90fd5b8780fd5b8382346101aa57816003193601126101aa57602090517fd83f5343da19b478b15a140c301a868be9e02603958f38fbd822b9d5c0a289168152f35b9091503461030f578260031936011261030f5760209250549051908152f35b8382346101aa57816003193601126101aa5760075481516370a0823160e01b81523385820152916001600160a01b03916020908490602490829086165afa9283156105b9578493610582575b506006548311156105735750906101699161055833610ede565b5416610565575b33610f1d565b61056e33611205565b61055f565b51632891f68760e21b81528490fd5b9092506020813d82116105b1575b8161059d60209383610e65565b810103126105ad5751918561053e565b8380fd5b3d9150610590565b81513d86823e3d90fd5b8382346101aa57816003193601126101aa57602090517fe453bacb314e78dcd5192e6b1a2b1f0e7c76e92f6b7e429a6a90f04e39db3b768152f35b8382346101aa57816003193601126101aa5751908152602090f35b8382346101aa57816003193601126101aa57602090517f880a91047114272656e533301261260c75e4d11543ac7303d6fe4204579ec7278152f35b9091503461030f578260031936011261030f5760059283548254908181116000146107a45750805b81116107525761068b81611618565b9061069885519283610e65565b8082526106a481611618565b9360209182840195601f19013687376002546001600160a01b039886918a165b8383106107065750505050508451948186019282875251809352850193925b8281106106f05785850386f35b83518716855293810193928101926001016106e3565b869795965183101561073f578a600361072c838361073595168b8d89891b010152610ede565b01541692610ef8565b91969594966106c4565b634e487b7160e01b865260328552602486fd5b835162461bcd60e51b8152602081850152602660248201527f526571756573746564206d6f726520656c656d656e7473207468616e20617661604482015265696c61626c6560d01b6064820152608490fd5b9061067c565b8382346101aa57816003193601126101aa576020906005549051908152f35b91503461030f57602036600319011261030f576107e4610e03565b9160018060a01b03906080826007541691602485518094819363cbf9fe5f60e01b8352878a16908301525afa9081156108705790839160209691610852575b500151421115928361083a575b5050519015158152f35b61084691929350610ede565b54161515903880610830565b61086a915060803d81116102ef576102e08183610e65565b38610823565b83513d87823e3d90fd5b91503461030f57602036600319011261030f5782548151632474521560e21b8152838101859052336024820152906020908290604490829060101c6001600160a01b03165afa9081156109075784916108e9575b50156108dc57503560055580f35b51631886ea7d60e11b8152fd5b610901915060203d8111610483576104758183610e65565b386108ce565b82513d86823e3d90fd5b9091503461030f578160031936011261030f5761092c610e03565b91610935610e1e565b9184549060ff8260081c161591828093610b65575b8015610b4e575b15610af45760ff198116600117875582610ae3575b5085549360ff8560081c1615610a8c5762010000600160b01b03601087901b1662010000600160b01b0319861681178855956001600160a01b03929083168015908115610a28575b50610a1a57501660018060a01b031960075416176007556015600555846006556109d6578380f35b610100600160b01b0319909116909117825551600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a13880808380f35b84516384d942fd60e01b8152fd5b86516301ffc9a760e01b8152637965db0b60e01b848201529150602090829060249082905afa908115610a82578991610a64575b5015386109ae565b610a7c915060203d8111610483576104758183610e65565b38610a5c565b86513d8b823e3d90fd5b835162461bcd60e51b8152602081840152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b61ffff191661010117865538610966565b835162461bcd60e51b8152602081840152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b1580156109515750600160ff821614610951565b50600160ff82161061094a565b8382346101aa57816003193601126101aa57602090517f39f61ca2a1a28fee144218173ec637b649a353e4026b2738c673800e5bf1437b8152f35b91503461030f57602036600319011261030f5782548151632474521560e21b8152838101859052336024820152906020908290604490829060101c6001600160a01b03165afa908115610907578491610c0f575b50156108dc57503560065580f35b610c27915060203d8111610483576104758183610e65565b38610c01565b8382346101aa57816003193601126101aa5760075490516001600160a01b039091168152602090f35b9091503461030f57602036600319011261030f57610c72610e03565b9060018060a01b03926044602085875460101c16835192838092632474521560e21b82528a888301523360248301525afa908115610ceb578691610ccd575b50156108dc5750501660018060a01b0319600754161760075580f35b610ce5915060203d8111610483576104758183610e65565b38610cb1565b82513d88823e3d90fd5b8382346101aa57816003193601126101aa576020906006549051908152f35b8382346101aa57816003193601126101aa579054905160109190911c6001600160a01b03168152602090f35b8382346101aa5760203660031901126101aa57602090610d66610d61610e03565b6114ca565b90519015158152f35b9250346105ad5760203660031901126105ad57803563ffffffff60e01b8116809103610dff5784546301ffc9a760e01b8552918401526020908390602490829060101c6001600160a01b03165afa918215610df55760209392610dd6575b50519015158152f35b610dee919250833d8111610483576104758183610e65565b9038610dcd565b81513d85823e3d90fd5b8480fd5b600435906001600160a01b0382168203610e1957565b600080fd5b602435906001600160a01b0382168203610e1957565b608081019081106001600160401b03821117610e4f57604052565b634e487b7160e01b600052604160045260246000fd5b601f909101601f19168101906001600160401b03821190821017610e4f57604052565b90816020910312610e1957518015158103610e195790565b15610ea757565b60405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b6044820152606490fd5b6001600160a01b0316600090815260016020526040902090565b6000198114610f075760010190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b039081169190610f35831515610ea0565b600454610fcb57600360018060a01b03199284846002541617600255848483541617825560405190610f6682610e34565b8582526020820190815260408201906000825260608301966000885260005260016020528460406000209351168684541617835551600183015583600283019151168582541617905501925116908254161790555b610fc6600454610ef8565b600455565b9160029391938381541694855b85811690811515806111ec575b1561100457506003604087926000908152600160205220015416610fd8565b869150969192939496169081156000146110b057505060039380855416600052600160205284806040600020019360018060a01b031994868682541617905582825416836040519261105584610e34565b8884526020840196875260408401928352606084019660008852896000526001602052826040600020955116898654161785555160018501558301915116868254161790550191511682825416179055825416179055610fbb565b9294919281036111495750808454168160036040516110ce81610e34565b868152602081019586526040810160008152606082019485528760005260016020528360406000209251169660018060a01b0319978884541617835551600183015583898301915116878254161790550191511683825416179055835416600052826040600020018282825416179055825416179055610fbb565b6000818152600160205260408082208701548416808352818320600390810180546001600160a01b03199081168a17909155835190999793969495949261118f82610e34565b8982526020820194855287820190815260608201948686528a88526001602052848989209351168c845416178355516001830155838983019151168b82541617905501915116878254161790558152200191825416179055610fbb565b5082600083815260406001918260205220015411610fe5565b6001600160a01b039081169061121c821515610ea0565b60045415611336576003600092838093828252600192836020526040918284209080845161124981610e34565b83548216815287840154602082015260028401548216868201818152948a0154831660609092018281529190801561131c57885260208990528688208a0180546001600160a01b03191690911790555b51169182156113045751918552602086905283852060020180546001600160a01b031916919092161790555b82528260205281209181835582015582600282015501556004549081156112f0575060001901600455565b634e487b7160e01b81526011600452602490fd5b5187546001600160a01b0319169116178655506112c5565b50600280546001600160a01b031916919091179055611299565b60405162461bcd60e51b815260206004820152600d60248201526c4c69737420697320656d70747960981b6044820152606490fd5b6001600160a01b0361137c82610ede565b54161561138e5761138c90611205565b565b6040516306fceae360e01b8152600490fd5b519081600f0b8203610e1957565b90816080910312610e19576060604051916113c883610e34565b6113d1816113a0565b83526113df602082016113a0565b60208401526040818101519084015201516001600160a01b0381168103610e1957606082015290565b60075460405163cbf9fe5f60e01b81526001600160a01b038381166004830181905291926080908490602490829085165afa9283156114be5760009361149e575b5082516001600160801b0316926060908261146387610ede565b5416611490575b0151161480611485575b61147c575050565b61138c91610f1d565b506006548111611474565b61149986611205565b61146a565b6114b791935060803d81116102ef576102e08183610e65565b9138611449565b6040513d6000823e3d90fd5b906001600160a01b03806114dd84610ede565b54166115b3575b806002541692600092828060075416955b16801515806115a8575b1561159d57604090815163cbf9fe5f60e01b815281600482015260809081816024818c5afa91821561159257916060918893600092611575575b50500151168585161461156957846003819361156393600052600160205260002001541695610ef8565b946114f5565b50509350505050600190565b61158b9250803d106102ef576102e08183610e65565b3880611539565b84513d6000823e3d90fd5b509350505050600090565b5060055485106114ff565b60009283928280600254165b168015158061160d575b156116035783831681146115f85785526001602052826115f28160036040892001541695610ef8565b946115bf565b509350505050600190565b50925092506114e4565b5060055485106115c9565b6001600160401b038111610e4f5760051b6020019056fe76d0567582f23e1e9d7a13eeba60f9aea9d69b8da87ca27a8bf3698b35c653dba26469706673582212203f5b6f1943a776cc7dbfd08c566ca67e5b6089a9300e26d07a714123cfa8e21764736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      }
    },
    "title": "TopStakers",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "changeTopStakersCount(uint256)": {
        "notice": "Admin function to change number of top stakers*"
      },
      "cleanExpiredTopStakers()": {
        "notice": "Sometimes topStakers can be expired (lock date is over), this function remove such topStakers*"
      },
      "getStakersLength()": {
        "notice": "Returns the amount of subscribed users (stakers list length)*"
      },
      "getTopStakers()": {
        "notice": "Returns the list of users that are topStakers*"
      },
      "isStaker(address)": {
        "notice": "Returns if user is staker with not expired stake*"
      },
      "isTopStaker(address)": {
        "notice": "Returns if user is top staker or not*"
      },
      "onDelegationChanged(address,address,address)": {
        "notice": "Callback that is calling by veToken after adding/removing delegation*"
      },
      "subscribe()": {
        "notice": "User function to add yourself in stakers list to be able to be topStaker for liquidation*"
      },
      "unsubscribe()": {
        "notice": "User function to remove yourself from stakers list*"
      }
    },
    "notice": "Contract that have functionality to work with Top Stakers. They need to have veToken and call subscribe to participate in this list.*",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 462,
        "contract": "contracts/staking/contracts/TopStakers.sol:TopStakers",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 465,
        "contract": "contracts/staking/contracts/TopStakers.sol:TopStakers",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 26374,
        "contract": "contracts/staking/contracts/TopStakers.sol:TopStakers",
        "label": "ACCESS_CONTROL_SINGLETON",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(ISuAccessControl)29456"
      },
      {
        "astId": 34924,
        "contract": "contracts/staking/contracts/TopStakers.sol:TopStakers",
        "label": "stakers",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(List)18813_storage"
      },
      {
        "astId": 34926,
        "contract": "contracts/staking/contracts/TopStakers.sol:TopStakers",
        "label": "topStakersCount",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 34928,
        "contract": "contracts/staking/contracts/TopStakers.sol:TopStakers",
        "label": "minStakingAmount",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 34931,
        "contract": "contracts/staking/contracts/TopStakers.sol:TopStakers",
        "label": "veToken",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IVeToken)34912"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ISuAccessControl)29456": {
        "encoding": "inplace",
        "label": "contract ISuAccessControl",
        "numberOfBytes": "20"
      },
      "t_contract(IVeToken)34912": {
        "encoding": "inplace",
        "label": "contract IVeToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Node)18801_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct SortedLinkedList.Node)",
        "numberOfBytes": "32",
        "value": "t_struct(Node)18801_storage"
      },
      "t_struct(List)18813_storage": {
        "encoding": "inplace",
        "label": "struct SortedLinkedList.List",
        "members": [
          {
            "astId": 18806,
            "contract": "contracts/staking/contracts/TopStakers.sol:TopStakers",
            "label": "nodes",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_struct(Node)18801_storage)"
          },
          {
            "astId": 18808,
            "contract": "contracts/staking/contracts/TopStakers.sol:TopStakers",
            "label": "head",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 18810,
            "contract": "contracts/staking/contracts/TopStakers.sol:TopStakers",
            "label": "tail",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 18812,
            "contract": "contracts/staking/contracts/TopStakers.sol:TopStakers",
            "label": "size",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Node)18801_storage": {
        "encoding": "inplace",
        "label": "struct SortedLinkedList.Node",
        "members": [
          {
            "astId": 18794,
            "contract": "contracts/staking/contracts/TopStakers.sol:TopStakers",
            "label": "key",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 18796,
            "contract": "contracts/staking/contracts/TopStakers.sol:TopStakers",
            "label": "value",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 18798,
            "contract": "contracts/staking/contracts/TopStakers.sol:TopStakers",
            "label": "prev",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 18800,
            "contract": "contracts/staking/contracts/TopStakers.sol:TopStakers",
            "label": "next",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}