{
  "address": "0xB1C8138C69c8d045264B51DE960BBC506758CDB3",
  "abi": [
    {
      "inputs": [],
      "name": "BadAccessControlSingleton",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BadOutAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CallbackError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "orderToken2buy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "inToken",
          "type": "address"
        }
      ],
      "name": "IncorrectToken",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "IsNotStaker",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "IsNotTopStaker",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughReturnValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAdminError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAlerterError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyCDPAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyDAOError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyDisablerAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyLiquidationAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyMintAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyProxyActionsError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyRewardAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyRoleError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyVaultAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyVotingEscrowError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "OrderExist",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "OrderNotExist",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "OrderNotForThisStaker",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SmallAmountLeft",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UserIsNotBeneficiary",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "LPToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "orderIds",
          "type": "uint256[]"
        }
      ],
      "name": "LpOrdersAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "OrderAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "OrderCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "OrderFilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "OrderFilledPartially",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACCESS_CONTROL_SINGLETON",
      "outputs": [
        {
          "internalType": "contract ISuAccessControl",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ALERTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CDP_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DAO_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DISABLER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DUST_THRESHOLD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIQUIDATION_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINT_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ORACLE",
      "outputs": [
        {
          "internalType": "contract ISuOracleAggregator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROXY_ACTIONS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARD_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOP_STAKERS",
      "outputs": [
        {
          "internalType": "contract ITopStakers",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VOTING_ESCROW_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token2sell",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount2sell",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token2buy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "discountType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "collateralJoin",
          "type": "address"
        }
      ],
      "name": "addOrder",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "cancelOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "fillOrderAsFlashLoan",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "outAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inAmount",
          "type": "uint256"
        }
      ],
      "name": "fillOrderSimple",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "outAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "getAllOrders",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token2sell",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "token2buy",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "beneficiary",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "caller",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amountLeft",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token2buyAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint64",
                  "name": "creationTimestamp",
                  "type": "uint64"
                },
                {
                  "internalType": "uint8",
                  "name": "discountType",
                  "type": "uint8"
                }
              ],
              "internalType": "struct Order",
              "name": "order",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "orderId",
              "type": "uint256"
            }
          ],
          "internalType": "struct OrderWithId[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inAmount",
          "type": "uint256"
        }
      ],
      "name": "getExpectedOrderOutcome",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "outAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "getOrder",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token2sell",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token2buy",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "caller",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountLeft",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "token2buyAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "creationTimestamp",
              "type": "uint64"
            },
            {
              "internalType": "uint8",
              "name": "discountType",
              "type": "uint8"
            }
          ],
          "internalType": "struct Order",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOrdersCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_authControl",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oracleAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_topStakersAddress",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "orders",
      "outputs": [
        {
          "internalType": "address",
          "name": "token2sell",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token2buy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountLeft",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "token2buyAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "creationTimestamp",
          "type": "uint64"
        },
        {
          "internalType": "uint8",
          "name": "discountType",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "priceCurve",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "discountType",
          "type": "uint8"
        },
        {
          "internalType": "uint256[2]",
          "name": "newPriceCurve",
          "type": "uint256[2]"
        }
      ],
      "name": "setPriceCurve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "numDeployments": 6,
  "solcInputHash": "063b59c64b6b03a7efa7d47f22e02344",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"BadAccessControlSingleton\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BadOutAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallbackError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"orderToken2buy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inToken\",\"type\":\"address\"}],\"name\":\"IncorrectToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"IsNotStaker\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"IsNotTopStaker\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughReturnValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAdminError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAlerterError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyCDPAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyDAOError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyDisablerAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyLiquidationAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyMintAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyProxyActionsError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRewardAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRoleError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyVaultAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyVotingEscrowError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"OrderExist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"OrderNotExist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"OrderNotForThisStaker\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SmallAmountLeft\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UserIsNotBeneficiary\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"LPToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"orderIds\",\"type\":\"uint256[]\"}],\"name\":\"LpOrdersAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"OrderAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"OrderCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"OrderFilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"OrderFilledPartially\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACCESS_CONTROL_SINGLETON\",\"outputs\":[{\"internalType\":\"contract ISuAccessControl\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ALERTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CDP_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAO_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DISABLER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DUST_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDATION_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ORACLE\",\"outputs\":[{\"internalType\":\"contract ISuOracleAggregator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROXY_ACTIONS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOP_STAKERS\",\"outputs\":[{\"internalType\":\"contract ITopStakers\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VOTING_ESCROW_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token2sell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount2sell\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token2buy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"discountType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"collateralJoin\",\"type\":\"address\"}],\"name\":\"addOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"fillOrderAsFlashLoan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"outAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"}],\"name\":\"fillOrderSimple\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"outAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"getAllOrders\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token2sell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token2buy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountLeft\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token2buyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"creationTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"discountType\",\"type\":\"uint8\"}],\"internalType\":\"struct Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderWithId[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"}],\"name\":\"getExpectedOrderOutcome\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"outAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"getOrder\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token2sell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token2buy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountLeft\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token2buyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"creationTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"discountType\",\"type\":\"uint8\"}],\"internalType\":\"struct Order\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOrdersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_authControl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_topStakersAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token2sell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token2buy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountLeft\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token2buyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"creationTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"discountType\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"priceCurve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"discountType\",\"type\":\"uint8\"},{\"internalType\":\"uint256[2]\",\"name\":\"newPriceCurve\",\"type\":\"uint256[2]\"}],\"name\":\"setPriceCurve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See IExchange interface for full details.\",\"kind\":\"dev\",\"methods\":{\"addOrder(address,uint256,address,address,uint8,address)\":{\"details\":\"This swap is async, because depends on how arbitrage bots will fill this order. Emits OrderAdded() event. Before addOrder user needs to approve token2sell for exchange contract\",\"params\":{\"amount2sell\":\"- Amount of {token2sell} to sell\",\"beneficiary\":\"- Address that will receive {token2buy} after filling order.\",\"collateralJoin\":\"- address of collateral adapter*\",\"discountType\":\"- Speed of decreasing swap price. { 0 - aggressive, 1 - middle, 2 - conservative }\",\"token2buy\":\"- Address of token to buy\",\"token2sell\":\"- Address of token to sell\"}},\"cancelOrder(uint256)\":{\"params\":{\"orderId\":\"- Id of order to cancel.*\"}},\"fillOrderAsFlashLoan(uint256,uint256,bytes)\":{\"details\":\"Caller contract receive orders {token2sell} and after that his stableunitFillOrderCallback() is called. At the end of thi callback contract should send some amount of another token back to Exchange contract.\",\"params\":{\"data\":\"- encoded data to pass to callback function*\",\"inAmount\":\"- Amount of {token2sell} to receive\",\"orderId\":\"- Id of order to fill.\"}},\"getExpectedOrderOutcome(uint256,uint256)\":{\"returns\":{\"outAmount\":\"The amount of outcome that caller will receive if he will fill {orderId} with {inAmount} of {token2sell}*\"}},\"getOrder(uint256)\":{\"returns\":{\"_0\":\"Order with id = {orderId}*\"}},\"getOrdersCount()\":{\"returns\":{\"_0\":\"The amount of not full-filled orders*\"}},\"setPriceCurve(uint8,uint256[2])\":{\"params\":{\"discountType\":\"- discount type to change\",\"newPriceCurve\":\"- parameters of formula*\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"title\":\"Exchange\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"DUST_THRESHOLD()\":{\"notice\":\"Amount of minimum amountLeft in order. It's measured in fiat. For example DUST_THRESHOLD = 100 * 1e18 => it's 100 USD*\"},\"addOrder(address,uint256,address,address,uint8,address)\":{\"notice\":\"Add order to swap {token2sell} to {token2buy}.\"},\"cancelOrder(uint256)\":{\"notice\":\"Only user who place order or who is beneficiary can cancelOrder();\"},\"fillOrderAsFlashLoan(uint256,uint256,bytes)\":{\"notice\":\"Fill order with flash-loan like logic\"},\"getAllOrders(uint256,uint256)\":{\"notice\":\"This method can be deleted after we'll add GraphQL to watch orders*\"},\"priceCurve(uint8,uint256)\":{\"notice\":\"priceCurve is like price_t = price_0 * (1 - t/priceCurve[0]) - priceCurve[1] from timePassed = 0 to t priceCurve decrease linear, but after t (when discount is 20%), it's constant*\"},\"setPriceCurve(uint8,uint256[2])\":{\"notice\":\"Function to update price curve - how fast {token2sell} price will decrease/increase\"}},\"notice\":\"Main contract of Exchange module. Here we can add order or fill it to get profit.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/exchange/contracts/Exchange.sol\":\"Exchange\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2025ccf05f6f1f2fd4e078e552836f525a1864e3854ed555047cd732320ab29b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x1c65595a26548a1b2263315b08a56334a2d7087319814437559c3c96025e939f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\",\"keccak256\":\"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd\",\"license\":\"GPL-2.0-or-later\"},\"contracts/exchange/contracts/Exchange.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport \\\"../interfaces/IExchange.sol\\\";\\nimport \\\"../../staking/interfaces/ITopStakers.sol\\\";\\nimport \\\"../interfaces/IExchangeCallback.sol\\\";\\nimport \\\"../../makerdao/interfaces/ICollateralJoin.sol\\\";\\nimport \\\"../../periphery/contracts/access-control/SuAuthenticated.sol\\\";\\nimport \\\"../../periphery/contracts/interfaces/oracle/ISuOracleAggregator.sol\\\";\\n\\n/**\\n * @title Exchange\\n * @notice Main contract of Exchange module. Here we can add order or fill it to get profit.\\n * @dev See IExchange interface for full details.\\n */\\ncontract Exchange is SuAuthenticated, ReentrancyGuardUpgradeable, IExchange {\\n    // We don't use enum for DiscountType to save gas\\n    uint8 private DISCOUNT_TYPE_AGGRESSIVE;\\n    uint8 private DISCOUNT_TYPE_MIDDLE;\\n    uint8 private DISCOUNT_TYPE_CONSERVATIVE;\\n    ISuOracleAggregator public ORACLE;\\n    ITopStakers public TOP_STAKERS;\\n\\n    /**\\n     * @notice Amount of minimum amountLeft in order. It's measured in fiat.\\n     * For example DUST_THRESHOLD = 100 * 1e18 => it's 100 USD\\n    **/\\n    uint256 public DUST_THRESHOLD;\\n\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.UintSet;\\n    // todo: add enumerableSet of all IDs\\n    mapping (uint256 => Order) public orders;\\n    EnumerableSetUpgradeable.UintSet private orderIdSet;\\n\\n    /**\\n     * @notice priceCurve is like price_t = price_0 * (1 - t/priceCurve[0]) - priceCurve[1]\\n     * from timePassed = 0 to t priceCurve decrease linear, but after t (when discount is 20%), it's constant\\n    **/\\n    mapping (uint8 => uint256[2]) public priceCurve;\\n\\n    function initialize(\\n        address _authControl,\\n        address _oracleAddress,\\n        address _topStakersAddress\\n    ) public initializer {\\n        __suAuthenticatedInit(_authControl);\\n\\n        DISCOUNT_TYPE_AGGRESSIVE = 0;\\n        DISCOUNT_TYPE_MIDDLE = 1;\\n        DISCOUNT_TYPE_CONSERVATIVE = 2;\\n\\n        // -20% for 3min/10h/24h\\n        priceCurve[DISCOUNT_TYPE_AGGRESSIVE] = [180 * 5, 0];\\n        priceCurve[DISCOUNT_TYPE_MIDDLE] = [36_000 * 5, 0];\\n        priceCurve[DISCOUNT_TYPE_CONSERVATIVE] = [86_400 * 5, 0];\\n        DUST_THRESHOLD = 100 * 1e18;\\n\\n        ORACLE = ISuOracleAggregator(_oracleAddress);\\n        TOP_STAKERS = ITopStakers(_topStakersAddress);\\n    }\\n\\n    function setPriceCurve(uint8 discountType, uint256[2] calldata newPriceCurve) public onlyAdmin {\\n        priceCurve[discountType] = newPriceCurve;\\n    }\\n\\n    function addOrder(\\n        address token2sell,\\n        uint256 amount2sell,\\n        address token2buy,\\n        address beneficiary,\\n        uint8 discountType,\\n        address collateralJoin // or store this map in exchange module\\n    ) external returns (uint256 orderId) {\\n        // @notice The Exchange Module works with explicit real ERC20 tokens balance, so we need to acquire them.\\n        // If the caller is a user/contract that has some tokens in the protocol, they need to get them out of the protocol via exit.\\n        // Otherwise, the user/contract just needs to transfer tokens to the Exchange Module.\\n        if (collateralJoin == address(0)) {\\n            IERC20(token2sell).transferFrom(msg.sender, address(this), amount2sell);\\n            // TransferHelper.safeTransferFrom(token2sell, msg.sender, address(this), amount2sell);\\n        } else {\\n            ICollateralJoin(collateralJoin).exit(address(this), amount2sell);\\n        }\\n\\n        orderId = uint256(\\n            keccak256(\\n                abi.encodePacked(block.number, msg.sender, token2sell, amount2sell, token2buy)\\n            )\\n        );\\n        if (orders[orderId].creationTimestamp != 0) orderId += 1;\\n        if (orders[orderId].creationTimestamp != 0) revert OrderExist(orderId);\\n\\n        orders[orderId] = Order(\\n            token2sell,\\n            token2buy,\\n            beneficiary,\\n            msg.sender,\\n            amount2sell,\\n            0, // token2buyAmount at start should be 0\\n            uint64(block.timestamp),\\n            discountType\\n        );\\n        EnumerableSetUpgradeable.add(orderIdSet, orderId);\\n        emit OrderAdded(orderId);\\n    }\\n\\n    function cancelOrder(uint256 orderId) public {\\n        Order memory order = orders[orderId];\\n\\n        if (order.creationTimestamp == 0) revert OrderNotExist(orderId);\\n        if (msg.sender != order.beneficiary && msg.sender != order.caller) revert UserIsNotBeneficiary();\\n\\n        TransferHelper.safeTransfer(order.token2sell, msg.sender, order.amountLeft);\\n        delete orders[orderId];\\n        EnumerableSetUpgradeable.remove(orderIdSet, orderId);\\n\\n        emit OrderCanceled(orderId);\\n    }\\n\\n    /**\\n     * @notice Return discounted price of token depending on passed time and type of discount\\n     * @dev orderPrice = x * 10^18 * 10^(18 - decimals) like in Oracle\\n    **/\\n    function getDiscountedTokenPrice(\\n        uint256 token2sellPrice,\\n        uint256 timePassed,\\n        uint8 discountType\\n    ) internal view returns (uint256) {\\n        uint256 curveDiv = priceCurve[discountType][0];\\n        uint256 curveSub = priceCurve[discountType][1];\\n\\n        if (timePassed > curveDiv) {\\n            // minimum is 80%;\\n            return token2sellPrice * 8 / 10;\\n        }\\n\\n        return token2sellPrice - token2sellPrice * timePassed / curveDiv - curveSub;\\n    }\\n\\n    function getExpectedOrderOutcome(uint256 orderId, uint256 inAmount) public view returns (uint256 outAmount) {\\n        Order memory order = orders[orderId];\\n        uint256 timePassed = block.timestamp - order.creationTimestamp;\\n\\n        // Let's assume that: inAmount = x * 10^d1, discountedTokenPrice = p1 * 10^(36 - d1), priceB = p2 * 10^(36 - d2)\\n        // Then outAmount = x * 10^d1 * p1 * 10^(36 - d1) / (p2 * 10^(36 - d2)) = (x * p1 / p2) * 10^(d2)\\n        uint256 discountedTokenPrice = getDiscountedTokenPrice(\\n            ORACLE.getFiatPrice1e18(order.token2sell),\\n            timePassed,\\n            order.discountType\\n        );\\n        uint256 priceB = ORACLE.getFiatPrice1e18(order.token2buy);\\n        outAmount = inAmount * discountedTokenPrice / priceB;\\n    }\\n\\n    function fillOrderAsFlashLoan(\\n        uint256 orderId,\\n        uint256 inAmount,\\n        bytes memory data\\n    ) external nonReentrant returns (uint256 outAmount) {\\n        Order storage order = orders[orderId];\\n\\n        if (order.creationTimestamp == 0) revert OrderNotExist(orderId);\\n\\n        uint256 timePassed = block.timestamp - order.creationTimestamp;\\n        address token2sell = order.token2sell;\\n        address token2buy = order.token2buy;\\n\\n        // grace period\\n        if (timePassed <= 60) {\\n            // check that msg.sender is in TopStaker list + it's on position {orderId % x}\\n            uint256 topN = TOP_STAKERS.topStakersCount();\\n            uint256 size = TOP_STAKERS.getStakersLength();\\n            uint256 numberOfStakers = size > topN ? topN : size; // Math.min(size, topN)\\n            address user = msg.sender;\\n            if (!TOP_STAKERS.isTopStaker(user)) revert IsNotTopStaker(user);\\n            if (uint160(user) % numberOfStakers != orderId % numberOfStakers) {\\n                revert OrderNotForThisStaker(orderId, user);\\n            }\\n        } else {\\n            address user = msg.sender;\\n            if (!TOP_STAKERS.isStaker(user)) revert IsNotStaker(user);\\n        }\\n\\n        if (inAmount > order.amountLeft) {\\n            inAmount = order.amountLeft;\\n        }\\n\\n        // the same as in getExpectedOrderOutcome\\n        uint256 discountedTokenPrice = getDiscountedTokenPrice(\\n            ORACLE.getSafeFiatPrice1e18(token2sell),\\n            timePassed,\\n            order.discountType\\n        );\\n        uint256 priceB = ORACLE.getSafeFiatPrice1e18(token2buy);\\n        outAmount = inAmount * discountedTokenPrice / priceB;\\n\\n        if (outAmount == 0) {\\n            revert BadOutAmount();\\n        }\\n\\n        order.token2buyAmount += outAmount;\\n        order.amountLeft -= inAmount;\\n\\n        // If in order some token amount left after updating it\\n        // then it should have value > DUST_THRESHOLD, counted in fiat\\n        if (order.amountLeft > 0 && discountedTokenPrice * order.amountLeft / 1e18 <= DUST_THRESHOLD) {\\n            revert SmallAmountLeft();\\n        }\\n\\n        TransferHelper.safeTransfer(token2sell, msg.sender, inAmount);\\n\\n        uint256 balanceBefore = IERC20(token2buy).balanceOf(address(this));\\n        if(!IExchangeCallback(msg.sender).stableunitFillOrderCallback(token2buy, outAmount, msg.sender, data)) {\\n            revert CallbackError();\\n        }\\n        uint256 balanceAfter = IERC20(token2buy).balanceOf(address(this));\\n        if (balanceAfter < balanceBefore + outAmount) revert NotEnoughReturnValue();\\n\\n        TransferHelper.safeTransfer(token2buy, order.beneficiary, outAmount);\\n\\n        if (order.amountLeft == 0) {\\n            delete orders[orderId];\\n            EnumerableSetUpgradeable.remove(orderIdSet, orderId);\\n            emit OrderFilled(orderId);\\n        } else {\\n            emit OrderFilledPartially(orderId);\\n        }\\n    }\\n\\n    function fillOrderSimple(uint256 orderId, uint256 inAmount) external returns (uint256 outAmount) {\\n        Order storage order = orders[orderId];\\n\\n        if (order.creationTimestamp == 0) revert OrderNotExist(orderId);\\n\\n        uint256 timePassed = block.timestamp - order.creationTimestamp;\\n\\n        // grace period\\n        if (timePassed <= 60) {\\n            // check that msg.sender is in TopStaker list + it's on position {orderId % x}\\n            uint256 topN = TOP_STAKERS.topStakersCount();\\n            uint256 size = TOP_STAKERS.getStakersLength();\\n            uint256 numberOfStakers = size > topN ? topN : size; // Math.min(size, topN)\\n            address user = msg.sender;\\n            if (!TOP_STAKERS.isTopStaker(user)) revert IsNotTopStaker(user);\\n            if (uint160(user) % numberOfStakers != orderId % numberOfStakers) {\\n                revert OrderNotForThisStaker(orderId, user);\\n            }\\n        } else {\\n            address user = msg.sender;\\n            if (!TOP_STAKERS.isStaker(user)) revert IsNotStaker(user);\\n        }\\n\\n        if (inAmount > order.amountLeft) {\\n            inAmount = order.amountLeft;\\n        }\\n\\n        // the same as in getExpectedOrderOutcome\\n        uint256 discountedTokenPrice = getDiscountedTokenPrice(\\n            ORACLE.getSafeFiatPrice1e18(order.token2sell),\\n            timePassed,\\n            order.discountType\\n        );\\n        uint256 priceB = ORACLE.getSafeFiatPrice1e18(order.token2buy);\\n        outAmount = inAmount * discountedTokenPrice / priceB;\\n\\n        if (outAmount == 0) {\\n            revert BadOutAmount();\\n        }\\n\\n        order.token2buyAmount += outAmount;\\n        order.amountLeft -= inAmount;\\n\\n        // If in order some token amount left after updating it\\n        // then it should have value > DUST_THRESHOLD, counted in fiat\\n        if (order.amountLeft > 0 && discountedTokenPrice * order.amountLeft / 1e18 <= DUST_THRESHOLD) {\\n            revert SmallAmountLeft();\\n        }\\n\\n        TransferHelper.safeTransferFrom(order.token2buy, msg.sender, order.beneficiary, outAmount);\\n        TransferHelper.safeTransfer(order.token2sell, msg.sender, inAmount);\\n\\n        if (order.amountLeft == 0) {\\n            delete orders[orderId];\\n            EnumerableSetUpgradeable.remove(orderIdSet, orderId);\\n            emit OrderFilled(orderId);\\n        } else {\\n            emit OrderFilledPartially(orderId);\\n        }\\n    }\\n\\n    function getOrder (uint256 orderId) public view returns (Order memory) {\\n        return orders[orderId];\\n    }\\n\\n    function getOrdersCount() public view returns (uint256) {\\n        return EnumerableSetUpgradeable.length(orderIdSet);\\n    }\\n\\n    /**\\n     * @notice This method can be deleted after we'll add GraphQL to watch orders\\n    **/\\n    function getAllOrders(uint256 offset, uint256 limit) external view returns (OrderWithId[] memory) {\\n        uint256[] memory orderIdValues = EnumerableSetUpgradeable.values(orderIdSet);\\n        uint256 totalOrders = orderIdValues.length;\\n        if (totalOrders == 0) return new OrderWithId[](0);\\n\\n        uint256 end = offset + limit > totalOrders ? totalOrders : offset + limit;\\n        uint256 len = end > offset ? end - offset : 0;\\n        OrderWithId[] memory result = new OrderWithId[](len);\\n        for (uint256 i = offset; i < end; i++) {\\n            uint256 orderId = orderIdValues[i];\\n            result[i - offset] = OrderWithId({\\n                order: orders[orderId],\\n                orderId: orderId\\n            });\\n        }\\n        return result;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public pure override returns (bool) {\\n        return interfaceId == type(IExchange).interfaceId;\\n    }\\n\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xe5b0f0c5da7d0427b4a6f7ca350396832e27972c124424c476a3c4dad097c9a9\",\"license\":\"BSL 1.1\"},\"contracts/exchange/interfaces/IExchange.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\npragma solidity ^0.8.0;\\n\\nstruct Order {\\n    address token2sell;\\n    address token2buy;\\n    address beneficiary;\\n    address caller;\\n    uint256 amountLeft;\\n    uint256 token2buyAmount;\\n    uint64 creationTimestamp;\\n    uint8 discountType;\\n}\\n\\nstruct OrderWithId {\\n    Order order;\\n    uint256 orderId;\\n}\\n\\ninterface IExchange {\\n    /* ===================== ERRORS ===================== */\\n    error OrderExist(uint256 orderId);\\n    error OrderNotExist(uint256 orderId);\\n    error IncorrectToken(address orderToken2buy, address inToken);\\n    error SmallAmountLeft();\\n    error BadOutAmount();\\n    error UserIsNotBeneficiary();\\n    error IsNotTopStaker(address staker);\\n    error IsNotStaker(address staker);\\n    error OrderNotForThisStaker(uint256 orderId, address staker);\\n    error NotEnoughReturnValue();\\n    error CallbackError();\\n\\n    /* ======================== EVENTS ========================= */\\n    event OrderAdded(uint256 orderId);\\n    event OrderCanceled(uint256 orderId);\\n    event OrderFilled(uint256 orderId);\\n    event OrderFilledPartially(uint256 orderId);\\n    event LpOrdersAdded(address LPToken, uint256[] orderIds);\\n\\n    /* ==================== MUTABLE METHODS ==================== */\\n\\n    /**\\n      * @notice Add order to swap {token2sell} to {token2buy}.\\n      * @dev This swap is async, because depends on how arbitrage bots will fill this order. Emits OrderAdded() event.\\n      * Before addOrder user needs to approve token2sell for exchange contract\\n      * @param token2sell - Address of token to sell\\n      * @param amount2sell - Amount of {token2sell} to sell\\n      * @param token2buy - Address of token to buy\\n      * @param beneficiary - Address that will receive {token2buy} after filling order.\\n      * @param discountType - Speed of decreasing swap price. { 0 - aggressive, 1 - middle, 2 - conservative }\\n      * @param collateralJoin - address of collateral adapter\\n     **/\\n    function addOrder (\\n        address token2sell,\\n        uint256 amount2sell,\\n        address token2buy,\\n        address beneficiary,\\n        uint8 discountType,\\n        address collateralJoin\\n    ) external returns (uint256);\\n\\n    /**\\n      * @notice Only user who place order or who is beneficiary can cancelOrder();\\n      * @param orderId - Id of order to cancel.\\n     **/\\n    function cancelOrder (uint256 orderId) external;\\n\\n    /**\\n      * @notice Fill order with flash-loan like logic\\n      * @dev Caller contract receive orders {token2sell} and after that his stableunitFillOrderCallback() is called.\\n      * At the end of thi callback contract should send some amount of another token back to Exchange contract.\\n      * @param orderId - Id of order to fill.\\n      * @param inAmount - Amount of {token2sell} to receive\\n      * @param data - encoded data to pass to callback function\\n     **/\\n    function fillOrderAsFlashLoan (\\n        uint256 orderId,\\n        uint256 inAmount,\\n        bytes memory data\\n    ) external returns (uint256 outAmount);\\n\\n    /**\\n      * @notice Function to update price curve - how fast {token2sell} price will decrease/increase\\n      * @param discountType - discount type to change\\n      * @param newPriceCurve - parameters of formula\\n     **/\\n    function setPriceCurve(uint8 discountType, uint256[2] calldata newPriceCurve) external;\\n\\n    /* ==================== VIEW METHODS ==================== */\\n    /**\\n      * @return The amount of outcome that caller will receive if he will fill {orderId} with {inAmount} of {token2sell}\\n     **/\\n    function getExpectedOrderOutcome (uint256 orderId, uint256 inAmount) external view returns (uint256);\\n\\n    /**\\n      * @return Order with id = {orderId}\\n     **/\\n    function getOrder (uint256 orderId) external view returns (Order memory);\\n\\n    /**\\n      * @return The amount of not full-filled orders\\n     **/\\n    function getOrdersCount () external view returns (uint256);\\n\\n    /**\\n      * @return The array of all not-filled orders. May be deleted after adding GraphQL for orderIds\\n     **/\\n    function getAllOrders (uint256 offset, uint256 limit) external view returns (OrderWithId[] memory);\\n}\\n\",\"keccak256\":\"0x7ee445e1f588c012ce05bdffad0f21aea68245e674763cc800ca8ab1b934c744\",\"license\":\"BSL 1.1\"},\"contracts/exchange/interfaces/IExchangeCallback.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\npragma solidity ^0.8.0;\\n\\ninterface IExchangeCallback {\\n    /**\\n     * @notice Callback that will be called by Exchange module in fillOrderAsFlashLoan()\\n     * after sending collateral to msg.sender.\\n     * In the implementation you must pay stablecoin for Exchange contract.\\n     * @dev Any contract that calls Exchange#fillOrderAsFlashLoan must implement this interface\\n     * @param asset - The address of the token that should be returned\\n     * @param amount - The amount of the {token} to return\\n     * @param initiator The address of the flashloan initiator\\n     * @return True if the execution of the operation succeeds, false otherwise\\n     */\\n    function stableunitFillOrderCallback (\\n        address asset,\\n        uint256 amount,\\n        address initiator,\\n        bytes calldata params\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x83d01cfa5b53319a2111163fd3d2f51dbe426069eb552818edbbbc4ef097582e\",\"license\":\"BSL 1.1\"},\"contracts/makerdao/interfaces/ICollateralJoin.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {IDisable} from \\\"./IDisable.sol\\\";\\n\\n/**\\n * @title ITaxCollector\\n **/\\ninterface ICollateralJoin is IDisable {\\n\\n    /* ===================== EVENTS ===================== */\\n\\n    event Join(address indexed usr, uint256 wad);\\n    event Exit(address indexed usr, uint256 wad);\\n\\n    /* ====================== VARS ===================== */\\n    function decimals() external returns (uint);\\n    function collateral() external view returns(IERC20Metadata);\\n\\n    /* ==================== METHODS ==================== */\\n\\n    /**\\n    * @notice Join collateral in the system\\n    * @param usr Account from which we transferFrom collateral and add it in the system\\n    * @param wad Amount of collateral to transfer in the system (represented as a number with 18 decimals)\\n    **/\\n    function join(address usr, uint wad) external;\\n\\n    /**\\n    * @notice Exit collateral from the system\\n    * @param usr Account to which we transfer the collateral\\n    * @param wad Amount of collateral to transfer to 'account' (represented as a number with 18 decimals)\\n    **/\\n    function exit(address usr, uint wad) external;\\n}\\n\",\"keccak256\":\"0xb276834f1935ca409ecca5542ef257f9b68e1e91c53b9bdc6b73f0db63210c07\",\"license\":\"UNLICENSED\"},\"contracts/makerdao/interfaces/IDisable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\ninterface IDisable {\\n    event DisableContract();\\n\\n    function disableContract() external;\\n}\\n\",\"keccak256\":\"0xcf4b5ac43556af77a174aa3a3a9b51c4fc89b933ef875797650542bf686b8405\",\"license\":\"UNLICENSED\"},\"contracts/periphery/contracts/access-control/SuAccessRoles.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title SuAccessRoles Library\\n * @dev SuAuthenticated and SuAccessControlSingleton need to have this constants\\n * Hierarchy:\\n *      1. DAO - can give admins and system roles\\n *      2.1. Admin - can set Alerters\\n *      2.2. System - includes Minter, Liquidation, Reward and Disabler roles, don't have access to give some roles.\\n *      3. Alerter - can send alerts and trigger rate limits, don't have access to give some roles.\\n */\\nabstract contract SuAccessRoles {\\n    bytes32 public constant ADMIN_ROLE = 0x00;\\n\\n    bytes32 public constant DAO_ROLE = keccak256(\\\"DAO_ROLE\\\");\\n\\n    bytes32 public constant ALERTER_ROLE = keccak256(\\\"ALERTER_ROLE\\\");\\n\\n    // system roles\\n    bytes32 public constant MINT_ACCESS_ROLE = keccak256(\\\"MINT_ACCESS_ROLE\\\");\\n    bytes32 public constant LIQUIDATION_ACCESS_ROLE = keccak256(\\\"LIQUIDATION_ACCESS_ROLE\\\");\\n    bytes32 public constant REWARD_ACCESS_ROLE = keccak256(\\\"REWARD_ACCESS_ROLE\\\");\\n    // bytes32 public constant SYSTEM_ROLE = keccak256(\\\"SYSTEM_ROLE\\\");\\n    bytes32 public constant DISABLER_ROLE = keccak256(\\\"DISABLER_ROLE\\\");\\n    bytes32 public constant CDP_ACCESS_ROLE = keccak256(\\\"CDP_ACCESS_ROLE\\\");\\n    bytes32 public constant VOTING_ESCROW_ROLE = keccak256(\\\"VOTING_ESCROW_ROLE\\\");\\n    bytes32 public constant PROXY_ACTIONS_ROLE = keccak256(\\\"PROXY_ACTIONS_ROLE\\\");\\n}\\n\",\"keccak256\":\"0x76c6b55446c0e7b40405cd0b642650c64a842e5dd71d5c5307f0b2def8898a1b\",\"license\":\"BSL 1.1\"},\"contracts/periphery/contracts/access-control/SuAuthenticated.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/access-control/ISuAccessControl.sol\\\";\\nimport \\\"./SuAccessRoles.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @title SuAuthenticated\\n * @dev other contracts should inherit to be authenticated.\\n * The address of SuAccessControlSingleton should be one for all contract that inherits SuAuthenticated\\n */\\nabstract contract SuAuthenticated is Initializable, SuAccessRoles, IERC165Upgradeable {\\n    ISuAccessControl public ACCESS_CONTROL_SINGLETON;\\n\\n    error OnlyDAOError();\\n    error OnlyAdminError();\\n    error OnlyAlerterError();\\n    error OnlyVaultAccessError();\\n    error OnlyLiquidationAccessError();\\n    error OnlyMintAccessError();\\n    error OnlyRewardAccessError();\\n    error OnlyDisablerAccessError();\\n    error OnlyVotingEscrowError();\\n    error OnlyProxyActionsError();\\n    error OnlyRoleError();\\n    error OnlyCDPAccessError();\\n    error BadAccessControlSingleton();\\n\\n    /**\\n     * @dev should be passed in constructor\\n     */\\n    function __suAuthenticatedInit(address _accessControlSingleton) internal onlyInitializing {\\n        ACCESS_CONTROL_SINGLETON = ISuAccessControl(_accessControlSingleton);\\n        if (\\n            _accessControlSingleton == address(0) ||\\n            !ISuAccessControl(_accessControlSingleton).supportsInterface(type(IAccessControlUpgradeable).interfaceId)\\n        ) revert BadAccessControlSingleton();\\n    }\\n\\n    /** CORE ROLES */\\n\\n    modifier onlyDAO() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(DAO_ROLE, msg.sender)) revert OnlyDAOError();\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(ADMIN_ROLE, msg.sender)) revert OnlyAdminError();\\n        _;\\n    }\\n\\n    modifier onlyAlerter() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(ALERTER_ROLE, msg.sender)) revert OnlyAlerterError();\\n        _;\\n    }\\n\\n    /** SYSTEM ROLES */\\n\\n    modifier onlyLiquidationAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(LIQUIDATION_ACCESS_ROLE, msg.sender)) revert OnlyLiquidationAccessError();\\n        _;\\n    }\\n\\n    modifier onlyMintAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(MINT_ACCESS_ROLE, msg.sender)) revert OnlyMintAccessError();\\n        _;\\n    }\\n\\n    modifier onlyRewardAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(REWARD_ACCESS_ROLE, msg.sender)) revert OnlyRewardAccessError();\\n        _;\\n    }\\n\\n    modifier onlyRewardOrAdminAccess() {\\n        if (\\n            !ACCESS_CONTROL_SINGLETON.hasRole(REWARD_ACCESS_ROLE, msg.sender) &&\\n            !ACCESS_CONTROL_SINGLETON.hasRole(ADMIN_ROLE, msg.sender)\\n        ) revert OnlyRewardAccessError();\\n        _;\\n    }\\n\\n    // @notice This modifier check if user/contract have access to \\\"disable\\\" contracts.\\n    // All main contracts in our lending protocol have disableContract() method that stops contracts main functions.\\n    modifier onlyDisablerAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(DISABLER_ROLE, msg.sender)) revert OnlyDisablerAccessError();\\n        _;\\n    }\\n\\n    modifier onlyCDPAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(CDP_ACCESS_ROLE, msg.sender)) revert OnlyCDPAccessError();\\n        _;\\n    }\\n\\n    modifier onlyVotingEscrow() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(VOTING_ESCROW_ROLE, msg.sender)) revert OnlyVotingEscrowError();\\n        _;\\n    }\\n\\n    modifier onlyProxyActions() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(PROXY_ACTIONS_ROLE, msg.sender)) revert OnlyProxyActionsError();\\n        _;\\n    }\\n\\n    // syntax sugar under ACCESS_CONTROL_SINGLETON\\n    modifier onlyRole(bytes32 role) {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(role, msg.sender)) revert OnlyRoleError();\\n        _;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return ACCESS_CONTROL_SINGLETON.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x786a8dde3d350dde2a6dd004cbb0a4d2885a8237f01c6312b45bfcca0a3c551d\",\"license\":\"BSL 1.1\"},\"contracts/periphery/contracts/interfaces/access-control/ISuAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\nimport \\\"../../access-control/SuAccessRoles.sol\\\";\\n\\n/**\\n * @notice Access control for contracts\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n **/\\ninterface ISuAccessControl is IAccessControlUpgradeable, IERC165Upgradeable {\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\\n}\\n\",\"keccak256\":\"0x25724ac502fd6418ccd38273b276de4b2fdecd023d723c5d80c9f0a27c407bcd\",\"license\":\"MIT\"},\"contracts/periphery/contracts/interfaces/oracle/ISuOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\n// solhint-disable compiler-version\\npragma solidity >=0.7.6;\\n\\ninterface ISuOracle {\\n    /**\\n     * @notice WARNING! Read this description very carefully!\\n     *     function getFiatPrice1e18(address asset) returns (uint256) that:\\n     *         basicAmountOfAsset * getFiatPrice1e18(asset) / 1e18 === $$ * 1e18\\n     *     in other words, it doesn't matter what's the erc20.decimals is,\\n     *     you just multiply token balance in basic units on value from oracle and get dollar amount multiplied on 1e18.\\n     *\\n     * different assets have different deviation threshold (errors)\\n     *     for wBTC it's <= 0.5%, read more https://data.chain.link/ethereum/mainnet/crypto-usd/btc-usd\\n     *     for other asset is can be larger based on particular oracle implementation.\\n     *\\n     * examples:\\n     *     market price of btc = $30k,\\n     *     for 0.1 wBTC the unit256 amount is 0.1 * 1e18\\n     *     0.1 * 1e18 * (price1e18 / 1e18) == $3000 == uint256(3000*1e18)\\n     *     => price1e18 = 30000 * 1e18;\\n     *\\n     *     market price of usdt = $0.97,\\n     *     for 1 usdt uint256 = 1 * 1e6\\n     *     so 1*1e6 * price1e18 / 1e18 == $0.97 == uint256(0.97*1e18)\\n     *     => 1*1e6 * (price1e18 / 1e18) / (0.97*1e18)   = 1\\n     *     =>  price1e18 = 0.97 * (1e18/1e6) * 1e18\\n     *\\n     *    assume market price of wBTC = $31,503.77, oracle error = $158\\n     *\\n     *     case #1: small amount of wBTC\\n     *         we have 0.0,000,001 wBTC that is worth v = $0.00315 \\u00b1 $0.00001 = 0.00315*1e18 = 315*1e13 \\u00b1 1*1e13\\n     *         actual balance on the asset b = wBTC.balanceOf() =  0.0000001*1e18 = 1e11\\n     *         oracle should return or = oracle.getFiatPrice1e18(wBTC) <=>\\n     *         <=> b*or = v => v/b = 315*1e13 / 1e11 = 315*1e2 \\u00b1 1e2\\n     *         error = or.error * b = 1e2 * 1e11 = 1e13 => 1e13/1e18 usd = 1e-5 = 0.00001 usd\\n     *\\n     *     case #2: large amount of wBTC\\n     *         v = 2,000,000 wBTC = $31,503.77 * 2m \\u00b1 158*2m = $63,007,540,000 \\u00b1 $316,000,000 = 63,007*1e24 \\u00b1 316*1e24\\n     *         for calc convenience we increase error on 0.05 and have v = 63,000*24 \\u00b1 300*1e24 = (630 \\u00b1 3)*1e26\\n     *         b = 2*1e6 * 1e18 = 2*1e24\\n     *         or = v/b = (630 \\u00b1 3)*1e26 / 2*1e24 = 315*1e2 \\u00b1 1.5*1e2\\n     *         error = or.error * b = 1.5*100 * 2*1e24 = 3*1e26 = 3*1e8*1e18 = $300,000,000 ~ $316,000,000\\n     *\\n     *     assume the market price of USDT = $0.97 \\u00b1 $0.00485,\\n     *\\n     *     case #3: little amount of USDT\\n     *         v = USDT amount 0.005 = 0.005*(0.97 \\u00b1 0.00485) = 0.00485*1e18 \\u00b1 0.00002425*1e18 = 485*1e13 \\u00b1 3*1e13\\n     *         we rounded error up on (3000-2425)/2425 ~= +24% for calculation convenience.\\n     *         b = USDT.balanceOf() = 0.005*1e6 = 5*1e3\\n     *         b*or = v => or = v/b = (485*1e13 \\u00b1 3*1e13) / 5*1e3 = 970*1e9 \\u00b1 6*1e9\\n     *         error = 6*1e9 * 5*1e3 / 1e18 = 30*1e12/1e18 = 3*1e-5 = $0,00005\\n     *\\n     *     case #4: lot of USDT\\n     *         v = we have 100,000,000,000 USDT = $97B = 97*1e9*1e18 \\u00b1 0.5*1e9*1e18\\n     *         b = USDT.balanceOf() = 1e11*1e6 = 1e17\\n     *         or = v/b = (97*1e9*1e18 \\u00b1 0.5*1e9*1e18) / 1e17 = 970*1e9 \\u00b1 5*1e9\\n     *         error = 5*1e9 * 1e17 = 5*1e26 = 0.5 * 1e8*1e18\\n     *\\n     * @param asset - address of erc20 token contract\\n     * @return usdPrice1e18 such that asset.balanceOf() * getFiatPrice1e18(asset) / 1e18 == $$ * 1e18\\n     **/\\n    function getFiatPrice1e18(address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa56b9cc86ef5935efecc276e6a3188d518f1a99cad960083a8de35849c997687\",\"license\":\"UNLICENSED\"},\"contracts/periphery/contracts/interfaces/oracle/ISuOracleAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ISuOracle.sol\\\";\\n\\ninterface ISuOracleAggregator is ISuOracle {\\n    /* ===================== STRUCT ===================== */\\n    struct AssetLimitation {\\n        uint256 lowerBound;\\n        uint256 upperBound;\\n    }\\n\\n    /* ===================== EVENTS ===================== */\\n    event OracleLowerBoundWarning(uint256 price);\\n    event OracleUpperBoundWarning(uint256 price);\\n\\n    /* ===================== ERRORS ===================== */\\n    error NoOracleFound(address asset);\\n    error NoOracleImplementation();\\n    error BadOracleId();\\n\\n    /* ====================== VARS ====================== */\\n    function assetToOracle (address asset) external view returns ( uint256 );\\n    function oracleImplementations (uint256 oracleId) external view returns ( ISuOracle );\\n\\n    /* ==================== METHODS ==================== */\\n\\n    /**\\n    * @notice Like getFiatPrice1e18 from ISuOracle, but also checks bounds and emit event if there is an error.\\n    * We should call it in non-view method where we need safePrice from Oracle.\\n    * @param asset - address of asset\\n    **/\\n    function getSafeFiatPrice1e18(address asset) external returns (uint256);\\n\\n    /**\\n    * @notice Change lower bound of asset\\n    * @param asset - address of asset\\n    * @param newLowerBound - new value of lower bound\\n    **/\\n    function setLowerBound(address asset, uint256 newLowerBound) external;\\n\\n    /**\\n    * @notice Change upper bound of asset\\n    * @param asset - address of asset\\n    * @param newUpperBound - new value of upper bound\\n    **/\\n    function setUpperBound(address asset, uint256 newUpperBound) external;\\n\\n    /**\\n       * @notice assign address of oracle implementation to the oracleId\\n    * @param oracleId - number 0,1, etc to assign the oracle\\n    * @param oracleImplementation - an address with ISuOracle implementation contract\\n    **/\\n    function setOracleImplementation(uint256 oracleId, ISuOracle oracleImplementation) external;\\n\\n    /**\\n    * @notice specify what oracleId should be used for each assets. Checks that oracleId has an implementation\\n    **/\\n    function setOracleIdForAssets(address[] memory assets, uint256 oracleId) external;\\n\\n    /* ==================== VIEW METHODS ==================== */\\n    /**\\n    * @return true if oracle is set to this asset, false otherwise\\n    **/\\n    function hasPriceForAsset(address asset) external view returns(bool);\\n}\\n\",\"keccak256\":\"0x9e9f77c54257263b4caa12a57fcc53e970df3a07fa1ae18559b243f21c827a9f\",\"license\":\"UNLICENSED\"},\"contracts/staking/interfaces/ITopStakers.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\npragma solidity ^0.8.0;\\n\\ninterface ITopStakers {\\n    /* ===================== ERRORS ===================== */\\n    error NotStakerFound();\\n    error AmountMustBeMoreThatMinimum();\\n    error InsufficientStake(uint256 available, uint256 requested);\\n\\n    /* ========================= VARS ========================== */\\n\\n    function topStakersCount() external view returns(uint256);\\n\\n    /* ==================== MUTABLE METHODS ==================== */\\n\\n    /**\\n      * @notice Admin function to change number of top stakers\\n     **/\\n    function changeTopStakersCount(uint256 newTopStakersCount) external;\\n\\n    /**\\n      * @notice Admin function to change veToken address\\n     **/\\n    function changeVeToken(address veToken) external;\\n\\n    /**\\n      * @notice Admin function to change minStakingAmount\\n     **/\\n    function changeMinStakingAmount(uint256 minStakingAmount) external;\\n\\n    /**\\n      * @notice User function to add yourself in stakers list to be able to be topStaker for liquidation\\n     **/\\n    function subscribe() external;\\n\\n    /**\\n      * @notice User function to remove yourself from stakers list\\n     **/\\n    function unsubscribe() external;\\n\\n    /**\\n      * @notice Sometimes topStakers can be expired (lock date is over), this function remove such topStakers\\n     **/\\n    function cleanExpiredTopStakers() external;\\n\\n    /**\\n      * @notice Callback that is calling by veToken after adding/removing delegation\\n     **/\\n    function onDelegationChanged(address user, address prevDelegatee, address newDelegatee) external;\\n\\n    /* ==================== VIEW METHODS ==================== */\\n\\n    /**\\n      * @notice Returns if user is top staker or not\\n     **/\\n    function isTopStaker(address staker) external view returns(bool);\\n\\n\\n    /**\\n      * @notice Returns if user is staker with not expired stake\\n     **/\\n    function isStaker(address user) external view returns(bool);\\n\\n    /**\\n      * @notice Returns the list of users that are topStakers\\n     **/\\n    function getTopStakers() external view returns(address[] memory);\\n\\n    /**\\n      * @notice Returns the amount of subscribed users (stakers list length)\\n     **/\\n    function getStakersLength() external view returns(uint256);\\n}\",\"keccak256\":\"0x08d0472df25faa8e9cec77e7f25fa937825df73ffde12474bc17be66a6501fdc\",\"license\":\"BSL 1.1\"}},\"version\":1}",
  "bytecode": "0x60808060405234610016576123c2908161001c8239f35b600080fdfe608080604052600436101561001357600080fd5b600090813560e01c90816301ffc9a714611b905750806303eaa21a14611ac057806303ee9f2214611a9557806338013f0214611a68578063418f2845146119f9578063438280dd146119be578063511df4421461150d578063514fcac71461141957806371d0fb41146113de57806375b238fc146113c25780638e5313e014611387578063a85c38ef146112f7578063b38234f3146112bc578063b5b3b0511461129e578063ba07fc5914611275578063bd5f5be61461123a578063c0c53b8b14610eb5578063d09ef24114610e72578063d0e8fa8214610e37578063d2351cee14610dfc578063d7c8ae8914610db9578063dc97e84e14610d7e578063dd7dc9a914610d60578063e2ed06de14610650578063e9c2651814610615578063ef3391bc146102ab5763f6243a041461014a57600080fd5b346102a85761015836611bd8565b9082526020916036835261016e60408220611e1a565b60c0810151909290610189906001600160401b031642611eb6565b6033548451604051631735856760e31b8082526001600160a01b03928316600483015260189390931c8216938882602481885afa91821561029d579089949392918892610269575b506101e960249392869260ff60e08d0151169161209b565b98015116916040519485938492835260048301525afa92831561025d5792610227575b5061021f9261021a91611cf3565b61207b565b604051908152f35b9091508381813d8311610256575b61023f8183611cb5565b8101031261025157519061021f61020c565b600080fd5b503d610235565b604051903d90823e3d90fd5b809392508591953d8311610296575b6102828183611cb5565b8101031261025157905188936101e96101d1565b503d610278565b6040513d89823e3d90fd5b80fd5b50346102a85760c03660031901126102a8576102c5611c52565b602435906102d1611c68565b916064356001600160a01b0381169190829003610611576084359160ff8316830361060d5760a4356001600160a01b03811690819003610609578061059d57506040516323b872dd60e01b81526020818061033186303360048501611d4f565b03818a6001600160a01b038a165af1801561029d5761056f575b505b60405160208101904382523360601b604082015260018060601b0319808760601b1660548301528460688301528760601b166088820152607c815260a0810181811060018060401b038211176105595760405251902094858752603660205260018060401b03600660408920015416610533575b858752603660205260408720600601546001600160401b031661051a57956006926040926020988451976103f489611c99565b60018060a01b0316885260018060a01b0316898801528387015233606087015260808601528060a0860152600180831b03421660c086015260ff60e0860194168452858152603687522060018060a01b0384511660018060a01b031990818354161782556001820160018060a01b038887015116828254161790556002820160018060a01b0360408701511682825416179055600382019060018060a01b03606087015116908254161790556080840151600482015560a08401516005820155019160c060018060401b039101511682549160ff60401b905160401b169160018060481b031916171790556104e881611daf565b507f12a866cc569301d2ff9fcbbae3decc9e0cf3fa94ddef08dd0de3e9a693fb8d1982604051838152a1604051908152f35b604051634b92340560e01b815260048101879052602490fd5b946001810180911161054557946103c1565b634e487b7160e01b87526011600452602487fd5b634e487b7160e01b600052604160045260246000fd5b61058f9060203d8111610596575b6105878183611cb5565b810190611d1c565b503861034b565b503d61057d565b803b156106095786604051809263ef693bed60e01b82528183816105c5893060048401611d34565b03925af1801561029d576105da575b5061034d565b9095906001600160401b0381116105f55760405294386105d4565b634e487b7160e01b82526041600452602482fd5b8680fd5b8580fd5b8480fd5b50346102a857806003193601126102a85760206040517f3b5d4cc60d3ec3516ee8ae083bd60934f6eb2a6c54b1229985c41bfb092b26038152f35b50346102a85760603660031901126102a8576001600160401b0390604435908282116102a857366023830112156102a857816004013561068f81611cd8565b9261069d6040519485611cb5565b8184523660248383010111610d5c578183926024602093018387013784010152600260015414610d17576002600155602435916004358252603660205260408220936006850154168015610cfe576106f59042611eb6565b845460018601546001600160a01b039081169392911690603c8111610c8857603454604051631bdff1b760e21b81526001600160a01b0390911690602081600481855afa90811561029d578791610c56575b50604051629fabeb60e81b8152602081600481865afa908115610c4b578891610c14575b5060249160209181811115610c0c5750925b60405162650fcd60e31b815233600482015292839182905afa90811561029d578791610bed575b5015610bd5576107c06107b782336120fe565b916004356120fe565b03610bb3575b6004870154808711610bab575b50603354604051632a5001c960e01b81526004810184905290602090829060249082908a9060181c6001600160a01b03165af1908115610b6c578691610b77575b5061082a9160ff60068a015460401c169161209b565b9484602060018060a01b0360335460181c16602460405180948193632a5001c960e01b83528a60048401525af18015610b6c578690610b38575b610873915061021a8884611cf3565b958615610b265760058801610889888254611d71565b90556108998260048a0154611eb6565b8060048a01558015159182610b04575b5050610af2576108ba913390611fdd565b6040516370a0823160e01b8082523060048301529091602083602481875afa928315610a9b578593610abe575b5060405190633517a9e160e11b82528460048301528660248301523360448301526080606483015281815191826084830152875b838110610aa657505060a48183898360209684010152601f8019910116810103018188335af1908115610a9b578591610a7c575b5015610a6a57604051908152306004820152602081602481865afa908115610a5f5785908592610a25575b506109859192611d71565b11610a13576020936109a78460049360018060a01b0360028501541690611fdd565b01546109f45760406109c29160043581526036855220611e8c565b6109cd600435611ec3565b5060008051602061236d833981519152826040516004358152a15b60018055604051908152f35b5060008051602061234d833981519152826040516004358152a16109e8565b60405163395c945760e11b8152600490fd5b9150506020813d602011610a57575b81610a4160209383611cb5565b81010312610a5357518461098561097a565b8380fd5b3d9150610a34565b6040513d86823e3d90fd5b60405163c286d75960e01b8152600490fd5b610a95915060203d602011610596576105878183611cb5565b3861094f565b6040513d87823e3d90fd5b602082820181015160a487840101528593500161091b565b9092506020813d602011610aea575b81610ada60209383611cb5565b81010312610611575191386108e7565b3d9150610acd565b60405163117be23960e31b8152600490fd5b670de0b6b3a7640000925090610b1991611cf3565b04603554101538806108a9565b60405163ebda174360e01b8152600490fd5b506020813d602011610b64575b81610b5260209383611cb5565b8101031261060d576108739051610864565b3d9150610b45565b6040513d88823e3d90fd5b90506020813d602011610ba3575b81610b9260209383611cb5565b8101031261060d575161082a610814565b3d9150610b85565b9550386107d3565b604051636d5e923560e01b815280610bd13360048035908401612108565b0390fd5b60405163a849de1760e01b8152336004820152602490fd5b610c06915060203d602011610596576105878183611cb5565b386107a4565b90509261077d565b90506020813d602011610c43575b81610c2f60209383611cb5565b81010312610c3f5751602461076b565b8780fd5b3d9150610c22565b6040513d8a823e3d90fd5b90506020813d602011610c80575b81610c7160209383611cb5565b81010312610609575138610747565b3d9150610c64565b603454604051636f1e853360e01b815233600482015290602090829060249082906001600160a01b03165afa908115610b6c578691610cdf575b506107c657604051631953278360e21b8152336004820152602490fd5b610cf8915060203d602011610596576105878183611cb5565b38610cc2565b60246040516373a98b6360e11b81526004356004820152fd5b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b8280fd5b50346102a857806003193601126102a8576020603554604051908152f35b50346102a857806003193601126102a85760206040517f9a9aef7c1247d5fc769b0185c052913e39673da29a880317dfd20ebf86f26a498152f35b50346102a85760403660031901126102a857610dd3611bc8565b60ff602435911682526039602052604082206002821015610d5c57602092500154604051908152f35b50346102a857806003193601126102a85760206040517fb0fdd1623e42dbffda4acd8bd643e1cb69f00f0e83abeaa8150ee42cf0fd105e8152f35b50346102a857806003193601126102a85760206040517f76d0567582f23e1e9d7a13eeba60f9aea9d69b8da87ca27a8bf3698b35c653db8152f35b50346102a85760203660031901126102a857610ea6604061010092610e95612121565b506004358152603660205220611e1a565b610eb36040518092611bee565bf35b50346102a85760603660031901126102a857610ecf611c52565b6001600160a01b0390602435908282168203610a5357610eed611c68565b9284549360ff93848660081c16159384809561122e575b8015611218575b156111bc57600196858860ff198316178a556111ab575b508754868160081c16156111525762010000600160b01b031916601082901b62010000600160b01b0316178855831680159081156110f6575b506110e4576033906202010062ffffff1983541617825560405195610f7f87611c7e565b610384875260209689888201528980526039885260408a2090898b5b600281106110ce5750505050604051610fb381611c7e565b6202bf208152898882015281845460081c168a526039885260408a2090898b5b600281106110b7575050505060405190610fec82611c7e565b6206978082528988830152835460101c168952603987526040892090888a5b600281106110a057505068056bc75e2d63100000603555505081546301000000600160b81b03191660189190911b6301000000600160b81b0316179055603480546001600160a01b03191692909116919091179055611068578280f35b825461ff00191683556040519182527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249891a138808280f35b8962ffffff8451169301928185015501899061100b565b8a62ffffff84511693019281850155018a90610fd3565b8a61ffff84511693019281850155018a90610f9b565b6040516384d942fd60e01b8152600490fd5b6040516301ffc9a760e01b8152637965db0b60e01b60048201529150602090829060249082905afa908115610c4b578891611134575b501538610f5b565b61114c915060203d8111610596576105878183611cb5565b3861112c565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b61ffff191661010117885538610f22565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b158015610f0b5750600186881614610f0b565b50600186881610610f04565b50346102a857806003193601126102a85760206040517f4f14c8366fa999817edc9f29824eb88a00cc31225e2156f399da4bc91049eb108152f35b50346102a857806003193601126102a8576034546040516001600160a01b039091168152602090f35b50346102a857806003193601126102a8576020603754604051908152f35b50346102a857806003193601126102a85760206040517fd83f5343da19b478b15a140c301a868be9e02603958f38fbd822b9d5c0a289168152f35b50346102a85760203660031901126102a857604061010091600435815260366020522060ff60018060a01b038083541692816001820154169180600283015416906003830154166004830154916006600585015494015494604051978852602088015260408701526060860152608085015260a084015260018060401b03811660c084015260401c1660e0820152f35b50346102a857806003193601126102a85760206040517fe453bacb314e78dcd5192e6b1a2b1f0e7c76e92f6b7e429a6a90f04e39db3b768152f35b50346102a857806003193601126102a857602090604051908152f35b50346102a857806003193601126102a85760206040517f880a91047114272656e533301261260c75e4d11543ac7303d6fe4204579ec7278152f35b50346102a85760203660031901126102a857600435808252603660205261144260408320611e1a565b60c08101516001600160401b0316156114f45760408101516001600160a01b0392908316331415806114e4575b6114d2576114ab8260807fc41f4ceb2938876c35e61b705e9d2f18a02c4a26ce5e049a6308a943d46851b3956020955116910151903390611fdd565b808452603682526114be60408520611e8c565b6114c781611ec3565b50604051908152a180f35b60405163da383fb560e01b8152600490fd5b508260608301511633141561146f565b6040516373a98b6360e11b815260048101839052602490fd5b50346102a85761151c36611bd8565b91829180825260209360368552604083209360018060401b0360068601541680156119a55761154b9042611eb6565b94603c861161193257603454604051631bdff1b760e21b81526001600160a01b03909116908881600481855afa90811561029d578791611905575b50604051629fabeb60e81b81528981600481865afa908115610c4b57908a9189916118d5575b5060249290818111156118cd5750925b60405162650fcd60e31b815233600482015292839182905afa90811561029d5787916118b0575b5015610bd5576115fd6115f682336120fe565b91866120fe565b03611894575b6004810192835480911161188c575b506033548154604051632a5001c960e01b8082526001600160a01b0392831660048301529891928a90829060181c8516818b5a92602493f1908115610c4b57889161185d575b5061166e9160ff600686015460401c169161209b565b968160335460181c16896001850192602485855416918b6040519586948593845260048401525af18015610c4b57889061182e575b6116b2915061021a8a87611cf3565b978815610b2657600584016116c88a8254611d71565b90556116d5858754611eb6565b808755801515918261180c575b5050610af2578682819254168a828b61172a8760028a0154169361171c6040519384928301966323b872dd60e01b88523360248501611d4f565b03601f198101835282611cb5565b51925af1611736611fad565b816117dc575b50156117b15791611754918895949333915416611fdd565b546117945761177b6040848360008051602061236d83398151915296526036855220611e8c565b61178481611ec3565b50604051908152a1604051908152f35b60008051602061234d8339815191529250604051908152a161021f565b60405162461bcd60e51b815260048101899052600360248201526229aa2360e91b6044820152606490fd5b8051801592508a9083156117f4575b5050503861173c565b6118049350820181019101611d1c565b3889816117eb565b670de0b6b3a764000092509061182191611cf3565b04603554101538806116e2565b508981813d8311611856575b6118448183611cb5565b81010312610c3f576116b290516116a3565b503d61183a565b90508981813d8311611885575b6118748183611cb5565b81010312610c3f575161166e611658565b503d61186a565b915038611612565b604051636d5e923560e01b815280610bd1338760048401612108565b6118c79150893d8b11610596576105878183611cb5565b386115e3565b9050926115bc565b82819392503d83116118fe575b6118ec8183611cb5565b81010312610c3f5751899060246115ac565b503d6118e2565b90508881813d831161192b575b61191c8183611cb5565b81010312610609575138611586565b503d611912565b603454604051636f1e853360e01b8152336004820152908890829060249082906001600160a01b03165afa908115610b6c578691611988575b5061160357604051631953278360e21b8152336004820152602490fd5b61199f9150883d8a11610596576105878183611cb5565b3861196b565b6040516373a98b6360e11b815260048101859052602490fd5b50346102a857806003193601126102a85760206040517f39f61ca2a1a28fee144218173ec637b649a353e4026b2738c673800e5bf1437b8152f35b50346102a857611a11611a0b36611bd8565b9061218a565b60405190602080830190808452825180925280604085019301945b828110611a395784840385f35b90919282610120600192828951611a51838251611bee565b015161010082015201960191019492919094611a2c565b50346102a857806003193601126102a85760335460405160189190911c6001600160a01b03168152602090f35b50346102a857806003193601126102a8575460405160109190911c6001600160a01b03168152602090f35b50346102a85760603660031901126102a857611ada611bc8565b36606411611b8c578154604051632474521560e21b8152600481018490523360248201526020929183908290604490829060101c6001600160a01b03165afa908115610a5f578491611b6f575b5015611b5d5760ff1682526039815260408220602490835b60028110611b4b578480f35b82358282015591830191600101611b3f565b604051631886ea7d60e11b8152600490fd5b611b869150833d8511610596576105878183611cb5565b38611b27565b5080fd5b905034611b8c576020366003190112611b8c5760043563ffffffff60e01b8116809103610d5c576346fed7f760e11b14815260209150f35b6004359060ff8216820361025157565b6040906003190112610251576004359060243590565b60ff60e0809260018060a01b0380825116865280602083015116602087015280604083015116604087015260608201511660608601526080810151608086015260a081015160a086015260018060401b0360c08201511660c0860152015116910152565b600435906001600160a01b038216820361025157565b604435906001600160a01b038216820361025157565b604081019081106001600160401b0382111761055957604052565b61010081019081106001600160401b0382111761055957604052565b601f909101601f19168101906001600160401b0382119082101761055957604052565b6001600160401b03811161055957601f01601f191660200190565b81810292918115918404141715611d0657565b634e487b7160e01b600052601160045260246000fd5b90816020910312610251575180151581036102515790565b6001600160a01b039091168152602081019190915260400190565b6001600160a01b03918216815291166020820152604081019190915260600190565b91908201809211611d0657565b603754811015611d9957603760005260206000200190600090565b634e487b7160e01b600052603260045260246000fd5b600081815260386020526040812054611e1557603754600160401b8110156105f5579082611e01611de884600160409601603755611d7e565b819391549060031b600019811b9283911b169119161790565b905560375492815260386020522055600190565b905090565b90604051611e2781611c99565b60e060ff6006839560018060a01b03808254168652806001830154166020870152806002830154166040870152600382015416606086015260048101546080860152600581015460a0860152015460018060401b03811660c085015260401c16910152565b60066000918281558260018201558260028201558260038201558260048201558260058201550155565b91908203918211611d0657565b6000818152603860205260408120549091908015611fa85760001990808201818111611f945760375490838201918211611f8057808203611f4c575b5050506037548015611f3857810190611f1782611d7e565b909182549160031b1b19169055603755815260386020526040812055600190565b634e487b7160e01b84526031600452602484fd5b611f6a611f5b611de893611d7e565b90549060031b1c928392611d7e565b9055845260386020526040842055388080611eff565b634e487b7160e01b86526011600452602486fd5b634e487b7160e01b85526011600452602485fd5b505090565b3d15611fd8573d90611fbe82611cd8565b91611fcc6040519384611cb5565b82523d6000602084013e565b606090565b600092918361171c6120088295604051928391602083019663a9059cbb60e01b885260248401611d34565b51925af1612014611fad565b8161204c575b501561202257565b60405162461bcd60e51b815260206004820152600260248201526114d560f21b6044820152606490fd5b8051801592508215612061575b50503861201a565b6120749250602080918301019101611d1c565b3880612059565b8115612085570490565b634e487b7160e01b600052601260045260246000fd5b9160ff166000526039602052604060002054600160406000200154918181116120e157926120d36120d99261021a6120de9684611cf3565b90611eb6565b611eb6565b90565b5050508060031b9080820460081490151715611d0657600a900490565b8115612085570690565b9081526001600160a01b03909116602082015260400190565b6040519061212e82611c99565b8160e06000918281528260208201528260408201528260608201528260808201528260a08201528260c08201520152565b6001600160401b0381116105595760051b60200190565b8051821015611d995760209160051b010190565b604080516037805480835260009182529195946020949391927f42a7b7dd785cd69714a189dffb3fd7d7174edc9ece837694ce50f7078f7c31ae90889087820190865b89828210612336575050506121e492500388611cb5565b86519081156122fd57816121f88287611d71565b11156122ec5750925b808411156122e5576122138185611eb6565b945b61221e8661215f565b9561222b84519788611cb5565b80875261223a601f199161215f565b0181855b8281106122bd57505050815b85811061225c57509496505050505050565b6122ab612269828b612176565b51808752603684528587209061228987519261228484611c7e565b611e1a565b8252848201526122998584611eb6565b906122a4828b612176565b5288612176565b506000198114611f945760010161224a565b85516122c881611c7e565b6122d0612121565b8152878382015282828b01015201829061223e565b8294612215565b6122f7915084611d71565b92612201565b505080519495509092840191506001600160401b038211848310176123225752815290565b634e487b7160e01b83526041600452602483fd5b855484526001958601958d9550930192016121cd56fec238a2d1c485b17bfd980b5e6d0483704cd4720118eb06215758d49f85ea8963cdf98e0235c72ad7ae8de32249da25cc98298c8f11710c55a3d58e9e7ac69f94a26469706673582212202c216033c9578848232defc2db18e63553287f77faeaad3dd4a7e683101576f164736f6c63430008110033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b600090813560e01c90816301ffc9a714611b905750806303eaa21a14611ac057806303ee9f2214611a9557806338013f0214611a68578063418f2845146119f9578063438280dd146119be578063511df4421461150d578063514fcac71461141957806371d0fb41146113de57806375b238fc146113c25780638e5313e014611387578063a85c38ef146112f7578063b38234f3146112bc578063b5b3b0511461129e578063ba07fc5914611275578063bd5f5be61461123a578063c0c53b8b14610eb5578063d09ef24114610e72578063d0e8fa8214610e37578063d2351cee14610dfc578063d7c8ae8914610db9578063dc97e84e14610d7e578063dd7dc9a914610d60578063e2ed06de14610650578063e9c2651814610615578063ef3391bc146102ab5763f6243a041461014a57600080fd5b346102a85761015836611bd8565b9082526020916036835261016e60408220611e1a565b60c0810151909290610189906001600160401b031642611eb6565b6033548451604051631735856760e31b8082526001600160a01b03928316600483015260189390931c8216938882602481885afa91821561029d579089949392918892610269575b506101e960249392869260ff60e08d0151169161209b565b98015116916040519485938492835260048301525afa92831561025d5792610227575b5061021f9261021a91611cf3565b61207b565b604051908152f35b9091508381813d8311610256575b61023f8183611cb5565b8101031261025157519061021f61020c565b600080fd5b503d610235565b604051903d90823e3d90fd5b809392508591953d8311610296575b6102828183611cb5565b8101031261025157905188936101e96101d1565b503d610278565b6040513d89823e3d90fd5b80fd5b50346102a85760c03660031901126102a8576102c5611c52565b602435906102d1611c68565b916064356001600160a01b0381169190829003610611576084359160ff8316830361060d5760a4356001600160a01b03811690819003610609578061059d57506040516323b872dd60e01b81526020818061033186303360048501611d4f565b03818a6001600160a01b038a165af1801561029d5761056f575b505b60405160208101904382523360601b604082015260018060601b0319808760601b1660548301528460688301528760601b166088820152607c815260a0810181811060018060401b038211176105595760405251902094858752603660205260018060401b03600660408920015416610533575b858752603660205260408720600601546001600160401b031661051a57956006926040926020988451976103f489611c99565b60018060a01b0316885260018060a01b0316898801528387015233606087015260808601528060a0860152600180831b03421660c086015260ff60e0860194168452858152603687522060018060a01b0384511660018060a01b031990818354161782556001820160018060a01b038887015116828254161790556002820160018060a01b0360408701511682825416179055600382019060018060a01b03606087015116908254161790556080840151600482015560a08401516005820155019160c060018060401b039101511682549160ff60401b905160401b169160018060481b031916171790556104e881611daf565b507f12a866cc569301d2ff9fcbbae3decc9e0cf3fa94ddef08dd0de3e9a693fb8d1982604051838152a1604051908152f35b604051634b92340560e01b815260048101879052602490fd5b946001810180911161054557946103c1565b634e487b7160e01b87526011600452602487fd5b634e487b7160e01b600052604160045260246000fd5b61058f9060203d8111610596575b6105878183611cb5565b810190611d1c565b503861034b565b503d61057d565b803b156106095786604051809263ef693bed60e01b82528183816105c5893060048401611d34565b03925af1801561029d576105da575b5061034d565b9095906001600160401b0381116105f55760405294386105d4565b634e487b7160e01b82526041600452602482fd5b8680fd5b8580fd5b8480fd5b50346102a857806003193601126102a85760206040517f3b5d4cc60d3ec3516ee8ae083bd60934f6eb2a6c54b1229985c41bfb092b26038152f35b50346102a85760603660031901126102a8576001600160401b0390604435908282116102a857366023830112156102a857816004013561068f81611cd8565b9261069d6040519485611cb5565b8184523660248383010111610d5c578183926024602093018387013784010152600260015414610d17576002600155602435916004358252603660205260408220936006850154168015610cfe576106f59042611eb6565b845460018601546001600160a01b039081169392911690603c8111610c8857603454604051631bdff1b760e21b81526001600160a01b0390911690602081600481855afa90811561029d578791610c56575b50604051629fabeb60e81b8152602081600481865afa908115610c4b578891610c14575b5060249160209181811115610c0c5750925b60405162650fcd60e31b815233600482015292839182905afa90811561029d578791610bed575b5015610bd5576107c06107b782336120fe565b916004356120fe565b03610bb3575b6004870154808711610bab575b50603354604051632a5001c960e01b81526004810184905290602090829060249082908a9060181c6001600160a01b03165af1908115610b6c578691610b77575b5061082a9160ff60068a015460401c169161209b565b9484602060018060a01b0360335460181c16602460405180948193632a5001c960e01b83528a60048401525af18015610b6c578690610b38575b610873915061021a8884611cf3565b958615610b265760058801610889888254611d71565b90556108998260048a0154611eb6565b8060048a01558015159182610b04575b5050610af2576108ba913390611fdd565b6040516370a0823160e01b8082523060048301529091602083602481875afa928315610a9b578593610abe575b5060405190633517a9e160e11b82528460048301528660248301523360448301526080606483015281815191826084830152875b838110610aa657505060a48183898360209684010152601f8019910116810103018188335af1908115610a9b578591610a7c575b5015610a6a57604051908152306004820152602081602481865afa908115610a5f5785908592610a25575b506109859192611d71565b11610a13576020936109a78460049360018060a01b0360028501541690611fdd565b01546109f45760406109c29160043581526036855220611e8c565b6109cd600435611ec3565b5060008051602061236d833981519152826040516004358152a15b60018055604051908152f35b5060008051602061234d833981519152826040516004358152a16109e8565b60405163395c945760e11b8152600490fd5b9150506020813d602011610a57575b81610a4160209383611cb5565b81010312610a5357518461098561097a565b8380fd5b3d9150610a34565b6040513d86823e3d90fd5b60405163c286d75960e01b8152600490fd5b610a95915060203d602011610596576105878183611cb5565b3861094f565b6040513d87823e3d90fd5b602082820181015160a487840101528593500161091b565b9092506020813d602011610aea575b81610ada60209383611cb5565b81010312610611575191386108e7565b3d9150610acd565b60405163117be23960e31b8152600490fd5b670de0b6b3a7640000925090610b1991611cf3565b04603554101538806108a9565b60405163ebda174360e01b8152600490fd5b506020813d602011610b64575b81610b5260209383611cb5565b8101031261060d576108739051610864565b3d9150610b45565b6040513d88823e3d90fd5b90506020813d602011610ba3575b81610b9260209383611cb5565b8101031261060d575161082a610814565b3d9150610b85565b9550386107d3565b604051636d5e923560e01b815280610bd13360048035908401612108565b0390fd5b60405163a849de1760e01b8152336004820152602490fd5b610c06915060203d602011610596576105878183611cb5565b386107a4565b90509261077d565b90506020813d602011610c43575b81610c2f60209383611cb5565b81010312610c3f5751602461076b565b8780fd5b3d9150610c22565b6040513d8a823e3d90fd5b90506020813d602011610c80575b81610c7160209383611cb5565b81010312610609575138610747565b3d9150610c64565b603454604051636f1e853360e01b815233600482015290602090829060249082906001600160a01b03165afa908115610b6c578691610cdf575b506107c657604051631953278360e21b8152336004820152602490fd5b610cf8915060203d602011610596576105878183611cb5565b38610cc2565b60246040516373a98b6360e11b81526004356004820152fd5b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b8280fd5b50346102a857806003193601126102a8576020603554604051908152f35b50346102a857806003193601126102a85760206040517f9a9aef7c1247d5fc769b0185c052913e39673da29a880317dfd20ebf86f26a498152f35b50346102a85760403660031901126102a857610dd3611bc8565b60ff602435911682526039602052604082206002821015610d5c57602092500154604051908152f35b50346102a857806003193601126102a85760206040517fb0fdd1623e42dbffda4acd8bd643e1cb69f00f0e83abeaa8150ee42cf0fd105e8152f35b50346102a857806003193601126102a85760206040517f76d0567582f23e1e9d7a13eeba60f9aea9d69b8da87ca27a8bf3698b35c653db8152f35b50346102a85760203660031901126102a857610ea6604061010092610e95612121565b506004358152603660205220611e1a565b610eb36040518092611bee565bf35b50346102a85760603660031901126102a857610ecf611c52565b6001600160a01b0390602435908282168203610a5357610eed611c68565b9284549360ff93848660081c16159384809561122e575b8015611218575b156111bc57600196858860ff198316178a556111ab575b508754868160081c16156111525762010000600160b01b031916601082901b62010000600160b01b0316178855831680159081156110f6575b506110e4576033906202010062ffffff1983541617825560405195610f7f87611c7e565b610384875260209689888201528980526039885260408a2090898b5b600281106110ce5750505050604051610fb381611c7e565b6202bf208152898882015281845460081c168a526039885260408a2090898b5b600281106110b7575050505060405190610fec82611c7e565b6206978082528988830152835460101c168952603987526040892090888a5b600281106110a057505068056bc75e2d63100000603555505081546301000000600160b81b03191660189190911b6301000000600160b81b0316179055603480546001600160a01b03191692909116919091179055611068578280f35b825461ff00191683556040519182527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249891a138808280f35b8962ffffff8451169301928185015501899061100b565b8a62ffffff84511693019281850155018a90610fd3565b8a61ffff84511693019281850155018a90610f9b565b6040516384d942fd60e01b8152600490fd5b6040516301ffc9a760e01b8152637965db0b60e01b60048201529150602090829060249082905afa908115610c4b578891611134575b501538610f5b565b61114c915060203d8111610596576105878183611cb5565b3861112c565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b61ffff191661010117885538610f22565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b158015610f0b5750600186881614610f0b565b50600186881610610f04565b50346102a857806003193601126102a85760206040517f4f14c8366fa999817edc9f29824eb88a00cc31225e2156f399da4bc91049eb108152f35b50346102a857806003193601126102a8576034546040516001600160a01b039091168152602090f35b50346102a857806003193601126102a8576020603754604051908152f35b50346102a857806003193601126102a85760206040517fd83f5343da19b478b15a140c301a868be9e02603958f38fbd822b9d5c0a289168152f35b50346102a85760203660031901126102a857604061010091600435815260366020522060ff60018060a01b038083541692816001820154169180600283015416906003830154166004830154916006600585015494015494604051978852602088015260408701526060860152608085015260a084015260018060401b03811660c084015260401c1660e0820152f35b50346102a857806003193601126102a85760206040517fe453bacb314e78dcd5192e6b1a2b1f0e7c76e92f6b7e429a6a90f04e39db3b768152f35b50346102a857806003193601126102a857602090604051908152f35b50346102a857806003193601126102a85760206040517f880a91047114272656e533301261260c75e4d11543ac7303d6fe4204579ec7278152f35b50346102a85760203660031901126102a857600435808252603660205261144260408320611e1a565b60c08101516001600160401b0316156114f45760408101516001600160a01b0392908316331415806114e4575b6114d2576114ab8260807fc41f4ceb2938876c35e61b705e9d2f18a02c4a26ce5e049a6308a943d46851b3956020955116910151903390611fdd565b808452603682526114be60408520611e8c565b6114c781611ec3565b50604051908152a180f35b60405163da383fb560e01b8152600490fd5b508260608301511633141561146f565b6040516373a98b6360e11b815260048101839052602490fd5b50346102a85761151c36611bd8565b91829180825260209360368552604083209360018060401b0360068601541680156119a55761154b9042611eb6565b94603c861161193257603454604051631bdff1b760e21b81526001600160a01b03909116908881600481855afa90811561029d578791611905575b50604051629fabeb60e81b81528981600481865afa908115610c4b57908a9189916118d5575b5060249290818111156118cd5750925b60405162650fcd60e31b815233600482015292839182905afa90811561029d5787916118b0575b5015610bd5576115fd6115f682336120fe565b91866120fe565b03611894575b6004810192835480911161188c575b506033548154604051632a5001c960e01b8082526001600160a01b0392831660048301529891928a90829060181c8516818b5a92602493f1908115610c4b57889161185d575b5061166e9160ff600686015460401c169161209b565b968160335460181c16896001850192602485855416918b6040519586948593845260048401525af18015610c4b57889061182e575b6116b2915061021a8a87611cf3565b978815610b2657600584016116c88a8254611d71565b90556116d5858754611eb6565b808755801515918261180c575b5050610af2578682819254168a828b61172a8760028a0154169361171c6040519384928301966323b872dd60e01b88523360248501611d4f565b03601f198101835282611cb5565b51925af1611736611fad565b816117dc575b50156117b15791611754918895949333915416611fdd565b546117945761177b6040848360008051602061236d83398151915296526036855220611e8c565b61178481611ec3565b50604051908152a1604051908152f35b60008051602061234d8339815191529250604051908152a161021f565b60405162461bcd60e51b815260048101899052600360248201526229aa2360e91b6044820152606490fd5b8051801592508a9083156117f4575b5050503861173c565b6118049350820181019101611d1c565b3889816117eb565b670de0b6b3a764000092509061182191611cf3565b04603554101538806116e2565b508981813d8311611856575b6118448183611cb5565b81010312610c3f576116b290516116a3565b503d61183a565b90508981813d8311611885575b6118748183611cb5565b81010312610c3f575161166e611658565b503d61186a565b915038611612565b604051636d5e923560e01b815280610bd1338760048401612108565b6118c79150893d8b11610596576105878183611cb5565b386115e3565b9050926115bc565b82819392503d83116118fe575b6118ec8183611cb5565b81010312610c3f5751899060246115ac565b503d6118e2565b90508881813d831161192b575b61191c8183611cb5565b81010312610609575138611586565b503d611912565b603454604051636f1e853360e01b8152336004820152908890829060249082906001600160a01b03165afa908115610b6c578691611988575b5061160357604051631953278360e21b8152336004820152602490fd5b61199f9150883d8a11610596576105878183611cb5565b3861196b565b6040516373a98b6360e11b815260048101859052602490fd5b50346102a857806003193601126102a85760206040517f39f61ca2a1a28fee144218173ec637b649a353e4026b2738c673800e5bf1437b8152f35b50346102a857611a11611a0b36611bd8565b9061218a565b60405190602080830190808452825180925280604085019301945b828110611a395784840385f35b90919282610120600192828951611a51838251611bee565b015161010082015201960191019492919094611a2c565b50346102a857806003193601126102a85760335460405160189190911c6001600160a01b03168152602090f35b50346102a857806003193601126102a8575460405160109190911c6001600160a01b03168152602090f35b50346102a85760603660031901126102a857611ada611bc8565b36606411611b8c578154604051632474521560e21b8152600481018490523360248201526020929183908290604490829060101c6001600160a01b03165afa908115610a5f578491611b6f575b5015611b5d5760ff1682526039815260408220602490835b60028110611b4b578480f35b82358282015591830191600101611b3f565b604051631886ea7d60e11b8152600490fd5b611b869150833d8511610596576105878183611cb5565b38611b27565b5080fd5b905034611b8c576020366003190112611b8c5760043563ffffffff60e01b8116809103610d5c576346fed7f760e11b14815260209150f35b6004359060ff8216820361025157565b6040906003190112610251576004359060243590565b60ff60e0809260018060a01b0380825116865280602083015116602087015280604083015116604087015260608201511660608601526080810151608086015260a081015160a086015260018060401b0360c08201511660c0860152015116910152565b600435906001600160a01b038216820361025157565b604435906001600160a01b038216820361025157565b604081019081106001600160401b0382111761055957604052565b61010081019081106001600160401b0382111761055957604052565b601f909101601f19168101906001600160401b0382119082101761055957604052565b6001600160401b03811161055957601f01601f191660200190565b81810292918115918404141715611d0657565b634e487b7160e01b600052601160045260246000fd5b90816020910312610251575180151581036102515790565b6001600160a01b039091168152602081019190915260400190565b6001600160a01b03918216815291166020820152604081019190915260600190565b91908201809211611d0657565b603754811015611d9957603760005260206000200190600090565b634e487b7160e01b600052603260045260246000fd5b600081815260386020526040812054611e1557603754600160401b8110156105f5579082611e01611de884600160409601603755611d7e565b819391549060031b600019811b9283911b169119161790565b905560375492815260386020522055600190565b905090565b90604051611e2781611c99565b60e060ff6006839560018060a01b03808254168652806001830154166020870152806002830154166040870152600382015416606086015260048101546080860152600581015460a0860152015460018060401b03811660c085015260401c16910152565b60066000918281558260018201558260028201558260038201558260048201558260058201550155565b91908203918211611d0657565b6000818152603860205260408120549091908015611fa85760001990808201818111611f945760375490838201918211611f8057808203611f4c575b5050506037548015611f3857810190611f1782611d7e565b909182549160031b1b19169055603755815260386020526040812055600190565b634e487b7160e01b84526031600452602484fd5b611f6a611f5b611de893611d7e565b90549060031b1c928392611d7e565b9055845260386020526040842055388080611eff565b634e487b7160e01b86526011600452602486fd5b634e487b7160e01b85526011600452602485fd5b505090565b3d15611fd8573d90611fbe82611cd8565b91611fcc6040519384611cb5565b82523d6000602084013e565b606090565b600092918361171c6120088295604051928391602083019663a9059cbb60e01b885260248401611d34565b51925af1612014611fad565b8161204c575b501561202257565b60405162461bcd60e51b815260206004820152600260248201526114d560f21b6044820152606490fd5b8051801592508215612061575b50503861201a565b6120749250602080918301019101611d1c565b3880612059565b8115612085570490565b634e487b7160e01b600052601260045260246000fd5b9160ff166000526039602052604060002054600160406000200154918181116120e157926120d36120d99261021a6120de9684611cf3565b90611eb6565b611eb6565b90565b5050508060031b9080820460081490151715611d0657600a900490565b8115612085570690565b9081526001600160a01b03909116602082015260400190565b6040519061212e82611c99565b8160e06000918281528260208201528260408201528260608201528260808201528260a08201528260c08201520152565b6001600160401b0381116105595760051b60200190565b8051821015611d995760209160051b010190565b604080516037805480835260009182529195946020949391927f42a7b7dd785cd69714a189dffb3fd7d7174edc9ece837694ce50f7078f7c31ae90889087820190865b89828210612336575050506121e492500388611cb5565b86519081156122fd57816121f88287611d71565b11156122ec5750925b808411156122e5576122138185611eb6565b945b61221e8661215f565b9561222b84519788611cb5565b80875261223a601f199161215f565b0181855b8281106122bd57505050815b85811061225c57509496505050505050565b6122ab612269828b612176565b51808752603684528587209061228987519261228484611c7e565b611e1a565b8252848201526122998584611eb6565b906122a4828b612176565b5288612176565b506000198114611f945760010161224a565b85516122c881611c7e565b6122d0612121565b8152878382015282828b01015201829061223e565b8294612215565b6122f7915084611d71565b92612201565b505080519495509092840191506001600160401b038211848310176123225752815290565b634e487b7160e01b83526041600452602483fd5b855484526001958601958d9550930192016121cd56fec238a2d1c485b17bfd980b5e6d0483704cd4720118eb06215758d49f85ea8963cdf98e0235c72ad7ae8de32249da25cc98298c8f11710c55a3d58e9e7ac69f94a26469706673582212202c216033c9578848232defc2db18e63553287f77faeaad3dd4a7e683101576f164736f6c63430008110033",
  "devdoc": {
    "details": "See IExchange interface for full details.",
    "kind": "dev",
    "methods": {
      "addOrder(address,uint256,address,address,uint8,address)": {
        "details": "This swap is async, because depends on how arbitrage bots will fill this order. Emits OrderAdded() event. Before addOrder user needs to approve token2sell for exchange contract",
        "params": {
          "amount2sell": "- Amount of {token2sell} to sell",
          "beneficiary": "- Address that will receive {token2buy} after filling order.",
          "collateralJoin": "- address of collateral adapter*",
          "discountType": "- Speed of decreasing swap price. { 0 - aggressive, 1 - middle, 2 - conservative }",
          "token2buy": "- Address of token to buy",
          "token2sell": "- Address of token to sell"
        }
      },
      "cancelOrder(uint256)": {
        "params": {
          "orderId": "- Id of order to cancel.*"
        }
      },
      "fillOrderAsFlashLoan(uint256,uint256,bytes)": {
        "details": "Caller contract receive orders {token2sell} and after that his stableunitFillOrderCallback() is called. At the end of thi callback contract should send some amount of another token back to Exchange contract.",
        "params": {
          "data": "- encoded data to pass to callback function*",
          "inAmount": "- Amount of {token2sell} to receive",
          "orderId": "- Id of order to fill."
        }
      },
      "getExpectedOrderOutcome(uint256,uint256)": {
        "returns": {
          "outAmount": "The amount of outcome that caller will receive if he will fill {orderId} with {inAmount} of {token2sell}*"
        }
      },
      "getOrder(uint256)": {
        "returns": {
          "_0": "Order with id = {orderId}*"
        }
      },
      "getOrdersCount()": {
        "returns": {
          "_0": "The amount of not full-filled orders*"
        }
      },
      "setPriceCurve(uint8,uint256[2])": {
        "params": {
          "discountType": "- discount type to change",
          "newPriceCurve": "- parameters of formula*"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      }
    },
    "title": "Exchange",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "DUST_THRESHOLD()": {
        "notice": "Amount of minimum amountLeft in order. It's measured in fiat. For example DUST_THRESHOLD = 100 * 1e18 => it's 100 USD*"
      },
      "addOrder(address,uint256,address,address,uint8,address)": {
        "notice": "Add order to swap {token2sell} to {token2buy}."
      },
      "cancelOrder(uint256)": {
        "notice": "Only user who place order or who is beneficiary can cancelOrder();"
      },
      "fillOrderAsFlashLoan(uint256,uint256,bytes)": {
        "notice": "Fill order with flash-loan like logic"
      },
      "getAllOrders(uint256,uint256)": {
        "notice": "This method can be deleted after we'll add GraphQL to watch orders*"
      },
      "priceCurve(uint8,uint256)": {
        "notice": "priceCurve is like price_t = price_0 * (1 - t/priceCurve[0]) - priceCurve[1] from timePassed = 0 to t priceCurve decrease linear, but after t (when discount is 20%), it's constant*"
      },
      "setPriceCurve(uint8,uint256[2])": {
        "notice": "Function to update price curve - how fast {token2sell} price will decrease/increase"
      }
    },
    "notice": "Main contract of Exchange module. Here we can add order or fill it to get profit.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 462,
        "contract": "contracts/exchange/contracts/Exchange.sol:Exchange",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 465,
        "contract": "contracts/exchange/contracts/Exchange.sol:Exchange",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 26374,
        "contract": "contracts/exchange/contracts/Exchange.sol:Exchange",
        "label": "ACCESS_CONTROL_SINGLETON",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(ISuAccessControl)29456"
      },
      {
        "astId": 639,
        "contract": "contracts/exchange/contracts/Exchange.sol:Exchange",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 708,
        "contract": "contracts/exchange/contracts/Exchange.sol:Exchange",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 15784,
        "contract": "contracts/exchange/contracts/Exchange.sol:Exchange",
        "label": "DISCOUNT_TYPE_AGGRESSIVE",
        "offset": 0,
        "slot": "51",
        "type": "t_uint8"
      },
      {
        "astId": 15786,
        "contract": "contracts/exchange/contracts/Exchange.sol:Exchange",
        "label": "DISCOUNT_TYPE_MIDDLE",
        "offset": 1,
        "slot": "51",
        "type": "t_uint8"
      },
      {
        "astId": 15788,
        "contract": "contracts/exchange/contracts/Exchange.sol:Exchange",
        "label": "DISCOUNT_TYPE_CONSERVATIVE",
        "offset": 2,
        "slot": "51",
        "type": "t_uint8"
      },
      {
        "astId": 15791,
        "contract": "contracts/exchange/contracts/Exchange.sol:Exchange",
        "label": "ORACLE",
        "offset": 3,
        "slot": "51",
        "type": "t_contract(ISuOracleAggregator)29701"
      },
      {
        "astId": 15794,
        "contract": "contracts/exchange/contracts/Exchange.sol:Exchange",
        "label": "TOP_STAKERS",
        "offset": 0,
        "slot": "52",
        "type": "t_contract(ITopStakers)35463"
      },
      {
        "astId": 15797,
        "contract": "contracts/exchange/contracts/Exchange.sol:Exchange",
        "label": "DUST_THRESHOLD",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 15806,
        "contract": "contracts/exchange/contracts/Exchange.sol:Exchange",
        "label": "orders",
        "offset": 0,
        "slot": "54",
        "type": "t_mapping(t_uint256,t_struct(Order)16900_storage)"
      },
      {
        "astId": 15809,
        "contract": "contracts/exchange/contracts/Exchange.sol:Exchange",
        "label": "orderIdSet",
        "offset": 0,
        "slot": "55",
        "type": "t_struct(UintSet)4886_storage"
      },
      {
        "astId": 15816,
        "contract": "contracts/exchange/contracts/Exchange.sol:Exchange",
        "label": "priceCurve",
        "offset": 0,
        "slot": "57",
        "type": "t_mapping(t_uint8,t_array(t_uint256)2_storage)"
      },
      {
        "astId": 16880,
        "contract": "contracts/exchange/contracts/Exchange.sol:Exchange",
        "label": "__gap",
        "offset": 0,
        "slot": "58",
        "type": "t_array(t_uint256)45_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)2_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[2]",
        "numberOfBytes": "64"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ISuAccessControl)29456": {
        "encoding": "inplace",
        "label": "contract ISuAccessControl",
        "numberOfBytes": "20"
      },
      "t_contract(ISuOracleAggregator)29701": {
        "encoding": "inplace",
        "label": "contract ISuOracleAggregator",
        "numberOfBytes": "20"
      },
      "t_contract(ITopStakers)35463": {
        "encoding": "inplace",
        "label": "contract ITopStakers",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Order)16900_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Order)",
        "numberOfBytes": "32",
        "value": "t_struct(Order)16900_storage"
      },
      "t_mapping(t_uint8,t_array(t_uint256)2_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => uint256[2])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)2_storage"
      },
      "t_struct(Order)16900_storage": {
        "encoding": "inplace",
        "label": "struct Order",
        "members": [
          {
            "astId": 16885,
            "contract": "contracts/exchange/contracts/Exchange.sol:Exchange",
            "label": "token2sell",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 16887,
            "contract": "contracts/exchange/contracts/Exchange.sol:Exchange",
            "label": "token2buy",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 16889,
            "contract": "contracts/exchange/contracts/Exchange.sol:Exchange",
            "label": "beneficiary",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 16891,
            "contract": "contracts/exchange/contracts/Exchange.sol:Exchange",
            "label": "caller",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 16893,
            "contract": "contracts/exchange/contracts/Exchange.sol:Exchange",
            "label": "amountLeft",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 16895,
            "contract": "contracts/exchange/contracts/Exchange.sol:Exchange",
            "label": "token2buyAmount",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 16897,
            "contract": "contracts/exchange/contracts/Exchange.sol:Exchange",
            "label": "creationTimestamp",
            "offset": 0,
            "slot": "6",
            "type": "t_uint64"
          },
          {
            "astId": 16899,
            "contract": "contracts/exchange/contracts/Exchange.sol:Exchange",
            "label": "discountType",
            "offset": 8,
            "slot": "6",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Set)4414_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Set",
        "members": [
          {
            "astId": 4409,
            "contract": "contracts/exchange/contracts/Exchange.sol:Exchange",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 4413,
            "contract": "contracts/exchange/contracts/Exchange.sol:Exchange",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)4886_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.UintSet",
        "members": [
          {
            "astId": 4885,
            "contract": "contracts/exchange/contracts/Exchange.sol:Exchange",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)4414_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}