{
  "address": "0xAdB0265d7a989Fe04401eFCFcCf049284bfCF160",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "accessControl",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "safeEngine_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "BadAccessControlSingleton",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAdminError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAlerterError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyCDPAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyDAOError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyDisablerAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyLiquidationAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyMintAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyProxyActionsError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyRewardAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyRoleError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyVaultAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyVotingEscrowError",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "usr",
          "type": "address"
        }
      ],
      "name": "AddAuthorization",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "DisableContract",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "cdp",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockedCollateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "generatedDebt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "due",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "LiquidateCDP",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "what",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "data",
          "type": "uint256"
        }
      ],
      "name": "ModifyParameters",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "what",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "data",
          "type": "address"
        }
      ],
      "name": "ModifyParameters",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "what",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "data",
          "type": "uint256"
        }
      ],
      "name": "ModifyParameters",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "what",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        }
      ],
      "name": "ModifyParameters",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rad",
          "type": "uint256"
        }
      ],
      "name": "ReduceActiveLiquidationAmount",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "usr",
          "type": "address"
        }
      ],
      "name": "RemoveAuthorization",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACCESS_CONTROL_SINGLETON",
      "outputs": [
        {
          "internalType": "contract ISuAccessControl",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ALERTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ActiveLiquidationAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CDP_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DAO_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DISABLER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GlobalLiquidationLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIQUIDATION_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LiquidatorReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINT_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROXY_ACTIONS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARD_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VOTING_ESCROW_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accountingEngine",
      "outputs": [
        {
          "internalType": "contract IAccountingEngine",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "collateralTypes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidationPenalty",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidationLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "activeLiquidationAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractEnabled",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disableContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "cdp",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "incentivesReceiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "collateralJoin",
          "type": "address"
        }
      ],
      "name": "liquidateCDP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationDiscountType",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        }
      ],
      "name": "liquidationPenalty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "what",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "data",
          "type": "address"
        }
      ],
      "name": "modifyParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "what",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "data",
          "type": "uint256"
        }
      ],
      "name": "modifyParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "what",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "data",
          "type": "uint256"
        }
      ],
      "name": "modifyParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "rad",
          "type": "uint256"
        }
      ],
      "name": "reduceActiveLiquidationAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "safeEngine",
      "outputs": [
        {
          "internalType": "contract ISafeEngine",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "newDiscountType",
          "type": "uint8"
        }
      ],
      "name": "setLiquidationDiscountType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "numDeployments": 4,
  "solcInputHash": "391f99102fcf6a77832aec16c8e54c9d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"accessControl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"safeEngine_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BadAccessControlSingleton\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAdminError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAlerterError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyCDPAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyDAOError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyDisablerAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyLiquidationAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyMintAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyProxyActionsError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRewardAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRoleError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyVaultAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyVotingEscrowError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"AddAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DisableContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cdp\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedCollateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"generatedDebt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"due\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"LiquidateCDP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"ModifyParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"name\":\"ModifyParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"ModifyParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"}],\"name\":\"ModifyParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rad\",\"type\":\"uint256\"}],\"name\":\"ReduceActiveLiquidationAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"RemoveAuthorization\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACCESS_CONTROL_SINGLETON\",\"outputs\":[{\"internalType\":\"contract ISuAccessControl\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ALERTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ActiveLiquidationAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CDP_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAO_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DISABLER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GlobalLiquidationLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDATION_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LiquidatorReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROXY_ACTIONS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VOTING_ESCROW_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accountingEngine\",\"outputs\":[{\"internalType\":\"contract IAccountingEngine\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"collateralTypes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidationPenalty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activeLiquidationAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractEnabled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"cdp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"incentivesReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralJoin\",\"type\":\"address\"}],\"name\":\"liquidateCDP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationDiscountType\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"}],\"name\":\"liquidationPenalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"rad\",\"type\":\"uint256\"}],\"name\":\"reduceActiveLiquidationAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeEngine\",\"outputs\":[{\"internalType\":\"contract ISafeEngine\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newDiscountType\",\"type\":\"uint8\"}],\"name\":\"setLiquidationDiscountType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"liquidateCDP(bytes32,address,address,address)\":{\"details\":\"The entire Vault will be liquidated except when the target amount of StablePro to be raised in the resulting auction (debt of Vault + liquidation penalty) causes either ActiveLiquidationAmount to exceed GlobalLiquidationLimit or collateralType.activeLiquidationAmount to exceed collateralType.liquidationLimit by an economically significant amount. In that case, a partial liquidation is performed to respect the global and per-collateralType limits on outstanding StablePro target. The one exception is if the resulting auction would likely have too little collateral to be interesting to Keepers (debt taken from Vault < collateralType.debtFloor), in which case the function reverts. Please refer to the code and comments within if more detail is desired.\",\"params\":{\"cdp\":\"- address of cdp position\",\"collateralJoin\":\"- address of collateral adapter*\",\"collateralType\":\"- collateral type\",\"incentivesReceiver\":\"- address that will receive the liquidation reward, if any.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"liquidateCDP(bytes32,address,address,address)\":{\"notice\":\"Liquidate a Vault and start a Dutch auction to sell its collateral for StablePro.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/makerdao/externalContracts/LiquidationEngine.sol\":\"LiquidationEngine\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/exchange/interfaces/IExchange.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\npragma solidity ^0.8.0;\\n\\nstruct Order {\\n    address token2sell;\\n    address token2buy;\\n    address beneficiary;\\n    address caller;\\n    uint256 amountLeft;\\n    uint256 token2buyAmount;\\n    uint64 creationTimestamp;\\n    uint8 discountType;\\n}\\n\\nstruct OrderWithId {\\n    Order order;\\n    uint256 orderId;\\n}\\n\\ninterface IExchange {\\n    /* ===================== ERRORS ===================== */\\n    error OrderExist(uint256 orderId);\\n    error OrderNotExist(uint256 orderId);\\n    error IncorrectToken(address orderToken2buy, address inToken);\\n    error SmallAmountLeft();\\n    error BadOutAmount();\\n    error UserIsNotBeneficiary();\\n    error IsNotTopStaker(address staker);\\n    error IsNotStaker(address staker);\\n    error OrderNotForThisStaker(uint256 orderId, address staker);\\n    error NotEnoughReturnValue();\\n    error CallbackError();\\n\\n    /* ======================== EVENTS ========================= */\\n    event OrderAdded(uint256 orderId);\\n    event OrderCanceled(uint256 orderId);\\n    event OrderFilled(uint256 orderId);\\n    event OrderFilledPartially(uint256 orderId);\\n    event LpOrdersAdded(address LPToken, uint256[] orderIds);\\n\\n    /* ==================== MUTABLE METHODS ==================== */\\n\\n    /**\\n      * @notice Add order to swap {token2sell} to {token2buy}.\\n      * @dev This swap is async, because depends on how arbitrage bots will fill this order. Emits OrderAdded() event.\\n      * Before addOrder user needs to approve token2sell for exchange contract\\n      * @param token2sell - Address of token to sell\\n      * @param amount2sell - Amount of {token2sell} to sell\\n      * @param token2buy - Address of token to buy\\n      * @param beneficiary - Address that will receive {token2buy} after filling order.\\n      * @param discountType - Speed of decreasing swap price. { 0 - aggressive, 1 - middle, 2 - conservative }\\n      * @param collateralJoin - address of collateral adapter\\n     **/\\n    function addOrder (\\n        address token2sell,\\n        uint256 amount2sell,\\n        address token2buy,\\n        address beneficiary,\\n        uint8 discountType,\\n        address collateralJoin\\n    ) external returns (uint256);\\n\\n    /**\\n      * @notice Only user who place order or who is beneficiary can cancelOrder();\\n      * @param orderId - Id of order to cancel.\\n     **/\\n    function cancelOrder (uint256 orderId) external;\\n\\n    /**\\n      * @notice Fill order with flash-loan like logic\\n      * @dev Caller contract receive orders {token2sell} and after that his stableunitFillOrderCallback() is called.\\n      * At the end of thi callback contract should send some amount of another token back to Exchange contract.\\n      * @param orderId - Id of order to fill.\\n      * @param inAmount - Amount of {token2sell} to receive\\n      * @param data - encoded data to pass to callback function\\n     **/\\n    function fillOrderAsFlashLoan (\\n        uint256 orderId,\\n        uint256 inAmount,\\n        bytes memory data\\n    ) external returns (uint256 outAmount);\\n\\n    /**\\n      * @notice Function to update price curve - how fast {token2sell} price will decrease/increase\\n      * @param discountType - discount type to change\\n      * @param newPriceCurve - parameters of formula\\n     **/\\n    function setPriceCurve(uint8 discountType, uint256[2] calldata newPriceCurve) external;\\n\\n    /* ==================== VIEW METHODS ==================== */\\n    /**\\n      * @return The amount of outcome that caller will receive if he will fill {orderId} with {inAmount} of {token2sell}\\n     **/\\n    function getExpectedOrderOutcome (uint256 orderId, uint256 inAmount) external view returns (uint256);\\n\\n    /**\\n      * @return Order with id = {orderId}\\n     **/\\n    function getOrder (uint256 orderId) external view returns (Order memory);\\n\\n    /**\\n      * @return The amount of not full-filled orders\\n     **/\\n    function getOrdersCount () external view returns (uint256);\\n\\n    /**\\n      * @return The array of all not-filled orders. May be deleted after adding GraphQL for orderIds\\n     **/\\n    function getAllOrders (uint256 offset, uint256 limit) external view returns (OrderWithId[] memory);\\n}\\n\",\"keccak256\":\"0x7ee445e1f588c012ce05bdffad0f21aea68245e674763cc800ca8ab1b934c744\",\"license\":\"BSL 1.1\"},\"contracts/makerdao/externalContracts/LiquidationEngine.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\n/// dog.sol -- StablePro liquidation module 2.0\\n\\n// Copyright (C) 2020-2022 Dai Foundation\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/ILiquidationEngine.sol\\\";\\nimport \\\"../interfaces/ISafeEngine.sol\\\";\\nimport \\\"../interfaces/ICollateralJoin.sol\\\";\\nimport \\\"../../exchange/interfaces/IExchange.sol\\\";\\nimport \\\"../../periphery/contracts/access-control/SuAuthenticatedNonUpgradeable.sol\\\";\\nimport \\\"../interfaces/IAccountingEngine.sol\\\";\\n\\nimport {Math} from \\\"../utils/Math.sol\\\";\\n\\n// CHANGED (from dog.sol): added Whitelist behaviour to add order correctly.\\n// Added SuAuthenticated instead of authorizedAccounts\\n// Added Math to move Math behaviour.\\n// Added interface and moved struct there.\\n// Added AddAuthorization call in constructor (can be removed).\\n// Added LiquidatorReward\\n// Moved Liquidator from CollateralType struct to global var, because it's one for all collaterals\\n// Calculate rewardCollateral in liquidateCDP\\n// Use addOrder instead of startAuction in liquidateCDP\\n\\ncontract LiquidationEngine is SuAuthenticatedNonUpgradeable, ILiquidationEngine, Math {\\n    ISafeEngine immutable public safeEngine;  // CDP Engine\\n\\n    mapping (bytes32 => CollateralType) public collateralTypes;\\n\\n    IAccountingEngine public accountingEngine;   // Debt Engine\\n    uint256 public GlobalLiquidationLimit;  // Max StablePro needed to cover debt+fees of active auctions [rad]\\n    uint256 public ActiveLiquidationAmount;  // Amt StablePro needed to cover debt+fees of active auctions [rad]\\n    uint256 public LiquidatorReward;  // Reward in percent (1e18 == 1) for liquidation [wad]\\n    address public liquidator;  // Liquidator, Exchange module\\n    uint8 public liquidationDiscountType; // DiscountType, that will be used in liquidations\\n\\n    // --- Init ---\\n    constructor(address accessControl, address safeEngine_) SuAuthenticatedNonUpgradeable(accessControl) public {\\n        safeEngine = ISafeEngine(safeEngine_);\\n        contractEnabled = 1;\\n        liquidationDiscountType = 0; // Aggressive\\n        emit AddAuthorization(msg.sender);\\n    }\\n\\n    // --- Disable ---\\n    uint public contractEnabled;\\n    function disableContract() external onlyDisablerAccess {\\n        contractEnabled = 0;\\n        emit DisableContract();\\n    }\\n\\n    // --- Administration ---\\n    function modifyParameters(bytes32 what, address data) external onlyDAO {\\n        if (what == \\\"accountingEngine\\\") accountingEngine = IAccountingEngine(data);\\n        else if (what == \\\"liquidator\\\") liquidator = data;\\n        else revert(\\\"LiquidationEngine/file-unrecognized-param\\\");\\n        emit ModifyParameters(what, data);\\n    }\\n    function modifyParameters(bytes32 what, uint256 data) external onlyDAO {\\n        if (what == \\\"GlobalLiquidationLimit\\\") GlobalLiquidationLimit = data;\\n        else if (what == \\\"LiquidatorReward\\\") LiquidatorReward = data;\\n        else revert(\\\"LiquidationEngine/file-unrecognized-param\\\");\\n        emit ModifyParameters(what, data);\\n    }\\n    function modifyParameters(bytes32 collateralType, bytes32 what, uint256 data) external onlyDAO {\\n        if (what == \\\"liquidationPenalty\\\") {\\n            require(data >= WAD, \\\"LiquidationEngine/file-liquidationPenalty-lt-WAD\\\");\\n            collateralTypes[collateralType].liquidationPenalty = data;\\n        } else if (what == \\\"liquidationLimit\\\") collateralTypes[collateralType].liquidationLimit = data;\\n        else revert(\\\"LiquidationEngine/file-unrecognized-param\\\");\\n        emit ModifyParameters(collateralType, what, data);\\n    }\\n\\n    function liquidationPenalty(bytes32 collateralType) external view returns (uint256) {\\n        return collateralTypes[collateralType].liquidationPenalty;\\n    }\\n\\n    function setLiquidationDiscountType(uint8 newDiscountType) external onlyAdmin {\\n        liquidationDiscountType = newDiscountType;\\n    }\\n\\n    // --- CDP Liquidation ---\\n    function liquidateCDP(\\n        bytes32 collateralType,\\n        address cdp,\\n        address incentivesReceiver,\\n        address collateralJoin\\n    ) external returns (uint256 id) {\\n        require(contractEnabled == 1, \\\"LiquidationEngine/not-contractEnabled\\\");\\n\\n        safeEngine.updateSafetyPrice(collateralType);\\n        (uint256 collateralAmount, uint256 generatedDebt) = safeEngine.safes(collateralType, cdp);\\n        CollateralType memory _cType = collateralTypes[collateralType];\\n        uint256 deltaGeneratedDebt;\\n        uint256 accumulatedRate;\\n        uint256 debtFloor;\\n        {\\n            uint256 safetyPrice;\\n            (, accumulatedRate,, debtFloor, safetyPrice,,,) = safeEngine.collateralTypes(collateralType);\\n            // collateralAmount - 1e18, safetyPrice - 1e27, generatedDebt - 1e18, accumulatedRate - 1e27\\n            require(\\n                safetyPrice > 0 && _mul(collateralAmount, safetyPrice) < _mul(generatedDebt, accumulatedRate),\\n                \\\"LiquidationEngine/not-unsafe\\\"\\n            );\\n\\n            // Get the minimum value between:\\n            // 1) Remaining space in the general GlobalLiquidationLimit\\n            // 2) Remaining space in the collateral liquidationLimit\\n            require(\\n                GlobalLiquidationLimit > ActiveLiquidationAmount\\n                    && _cType.liquidationLimit > _cType.activeLiquidationAmount,\\n                \\\"LiquidationEngine/liquidation-limit-hit\\\"\\n            );\\n            uint256 room = min(\\n                GlobalLiquidationLimit - ActiveLiquidationAmount,\\n                _cType.liquidationLimit - _cType.activeLiquidationAmount\\n            );\\n\\n            // uint256.max()/(RAD*WAD) = 115,792,089,237,316\\n            deltaGeneratedDebt = min(generatedDebt, _mul(room, WAD) / accumulatedRate / _cType.liquidationPenalty);\\n\\n            // Partial liquidation edge case logic\\n            if (generatedDebt > deltaGeneratedDebt) {\\n                if (_mul(generatedDebt - deltaGeneratedDebt, accumulatedRate) < debtFloor) {\\n\\n                    // If the leftover Vault would be dusty, just liquidate it entirely.\\n                    // This will result in at least one of activeLiquidationAmount_i > liquidationLimit_i or\\n                    // ActiveLiquidationAmount > GlobalLiquidationLimit becoming true.\\n                    // The amount of excess will be bounded above by ceiling(debtFloor_i * liquidationPenalty_i / WAD).\\n                    // This deviation is assumed to be small compared to both liquidationLimit_i and\\n                    // GlobalLiquidationLimit, so that the extra amount of target StablePro over the limits\\n                    // intended is not of economic concern.\\n                    deltaGeneratedDebt = generatedDebt;\\n                } else {\\n\\n                    // In a partial liquidation, the resulting auction should also be non-dusty.\\n                    require(\\n                        _mul(deltaGeneratedDebt, accumulatedRate) >= debtFloor,\\n                        \\\"LiquidationEngine/dusty-auction-from-partial-liquidation\\\"\\n                    );\\n                }\\n            }\\n        }\\n\\n        uint256 deltaCollateral = _mul(collateralAmount, deltaGeneratedDebt) / generatedDebt;\\n\\n        require(deltaCollateral > 0, \\\"LiquidationEngine/null-auction\\\");\\n        require(deltaGeneratedDebt <= 2**255 && deltaCollateral <= 2**255, \\\"LiquidationEngine/overflow\\\");\\n\\n        uint256 rewardCollateral = _mul(deltaCollateral, LiquidatorReward) / WAD;\\n        uint256 collateral2sell = _sub(deltaCollateral, rewardCollateral);\\n        safeEngine.confiscateSAFECollateralAndDebt(\\n            collateralType, cdp, incentivesReceiver, address(accountingEngine), -int256(rewardCollateral), 0\\n        );\\n        safeEngine.confiscateSAFECollateralAndDebt(\\n            collateralType,\\n            cdp,\\n            liquidator,\\n            address(accountingEngine),\\n            -int256(collateral2sell),\\n            -int256(deltaGeneratedDebt)\\n        );\\n\\n        uint256 due = _mul(deltaGeneratedDebt, accumulatedRate);\\n        accountingEngine.pushDebtToQueue(due);\\n\\n        {   // Avoid stack too deep\\n            // This calcuation will overflow if deltaGeneratedDebt*rate exceeds ~10^14\\n            uint256 amountToRaise = _mul(due, _cType.liquidationPenalty) / WAD;\\n            ActiveLiquidationAmount = _add(ActiveLiquidationAmount, amountToRaise);\\n            collateralTypes[collateralType].activeLiquidationAmount =\\n                            _add(_cType.activeLiquidationAmount, amountToRaise);\\n\\n            /// Now we nee to use our \\\"auction\\\" with Exchange module, that mean we need to add order\\n            /// id is needed only for event, so it's not necessary to store it\\n            /// But we don't use amountToRaise (=minAmount), so in future we may need to use it\\n            /// Also we send some tokens to incentivesReceiver previously, so we don't need it more\\n//            id = AuctionLike(_cType.liquidator).startAuction({\\n//                debt: amountToRaise,\\n//                collateralToSell: deltaCollateral,\\n//                colReceiver: cdp,\\n//                incentivesReceiver: incentivesReceiver\\n//            });\\n\\n            id = IExchange(liquidator).addOrder(\\n                address(ICollateralJoin(collateralJoin).collateral()),\\n                collateral2sell,\\n                accountingEngine.stablecoinToSwap(),\\n                address(accountingEngine),\\n                liquidationDiscountType,\\n                collateralJoin\\n            );\\n        }\\n\\n        emit LiquidateCDP(collateralType, cdp, deltaCollateral, deltaGeneratedDebt, due, liquidator, id);\\n    }\\n\\n    function reduceActiveLiquidationAmount(bytes32 collateralType, uint256 rad) external onlyLiquidationAccess {\\n        ActiveLiquidationAmount = _sub(ActiveLiquidationAmount, rad);\\n        collateralTypes[collateralType].activeLiquidationAmount =\\n                        _sub(collateralTypes[collateralType].activeLiquidationAmount, rad);\\n        emit ReduceActiveLiquidationAmount(collateralType, rad);\\n    }\\n}\\n\",\"keccak256\":\"0x3c4f7fce5b33bd86f4d5d4716e8491fa4bbb33febd75ee275e5167d96b442dd8\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/makerdao/interfaces/IAccountingEngine.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../exchange/interfaces/IExchange.sol\\\";\\n\\n/**\\n * @title IAccountingEngine\\n **/\\ninterface IAccountingEngine {\\n    /* ==================== EVENTS ===============-===== */\\n    event StableProSwapped(uint256 amount);\\n    event DisableContract();\\n    event StablecoinRefilled(address stablecoin, uint256 amount);\\n\\n    /* ==================== ERRORS ===============-===== */\\n    error ContractDisabled();\\n    error BadModifyParameters();\\n    error BadStablecoin(address asset);\\n    error BadRewardToken();\\n    error DebtNotZero();\\n    error SurplusNotZero();\\n    error InsufficientDebt();\\n    error InsufficientSurplus();\\n    error NotEnoughAsh();\\n    error PopDebtDelayNotFinished();\\n    error StablecoinNotExist(address asset);\\n    error StablecoinExists(address asset);\\n\\n    /* ====================== VARS ===================== */\\n\\n    function stablecoinToSwap() external view returns (address);\\n\\n    /* ==================== MUTABLE METHODS ==================== */\\n\\n    /**\\n     * @notice Push debt (that the system tries to cover with collateral auctions) to a queue\\n     * @dev Debt is locked in a queue to give the system enough time to auction collateral\\n     *      and gather surplus\\n     * @param amountToRaise Amount of debt to push\\n     */\\n    function pushDebtToQueue(uint amountToRaise) external;\\n\\n    /**\\n     * @notice A block of debt can be popped from the queue after popDebtDelay seconds passed since it was\\n     *         added there\\n     * @param era Timestamp of the block of debt that should be popped out\\n     */\\n    function popDebtFromQueue(uint era) external;\\n\\n    // Debt settlement\\n    /**\\n     * @notice Destroy an equal amount of coins and debt\\n     * @dev We can only destroy debt that is not locked in the queue and also not in a debt auction\\n     * @param rad Amount of coins/debt to destroy (number with 45 decimals)\\n    **/\\n    function settleDebt(uint rad) external;\\n\\n    /**\\n     * @notice Use surplus coins to destroy debt that is/was in a debt auction\\n     * @param rad Amount of coins/debt to destroy (number with 45 decimals)\\n    **/\\n    function cancelAuctionedDebtWithSurplus(uint rad) external;\\n\\n    /**\\n     * @notice Start a debt auction (we have debt = x$, token2sell with value of y$, where y >= x)\\n     * @dev We can only auction debt that is not already being auctioned and is not locked in the debt queue.\\n     * Firstly, we should donate token2sell (it's collateral or stablecoin) by refillStablecoin\\n    **/\\n    function auctionDebt(\\n        address token2sell,\\n        uint256 amountToSell,\\n        uint8 discountType,\\n        uint256 auctionDebt\\n    ) external returns (uint orderId);\\n\\n    /**\\n     * @notice Start a surplus auction\\n     * @dev We can only auction surplus if we wait at least 'surplusAuctionDelay' seconds since the last\\n     *      auction trigger, if we keep enough surplus in the buffer and if there is no bad debt to settle\\n    **/\\n    function auctionSurplus(uint256 surplusAmount, uint8 discountType) external returns (uint orderId);\\n\\n    /**\\n     * @notice Disable this contract (normally called by Global Settlement)\\n     * @dev When we disable, the contract tries to settle as much debt as possible (if there's any) with\\n            any surplus that's left in the system. After erasing debt, the contract will either transfer any\\n            remaining surplus right away (if disableCooldown == 0) or will only record the timestamp when\\n            it was disabled\\n    **/\\n    function disableContract() external;\\n\\n    /* ================= Stablecoin Whitelist ================== */\\n\\n    /**\\n     * @notice Add new stablecoin to whitelist of stablecoins protocol works with\\n    **/\\n    function addWhitelistStablecoin(address stablecoin) external;\\n\\n    /**\\n     * @notice Remove stablecoin from whitelist of stablecoins protocol works with\\n    **/\\n    function removeWhitelistStablecoin(address stablecoin) external;\\n\\n    /**\\n     * @notice Check if give token is in stablecoins whitelist\\n    **/\\n    function hasWhitelistStablecoin(address stablecoin) external view returns (bool);\\n\\n    /**\\n     * @notice Change var stablecoinToSwap, that is used in liquidation process\\n    **/\\n    function setStablecoinToSwap(address stablecoin) external;\\n\\n    /* =================== MANUAL FUNCTIONS ==================== */\\n    /**\\n     * @notice Admin function to join protocol using real StablePro (= join in coinJoin)\\n    **/\\n    function joinStablePro(uint256 amount) external;\\n\\n    /**\\n     * @notice Admin function to get real StablePro tokens instead of records in protocol (= exit from coinJoin)\\n    **/\\n    function getRealStablePro(uint256 amount) external;\\n\\n    /**\\n     * @notice Function to send stablecoin to AccountingEngine contract\\n    **/\\n    function refillStablecoin(address stablecoin, uint256 amount) external;\\n\\n    /**\\n     * @notice Admin function to distribute surplus after getting it\\n    **/\\n    function distributeSurplus(uint256 amount) external;\\n\\n    /**\\n     * @notice Function to swap sender's stablePro to stablecoin that is in whitelist\\n    **/\\n    function swapStableProToStablecoin(address stablecoinToken, uint256 stableProAmountE18) external;\\n}\\n\",\"keccak256\":\"0x0bc9ca86965cae7788fd205d0bcec36fc722353857d3133ff042e75c6275bdd0\",\"license\":\"UNLICENSED\"},\"contracts/makerdao/interfaces/ICollateralJoin.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {IDisable} from \\\"./IDisable.sol\\\";\\n\\n/**\\n * @title ITaxCollector\\n **/\\ninterface ICollateralJoin is IDisable {\\n\\n    /* ===================== EVENTS ===================== */\\n\\n    event Join(address indexed usr, uint256 wad);\\n    event Exit(address indexed usr, uint256 wad);\\n\\n    /* ====================== VARS ===================== */\\n    function decimals() external returns (uint);\\n    function collateral() external view returns(IERC20Metadata);\\n\\n    /* ==================== METHODS ==================== */\\n\\n    /**\\n    * @notice Join collateral in the system\\n    * @param usr Account from which we transferFrom collateral and add it in the system\\n    * @param wad Amount of collateral to transfer in the system (represented as a number with 18 decimals)\\n    **/\\n    function join(address usr, uint wad) external;\\n\\n    /**\\n    * @notice Exit collateral from the system\\n    * @param usr Account to which we transfer the collateral\\n    * @param wad Amount of collateral to transfer to 'account' (represented as a number with 18 decimals)\\n    **/\\n    function exit(address usr, uint wad) external;\\n}\\n\",\"keccak256\":\"0xb276834f1935ca409ecca5542ef257f9b68e1e91c53b9bdc6b73f0db63210c07\",\"license\":\"UNLICENSED\"},\"contracts/makerdao/interfaces/IDisable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\ninterface IDisable {\\n    event DisableContract();\\n\\n    function disableContract() external;\\n}\\n\",\"keccak256\":\"0xcf4b5ac43556af77a174aa3a3a9b51c4fc89b933ef875797650542bf686b8405\",\"license\":\"UNLICENSED\"},\"contracts/makerdao/interfaces/ILiquidationEngine.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ITaxCollector\\n **/\\ninterface ILiquidationEngine {\\n    /* ==================== STRUCTS ==================== */\\n\\n    struct CollateralType {\\n        uint256 liquidationPenalty;  // Liquidation Penalty [wad]\\n        uint256 liquidationLimit;  // Max StablePro needed to cover debt+fees of active auctions per cType [rad]\\n        uint256 activeLiquidationAmount;  // Amt StablePro needed to cover debt+fees of active auctions per cType [rad]\\n    }\\n\\n    /* ==================== EVENTS ===============-===== */\\n\\n    event DisableContract();\\n\\n    event AddAuthorization(address indexed usr);\\n    event RemoveAuthorization(address indexed usr);\\n\\n    event ModifyParameters(bytes32 indexed what, uint256 data);\\n    event ModifyParameters(bytes32 indexed what, address data);\\n    event ModifyParameters(bytes32 indexed collateralType, bytes32 indexed what, uint256 data);\\n    event ModifyParameters(bytes32 indexed collateralType, bytes32 indexed what, address liquidator);\\n\\n    event LiquidateCDP(\\n        bytes32 indexed collateralType,\\n        address indexed cdp,\\n        uint256 lockedCollateral,\\n        uint256 generatedDebt,\\n        uint256 due,\\n        address liquidator,\\n        uint256 indexed id\\n    );\\n    event ReduceActiveLiquidationAmount(bytes32 indexed collateralType, uint256 rad);\\n\\n    /* ==================== MUTABLE METHODS ==================== */\\n\\n    // --- Administration ---\\n    function modifyParameters(bytes32 what, uint data) external;\\n    function modifyParameters(bytes32 what, address data) external;\\n    function modifyParameters(bytes32 collateralType, bytes32 what, uint data) external;\\n\\n    function setLiquidationDiscountType(uint8 newDiscountType) external;\\n\\n    /**\\n      * @notice Liquidate a Vault and start a Dutch auction to sell its collateral for StablePro.\\n      * @dev The entire Vault will be liquidated except when the target amount of StablePro to be raised in\\n      * the resulting auction (debt of Vault + liquidation penalty) causes either ActiveLiquidationAmount to exceed\\n      * GlobalLiquidationLimit or collateralType.activeLiquidationAmount to exceed collateralType.liquidationLimit\\n      * by an economically significant amount. In that case, a partial liquidation is performed to respect the global\\n      * and per-collateralType limits on outstanding StablePro target. The one exception is if the resulting auction\\n      * would likely have too little collateral to be interesting to Keepers\\n      * (debt taken from Vault < collateralType.debtFloor),\\n      * in which case the function reverts. Please refer to the code and comments within if more detail is desired.\\n      * @param collateralType - collateral type\\n      * @param cdp - address of cdp position\\n      * @param incentivesReceiver - address that will receive the liquidation reward, if any.\\n      * @param collateralJoin - address of collateral adapter\\n    **/\\n    function liquidateCDP(\\n        bytes32 collateralType,\\n        address cdp,\\n        address incentivesReceiver,\\n        address collateralJoin\\n    ) external returns (uint256 id);\\n\\n    function reduceActiveLiquidationAmount(bytes32 collateralType, uint256 rad) external;\\n\\n    /* ==================== VIEW METHODS ==================== */\\n\\n    function liquidationPenalty(bytes32 collateralType) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x40ef428e99e0a8d09c1514e46d51f02a4dc163dba1b7e9647e02a5ea68fd36bf\",\"license\":\"UNLICENSED\"},\"contracts/makerdao/interfaces/ISafeEngine.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// TODO: check how to operate with license and use one for all contracts\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IDisable.sol\\\";\\n\\n/**\\n * @title SafeEngine\\n * @notice The single source of truth for the Maker Protocol. It contains the accounting system of the core Vault,\\n * Internal StablePro balances, and collateral state. It houses the public interface for Vault management,\\n * allowing safe(= CDP or Vault) owners to adjust their Vault state balances. It also contains the public interface\\n * for Vault fungibility, allowing safe (Vault) owners to transfer, split, and merge Vaults.\\n * Excluding these interfaces, SAFEEngine is accessed through trusted smart contract modules.\\n **/\\ninterface ISafeEngine is IDisable {\\n    /* ==================== METHODS ==================== */\\n\\n    // --- Data ---\\n    struct CollateralType {\\n        uint256 debtAmount;        // Total debt issued for this specific collateral type                          [wad]\\n        uint256 accumulatedRate;   // Accumulator for interest accrued on this collateral type                     [ray]\\n        uint256 debtCeiling;       // Maximum amount of debt that can be generated with this collateral type       [rad]\\n        uint256 debtFloor;         // Minimum amount of debt that must be generated by a CDP using this collateral [rad]\\n        uint256 safetyPrice;       // Floor price at which a CDP is allowed to generate debt                       [ray]\\n        uint256 liquidationRatio;  // Liquidation ratio to calculate safety price                                  [ray]\\n        address collateralAddress; // Address of collateral\\n        uint256 safetyPriceBlockNumber; // Block when safetyPrice was updated\\n    }\\n    struct SAFE {\\n        uint256 lockedCollateral; // Total amount of collateral locked in a SAFE/CDP  [wad]\\n        uint256 generatedDebt;    // Total amount of debt generated by a SAFE/CDP     [wad]\\n    }\\n\\n    // --- VARS ---\\n\\n    function safes(bytes32, address) external view returns (uint, uint);\\n\\n    function collateralTypes(bytes32) external view returns (\\n        uint256 debtAmount,       // [wad]\\n        uint256 accumulatedRate,  // [ray]\\n        uint256 debtCeiling,      // [rad]\\n        uint256 debtFloor,        // [rad]\\n        uint256 safetyPrice,      // [ray]\\n        uint256 liquidationRatio, // [ray]\\n        address collateralAddress,\\n        uint256 safetyPriceBlockNumber\\n);\\n\\n    function tokenCollateral(bytes32, address) external view returns (uint256);\\n\\n    function coinBalance(address) external view returns (uint256);\\n\\n    function debtBalance(address) external view returns (uint256);\\n\\n    function cdpRights(address, address) external view returns (uint256);\\n\\n    function globalDebtCeiling() external view returns (uint256);\\n\\n    function globalDebt() external view returns (uint256);\\n\\n    // --- Auth ---\\n    /**\\n     * @notice Allow an address to modify your CDP.\\n     * For example coinAdapter should be able to modify your CDP to withdraw all correctly.\\n     * @param usr Account to give CDP permissions to\\n     */\\n    function approveSAFEModification(address usr) external;\\n\\n    /**\\n     * @notice Deny an address the rights to modify your CDP\\n     * @param usr Account to give CDP permissions to\\n     */\\n    function denySAFEModification(address usr) external;\\n\\n    // --- Administration ---\\n\\n    function initializeCollateralType(bytes32 collateralType, address collateralAddress) external;\\n\\n    /**\\n     * @notice Method to modify some global variables\\n     * @param what - name of variable we want to change\\n     * @param data - new value of this variable\\n     */\\n    function modifyParameters(bytes32 what, uint data) external;\\n    /**\\n     * @notice Method to modify values in struct of collateralTypes\\n     * @param collateralType - collateral type we want to modify (collateralTypes[collateralType])\\n     * @param what - name of variable in struct we want to change\\n     * @param data - new value of this variable\\n     */\\n    function modifyParameters(bytes32 collateralType, bytes32 what, uint data) external;\\n\\n    // --- Fungibility ---\\n    function modifyCollateralBalance(bytes32 collateralType, address usr, int256 wad) external;\\n    function transferCollateral(bytes32 collateralType, address src, address dst, uint256 wad) external;\\n    function transferInternalCoins(address src, address dst, uint256 rad) external;\\n\\n    // --- SafetyPrice Manipulation ---\\n    /**\\n     * @notice Method to update safetyPrice, it's called each time, when function need actual safetyPrice\\n     * @param collateralType - safetyPrice's collateral type we want to update\\n     */\\n    function updateSafetyPrice(bytes32 collateralType) external;\\n\\n    // --- CDP Manipulation ---\\n    /**\\n     * @notice Add/remove collateral or put back/generate more debt in a CDP\\n     * @param collateralType Type of collateral to withdraw/deposit in and from the CDP\\n     * @param cdp Target CDP\\n     * @param collateralSource Account we take collateral from/put collateral into\\n     * @param debtDestination Account from which we credit/debit coins and debt\\n     * @param deltaCollateral Amount of collateral added/extract from the CDP\\n     * @param deltaDebt Amount of debt to generate/repay\\n     */\\n    function modifySAFECollateralization(\\n        bytes32 collateralType,\\n        address cdp,\\n        address collateralSource,\\n        address debtDestination,\\n        int deltaCollateral,\\n        int deltaDebt\\n    ) external;\\n\\n    // --- CDP Fungibility ---\\n    /**\\n     * @notice Transfer collateral and/or debt between CDPs\\n     * @param collateralType Collateral type transferred between CDPs\\n     * @param src Source CDP\\n     * @param dst Destination CDP\\n     * @param deltaCollateral Amount of collateral to take/add into src and give/take from dst\\n     * @param deltaDebt Amount of debt to take/add into src and give/take from dst\\n     */\\n    function transferSAFECollateralAndDebt(\\n        bytes32 collateralType,\\n        address src,\\n        address dst,\\n        int deltaCollateral,\\n        int deltaDebt\\n    ) external;\\n\\n    // --- CDP Confiscation ---\\n    /**\\n     * @notice Normally used by the LiquidationEngine in order to confiscate collateral and\\n       debt from a CDP and give them to someone else\\n     * @param collateralType Collateral type the CDP has locked inside\\n     * @param cdp Target CDP\\n     * @param collateralCounterparty Who we take/give collateral to\\n     * @param debtCounterparty Who we take/give debt to\\n     * @param deltaCollateral Amount of collateral taken/added into the CDP\\n     * @param deltaDebt Amount of debt taken/added into the CDP\\n     */\\n    function confiscateSAFECollateralAndDebt(\\n        bytes32 collateralType,\\n        address cdp,\\n        address collateralCounterparty,\\n        address debtCounterparty,\\n        int deltaCollateral,\\n        int deltaDebt\\n    ) external;\\n\\n    // --- Settlement ---\\n    /**\\n     * @notice Nullify an amount of coins with an equal amount of debt\\n     * @param rad Amount of debt & coins to destroy (expressed as a number with 45 decimals)\\n     */\\n    function settleDebt(uint rad) external;\\n\\n    /**\\n     * @notice Usually called by CoinSavingsAccount in order to create unbacked debt\\n     * @param debtDestination Usually AccountingEngine that can settle decreaseSoldAmount with surplus\\n     * @param coinDestination Usually CoinSavingsAccount who passes the new coins to depositors\\n     * @param rad Amount of debt to create (expressed as a number with 45 decimals)\\n     */\\n    function createUnbackedDebt(address debtDestination, address coinDestination, uint rad) external;\\n\\n    // --- Rates ---\\n    /**\\n     * @notice Usually called by TaxCollector in order to accrue interest on a specific collateral type\\n     * @param collateralType Collateral type we accrue interest for\\n     * @param surplusDst Destination for amount of surplus created by applying the interest rate\\n       to debt created by CDPs with 'collateralType'\\n     * @param accumulatedRate Multiplier applied to the debtAmount in order to calculate the surplus\\n     */\\n    function updateAccumulatedRate(bytes32 collateralType, address surplusDst, int accumulatedRate) external;\\n}\\n\",\"keccak256\":\"0x005803105e8f4777342c15159835863376d16f95f909489af8c58894931530bf\",\"license\":\"UNLICENSED\"},\"contracts/makerdao/utils/Math.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nabstract contract Math {\\n    uint256 constant ONE = 10 ** 27;\\n    uint256 constant WAD = 10 ** 18;\\n\\n    /**\\n    * @notice Calculates the sum of an unsigned integer and a signed integer\\n    * @param  x Unsigned integer\\n    * @param  y Signed integer\\n    * @return z Unsigned sum of `x` and `y`\\n    */\\n    function _add(uint x, int y) internal pure returns (uint z) {\\n        if (y >= 0) {\\n            z = x + uint256(y);\\n        } else {\\n            z = x - uint256(-y);\\n        }\\n        require(y >= 0 || z <= x);\\n        require(y <= 0 || z >= x);\\n    }\\n\\n    /**\\n    * @notice Calculates the substraction of an unsigned integer and a signed integer\\n    * @param  x Unsigned integer\\n    * @param  y Signed integer\\n    * @return z Unsigned substraction of `x` and `y`\\n    */\\n    function _sub(uint x, int y) internal pure returns (uint z) {\\n        if (y >= 0) {\\n            z = x - uint256(y);\\n        } else {\\n            z = x + uint256(-y);\\n        }\\n        require(y <= 0 || z <= x);\\n        require(y >= 0 || z >= x);\\n    }\\n    function _mul(uint x, int y) internal pure returns (int z) {\\n        z = int(x) * y;\\n        require(int(x) >= 0);\\n        require(y == 0 || z / y == int(x));\\n    }\\n\\n    function _rdiv(uint x, uint y) internal pure returns (uint z) {\\n        z = _mul(x, ONE) / y;\\n    }\\n\\n    function _add(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x + y) >= x);\\n    }\\n    function _sub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) <= x);\\n    }\\n    function _mul(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x);\\n    }\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x <= y ? x : y;\\n    }\\n\\n    function either(bool x, bool y) internal pure returns (bool z) {\\n        assembly{ z := or(x, y)}\\n    }\\n    function both(bool x, bool y) internal pure returns (bool z) {\\n        assembly{ z := and(x, y)}\\n    }\\n}\\n\",\"keccak256\":\"0xd2215ec58e4792d9e68d66f17c0181e4931fd83dc4f4a433d727978997e4ba24\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/periphery/contracts/access-control/SuAccessRoles.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title SuAccessRoles Library\\n * @dev SuAuthenticated and SuAccessControlSingleton need to have this constants\\n * Hierarchy:\\n *      1. DAO - can give admins and system roles\\n *      2.1. Admin - can set Alerters\\n *      2.2. System - includes Minter, Liquidation, Reward and Disabler roles, don't have access to give some roles.\\n *      3. Alerter - can send alerts and trigger rate limits, don't have access to give some roles.\\n */\\nabstract contract SuAccessRoles {\\n    bytes32 public constant ADMIN_ROLE = 0x00;\\n\\n    bytes32 public constant DAO_ROLE = keccak256(\\\"DAO_ROLE\\\");\\n\\n    bytes32 public constant ALERTER_ROLE = keccak256(\\\"ALERTER_ROLE\\\");\\n\\n    // system roles\\n    bytes32 public constant MINT_ACCESS_ROLE = keccak256(\\\"MINT_ACCESS_ROLE\\\");\\n    bytes32 public constant LIQUIDATION_ACCESS_ROLE = keccak256(\\\"LIQUIDATION_ACCESS_ROLE\\\");\\n    bytes32 public constant REWARD_ACCESS_ROLE = keccak256(\\\"REWARD_ACCESS_ROLE\\\");\\n    // bytes32 public constant SYSTEM_ROLE = keccak256(\\\"SYSTEM_ROLE\\\");\\n    bytes32 public constant DISABLER_ROLE = keccak256(\\\"DISABLER_ROLE\\\");\\n    bytes32 public constant CDP_ACCESS_ROLE = keccak256(\\\"CDP_ACCESS_ROLE\\\");\\n    bytes32 public constant VOTING_ESCROW_ROLE = keccak256(\\\"VOTING_ESCROW_ROLE\\\");\\n    bytes32 public constant PROXY_ACTIONS_ROLE = keccak256(\\\"PROXY_ACTIONS_ROLE\\\");\\n}\\n\",\"keccak256\":\"0x76c6b55446c0e7b40405cd0b642650c64a842e5dd71d5c5307f0b2def8898a1b\",\"license\":\"BSL 1.1\"},\"contracts/periphery/contracts/access-control/SuAuthenticatedNonUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/access-control/ISuAccessControl.sol\\\";\\nimport \\\"./SuAccessRoles.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title SuAuthenticated\\n * @dev other contracts should inherit to be authenticated.\\n * The address of SuAccessControlSingleton should be one for all contract that inherits SuAuthenticated\\n */\\nabstract contract SuAuthenticatedNonUpgradeable is SuAccessRoles, IERC165 {\\n    ISuAccessControl public ACCESS_CONTROL_SINGLETON;\\n\\n    error OnlyDAOError();\\n    error OnlyAdminError();\\n    error OnlyAlerterError();\\n    error OnlyVaultAccessError();\\n    error OnlyLiquidationAccessError();\\n    error OnlyMintAccessError();\\n    error OnlyRewardAccessError();\\n    error OnlyDisablerAccessError();\\n    error OnlyVotingEscrowError();\\n    error OnlyProxyActionsError();\\n    error OnlyRoleError();\\n    error OnlyCDPAccessError();\\n    error BadAccessControlSingleton();\\n\\n    constructor (address _accessControlSingleton) internal {\\n        ACCESS_CONTROL_SINGLETON = ISuAccessControl(_accessControlSingleton);\\n        if (\\n            _accessControlSingleton == address(0) ||\\n            !ISuAccessControl(_accessControlSingleton).supportsInterface(type(IAccessControlUpgradeable).interfaceId)\\n        ) revert BadAccessControlSingleton();\\n    }\\n\\n    /** CORE ROLES */\\n\\n    modifier onlyDAO() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(DAO_ROLE, msg.sender)) revert OnlyDAOError();\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(ADMIN_ROLE, msg.sender)) revert OnlyAdminError();\\n        _;\\n    }\\n\\n    modifier onlyAlerter() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(ALERTER_ROLE, msg.sender)) revert OnlyAlerterError();\\n        _;\\n    }\\n\\n    /** SYSTEM ROLES */\\n\\n    modifier onlyLiquidationAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(LIQUIDATION_ACCESS_ROLE, msg.sender)) revert OnlyLiquidationAccessError();\\n        _;\\n    }\\n\\n    modifier onlyMintAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(MINT_ACCESS_ROLE, msg.sender)) revert OnlyMintAccessError();\\n        _;\\n    }\\n\\n    modifier onlyRewardAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(REWARD_ACCESS_ROLE, msg.sender)) revert OnlyRewardAccessError();\\n        _;\\n    }\\n\\n    modifier onlyRewardOrAdminAccess() {\\n        if (\\n            !ACCESS_CONTROL_SINGLETON.hasRole(REWARD_ACCESS_ROLE, msg.sender) &&\\n        !ACCESS_CONTROL_SINGLETON.hasRole(ADMIN_ROLE, msg.sender)\\n        ) revert OnlyRewardAccessError();\\n        _;\\n    }\\n\\n    // @notice This modifier check if user/contract have access to \\\"disable\\\" contracts.\\n    // All main contracts in our lending protocol have disableContract() method that stops contracts main functions.\\n    modifier onlyDisablerAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(DISABLER_ROLE, msg.sender)) revert OnlyDisablerAccessError();\\n        _;\\n    }\\n\\n    modifier onlyCDPAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(CDP_ACCESS_ROLE, msg.sender)) revert OnlyCDPAccessError();\\n        _;\\n    }\\n\\n    modifier onlyVotingEscrow() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(VOTING_ESCROW_ROLE, msg.sender)) revert OnlyVotingEscrowError();\\n        _;\\n    }\\n\\n    modifier onlyProxyActions() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(PROXY_ACTIONS_ROLE, msg.sender)) revert OnlyProxyActionsError();\\n        _;\\n    }\\n\\n    // syntax sugar under ACCESS_CONTROL_SINGLETON\\n    modifier onlyRole(bytes32 role) {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(role, msg.sender)) revert OnlyRoleError();\\n        _;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return ACCESS_CONTROL_SINGLETON.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x5b3eefa27b9d7ed5ebe2f8cb07c15971978b1d72aa6dae655daaf05b1a5258e5\",\"license\":\"BSL 1.1\"},\"contracts/periphery/contracts/interfaces/access-control/ISuAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\nimport \\\"../../access-control/SuAccessRoles.sol\\\";\\n\\n/**\\n * @notice Access control for contracts\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n **/\\ninterface ISuAccessControl is IAccessControlUpgradeable, IERC165Upgradeable {\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\\n}\\n\",\"keccak256\":\"0x25724ac502fd6418ccd38273b276de4b2fdecd023d723c5d80c9f0a27c407bcd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604081815234620001a657808262001b2d8038038091620000238285620001ab565b833981010312620001a6576200004760206200003f84620001e5565b9301620001e5565b600080546001600160a01b0319166001600160a01b03948516908117825590939190801590811562000117575b5062000106571660805260016007556006805460ff60a01b19169055519033907f599a298163e1678bb1c676052a8930bf0b8a1261ed6e01b8a2391e55f70001029080a26119329081620001fb823960805181818161032a01528181610375015281816103de01528181610481015281816105da01528181610658015281816106b201528181610727015261143d0152f35b82516384d942fd60e01b8152600490fd5b84516301ffc9a760e01b8152637965db0b60e01b60048201529150602090829060249082905afa9081156200019c57859162000157575b50153862000074565b90506020813d821162000193575b816200017460209383620001ab565b810103126200018f575180151581036200018f57386200014e565b8480fd5b3d915062000165565b84513d87823e3d90fd5b600080fd5b601f909101601f19168101906001600160401b03821190821017620001cf57604052565b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b0382168203620001a65756fe608080604052600436101561001357600080fd5b600090813560e01c90816301ffc9a7146116975750806303ee9f221461167057806318e81571146116465780634046ebae1461161d57806341b3a0d9146115ff578063438280dd146115c457806351a8cd87146115a6578063556617c7146115885780636614f0101461146c57806367aea313146114275780636efb72ce1461131757806371d0fb41146112dc57806375b238fc146112c0578063894ba833146112015780638e5313e0146111c6578063961d45c41461119d578063b38234f314611162578063bd5f5be614611127578063c4e9069814611072578063d07900bb14611030578063d0e8fa8214610ff5578063d2351cee14610fcc578063d4b9311d14610e4f578063dbec7dd414610e2b578063dc97e84e14610e02578063e8d769a714610de4578063e9c2651814610dbb578063eb9ff0b4146102dc5763fe4f58901461016057600080fd5b346102d95761016e36611735565b8254604051632474521560e21b815260008051602061183d833981519152600482015233602482015290602090829060449082906001600160a01b03165afa9081156102ce5784916102a0575b501561028e577511db1bd8985b131a5c5d5a59185d1a5bdb931a5b5a5d60521b82036102025760208160008051602061185d833981519152926003555b604051908152a280f35b6f131a5c5d5a59185d1bdc94995dd85c9960821b82036102375760208160008051602061185d833981519152926005556101f8565b60405162461bcd60e51b815260206004820152602960248201527f4c69717569646174696f6e456e67696e652f66696c652d756e7265636f676e696044820152687a65642d706172616d60b81b6064820152608490fd5b60405163599a6c3360e11b8152600490fd5b6102c1915060203d81116102c7575b6102b9818361175e565b810190611781565b386101bb565b503d6102af565b6040513d86823e3d90fd5b80fd5b50346102d95760803660031901126102d9576102f661171f565b906044356001600160a01b0381168103610d3657606435916001600160a01b03831683036102d957600160075403610d68577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163b156102d95760405163e401f2e760e01b815260048035908201528181602481837f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af18015610d5d57610d4e575b5060408051630f50894160e21b815260048035908201526001600160a01b03868116602483015290939190849060449082907f0000000000000000000000000000000000000000000000000000000000000000165afa918215610d425780938193610d03575b50600435815260016020526040808220905192906001600160401b036060850190811190851117610ced576060840160409081528154855260018201546020860152600290910154818501525163d07900bb60e01b8152600480359082015293610100856024816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa958615610ce257839684968591610c8b575b508015159081610c6f575b5015610c2b5760035460045480821180610c1a575b15610bc5576104e3916117ad565b6104f660208701516040880151906117ad565b808211610bbe57505b80670de0b6b3a7640000810204670de0b6b3a76400001481151715610ba85780670de0b6b3a76400008082020403610ba35761054888670de0b6b3a764000061055093026117ba565b8651906117ba565b808311610b9d575081955b8787808511610ae1575b505050906105768661057b936117ff565b6117ba565b948515610a9c57600160ff1b808611159081610a91575b5015610a4f57670de0b6b3a76400006105ad600554886117ff565b04916105b983886117ad565b92878411610a4b576002546001600160a01b0316906105d7906117da565b907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163b156109505760405192634e14a96760e01b8452600435600485015260018060a01b038c16602485015260018060a01b03166044840152606483015260848201528360a4820152838160c4818360018060a01b037f0000000000000000000000000000000000000000000000000000000000000000165af180156102ce57908491610a37575b50506006546002546001600160a01b0391821691166106a6846117da565b6106af886117da565b917f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163b15610a335760405193634e14a96760e01b8552600435600486015260018060a01b038d16602486015260448501526064840152608483015260a4820152838160c4818360018060a01b037f0000000000000000000000000000000000000000000000000000000000000000165af180156102ce57908491610a1f575b505061076390856117ff565b6002549093906001600160a01b0316803b156109fb5783809160246040518094819363a8b30a9f60e01b83528a60048401525af180156102ce57908491610a07575b5050806040670de0b6b3a76400006107c16107d99451886117ff565b04916107cf836004546117eb565b60045501516117eb565b6004358352600160205260026040842001556006546040519063d8dfeb4560e01b825260208260048160018060a01b038c165afa9182156102ce5784926109bf575b50600254604051631ff63f2360e11b815298906001600160a01b031660208a600481845afa998a156109b457869a610969575b50604051633bcce46f60e21b81526001600160a01b03948516600482015260248101959095529883166044850152606484019890985260a081901c60ff16608484015296811660a48301529095602091879160c49183918691165af194851561095c578195610919575b60208680878a888860018060a01b036006541691604051948552878501526040840152606083015260018060a01b0316907f3e68ae8e518de004a5c7f6407b51d7b729e26ddb6bcd135fe2f9e58df1b75b45608060043592a4604051908152f35b909591939294506020813d602011610954575b816109396020938361175e565b8101031261095057519094509290916020386108b8565b8580fd5b3d915061092c565b50604051903d90823e3d90fd5b9099506020813d6020116109ac575b816109856020938361175e565b810103126109505760c492602095949261099f8893611799565b9b9250929495509261084e565b3d9150610978565b6040513d88823e3d90fd5b9091506020813d6020116109ff575b816109db6020938361175e565b810103126109fb57516001600160a01b03811681036109fb57903861081b565b8380fd5b3d91506109ce565b610a109061174b565b610a1b5782386107a5565b8280fd5b610a289061174b565b610a1b578238610757565b8680fd5b610a409061174b565b610a1b578238610688565b8480fd5b60405162461bcd60e51b815260206004820152601a6024820152794c69717569646174696f6e456e67696e652f6f766572666c6f7760301b6044820152606490fd5b905086111538610592565b60405162461bcd60e51b815260206004820152601e60248201527f4c69717569646174696f6e456e67696e652f6e756c6c2d61756374696f6e00006044820152606490fd5b82610af883610af384899d989d6117ad565b6117ff565b1015610b1757505050508061057661057b9280975b9293899150610565565b90610b2591989493986117ff565b10610b37576105768661057b93610b0d565b60405162461bcd60e51b815260206004820152603860248201527f4c69717569646174696f6e456e67696e652f64757374792d61756374696f6e2d604482015277333937b696b830b93a34b0b616b634b8bab4b230ba34b7b760411b6064820152608490fd5b9561055b565b600080fd5b634e487b7160e01b600052601160045260246000fd5b90506104ff565b60405162461bcd60e51b815260206004820152602760248201527f4c69717569646174696f6e456e67696e652f6c69717569646174696f6e2d6c696044820152661b5a5d0b5a1a5d60ca1b6064820152608490fd5b5060208701516040880151106104d5565b60405162461bcd60e51b815260206004820152601c60248201527b4c69717569646174696f6e456e67696e652f6e6f742d756e7361666560201b6044820152606490fd5b610c7a9150826117ff565b610c8488846117ff565b11386104c0565b9650509550610100853d61010011610cda575b81610cac610100938361175e565b81010312610a1b57602085015195606086015196610cd160c060808901519801611799565b509695386104b5565b3d9150610c9e565b6040513d85823e3d90fd5b634e487b7160e01b600052604160045260246000fd5b935091506040833d604011610d3a575b81610d206040938361175e565b81010312610d3657602083519301519138610410565b5080fd5b3d9150610d13565b604051903d90823e3d90fd5b610d579061174b565b386103aa565b6040513d84823e3d90fd5b60405162461bcd60e51b815260206004820152602560248201527f4c69717569646174696f6e456e67696e652f6e6f742d636f6e7472616374456e60448201526418589b195960da1b6064820152608490fd5b50346102d957806003193601126102d957602060405160008051602061183d8339815191528152f35b50346102d957806003193601126102d9576020600554604051908152f35b50346102d957806003193601126102d95760206040516000805160206118bd8339815191528152f35b50346102d957806003193601126102d957602060ff60065460a01c16604051908152f35b50346102d95760603660031901126102d9576004356024359060443560018060a01b03845416906040518092632474521560e21b825260008051602061183d833981519152600483015233602483015281604460209586935afa9081156109b4578691610faf575b501561028e57716c69717569646174696f6e50656e616c747960701b8403610f6f57670de0b6b3a76400008110610f11579060008051602061187d83398151915291838652600182528060408720555b604051908152a380f35b60405162461bcd60e51b815260048101839052603060248201527f4c69717569646174696f6e456e67696e652f66696c652d6c697175696461746960448201526f1bdb94195b985b1d1e4b5b1d0b55d05160821b6064820152608490fd5b906f1b1a5c5d5a59185d1a5bdb931a5b5a5d60821b84036102375760008051602061187d8339815191529183865260018252806001604088200155610f07565b610fc69150833d85116102c7576102b9818361175e565b38610eb7565b50346102d957806003193601126102d95760206040516000805160206118dd8339815191528152f35b50346102d957806003193601126102d95760206040517f76d0567582f23e1e9d7a13eeba60f9aea9d69b8da87ca27a8bf3698b35c653db8152f35b50346102d95760203660031901126102d95760406060916004358152600160205220805490600260018201549101549060405192835260208301526040820152f35b50346102d95760203660031901126102d95760043560ff81168103610d36578154604051632474521560e21b81526004810184905233602482015290602090829060449082906001600160a01b03165afa908115610ce2578391611109575b50156110f7576006805460ff60a01b191660a09290921b60ff60a01b1691909117905580f35b604051631886ea7d60e11b8152600490fd5b611121915060203d81116102c7576102b9818361175e565b386110d1565b50346102d957806003193601126102d95760206040517f4f14c8366fa999817edc9f29824eb88a00cc31225e2156f399da4bc91049eb108152f35b50346102d957806003193601126102d95760206040517fd83f5343da19b478b15a140c301a868be9e02603958f38fbd822b9d5c0a289168152f35b50346102d957806003193601126102d9576002546040516001600160a01b039091168152602090f35b50346102d957806003193601126102d95760206040517fe453bacb314e78dcd5192e6b1a2b1f0e7c76e92f6b7e429a6a90f04e39db3b768152f35b50346102d957806003193601126102d9578054604051632474521560e21b81526000805160206118dd833981519152600482015233602482015290602090829060449082906001600160a01b03165afa908115610d5d5782916112a2575b501561129057806007557f2d4b4ecff7bd7503135271925520a2f6c0d98c9473ffc1a1e72c92502f51b25e8180a180f35b60405163bb0684b760e01b8152600490fd5b6112ba915060203d81116102c7576102b9818361175e565b3861125f565b50346102d957806003193601126102d957602090604051908152f35b50346102d957806003193601126102d95760206040517f880a91047114272656e533301261260c75e4d11543ac7303d6fe4204579ec7278152f35b50346102d95761132636611735565b8254604051632474521560e21b81526000805160206118bd83398151915260048201523360248201526020918290829060449082906001600160a01b03165afa90811561141c5785916113ff575b50156113ed5760045461138783826117ad565b908111610a4b57600455828452600181526002604085200154916113ab81846117ad565b928311610a4b577f78430dc03266569e2b73ec40d7107a5bc7047f2244bbca5d04294edb4a6f6ae392848652600183526002604087200155604051908152a280f35b60405163200ab6d960e01b8152600490fd5b6114169150823d84116102c7576102b9818361175e565b38611374565b6040513d87823e3d90fd5b50346102d957806003193601126102d9576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50346102d95760403660031901126102d95760043561148961171f565b8254604051632474521560e21b815260008051602061183d83398151915260048201523360248201526001600160a01b03916020908290604490829086165afa90811561141c57859161156a575b501561028e576f6163636f756e74696e67456e67696e6560801b830361152a57600280546001600160a01b03191682841617905560008051602061189d833981519152916020915b60405191168152a280f35b693634b8bab4b230ba37b960b11b830361023757600680546001600160a01b03191682841617905560008051602061189d8339815191529160209161151f565b611582915060203d81116102c7576102b9818361175e565b386114d7565b50346102d957806003193601126102d9576020600454604051908152f35b50346102d957806003193601126102d9576020600354604051908152f35b50346102d957806003193601126102d95760206040517f39f61ca2a1a28fee144218173ec637b649a353e4026b2738c673800e5bf1437b8152f35b50346102d957806003193601126102d9576020600754604051908152f35b50346102d957806003193601126102d9576006546040516001600160a01b039091168152602090f35b50346102d95760203660031901126102d95760406020916004358152600183522054604051908152f35b50346102d957806003193601126102d957546040516001600160a01b039091168152602090f35b905034610d36576020366003190112610d365760043563ffffffff60e01b8116809103610a1b5782546301ffc9a760e01b83526004830191909152602090829060249082906001600160a01b03165afa908115610d5d5760209291611702575b506040519015158152f35b6117199150823d81116102c7576102b9818361175e565b386116f7565b602435906001600160a01b0382168203610ba357565b6040906003190112610ba3576004359060243590565b6001600160401b038111610ced57604052565b601f909101601f19168101906001600160401b03821190821017610ced57604052565b90816020910312610ba357518015158103610ba35790565b51906001600160a01b0382168203610ba357565b91908203918211610ba857565b81156117c4570490565b634e487b7160e01b600052601260045260246000fd5b600160ff1b8114610ba85760000390565b9190820191828111610ba8578210610ba357565b600092918015918215611816575b505015610ba357565b80820294509150811582850482141715610ba85761183490846117ba565b14388061180d56fe3b5d4cc60d3ec3516ee8ae083bd60934f6eb2a6c54b1229985c41bfb092b2603ac7c5c1afaef770ec56ac6268cd3f2fbb1035858ead2601d6553157c33036c3ac59b1109b54f213212d2f5af5c1dae5e887f9daa63b595578fae847cb048e8f4d91f38cf03346b5dc15fb60f9076f866295231ad3c3841a1051f8443f25170d19a9aef7c1247d5fc769b0185c052913e39673da29a880317dfd20ebf86f26a49b0fdd1623e42dbffda4acd8bd643e1cb69f00f0e83abeaa8150ee42cf0fd105ea2646970667358221220a7362484c96b8a498f5acfd9520b5126ed3f591fda656b041873ea76534b7ff464736f6c63430008110033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b600090813560e01c90816301ffc9a7146116975750806303ee9f221461167057806318e81571146116465780634046ebae1461161d57806341b3a0d9146115ff578063438280dd146115c457806351a8cd87146115a6578063556617c7146115885780636614f0101461146c57806367aea313146114275780636efb72ce1461131757806371d0fb41146112dc57806375b238fc146112c0578063894ba833146112015780638e5313e0146111c6578063961d45c41461119d578063b38234f314611162578063bd5f5be614611127578063c4e9069814611072578063d07900bb14611030578063d0e8fa8214610ff5578063d2351cee14610fcc578063d4b9311d14610e4f578063dbec7dd414610e2b578063dc97e84e14610e02578063e8d769a714610de4578063e9c2651814610dbb578063eb9ff0b4146102dc5763fe4f58901461016057600080fd5b346102d95761016e36611735565b8254604051632474521560e21b815260008051602061183d833981519152600482015233602482015290602090829060449082906001600160a01b03165afa9081156102ce5784916102a0575b501561028e577511db1bd8985b131a5c5d5a59185d1a5bdb931a5b5a5d60521b82036102025760208160008051602061185d833981519152926003555b604051908152a280f35b6f131a5c5d5a59185d1bdc94995dd85c9960821b82036102375760208160008051602061185d833981519152926005556101f8565b60405162461bcd60e51b815260206004820152602960248201527f4c69717569646174696f6e456e67696e652f66696c652d756e7265636f676e696044820152687a65642d706172616d60b81b6064820152608490fd5b60405163599a6c3360e11b8152600490fd5b6102c1915060203d81116102c7575b6102b9818361175e565b810190611781565b386101bb565b503d6102af565b6040513d86823e3d90fd5b80fd5b50346102d95760803660031901126102d9576102f661171f565b906044356001600160a01b0381168103610d3657606435916001600160a01b03831683036102d957600160075403610d68577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163b156102d95760405163e401f2e760e01b815260048035908201528181602481837f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af18015610d5d57610d4e575b5060408051630f50894160e21b815260048035908201526001600160a01b03868116602483015290939190849060449082907f0000000000000000000000000000000000000000000000000000000000000000165afa918215610d425780938193610d03575b50600435815260016020526040808220905192906001600160401b036060850190811190851117610ced576060840160409081528154855260018201546020860152600290910154818501525163d07900bb60e01b8152600480359082015293610100856024816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa958615610ce257839684968591610c8b575b508015159081610c6f575b5015610c2b5760035460045480821180610c1a575b15610bc5576104e3916117ad565b6104f660208701516040880151906117ad565b808211610bbe57505b80670de0b6b3a7640000810204670de0b6b3a76400001481151715610ba85780670de0b6b3a76400008082020403610ba35761054888670de0b6b3a764000061055093026117ba565b8651906117ba565b808311610b9d575081955b8787808511610ae1575b505050906105768661057b936117ff565b6117ba565b948515610a9c57600160ff1b808611159081610a91575b5015610a4f57670de0b6b3a76400006105ad600554886117ff565b04916105b983886117ad565b92878411610a4b576002546001600160a01b0316906105d7906117da565b907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163b156109505760405192634e14a96760e01b8452600435600485015260018060a01b038c16602485015260018060a01b03166044840152606483015260848201528360a4820152838160c4818360018060a01b037f0000000000000000000000000000000000000000000000000000000000000000165af180156102ce57908491610a37575b50506006546002546001600160a01b0391821691166106a6846117da565b6106af886117da565b917f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163b15610a335760405193634e14a96760e01b8552600435600486015260018060a01b038d16602486015260448501526064840152608483015260a4820152838160c4818360018060a01b037f0000000000000000000000000000000000000000000000000000000000000000165af180156102ce57908491610a1f575b505061076390856117ff565b6002549093906001600160a01b0316803b156109fb5783809160246040518094819363a8b30a9f60e01b83528a60048401525af180156102ce57908491610a07575b5050806040670de0b6b3a76400006107c16107d99451886117ff565b04916107cf836004546117eb565b60045501516117eb565b6004358352600160205260026040842001556006546040519063d8dfeb4560e01b825260208260048160018060a01b038c165afa9182156102ce5784926109bf575b50600254604051631ff63f2360e11b815298906001600160a01b031660208a600481845afa998a156109b457869a610969575b50604051633bcce46f60e21b81526001600160a01b03948516600482015260248101959095529883166044850152606484019890985260a081901c60ff16608484015296811660a48301529095602091879160c49183918691165af194851561095c578195610919575b60208680878a888860018060a01b036006541691604051948552878501526040840152606083015260018060a01b0316907f3e68ae8e518de004a5c7f6407b51d7b729e26ddb6bcd135fe2f9e58df1b75b45608060043592a4604051908152f35b909591939294506020813d602011610954575b816109396020938361175e565b8101031261095057519094509290916020386108b8565b8580fd5b3d915061092c565b50604051903d90823e3d90fd5b9099506020813d6020116109ac575b816109856020938361175e565b810103126109505760c492602095949261099f8893611799565b9b9250929495509261084e565b3d9150610978565b6040513d88823e3d90fd5b9091506020813d6020116109ff575b816109db6020938361175e565b810103126109fb57516001600160a01b03811681036109fb57903861081b565b8380fd5b3d91506109ce565b610a109061174b565b610a1b5782386107a5565b8280fd5b610a289061174b565b610a1b578238610757565b8680fd5b610a409061174b565b610a1b578238610688565b8480fd5b60405162461bcd60e51b815260206004820152601a6024820152794c69717569646174696f6e456e67696e652f6f766572666c6f7760301b6044820152606490fd5b905086111538610592565b60405162461bcd60e51b815260206004820152601e60248201527f4c69717569646174696f6e456e67696e652f6e756c6c2d61756374696f6e00006044820152606490fd5b82610af883610af384899d989d6117ad565b6117ff565b1015610b1757505050508061057661057b9280975b9293899150610565565b90610b2591989493986117ff565b10610b37576105768661057b93610b0d565b60405162461bcd60e51b815260206004820152603860248201527f4c69717569646174696f6e456e67696e652f64757374792d61756374696f6e2d604482015277333937b696b830b93a34b0b616b634b8bab4b230ba34b7b760411b6064820152608490fd5b9561055b565b600080fd5b634e487b7160e01b600052601160045260246000fd5b90506104ff565b60405162461bcd60e51b815260206004820152602760248201527f4c69717569646174696f6e456e67696e652f6c69717569646174696f6e2d6c696044820152661b5a5d0b5a1a5d60ca1b6064820152608490fd5b5060208701516040880151106104d5565b60405162461bcd60e51b815260206004820152601c60248201527b4c69717569646174696f6e456e67696e652f6e6f742d756e7361666560201b6044820152606490fd5b610c7a9150826117ff565b610c8488846117ff565b11386104c0565b9650509550610100853d61010011610cda575b81610cac610100938361175e565b81010312610a1b57602085015195606086015196610cd160c060808901519801611799565b509695386104b5565b3d9150610c9e565b6040513d85823e3d90fd5b634e487b7160e01b600052604160045260246000fd5b935091506040833d604011610d3a575b81610d206040938361175e565b81010312610d3657602083519301519138610410565b5080fd5b3d9150610d13565b604051903d90823e3d90fd5b610d579061174b565b386103aa565b6040513d84823e3d90fd5b60405162461bcd60e51b815260206004820152602560248201527f4c69717569646174696f6e456e67696e652f6e6f742d636f6e7472616374456e60448201526418589b195960da1b6064820152608490fd5b50346102d957806003193601126102d957602060405160008051602061183d8339815191528152f35b50346102d957806003193601126102d9576020600554604051908152f35b50346102d957806003193601126102d95760206040516000805160206118bd8339815191528152f35b50346102d957806003193601126102d957602060ff60065460a01c16604051908152f35b50346102d95760603660031901126102d9576004356024359060443560018060a01b03845416906040518092632474521560e21b825260008051602061183d833981519152600483015233602483015281604460209586935afa9081156109b4578691610faf575b501561028e57716c69717569646174696f6e50656e616c747960701b8403610f6f57670de0b6b3a76400008110610f11579060008051602061187d83398151915291838652600182528060408720555b604051908152a380f35b60405162461bcd60e51b815260048101839052603060248201527f4c69717569646174696f6e456e67696e652f66696c652d6c697175696461746960448201526f1bdb94195b985b1d1e4b5b1d0b55d05160821b6064820152608490fd5b906f1b1a5c5d5a59185d1a5bdb931a5b5a5d60821b84036102375760008051602061187d8339815191529183865260018252806001604088200155610f07565b610fc69150833d85116102c7576102b9818361175e565b38610eb7565b50346102d957806003193601126102d95760206040516000805160206118dd8339815191528152f35b50346102d957806003193601126102d95760206040517f76d0567582f23e1e9d7a13eeba60f9aea9d69b8da87ca27a8bf3698b35c653db8152f35b50346102d95760203660031901126102d95760406060916004358152600160205220805490600260018201549101549060405192835260208301526040820152f35b50346102d95760203660031901126102d95760043560ff81168103610d36578154604051632474521560e21b81526004810184905233602482015290602090829060449082906001600160a01b03165afa908115610ce2578391611109575b50156110f7576006805460ff60a01b191660a09290921b60ff60a01b1691909117905580f35b604051631886ea7d60e11b8152600490fd5b611121915060203d81116102c7576102b9818361175e565b386110d1565b50346102d957806003193601126102d95760206040517f4f14c8366fa999817edc9f29824eb88a00cc31225e2156f399da4bc91049eb108152f35b50346102d957806003193601126102d95760206040517fd83f5343da19b478b15a140c301a868be9e02603958f38fbd822b9d5c0a289168152f35b50346102d957806003193601126102d9576002546040516001600160a01b039091168152602090f35b50346102d957806003193601126102d95760206040517fe453bacb314e78dcd5192e6b1a2b1f0e7c76e92f6b7e429a6a90f04e39db3b768152f35b50346102d957806003193601126102d9578054604051632474521560e21b81526000805160206118dd833981519152600482015233602482015290602090829060449082906001600160a01b03165afa908115610d5d5782916112a2575b501561129057806007557f2d4b4ecff7bd7503135271925520a2f6c0d98c9473ffc1a1e72c92502f51b25e8180a180f35b60405163bb0684b760e01b8152600490fd5b6112ba915060203d81116102c7576102b9818361175e565b3861125f565b50346102d957806003193601126102d957602090604051908152f35b50346102d957806003193601126102d95760206040517f880a91047114272656e533301261260c75e4d11543ac7303d6fe4204579ec7278152f35b50346102d95761132636611735565b8254604051632474521560e21b81526000805160206118bd83398151915260048201523360248201526020918290829060449082906001600160a01b03165afa90811561141c5785916113ff575b50156113ed5760045461138783826117ad565b908111610a4b57600455828452600181526002604085200154916113ab81846117ad565b928311610a4b577f78430dc03266569e2b73ec40d7107a5bc7047f2244bbca5d04294edb4a6f6ae392848652600183526002604087200155604051908152a280f35b60405163200ab6d960e01b8152600490fd5b6114169150823d84116102c7576102b9818361175e565b38611374565b6040513d87823e3d90fd5b50346102d957806003193601126102d9576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50346102d95760403660031901126102d95760043561148961171f565b8254604051632474521560e21b815260008051602061183d83398151915260048201523360248201526001600160a01b03916020908290604490829086165afa90811561141c57859161156a575b501561028e576f6163636f756e74696e67456e67696e6560801b830361152a57600280546001600160a01b03191682841617905560008051602061189d833981519152916020915b60405191168152a280f35b693634b8bab4b230ba37b960b11b830361023757600680546001600160a01b03191682841617905560008051602061189d8339815191529160209161151f565b611582915060203d81116102c7576102b9818361175e565b386114d7565b50346102d957806003193601126102d9576020600454604051908152f35b50346102d957806003193601126102d9576020600354604051908152f35b50346102d957806003193601126102d95760206040517f39f61ca2a1a28fee144218173ec637b649a353e4026b2738c673800e5bf1437b8152f35b50346102d957806003193601126102d9576020600754604051908152f35b50346102d957806003193601126102d9576006546040516001600160a01b039091168152602090f35b50346102d95760203660031901126102d95760406020916004358152600183522054604051908152f35b50346102d957806003193601126102d957546040516001600160a01b039091168152602090f35b905034610d36576020366003190112610d365760043563ffffffff60e01b8116809103610a1b5782546301ffc9a760e01b83526004830191909152602090829060249082906001600160a01b03165afa908115610d5d5760209291611702575b506040519015158152f35b6117199150823d81116102c7576102b9818361175e565b386116f7565b602435906001600160a01b0382168203610ba357565b6040906003190112610ba3576004359060243590565b6001600160401b038111610ced57604052565b601f909101601f19168101906001600160401b03821190821017610ced57604052565b90816020910312610ba357518015158103610ba35790565b51906001600160a01b0382168203610ba357565b91908203918211610ba857565b81156117c4570490565b634e487b7160e01b600052601260045260246000fd5b600160ff1b8114610ba85760000390565b9190820191828111610ba8578210610ba357565b600092918015918215611816575b505015610ba357565b80820294509150811582850482141715610ba85761183490846117ba565b14388061180d56fe3b5d4cc60d3ec3516ee8ae083bd60934f6eb2a6c54b1229985c41bfb092b2603ac7c5c1afaef770ec56ac6268cd3f2fbb1035858ead2601d6553157c33036c3ac59b1109b54f213212d2f5af5c1dae5e887f9daa63b595578fae847cb048e8f4d91f38cf03346b5dc15fb60f9076f866295231ad3c3841a1051f8443f25170d19a9aef7c1247d5fc769b0185c052913e39673da29a880317dfd20ebf86f26a49b0fdd1623e42dbffda4acd8bd643e1cb69f00f0e83abeaa8150ee42cf0fd105ea2646970667358221220a7362484c96b8a498f5acfd9520b5126ed3f591fda656b041873ea76534b7ff464736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "liquidateCDP(bytes32,address,address,address)": {
        "details": "The entire Vault will be liquidated except when the target amount of StablePro to be raised in the resulting auction (debt of Vault + liquidation penalty) causes either ActiveLiquidationAmount to exceed GlobalLiquidationLimit or collateralType.activeLiquidationAmount to exceed collateralType.liquidationLimit by an economically significant amount. In that case, a partial liquidation is performed to respect the global and per-collateralType limits on outstanding StablePro target. The one exception is if the resulting auction would likely have too little collateral to be interesting to Keepers (debt taken from Vault < collateralType.debtFloor), in which case the function reverts. Please refer to the code and comments within if more detail is desired.",
        "params": {
          "cdp": "- address of cdp position",
          "collateralJoin": "- address of collateral adapter*",
          "collateralType": "- collateral type",
          "incentivesReceiver": "- address that will receive the liquidation reward, if any."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "liquidateCDP(bytes32,address,address,address)": {
        "notice": "Liquidate a Vault and start a Dutch auction to sell its collateral for StablePro."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5984,
        "contract": "contracts/makerdao/externalContracts/LiquidationEngine.sol:LiquidationEngine",
        "label": "ACCESS_CONTROL_SINGLETON",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ISuAccessControl)6267"
      },
      {
        "astId": 4221,
        "contract": "contracts/makerdao/externalContracts/LiquidationEngine.sol:LiquidationEngine",
        "label": "collateralTypes",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(CollateralType)5152_storage)"
      },
      {
        "astId": 4224,
        "contract": "contracts/makerdao/externalContracts/LiquidationEngine.sol:LiquidationEngine",
        "label": "accountingEngine",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IAccountingEngine)4948"
      },
      {
        "astId": 4226,
        "contract": "contracts/makerdao/externalContracts/LiquidationEngine.sol:LiquidationEngine",
        "label": "GlobalLiquidationLimit",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 4228,
        "contract": "contracts/makerdao/externalContracts/LiquidationEngine.sol:LiquidationEngine",
        "label": "ActiveLiquidationAmount",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 4230,
        "contract": "contracts/makerdao/externalContracts/LiquidationEngine.sol:LiquidationEngine",
        "label": "LiquidatorReward",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 4232,
        "contract": "contracts/makerdao/externalContracts/LiquidationEngine.sol:LiquidationEngine",
        "label": "liquidator",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 4234,
        "contract": "contracts/makerdao/externalContracts/LiquidationEngine.sol:LiquidationEngine",
        "label": "liquidationDiscountType",
        "offset": 20,
        "slot": "6",
        "type": "t_uint8"
      },
      {
        "astId": 4266,
        "contract": "contracts/makerdao/externalContracts/LiquidationEngine.sol:LiquidationEngine",
        "label": "contractEnabled",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAccountingEngine)4948": {
        "encoding": "inplace",
        "label": "contract IAccountingEngine",
        "numberOfBytes": "20"
      },
      "t_contract(ISuAccessControl)6267": {
        "encoding": "inplace",
        "label": "contract ISuAccessControl",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_struct(CollateralType)5152_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct ILiquidationEngine.CollateralType)",
        "numberOfBytes": "32",
        "value": "t_struct(CollateralType)5152_storage"
      },
      "t_struct(CollateralType)5152_storage": {
        "encoding": "inplace",
        "label": "struct ILiquidationEngine.CollateralType",
        "members": [
          {
            "astId": 5147,
            "contract": "contracts/makerdao/externalContracts/LiquidationEngine.sol:LiquidationEngine",
            "label": "liquidationPenalty",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5149,
            "contract": "contracts/makerdao/externalContracts/LiquidationEngine.sol:LiquidationEngine",
            "label": "liquidationLimit",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5151,
            "contract": "contracts/makerdao/externalContracts/LiquidationEngine.sol:LiquidationEngine",
            "label": "activeLiquidationAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}