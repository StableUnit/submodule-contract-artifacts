{
  "address": "0xC66AB83418C20A65C3f8e83B3d11c8C3a6097b6F",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getUsdPrice1e18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "setPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa263289b7304c0c9b2bb0f2dc6d4965a498259f2ef6851a6479cba29207f222d",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xC66AB83418C20A65C3f8e83B3d11c8C3a6097b6F",
    "transactionIndex": 0,
    "gasUsed": "303900",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000001000000000000000000000000000000000000020000000000000100000a00000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000002000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x9ee71e9f99c73b1d15b3d36bdd29fe9e17de8a706f0cf27cd7e97326dc5bd24f",
    "transactionHash": "0xa263289b7304c0c9b2bb0f2dc6d4965a498259f2ef6851a6479cba29207f222d",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 14518097,
        "transactionHash": "0xa263289b7304c0c9b2bb0f2dc6d4965a498259f2ef6851a6479cba29207f222d",
        "address": "0xC66AB83418C20A65C3f8e83B3d11c8C3a6097b6F",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x9ee71e9f99c73b1d15b3d36bdd29fe9e17de8a706f0cf27cd7e97326dc5bd24f"
      }
    ],
    "blockNumber": 14518097,
    "cumulativeGasUsed": "303900",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d1c3e992972545e414ac7f62b849d9a1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getUsdPrice1e18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getUsdPrice1e18(address)\":{\"params\":{\"asset\":\"of erc20 token\"},\"returns\":{\"_0\":\"price1e18 such as asset.balanceOf() * price1e18 / 1e18 == $$ 1e18*\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getUsdPrice1e18(address)\":{\"notice\":\"returns price1e18(assert) such that:   [assetAmount * price1e18(assert) / 1e18 === $$ 1e18] == suUSD   examples:       market price of btc = $30k,       for 0.1 wBTC the unit256 amount is 0.1 * 1e18       0.1 * 1e18 * (price1e18 / 1e18) == $3000 == uint256(3000*1e18)       => price1e18 = 30000 * 1e18;       market price of usdt = $0.97,       for 1 usdt uint256 = 1 * 1e6       so 1*1e6 * price1e18 / 1e18 == $0.97 == uint256(0.97*1e18)       => 1*1e6 * (price1e18 / 1e18) / (0.97*1e18)   = 1       =>  price1e18 = 0.97 * (1e18/1e6) * 1e18\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mocks/MockOracle.sol\":\"MockOracle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/interfaces/ISuOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity >=0.7.6;\\n\\ninterface ISuOracle {\\n    /**\\n     * @notice returns price1e18(assert) such that:\\n     *   [assetAmount * price1e18(assert) / 1e18 === $$ 1e18] == suUSD\\n     *   examples:\\n     *       market price of btc = $30k,\\n     *       for 0.1 wBTC the unit256 amount is 0.1 * 1e18\\n     *       0.1 * 1e18 * (price1e18 / 1e18) == $3000 == uint256(3000*1e18)\\n     *       => price1e18 = 30000 * 1e18;\\n\\n     *       market price of usdt = $0.97,\\n     *       for 1 usdt uint256 = 1 * 1e6\\n     *       so 1*1e6 * price1e18 / 1e18 == $0.97 == uint256(0.97*1e18)\\n     *       => 1*1e6 * (price1e18 / 1e18) / (0.97*1e18)   = 1\\n     *       =>  price1e18 = 0.97 * (1e18/1e6) * 1e18\\n     * @param asset of erc20 token\\n     * @return price1e18 such as asset.balanceOf() * price1e18 / 1e18 == $$ 1e18\\n     **/\\n    function getUsdPrice1e18(address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2ec14e1ab536f98d4a70eb0f1233652d15e6dda29db4285c613315f499020123\",\"license\":\"UNLICENSED\"},\"contracts/mocks/MockOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"../interfaces/ISuOracle.sol\\\";\\n\\ncontract MockOracle is ISuOracle, Ownable {\\n    constructor() {\\n    }\\n\\n    mapping (address => uint256) assets;\\n\\n    function getUsdPrice1e18(address asset) override external view returns (uint) {\\n        return assets[asset] * 10**18;\\n    }\\n\\n    function setPrice(address asset, uint256 price) public onlyOwner {\\n        assets[asset] = price;\\n    }\\n}\",\"keccak256\":\"0x615c9aafb8f48b5cc4c9bf51c7dc9957ab7b703624b682774e03aecd70a90fb1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6104188061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100665760003560e01c8063715018a611610050578063715018a6146100a65780638da5cb5b146100ae578063f2fde38b146100c957600080fd5b8062e4768b1461006b578063356efd9814610080575b600080fd5b61007e610079366004610375565b6100dc565b005b61009361008e366004610354565b610157565b6040519081526020015b60405180910390f35b61007e610188565b6000546040516001600160a01b03909116815260200161009d565b61007e6100d7366004610354565b6101ee565b6000546001600160a01b0316331461013b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6001600160a01b03909116600090815260016020526040902055565b6001600160a01b03811660009081526001602052604081205461018290670de0b6b3a764000061039e565b92915050565b6000546001600160a01b031633146101e25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610132565b6101ec60006102d0565b565b6000546001600160a01b031633146102485760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610132565b6001600160a01b0381166102c45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610132565b6102cd816102d0565b50565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461034f57600080fd5b919050565b600060208284031215610365578081fd5b61036e82610338565b9392505050565b60008060408385031215610387578081fd5b61039083610338565b946020939093013593505050565b60008160001904831182151516156103dd577f4e487b710000000000000000000000000000000000000000000000000000000081526011600452602481fd5b50029056fea26469706673582212205f8e6b9263b615140a4fd26c8169705ced092bb0292fae66232ca9f0ce91ca0064736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100665760003560e01c8063715018a611610050578063715018a6146100a65780638da5cb5b146100ae578063f2fde38b146100c957600080fd5b8062e4768b1461006b578063356efd9814610080575b600080fd5b61007e610079366004610375565b6100dc565b005b61009361008e366004610354565b610157565b6040519081526020015b60405180910390f35b61007e610188565b6000546040516001600160a01b03909116815260200161009d565b61007e6100d7366004610354565b6101ee565b6000546001600160a01b0316331461013b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6001600160a01b03909116600090815260016020526040902055565b6001600160a01b03811660009081526001602052604081205461018290670de0b6b3a764000061039e565b92915050565b6000546001600160a01b031633146101e25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610132565b6101ec60006102d0565b565b6000546001600160a01b031633146102485760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610132565b6001600160a01b0381166102c45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610132565b6102cd816102d0565b50565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461034f57600080fd5b919050565b600060208284031215610365578081fd5b61036e82610338565b9392505050565b60008060408385031215610387578081fd5b61039083610338565b946020939093013593505050565b60008160001904831182151516156103dd577f4e487b710000000000000000000000000000000000000000000000000000000081526011600452602481fd5b50029056fea26469706673582212205f8e6b9263b615140a4fd26c8169705ced092bb0292fae66232ca9f0ce91ca0064736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getUsdPrice1e18(address)": {
        "params": {
          "asset": "of erc20 token"
        },
        "returns": {
          "_0": "price1e18 such as asset.balanceOf() * price1e18 / 1e18 == $$ 1e18*"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getUsdPrice1e18(address)": {
        "notice": "returns price1e18(assert) such that:   [assetAmount * price1e18(assert) / 1e18 === $$ 1e18] == suUSD   examples:       market price of btc = $30k,       for 0.1 wBTC the unit256 amount is 0.1 * 1e18       0.1 * 1e18 * (price1e18 / 1e18) == $3000 == uint256(3000*1e18)       => price1e18 = 30000 * 1e18;       market price of usdt = $0.97,       for 1 usdt uint256 = 1 * 1e6       so 1*1e6 * price1e18 / 1e18 == $0.97 == uint256(0.97*1e18)       => 1*1e6 * (price1e18 / 1e18) / (0.97*1e18)   = 1       =>  price1e18 = 0.97 * (1e18/1e6) * 1e18"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 435,
        "contract": "contracts/mocks/MockOracle.sol:MockOracle",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7298,
        "contract": "contracts/mocks/MockOracle.sol:MockOracle",
        "label": "assets",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}