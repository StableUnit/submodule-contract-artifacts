{
  "address": "0xaC47e91215fb80462139756f43438402998E4A3a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_authControl",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stablecoin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_foundation",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ACCESS_CONTROL_SINGLETON",
      "outputs": [
        {
          "internalType": "contract ISuAccessControl",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DENOMINATOR_1E5",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VAULT_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "borrow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "calculateFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newOracleType",
          "type": "uint256"
        }
      ],
      "name": "changeOracleType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "chargeFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "collaterals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "debts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "destroy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "foundation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getTotalDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isOracleTypeEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastUpdate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "positionOwner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "mainAssetToLiquidator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mainAssetToPositionOwner",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "repayment",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "penalty",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "liquidationBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "liquidationFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "liquidationPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "oracleType",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "protocolLiquidationFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "protocolStabilityFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "repay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stabilityFeeValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidationFeeValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stablecoinLimit",
          "type": "uint256"
        }
      ],
      "name": "setCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newFoundation",
          "type": "address"
        }
      ],
      "name": "setFoundation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "setLiquidationFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_type",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setOracleType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "setStabilityFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "setTokenDebtLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "spawn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stabilityFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stablecoin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenDebtLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenDebts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "positionOwner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "initialPrice",
          "type": "uint256"
        }
      ],
      "name": "triggerLiquidation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "update",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultParameters",
      "outputs": [
        {
          "internalType": "contract SuVaultParameters",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x88adae739f36d3203548284b789077cc7035a7c8a89ebd04688d032a08a6d2f3",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xaC47e91215fb80462139756f43438402998E4A3a",
    "transactionIndex": 0,
    "gasUsed": "3034874",
    "logsBloom": "0x
    "blockHash": "0xab5fb473a1211ae42f4c9f2848b9096f42355e6dfd3cbe8dc49bfa87929b63bb",
    "transactionHash": "0x88adae739f36d3203548284b789077cc7035a7c8a89ebd04688d032a08a6d2f3",
    "logs": [],
    "blockNumber": 14518100,
    "cumulativeGasUsed": "3034874",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xeF31027350Be2c7439C1b0BE022d49421488b72C",
    "0x12Bcb546bC60fF39F1Adfc7cE4605d5Bd6a6A876",
    "0xd2D7715BAe07e5B9d7c0Ec0b671B9bAD6b9dBEBb"
  ],
  "numDeployments": 1,
  "solcInputHash": "d1c3e992972545e414ac7f62b849d9a1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_authControl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stablecoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_foundation\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ACCESS_CONTROL_SINGLETON\",\"outputs\":[{\"internalType\":\"contract ISuAccessControl\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DENOMINATOR_1E5\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VAULT_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newOracleType\",\"type\":\"uint256\"}],\"name\":\"changeOracleType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"chargeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"collaterals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"debts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"destroy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"foundation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getTotalDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOracleTypeEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"positionOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mainAssetToLiquidator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mainAssetToPositionOwner\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repayment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidationBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidationPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"oracleType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"protocolLiquidationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"protocolStabilityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stabilityFeeValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationFeeValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stablecoinLimit\",\"type\":\"uint256\"}],\"name\":\"setCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFoundation\",\"type\":\"address\"}],\"name\":\"setFoundation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setLiquidationFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setOracleType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setStabilityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"setTokenDebtLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"spawn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stabilityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stablecoin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenDebtLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenDebts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"positionOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialPrice\",\"type\":\"uint256\"}],\"name\":\"triggerLiquidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultParameters\",\"outputs\":[{\"internalType\":\"contract SuVaultParameters\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"borrow(address,address,uint256)\":{\"notice\":\"no, one debt for [asset][user]\"},\"calculateFee(address,address,uint256)\":{\"notice\":\"No, any call of vault.update would calc fee in debt and restart fee timer\"},\"changeOracleType(address,address,uint256)\":{\"notice\":\"any time\"},\"chargeFee(address,address,uint256)\":{\"notice\":\"this is just transfer function, manager calc fees\"},\"collaterals(address,address)\":{\"notice\":\"No, it's how much user had stacked collaterael asset == collaterals[asset][user], i.e deposits\"},\"constructor\":{\"notice\":\"YES\"},\"debts(address,address)\":{\"notice\":\"Yes, in stablecoin amount, == debts[asset][user]\"},\"destroy(address,address)\":{\"notice\":\"only destroy debt info, exit -> _repay -> destroy if debt == 0\"},\"foundation()\":{\"notice\":\"Beneficiaty as VotingEscrow.vy\"},\"getTotalDebt(address,address)\":{\"notice\":\"they don't use it in practice\"},\"isOracleTypeEnabled(uint256,address)\":{\"notice\":\"TODO:\"},\"lastUpdate(address,address)\":{\"notice\":\"everything before lastUpdates is already calced in the debt. all data such as fees are from lastUpdate only\"},\"liquidate(address,address,uint256,uint256,uint256,uint256,address)\":{\"notice\":\"please see https://ratiofinance.medium.com/ratio-risk-lesson-2-cascading-liquidations-e91e04050f47\"},\"liquidationBlock(address,address)\":{\"notice\":\"Yes ,  liquidationBlock[asset][user]\"},\"liquidationFee(address,address)\":{\"notice\":\"Penalty during liquidation\"},\"liquidationPrice(address,address)\":{\"notice\":\"see line 287 triggerLiquidation: liquidationPrice[asset][positionOwner] = initialPrice;\"},\"oracleType(address,address)\":{\"notice\":\"ID of oracle contact for oracleType[asset][user]\"},\"protocolLiquidationFee(address)\":{\"notice\":\"yes\"},\"protocolStabilityFee(address)\":{\"notice\":\"yes\"},\"repay(address,address,uint256)\":{\"notice\":\"return for the debt\"},\"setCollateral(address,uint256,uint256,uint256)\":{\"notice\":\"Not sure it makes sense to split into create/edit functions\"},\"setLiquidationFee(address,uint256)\":{\"notice\":\"% 0 decimals, needede to get better variable names\"},\"setOracleType(uint256,address,bool)\":{\"notice\":\"All oracles implementation are numbered, so some of them support this particular asset\"},\"setStabilityFee(address,uint256)\":{\"notice\":\"No, it's APR ( per year, see calculateFee) percentrage, fee percentage; 3 decimals. YES, self-documented code-style is the best practice.\"},\"setTokenDebtLimit(address,uint256)\":{\"notice\":\"Yes, application of  principle of least priviledge needed\"},\"spawn(address,address)\":{\"notice\":\"all implementation are numbered\"},\"stabilityFee(address,address)\":{\"notice\":\"current interest that user pay for stabilityFee[asset][user]\"},\"tokenDebtLimit(address)\":{\"notice\":\"yes, limit for each collateral-assert\"},\"tokenDebts(address)\":{\"notice\":\"How much stablecoin was borrowed against particular asset == tokenDebts[asset]\"},\"triggerLiquidation(address,address,uint256)\":{\"notice\":\"it's Vault so Manager does tells it what to do.\"},\"update(address,address)\":{\"notice\":\"when user borrows more\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lending/SuVault.sol\":\"SuVault\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4a1a0ba12bf1a33f10d9fe226278cf59675c0b929d29e4da99658a079b27fb84\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xdadd41acb749920eccf40aeaa8d291adf9751399a7343561bad13e7a8d99be0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/SuUSD.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\n/*\\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\\n*/\\npragma solidity ^0.8.0;\\n\\nimport \\\"./access-control/SuAccessControlSingleton.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract SuUSD is ERC20, SuAuthenticated {\\n    constructor(address _authControl) ERC20(\\\"StableUnit USD\\\", \\\"SuUSD\\\") SuAuthenticated(_authControl) {}\\n\\n    /**\\n      * @notice Only Vault can mint SuUSD\\n      * @dev Mints 'amount' of tokens to address 'to', and MUST fire the\\n      * Transfer event\\n      * @param to The address of the recipient\\n      * @param amount The amount of token to be minted\\n     **/\\n\\n     // dollars can be minted by vault (once user deposited collateral)\\n    function mint(address to, uint256 amount) external onlyMinter {\\n        _mint(to, amount);\\n    }\\n\\n    // dollars can be burned by manager but only his own dollars\\n    // which managers will be using this feature? burning protocol fees?\\n    function burn(uint256 amount) external onlyOwner {\\n        _burn(msg.sender, amount);\\n    }\\n\\n     // also vault is allowed to burn dollars of any account\\n     // when user repays his loan and takes back his collateral\\n    function burn(address from, uint256 amount) external onlyMinter {\\n        _burn(from, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xac5d3a7d2f200f1998a973a9c8a50fd6944dda33e6ba8498cbc02fa5763f3055\",\"license\":\"BSL 1.1\"},\"contracts/access-control/SuAccessControlSingleton.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"./SuAuthenticated.sol\\\";\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title SuAccessControl\\n * @dev Access control for contracts. SuVaultParameters can be inherited from it.\\n */\\n// TODO: refactor by https://en.wikipedia.org/wiki/Principle_of_least_privilege\\ncontract SuAccessControlSingleton is AccessControl, SuAuthenticated {\\n    /**\\n     * @dev Initialize the contract with initial owner to be deployer\\n     */\\n    constructor() SuAuthenticated(address(this)) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    /**\\n    * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n    * Can only be called by the current owner.\\n    */\\n    function transferOwnership(address newOwner) external {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Ownable: caller is not the owner\\\");\\n\\n        if (hasRole(MINTER_ROLE, msg.sender)) {\\n            grantRole(MINTER_ROLE, newOwner);\\n            revokeRole(MINTER_ROLE, msg.sender);\\n        }\\n\\n        if (hasRole(VAULT_ACCESS_ROLE, msg.sender)) {\\n            grantRole(VAULT_ACCESS_ROLE, newOwner);\\n            revokeRole(VAULT_ACCESS_ROLE, msg.sender);\\n        }\\n\\n        grantRole(DEFAULT_ADMIN_ROLE, newOwner);\\n        revokeRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0xecbacd6aa378b65c97e1006790e9ec0c5af8808490f5f921c4c7dadac05b271b\",\"license\":\"BSL 1.1\"},\"contracts/access-control/SuAuthenticated.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\npragma solidity >=0.7.6;\\n\\nimport \\\"../interfaces/ISuAccessControl.sol\\\";\\n\\n/**\\n * @title SuAuthenticated\\n * @dev other contracts should inherit to be authenticated\\n */\\nabstract contract SuAuthenticated {\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant VAULT_ACCESS_ROLE = keccak256(\\\"VAULT_ACCESS_ROLE\\\");\\n    bytes32 private constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /// @dev the address of SuAccessControlSingleton - it should be one for all contract that inherits SuAuthenticated\\n    ISuAccessControl public immutable ACCESS_CONTROL_SINGLETON;\\n\\n    /// @dev should be passed in constructor\\n    constructor(address _accessControlSingleton) {\\n        ACCESS_CONTROL_SINGLETON = ISuAccessControl(_accessControlSingleton);\\n        // TODO: check that _accessControlSingleton points to ISuAccessControl instance\\n        // require(ISuAccessControl(_accessControlSingleton).supportsInterface(ISuAccessControl.hasRole.selector), \\\"bad dependency\\\");\\n    }\\n\\n    /// @dev check DEFAULT_ADMIN_ROLE\\n    modifier onlyOwner() {\\n        require(ACCESS_CONTROL_SINGLETON.hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"SuAuth: onlyOwner AUTH_FAILED\\\");\\n        _;\\n    }\\n\\n    /// @dev check VAULT_ACCESS_ROLE\\n    modifier onlyVaultAccess() {\\n        require(ACCESS_CONTROL_SINGLETON.hasRole(VAULT_ACCESS_ROLE, msg.sender), \\\"SuAuth: onlyVaultAccess AUTH_FAILED\\\");\\n        _;\\n    }\\n\\n    /// @dev check MINTER_ROLE\\n    modifier onlyMinter() {\\n        require(ACCESS_CONTROL_SINGLETON.hasRole(MINTER_ROLE, msg.sender), \\\"SuAuth: onlyMinter AUTH_FAILED\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x7e2dd99b7f458bd19debd482486a0f45e10c07527849f38e9b22e7a1c28e09d1\",\"license\":\"BSL 1.1\"},\"contracts/interfaces/ISuAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface ISuAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n    function grantRole(bytes32 role, address account) external;\\n    function revokeRole(bytes32 role, address account) external;\\n    function renounceRole(bytes32 role, address account) external;\\n\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    // TODO: remove legacy functionality\\n    function setVault(address _vault, bool _isVault) external;\\n    function setCdpManager(address _cdpManager, bool _isCdpManager) external;\\n    function setDAO(address _dao, bool _isDAO) external;\\n    function setManagerParameters(address _address, bool _permit) external;\\n    function transferOwnership(address newOwner) external;\\n}\\n\",\"keccak256\":\"0xd386f4bad5ae0d77788abea08ceec10dc02b02559465d8a8f4e30b58dfac2d2a\",\"license\":\"MIT\"},\"contracts/lending/SuVault.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\n/*\\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\\n*/\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./SuVaultParameters.sol\\\";\\nimport \\\"../SuUSD.sol\\\";\\nimport \\\"../access-control/SuAccessControlSingleton.sol\\\";\\n\\ncontract SuVault is SuVaultParameters {\\n    // 10^5 = 100000\\n    uint public constant DENOMINATOR_1E5 = 1e5;\\n\\n    // token itself - will be unit stable coin\\n    address public immutable stablecoin;\\n\\n    // which tokens are allowed as collateral; what's the int value - min threshold or rate?\\n    /// No, it's how much user had stacked collaterael asset == collaterals[asset][user], i.e deposits\\n    mapping(address => mapping(address => uint)) public collaterals;\\n\\n    // mapping of user address to integer value; which is the amount of debt represented by what?\\n    /// Yes, in stablecoin amount, == debts[asset][user]\\n    // or might be it mapping fro token address into total debt amount?\\n    mapping(address => mapping(address => uint)) public debts;\\n\\n    // liquidation can be triggered by permissionless-action?\\n    /// Yes\\n    // then the process begins and we remember which block it started at\\n    // is it indexed by collateral token address?\\n    /// Yes ,  liquidationBlock[asset][user]\\n    mapping(address => mapping(address => uint)) public liquidationBlock;\\n\\n    // mapping of collateral address to liquidation price;\\n    // when and who decides on the collateral price, is that dynamic?\\n    /// see line 287 triggerLiquidation: liquidationPrice[asset][positionOwner] = initialPrice;\\n    mapping(address => mapping(address => uint)) public liquidationPrice;\\n\\n    // mapping of address to integer for token debts;\\n    // what'is the units of measurement?\\n    /// How much stablecoin was borrowed against particular asset == tokenDebts[asset]\\n    mapping(address => uint) public tokenDebts;\\n\\n    // double mapping probably from collateral to each user to debt\\n    // how is stability fee calculated and where is it paid and when?\\n    /// current interest that user pay for stabilityFee[asset][user]\\n    mapping(address => mapping(address => uint)) public stabilityFee;\\n\\n    // another similar mapping for another fee, how is liquidation fee different from stability fee?\\n    // can we combine both mapping into single mapping to structure?\\n    /// Penalty during liquidation\\n    mapping(address => mapping(address => uint)) public liquidationFee;\\n\\n    // mapping for oracles; are there different oracle types? who is allowed to choose oracle?\\n    // oracles are passive\\n    /// ID of oracle contact for oracleType[asset][user]\\n    mapping(address => mapping(address => uint)) public oracleType;\\n\\n    // mapping for timestamps;\\n    // why do we need timestamps? how do we calculate medium price when merging positions?\\n    /// everything before lastUpdates is already calced in the debt. all data such as fees are from lastUpdate only\\n    mapping(address => mapping(address => uint)) public lastUpdate;\\n\\n    // check if liquidation process not started for asset of user\\n    /// YES\\n    modifier notLiquidating(address asset, address user) {\\n        require(liquidationBlock[asset][user] == 0, \\\"Unit Protocol: LIQUIDATING_POSITION\\\");\\n        _;\\n    }\\n\\n    SuVaultParameters public immutable vaultParameters;\\n\\n    // vault is initialize with parameters for auth (we are using OZ instead)\\n    // and it accept address for wrapped eth, main stable coin, and probably governance token\\n    /// YES\\n    constructor(address _authControl, address _stablecoin, address _foundation)\\n        SuVaultParameters(_authControl, payable(this), _foundation) {\\n        stablecoin = _stablecoin;\\n        vaultParameters = SuVaultParameters(address(this));\\n    }\\n\\n    // do not accept direct payments from users because they will be stuck on contract address\\n    /// YES, does work for erc20\\n    receive() external payable {\\n        revert(\\\"Unit Protocol: RESTRICTED\\\");\\n    }\\n\\n     // who does have vault access?\\n     /// anyone from canModifyVault\\n     // why position is not allowed to be modified during liquidation?\\n     /// because when it's launched - liquidators want to be sure they can participate\\n     // how often update can be triggered?\\n     /// when user borrows more\\n    function update(address asset, address user) public onlyVaultAccess notLiquidating(asset, user) {\\n\\n        // probably should be checked if zero then skip\\n        ///\\n        uint debtWithFee = getTotalDebt(asset, user);\\n\\n        // we decrease token debt by current debt and increase by new debt\\n        // can we just set new value instead?\\n        tokenDebts[asset] = tokenDebts[asset] - debts[asset][user] + debtWithFee;\\n\\n        // we set new debt for asset of user\\n        debts[asset][user] = debtWithFee;\\n\\n        // we also set new fee\\n        stabilityFee[asset][user] = vaultParameters.protocolStabilityFee(asset);\\n\\n        // we also set new fee\\n        liquidationFee[asset][user] = vaultParameters.protocolLiquidationFee(asset);\\n\\n        // and update timestamp\\n        lastUpdate[asset][user] = block.timestamp;\\n    }\\n\\n     // spawn means to create new debt position for user\\n     // it accepts collateral token address and user and chosen oracle type\\n     // this function is not called by user but by special priviliged account?\\n     /// yes, by CDP manager 01\\n     // what are the options for oracle type?\\n     /// all implementation are numbered\\n    function spawn(address asset, address user) external onlyVaultAccess notLiquidating(asset, user) {\\n\\n        // why its being removed and which cases its not empty?\\n        /// could be liquidationBlock[asset][user] = 0;\\n        delete liquidationBlock[asset][user];\\n    }\\n\\n    // does it help to restore gas fees? what's the purpose of cleanup?\\n    /// Not clear for after London hardfork\\n    // how do ensure its not being called unexpectedly? very dangerous function\\n    /// only destroy debt info, exit -> _repay -> destroy if debt == 0\\n    function destroy(address asset, address user) public onlyVaultAccess notLiquidating(asset, user) {\\n        delete stabilityFee[asset][user];\\n        delete oracleType[asset][user];\\n        delete lastUpdate[asset][user];\\n        delete liquidationFee[asset][user];\\n    }\\n\\n     // collateral deposit\\n    function deposit(address asset, address user, uint amount) external onlyVaultAccess notLiquidating(asset, user) {\\n        SafeERC20.safeTransferFrom(IERC20(asset), user, address(this), amount);\\n        collaterals[asset][user] = collaterals[asset][user] + amount;\\n    }\\n\\n     // collateral withdraw\\n     // why being called by privileged account and not by user?\\n    function withdraw(address asset, address user, uint amount) external onlyVaultAccess notLiquidating(asset, user) {\\n        SafeERC20.safeTransfer(IERC20(asset), user, amount);\\n        collaterals[asset][user] = collaterals[asset][user] - amount;\\n    }\\n\\n     // BORROW == takeUnit\\n     /// yes, fro cdpManager01\\n     // user expected previously to deposit collateral and then being able to take stablecoin\\n     // but where do we check current user collateral and amount??\\n     /// in CDPManager01\\n     // can user create single position with multiple collaterals?\\n     /// no, one debt for [asset][user]\\n    function borrow(\\n        address asset,\\n        address user,\\n        uint amount\\n    )\\n    external\\n    onlyVaultAccess\\n    notLiquidating(asset, user)\\n    returns(uint)\\n    {\\n        // update debts and fees of user for collateral\\n        /// I think better name is needed\\n        update(asset, user);\\n\\n        // why we update it again after update already called?\\n        /// because update doesn't use amount, only calc curr fees\\n        debts[asset][user] = debts[asset][user] + amount;\\n        tokenDebts[asset] = tokenDebts[asset] + amount;\\n\\n        // there is a limit of total debt for each collateral\\n        // why that limit is needed?\\n        /// because of risk profile\\n        require(tokenDebts[asset] <= vaultParameters.tokenDebtLimit(asset), \\\"Unit Protocol: ASSET_DEBT_LIMIT\\\");\\n\\n        // here stablecoin is created for user\\n        SuUSD(stablecoin).mint(user, amount);\\n\\n        // we return value of previous debt plus new debt\\n        // how this can be accessed and used by client?\\n        // should consider to emit events instead\\n        return debts[asset][user];\\n    }\\n\\n    // REPAY == giveUnit\\n    /// return for the debt\\n    function repay(\\n        address asset,\\n        address user,\\n        uint amount\\n    )\\n    external\\n    onlyVaultAccess\\n    notLiquidating(asset, user)\\n    returns(uint)\\n    {\\n        // current debt of user by given collateral\\n        uint debt = debts[asset][user];\\n\\n        // is being decreased by chosen amount\\n        debts[asset][user] = debt - amount;\\n\\n        // total debt by asset is being decreased too\\n        // this value is used to limit total collateral allowed debt\\n        tokenDebts[asset] = tokenDebts[asset] - amount;\\n\\n        // we burn stablecoin from user\\n        // vault should have corresponding permission\\n        SuUSD(stablecoin).burn(user, amount);\\n\\n        // after we burn stablecoin we need to take back collateral\\n        // does that happen in another contract which calls this function?\\n\\n        return debts[asset][user];\\n    }\\n\\n    // transfering chosen amount chosen asset from user to foundation address\\n    // can foundation address be changed?\\n    /// Yes, setFoundation.\\n    // why its being transferred from user? instead should be from this vault\\n    /// TODO: he doesn't have his vault with stablecoin\\n    // why amount is chosen manually? should be always the same value as in fees mapping\\n    /// this is just transfer function, manager calc fees\\n    function chargeFee(address asset, address user, uint amount) external onlyVaultAccess notLiquidating(asset, user) {\\n        if (amount != 0) {\\n            SafeERC20.safeTransferFrom(IERC20(asset), user, vaultParameters.foundation(), amount);\\n        }\\n    }\\n\\n    // position liquidation being triggerred by another contract\\n    // initial price is passed here but better it would be accessed from mapping directly\\n    /// it's Vault so Manager does tells it what to do.\\n    function triggerLiquidation(\\n        address asset,\\n        address positionOwner,\\n        uint initialPrice\\n    )\\n    external\\n    onlyVaultAccess\\n    notLiquidating(asset, positionOwner)\\n    {\\n        // why debt recalculation is needed and which cases it can be outdated?\\n        /// because function called from CDPManger01.triggerLiquidation which doesn't call update\\n        debts[asset][positionOwner] = getTotalDebt(asset, positionOwner);\\n\\n        // remember when liquidation start and which price\\n        liquidationBlock[asset][positionOwner] = block.number;\\n        liquidationPrice[asset][positionOwner] = initialPrice;\\n    }\\n\\n\\n\\n\\n     // liquidation can happen after liquidator is chosen through auction\\n     // and auction starts after liquidation starting process has triggered\\n     /// YES\\n     // liquidator accepts a deal to give minimum amount of stablecoin and receive all position collateral\\n     /// NO,\\n     // mainAsset is collateral\\n     /// YES\\n     // why col is needed? can be ignored\\n     /// CORRECT\\n     // what is repayment and what is penalty?\\n     ///\\n     // what happens if liquidator does not execute agreed transaction?\\n     ///\\n     // borrower should receive some part of stablecoin given by liquidator\\n     /// POSSIBLY\\n     // how is that portion calculated and where the rest goes?\\n     /// YES, please see _liquidate at LiquidationAunction02\\n     // will stablecoin paid by liquidator be burned immediately?\\n     /// Yes\\n     // how can cascading liquidation happen step by step?\\n     /// please see https://ratiofinance.medium.com/ratio-risk-lesson-2-cascading-liquidations-e91e04050f47\\n    function liquidate(\\n        address asset,\\n        address positionOwner,\\n        uint mainAssetToLiquidator,\\n        uint mainAssetToPositionOwner,\\n        uint repayment,\\n        uint penalty,\\n        address liquidator\\n    )\\n        external\\n        onlyVaultAccess\\n    {\\n        require(liquidationBlock[asset][positionOwner] != 0, \\\"Unit Protocol: NOT_TRIGGERED_LIQUIDATION\\\");\\n\\n        uint mainAssetInPosition = collaterals[asset][positionOwner];\\n\\n        uint mainAssetToFoundation = mainAssetInPosition - mainAssetToLiquidator - mainAssetToPositionOwner;\\n\\n        delete liquidationPrice[asset][positionOwner];\\n        delete liquidationBlock[asset][positionOwner];\\n        delete debts[asset][positionOwner];\\n        delete collaterals[asset][positionOwner];\\n\\n        destroy(asset, positionOwner);\\n\\n        if (repayment > penalty) {\\n            if (penalty != 0) {\\n                SafeERC20.safeTransferFrom(IERC20(stablecoin), liquidator, vaultParameters.foundation(), penalty);\\n            }\\n            SuUSD(stablecoin).burn(liquidator, repayment - penalty);\\n        } else {\\n            if (repayment != 0) {\\n                SafeERC20.safeTransferFrom(IERC20(stablecoin), liquidator, vaultParameters.foundation(), repayment);\\n            }\\n        }\\n\\n        if (mainAssetToLiquidator != 0) {\\n            SafeERC20.safeTransfer(IERC20(asset), liquidator, mainAssetToLiquidator);\\n        }\\n\\n        if (mainAssetToPositionOwner != 0) {\\n            SafeERC20.safeTransfer(IERC20(asset), positionOwner, mainAssetToPositionOwner);\\n        }\\n\\n        if (mainAssetToFoundation != 0) {\\n            SafeERC20.safeTransfer(IERC20(asset), vaultParameters.foundation(), mainAssetToFoundation);\\n        }\\n    }\\n\\n    // oracle type can be changed manager, under which conditions?\\n    /// any time\\n    function changeOracleType(address asset, address user, uint newOracleType) external onlyOwner {\\n        oracleType[asset][user] = newOracleType;\\n    }\\n\\n    // total dept is calculated as current debt with added calculated fee\\n    /// they don't use it in practice\\n    function getTotalDebt(address asset, address user) public view returns (uint) {\\n        uint debt = debts[asset][user];\\n        if (liquidationBlock[asset][user] != 0) return debt;\\n        uint fee = calculateFee(asset, user, debt);\\n        return debt + fee;\\n    }\\n\\n     // fee is increased with time and\\n     /// YES\\n     // decreased when partial repayment is made\\n     /// No, any call of vault.update would calc fee in debt and restart fee timer\\n    function calculateFee(address asset, address user, uint amount) public view returns (uint) {\\n        uint sFeePercent = stabilityFee[asset][user];\\n        uint timePast = block.timestamp - lastUpdate[asset][user];\\n\\n        return amount * sFeePercent * timePast / (365 days) / DENOMINATOR_1E5;\\n    }\\n}\\n\",\"keccak256\":\"0xf433dbf0959df8f747ae1664d309a2ef91a4f1e7b6ed912eaa00170f6ccd2651\",\"license\":\"BSL 1.1\"},\"contracts/lending/SuVaultParameters.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\r\\n\\r\\nimport \\\"../access-control/SuAccessControlSingleton.sol\\\";\\r\\nimport \\\"../access-control/SuAuthenticated.sol\\\";\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// VaultParameters is Singleton for Access Control\\r\\n// this looks like configuration contract\\r\\n// what are the rules to determine these configs for each new allowed collateral?\\r\\n/// yes, and for all collaterals\\r\\n// is DAO allowed to choose parameters for existing collaterals?\\r\\n///\\r\\n// are there any limits to be enforced? i.e. fee cannot be over 100% percent\\r\\n/// No, but it's a good idea to have it\\r\\nabstract contract SuVaultParameters is SuAuthenticated {\\r\\n    // stability fee can be different for each collateral\\r\\n    /// yes\\r\\n    mapping(address => uint) public protocolStabilityFee;\\r\\n\\r\\n    // liquidation fee too can be different\\r\\n    /// yes\\r\\n    mapping(address => uint) public protocolLiquidationFee;\\r\\n\\r\\n    // map token to USDP mint limit\\r\\n    /// yes, limit for each collateral-assert\\r\\n    mapping(address => uint) public tokenDebtLimit;\\r\\n\\r\\n    // whether an oracle is enabled\\r\\n    /// TODO:\\r\\n    mapping(uint => mapping(address => bool)) public isOracleTypeEnabled;\\r\\n\\r\\n    // what is foundation, DAO?\\r\\n    /// Beneficiaty as VotingEscrow.vy\\r\\n    address public foundation;\\r\\n\\r\\n    address public immutable vault;\\r\\n\\r\\n    // creator of contract is manager, can it be the same as DAO or can it be removed later?\\r\\n    /// YES\\r\\n    // how can vault address be known at this moment?\\r\\n    /// Precult based on CREATE spec\\r\\n    // can be created another function to set vault address once deployed?\\r\\n    /// Yes, possibly with some logic change\\r\\n    constructor(address _authControl, address payable _vault, address _foundation)\\r\\n        SuAuthenticated(_authControl)\\r\\n    {\\r\\n        require(_vault != address(0), \\\"Unit Protocol: ZERO_ADDRESS\\\");\\r\\n        require(_foundation != address(0), \\\"Unit Protocol: ZERO_ADDRESS\\\");\\r\\n\\r\\n        vault = _vault;\\r\\n\\r\\n//        ISuAccessControl(_authControl).setVault(_vault, true);\\r\\n//        ISuAccessControl(_authControl).setDAO(msg.sender, true);\\r\\n\\r\\n        foundation = _foundation;\\r\\n    }\\r\\n\\r\\n    // similar function can be added to setVault\\r\\n    function setFoundation(address newFoundation) external onlyOwner {\\r\\n        require(newFoundation != address(0), \\\"Unit Protocol: ZERO_ADDRESS\\\");\\r\\n        foundation = newFoundation;\\r\\n    }\\r\\n\\r\\n    // manager is allowed to add new collaterals and modify existing ones\\r\\n    // I think creating new collaterals and modifying existing ones should be separate functions\\r\\n    /// Yes, for sercurity reason, it's possible to add events for creating and edititing\\r\\n    // also different event should be emitted NewCollateral UpdatedCollateral accordingly\\r\\n    // those events can be handled on frontend to notify user about any changes in rules\\r\\n    /// Not sure it makes sense to split into create/edit functions\\r\\n    function setCollateral(\\r\\n        address asset,\\r\\n        uint stabilityFeeValue,\\r\\n        uint liquidationFeeValue,\\r\\n        uint stablecoinLimit\\r\\n    ) external onlyOwner {\\r\\n        // stability fee should be validated in range, what is stability fee should be described here?\\r\\n        setStabilityFee(asset, stabilityFeeValue);\\r\\n        // liquidation fee should be validated in range, what is liquidation fee should be explained?\\r\\n        setLiquidationFee(asset, liquidationFeeValue);\\r\\n        // why debt limit for collateral is necessary? to manage risks in case of collateral failure?\\r\\n        setTokenDebtLimit(asset, stablecoinLimit);\\r\\n    }\\r\\n\\r\\n    // stability fee is measured as the number of coins per year or percentage?\\r\\n    // this should be clarified in argument name i.e. stabilityFeePercentageYearly\\r\\n    /// No, it's APR ( per year, see calculateFee) percentrage, fee percentage; 3 decimals.\\r\\n    /// YES, self-documented code-style is the best practice.\\r\\n    function setStabilityFee(address asset, uint newValue) public onlyOwner {\\r\\n        protocolStabilityFee[asset] = newValue;\\r\\n    }\\r\\n\\r\\n    // the same with liquidation fee is not clear\\r\\n    /// % 0 decimals, needede to get better variable names\\r\\n    function setLiquidationFee(address asset, uint newValue) public onlyOwner {\\r\\n        require(newValue <= 100, \\\"Unit Protocol: VALUE_OUT_OF_RANGE\\\");\\r\\n        protocolLiquidationFee[asset] = newValue;\\r\\n    }\\r\\n\\r\\n    // what are allowed types? enum should be defined\\r\\n    // types out of range should fail transaction\\r\\n    /// All oracles implementation are numbered, so some of them support this particular asset\\r\\n    function setOracleType(uint _type, address asset, bool enabled) public onlyOwner {\\r\\n        isOracleTypeEnabled[_type][asset] = enabled;\\r\\n    }\\r\\n\\r\\n    // debt limit can be changed for any collateral along with liquidation and stability fees\\r\\n    // seems like managers have too much power - that can be dangerous given multiple managers?\\r\\n    /// Yes, application of  principle of least priviledge needed\\r\\n    function setTokenDebtLimit(address asset, uint limit) public onlyOwner {\\r\\n        tokenDebtLimit[asset] = limit;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7c29783a2bba9d0fd5563d7e49b8a87b9e97fc1c03f8599516f44528dee195f3\",\"license\":\"BSL 1.1\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b50604051620038563803806200385683398101604081905262000035916200015f565b6001600160601b0319606084901b16608052823082816200009d5760405162461bcd60e51b815260206004820152601b60248201527f556e69742050726f746f636f6c3a205a45524f5f41444452455353000000000060448201526064015b60405180910390fd5b6001600160a01b038116620000f55760405162461bcd60e51b815260206004820152601b60248201527f556e69742050726f746f636f6c3a205a45524f5f414444524553530000000000604482015260640162000094565b606091821b6001600160601b031990811660a052600480546001600160a01b0319166001600160a01b03939093169290921790915593811b90931660c052505030901b60e05250620001a8565b80516001600160a01b03811681146200015a57600080fd5b919050565b60008060006060848603121562000174578283fd5b6200017f8462000142565b92506200018f6020850162000142565b91506200019f6040850162000142565b90509250925092565b60805160601c60a05160601c60c05160601c60e05160601c61359d620002b96000396000818161070c01528181610f3f0152818161144a01528181611ed70152818161204e0152818161211101528181612676015261274b0152600081816108c401528181610c0e0152818161156a01528181611eb501528181611f76015261202c01526000610952015260008181610328015281816109eb01528181610cba01528181610dd501528181610ff70152818161110d01528181611223015281816116200152818161181401528181611a8701528181611c7d015281816121cd015281816122d30152818161245d01528181612827015281816129c001528181612b750152612cfc015261359d6000f3fe6080604052600436106102bf5760003560e01c8063971182c61161016e578063d6446d43116100cb578063e9cbd8221161007f578063f2e323ba11610064578063f2e323ba14610913578063fbfa77cf14610940578063fec0feb31461097457600080fd5b8063e9cbd822146108b2578063f190439e146108e657600080fd5b8063db3543f5116100b0578063db3543f51461083a578063e0ede1cd1461085a578063e51e119e1461087a57600080fd5b8063d6446d43146107fa578063d9caed121461081a57600080fd5b8063bf33bd4c11610122578063cc9a10a611610107578063cc9a10a61461076e578063d4b93dbe1461078e578063d5391393146107c657600080fd5b8063bf33bd4c1461072e578063c640752d1461074e57600080fd5b8063a526ae2c11610153578063a526ae2c146106a2578063aa9c2c16146106c2578063aca345ee146106fa57600080fd5b8063971182c61461066b5780639ffb62eb1461068257600080fd5b806347ba94f91161021c578063742a326e116101d05780638340f549116101b55780638340f549146105e657806388ad7a61146106065780638b668a9d1461063e57600080fd5b8063742a326e146105a65780637ca87cb6146105c657600080fd5b80634df14341116102015780634df14341146105465780635224372c1461056657806362b40f9f1461058657600080fd5b806347ba94f9146104ee5780634ac1c33d1461050e57600080fd5b80631da649cf1161027357806338507ff51161025857806338507ff51461048c5780633d1aa963146104ae57806341fbb050146104ce57600080fd5b80631da649cf1461043457806330c77c7e1461045457600080fd5b806310be7f36116102a457806310be7f36146103ad57806314c376dc146103da5780631ce4b4a7146103fc57600080fd5b806303ee9f22146103165780630fbac4e61461036757600080fd5b366103115760405162461bcd60e51b815260206004820152601960248201527f556e69742050726f746f636f6c3a20524553545249435445440000000000000060448201526064015b60405180910390fd5b600080fd5b34801561032257600080fd5b5061034a7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561037357600080fd5b5061039f61038236600461323b565b600860209081526000928352604080842090915290825290205481565b60405190815260200161035e565b3480156103b957600080fd5b5061039f6103c8366004613203565b60006020819052908152604090205481565b3480156103e657600080fd5b5061039f60008051602061354883398151915281565b34801561040857600080fd5b5061039f61041736600461323b565b600760209081526000928352604080842090915290825290205481565b34801561044057600080fd5b5061039f61044f366004613273565b6109bf565b34801561046057600080fd5b5061039f61046f36600461323b565b600c60209081526000928352604080842090915290825290205481565b34801561049857600080fd5b506104ac6104a736600461334f565b610c9e565b005b3480156104ba57600080fd5b506104ac6104c9366004613273565b610dac565b3480156104da57600080fd5b5060045461034a906001600160a01b031681565b3480156104fa57600080fd5b506104ac610509366004613273565b610fdb565b34801561051a57600080fd5b5061039f61052936600461323b565b600660209081526000928352604080842090915290825290205481565b34801561055257600080fd5b506104ac610561366004613324565b6110f1565b34801561057257600080fd5b5061039f610581366004613273565b6111f7565b34801561059257600080fd5b506104ac6105a136600461323b565b6115f7565b3480156105b257600080fd5b506104ac6105c1366004613273565b6117eb565b3480156105d257600080fd5b5061039f6105e1366004613273565b6119d5565b3480156105f257600080fd5b506104ac610601366004613273565b611a5e565b34801561061257600080fd5b5061039f61062136600461323b565b600d60209081526000928352604080842090915290825290205481565b34801561064a57600080fd5b5061039f610659366004613203565b60016020526000908152604090205481565b34801561067757600080fd5b5061039f620186a081565b34801561068e57600080fd5b506104ac61069d3660046132b3565b611c54565b3480156106ae57600080fd5b506104ac6106bd366004613324565b6121b1565b3480156106ce57600080fd5b5061039f6106dd36600461323b565b600b60209081526000928352604080842090915290825290205481565b34801561070657600080fd5b5061034a7f000000000000000000000000000000000000000000000000000000000000000081565b34801561073a57600080fd5b506104ac610749366004613324565b6122b7565b34801561075a57600080fd5b506104ac61076936600461323b565b612434565b34801561077a57600080fd5b506104ac6107893660046133e1565b61280b565b34801561079a57600080fd5b5061039f6107a936600461323b565b600a60209081526000928352604080842090915290825290205481565b3480156107d257600080fd5b5061039f7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b34801561080657600080fd5b5061039f61081536600461323b565b61292a565b34801561082657600080fd5b506104ac610835366004613273565b612997565b34801561084657600080fd5b506104ac610855366004613203565b612b59565b34801561086657600080fd5b506104ac61087536600461323b565b612cd3565b34801561088657600080fd5b5061039f61089536600461323b565b600560209081526000928352604080842090915290825290205481565b3480156108be57600080fd5b5061034a7f000000000000000000000000000000000000000000000000000000000000000081565b3480156108f257600080fd5b5061039f610901366004613203565b60096020526000908152604090205481565b34801561091f57600080fd5b5061039f61092e366004613203565b60026020526000908152604090205481565b34801561094c57600080fd5b5061034a7f000000000000000000000000000000000000000000000000000000000000000081565b34801561098057600080fd5b506109af61098f3660046133bd565b600360209081526000928352604080842090915290825290205460ff1681565b604051901515815260200161035e565b604051632474521560e21b815260008051602061354883398151915260048201523360248201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d148549060440160206040518083038186803b158015610a3557600080fd5b505afa158015610a49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6d9190613389565b610ac55760405162461bcd60e51b815260206004820152602360248201527f5375417574683a206f6e6c795661756c7441636365737320415554485f46414960448201526213115160ea1b6064820152608401610308565b6001600160a01b038085166000908152600760209081526040808320938716835292905220548490849015610b485760405162461bcd60e51b815260206004820152602360248201527f556e69742050726f746f636f6c3a204c49515549444154494e475f504f53495460448201526224a7a760e91b6064820152608401610308565b6001600160a01b03808716600090815260066020908152604080832093891683529290522054610b7885826134c8565b6001600160a01b038089166000818152600660209081526040808320948c168352938152838220949094559081526009909252902054610bb99086906134c8565b6001600160a01b03888116600090815260096020526040908190209290925590517f9dc29fac0000000000000000000000000000000000000000000000000000000081528782166004820152602481018790527f000000000000000000000000000000000000000000000000000000000000000090911690639dc29fac90604401600060405180830381600087803b158015610c5457600080fd5b505af1158015610c68573d6000803e3d6000fd5b5050506001600160a01b038089166000908152600660209081526040808320938b16835292905220549450505050509392505050565b604051632474521560e21b8152600060048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d148549060440160206040518083038186803b158015610d0457600080fd5b505afa158015610d18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d3c9190613389565b610d885760405162461bcd60e51b815260206004820152601d60248201527f5375417574683a206f6e6c794f776e657220415554485f4641494c45440000006044820152606401610308565b610d9284846121b1565b610d9c84836122b7565b610da684826110f1565b50505050565b604051632474521560e21b815260008051602061354883398151915260048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d148549060440160206040518083038186803b158015610e1f57600080fd5b505afa158015610e33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e579190613389565b610eaf5760405162461bcd60e51b815260206004820152602360248201527f5375417574683a206f6e6c795661756c7441636365737320415554485f46414960448201526213115160ea1b6064820152608401610308565b6001600160a01b038084166000908152600760209081526040808320938616835292905220548390839015610f325760405162461bcd60e51b815260206004820152602360248201527f556e69742050726f746f636f6c3a204c49515549444154494e475f504f53495460448201526224a7a760e91b6064820152608401610308565b8215610fd457610fd485857f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166341fbb0506040518163ffffffff1660e01b815260040160206040518083038186803b158015610f9657600080fd5b505afa158015610faa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fce919061321f565b86612e87565b5050505050565b604051632474521560e21b8152600060048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d148549060440160206040518083038186803b15801561104157600080fd5b505afa158015611055573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110799190613389565b6110c55760405162461bcd60e51b815260206004820152601d60248201527f5375417574683a206f6e6c794f776e657220415554485f4641494c45440000006044820152606401610308565b6001600160a01b039283166000908152600c602090815260408083209490951682529290925291902055565b604051632474521560e21b8152600060048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d148549060440160206040518083038186803b15801561115757600080fd5b505afa15801561116b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061118f9190613389565b6111db5760405162461bcd60e51b815260206004820152601d60248201527f5375417574683a206f6e6c794f776e657220415554485f4641494c45440000006044820152606401610308565b6001600160a01b03909116600090815260026020526040902055565b604051632474521560e21b815260008051602061354883398151915260048201523360248201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d148549060440160206040518083038186803b15801561126d57600080fd5b505afa158015611281573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a59190613389565b6112fd5760405162461bcd60e51b815260206004820152602360248201527f5375417574683a206f6e6c795661756c7441636365737320415554485f46414960448201526213115160ea1b6064820152608401610308565b6001600160a01b0380851660009081526007602090815260408083209387168352929052205484908490156113805760405162461bcd60e51b815260206004820152602360248201527f556e69742050726f746f636f6c3a204c49515549444154494e475f504f53495460448201526224a7a760e91b6064820152608401610308565b61138a8686612434565b6001600160a01b038087166000908152600660209081526040808320938916835292905220546113bb908590613471565b6001600160a01b038088166000818152600660209081526040808320948b1683529381528382209490945590815260099092529020546113fc908590613471565b6001600160a01b03878116600081815260096020526040908190209390935591517ff2e323ba00000000000000000000000000000000000000000000000000000000815260048101929092527f0000000000000000000000000000000000000000000000000000000000000000169063f2e323ba9060240160206040518083038186803b15801561148c57600080fd5b505afa1580156114a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c491906133a5565b6001600160a01b038716600090815260096020526040902054111561152b5760405162461bcd60e51b815260206004820152601f60248201527f556e69742050726f746f636f6c3a2041535345545f444542545f4c494d4954006044820152606401610308565b6040517f40c10f190000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152602482018690527f000000000000000000000000000000000000000000000000000000000000000016906340c10f1990604401600060405180830381600087803b1580156115ae57600080fd5b505af11580156115c2573d6000803e3d6000fd5b5050506001600160a01b038088166000908152600660209081526040808320938a168352929052205493505050509392505050565b604051632474521560e21b815260008051602061354883398151915260048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d148549060440160206040518083038186803b15801561166a57600080fd5b505afa15801561167e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a29190613389565b6116fa5760405162461bcd60e51b815260206004820152602360248201527f5375417574683a206f6e6c795661756c7441636365737320415554485f46414960448201526213115160ea1b6064820152608401610308565b6001600160a01b03808316600090815260076020908152604080832093851683529290522054829082901561177d5760405162461bcd60e51b815260206004820152602360248201527f556e69742050726f746f636f6c3a204c49515549444154494e475f504f53495460448201526224a7a760e91b6064820152608401610308565b50506001600160a01b039182166000818152600a6020908152604080832094909516808352938152848220829055828252600c81528482208483528152848220829055828252600d81528482208483528152848220829055918152600b825283812092815291905290812055565b604051632474521560e21b815260008051602061354883398151915260048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d148549060440160206040518083038186803b15801561185e57600080fd5b505afa158015611872573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118969190613389565b6118ee5760405162461bcd60e51b815260206004820152602360248201527f5375417574683a206f6e6c795661756c7441636365737320415554485f46414960448201526213115160ea1b6064820152608401610308565b6001600160a01b0380841660009081526007602090815260408083209386168352929052205483908390156119715760405162461bcd60e51b815260206004820152602360248201527f556e69742050726f746f636f6c3a204c49515549444154494e475f504f53495460448201526224a7a760e91b6064820152608401610308565b61197b858561292a565b6001600160a01b039586166000818152600660209081526040808320989099168083529781528882209390935581815260078352878120878252835287812043905590815260088252868120958152949052505091902055565b6001600160a01b038084166000818152600a6020908152604080832094871680845294825280832054938352600d8252808320948352939052918220548290611a1e90426134c8565b9050620186a06301e1338082611a3485886134a9565b611a3e91906134a9565b611a489190613489565b611a529190613489565b925050505b9392505050565b604051632474521560e21b815260008051602061354883398151915260048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d148549060440160206040518083038186803b158015611ad157600080fd5b505afa158015611ae5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b099190613389565b611b615760405162461bcd60e51b815260206004820152602360248201527f5375417574683a206f6e6c795661756c7441636365737320415554485f46414960448201526213115160ea1b6064820152608401610308565b6001600160a01b038084166000908152600760209081526040808320938616835292905220548390839015611be45760405162461bcd60e51b815260206004820152602360248201527f556e69742050726f746f636f6c3a204c49515549444154494e475f504f53495460448201526224a7a760e91b6064820152608401610308565b611bf085853086612e87565b6001600160a01b03808616600090815260056020908152604080832093881683529290522054611c21908490613471565b6001600160a01b039586166000908152600560209081526040808320979098168252959095529490932093909355505050565b604051632474521560e21b815260008051602061354883398151915260048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d148549060440160206040518083038186803b158015611cc757600080fd5b505afa158015611cdb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cff9190613389565b611d575760405162461bcd60e51b815260206004820152602360248201527f5375417574683a206f6e6c795661756c7441636365737320415554485f46414960448201526213115160ea1b6064820152608401610308565b6001600160a01b038088166000908152600760209081526040808320938a1683529290522054611def5760405162461bcd60e51b815260206004820152602860248201527f556e69742050726f746f636f6c3a204e4f545f5452494747455245445f4c495160448201527f5549444154494f4e0000000000000000000000000000000000000000000000006064820152608401610308565b6001600160a01b038088166000908152600560209081526040808320938a168352929052908120549085611e2388846134c8565b611e2d91906134c8565b6001600160a01b03808b166000818152600860209081526040808320948e1680845294825280832083905583835260078252808320858452825280832083905583835260068252808320858452825280832083905592825260058152828220938252929092528120559050611ea289896115f7565b83851115612021578315611f6c57611f6c7f0000000000000000000000000000000000000000000000000000000000000000847f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166341fbb0506040518163ffffffff1660e01b815260040160206040518083038186803b158015611f2e57600080fd5b505afa158015611f42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f66919061321f565b87612e87565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016639dc29fac84611fa687896134c8565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801561200457600080fd5b505af1158015612018573d6000803e3d6000fd5b505050506120e3565b84156120e3576120e37f0000000000000000000000000000000000000000000000000000000000000000847f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166341fbb0506040518163ffffffff1660e01b815260040160206040518083038186803b1580156120a557600080fd5b505afa1580156120b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120dd919061321f565b88612e87565b86156120f4576120f4898489612f38565b851561210557612105898988612f38565b80156121a6576121a6897f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166341fbb0506040518163ffffffff1660e01b815260040160206040518083038186803b15801561216857600080fd5b505afa15801561217c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121a0919061321f565b83612f38565b505050505050505050565b604051632474521560e21b8152600060048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d148549060440160206040518083038186803b15801561221757600080fd5b505afa15801561222b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061224f9190613389565b61229b5760405162461bcd60e51b815260206004820152601d60248201527f5375417574683a206f6e6c794f776e657220415554485f4641494c45440000006044820152606401610308565b6001600160a01b03909116600090815260208190526040902055565b604051632474521560e21b8152600060048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d148549060440160206040518083038186803b15801561231d57600080fd5b505afa158015612331573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123559190613389565b6123a15760405162461bcd60e51b815260206004820152601d60248201527f5375417574683a206f6e6c794f776e657220415554485f4641494c45440000006044820152606401610308565b60648111156124185760405162461bcd60e51b815260206004820152602160248201527f556e69742050726f746f636f6c3a2056414c55455f4f55545f4f465f52414e4760448201527f45000000000000000000000000000000000000000000000000000000000000006064820152608401610308565b6001600160a01b03909116600090815260016020526040902055565b604051632474521560e21b815260008051602061354883398151915260048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d148549060440160206040518083038186803b1580156124a757600080fd5b505afa1580156124bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124df9190613389565b6125375760405162461bcd60e51b815260206004820152602360248201527f5375417574683a206f6e6c795661756c7441636365737320415554485f46414960448201526213115160ea1b6064820152608401610308565b6001600160a01b0380831660009081526007602090815260408083209385168352929052205482908290156125ba5760405162461bcd60e51b815260206004820152602360248201527f556e69742050726f746f636f6c3a204c49515549444154494e475f504f53495460448201526224a7a760e91b6064820152608401610308565b60006125c6858561292a565b6001600160a01b038087166000818152600660209081526040808320948a16835293815283822054928252600990529190912054919250829161260991906134c8565b6126139190613471565b6001600160a01b03868116600081815260096020908152604080832095909555600681528482208985168352905283902084905591517f10be7f3600000000000000000000000000000000000000000000000000000000815260048101929092527f000000000000000000000000000000000000000000000000000000000000000016906310be7f369060240160206040518083038186803b1580156126b857600080fd5b505afa1580156126cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126f091906133a5565b6001600160a01b038681166000818152600a602090815260408083208a86168452909152908190209390935591517f8b668a9d00000000000000000000000000000000000000000000000000000000815260048101929092527f00000000000000000000000000000000000000000000000000000000000000001690638b668a9d9060240160206040518083038186803b15801561278d57600080fd5b505afa1580156127a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127c591906133a5565b6001600160a01b039586166000818152600b602090815260408083209890991680835297815288822093909355908152600d825286812095815294905250505020429055565b604051632474521560e21b8152600060048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d148549060440160206040518083038186803b15801561287157600080fd5b505afa158015612885573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128a99190613389565b6128f55760405162461bcd60e51b815260206004820152601d60248201527f5375417574683a206f6e6c794f776e657220415554485f4641494c45440000006044820152606401610308565b60009283526003602090815260408085206001600160a01b039490941685529290529120805460ff1916911515919091179055565b6001600160a01b03808316600081815260066020908152604080832094861680845294825280832054938352600782528083209483529390529182205415612973579050612991565b60006129808585846119d5565b905061298c8183613471565b925050505b92915050565b604051632474521560e21b815260008051602061354883398151915260048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d148549060440160206040518083038186803b158015612a0a57600080fd5b505afa158015612a1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a429190613389565b612a9a5760405162461bcd60e51b815260206004820152602360248201527f5375417574683a206f6e6c795661756c7441636365737320415554485f46414960448201526213115160ea1b6064820152608401610308565b6001600160a01b038084166000908152600760209081526040808320938616835292905220548390839015612b1d5760405162461bcd60e51b815260206004820152602360248201527f556e69742050726f746f636f6c3a204c49515549444154494e475f504f53495460448201526224a7a760e91b6064820152608401610308565b612b28858585612f38565b6001600160a01b03808616600090815260056020908152604080832093881683529290522054611c219084906134c8565b604051632474521560e21b8152600060048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d148549060440160206040518083038186803b158015612bbf57600080fd5b505afa158015612bd3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bf79190613389565b612c435760405162461bcd60e51b815260206004820152601d60248201527f5375417574683a206f6e6c794f776e657220415554485f4641494c45440000006044820152606401610308565b6001600160a01b038116612c995760405162461bcd60e51b815260206004820152601b60248201527f556e69742050726f746f636f6c3a205a45524f5f4144445245535300000000006044820152606401610308565b600480547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b604051632474521560e21b815260008051602061354883398151915260048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d148549060440160206040518083038186803b158015612d4657600080fd5b505afa158015612d5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d7e9190613389565b612dd65760405162461bcd60e51b815260206004820152602360248201527f5375417574683a206f6e6c795661756c7441636365737320415554485f46414960448201526213115160ea1b6064820152608401610308565b6001600160a01b038083166000908152600760209081526040808320938516835292905220548290829015612e595760405162461bcd60e51b815260206004820152602360248201527f556e69742050726f746f636f6c3a204c49515549444154494e475f504f53495460448201526224a7a760e91b6064820152608401610308565b50506001600160a01b0391821660009081526007602090815260408083209390941682529190915290812055565b6040516001600160a01b0380851660248301528316604482015260648101829052610da69085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612f86565b6040516001600160a01b038316602482015260448101829052612f819084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401612ed4565b505050565b6000612fdb826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661306b9092919063ffffffff16565b805190915015612f815780806020019051810190612ff99190613389565b612f815760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610308565b606061307a8484600085613082565b949350505050565b6060824710156130fa5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610308565b6001600160a01b0385163b6131515760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610308565b600080866001600160a01b0316858760405161316d9190613422565b60006040518083038185875af1925050503d80600081146131aa576040519150601f19603f3d011682016040523d82523d6000602084013e6131af565b606091505b50915091506131bf8282866131ca565b979650505050505050565b606083156131d9575081611a57565b8251156131e95782518084602001fd5b8160405162461bcd60e51b8152600401610308919061343e565b600060208284031215613214578081fd5b8135611a5781613521565b600060208284031215613230578081fd5b8151611a5781613521565b6000806040838503121561324d578081fd5b823561325881613521565b9150602083013561326881613521565b809150509250929050565b600080600060608486031215613287578081fd5b833561329281613521565b925060208401356132a281613521565b929592945050506040919091013590565b600080600080600080600060e0888a0312156132cd578283fd5b87356132d881613521565b965060208801356132e881613521565b955060408801359450606088013593506080880135925060a0880135915060c088013561331481613521565b8091505092959891949750929550565b60008060408385031215613336578182fd5b823561334181613521565b946020939093013593505050565b60008060008060808587031215613364578384fd5b843561336f81613521565b966020860135965060408601359560600135945092505050565b60006020828403121561339a578081fd5b8151611a5781613539565b6000602082840312156133b6578081fd5b5051919050565b600080604083850312156133cf578182fd5b82359150602083013561326881613521565b6000806000606084860312156133f5578283fd5b83359250602084013561340781613521565b9150604084013561341781613539565b809150509250925092565b600082516134348184602087016134df565b9190910192915050565b602081526000825180602084015261345d8160408501602087016134df565b601f01601f19169190910160400192915050565b600082198211156134845761348461350b565b500190565b6000826134a457634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156134c3576134c361350b565b500290565b6000828210156134da576134da61350b565b500390565b60005b838110156134fa5781810151838201526020016134e2565b83811115610da65750506000910152565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038116811461353657600080fd5b50565b801515811461353657600080fdfee965846df3dd5b1dfa65f58e31477079e90140e0908b6dd31b5aead5a57cf365a26469706673582212208f1ada3b74aaa252c857614f2e11d47e7baba99469d2d435b666d7e451f2535864736f6c63430008040033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "borrow(address,address,uint256)": {
        "notice": "no, one debt for [asset][user]"
      },
      "calculateFee(address,address,uint256)": {
        "notice": "No, any call of vault.update would calc fee in debt and restart fee timer"
      },
      "changeOracleType(address,address,uint256)": {
        "notice": "any time"
      },
      "chargeFee(address,address,uint256)": {
        "notice": "this is just transfer function, manager calc fees"
      },
      "collaterals(address,address)": {
        "notice": "No, it's how much user had stacked collaterael asset == collaterals[asset][user], i.e deposits"
      },
      "constructor": {
        "notice": "YES"
      },
      "debts(address,address)": {
        "notice": "Yes, in stablecoin amount, == debts[asset][user]"
      },
      "destroy(address,address)": {
        "notice": "only destroy debt info, exit -> _repay -> destroy if debt == 0"
      },
      "foundation()": {
        "notice": "Beneficiaty as VotingEscrow.vy"
      },
      "getTotalDebt(address,address)": {
        "notice": "they don't use it in practice"
      },
      "isOracleTypeEnabled(uint256,address)": {
        "notice": "TODO:"
      },
      "lastUpdate(address,address)": {
        "notice": "everything before lastUpdates is already calced in the debt. all data such as fees are from lastUpdate only"
      },
      "liquidate(address,address,uint256,uint256,uint256,uint256,address)": {
        "notice": "please see https://ratiofinance.medium.com/ratio-risk-lesson-2-cascading-liquidations-e91e04050f47"
      },
      "liquidationBlock(address,address)": {
        "notice": "Yes ,  liquidationBlock[asset][user]"
      },
      "liquidationFee(address,address)": {
        "notice": "Penalty during liquidation"
      },
      "liquidationPrice(address,address)": {
        "notice": "see line 287 triggerLiquidation: liquidationPrice[asset][positionOwner] = initialPrice;"
      },
      "oracleType(address,address)": {
        "notice": "ID of oracle contact for oracleType[asset][user]"
      },
      "protocolLiquidationFee(address)": {
        "notice": "yes"
      },
      "protocolStabilityFee(address)": {
        "notice": "yes"
      },
      "repay(address,address,uint256)": {
        "notice": "return for the debt"
      },
      "setCollateral(address,uint256,uint256,uint256)": {
        "notice": "Not sure it makes sense to split into create/edit functions"
      },
      "setLiquidationFee(address,uint256)": {
        "notice": "% 0 decimals, needede to get better variable names"
      },
      "setOracleType(uint256,address,bool)": {
        "notice": "All oracles implementation are numbered, so some of them support this particular asset"
      },
      "setStabilityFee(address,uint256)": {
        "notice": "No, it's APR ( per year, see calculateFee) percentrage, fee percentage; 3 decimals. YES, self-documented code-style is the best practice."
      },
      "setTokenDebtLimit(address,uint256)": {
        "notice": "Yes, application of  principle of least priviledge needed"
      },
      "spawn(address,address)": {
        "notice": "all implementation are numbered"
      },
      "stabilityFee(address,address)": {
        "notice": "current interest that user pay for stabilityFee[asset][user]"
      },
      "tokenDebtLimit(address)": {
        "notice": "yes, limit for each collateral-assert"
      },
      "tokenDebts(address)": {
        "notice": "How much stablecoin was borrowed against particular asset == tokenDebts[asset]"
      },
      "triggerLiquidation(address,address,uint256)": {
        "notice": "it's Vault so Manager does tells it what to do."
      },
      "update(address,address)": {
        "notice": "when user borrows more"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6984,
        "contract": "contracts/lending/SuVault.sol:SuVault",
        "label": "protocolStabilityFee",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6989,
        "contract": "contracts/lending/SuVault.sol:SuVault",
        "label": "protocolLiquidationFee",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6994,
        "contract": "contracts/lending/SuVault.sol:SuVault",
        "label": "tokenDebtLimit",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7001,
        "contract": "contracts/lending/SuVault.sol:SuVault",
        "label": "isOracleTypeEnabled",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 7004,
        "contract": "contracts/lending/SuVault.sol:SuVault",
        "label": "foundation",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 6127,
        "contract": "contracts/lending/SuVault.sol:SuVault",
        "label": "collaterals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 6134,
        "contract": "contracts/lending/SuVault.sol:SuVault",
        "label": "debts",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 6141,
        "contract": "contracts/lending/SuVault.sol:SuVault",
        "label": "liquidationBlock",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 6148,
        "contract": "contracts/lending/SuVault.sol:SuVault",
        "label": "liquidationPrice",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 6153,
        "contract": "contracts/lending/SuVault.sol:SuVault",
        "label": "tokenDebts",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6160,
        "contract": "contracts/lending/SuVault.sol:SuVault",
        "label": "stabilityFee",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 6167,
        "contract": "contracts/lending/SuVault.sol:SuVault",
        "label": "liquidationFee",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 6174,
        "contract": "contracts/lending/SuVault.sol:SuVault",
        "label": "oracleType",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 6181,
        "contract": "contracts/lending/SuVault.sol:SuVault",
        "label": "lastUpdate",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}