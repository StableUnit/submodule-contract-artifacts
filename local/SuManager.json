{
  "address": "0x9BcC604D4381C5b0Ad12Ff3Bf32bEdE063416BC7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_suOracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_cdpRegistry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "main",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stablecoin",
          "type": "uint256"
        }
      ],
      "name": "Exit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "main",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stablecoin",
          "type": "uint256"
        }
      ],
      "name": "Join",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "LiquidationTriggered",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACCESS_CONTROL_SINGLETON",
      "outputs": [
        {
          "internalType": "contract ISuAccessControl",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DENOMINATOR_1E5",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "Q112",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VAULT_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cdpRegistry",
      "outputs": [
        {
          "internalType": "contract ISuCdpRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "devaluationPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "assetAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stablecoinAmount",
          "type": "uint256"
        }
      ],
      "name": "exit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "assetAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "repayment",
          "type": "uint256"
        }
      ],
      "name": "exit_targetRepayment",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getCollateralUsdValue_q112",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "initialCollateralRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "isLiquidatablePosition",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "assetAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stablecoinAmount",
          "type": "uint256"
        }
      ],
      "name": "join",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "liquidationDiscount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "liquidationPrice_q112",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "liquidationRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "managerParameters",
      "outputs": [
        {
          "internalType": "contract ISuManagerParameters",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stabilityFeeValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidationFeeValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "initialCollateralRatioValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidationRatioValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidationDiscountValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "devaluationPeriodValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stablecoinLimit",
          "type": "uint256"
        }
      ],
      "name": "setCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "setDevaluationPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "setInitialCollateralRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "setLiquidationDiscount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "setLiquidationRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "suOracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "triggerLiquidation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "utilizationRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "contract ISuVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultParameters",
      "outputs": [
        {
          "internalType": "contract SuVaultParameters",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x880e5c56475ee6cdc5b91b7e884230cb18271211e50b655506ca2900ee76bb1b",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x9BcC604D4381C5b0Ad12Ff3Bf32bEdE063416BC7",
    "transactionIndex": 0,
    "gasUsed": "2595557",
    "logsBloom": "0x
    "blockHash": "0x6496a77f07b4fb8f8516284bf88ceff13256a735384f23be580505dae95f2f62",
    "transactionHash": "0x880e5c56475ee6cdc5b91b7e884230cb18271211e50b655506ca2900ee76bb1b",
    "logs": [],
    "blockNumber": 14518101,
    "cumulativeGasUsed": "2595557",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xaC47e91215fb80462139756f43438402998E4A3a",
    "0xC66AB83418C20A65C3f8e83B3d11c8C3a6097b6F",
    "0xdFdE6B33f13de2CA1A75A6F7169f50541B14f75b"
  ],
  "numDeployments": 1,
  "solcInputHash": "d1c3e992972545e414ac7f62b849d9a1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_suOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cdpRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"main\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stablecoin\",\"type\":\"uint256\"}],\"name\":\"Exit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"main\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stablecoin\",\"type\":\"uint256\"}],\"name\":\"Join\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LiquidationTriggered\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACCESS_CONTROL_SINGLETON\",\"outputs\":[{\"internalType\":\"contract ISuAccessControl\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DENOMINATOR_1E5\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Q112\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VAULT_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cdpRegistry\",\"outputs\":[{\"internalType\":\"contract ISuCdpRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"devaluationPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stablecoinAmount\",\"type\":\"uint256\"}],\"name\":\"exit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repayment\",\"type\":\"uint256\"}],\"name\":\"exit_targetRepayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getCollateralUsdValue_q112\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"initialCollateralRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"isLiquidatablePosition\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stablecoinAmount\",\"type\":\"uint256\"}],\"name\":\"join\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidationDiscount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"liquidationPrice_q112\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidationRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managerParameters\",\"outputs\":[{\"internalType\":\"contract ISuManagerParameters\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stabilityFeeValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationFeeValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialCollateralRatioValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationRatioValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationDiscountValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devaluationPeriodValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stablecoinLimit\",\"type\":\"uint256\"}],\"name\":\"setCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setDevaluationPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setInitialCollateralRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setLiquidationDiscount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setLiquidationRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"suOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"triggerLiquidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"utilizationRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract ISuVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultParameters\",\"outputs\":[{\"internalType\":\"contract SuVaultParameters\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"setDevaluationPeriod(address,uint256)\":{\"details\":\"Sets the devaluation period of collateral after liquidation\",\"params\":{\"asset\":\"The address of the main collateral token\",\"newValue\":\"The devaluation period in blocks*\"}},\"setInitialCollateralRatio(address,uint256)\":{\"details\":\"Sets the initial collateral ratio\",\"params\":{\"asset\":\"The address of the main collateral token\",\"newValue\":\"The collateralization ratio (0 decimals)*\"}},\"setLiquidationDiscount(address,uint256)\":{\"details\":\"Sets the liquidation discount\",\"params\":{\"asset\":\"The address of the main collateral token\",\"newValue\":\"The liquidation discount (3 decimals)*\"}},\"setLiquidationRatio(address,uint256)\":{\"details\":\"Sets the liquidation ratio\",\"params\":{\"asset\":\"The address of the main collateral token\",\"newValue\":\"The liquidation ratio (0 decimals)*\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"Q112()\":{\"notice\":\"float standard https://en.wikipedia.org/wiki/Q_(number_format)\"},\"exit_targetRepayment(address,uint256,uint256)\":{\"notice\":\"UX convenience function\"},\"join(address,uint256,uint256)\":{\"notice\":\"Yes,\"},\"setDevaluationPeriod(address,uint256)\":{\"notice\":\"Only manager is able to call this function\"},\"setInitialCollateralRatio(address,uint256)\":{\"notice\":\"Only manager is able to call this function\"},\"setLiquidationDiscount(address,uint256)\":{\"notice\":\"Only manager is able to call this function\"},\"setLiquidationRatio(address,uint256)\":{\"notice\":\"Only manager is able to call this function\"}},\"notice\":\"not sure why\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lending/SuManager.sol\":\"SuManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4a1a0ba12bf1a33f10d9fe226278cf59675c0b929d29e4da99658a079b27fb84\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/access-control/SuAccessControlSingleton.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"./SuAuthenticated.sol\\\";\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title SuAccessControl\\n * @dev Access control for contracts. SuVaultParameters can be inherited from it.\\n */\\n// TODO: refactor by https://en.wikipedia.org/wiki/Principle_of_least_privilege\\ncontract SuAccessControlSingleton is AccessControl, SuAuthenticated {\\n    /**\\n     * @dev Initialize the contract with initial owner to be deployer\\n     */\\n    constructor() SuAuthenticated(address(this)) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    /**\\n    * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n    * Can only be called by the current owner.\\n    */\\n    function transferOwnership(address newOwner) external {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Ownable: caller is not the owner\\\");\\n\\n        if (hasRole(MINTER_ROLE, msg.sender)) {\\n            grantRole(MINTER_ROLE, newOwner);\\n            revokeRole(MINTER_ROLE, msg.sender);\\n        }\\n\\n        if (hasRole(VAULT_ACCESS_ROLE, msg.sender)) {\\n            grantRole(VAULT_ACCESS_ROLE, newOwner);\\n            revokeRole(VAULT_ACCESS_ROLE, msg.sender);\\n        }\\n\\n        grantRole(DEFAULT_ADMIN_ROLE, newOwner);\\n        revokeRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0xecbacd6aa378b65c97e1006790e9ec0c5af8808490f5f921c4c7dadac05b271b\",\"license\":\"BSL 1.1\"},\"contracts/access-control/SuAuthenticated.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\npragma solidity >=0.7.6;\\n\\nimport \\\"../interfaces/ISuAccessControl.sol\\\";\\n\\n/**\\n * @title SuAuthenticated\\n * @dev other contracts should inherit to be authenticated\\n */\\nabstract contract SuAuthenticated {\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant VAULT_ACCESS_ROLE = keccak256(\\\"VAULT_ACCESS_ROLE\\\");\\n    bytes32 private constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /// @dev the address of SuAccessControlSingleton - it should be one for all contract that inherits SuAuthenticated\\n    ISuAccessControl public immutable ACCESS_CONTROL_SINGLETON;\\n\\n    /// @dev should be passed in constructor\\n    constructor(address _accessControlSingleton) {\\n        ACCESS_CONTROL_SINGLETON = ISuAccessControl(_accessControlSingleton);\\n        // TODO: check that _accessControlSingleton points to ISuAccessControl instance\\n        // require(ISuAccessControl(_accessControlSingleton).supportsInterface(ISuAccessControl.hasRole.selector), \\\"bad dependency\\\");\\n    }\\n\\n    /// @dev check DEFAULT_ADMIN_ROLE\\n    modifier onlyOwner() {\\n        require(ACCESS_CONTROL_SINGLETON.hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"SuAuth: onlyOwner AUTH_FAILED\\\");\\n        _;\\n    }\\n\\n    /// @dev check VAULT_ACCESS_ROLE\\n    modifier onlyVaultAccess() {\\n        require(ACCESS_CONTROL_SINGLETON.hasRole(VAULT_ACCESS_ROLE, msg.sender), \\\"SuAuth: onlyVaultAccess AUTH_FAILED\\\");\\n        _;\\n    }\\n\\n    /// @dev check MINTER_ROLE\\n    modifier onlyMinter() {\\n        require(ACCESS_CONTROL_SINGLETON.hasRole(MINTER_ROLE, msg.sender), \\\"SuAuth: onlyMinter AUTH_FAILED\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x7e2dd99b7f458bd19debd482486a0f45e10c07527849f38e9b22e7a1c28e09d1\",\"license\":\"BSL 1.1\"},\"contracts/interfaces/ISuAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface ISuAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n    function grantRole(bytes32 role, address account) external;\\n    function revokeRole(bytes32 role, address account) external;\\n    function renounceRole(bytes32 role, address account) external;\\n\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    // TODO: remove legacy functionality\\n    function setVault(address _vault, bool _isVault) external;\\n    function setCdpManager(address _cdpManager, bool _isCdpManager) external;\\n    function setDAO(address _dao, bool _isDAO) external;\\n    function setManagerParameters(address _address, bool _permit) external;\\n    function transferOwnership(address newOwner) external;\\n}\\n\",\"keccak256\":\"0xd386f4bad5ae0d77788abea08ceec10dc02b02559465d8a8f4e30b58dfac2d2a\",\"license\":\"MIT\"},\"contracts/interfaces/ISuCdpRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface ISuCdpRegistry {\\n\\n    struct CDP {\\n        address asset;\\n        address owner;\\n    }\\n\\n    function batchCheckpoint ( address[] calldata assets, address[] calldata owners ) external;\\n    function batchCheckpointForAsset ( address asset, address[] calldata owners ) external;\\n    function checkpoint ( address asset, address owner ) external;\\n    function cr (  ) external view returns ( address );\\n    function getAllCdps (  ) external view returns ( CDP[] memory r );\\n    function getCdpsByCollateral ( address asset ) external view returns ( CDP[] memory cdps );\\n    function getCdpsByOwner ( address owner ) external view returns ( CDP[] memory r );\\n    function getCdpsCount (  ) external view returns ( uint256 totalCdpCount );\\n    function getCdpsCountForCollateral ( address asset ) external view returns ( uint256 );\\n    function isAlive ( address asset, address owner ) external view returns ( bool );\\n    function isListed ( address asset, address owner ) external view returns ( bool );\\n    function vault (  ) external view returns ( address );\\n}\\n\",\"keccak256\":\"0xbd1b2a5c0c1f57ab775899ab9b3d35a6dbde8c75aba0860ac271e6f1f31b6186\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ISuManagerParameters.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\ninterface ISuManagerParameters {\\n    function devaluationPeriod ( address ) external view returns ( uint256 );\\n    function initialCollateralRatio ( address ) external view returns ( uint256 );\\n    function liquidationDiscount ( address ) external view returns ( uint256 );\\n    function liquidationRatio ( address ) external view returns ( uint256 );\\n    function setCollateral (\\n        address asset,\\n        uint256 stabilityFeeValue,\\n        uint256 liquidationFeeValue,\\n        uint256 initialCollateralRatioValue,\\n        uint256 liquidationRatioValue,\\n        uint256 liquidationDiscountValue,\\n        uint256 devaluationPeriodValue,\\n        uint256 stablecoinLimit\\n    ) external;\\n    function setDevaluationPeriod ( address asset, uint256 newValue ) external;\\n    function setInitialCollateralRatio ( address asset, uint256 newValue ) external;\\n    function setLiquidationDiscount ( address asset, uint256 newValue ) external;\\n    function setLiquidationRatio ( address asset, uint256 newValue ) external;\\n    function vaultParameters (  ) external view returns ( address );\\n}\\n\",\"keccak256\":\"0xe783bcfbcdfe32aa6ae7fe3893972bee156195b64b3b3410637ce76114bfa37e\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ISuOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity >=0.7.6;\\n\\ninterface ISuOracle {\\n    /**\\n     * @notice returns price1e18(assert) such that:\\n     *   [assetAmount * price1e18(assert) / 1e18 === $$ 1e18] == suUSD\\n     *   examples:\\n     *       market price of btc = $30k,\\n     *       for 0.1 wBTC the unit256 amount is 0.1 * 1e18\\n     *       0.1 * 1e18 * (price1e18 / 1e18) == $3000 == uint256(3000*1e18)\\n     *       => price1e18 = 30000 * 1e18;\\n\\n     *       market price of usdt = $0.97,\\n     *       for 1 usdt uint256 = 1 * 1e6\\n     *       so 1*1e6 * price1e18 / 1e18 == $0.97 == uint256(0.97*1e18)\\n     *       => 1*1e6 * (price1e18 / 1e18) / (0.97*1e18)   = 1\\n     *       =>  price1e18 = 0.97 * (1e18/1e6) * 1e18\\n     * @param asset of erc20 token\\n     * @return price1e18 such as asset.balanceOf() * price1e18 / 1e18 == $$ 1e18\\n     **/\\n    function getUsdPrice1e18(address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2ec14e1ab536f98d4a70eb0f1233652d15e6dda29db4285c613315f499020123\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ISuVault.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\ninterface ISuVault {\\n    function DENOMINATOR_1E5 (  ) external view returns ( uint256 );\\n    function borrow ( address asset, address user, uint256 amount ) external returns ( uint256 );\\n    function calculateFee ( address asset, address user, uint256 amount ) external view returns ( uint256 );\\n    function changeOracleType ( address asset, address user, uint256 newOracleType ) external;\\n    function chargeFee ( address asset, address user, uint256 amount ) external;\\n    function collaterals ( address, address ) external view returns ( uint256 );\\n    function debts ( address, address ) external view returns ( uint256 );\\n    function deposit ( address asset, address user, uint256 amount ) external;\\n    function destroy ( address asset, address user ) external;\\n    function getTotalDebt ( address asset, address user ) external view returns ( uint256 );\\n    function lastUpdate ( address, address ) external view returns ( uint256 );\\n    function liquidate ( address asset, address positionOwner, uint256 mainAssetToLiquidator, uint256 mainAssetToPositionOwner, uint256 repayment, uint256 penalty, address liquidator ) external;\\n    function liquidationBlock ( address, address ) external view returns ( uint256 );\\n    function liquidationFee ( address, address ) external view returns ( uint256 );\\n    function liquidationPrice ( address, address ) external view returns ( uint256 );\\n    function oracleType ( address, address ) external view returns ( uint256 );\\n    function repay ( address asset, address user, uint256 amount ) external returns ( uint256 );\\n    function spawn ( address asset, address user ) external;\\n    function stabilityFee ( address, address ) external view returns ( uint256 );\\n    function tokenDebts ( address ) external view returns ( uint256 );\\n    function triggerLiquidation ( address asset, address positionOwner, uint256 initialPrice ) external;\\n    function update ( address asset, address user ) external;\\n    function stablecoin (  ) external view returns ( address );\\n    function vaultParameters (  ) external view returns ( address );\\n    function withdraw ( address asset, address user, uint256 amount ) external;\\n}\\n\",\"keccak256\":\"0x6957ed3f1d54522680cfb895470414933489debede7e08b1eed8ced9169bcb2b\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ISuVaultParameters.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\ninterface ISuVaultParameters {\\n    function canModifyVault ( address ) external view returns ( bool );\\n    function foundation (  ) external view returns ( address );\\n    function isManager ( address ) external view returns ( bool );\\n    function isOracleTypeEnabled ( uint256, address ) external view returns ( bool );\\n    function liquidationFee ( address ) external view returns ( uint256 );\\n    function setCollateral ( address asset, uint256 stabilityFeeValue, uint256 liquidationFeeValue, uint256 stablecoinLimit, uint256[] calldata oracles ) external;\\n    function setFoundation ( address newFoundation ) external;\\n    function setLiquidationFee ( address asset, uint256 newValue ) external;\\n    function setManager ( address who, bool permit ) external;\\n    function setOracleType ( uint256 _type, address asset, bool enabled ) external;\\n    function setStabilityFee ( address asset, uint256 newValue ) external;\\n    function setTokenDebtLimit ( address asset, uint256 limit ) external;\\n    function setVaultAccess ( address who, bool permit ) external;\\n    function stabilityFee ( address ) external view returns ( uint256 );\\n    function tokenDebtLimit ( address ) external view returns ( uint256 );\\n    function vault (  ) external view returns ( address );\\n    function vaultParameters (  ) external view returns ( address );\\n}\\n\",\"keccak256\":\"0x30033aafe7d25191254aca76b8fd02be5541048cd90eda54071c2d07ee04d62b\",\"license\":\"UNLICENSED\"},\"contracts/lending/SuManager.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\n/*\\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\\n*/\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport \\\"../interfaces/ISuOracle.sol\\\";\\nimport \\\"../interfaces/ISuVault.sol\\\";\\nimport \\\"../interfaces/ISuCdpRegistry.sol\\\";\\nimport \\\"../interfaces/ISuManagerParameters.sol\\\";\\nimport \\\"../interfaces/ISuVaultParameters.sol\\\";\\nimport \\\"./SuManagerParameters.sol\\\";\\n\\n// finally found the managers mighty over the vault\\n// user does only interact with manager as proxy to the wallet\\n/// Yes\\n// there is only one manager for vault each moment\\n/// I'm sure, the code doesn't enforce this, could be multiple managers\\n// suggest to maintain only address of active manager instead of managers list\\n/// not sure why\\ncontract SuManager is ReentrancyGuard, SuManagerParameters {\\n    ISuVault public immutable vault;\\n    ISuManagerParameters public immutable managerParameters;\\n    ISuCdpRegistry public immutable cdpRegistry;\\n\\n    address public suOracle;\\n\\n    // 2^112 - what is meaning of 112?\\n    ///  float standard https://en.wikipedia.org/wiki/Q_(number_format)\\n    uint public constant Q112 = 2 ** 112;\\n\\n    // 10^5 = 10000\\n    uint public constant DENOMINATOR_1E5 = 1e5;\\n\\n    // even triggered when user deposit collateral\\n    event Join(address indexed asset, address indexed owner, uint main, uint stablecoin);\\n\\n    // event triggered when user withdraws collateral\\n    event Exit(address indexed asset, address indexed owner, uint main, uint stablecoin);\\n\\n    // event triggered when user didnt withdraw collateral before price goes down\\n    event LiquidationTriggered(address indexed asset, address indexed owner);\\n\\n    modifier checkpoint(address asset, address owner) {\\n        _;\\n        cdpRegistry.checkpoint(asset, owner);\\n    }\\n\\n     // aggregation over composition\\n    constructor(address _vault, address _suOracle, address _cdpRegistry)\\n        SuManagerParameters(_vault)\\n    {\\n        address _managerParameters = address (this);\\n        require(\\n            _managerParameters != address(0) &&\\n            _cdpRegistry != address(0),\\n                \\\"Unit Protocol: INVALID_ARGS\\\"\\n        );\\n\\n        require(_suOracle != address(0), \\\"INVALID_ARGS: SU_ORACLE\\\");\\n\\n        // require(ISuVaultManagerParameters(_managerParameters).vaultParameters() != address(0), \\\"INVALID_ARGS: VAULT_PARAMETERS\\\");\\n\\n        // require(ISuVaultParameters(ISuVaultManagerParameters(_managerParameters).vaultParameters()).vault() != address(0), \\\"INVALID_ARGS: VAULT\\\");\\n\\n        // require(ISuVault(ISuVaultParameters(ISuVaultManagerParameters(_managerParameters).vaultParameters()).vault()).weth() != address(0), \\\"INVALID_ARGS: VAULT_MANAGER\\\");\\n\\n        suOracle = _suOracle;\\n\\n        managerParameters = ISuManagerParameters(_managerParameters);\\n\\n//        vault = ISuVault(ISuVaultParameters(ISuVaultManagerParameters(_managerParameters).vaultParameters()).vault());\\n        vault = ISuVault(_vault);\\n\\n        cdpRegistry = ISuCdpRegistry(_cdpRegistry);\\n    }\\n\\n    // wrapper ether only, no native\\n    receive() external payable {\\n        revert(\\\"Unit Protocol: RESTRICTED\\\");\\n    }\\n\\n      // why checkpoint is needed? to check if depositing collateral allowed for user?\\n      // this function is called by user to deposit collateral and receive stablecoin\\n      // before calling this function user has to approve the Vault to take his collateral\\n      /// Yes,\\n    function join(address asset, uint assetAmount, uint stablecoinAmount) public nonReentrant checkpoint(asset, msg.sender) {\\n        require(stablecoinAmount != 0 || assetAmount != 0, \\\"Unit Protocol: USELESS_TX\\\");\\n\\n        require(IERC20Metadata(asset).decimals() <= 18, \\\"Unit Protocol: NOT_SUPPORTED_DECIMALS\\\");\\n\\n        if (stablecoinAmount == 0) {\\n\\n            // why user deposit collateral but does not take stablecoin?\\n            // should be called in separate function\\n            /// Use doesn't want to get liquidate, so stakes more collateral\\n            vault.deposit(asset, msg.sender, assetAmount);\\n\\n        } else {\\n            bool spawned = vault.debts(asset, msg.sender) != 0;\\n\\n            if (!spawned) {\\n                // create a new debt position for user with current oracle\\n                // why oracles are associated with user?\\n                /// Historical reasons, now it's deprecated\\n                // because oracle could have been changed since the position was created by user\\n                // new positions will be spawned with new oracle but existing ones remain the same\\n                // Doesn't matter, it's depreacted.\\n                vault.spawn(asset, msg.sender);\\n            }\\n\\n            if (assetAmount != 0) {\\n                // deposit collateral to the wallet\\n                vault.deposit(asset, msg.sender, assetAmount);\\n            }\\n\\n            // issue stablecoin to the user\\n            // why stablecoinAmount is chosen by user?\\n            // it should be calculated from amount of collateral given\\n            vault.borrow(asset, msg.sender, stablecoinAmount);\\n\\n            // maybe here we check that stablecoinAmount are corresponding to assetAmount?\\n            // how does user know correct values? probably by calling helper view function\\n            _ensurePositionCollateralization(asset, msg.sender);\\n\\n        }\\n\\n        emit Join(asset, msg.sender, assetAmount, stablecoinAmount);\\n    }\\n\\n      // user can pay back the stablecoin and take his collateral\\n      // instead of passing both assetAmount and stablecoinAmount\\n      // better user just to pass one of them\\n      // also pass preferred rate and maybe acceptable diff percent\\n      // that's the purpose of passing both to protect user from rate fluctuations\\n    function exit(address asset, uint assetAmount, uint stablecoinAmount) public nonReentrant checkpoint(asset, msg.sender) returns (uint) {\\n\\n        // what the case when stablecoinAmount allowed to be zero?\\n        require(assetAmount != 0 || stablecoinAmount != 0, \\\"Unit Protocol: USELESS_TX\\\");\\n\\n        uint debt = vault.debts(asset, msg.sender);\\n\\n        // not to pay more stablecoin than debt\\n        if (stablecoinAmount > debt) { stablecoinAmount = debt; }\\n\\n        if (assetAmount == 0) {\\n            // why pay stablecoin but not withdrawing collateral?\\n            /// To stop pay interest but have ability to loan in the future\\n            _repay(asset, msg.sender, stablecoinAmount);\\n        } else {\\n            // pay full debt in stablecoin\\n            if (debt == stablecoinAmount) {\\n                // vault will transfer collateral to the user\\n                vault.withdraw(asset, msg.sender, assetAmount);\\n                if (stablecoinAmount != 0) {\\n                    // how could it be zero? then debt is zero too\\n                    /// Yes, if you returned debt in other tx but now want to take your collateral\\n                    _repay(asset, msg.sender, stablecoinAmount);\\n                }\\n            } else {\\n                // pay partly\\n                vault.withdraw(asset, msg.sender, assetAmount);\\n\\n                if (stablecoinAmount != 0) {\\n                    _repay(asset, msg.sender, stablecoinAmount);\\n                }\\n\\n                vault.update(asset, msg.sender);\\n\\n                // make sure partial repayment is valid\\n                // but dont need to check this after full repayment?\\n                /// Yes, because divizion by 0\\n                _ensurePositionCollateralization(asset, msg.sender);\\n            }\\n        }\\n\\n        emit Exit(asset, msg.sender, assetAmount, stablecoinAmount);\\n\\n        return stablecoinAmount;\\n    }\\n\\n      // alternatively it allowed to pass collateral amount and calculate stablecoin amount\\n      // how does user calculate repayment value?\\n      /// UX convenience function\\n    function exit_targetRepayment(address asset, uint assetAmount, uint repayment) external returns (uint) {\\n\\n        uint stablecoinAmount = _calcPrincipal(asset, msg.sender, repayment);\\n\\n        return exit(asset, assetAmount, stablecoinAmount);\\n    }\\n\\n    // decrease debt amount by burning repaid stablecoin\\n    function _repay(address asset, address owner, uint stablecoinAmount) internal {\\n        // calculate fee\\n        uint fee = vault.calculateFee(asset, owner, stablecoinAmount);\\n\\n        // charge fee from the vault\\n        vault.chargeFee(vault.stablecoin(), owner, fee);\\n\\n        // burn stablecoin from the vault\\n        uint debtAfter = vault.repay(asset, owner, stablecoinAmount);\\n        if (debtAfter == 0) {\\n            vault.destroy(asset, owner);\\n        }\\n    }\\n\\n    // after partial repayment should be made sure its still collateralized enough\\n    function _ensurePositionCollateralization(address asset, address owner) internal view {\\n        // calculate value in usd from collateral position\\n        uint usdValue_q112 = getCollateralUsdValue_q112(asset, owner);\\n\\n        // multiply value in usd to the collateral ratio, then divide by 2^112 and divide by 100\\n        uint usdLimit = usdValue_q112 * managerParameters.initialCollateralRatio(asset) / Q112 / 100;\\n\\n        // make sure calculated allowed limit is higher than the actual debt\\n        require(vault.getTotalDebt(asset, owner) <= usdLimit, \\\"Unit Protocol: UNDERCOLLATERALIZED\\\");\\n    }\\n\\n    // anyone can trigger liquidation\\n    // once position happen to be under collaterazied\\n    function triggerLiquidation(address asset, address owner) external nonReentrant {\\n\\n\\n        // calculate valut of collateral\\n        uint usdValue_q112 = getCollateralUsdValue_q112(asset, owner);\\n\\n        // and check if it can be liquidated\\n        require(_isLiquidatablePosition(asset, owner, usdValue_q112), \\\"Unit Protocol: SAFE_POSITION\\\");\\n\\n        // what are the factors discount percent depends upon?\\n        uint liquidationDiscount_q112 = usdValue_q112 * managerParameters.liquidationDiscount(asset) / DENOMINATOR_1E5;\\n\\n        // liquidation price is collateral value minus liquidation discount\\n        uint initialLiquidationPrice = (usdValue_q112 - liquidationDiscount_q112) / Q112;\\n\\n        // then vault will trigger liquidation and auction begins\\n        vault.triggerLiquidation(asset, owner, initialLiquidationPrice);\\n\\n        emit LiquidationTriggered(asset, owner);\\n    }\\n\\n    // * Now we return rate and calculate amount here\\n    function getCollateralUsdValue_q112(address asset, address owner) public view returns (uint) {\\n        uint256 assetAmount = vault.collaterals(asset, owner);\\n\\n        uint256 collateralValueUsd_1e18 = ISuOracle(suOracle).getUsdPrice1e18(asset) * assetAmount / 1e18;\\n\\n        uint256 collateralValueUsd_q112 = collateralValueUsd_1e18 * Q112;\\n\\n        return collateralValueUsd_q112;\\n    }\\n\\n     // is position allowed to be liquidated\\n    function _isLiquidatablePosition(\\n        address asset,\\n        address owner,\\n        uint usdValue_q112\\n    ) internal view returns (bool) {\\n        // calculate current debt to be returned\\n        uint debt = vault.getTotalDebt(asset, owner);\\n\\n        if (debt == 0) return false;\\n\\n        // make sure its not under collaterazied\\n        // should liquidation ration always be higher than 1 or allowed lower?\\n        return debt * 100 * Q112 / usdValue_q112 >= managerParameters.liquidationRatio(asset);\\n    }\\n\\n     // view function to check if position is liquidatable\\n    function isLiquidatablePosition(\\n        address asset,\\n        address owner\\n    ) public view returns (bool) {\\n        uint usdValue_q112 = getCollateralUsdValue_q112(asset, owner);\\n\\n        return _isLiquidatablePosition(asset, owner, usdValue_q112);\\n    }\\n\\n     // view function to show utilization ratio\\n     // the same function can be used inside of _isLiquidatablePosition\\n    function utilizationRatio(\\n        address asset,\\n        address owner\\n    ) public view returns (uint) {\\n        uint debt = vault.getTotalDebt(asset, owner);\\n        if (debt == 0) return 0;\\n\\n        uint usdValue_q112 = getCollateralUsdValue_q112(asset, owner);\\n\\n        return debt * 100 * Q112 / usdValue_q112;\\n    }\\n\\n     // calculate liquidation price\\n     // can be used inside of _isLiquidatablePosition\\n    function liquidationPrice_q112(\\n        address asset,\\n        address owner\\n    ) external view returns (uint) {\\n\\n        uint debt = vault.getTotalDebt(asset, owner);\\n        if (debt == 0) return type(uint256).max;\\n\\n        uint collateralLiqPrice = debt * 100 * Q112 / (managerParameters.liquidationRatio(asset));\\n\\n        require(IERC20Metadata(asset).decimals() <= 18, \\\"Unit Protocol: NOT_SUPPORTED_DECIMALS\\\");\\n\\n        return collateralLiqPrice / vault.collaterals(asset, owner) / 10 ** (18 - IERC20Metadata(asset).decimals());\\n    }\\n\\n    /// util function for UX convenience\\n    function _calcPrincipal(address asset, address owner, uint repayment) internal view returns (uint) {\\n        uint fee = vault.stabilityFee(asset, owner) * (block.timestamp - vault.lastUpdate(asset, owner)) / 365 days;\\n        return repayment * DENOMINATOR_1E5 / (DENOMINATOR_1E5 + fee);\\n    }\\n}\\n\",\"keccak256\":\"0xfd825b33ae5a68d7a637ce76679c3e7a7c485a45c7c3e9ae8aaf17a1d8083e9d\",\"license\":\"BSL 1.1\"},\"contracts/lending/SuManagerParameters.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\n/*\\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\\n*/\\npragma solidity ^0.8.0;\\n\\nimport \\\"./SuVaultParameters.sol\\\";\\nimport \\\"../access-control/SuAccessControlSingleton.sol\\\";\\n\\n/**\\n * @title managerParameters\\n **/\\nabstract contract SuManagerParameters is SuAuthenticated {\\n    // map token to initial collateralization ratio; 0 decimals\\n    mapping(address => uint) public initialCollateralRatio;\\n\\n    // map token to liquidation ratio; 0 decimals\\n    mapping(address => uint) public liquidationRatio;\\n\\n    // map token to liquidation discount; 3 decimals\\n    mapping(address => uint) public liquidationDiscount;\\n\\n    // map token to devaluation period in blocks\\n    mapping(address => uint) public devaluationPeriod;\\n\\n    SuVaultParameters public vaultParameters;\\n\\n    constructor(address _vaultParameters) SuAuthenticated(address(SuAuthenticated(_vaultParameters).ACCESS_CONTROL_SINGLETON())) {\\n        vaultParameters = SuVaultParameters(_vaultParameters);\\n    }\\n\\n    function setCollateral(\\n        address asset,\\n        uint stabilityFeeValue,\\n        uint liquidationFeeValue,\\n        uint initialCollateralRatioValue,\\n        uint liquidationRatioValue,\\n        uint liquidationDiscountValue,\\n        uint devaluationPeriodValue,\\n        uint stablecoinLimit\\n    ) external onlyOwner {\\n        vaultParameters.setCollateral(asset, stabilityFeeValue, liquidationFeeValue, stablecoinLimit);\\n        setInitialCollateralRatio(asset, initialCollateralRatioValue);\\n        setLiquidationRatio(asset, liquidationRatioValue);\\n        setDevaluationPeriod(asset, devaluationPeriodValue);\\n        setLiquidationDiscount(asset, liquidationDiscountValue);\\n    }\\n\\n    /**\\n     * @notice Only manager is able to call this function\\n     * @dev Sets the initial collateral ratio\\n     * @param asset The address of the main collateral token\\n     * @param newValue The collateralization ratio (0 decimals)\\n     **/\\n    function setInitialCollateralRatio(address asset, uint newValue) public onlyOwner {\\n        require(newValue != 0 && newValue <= 100, \\\"Unit Protocol: INCORRECT_COLLATERALIZATION_VALUE\\\");\\n        initialCollateralRatio[asset] = newValue;\\n    }\\n\\n    /**\\n     * @notice Only manager is able to call this function\\n     * @dev Sets the liquidation ratio\\n     * @param asset The address of the main collateral token\\n     * @param newValue The liquidation ratio (0 decimals)\\n     **/\\n    function setLiquidationRatio(address asset, uint newValue) public onlyOwner {\\n        require(newValue != 0 && newValue >= initialCollateralRatio[asset], \\\"Unit Protocol: INCORRECT_COLLATERALIZATION_VALUE\\\");\\n        liquidationRatio[asset] = newValue;\\n    }\\n\\n    /**\\n     * @notice Only manager is able to call this function\\n     * @dev Sets the liquidation discount\\n     * @param asset The address of the main collateral token\\n     * @param newValue The liquidation discount (3 decimals)\\n     **/\\n    function setLiquidationDiscount(address asset, uint newValue) public onlyOwner {\\n        require(newValue < 1e5, \\\"Unit Protocol: INCORRECT_DISCOUNT_VALUE\\\");\\n        liquidationDiscount[asset] = newValue;\\n    }\\n\\n    /**\\n     * @notice Only manager is able to call this function\\n     * @dev Sets the devaluation period of collateral after liquidation\\n     * @param asset The address of the main collateral token\\n     * @param newValue The devaluation period in blocks\\n     **/\\n    function setDevaluationPeriod(address asset, uint newValue) public onlyOwner {\\n        require(newValue != 0, \\\"Unit Protocol: INCORRECT_DEVALUATION_VALUE\\\");\\n        devaluationPeriod[asset] = newValue;\\n    }\\n}\\n\",\"keccak256\":\"0x650df7db7d84a18269971e1309a7ac87a93aa410c78e94048cdc85c9e7e7b52d\",\"license\":\"BSL 1.1\"},\"contracts/lending/SuVaultParameters.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\r\\n\\r\\nimport \\\"../access-control/SuAccessControlSingleton.sol\\\";\\r\\nimport \\\"../access-control/SuAuthenticated.sol\\\";\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// VaultParameters is Singleton for Access Control\\r\\n// this looks like configuration contract\\r\\n// what are the rules to determine these configs for each new allowed collateral?\\r\\n/// yes, and for all collaterals\\r\\n// is DAO allowed to choose parameters for existing collaterals?\\r\\n///\\r\\n// are there any limits to be enforced? i.e. fee cannot be over 100% percent\\r\\n/// No, but it's a good idea to have it\\r\\nabstract contract SuVaultParameters is SuAuthenticated {\\r\\n    // stability fee can be different for each collateral\\r\\n    /// yes\\r\\n    mapping(address => uint) public protocolStabilityFee;\\r\\n\\r\\n    // liquidation fee too can be different\\r\\n    /// yes\\r\\n    mapping(address => uint) public protocolLiquidationFee;\\r\\n\\r\\n    // map token to USDP mint limit\\r\\n    /// yes, limit for each collateral-assert\\r\\n    mapping(address => uint) public tokenDebtLimit;\\r\\n\\r\\n    // whether an oracle is enabled\\r\\n    /// TODO:\\r\\n    mapping(uint => mapping(address => bool)) public isOracleTypeEnabled;\\r\\n\\r\\n    // what is foundation, DAO?\\r\\n    /// Beneficiaty as VotingEscrow.vy\\r\\n    address public foundation;\\r\\n\\r\\n    address public immutable vault;\\r\\n\\r\\n    // creator of contract is manager, can it be the same as DAO or can it be removed later?\\r\\n    /// YES\\r\\n    // how can vault address be known at this moment?\\r\\n    /// Precult based on CREATE spec\\r\\n    // can be created another function to set vault address once deployed?\\r\\n    /// Yes, possibly with some logic change\\r\\n    constructor(address _authControl, address payable _vault, address _foundation)\\r\\n        SuAuthenticated(_authControl)\\r\\n    {\\r\\n        require(_vault != address(0), \\\"Unit Protocol: ZERO_ADDRESS\\\");\\r\\n        require(_foundation != address(0), \\\"Unit Protocol: ZERO_ADDRESS\\\");\\r\\n\\r\\n        vault = _vault;\\r\\n\\r\\n//        ISuAccessControl(_authControl).setVault(_vault, true);\\r\\n//        ISuAccessControl(_authControl).setDAO(msg.sender, true);\\r\\n\\r\\n        foundation = _foundation;\\r\\n    }\\r\\n\\r\\n    // similar function can be added to setVault\\r\\n    function setFoundation(address newFoundation) external onlyOwner {\\r\\n        require(newFoundation != address(0), \\\"Unit Protocol: ZERO_ADDRESS\\\");\\r\\n        foundation = newFoundation;\\r\\n    }\\r\\n\\r\\n    // manager is allowed to add new collaterals and modify existing ones\\r\\n    // I think creating new collaterals and modifying existing ones should be separate functions\\r\\n    /// Yes, for sercurity reason, it's possible to add events for creating and edititing\\r\\n    // also different event should be emitted NewCollateral UpdatedCollateral accordingly\\r\\n    // those events can be handled on frontend to notify user about any changes in rules\\r\\n    /// Not sure it makes sense to split into create/edit functions\\r\\n    function setCollateral(\\r\\n        address asset,\\r\\n        uint stabilityFeeValue,\\r\\n        uint liquidationFeeValue,\\r\\n        uint stablecoinLimit\\r\\n    ) external onlyOwner {\\r\\n        // stability fee should be validated in range, what is stability fee should be described here?\\r\\n        setStabilityFee(asset, stabilityFeeValue);\\r\\n        // liquidation fee should be validated in range, what is liquidation fee should be explained?\\r\\n        setLiquidationFee(asset, liquidationFeeValue);\\r\\n        // why debt limit for collateral is necessary? to manage risks in case of collateral failure?\\r\\n        setTokenDebtLimit(asset, stablecoinLimit);\\r\\n    }\\r\\n\\r\\n    // stability fee is measured as the number of coins per year or percentage?\\r\\n    // this should be clarified in argument name i.e. stabilityFeePercentageYearly\\r\\n    /// No, it's APR ( per year, see calculateFee) percentrage, fee percentage; 3 decimals.\\r\\n    /// YES, self-documented code-style is the best practice.\\r\\n    function setStabilityFee(address asset, uint newValue) public onlyOwner {\\r\\n        protocolStabilityFee[asset] = newValue;\\r\\n    }\\r\\n\\r\\n    // the same with liquidation fee is not clear\\r\\n    /// % 0 decimals, needede to get better variable names\\r\\n    function setLiquidationFee(address asset, uint newValue) public onlyOwner {\\r\\n        require(newValue <= 100, \\\"Unit Protocol: VALUE_OUT_OF_RANGE\\\");\\r\\n        protocolLiquidationFee[asset] = newValue;\\r\\n    }\\r\\n\\r\\n    // what are allowed types? enum should be defined\\r\\n    // types out of range should fail transaction\\r\\n    /// All oracles implementation are numbered, so some of them support this particular asset\\r\\n    function setOracleType(uint _type, address asset, bool enabled) public onlyOwner {\\r\\n        isOracleTypeEnabled[_type][asset] = enabled;\\r\\n    }\\r\\n\\r\\n    // debt limit can be changed for any collateral along with liquidation and stability fees\\r\\n    // seems like managers have too much power - that can be dangerous given multiple managers?\\r\\n    /// Yes, application of  principle of least priviledge needed\\r\\n    function setTokenDebtLimit(address asset, uint limit) public onlyOwner {\\r\\n        tokenDebtLimit[asset] = limit;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7c29783a2bba9d0fd5563d7e49b8a87b9e97fc1c03f8599516f44528dee195f3\",\"license\":\"BSL 1.1\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101b05760003560e01c8063a20f9cb3116100ec578063bbdc95311161008a578063d539139311610064578063d539139314610597578063d709b4b0146105cb578063ea36380a146105eb578063fbfa77cf1461060b57600080fd5b8063bbdc953114610537578063bf1b8dd314610557578063d4796d121461057757600080fd5b8063aca345ee116100c6578063aca345ee146104aa578063b1a4cf7f146104ca578063b7fc3ada146104ea578063b85c44961461050a57600080fd5b8063a20f9cb314610436578063a3d84b5b14610456578063ab2a2a821461047657600080fd5b80631af3be18116101595780633bf7a83e116101335780633bf7a83e146103ba5780633bffbbe2146103d25780634265607c146103ff578063971182c61461041f57600080fd5b80631af3be18146103445780631c71309814610378578063252d040e1461039a57600080fd5b8063134a02dd1161018a578063134a02dd146102b357806314c376dc146102e357806315a04ea21461031757600080fd5b806303ee9f22146102075780630aaddb501461025857806312dc1dcc1461029357600080fd5b366102025760405162461bcd60e51b815260206004820152601960248201527f556e69742050726f746f636f6c3a20524553545249435445440000000000000060448201526064015b60405180910390fd5b600080fd5b34801561021357600080fd5b5061023b7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561026457600080fd5b50610285610273366004612968565b60046020526000908152604090205481565b60405190815260200161024f565b34801561029f57600080fd5b506102856102ae3660046129a0565b61063f565b3480156102bf57600080fd5b506102d36102ce3660046129a0565b6109d4565b604051901515815260200161024f565b3480156102ef57600080fd5b506102857fe965846df3dd5b1dfa65f58e31477079e90140e0908b6dd31b5aead5a57cf36581565b34801561032357600080fd5b50610285610332366004612968565b60036020526000908152604090205481565b34801561035057600080fd5b5061023b7f000000000000000000000000000000000000000000000000000000000000000081565b34801561038457600080fd5b506103986103933660046129d8565b6109f6565b005b3480156103a657600080fd5b506102856103b53660046129a0565b610b6f565b3480156103c657600080fd5b50610285600160701b81565b3480156103de57600080fd5b506102856103ed366004612968565b60026020526000908152604090205481565b34801561040b57600080fd5b5061028561041a3660046129a0565b610cec565b34801561042b57600080fd5b50610285620186a081565b34801561044257600080fd5b5060065461023b906001600160a01b031681565b34801561046257600080fd5b50610285610471366004612a03565b610dcc565b34801561048257600080fd5b5061023b7f000000000000000000000000000000000000000000000000000000000000000081565b3480156104b657600080fd5b5060055461023b906001600160a01b031681565b3480156104d657600080fd5b506103986104e5366004612a37565b610df2565b3480156104f657600080fd5b506103986105053660046129d8565b610f9b565b34801561051657600080fd5b50610285610525366004612968565b60016020526000908152604090205481565b34801561054357600080fd5b50610285610552366004612a03565b611119565b34801561056357600080fd5b506103986105723660046129d8565b611553565b34801561058357600080fd5b506103986105923660046129a0565b6116f2565b3480156105a357600080fd5b506102857f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b3480156105d757600080fd5b506103986105e63660046129d8565b611986565b3480156105f757600080fd5b50610398610606366004612a03565b611b0e565b34801561061757600080fd5b5061023b7f000000000000000000000000000000000000000000000000000000000000000081565b60405163d6446d4360e01b81526001600160a01b038381166004830152828116602483015260009182917f0000000000000000000000000000000000000000000000000000000000000000169063d6446d439060440160206040518083038186803b1580156106ad57600080fd5b505afa1580156106c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e59190612ab4565b9050806106f7576000199150506109ce565b604051631dffddf160e11b81526001600160a01b0385811660048301526000917f000000000000000000000000000000000000000000000000000000000000000090911690633bffbbe29060240160206040518083038186803b15801561075d57600080fd5b505afa158015610771573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107959190612ab4565b600160701b6107a5846064612c13565b6107af9190612c13565b6107b99190612b05565b90506012856001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156107f657600080fd5b505afa15801561080a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082e9190612acc565b60ff16111561088d5760405162461bcd60e51b815260206004820152602560248201527f556e69742050726f746f636f6c3a204e4f545f535550504f525445445f444543604482015264494d414c5360d81b60648201526084016101f9565b846001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156108c657600080fd5b505afa1580156108da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fe9190612acc565b610909906012612c49565b61091490600a612b68565b60405163728f08cf60e11b81526001600160a01b03878116600483015286811660248301527f0000000000000000000000000000000000000000000000000000000000000000169063e51e119e9060440160206040518083038186803b15801561097d57600080fd5b505afa158015610991573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b59190612ab4565b6109bf9083612b05565b6109c99190612b05565b925050505b92915050565b6000806109e18484610b6f565b90506109ee84848361209f565b949350505050565b604051632474521560e21b8152600060048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d148549060440160206040518083038186803b158015610a5c57600080fd5b505afa158015610a70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a949190612a94565b610ae05760405162461bcd60e51b815260206004820152601d60248201527f5375417574683a206f6e6c794f776e657220415554485f4641494c454400000060448201526064016101f9565b80610b535760405162461bcd60e51b815260206004820152602a60248201527f556e69742050726f746f636f6c3a20494e434f52524543545f444556414c554160448201527f54494f4e5f56414c55450000000000000000000000000000000000000000000060648201526084016101f9565b6001600160a01b03909116600090815260046020526040902055565b60405163728f08cf60e11b81526001600160a01b038381166004830152828116602483015260009182917f0000000000000000000000000000000000000000000000000000000000000000169063e51e119e9060440160206040518083038186803b158015610bdd57600080fd5b505afa158015610bf1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c159190612ab4565b6006546040517f356efd980000000000000000000000000000000000000000000000000000000081526001600160a01b038781166004830152929350600092670de0b6b3a764000092859291169063356efd989060240160206040518083038186803b158015610c8457600080fd5b505afa158015610c98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cbc9190612ab4565b610cc69190612c13565b610cd09190612b05565b90506000610ce2600160701b83612c13565b9695505050505050565b60405163d6446d4360e01b81526001600160a01b038381166004830152828116602483015260009182917f0000000000000000000000000000000000000000000000000000000000000000169063d6446d439060440160206040518083038186803b158015610d5a57600080fd5b505afa158015610d6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d929190612ab4565b905080610da35760009150506109ce565b6000610daf8585610b6f565b905080600160701b610dc2846064612c13565b6109bf9190612c13565b600080610dda85338561221f565b9050610de7858583611119565b9150505b9392505050565b604051632474521560e21b8152600060048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d148549060440160206040518083038186803b158015610e5857600080fd5b505afa158015610e6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e909190612a94565b610edc5760405162461bcd60e51b815260206004820152601d60248201527f5375417574683a206f6e6c794f776e657220415554485f4641494c454400000060448201526064016101f9565b6005546040517f38507ff50000000000000000000000000000000000000000000000000000000081526001600160a01b038a81166004830152602482018a90526044820189905260648201849052909116906338507ff590608401600060405180830381600087803b158015610f5157600080fd5b505af1158015610f65573d6000803e3d6000fd5b50505050610f738886611986565b610f7d8885611553565b610f8788836109f6565b610f918884610f9b565b5050505050505050565b604051632474521560e21b8152600060048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d148549060440160206040518083038186803b15801561100157600080fd5b505afa158015611015573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110399190612a94565b6110855760405162461bcd60e51b815260206004820152601d60248201527f5375417574683a206f6e6c794f776e657220415554485f4641494c454400000060448201526064016101f9565b620186a081106110fd5760405162461bcd60e51b815260206004820152602760248201527f556e69742050726f746f636f6c3a20494e434f52524543545f444953434f554e60448201527f545f56414c55450000000000000000000000000000000000000000000000000060648201526084016101f9565b6001600160a01b03909116600090815260036020526040902055565b60006002600054141561116e5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016101f9565b600260005583338415158061118257508315155b6111ce5760405162461bcd60e51b815260206004820152601960248201527f556e69742050726f746f636f6c3a205553454c4553535f54580000000000000060448201526064016101f9565b604051634ac1c33d60e01b81526001600160a01b0387811660048301523360248301526000917f000000000000000000000000000000000000000000000000000000000000000090911690634ac1c33d9060440160206040518083038186803b15801561123a57600080fd5b505afa15801561124e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112729190612ab4565b905080851115611280578094505b85611295576112908733876123e4565b611477565b8481141561133857604051636ce5768960e11b81526001600160a01b038881166004830152336024830152604482018890527f0000000000000000000000000000000000000000000000000000000000000000169063d9caed1290606401600060405180830381600087803b15801561130d57600080fd5b505af1158015611321573d6000803e3d6000fd5b5050505084600014611290576112908733876123e4565b604051636ce5768960e11b81526001600160a01b038881166004830152336024830152604482018890527f0000000000000000000000000000000000000000000000000000000000000000169063d9caed1290606401600060405180830381600087803b1580156113a857600080fd5b505af11580156113bc573d6000803e3d6000fd5b50505050846000146113d3576113d38733876123e4565b6040517fc640752d0000000000000000000000000000000000000000000000000000000081526001600160a01b0388811660048301523360248301527f0000000000000000000000000000000000000000000000000000000000000000169063c640752d90604401600060405180830381600087803b15801561145557600080fd5b505af1158015611469573d6000803e3d6000fd5b50505050611477873361275d565b604080518781526020810187905233916001600160a01b038a16917fa702ae6024e8b4c2b0eb162b1453dacb93cf6922f5a2d7236faed898c21148f8910160405180910390a350604051632ed56dff60e21b81526001600160a01b03838116600483015282811660248301528594507f0000000000000000000000000000000000000000000000000000000000000000169063bb55b7fc90604401600060405180830381600087803b15801561152c57600080fd5b505af1158015611540573d6000803e3d6000fd5b5050600160005550929695505050505050565b604051632474521560e21b8152600060048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d148549060440160206040518083038186803b1580156115b957600080fd5b505afa1580156115cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f19190612a94565b61163d5760405162461bcd60e51b815260206004820152601d60248201527f5375417574683a206f6e6c794f776e657220415554485f4641494c454400000060448201526064016101f9565b801580159061166457506001600160a01b0382166000908152600160205260409020548110155b6116d65760405162461bcd60e51b815260206004820152603060248201527f556e69742050726f746f636f6c3a20494e434f52524543545f434f4c4c41544560448201527f52414c495a4154494f4e5f56414c55450000000000000000000000000000000060648201526084016101f9565b6001600160a01b03909116600090815260026020526040902055565b600260005414156117455760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016101f9565b600260009081556117568383610b6f565b905061176383838361209f565b6117af5760405162461bcd60e51b815260206004820152601c60248201527f556e69742050726f746f636f6c3a20534146455f504f534954494f4e0000000060448201526064016101f9565b6040517f15a04ea20000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152600091620186a0917f000000000000000000000000000000000000000000000000000000000000000016906315a04ea29060240160206040518083038186803b15801561183157600080fd5b505afa158015611845573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118699190612ab4565b6118739084612c13565b61187d9190612b05565b90506000600160701b6118908385612c32565b61189a9190612b05565b6040517f742a326e0000000000000000000000000000000000000000000000000000000081526001600160a01b0387811660048301528681166024830152604482018390529192507f00000000000000000000000000000000000000000000000000000000000000009091169063742a326e90606401600060405180830381600087803b15801561192a57600080fd5b505af115801561193e573d6000803e3d6000fd5b50506040516001600160a01b038088169350881691507f5b79a897d30813a62a1f95ba180d3320d3701d96605708b81105e00719a069e490600090a350506001600055505050565b604051632474521560e21b8152600060048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d148549060440160206040518083038186803b1580156119ec57600080fd5b505afa158015611a00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a249190612a94565b611a705760405162461bcd60e51b815260206004820152601d60248201527f5375417574683a206f6e6c794f776e657220415554485f4641494c454400000060448201526064016101f9565b8015801590611a80575060648111155b611af25760405162461bcd60e51b815260206004820152603060248201527f556e69742050726f746f636f6c3a20494e434f52524543545f434f4c4c41544560448201527f52414c495a4154494f4e5f56414c55450000000000000000000000000000000060648201526084016101f9565b6001600160a01b03909116600090815260016020526040902055565b60026000541415611b615760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016101f9565b6002600055823382151580611b7557508315155b611bc15760405162461bcd60e51b815260206004820152601960248201527f556e69742050726f746f636f6c3a205553454c4553535f54580000000000000060448201526064016101f9565b6012856001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611bfc57600080fd5b505afa158015611c10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c349190612acc565b60ff161115611c935760405162461bcd60e51b815260206004820152602560248201527f556e69742050726f746f636f6c3a204e4f545f535550504f525445445f444543604482015264494d414c5360d81b60648201526084016101f9565b82611d2557604051638340f54960e01b81526001600160a01b038681166004830152336024830152604482018690527f00000000000000000000000000000000000000000000000000000000000000001690638340f54990606401600060405180830381600087803b158015611d0857600080fd5b505af1158015611d1c573d6000803e3d6000fd5b50505050611fca565b604051634ac1c33d60e01b81526001600160a01b0386811660048301523360248301526000917f000000000000000000000000000000000000000000000000000000000000000090911690634ac1c33d9060440160206040518083038186803b158015611d9157600080fd5b505afa158015611da5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc99190612ab4565b1515905080611e6d576040517fe0ede1cd0000000000000000000000000000000000000000000000000000000081526001600160a01b0387811660048301523360248301527f0000000000000000000000000000000000000000000000000000000000000000169063e0ede1cd90604401600060405180830381600087803b158015611e5457600080fd5b505af1158015611e68573d6000803e3d6000fd5b505050505b8415611efc57604051638340f54960e01b81526001600160a01b038781166004830152336024830152604482018790527f00000000000000000000000000000000000000000000000000000000000000001690638340f54990606401600060405180830381600087803b158015611ee357600080fd5b505af1158015611ef7573d6000803e3d6000fd5b505050505b6040517f5224372c0000000000000000000000000000000000000000000000000000000081526001600160a01b038781166004830152336024830152604482018690527f00000000000000000000000000000000000000000000000000000000000000001690635224372c90606401602060405180830381600087803b158015611f8557600080fd5b505af1158015611f99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fbd9190612ab4565b50611fc8863361275d565b505b604080518581526020810185905233916001600160a01b038816917f6423b6056e64b3b29cb2d342362b47c26fa8d6877da27ea152354060df19b9bc910160405180910390a3604051632ed56dff60e21b81526001600160a01b03838116600483015282811660248301527f0000000000000000000000000000000000000000000000000000000000000000169063bb55b7fc90604401600060405180830381600087803b15801561207b57600080fd5b505af115801561208f573d6000803e3d6000fd5b5050600160005550505050505050565b60405163d6446d4360e01b81526001600160a01b038481166004830152838116602483015260009182917f0000000000000000000000000000000000000000000000000000000000000000169063d6446d439060440160206040518083038186803b15801561210d57600080fd5b505afa158015612121573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121459190612ab4565b905080612156576000915050610deb565b604051631dffddf160e11b81526001600160a01b0386811660048301527f00000000000000000000000000000000000000000000000000000000000000001690633bffbbe29060240160206040518083038186803b1580156121b757600080fd5b505afa1580156121cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121ef9190612ab4565b83600160701b612200846064612c13565b61220a9190612c13565b6122149190612b05565b101595945050505050565b6040517f88ad7a610000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152838116602483015260009182916301e13380917f0000000000000000000000000000000000000000000000000000000000000000909116906388ad7a619060440160206040518083038186803b1580156122ae57600080fd5b505afa1580156122c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122e69190612ab4565b6122f09042612c32565b6040517fd4b93dbe0000000000000000000000000000000000000000000000000000000081526001600160a01b03888116600483015287811660248301527f0000000000000000000000000000000000000000000000000000000000000000169063d4b93dbe9060440160206040518083038186803b15801561237257600080fd5b505afa158015612386573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123aa9190612ab4565b6123b49190612c13565b6123be9190612b05565b90506123cd81620186a0612aed565b6123da620186a085612c13565b610de79190612b05565b6040517f7ca87cb60000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301528381166024830152604482018390526000917f000000000000000000000000000000000000000000000000000000000000000090911690637ca87cb69060640160206040518083038186803b15801561247257600080fd5b505afa158015612486573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124aa9190612ab4565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633d1aa9637f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e9cbd8226040518163ffffffff1660e01b815260040160206040518083038186803b15801561253457600080fd5b505afa158015612548573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061256c9190612984565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b039182166004820152908616602482015260448101849052606401600060405180830381600087803b1580156125d457600080fd5b505af11580156125e8573d6000803e3d6000fd5b50506040517f1da649cf0000000000000000000000000000000000000000000000000000000081526001600160a01b038781166004830152868116602483015260448201869052600093507f0000000000000000000000000000000000000000000000000000000000000000169150631da649cf90606401602060405180830381600087803b15801561267a57600080fd5b505af115801561268e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126b29190612ab4565b905080612756576040517f62b40f9f0000000000000000000000000000000000000000000000000000000081526001600160a01b03868116600483015285811660248301527f000000000000000000000000000000000000000000000000000000000000000016906362b40f9f90604401600060405180830381600087803b15801561273d57600080fd5b505af1158015612751573d6000803e3d6000fd5b505050505b5050505050565b60006127698383610b6f565b6040517fb85c44960000000000000000000000000000000000000000000000000000000081526001600160a01b038581166004830152919250600091606491600160701b917f0000000000000000000000000000000000000000000000000000000000000000169063b85c44969060240160206040518083038186803b1580156127f257600080fd5b505afa158015612806573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061282a9190612ab4565b6128349085612c13565b61283e9190612b05565b6128489190612b05565b60405163d6446d4360e01b81526001600160a01b038681166004830152858116602483015291925082917f0000000000000000000000000000000000000000000000000000000000000000169063d6446d439060440160206040518083038186803b1580156128b657600080fd5b505afa1580156128ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128ee9190612ab4565b11156129625760405162461bcd60e51b815260206004820152602260248201527f556e69742050726f746f636f6c3a20554e444552434f4c4c41544552414c495a60448201527f454400000000000000000000000000000000000000000000000000000000000060648201526084016101f9565b50505050565b600060208284031215612979578081fd5b8135610deb81612c82565b600060208284031215612995578081fd5b8151610deb81612c82565b600080604083850312156129b2578081fd5b82356129bd81612c82565b915060208301356129cd81612c82565b809150509250929050565b600080604083850312156129ea578182fd5b82356129f581612c82565b946020939093013593505050565b600080600060608486031215612a17578081fd5b8335612a2281612c82565b95602085013595506040909401359392505050565b600080600080600080600080610100898b031215612a53578384fd5b8835612a5e81612c82565b9a60208a01359a5060408a013599606081013599506080810135985060a0810135975060c0810135965060e00135945092505050565b600060208284031215612aa5578081fd5b81518015158114610deb578182fd5b600060208284031215612ac5578081fd5b5051919050565b600060208284031215612add578081fd5b815160ff81168114610deb578182fd5b60008219821115612b0057612b00612c6c565b500190565b600082612b2057634e487b7160e01b81526012600452602481fd5b500490565b600181815b80851115612b60578160001904821115612b4657612b46612c6c565b80851615612b5357918102915b93841c9390800290612b2a565b509250929050565b6000610deb60ff841683600082612b81575060016109ce565b81612b8e575060006109ce565b8160018114612ba45760028114612bae57612bca565b60019150506109ce565b60ff841115612bbf57612bbf612c6c565b50506001821b6109ce565b5060208310610133831016604e8410600b8410161715612bed575081810a6109ce565b612bf78383612b25565b8060001904821115612c0b57612c0b612c6c565b029392505050565b6000816000190483118215151615612c2d57612c2d612c6c565b500290565b600082821015612c4457612c44612c6c565b500390565b600060ff821660ff841680821015612c6357612c63612c6c565b90039392505050565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0381168114612c9757600080fd5b5056fea2646970667358221220a24b69c08edb415a65591c12b9a804a7eae28e0832de65f52070cd9d6e1a316764736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "setDevaluationPeriod(address,uint256)": {
        "details": "Sets the devaluation period of collateral after liquidation",
        "params": {
          "asset": "The address of the main collateral token",
          "newValue": "The devaluation period in blocks*"
        }
      },
      "setInitialCollateralRatio(address,uint256)": {
        "details": "Sets the initial collateral ratio",
        "params": {
          "asset": "The address of the main collateral token",
          "newValue": "The collateralization ratio (0 decimals)*"
        }
      },
      "setLiquidationDiscount(address,uint256)": {
        "details": "Sets the liquidation discount",
        "params": {
          "asset": "The address of the main collateral token",
          "newValue": "The liquidation discount (3 decimals)*"
        }
      },
      "setLiquidationRatio(address,uint256)": {
        "details": "Sets the liquidation ratio",
        "params": {
          "asset": "The address of the main collateral token",
          "newValue": "The liquidation ratio (0 decimals)*"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "Q112()": {
        "notice": "float standard https://en.wikipedia.org/wiki/Q_(number_format)"
      },
      "exit_targetRepayment(address,uint256,uint256)": {
        "notice": "UX convenience function"
      },
      "join(address,uint256,uint256)": {
        "notice": "Yes,"
      },
      "setDevaluationPeriod(address,uint256)": {
        "notice": "Only manager is able to call this function"
      },
      "setInitialCollateralRatio(address,uint256)": {
        "notice": "Only manager is able to call this function"
      },
      "setLiquidationDiscount(address,uint256)": {
        "notice": "Only manager is able to call this function"
      },
      "setLiquidationRatio(address,uint256)": {
        "notice": "Only manager is able to call this function"
      }
    },
    "notice": "not sure why",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 543,
        "contract": "contracts/lending/SuManager.sol:SuManager",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 5911,
        "contract": "contracts/lending/SuManager.sol:SuManager",
        "label": "initialCollateralRatio",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5915,
        "contract": "contracts/lending/SuManager.sol:SuManager",
        "label": "liquidationRatio",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5919,
        "contract": "contracts/lending/SuManager.sol:SuManager",
        "label": "liquidationDiscount",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5923,
        "contract": "contracts/lending/SuManager.sol:SuManager",
        "label": "devaluationPeriod",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5926,
        "contract": "contracts/lending/SuManager.sol:SuManager",
        "label": "vaultParameters",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(SuVaultParameters)7180"
      },
      {
        "astId": 5094,
        "contract": "contracts/lending/SuManager.sol:SuManager",
        "label": "suOracle",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(SuVaultParameters)7180": {
        "encoding": "inplace",
        "label": "contract SuVaultParameters",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}