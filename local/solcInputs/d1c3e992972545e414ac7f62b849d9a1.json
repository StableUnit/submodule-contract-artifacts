{
  "language": "Solidity",
  "sources": {
    "contracts/access-control/SuAccessControlSingleton.sol": {
      "content": "// SPDX-License-Identifier: BSL 1.1\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"./SuAuthenticated.sol\";\n\npragma solidity ^0.8.0;\n\n/**\n * @title SuAccessControl\n * @dev Access control for contracts. SuVaultParameters can be inherited from it.\n */\n// TODO: refactor by https://en.wikipedia.org/wiki/Principle_of_least_privilege\ncontract SuAccessControlSingleton is AccessControl, SuAuthenticated {\n    /**\n     * @dev Initialize the contract with initial owner to be deployer\n     */\n    constructor() SuAuthenticated(address(this)) {\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n\n    /**\n    * @dev Transfers ownership of the contract to a new account (`newOwner`).\n    * Can only be called by the current owner.\n    */\n    function transferOwnership(address newOwner) external {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \"Ownable: caller is not the owner\");\n\n        if (hasRole(MINTER_ROLE, msg.sender)) {\n            grantRole(MINTER_ROLE, newOwner);\n            revokeRole(MINTER_ROLE, msg.sender);\n        }\n\n        if (hasRole(VAULT_ACCESS_ROLE, msg.sender)) {\n            grantRole(VAULT_ACCESS_ROLE, newOwner);\n            revokeRole(VAULT_ACCESS_ROLE, msg.sender);\n        }\n\n        grantRole(DEFAULT_ADMIN_ROLE, newOwner);\n        revokeRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "contracts/access-control/SuAuthenticated.sol": {
      "content": "// SPDX-License-Identifier: BSL 1.1\n\npragma solidity >=0.7.6;\n\nimport \"../interfaces/ISuAccessControl.sol\";\n\n/**\n * @title SuAuthenticated\n * @dev other contracts should inherit to be authenticated\n */\nabstract contract SuAuthenticated {\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    bytes32 public constant VAULT_ACCESS_ROLE = keccak256(\"VAULT_ACCESS_ROLE\");\n    bytes32 private constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /// @dev the address of SuAccessControlSingleton - it should be one for all contract that inherits SuAuthenticated\n    ISuAccessControl public immutable ACCESS_CONTROL_SINGLETON;\n\n    /// @dev should be passed in constructor\n    constructor(address _accessControlSingleton) {\n        ACCESS_CONTROL_SINGLETON = ISuAccessControl(_accessControlSingleton);\n        // TODO: check that _accessControlSingleton points to ISuAccessControl instance\n        // require(ISuAccessControl(_accessControlSingleton).supportsInterface(ISuAccessControl.hasRole.selector), \"bad dependency\");\n    }\n\n    /// @dev check DEFAULT_ADMIN_ROLE\n    modifier onlyOwner() {\n        require(ACCESS_CONTROL_SINGLETON.hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \"SuAuth: onlyOwner AUTH_FAILED\");\n        _;\n    }\n\n    /// @dev check VAULT_ACCESS_ROLE\n    modifier onlyVaultAccess() {\n        require(ACCESS_CONTROL_SINGLETON.hasRole(VAULT_ACCESS_ROLE, msg.sender), \"SuAuth: onlyVaultAccess AUTH_FAILED\");\n        _;\n    }\n\n    /// @dev check MINTER_ROLE\n    modifier onlyMinter() {\n        require(ACCESS_CONTROL_SINGLETON.hasRole(MINTER_ROLE, msg.sender), \"SuAuth: onlyMinter AUTH_FAILED\");\n        _;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/ISuAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface ISuAccessControl {\n    function hasRole(bytes32 role, address account) external view returns (bool);\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n    function grantRole(bytes32 role, address account) external;\n    function revokeRole(bytes32 role, address account) external;\n    function renounceRole(bytes32 role, address account) external;\n\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n\n    // TODO: remove legacy functionality\n    function setVault(address _vault, bool _isVault) external;\n    function setCdpManager(address _cdpManager, bool _isCdpManager) external;\n    function setDAO(address _dao, bool _isDAO) external;\n    function setManagerParameters(address _address, bool _permit) external;\n    function transferOwnership(address newOwner) external;\n}\n"
    },
    "contracts/oracles/SuOracleAggregator.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.8.0 <0.9.0;\n\n/*\n    OracleAggregator\n        getUsdPrice asset -> id -> call to implementation\n    we have several oracle implementations of ISuOracle,\n    1) SuChainlinkOracle\n    2) SuKeydonixOracle\n    TODO: how would you make it work with keydonix (TWAT univ2)?\n*/\n\nimport \"../interfaces/ISuOracle.sol\";\nimport \"../access-control/SuAccessControlSingleton.sol\";\n\ncontract SuOracleAggregator is ISuOracle, SuAuthenticated {\n    mapping (address => uint256) public assetToOracle;\n    mapping (uint256 => ISuOracle) public oracleImplementations;\n\n    constructor(address _authControl) SuAuthenticated(_authControl) {\n    }\n\n    /**\n    * @notice returns price1e18(assert) such that:\n    *   [assetAmount * price1e18(assert) / 1e18 === $$ 1e18] == suUSD\n    *   examples:\n    *       market price of btc = $30k,\n    *       for 0.1 wBTC the unit256 amount is 0.1 * 1e18\n    *       0.1 * 1e18 * (price1e18 / 1e18) == $3000 == uint256(3000*1e18)\n    *       => price1e18 = 30000 * 1e18;\n\n    *       market price of usdt = $0.97,\n    *       for 1 usdt uint256 = 1 * 1e6\n    *       so 1*1e6 * price1e18 / 1e18 == $0.97 == uint256(0.97*1e18)\n    *       => 1*1e6 * (price1e18 / 1e18) / (0.97*1e18)   = 1\n    *       =>  price1e18 = 0.97 * (1e18/1e6) * 1e18\n    * @param asset of erc20 token\n    * @return price1e18 such as asset.balanceOf() * price1e18 / 1e18 == $$ 1e18\n    **/\n    function getUsdPrice1e18(address asset) override view external returns (uint256) {\n        uint256 oracleId = assetToOracle[asset];\n        require(oracleId != 0, \"No oracle for the asset\");\n        ISuOracle oracleImplementation = oracleImplementations[oracleId];\n        require(address(oracleImplementation) != address(0), \"No oracle implementation\" );\n        return oracleImplementation.getUsdPrice1e18(asset);\n    }\n\n    /**\n    * @notice assign address of oracle implementation to the oracleId\n    * @param oracleId - number 0,1, etc to assign the oracle\n    * @param oracleImplementation - an address with ISuOracle implementation contract\n    **/\n    function setOracleImplementation(uint256 oracleId, ISuOracle oracleImplementation) external onlyOwner {\n        require(oracleId != 0, \"OracleId == 0\");\n        require(address(oracleImplementation) != address(0), \"OracleImplementation == 0\");\n        oracleImplementations[oracleId] = oracleImplementation;\n    }\n\n    /**\n    * @notice specify what oracleId should be used for each assets. Checks that oracleId has an implementation\n    **/\n    function setOracleIdForAssets(address[] memory assets, uint256 oracleId) external onlyOwner {\n        require(address(oracleImplementations[oracleId]) != address(0), \"OracleImplementation == 0\");\n        for (uint256 i = 0; i < assets.length; i++) {\n            assetToOracle[assets[i]] = oracleId;\n        }\n    }\n}\n"
    },
    "contracts/interfaces/ISuOracle.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.7.6;\n\ninterface ISuOracle {\n    /**\n     * @notice returns price1e18(assert) such that:\n     *   [assetAmount * price1e18(assert) / 1e18 === $$ 1e18] == suUSD\n     *   examples:\n     *       market price of btc = $30k,\n     *       for 0.1 wBTC the unit256 amount is 0.1 * 1e18\n     *       0.1 * 1e18 * (price1e18 / 1e18) == $3000 == uint256(3000*1e18)\n     *       => price1e18 = 30000 * 1e18;\n\n     *       market price of usdt = $0.97,\n     *       for 1 usdt uint256 = 1 * 1e6\n     *       so 1*1e6 * price1e18 / 1e18 == $0.97 == uint256(0.97*1e18)\n     *       => 1*1e6 * (price1e18 / 1e18) / (0.97*1e18)   = 1\n     *       =>  price1e18 = 0.97 * (1e18/1e6) * 1e18\n     * @param asset of erc20 token\n     * @return price1e18 such as asset.balanceOf() * price1e18 / 1e18 == $$ 1e18\n     **/\n    function getUsdPrice1e18(address asset) external view returns (uint256);\n}\n"
    },
    "contracts/mocks/MockAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../access-control/SuAccessControlSingleton.sol\";\nimport \"../access-control/SuAuthenticated.sol\";\n\ncontract MockAccessControl is SuAuthenticated, SuAccessControlSingleton {\n    constructor() SuAccessControlSingleton() {}\n}\n"
    },
    "contracts/lending/SuVaultParameters.sol": {
      "content": "// SPDX-License-Identifier: BSL 1.1\r\n\r\nimport \"../access-control/SuAccessControlSingleton.sol\";\r\nimport \"../access-control/SuAuthenticated.sol\";\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// VaultParameters is Singleton for Access Control\r\n// this looks like configuration contract\r\n// what are the rules to determine these configs for each new allowed collateral?\r\n/// yes, and for all collaterals\r\n// is DAO allowed to choose parameters for existing collaterals?\r\n///\r\n// are there any limits to be enforced? i.e. fee cannot be over 100% percent\r\n/// No, but it's a good idea to have it\r\nabstract contract SuVaultParameters is SuAuthenticated {\r\n    // stability fee can be different for each collateral\r\n    /// yes\r\n    mapping(address => uint) public protocolStabilityFee;\r\n\r\n    // liquidation fee too can be different\r\n    /// yes\r\n    mapping(address => uint) public protocolLiquidationFee;\r\n\r\n    // map token to USDP mint limit\r\n    /// yes, limit for each collateral-assert\r\n    mapping(address => uint) public tokenDebtLimit;\r\n\r\n    // whether an oracle is enabled\r\n    /// TODO:\r\n    mapping(uint => mapping(address => bool)) public isOracleTypeEnabled;\r\n\r\n    // what is foundation, DAO?\r\n    /// Beneficiaty as VotingEscrow.vy\r\n    address public foundation;\r\n\r\n    address public immutable vault;\r\n\r\n    // creator of contract is manager, can it be the same as DAO or can it be removed later?\r\n    /// YES\r\n    // how can vault address be known at this moment?\r\n    /// Precult based on CREATE spec\r\n    // can be created another function to set vault address once deployed?\r\n    /// Yes, possibly with some logic change\r\n    constructor(address _authControl, address payable _vault, address _foundation)\r\n        SuAuthenticated(_authControl)\r\n    {\r\n        require(_vault != address(0), \"Unit Protocol: ZERO_ADDRESS\");\r\n        require(_foundation != address(0), \"Unit Protocol: ZERO_ADDRESS\");\r\n\r\n        vault = _vault;\r\n\r\n//        ISuAccessControl(_authControl).setVault(_vault, true);\r\n//        ISuAccessControl(_authControl).setDAO(msg.sender, true);\r\n\r\n        foundation = _foundation;\r\n    }\r\n\r\n    // similar function can be added to setVault\r\n    function setFoundation(address newFoundation) external onlyOwner {\r\n        require(newFoundation != address(0), \"Unit Protocol: ZERO_ADDRESS\");\r\n        foundation = newFoundation;\r\n    }\r\n\r\n    // manager is allowed to add new collaterals and modify existing ones\r\n    // I think creating new collaterals and modifying existing ones should be separate functions\r\n    /// Yes, for sercurity reason, it's possible to add events for creating and edititing\r\n    // also different event should be emitted NewCollateral UpdatedCollateral accordingly\r\n    // those events can be handled on frontend to notify user about any changes in rules\r\n    /// Not sure it makes sense to split into create/edit functions\r\n    function setCollateral(\r\n        address asset,\r\n        uint stabilityFeeValue,\r\n        uint liquidationFeeValue,\r\n        uint stablecoinLimit\r\n    ) external onlyOwner {\r\n        // stability fee should be validated in range, what is stability fee should be described here?\r\n        setStabilityFee(asset, stabilityFeeValue);\r\n        // liquidation fee should be validated in range, what is liquidation fee should be explained?\r\n        setLiquidationFee(asset, liquidationFeeValue);\r\n        // why debt limit for collateral is necessary? to manage risks in case of collateral failure?\r\n        setTokenDebtLimit(asset, stablecoinLimit);\r\n    }\r\n\r\n    // stability fee is measured as the number of coins per year or percentage?\r\n    // this should be clarified in argument name i.e. stabilityFeePercentageYearly\r\n    /// No, it's APR ( per year, see calculateFee) percentrage, fee percentage; 3 decimals.\r\n    /// YES, self-documented code-style is the best practice.\r\n    function setStabilityFee(address asset, uint newValue) public onlyOwner {\r\n        protocolStabilityFee[asset] = newValue;\r\n    }\r\n\r\n    // the same with liquidation fee is not clear\r\n    /// % 0 decimals, needede to get better variable names\r\n    function setLiquidationFee(address asset, uint newValue) public onlyOwner {\r\n        require(newValue <= 100, \"Unit Protocol: VALUE_OUT_OF_RANGE\");\r\n        protocolLiquidationFee[asset] = newValue;\r\n    }\r\n\r\n    // what are allowed types? enum should be defined\r\n    // types out of range should fail transaction\r\n    /// All oracles implementation are numbered, so some of them support this particular asset\r\n    function setOracleType(uint _type, address asset, bool enabled) public onlyOwner {\r\n        isOracleTypeEnabled[_type][asset] = enabled;\r\n    }\r\n\r\n    // debt limit can be changed for any collateral along with liquidation and stability fees\r\n    // seems like managers have too much power - that can be dangerous given multiple managers?\r\n    /// Yes, application of  principle of least priviledge needed\r\n    function setTokenDebtLimit(address asset, uint limit) public onlyOwner {\r\n        tokenDebtLimit[asset] = limit;\r\n    }\r\n}\r\n"
    },
    "contracts/lending/SuVault.sol": {
      "content": "// SPDX-License-Identifier: BSL 1.1\n\n/*\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\n*/\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./SuVaultParameters.sol\";\nimport \"../SuUSD.sol\";\nimport \"../access-control/SuAccessControlSingleton.sol\";\n\ncontract SuVault is SuVaultParameters {\n    // 10^5 = 100000\n    uint public constant DENOMINATOR_1E5 = 1e5;\n\n    // token itself - will be unit stable coin\n    address public immutable stablecoin;\n\n    // which tokens are allowed as collateral; what's the int value - min threshold or rate?\n    /// No, it's how much user had stacked collaterael asset == collaterals[asset][user], i.e deposits\n    mapping(address => mapping(address => uint)) public collaterals;\n\n    // mapping of user address to integer value; which is the amount of debt represented by what?\n    /// Yes, in stablecoin amount, == debts[asset][user]\n    // or might be it mapping fro token address into total debt amount?\n    mapping(address => mapping(address => uint)) public debts;\n\n    // liquidation can be triggered by permissionless-action?\n    /// Yes\n    // then the process begins and we remember which block it started at\n    // is it indexed by collateral token address?\n    /// Yes ,  liquidationBlock[asset][user]\n    mapping(address => mapping(address => uint)) public liquidationBlock;\n\n    // mapping of collateral address to liquidation price;\n    // when and who decides on the collateral price, is that dynamic?\n    /// see line 287 triggerLiquidation: liquidationPrice[asset][positionOwner] = initialPrice;\n    mapping(address => mapping(address => uint)) public liquidationPrice;\n\n    // mapping of address to integer for token debts;\n    // what'is the units of measurement?\n    /// How much stablecoin was borrowed against particular asset == tokenDebts[asset]\n    mapping(address => uint) public tokenDebts;\n\n    // double mapping probably from collateral to each user to debt\n    // how is stability fee calculated and where is it paid and when?\n    /// current interest that user pay for stabilityFee[asset][user]\n    mapping(address => mapping(address => uint)) public stabilityFee;\n\n    // another similar mapping for another fee, how is liquidation fee different from stability fee?\n    // can we combine both mapping into single mapping to structure?\n    /// Penalty during liquidation\n    mapping(address => mapping(address => uint)) public liquidationFee;\n\n    // mapping for oracles; are there different oracle types? who is allowed to choose oracle?\n    // oracles are passive\n    /// ID of oracle contact for oracleType[asset][user]\n    mapping(address => mapping(address => uint)) public oracleType;\n\n    // mapping for timestamps;\n    // why do we need timestamps? how do we calculate medium price when merging positions?\n    /// everything before lastUpdates is already calced in the debt. all data such as fees are from lastUpdate only\n    mapping(address => mapping(address => uint)) public lastUpdate;\n\n    // check if liquidation process not started for asset of user\n    /// YES\n    modifier notLiquidating(address asset, address user) {\n        require(liquidationBlock[asset][user] == 0, \"Unit Protocol: LIQUIDATING_POSITION\");\n        _;\n    }\n\n    SuVaultParameters public immutable vaultParameters;\n\n    // vault is initialize with parameters for auth (we are using OZ instead)\n    // and it accept address for wrapped eth, main stable coin, and probably governance token\n    /// YES\n    constructor(address _authControl, address _stablecoin, address _foundation)\n        SuVaultParameters(_authControl, payable(this), _foundation) {\n        stablecoin = _stablecoin;\n        vaultParameters = SuVaultParameters(address(this));\n    }\n\n    // do not accept direct payments from users because they will be stuck on contract address\n    /// YES, does work for erc20\n    receive() external payable {\n        revert(\"Unit Protocol: RESTRICTED\");\n    }\n\n     // who does have vault access?\n     /// anyone from canModifyVault\n     // why position is not allowed to be modified during liquidation?\n     /// because when it's launched - liquidators want to be sure they can participate\n     // how often update can be triggered?\n     /// when user borrows more\n    function update(address asset, address user) public onlyVaultAccess notLiquidating(asset, user) {\n\n        // probably should be checked if zero then skip\n        ///\n        uint debtWithFee = getTotalDebt(asset, user);\n\n        // we decrease token debt by current debt and increase by new debt\n        // can we just set new value instead?\n        tokenDebts[asset] = tokenDebts[asset] - debts[asset][user] + debtWithFee;\n\n        // we set new debt for asset of user\n        debts[asset][user] = debtWithFee;\n\n        // we also set new fee\n        stabilityFee[asset][user] = vaultParameters.protocolStabilityFee(asset);\n\n        // we also set new fee\n        liquidationFee[asset][user] = vaultParameters.protocolLiquidationFee(asset);\n\n        // and update timestamp\n        lastUpdate[asset][user] = block.timestamp;\n    }\n\n     // spawn means to create new debt position for user\n     // it accepts collateral token address and user and chosen oracle type\n     // this function is not called by user but by special priviliged account?\n     /// yes, by CDP manager 01\n     // what are the options for oracle type?\n     /// all implementation are numbered\n    function spawn(address asset, address user) external onlyVaultAccess notLiquidating(asset, user) {\n\n        // why its being removed and which cases its not empty?\n        /// could be liquidationBlock[asset][user] = 0;\n        delete liquidationBlock[asset][user];\n    }\n\n    // does it help to restore gas fees? what's the purpose of cleanup?\n    /// Not clear for after London hardfork\n    // how do ensure its not being called unexpectedly? very dangerous function\n    /// only destroy debt info, exit -> _repay -> destroy if debt == 0\n    function destroy(address asset, address user) public onlyVaultAccess notLiquidating(asset, user) {\n        delete stabilityFee[asset][user];\n        delete oracleType[asset][user];\n        delete lastUpdate[asset][user];\n        delete liquidationFee[asset][user];\n    }\n\n     // collateral deposit\n    function deposit(address asset, address user, uint amount) external onlyVaultAccess notLiquidating(asset, user) {\n        SafeERC20.safeTransferFrom(IERC20(asset), user, address(this), amount);\n        collaterals[asset][user] = collaterals[asset][user] + amount;\n    }\n\n     // collateral withdraw\n     // why being called by privileged account and not by user?\n    function withdraw(address asset, address user, uint amount) external onlyVaultAccess notLiquidating(asset, user) {\n        SafeERC20.safeTransfer(IERC20(asset), user, amount);\n        collaterals[asset][user] = collaterals[asset][user] - amount;\n    }\n\n     // BORROW == takeUnit\n     /// yes, fro cdpManager01\n     // user expected previously to deposit collateral and then being able to take stablecoin\n     // but where do we check current user collateral and amount??\n     /// in CDPManager01\n     // can user create single position with multiple collaterals?\n     /// no, one debt for [asset][user]\n    function borrow(\n        address asset,\n        address user,\n        uint amount\n    )\n    external\n    onlyVaultAccess\n    notLiquidating(asset, user)\n    returns(uint)\n    {\n        // update debts and fees of user for collateral\n        /// I think better name is needed\n        update(asset, user);\n\n        // why we update it again after update already called?\n        /// because update doesn't use amount, only calc curr fees\n        debts[asset][user] = debts[asset][user] + amount;\n        tokenDebts[asset] = tokenDebts[asset] + amount;\n\n        // there is a limit of total debt for each collateral\n        // why that limit is needed?\n        /// because of risk profile\n        require(tokenDebts[asset] <= vaultParameters.tokenDebtLimit(asset), \"Unit Protocol: ASSET_DEBT_LIMIT\");\n\n        // here stablecoin is created for user\n        SuUSD(stablecoin).mint(user, amount);\n\n        // we return value of previous debt plus new debt\n        // how this can be accessed and used by client?\n        // should consider to emit events instead\n        return debts[asset][user];\n    }\n\n    // REPAY == giveUnit\n    /// return for the debt\n    function repay(\n        address asset,\n        address user,\n        uint amount\n    )\n    external\n    onlyVaultAccess\n    notLiquidating(asset, user)\n    returns(uint)\n    {\n        // current debt of user by given collateral\n        uint debt = debts[asset][user];\n\n        // is being decreased by chosen amount\n        debts[asset][user] = debt - amount;\n\n        // total debt by asset is being decreased too\n        // this value is used to limit total collateral allowed debt\n        tokenDebts[asset] = tokenDebts[asset] - amount;\n\n        // we burn stablecoin from user\n        // vault should have corresponding permission\n        SuUSD(stablecoin).burn(user, amount);\n\n        // after we burn stablecoin we need to take back collateral\n        // does that happen in another contract which calls this function?\n\n        return debts[asset][user];\n    }\n\n    // transfering chosen amount chosen asset from user to foundation address\n    // can foundation address be changed?\n    /// Yes, setFoundation.\n    // why its being transferred from user? instead should be from this vault\n    /// TODO: he doesn't have his vault with stablecoin\n    // why amount is chosen manually? should be always the same value as in fees mapping\n    /// this is just transfer function, manager calc fees\n    function chargeFee(address asset, address user, uint amount) external onlyVaultAccess notLiquidating(asset, user) {\n        if (amount != 0) {\n            SafeERC20.safeTransferFrom(IERC20(asset), user, vaultParameters.foundation(), amount);\n        }\n    }\n\n    // position liquidation being triggerred by another contract\n    // initial price is passed here but better it would be accessed from mapping directly\n    /// it's Vault so Manager does tells it what to do.\n    function triggerLiquidation(\n        address asset,\n        address positionOwner,\n        uint initialPrice\n    )\n    external\n    onlyVaultAccess\n    notLiquidating(asset, positionOwner)\n    {\n        // why debt recalculation is needed and which cases it can be outdated?\n        /// because function called from CDPManger01.triggerLiquidation which doesn't call update\n        debts[asset][positionOwner] = getTotalDebt(asset, positionOwner);\n\n        // remember when liquidation start and which price\n        liquidationBlock[asset][positionOwner] = block.number;\n        liquidationPrice[asset][positionOwner] = initialPrice;\n    }\n\n\n\n\n     // liquidation can happen after liquidator is chosen through auction\n     // and auction starts after liquidation starting process has triggered\n     /// YES\n     // liquidator accepts a deal to give minimum amount of stablecoin and receive all position collateral\n     /// NO,\n     // mainAsset is collateral\n     /// YES\n     // why col is needed? can be ignored\n     /// CORRECT\n     // what is repayment and what is penalty?\n     ///\n     // what happens if liquidator does not execute agreed transaction?\n     ///\n     // borrower should receive some part of stablecoin given by liquidator\n     /// POSSIBLY\n     // how is that portion calculated and where the rest goes?\n     /// YES, please see _liquidate at LiquidationAunction02\n     // will stablecoin paid by liquidator be burned immediately?\n     /// Yes\n     // how can cascading liquidation happen step by step?\n     /// please see https://ratiofinance.medium.com/ratio-risk-lesson-2-cascading-liquidations-e91e04050f47\n    function liquidate(\n        address asset,\n        address positionOwner,\n        uint mainAssetToLiquidator,\n        uint mainAssetToPositionOwner,\n        uint repayment,\n        uint penalty,\n        address liquidator\n    )\n        external\n        onlyVaultAccess\n    {\n        require(liquidationBlock[asset][positionOwner] != 0, \"Unit Protocol: NOT_TRIGGERED_LIQUIDATION\");\n\n        uint mainAssetInPosition = collaterals[asset][positionOwner];\n\n        uint mainAssetToFoundation = mainAssetInPosition - mainAssetToLiquidator - mainAssetToPositionOwner;\n\n        delete liquidationPrice[asset][positionOwner];\n        delete liquidationBlock[asset][positionOwner];\n        delete debts[asset][positionOwner];\n        delete collaterals[asset][positionOwner];\n\n        destroy(asset, positionOwner);\n\n        if (repayment > penalty) {\n            if (penalty != 0) {\n                SafeERC20.safeTransferFrom(IERC20(stablecoin), liquidator, vaultParameters.foundation(), penalty);\n            }\n            SuUSD(stablecoin).burn(liquidator, repayment - penalty);\n        } else {\n            if (repayment != 0) {\n                SafeERC20.safeTransferFrom(IERC20(stablecoin), liquidator, vaultParameters.foundation(), repayment);\n            }\n        }\n\n        if (mainAssetToLiquidator != 0) {\n            SafeERC20.safeTransfer(IERC20(asset), liquidator, mainAssetToLiquidator);\n        }\n\n        if (mainAssetToPositionOwner != 0) {\n            SafeERC20.safeTransfer(IERC20(asset), positionOwner, mainAssetToPositionOwner);\n        }\n\n        if (mainAssetToFoundation != 0) {\n            SafeERC20.safeTransfer(IERC20(asset), vaultParameters.foundation(), mainAssetToFoundation);\n        }\n    }\n\n    // oracle type can be changed manager, under which conditions?\n    /// any time\n    function changeOracleType(address asset, address user, uint newOracleType) external onlyOwner {\n        oracleType[asset][user] = newOracleType;\n    }\n\n    // total dept is calculated as current debt with added calculated fee\n    /// they don't use it in practice\n    function getTotalDebt(address asset, address user) public view returns (uint) {\n        uint debt = debts[asset][user];\n        if (liquidationBlock[asset][user] != 0) return debt;\n        uint fee = calculateFee(asset, user, debt);\n        return debt + fee;\n    }\n\n     // fee is increased with time and\n     /// YES\n     // decreased when partial repayment is made\n     /// No, any call of vault.update would calc fee in debt and restart fee timer\n    function calculateFee(address asset, address user, uint amount) public view returns (uint) {\n        uint sFeePercent = stabilityFee[asset][user];\n        uint timePast = block.timestamp - lastUpdate[asset][user];\n\n        return amount * sFeePercent * timePast / (365 days) / DENOMINATOR_1E5;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/SuUSD.sol": {
      "content": "// SPDX-License-Identifier: BSL 1.1\n\n/*\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\n*/\npragma solidity ^0.8.0;\n\nimport \"./access-control/SuAccessControlSingleton.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract SuUSD is ERC20, SuAuthenticated {\n    constructor(address _authControl) ERC20(\"StableUnit USD\", \"SuUSD\") SuAuthenticated(_authControl) {}\n\n    /**\n      * @notice Only Vault can mint SuUSD\n      * @dev Mints 'amount' of tokens to address 'to', and MUST fire the\n      * Transfer event\n      * @param to The address of the recipient\n      * @param amount The amount of token to be minted\n     **/\n\n     // dollars can be minted by vault (once user deposited collateral)\n    function mint(address to, uint256 amount) external onlyMinter {\n        _mint(to, amount);\n    }\n\n    // dollars can be burned by manager but only his own dollars\n    // which managers will be using this feature? burning protocol fees?\n    function burn(uint256 amount) external onlyOwner {\n        _burn(msg.sender, amount);\n    }\n\n     // also vault is allowed to burn dollars of any account\n     // when user repays his loan and takes back his collateral\n    function burn(address from, uint256 amount) external onlyMinter {\n        _burn(from, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = _allowances[owner][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        _spendAllowance(account, _msgSender(), amount);\n        _burn(account, amount);\n    }\n}\n"
    },
    "contracts/mocks/MockUSDT.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n * USDT (Tether) implementation doesn't follow ERC standard and can be found here\n * https://etherscan.io/address/0xdac17f958d2ee523a2206206994597c13d831ec7#code\n * This is mock implementation for testing that resembles Tether interface\n * and helps to avoid situation where openzeppelin erc20 works on rinkeby but real USDT fails on mainnet\n */\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface TetherERC20Basic {\n    function totalSupply() external returns  (uint);\n    function balanceOf(address who) external returns (uint);\n    function transfer(address to, uint value) external;\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function allowance(address owner, address spender) external returns (uint);\n    function transferFrom(address from, address to, uint value) external;\n    function approve(address spender, uint value) external;\n    event Approval(address indexed owner, address indexed spender, uint value);\n}\n\n\n/**\n     fork of openzeppelin v4 ERC20 with custom decimals\n**/\ncontract TetherERC20 is Context, TetherERC20Basic {\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 immutable private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The defaut value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_, uint8 decimals_) {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overloaded;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override {\n        _transfer(_msgSender(), recipient, amount);\n//        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override {\n        _approve(_msgSender(), spender, amount);\n//        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override  {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        _approve(sender, _msgSender(), currentAllowance - amount);\n\n//        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[sender] = senderBalance - amount;\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        _balances[account] = accountBalance - amount;\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n\n\n\n\ncontract MockUSDT is TetherERC20 {\n    constructor() TetherERC20(\"tTether\", \"tUSDT\", 6) {}\n\n    function mint(address _to, uint256 _amount) public {\n        _mint(_to, _amount);\n    }\n}\n"
    },
    "contracts/mocks/MockWBTC.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\n\ncontract MockWBTC is ERC20 {\n    constructor() ERC20(\"test Wrapped Bitcoin\", \"tWBTC\") {}\n\n    function mint(address _to, uint256 _amount) public {\n        _mint(_to, _amount);\n    }\n}\n"
    },
    "contracts/mocks/MockOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"../interfaces/ISuOracle.sol\";\n\ncontract MockOracle is ISuOracle, Ownable {\n    constructor() {\n    }\n\n    mapping (address => uint256) assets;\n\n    function getUsdPrice1e18(address asset) override external view returns (uint) {\n        return assets[asset] * 10**18;\n    }\n\n    function setPrice(address asset, uint256 price) public onlyOwner {\n        assets[asset] = price;\n    }\n}"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/oracles/SuChainlinkOracle.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"../interfaces/ISuOracle.sol\";\nimport \"../access-control/SuAccessControlSingleton.sol\";\n\ncontract SuChainlinkOracle is ISuOracle, SuAuthenticated {\n    mapping (address => address) public assetToFeed;\n    mapping (address => uint8) public assetToDecimals;\n\n    constructor(address _authControl) SuAuthenticated(_authControl) {\n    }\n\n    function setAssetFeed(address _collateral, address _feed, uint8 _decimals) external onlyOwner {\n        assetToFeed[_collateral] = _feed;\n        assetToDecimals[_collateral] = _decimals;\n    }\n\n    function getUsdPrice1e18(address asset) public override view returns (uint) {\n        address feed = assetToFeed[asset];\n        uint8 decimals = assetToDecimals[asset];\n\n        (\n            /*uint80 roundID*/,\n            int256 answer,\n            /*uint256 startedAt*/,\n            /*uint256 updatedAt*/,\n            /*uint80 answeredInRound*/\n        ) = AggregatorV3Interface(feed).latestRoundData();\n\n        int256 price = scalePrice(answer, decimals, 18);\n\n        return uint(price);\n    }\n\n    function scalePrice(int256 _price, uint8 _priceDecimals, uint8 _decimals)\n        internal\n        pure\n        returns (int256)\n    {\n        if (_priceDecimals < _decimals) {\n            return _price * int256(10 ** uint256(_decimals - _priceDecimals));\n        } else if (_priceDecimals > _decimals) {\n            return _price / int256(10 ** uint256(_priceDecimals - _decimals));\n        }\n        return _price;\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/mocks/MockV3Aggregator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\n// FluxAggregator\n// AggregatorV2V3Interface\ncontract MockV3Aggregator is AggregatorV3Interface {\n  uint256 override constant public version = 0;\n\n  uint8 override public decimals;\n  int256 public latestAnswer;\n  uint256 public latestTimestamp;\n  uint256 public latestRound;\n\n  mapping(uint256 => int256) public getAnswer;\n  mapping(uint256 => uint256) public getTimestamp;\n  mapping(uint256 => uint256) private getStartedAt;\n\n  constructor(\n    uint8 _decimals,\n    int256 _initialAnswer\n  ) {\n    decimals = _decimals;\n    updateAnswer(_initialAnswer);\n  }\n\n  function updateAnswer(\n    int256 _answer\n  ) public {\n    latestAnswer = _answer;\n    latestTimestamp = block.timestamp;\n    latestRound++;\n    getAnswer[latestRound] = _answer;\n    getTimestamp[latestRound] = block.timestamp;\n    getStartedAt[latestRound] = block.timestamp;\n  }\n\n  function updateRoundData(\n    uint80 _roundId,\n    int256 _answer,\n    uint256 _timestamp,\n    uint256 _startedAt\n  ) public {\n    latestRound = _roundId;\n    latestAnswer = _answer;\n    latestTimestamp = _timestamp;\n    getAnswer[latestRound] = _answer;\n    getTimestamp[latestRound] = _timestamp;\n    getStartedAt[latestRound] = _startedAt;\n  }\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    override\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    )\n  {\n    return (\n      _roundId,\n      getAnswer[_roundId],\n      getStartedAt[_roundId],\n      getTimestamp[_roundId],\n      _roundId\n    );\n  }\n\n  function latestRoundData()\n    external\n    view\n    override\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    )\n  {\n    return (\n      uint80(latestRound),\n      getAnswer[latestRound],\n      getStartedAt[latestRound],\n      getTimestamp[latestRound],\n      uint80(latestRound)\n    );\n  }\n\n  function description()\n    external\n    pure\n    override\n    returns (string memory)\n  {\n    return \"\";\n  }  \n}"
    },
    "contracts/lending/SuManager.sol": {
      "content": "// SPDX-License-Identifier: BSL 1.1\n\n/*\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\n*/\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\nimport \"../interfaces/ISuOracle.sol\";\nimport \"../interfaces/ISuVault.sol\";\nimport \"../interfaces/ISuCdpRegistry.sol\";\nimport \"../interfaces/ISuManagerParameters.sol\";\nimport \"../interfaces/ISuVaultParameters.sol\";\nimport \"./SuManagerParameters.sol\";\n\n// finally found the managers mighty over the vault\n// user does only interact with manager as proxy to the wallet\n/// Yes\n// there is only one manager for vault each moment\n/// I'm sure, the code doesn't enforce this, could be multiple managers\n// suggest to maintain only address of active manager instead of managers list\n/// not sure why\ncontract SuManager is ReentrancyGuard, SuManagerParameters {\n    ISuVault public immutable vault;\n    ISuManagerParameters public immutable managerParameters;\n    ISuCdpRegistry public immutable cdpRegistry;\n\n    address public suOracle;\n\n    // 2^112 - what is meaning of 112?\n    ///  float standard https://en.wikipedia.org/wiki/Q_(number_format)\n    uint public constant Q112 = 2 ** 112;\n\n    // 10^5 = 10000\n    uint public constant DENOMINATOR_1E5 = 1e5;\n\n    // even triggered when user deposit collateral\n    event Join(address indexed asset, address indexed owner, uint main, uint stablecoin);\n\n    // event triggered when user withdraws collateral\n    event Exit(address indexed asset, address indexed owner, uint main, uint stablecoin);\n\n    // event triggered when user didnt withdraw collateral before price goes down\n    event LiquidationTriggered(address indexed asset, address indexed owner);\n\n    modifier checkpoint(address asset, address owner) {\n        _;\n        cdpRegistry.checkpoint(asset, owner);\n    }\n\n     // aggregation over composition\n    constructor(address _vault, address _suOracle, address _cdpRegistry)\n        SuManagerParameters(_vault)\n    {\n        address _managerParameters = address (this);\n        require(\n            _managerParameters != address(0) &&\n            _cdpRegistry != address(0),\n                \"Unit Protocol: INVALID_ARGS\"\n        );\n\n        require(_suOracle != address(0), \"INVALID_ARGS: SU_ORACLE\");\n\n        // require(ISuVaultManagerParameters(_managerParameters).vaultParameters() != address(0), \"INVALID_ARGS: VAULT_PARAMETERS\");\n\n        // require(ISuVaultParameters(ISuVaultManagerParameters(_managerParameters).vaultParameters()).vault() != address(0), \"INVALID_ARGS: VAULT\");\n\n        // require(ISuVault(ISuVaultParameters(ISuVaultManagerParameters(_managerParameters).vaultParameters()).vault()).weth() != address(0), \"INVALID_ARGS: VAULT_MANAGER\");\n\n        suOracle = _suOracle;\n\n        managerParameters = ISuManagerParameters(_managerParameters);\n\n//        vault = ISuVault(ISuVaultParameters(ISuVaultManagerParameters(_managerParameters).vaultParameters()).vault());\n        vault = ISuVault(_vault);\n\n        cdpRegistry = ISuCdpRegistry(_cdpRegistry);\n    }\n\n    // wrapper ether only, no native\n    receive() external payable {\n        revert(\"Unit Protocol: RESTRICTED\");\n    }\n\n      // why checkpoint is needed? to check if depositing collateral allowed for user?\n      // this function is called by user to deposit collateral and receive stablecoin\n      // before calling this function user has to approve the Vault to take his collateral\n      /// Yes,\n    function join(address asset, uint assetAmount, uint stablecoinAmount) public nonReentrant checkpoint(asset, msg.sender) {\n        require(stablecoinAmount != 0 || assetAmount != 0, \"Unit Protocol: USELESS_TX\");\n\n        require(IERC20Metadata(asset).decimals() <= 18, \"Unit Protocol: NOT_SUPPORTED_DECIMALS\");\n\n        if (stablecoinAmount == 0) {\n\n            // why user deposit collateral but does not take stablecoin?\n            // should be called in separate function\n            /// Use doesn't want to get liquidate, so stakes more collateral\n            vault.deposit(asset, msg.sender, assetAmount);\n\n        } else {\n            bool spawned = vault.debts(asset, msg.sender) != 0;\n\n            if (!spawned) {\n                // create a new debt position for user with current oracle\n                // why oracles are associated with user?\n                /// Historical reasons, now it's deprecated\n                // because oracle could have been changed since the position was created by user\n                // new positions will be spawned with new oracle but existing ones remain the same\n                // Doesn't matter, it's depreacted.\n                vault.spawn(asset, msg.sender);\n            }\n\n            if (assetAmount != 0) {\n                // deposit collateral to the wallet\n                vault.deposit(asset, msg.sender, assetAmount);\n            }\n\n            // issue stablecoin to the user\n            // why stablecoinAmount is chosen by user?\n            // it should be calculated from amount of collateral given\n            vault.borrow(asset, msg.sender, stablecoinAmount);\n\n            // maybe here we check that stablecoinAmount are corresponding to assetAmount?\n            // how does user know correct values? probably by calling helper view function\n            _ensurePositionCollateralization(asset, msg.sender);\n\n        }\n\n        emit Join(asset, msg.sender, assetAmount, stablecoinAmount);\n    }\n\n      // user can pay back the stablecoin and take his collateral\n      // instead of passing both assetAmount and stablecoinAmount\n      // better user just to pass one of them\n      // also pass preferred rate and maybe acceptable diff percent\n      // that's the purpose of passing both to protect user from rate fluctuations\n    function exit(address asset, uint assetAmount, uint stablecoinAmount) public nonReentrant checkpoint(asset, msg.sender) returns (uint) {\n\n        // what the case when stablecoinAmount allowed to be zero?\n        require(assetAmount != 0 || stablecoinAmount != 0, \"Unit Protocol: USELESS_TX\");\n\n        uint debt = vault.debts(asset, msg.sender);\n\n        // not to pay more stablecoin than debt\n        if (stablecoinAmount > debt) { stablecoinAmount = debt; }\n\n        if (assetAmount == 0) {\n            // why pay stablecoin but not withdrawing collateral?\n            /// To stop pay interest but have ability to loan in the future\n            _repay(asset, msg.sender, stablecoinAmount);\n        } else {\n            // pay full debt in stablecoin\n            if (debt == stablecoinAmount) {\n                // vault will transfer collateral to the user\n                vault.withdraw(asset, msg.sender, assetAmount);\n                if (stablecoinAmount != 0) {\n                    // how could it be zero? then debt is zero too\n                    /// Yes, if you returned debt in other tx but now want to take your collateral\n                    _repay(asset, msg.sender, stablecoinAmount);\n                }\n            } else {\n                // pay partly\n                vault.withdraw(asset, msg.sender, assetAmount);\n\n                if (stablecoinAmount != 0) {\n                    _repay(asset, msg.sender, stablecoinAmount);\n                }\n\n                vault.update(asset, msg.sender);\n\n                // make sure partial repayment is valid\n                // but dont need to check this after full repayment?\n                /// Yes, because divizion by 0\n                _ensurePositionCollateralization(asset, msg.sender);\n            }\n        }\n\n        emit Exit(asset, msg.sender, assetAmount, stablecoinAmount);\n\n        return stablecoinAmount;\n    }\n\n      // alternatively it allowed to pass collateral amount and calculate stablecoin amount\n      // how does user calculate repayment value?\n      /// UX convenience function\n    function exit_targetRepayment(address asset, uint assetAmount, uint repayment) external returns (uint) {\n\n        uint stablecoinAmount = _calcPrincipal(asset, msg.sender, repayment);\n\n        return exit(asset, assetAmount, stablecoinAmount);\n    }\n\n    // decrease debt amount by burning repaid stablecoin\n    function _repay(address asset, address owner, uint stablecoinAmount) internal {\n        // calculate fee\n        uint fee = vault.calculateFee(asset, owner, stablecoinAmount);\n\n        // charge fee from the vault\n        vault.chargeFee(vault.stablecoin(), owner, fee);\n\n        // burn stablecoin from the vault\n        uint debtAfter = vault.repay(asset, owner, stablecoinAmount);\n        if (debtAfter == 0) {\n            vault.destroy(asset, owner);\n        }\n    }\n\n    // after partial repayment should be made sure its still collateralized enough\n    function _ensurePositionCollateralization(address asset, address owner) internal view {\n        // calculate value in usd from collateral position\n        uint usdValue_q112 = getCollateralUsdValue_q112(asset, owner);\n\n        // multiply value in usd to the collateral ratio, then divide by 2^112 and divide by 100\n        uint usdLimit = usdValue_q112 * managerParameters.initialCollateralRatio(asset) / Q112 / 100;\n\n        // make sure calculated allowed limit is higher than the actual debt\n        require(vault.getTotalDebt(asset, owner) <= usdLimit, \"Unit Protocol: UNDERCOLLATERALIZED\");\n    }\n\n    // anyone can trigger liquidation\n    // once position happen to be under collaterazied\n    function triggerLiquidation(address asset, address owner) external nonReentrant {\n\n\n        // calculate valut of collateral\n        uint usdValue_q112 = getCollateralUsdValue_q112(asset, owner);\n\n        // and check if it can be liquidated\n        require(_isLiquidatablePosition(asset, owner, usdValue_q112), \"Unit Protocol: SAFE_POSITION\");\n\n        // what are the factors discount percent depends upon?\n        uint liquidationDiscount_q112 = usdValue_q112 * managerParameters.liquidationDiscount(asset) / DENOMINATOR_1E5;\n\n        // liquidation price is collateral value minus liquidation discount\n        uint initialLiquidationPrice = (usdValue_q112 - liquidationDiscount_q112) / Q112;\n\n        // then vault will trigger liquidation and auction begins\n        vault.triggerLiquidation(asset, owner, initialLiquidationPrice);\n\n        emit LiquidationTriggered(asset, owner);\n    }\n\n    // * Now we return rate and calculate amount here\n    function getCollateralUsdValue_q112(address asset, address owner) public view returns (uint) {\n        uint256 assetAmount = vault.collaterals(asset, owner);\n\n        uint256 collateralValueUsd_1e18 = ISuOracle(suOracle).getUsdPrice1e18(asset) * assetAmount / 1e18;\n\n        uint256 collateralValueUsd_q112 = collateralValueUsd_1e18 * Q112;\n\n        return collateralValueUsd_q112;\n    }\n\n     // is position allowed to be liquidated\n    function _isLiquidatablePosition(\n        address asset,\n        address owner,\n        uint usdValue_q112\n    ) internal view returns (bool) {\n        // calculate current debt to be returned\n        uint debt = vault.getTotalDebt(asset, owner);\n\n        if (debt == 0) return false;\n\n        // make sure its not under collaterazied\n        // should liquidation ration always be higher than 1 or allowed lower?\n        return debt * 100 * Q112 / usdValue_q112 >= managerParameters.liquidationRatio(asset);\n    }\n\n     // view function to check if position is liquidatable\n    function isLiquidatablePosition(\n        address asset,\n        address owner\n    ) public view returns (bool) {\n        uint usdValue_q112 = getCollateralUsdValue_q112(asset, owner);\n\n        return _isLiquidatablePosition(asset, owner, usdValue_q112);\n    }\n\n     // view function to show utilization ratio\n     // the same function can be used inside of _isLiquidatablePosition\n    function utilizationRatio(\n        address asset,\n        address owner\n    ) public view returns (uint) {\n        uint debt = vault.getTotalDebt(asset, owner);\n        if (debt == 0) return 0;\n\n        uint usdValue_q112 = getCollateralUsdValue_q112(asset, owner);\n\n        return debt * 100 * Q112 / usdValue_q112;\n    }\n\n     // calculate liquidation price\n     // can be used inside of _isLiquidatablePosition\n    function liquidationPrice_q112(\n        address asset,\n        address owner\n    ) external view returns (uint) {\n\n        uint debt = vault.getTotalDebt(asset, owner);\n        if (debt == 0) return type(uint256).max;\n\n        uint collateralLiqPrice = debt * 100 * Q112 / (managerParameters.liquidationRatio(asset));\n\n        require(IERC20Metadata(asset).decimals() <= 18, \"Unit Protocol: NOT_SUPPORTED_DECIMALS\");\n\n        return collateralLiqPrice / vault.collaterals(asset, owner) / 10 ** (18 - IERC20Metadata(asset).decimals());\n    }\n\n    /// util function for UX convenience\n    function _calcPrincipal(address asset, address owner, uint repayment) internal view returns (uint) {\n        uint fee = vault.stabilityFee(asset, owner) * (block.timestamp - vault.lastUpdate(asset, owner)) / 365 days;\n        return repayment * DENOMINATOR_1E5 / (DENOMINATOR_1E5 + fee);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/interfaces/ISuVault.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\ninterface ISuVault {\n    function DENOMINATOR_1E5 (  ) external view returns ( uint256 );\n    function borrow ( address asset, address user, uint256 amount ) external returns ( uint256 );\n    function calculateFee ( address asset, address user, uint256 amount ) external view returns ( uint256 );\n    function changeOracleType ( address asset, address user, uint256 newOracleType ) external;\n    function chargeFee ( address asset, address user, uint256 amount ) external;\n    function collaterals ( address, address ) external view returns ( uint256 );\n    function debts ( address, address ) external view returns ( uint256 );\n    function deposit ( address asset, address user, uint256 amount ) external;\n    function destroy ( address asset, address user ) external;\n    function getTotalDebt ( address asset, address user ) external view returns ( uint256 );\n    function lastUpdate ( address, address ) external view returns ( uint256 );\n    function liquidate ( address asset, address positionOwner, uint256 mainAssetToLiquidator, uint256 mainAssetToPositionOwner, uint256 repayment, uint256 penalty, address liquidator ) external;\n    function liquidationBlock ( address, address ) external view returns ( uint256 );\n    function liquidationFee ( address, address ) external view returns ( uint256 );\n    function liquidationPrice ( address, address ) external view returns ( uint256 );\n    function oracleType ( address, address ) external view returns ( uint256 );\n    function repay ( address asset, address user, uint256 amount ) external returns ( uint256 );\n    function spawn ( address asset, address user ) external;\n    function stabilityFee ( address, address ) external view returns ( uint256 );\n    function tokenDebts ( address ) external view returns ( uint256 );\n    function triggerLiquidation ( address asset, address positionOwner, uint256 initialPrice ) external;\n    function update ( address asset, address user ) external;\n    function stablecoin (  ) external view returns ( address );\n    function vaultParameters (  ) external view returns ( address );\n    function withdraw ( address asset, address user, uint256 amount ) external;\n}\n"
    },
    "contracts/interfaces/ISuCdpRegistry.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\ninterface ISuCdpRegistry {\n\n    struct CDP {\n        address asset;\n        address owner;\n    }\n\n    function batchCheckpoint ( address[] calldata assets, address[] calldata owners ) external;\n    function batchCheckpointForAsset ( address asset, address[] calldata owners ) external;\n    function checkpoint ( address asset, address owner ) external;\n    function cr (  ) external view returns ( address );\n    function getAllCdps (  ) external view returns ( CDP[] memory r );\n    function getCdpsByCollateral ( address asset ) external view returns ( CDP[] memory cdps );\n    function getCdpsByOwner ( address owner ) external view returns ( CDP[] memory r );\n    function getCdpsCount (  ) external view returns ( uint256 totalCdpCount );\n    function getCdpsCountForCollateral ( address asset ) external view returns ( uint256 );\n    function isAlive ( address asset, address owner ) external view returns ( bool );\n    function isListed ( address asset, address owner ) external view returns ( bool );\n    function vault (  ) external view returns ( address );\n}\n"
    },
    "contracts/interfaces/ISuManagerParameters.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\ninterface ISuManagerParameters {\n    function devaluationPeriod ( address ) external view returns ( uint256 );\n    function initialCollateralRatio ( address ) external view returns ( uint256 );\n    function liquidationDiscount ( address ) external view returns ( uint256 );\n    function liquidationRatio ( address ) external view returns ( uint256 );\n    function setCollateral (\n        address asset,\n        uint256 stabilityFeeValue,\n        uint256 liquidationFeeValue,\n        uint256 initialCollateralRatioValue,\n        uint256 liquidationRatioValue,\n        uint256 liquidationDiscountValue,\n        uint256 devaluationPeriodValue,\n        uint256 stablecoinLimit\n    ) external;\n    function setDevaluationPeriod ( address asset, uint256 newValue ) external;\n    function setInitialCollateralRatio ( address asset, uint256 newValue ) external;\n    function setLiquidationDiscount ( address asset, uint256 newValue ) external;\n    function setLiquidationRatio ( address asset, uint256 newValue ) external;\n    function vaultParameters (  ) external view returns ( address );\n}\n"
    },
    "contracts/interfaces/ISuVaultParameters.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\ninterface ISuVaultParameters {\n    function canModifyVault ( address ) external view returns ( bool );\n    function foundation (  ) external view returns ( address );\n    function isManager ( address ) external view returns ( bool );\n    function isOracleTypeEnabled ( uint256, address ) external view returns ( bool );\n    function liquidationFee ( address ) external view returns ( uint256 );\n    function setCollateral ( address asset, uint256 stabilityFeeValue, uint256 liquidationFeeValue, uint256 stablecoinLimit, uint256[] calldata oracles ) external;\n    function setFoundation ( address newFoundation ) external;\n    function setLiquidationFee ( address asset, uint256 newValue ) external;\n    function setManager ( address who, bool permit ) external;\n    function setOracleType ( uint256 _type, address asset, bool enabled ) external;\n    function setStabilityFee ( address asset, uint256 newValue ) external;\n    function setTokenDebtLimit ( address asset, uint256 limit ) external;\n    function setVaultAccess ( address who, bool permit ) external;\n    function stabilityFee ( address ) external view returns ( uint256 );\n    function tokenDebtLimit ( address ) external view returns ( uint256 );\n    function vault (  ) external view returns ( address );\n    function vaultParameters (  ) external view returns ( address );\n}\n"
    },
    "contracts/lending/SuManagerParameters.sol": {
      "content": "// SPDX-License-Identifier: BSL 1.1\n\n/*\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\n*/\npragma solidity ^0.8.0;\n\nimport \"./SuVaultParameters.sol\";\nimport \"../access-control/SuAccessControlSingleton.sol\";\n\n/**\n * @title managerParameters\n **/\nabstract contract SuManagerParameters is SuAuthenticated {\n    // map token to initial collateralization ratio; 0 decimals\n    mapping(address => uint) public initialCollateralRatio;\n\n    // map token to liquidation ratio; 0 decimals\n    mapping(address => uint) public liquidationRatio;\n\n    // map token to liquidation discount; 3 decimals\n    mapping(address => uint) public liquidationDiscount;\n\n    // map token to devaluation period in blocks\n    mapping(address => uint) public devaluationPeriod;\n\n    SuVaultParameters public vaultParameters;\n\n    constructor(address _vaultParameters) SuAuthenticated(address(SuAuthenticated(_vaultParameters).ACCESS_CONTROL_SINGLETON())) {\n        vaultParameters = SuVaultParameters(_vaultParameters);\n    }\n\n    function setCollateral(\n        address asset,\n        uint stabilityFeeValue,\n        uint liquidationFeeValue,\n        uint initialCollateralRatioValue,\n        uint liquidationRatioValue,\n        uint liquidationDiscountValue,\n        uint devaluationPeriodValue,\n        uint stablecoinLimit\n    ) external onlyOwner {\n        vaultParameters.setCollateral(asset, stabilityFeeValue, liquidationFeeValue, stablecoinLimit);\n        setInitialCollateralRatio(asset, initialCollateralRatioValue);\n        setLiquidationRatio(asset, liquidationRatioValue);\n        setDevaluationPeriod(asset, devaluationPeriodValue);\n        setLiquidationDiscount(asset, liquidationDiscountValue);\n    }\n\n    /**\n     * @notice Only manager is able to call this function\n     * @dev Sets the initial collateral ratio\n     * @param asset The address of the main collateral token\n     * @param newValue The collateralization ratio (0 decimals)\n     **/\n    function setInitialCollateralRatio(address asset, uint newValue) public onlyOwner {\n        require(newValue != 0 && newValue <= 100, \"Unit Protocol: INCORRECT_COLLATERALIZATION_VALUE\");\n        initialCollateralRatio[asset] = newValue;\n    }\n\n    /**\n     * @notice Only manager is able to call this function\n     * @dev Sets the liquidation ratio\n     * @param asset The address of the main collateral token\n     * @param newValue The liquidation ratio (0 decimals)\n     **/\n    function setLiquidationRatio(address asset, uint newValue) public onlyOwner {\n        require(newValue != 0 && newValue >= initialCollateralRatio[asset], \"Unit Protocol: INCORRECT_COLLATERALIZATION_VALUE\");\n        liquidationRatio[asset] = newValue;\n    }\n\n    /**\n     * @notice Only manager is able to call this function\n     * @dev Sets the liquidation discount\n     * @param asset The address of the main collateral token\n     * @param newValue The liquidation discount (3 decimals)\n     **/\n    function setLiquidationDiscount(address asset, uint newValue) public onlyOwner {\n        require(newValue < 1e5, \"Unit Protocol: INCORRECT_DISCOUNT_VALUE\");\n        liquidationDiscount[asset] = newValue;\n    }\n\n    /**\n     * @notice Only manager is able to call this function\n     * @dev Sets the devaluation period of collateral after liquidation\n     * @param asset The address of the main collateral token\n     * @param newValue The devaluation period in blocks\n     **/\n    function setDevaluationPeriod(address asset, uint newValue) public onlyOwner {\n        require(newValue != 0, \"Unit Protocol: INCORRECT_DEVALUATION_VALUE\");\n        devaluationPeriod[asset] = newValue;\n    }\n}\n"
    },
    "contracts/lending/SuCdpRegistry.sol": {
      "content": "// SPDX-License-Identifier: BSL 1.1\r\n\r\n/*\r\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\r\n*/\r\npragma solidity ^0.8.0;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"../interfaces/ISuVault.sol\";\r\nimport \"../interfaces/ISuCollateralRegistry.sol\";\r\n\r\n// [deprecated]\r\n// This contract is needed to index all opened CDPs.\r\n// It can be removed if there's more gas-efficient way to do that, such as graphQL, NFT-lps or other methods\r\ncontract SuCdpRegistry {\r\n    // Collateral Debt Position\r\n    struct CDP {\r\n        address asset; // collateral token\r\n        address owner; // borrower account\r\n    }\r\n\r\n    // mapping from collateral token to list of borrowers?\r\n    mapping (address => address[]) cdpList;\r\n\r\n    // mapping from collateral token to borrower to the INDEX, index in the previous list?\r\n    mapping (address => mapping (address => uint)) cdpIndex;\r\n\r\n    // address of the vault contract\r\n    ISuVault public immutable vault;\r\n\r\n    // address of the collateral registry contract\r\n    ISuCollateralRegistry public immutable cr;\r\n\r\n    // event emitted when a new CDP is created\r\n    event Added(address indexed asset, address indexed owner);\r\n\r\n    // event emitted when a CDP is closed\r\n    event Removed(address indexed asset, address indexed owner);\r\n\r\n    // this contract is deployed after the vault and collateral registry\r\n    constructor (address _vault, address _collateralRegistry) {\r\n        require(_vault != address(0) && _collateralRegistry != address(0), \"Unit Protocol: ZERO_ADDRESS\");\r\n        vault = ISuVault(_vault);\r\n        cr = ISuCollateralRegistry(_collateralRegistry);\r\n    }\r\n\r\n    // anyone can create checkpoint?\r\n    function checkpoint(address asset, address owner) public {\r\n        require(asset != address(0) && owner != address(0), \"Unit Protocol: ZERO_ADDRESS\");\r\n\r\n        // only for listed assets\r\n        bool listed = isListed(asset, owner);\r\n\r\n        // only for alive assets\r\n        bool alive = isAlive(asset, owner);\r\n\r\n        if (alive && !listed) {\r\n            _addCdp(asset, owner);\r\n        } else if (listed && !alive) {\r\n            _removeCdp(asset, owner);\r\n        }\r\n    }\r\n\r\n    // checkpoint in loop\r\n    function batchCheckpointForAsset(address asset, address[] calldata owners) external {\r\n        for (uint i = 0; i < owners.length; i++) {\r\n            checkpoint(asset, owners[i]);\r\n        }\r\n    }\r\n\r\n    // multiple checkpoints for different collaterals\r\n    function batchCheckpoint(address[] calldata assets, address[] calldata owners) external {\r\n        require(assets.length == owners.length, \"Unit Protocol: ARGUMENTS_LENGTH_MISMATCH\");\r\n        for (uint i = 0; i < owners.length; i++) {\r\n            checkpoint(assets[i], owners[i]);\r\n        }\r\n    }\r\n\r\n    // alive means there are debts in the vault for this collateral of this borrower\r\n    function isAlive(address asset, address owner) public view returns (bool) {\r\n        return vault.debts(asset, owner) != 0;\r\n    }\r\n\r\n    // listed means there are created cdps in this contract for this collateral of this borrower\r\n    function isListed(address asset, address owner) public view returns (bool) {\r\n        if (cdpList[asset].length == 0) { return false; }\r\n        return cdpIndex[asset][owner] != 0 || cdpList[asset][0] == owner;\r\n    }\r\n\r\n    // internal function to perform removal of cdp from the list\r\n    function _removeCdp(address asset, address owner) internal {\r\n        // take the index by collateral and borrower\r\n        uint id = cdpIndex[asset][owner];\r\n\r\n        // then delete this index\r\n        delete cdpIndex[asset][owner];\r\n\r\n        // if the index is not the last one\r\n        uint lastId = cdpList[asset].length - 1;\r\n\r\n        // swap the last element with the element to be deleted\r\n        if (id != lastId) {\r\n            address lastOwner = cdpList[asset][lastId];\r\n            cdpList[asset][id] = lastOwner;\r\n            cdpIndex[asset][lastOwner] = id;\r\n        }\r\n\r\n        // delete the last element\r\n        cdpList[asset].pop();\r\n\r\n        // can we optimize this remove function by changing the structure?\r\n\r\n        emit Removed(asset, owner);\r\n    }\r\n\r\n    function _addCdp(address asset, address owner) internal {\r\n        // remember the index of the new element\r\n        cdpIndex[asset][owner] = cdpList[asset].length;\r\n\r\n        // add the new element to the end of the list\r\n        cdpList[asset].push(owner);\r\n\r\n        emit Added(asset, owner);\r\n    }\r\n\r\n    // read-only function to get the list of cdps for a given collateral\r\n    function getCdpsByCollateral(address asset) external view returns (CDP[] memory cdps) {\r\n        address[] memory owners = cdpList[asset];\r\n        cdps = new CDP[](owners.length);\r\n        for (uint i = 0; i < owners.length; i++) {\r\n            cdps[i] = CDP(asset, owners[i]);\r\n        }\r\n    }\r\n\r\n    // read-only function to get the list of all cdps by borrower\r\n    function getCdpsByOwner(address owner) external view returns (CDP[] memory r) {\r\n        address[] memory assets = cr.collaterals();\r\n        CDP[] memory cdps = new CDP[](assets.length);\r\n        uint actualCdpsCount;\r\n\r\n        for (uint i = 0; i < assets.length; i++) {\r\n            if (isListed(assets[i], owner)) {\r\n                cdps[actualCdpsCount++] = CDP(assets[i], owner);\r\n            }\r\n        }\r\n\r\n        r = new CDP[](actualCdpsCount);\r\n\r\n        for (uint i = 0; i < actualCdpsCount; i++) {\r\n            r[i] = cdps[i];\r\n        }\r\n\r\n    }\r\n\r\n    // read-only function to get the list of all cdps\r\n    function getAllCdps() external view returns (CDP[] memory r) {\r\n        uint totalCdpCount = getCdpsCount();\r\n\r\n        uint cdpCount;\r\n\r\n        r = new CDP[](totalCdpCount);\r\n\r\n        address[] memory assets = cr.collaterals();\r\n        for (uint i = 0; i < assets.length; i++) {\r\n            address[] memory owners = cdpList[assets[i]];\r\n            for (uint j = 0; j < owners.length; j++) {\r\n                r[cdpCount++] = CDP(assets[i], owners[j]);\r\n            }\r\n        }\r\n    }\r\n\r\n    // total number of cdps\r\n    function getCdpsCount() public view returns (uint totalCdpCount) {\r\n        address[] memory assets = cr.collaterals();\r\n        for (uint i = 0; i < assets.length; i++) {\r\n            totalCdpCount += cdpList[assets[i]].length;\r\n        }\r\n    }\r\n\r\n    // number of cdps for a given collateral\r\n    function getCdpsCountForCollateral(address asset) public view returns (uint) {\r\n        return cdpList[asset].length;\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/ISuCollateralRegistry.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\ninterface ISuCollateralRegistry {\n    function addCollateral ( address asset ) external;\n    function collateralId ( address ) external view returns ( uint256 );\n    function collaterals (  ) external view returns ( address[] memory );\n    function removeCollateral ( address asset ) external;\n    function vaultParameters (  ) external view returns ( address );\n    function isCollateral ( address asset ) external view returns ( bool );\n    function collateralList ( uint id ) external view returns ( address );\n    function collateralsCount (  ) external view returns ( uint );\n}\n"
    },
    "contracts/gain-erc20/GainErc20v1.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.8.0 <0.9.0;\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\n\n/**\n * This is fork on openzeppelin_v4 ERC20\n */\ninterface IGainable {\n    /**\n     * @dev Transfers amount of tokens from msg.sender and distributes it to all accounts\n     *      proportional to the account's balances.\n     *      No mints or burns happens, totalSupply remains unchanged.\n     * @param amount of tokens to be distributed\n     */\n    function distribute(uint256 amount) external;\n    event Distributed(uint256 amount, uint256 newMultiplicator1e18);\n}\n\n// TODO: check that changes with _preimageBalances work and don't break erc20 logic. Coverage should be 100%\n// TODO: finish code for distribute function and test against mint, burn, and all erc20 logic\n\ncontract GainErc20v1 is Context, IERC20, IGainable {\n    /**\n     * Instead of _balances mapping we use _preimageBalances and special multiplicator >= 1 that:\n     *      _balances[account] == _preimageBalances[account] * multiplicator\n     *      multiplicator is coded as fraction _multiplicator1e18 / 1e18\n     *  Original code with _balances preserved in // comments for clarity\n     */\n    // mapping (address => uint256) private _balances;\n    mapping (address => uint256) private _preimageBalances;\n    uint256 public _multiplicator1e18;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    function distribute(uint256 amount) external override {\n        // TODO: test this implementation\n        /**\n         *  because it's just re-distribution of existing tokens, total supply doesn't change\n         *  total values of recipients = totalSupply - amount\n         *  total values of recipients = sum(_preimageBalances of recipients) * multiplicator\n         *  after distribution, totalSupply = sum(_preimageBalances of recipients) * newMultiplicator\n         *  let s := sum(_preimageBalances of recipients)\n         *  totalSupply - amount = s * multiplicator && totalSupply = s * newMultiplicator\n         *  <=> totalSupply = s * multiplicator + amount = s * newMultiplicator\n         *  <=> s = (totalSupply - amount) / multiplicator && newMultiplicator = totalSupply / s\n         *\n         *  now, if multiplicator increased, totalSupply != sum(_preimageBalances of everyone) * newMultiplicator\n         *  so we have to decrease balanceOf(this) for this amount\n         *  however, this is not burn, since totalSupply shouldn't change\n         *  after that we can increase multiplicator\n         */\n        /// @dev  straightforward implementation\n        //\n        //        this.transferFrom(_msgSender(), address(this), amount);\n        //        uint256 s = (_totalSupply - amount) * 1e18 / _multiplicator1e18;\n        //        uint256 newMultiplicator1e18 = _totalSupply * 1e18 / s;\n        //        require(newMultiplicator1e18 > _multiplicator1e18);\n        //        uint256 thisBalance = _preimageBalances[address(this)] * _multiplicator1e18 / 1e18;\n        //        _preimageBalances[address(this)] = (thisBalance - amount) * 1e18 / _multiplicator1e18;\n        //        _multiplicator1e18 = newMultiplicator1e18;\n\n        /// @dev simplified implementation\n\n        this.transferFrom(_msgSender(), address(this), amount);\n\n        // same as this.balanceOf(address(this));\n        uint256 thisBalance = _preimageBalances[address(this)] * _multiplicator1e18 / 1e18;\n\n        // @dev for ACTION_CASE[3] with transfer that can lost some tokens:\n        // thisBalance =        19999999999999999999,\n        // amount =             20000000000000000000,\n        // _multiplicator1e18 = 1500000000000000000\n\n        // \"burn\" amount\n        _preimageBalances[address(this)] = (thisBalance - amount) * 1e18 / _multiplicator1e18;\n\n        // allocate the same amount via increasing multiplicator\n        uint256 newMultiplicator1e18 = _multiplicator1e18 * _totalSupply / (_totalSupply - amount);\n        _multiplicator1e18 = newMultiplicator1e18;\n\n        emit Distributed(amount, newMultiplicator1e18);\n    }\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The defaut value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n        _multiplicator1e18 = 1 * 1e18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overloaded;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        // return _balances[account];\n        return _preimageBalances[account] * _multiplicator1e18 / 1e18;\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(sender, spender, amount);\n        _transfer(sender, recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        // uint256 senderBalance = _balances[sender];\n        uint256 senderBalance = _preimageBalances[sender] * _multiplicator1e18 / 1e18;\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        // _balances[sender] = senderBalance - amount;\n        uint256 epsSender = (senderBalance - amount) - ((senderBalance - amount) * 1e18 / _multiplicator1e18) * _multiplicator1e18 / 1e18;\n        _preimageBalances[sender] = (senderBalance - amount) * 1e18 / _multiplicator1e18 + epsSender;\n\n        // _balances[recipient] += amount;\n        uint256 epsRecipient = amount - ((amount) * 1e18 / _multiplicator1e18) * _multiplicator1e18 / 1e18;\n        _preimageBalances[recipient] += (amount) * 1e18 / _multiplicator1e18 + epsRecipient;\n\n\n        emit Transfer(sender, recipient, amount);\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        // _balances[account] += amount;\n        _preimageBalances[account] += amount * 1e18 / _multiplicator1e18;\n\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        // uint256 accountBalance = _balances[account];\n        uint256 accountBalance = _preimageBalances[account] * _multiplicator1e18 / 1e18;\n\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        // _balances[account] = accountBalance - amount;\n        _preimageBalances[account] = (accountBalance - amount) * 1e18 / _multiplicator1e18;\n\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n * @dev Spend `amount` form the allowance of `owner` toward `spender`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "contracts/mocks/MockGainErc20v1.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"../gain-erc20/GainErc20v1.sol\";\n\ncontract MockGainErc20v1 is GainErc20v1 {\n    constructor(\n        string memory name,\n        string memory symbol,\n        address initialAccount,\n        uint256 initialBalance\n    ) payable GainErc20v1(name, symbol) {\n        _mint(initialAccount, initialBalance);\n    }\n\n    function mint(address account, uint256 amount) public {\n        _mint(account, amount);\n    }\n\n    function burn(address account, uint256 amount) public {\n        _burn(account, amount);\n    }\n\n    function transferInternal(\n        address from,\n        address to,\n        uint256 value\n    ) public {\n        _transfer(from, to, value);\n    }\n\n    function approveInternal(\n        address owner,\n        address spender,\n        uint256 value\n    ) public {\n        _approve(owner, spender, value);\n    }\n}\n"
    },
    "contracts/lending/SuCollateralRegistry.sol": {
      "content": "// SPDX-License-Identifier: BSL 1.1\r\n\r\n/*\r\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\r\n*/\r\npragma solidity ^0.8.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\nimport \"./SuVaultParameters.sol\";\r\nimport \"../access-control/SuAccessControlSingleton.sol\";\r\n\r\n// [deprecated]\r\n// contacts implements simple a enumeredSet of asset and used by CdpRegistry only\r\n// can be change to https://docs.openzeppelin.com/contracts/4.x/api/utils#EnumerableSet\r\ncontract SuCollateralRegistry is SuAuthenticated {\r\n\r\n    event CollateralAdded(address indexed asset);\r\n    event CollateralRemoved(address indexed asset);\r\n\r\n    // mapping of collateral to its index in collateralList\r\n    // it allowed to find collateral by address in the list without loop\r\n    mapping(address => uint) public collateralId;\r\n\r\n    address[] public collateralList;\r\n\r\n    // collateral registry is deployed after vaultParameters contract and it initializes list of collaterals\r\n    constructor(address _authControl, address[] memory assets) SuAuthenticated(_authControl) {\r\n        for (uint i = 0; i < assets.length; i++) {\r\n            require(!isCollateral(assets[i]), \"Unit Protocol: ALREADY_EXIST\");\r\n            collateralList.push(assets[i]);\r\n            collateralId[assets[i]] = i;\r\n            emit CollateralAdded(assets[i]);\r\n        }\r\n    }\r\n\r\n    // after deployment more collaterals can be added by managers\r\n    function addCollateral(address asset) public onlyOwner {\r\n        require(asset != address(0), \"Unit Protocol: ZERO_ADDRESS\");\r\n\r\n        require(!isCollateral(asset), \"Unit Protocol: ALREADY_EXIST\");\r\n\r\n        collateralId[asset] = collateralList.length;\r\n        collateralList.push(asset);\r\n\r\n        emit CollateralAdded(asset);\r\n    }\r\n\r\n    // as well collaterals can be removed\r\n    function removeCollateral(address asset) public onlyOwner {\r\n        require(asset != address(0), \"Unit Protocol: ZERO_ADDRESS\");\r\n\r\n        require(isCollateral(asset), \"Unit Protocol: DOES_NOT_EXIST\");\r\n\r\n        uint id = collateralId[asset];\r\n\r\n        delete collateralId[asset];\r\n\r\n        uint lastId = collateralList.length - 1;\r\n\r\n        if (id != lastId) {\r\n            address lastCollateral = collateralList[lastId];\r\n            collateralList[id] = lastCollateral;\r\n            collateralId[lastCollateral] = id;\r\n        }\r\n\r\n        collateralList.pop();\r\n\r\n        emit CollateralRemoved(asset);\r\n    }\r\n\r\n    // check whether asset is collateral\r\n    function isCollateral(address asset) public view returns(bool) {\r\n        if (collateralList.length == 0) { return false; }\r\n        return collateralId[asset] != 0 || collateralList[0] == asset;\r\n    }\r\n\r\n    // return all collateral assets\r\n    function collaterals() external view returns (address[] memory) {\r\n        return collateralList;\r\n    }\r\n\r\n    // return total number of collateral assets\r\n    function collateralsCount() external view returns (uint) {\r\n        return collateralList.length;\r\n    }\r\n}\r\n"
    },
    "@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport './pool/IUniswapV3PoolImmutables.sol';\nimport './pool/IUniswapV3PoolState.sol';\nimport './pool/IUniswapV3PoolDerivedState.sol';\nimport './pool/IUniswapV3PoolActions.sol';\nimport './pool/IUniswapV3PoolOwnerActions.sol';\nimport './pool/IUniswapV3PoolEvents.sol';\n\n/// @title The interface for a Uniswap V3 Pool\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\n/// to the ERC20 specification\n/// @dev The pool interface is broken up into many smaller pieces\ninterface IUniswapV3Pool is\n    IUniswapV3PoolImmutables,\n    IUniswapV3PoolState,\n    IUniswapV3PoolDerivedState,\n    IUniswapV3PoolActions,\n    IUniswapV3PoolOwnerActions,\n    IUniswapV3PoolEvents\n{\n\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that never changes\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\ninterface IUniswapV3PoolImmutables {\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\n    /// @return The contract address\n    function factory() external view returns (address);\n\n    /// @notice The first of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token0() external view returns (address);\n\n    /// @notice The second of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token1() external view returns (address);\n\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\n    /// @return The fee\n    function fee() external view returns (uint24);\n\n    /// @notice The pool tick spacing\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n    /// This value is an int24 to avoid casting even though it is always positive.\n    /// @return The tick spacing\n    function tickSpacing() external view returns (int24);\n\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n    /// @return The max amount of liquidity per tick\n    function maxLiquidityPerTick() external view returns (uint128);\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that can change\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\n/// per transaction\ninterface IUniswapV3PoolState {\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n    /// when accessed externally.\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n    /// boundary.\n    /// observationIndex The index of the last oracle observation that was written,\n    /// observationCardinality The current maximum number of observations stored in the pool,\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n    /// feeProtocol The protocol fee for both tokens of the pool.\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n    /// unlocked Whether the pool is currently locked to reentrancy\n    function slot0()\n        external\n        view\n        returns (\n            uint160 sqrtPriceX96,\n            int24 tick,\n            uint16 observationIndex,\n            uint16 observationCardinality,\n            uint16 observationCardinalityNext,\n            uint8 feeProtocol,\n            bool unlocked\n        );\n\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal0X128() external view returns (uint256);\n\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal1X128() external view returns (uint256);\n\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\n    /// @dev Protocol fees will never exceed uint128 max in either token\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\n\n    /// @notice The currently in range liquidity available to the pool\n    /// @dev This value has no relationship to the total liquidity across all ticks\n    function liquidity() external view returns (uint128);\n\n    /// @notice Look up information about a specific tick in the pool\n    /// @param tick The tick to look up\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n    /// tick upper,\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\n    /// a specific position.\n    function ticks(int24 tick)\n        external\n        view\n        returns (\n            uint128 liquidityGross,\n            int128 liquidityNet,\n            uint256 feeGrowthOutside0X128,\n            uint256 feeGrowthOutside1X128,\n            int56 tickCumulativeOutside,\n            uint160 secondsPerLiquidityOutsideX128,\n            uint32 secondsOutside,\n            bool initialized\n        );\n\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\n\n    /// @notice Returns the information about a position by the position's key\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n    /// @return _liquidity The amount of liquidity in the position,\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\n    function positions(bytes32 key)\n        external\n        view\n        returns (\n            uint128 _liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    /// @notice Returns data about a specific observation index\n    /// @param index The element of the observations array to fetch\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n    /// ago, rather than at a specific index in the array.\n    /// @return blockTimestamp The timestamp of the observation,\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\n    function observations(uint256 index)\n        external\n        view\n        returns (\n            uint32 blockTimestamp,\n            int56 tickCumulative,\n            uint160 secondsPerLiquidityCumulativeX128,\n            bool initialized\n        );\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that is not stored\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\n/// blockchain. The functions here may have variable gas costs.\ninterface IUniswapV3PoolDerivedState {\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\n    /// you must call it with secondsAgos = [3600, 0].\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\n    /// timestamp\n    function observe(uint32[] calldata secondsAgos)\n        external\n        view\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\n\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\n    /// snapshot is taken and the second snapshot is taken.\n    /// @param tickLower The lower tick of the range\n    /// @param tickUpper The upper tick of the range\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\n        external\n        view\n        returns (\n            int56 tickCumulativeInside,\n            uint160 secondsPerLiquidityInsideX128,\n            uint32 secondsInside\n        );\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissionless pool actions\n/// @notice Contains pool methods that can be called by anyone\ninterface IUniswapV3PoolActions {\n    /// @notice Sets the initial price for the pool\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\n    function initialize(uint160 sqrtPriceX96) external;\n\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\n    /// @param recipient The address for which the liquidity will be created\n    /// @param tickLower The lower tick of the position in which to add liquidity\n    /// @param tickUpper The upper tick of the position in which to add liquidity\n    /// @param amount The amount of liquidity to mint\n    /// @param data Any data that should be passed through to the callback\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    function mint(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount,\n        bytes calldata data\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Collects tokens owed to a position\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n    /// @param recipient The address which should receive the fees collected\n    /// @param tickLower The lower tick of the position for which to collect fees\n    /// @param tickUpper The upper tick of the position for which to collect fees\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n    /// @dev Fees must be collected separately via a call to #collect\n    /// @param tickLower The lower tick of the position for which to burn liquidity\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\n    /// @param amount How much liquidity to burn\n    /// @return amount0 The amount of token0 sent to the recipient\n    /// @return amount1 The amount of token1 sent to the recipient\n    function burn(\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Swap token0 for token1, or token1 for token0\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\n    /// @param recipient The address to receive the output of the swap\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\n    /// @param data Any data to be passed through to the callback\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\n    function swap(\n        address recipient,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96,\n        bytes calldata data\n    ) external returns (int256 amount0, int256 amount1);\n\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\n    /// @param recipient The address which will receive the token0 and token1 amounts\n    /// @param amount0 The amount of token0 to send\n    /// @param amount1 The amount of token1 to send\n    /// @param data Any data to be passed through to the callback\n    function flash(\n        address recipient,\n        uint256 amount0,\n        uint256 amount1,\n        bytes calldata data\n    ) external;\n\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\n    /// the input observationCardinalityNext.\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissioned pool actions\n/// @notice Contains pool methods that may only be called by the factory owner\ninterface IUniswapV3PoolOwnerActions {\n    /// @notice Set the denominator of the protocol's % share of the fees\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\n\n    /// @notice Collect the protocol fee accrued to the pool\n    /// @param recipient The address to which collected protocol fees should be sent\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\n    /// @return amount0 The protocol fee collected in token0\n    /// @return amount1 The protocol fee collected in token1\n    function collectProtocol(\n        address recipient,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Events emitted by a pool\n/// @notice Contains all events emitted by the pool\ninterface IUniswapV3PoolEvents {\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\n\n    /// @notice Emitted when liquidity is minted for a given position\n    /// @param sender The address that minted the liquidity\n    /// @param owner The owner of the position and recipient of any minted liquidity\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity minted to the position range\n    /// @param amount0 How much token0 was required for the minted liquidity\n    /// @param amount1 How much token1 was required for the minted liquidity\n    event Mint(\n        address sender,\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted when fees are collected by the owner of a position\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\n    /// @param owner The owner of the position for which fees are collected\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount0 The amount of token0 fees collected\n    /// @param amount1 The amount of token1 fees collected\n    event Collect(\n        address indexed owner,\n        address recipient,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount0,\n        uint128 amount1\n    );\n\n    /// @notice Emitted when a position's liquidity is removed\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\n    /// @param owner The owner of the position for which liquidity is removed\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity to remove\n    /// @param amount0 The amount of token0 withdrawn\n    /// @param amount1 The amount of token1 withdrawn\n    event Burn(\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted by the pool for any swaps between token0 and token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the output of the swap\n    /// @param amount0 The delta of the token0 balance of the pool\n    /// @param amount1 The delta of the token1 balance of the pool\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\n    /// @param liquidity The liquidity of the pool after the swap\n    /// @param tick The log base 1.0001 of price of the pool after the swap\n    event Swap(\n        address indexed sender,\n        address indexed recipient,\n        int256 amount0,\n        int256 amount1,\n        uint160 sqrtPriceX96,\n        uint128 liquidity,\n        int24 tick\n    );\n\n    /// @notice Emitted by the pool for any flashes of token0/token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the tokens from flash\n    /// @param amount0 The amount of token0 that was flashed\n    /// @param amount1 The amount of token1 that was flashed\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\n    event Flash(\n        address indexed sender,\n        address indexed recipient,\n        uint256 amount0,\n        uint256 amount1,\n        uint256 paid0,\n        uint256 paid1\n    );\n\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\n    /// just before a mint/swap/burn.\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\n    event IncreaseObservationCardinalityNext(\n        uint16 observationCardinalityNextOld,\n        uint16 observationCardinalityNextNew\n    );\n\n    /// @notice Emitted when the protocol fee is changed by the pool\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\n\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\n    /// @param sender The address that collects the protocol fees\n    /// @param recipient The address that receives the collected protocol fees\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\n}\n"
    },
    "contracts/oracles/vendor/PoolAddress.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Provides functions for deriving a pool address from the factory, tokens, and the fee\nlibrary PoolAddress {\n    bytes32 internal constant POOL_INIT_CODE_HASH = 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54;\n\n    /// @notice The identifying key of the pool\n    struct PoolKey {\n        address token0;\n        address token1;\n        uint24 fee;\n    }\n\n    /// @notice Returns PoolKey: the ordered tokens with the matched fee levels\n    /// @param tokenA The first token of a pool, unsorted\n    /// @param tokenB The second token of a pool, unsorted\n    /// @param fee The fee level of the pool\n    /// @return Poolkey The pool details with ordered token0 and token1 assignments\n    function getPoolKey(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) internal pure returns (PoolKey memory) {\n        if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\n        return PoolKey({token0: tokenA, token1: tokenB, fee: fee});\n    }\n\n    /// @notice Deterministically computes the pool address given the factory and PoolKey\n    /// @param factory The Uniswap V3 factory contract address\n    /// @param key The PoolKey\n    /// @return pool The contract address of the V3 pool\n    function computeAddress(address factory, PoolKey memory key) internal pure returns (address pool) {\n        require(key.token0 < key.token1);\n        pool = address(\n            uint160(\n                uint256(\n                    keccak256(\n                        abi.encodePacked(\n                            hex'ff',\n                            factory,\n                            keccak256(abi.encode(key.token0, key.token1, key.fee)),\n                            POOL_INIT_CODE_HASH\n                        )\n                    )\n                )\n            )\n        );\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}