{
  "address": "0x68B1D87F95878fE05B998F19b66F4baba5De1aed",
  "abi": [
    {
      "inputs": [],
      "name": "IncorrectDiscount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LessThanMinimum",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughDeferredAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TooMuchAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ACCESS_CONTROL_SINGLETON",
      "outputs": [
        {
          "internalType": "contract ISuAccessControl",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIQUIDATION_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VAULT_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "enum DiscountType",
          "name": "discountType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "liquidationBlock",
          "type": "uint256"
        }
      ],
      "name": "calculateDiscountE18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "calculateLiquidationDiscount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "enum DiscountType",
          "name": "discountType",
          "type": "uint8"
        }
      ],
      "name": "getDiscountInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "firstBlockE18",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stepPerBlockE18",
              "type": "uint256"
            }
          ],
          "internalType": "struct DiscountInfo",
          "name": "discountInfo",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_authControl",
          "type": "address"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_authControl",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_suManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_suOracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_suReward",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "enum DiscountType",
          "name": "discountType",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "firstBlockE18",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stepPerBlockE18",
              "type": "uint256"
            }
          ],
          "internalType": "struct DiscountInfo",
          "name": "discountInfo",
          "type": "tuple"
        }
      ],
      "name": "setDiscountInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "stablecoinToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stablecoinAmountEDecimal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAssetAmountEDecimal",
          "type": "uint256"
        }
      ],
      "name": "swapStablecoinToAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stablecoinAmountE18",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAssetAmountEDecimal",
          "type": "uint256"
        }
      ],
      "name": "swapUsdProToAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stablecoinToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stablecoinAmountEDecimal",
          "type": "uint256"
        }
      ],
      "name": "swapUsdProToStablecoin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "1ee30c392eeeb5c03c3751ea96247c34",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"IncorrectDiscount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LessThanMinimum\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughDeferredAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooMuchAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ACCESS_CONTROL_SINGLETON\",\"outputs\":[{\"internalType\":\"contract ISuAccessControl\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDATION_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VAULT_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"enum DiscountType\",\"name\":\"discountType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"liquidationBlock\",\"type\":\"uint256\"}],\"name\":\"calculateDiscountE18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"calculateLiquidationDiscount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"enum DiscountType\",\"name\":\"discountType\",\"type\":\"uint8\"}],\"name\":\"getDiscountInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"firstBlockE18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stepPerBlockE18\",\"type\":\"uint256\"}],\"internalType\":\"struct DiscountInfo\",\"name\":\"discountInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_authControl\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_authControl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_suManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_suOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_suReward\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"enum DiscountType\",\"name\":\"discountType\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"firstBlockE18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stepPerBlockE18\",\"type\":\"uint256\"}],\"internalType\":\"struct DiscountInfo\",\"name\":\"discountInfo\",\"type\":\"tuple\"}],\"name\":\"setDiscountInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stablecoinToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stablecoinAmountEDecimal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAssetAmountEDecimal\",\"type\":\"uint256\"}],\"name\":\"swapStablecoinToAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stablecoinAmountE18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAssetAmountEDecimal\",\"type\":\"uint256\"}],\"name\":\"swapUsdProToAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stablecoinToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stablecoinAmountEDecimal\",\"type\":\"uint256\"}],\"name\":\"swapUsdProToStablecoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"calculateDiscountE18(address,uint8,uint256)\":{\"details\":\"This is a linear function of the discount change.     Calculates the liquidation discount by passed blocks.\",\"params\":{\"asset\":\"The address of the main collateral token\",\"discountType\":\"Determines how aggressively the lending module offers a discount\",\"liquidationBlock\":\"The block number when the liquidation was triggered\"},\"returns\":{\"_0\":\"Amount of discount in percents, E18 format\"}},\"calculateLiquidationDiscount(address,address)\":{\"params\":{\"asset\":\"The address of the collateral token\",\"owner\":\"The owner of the collateral\"}},\"getDiscountInfo(address,uint8)\":{\"params\":{\"asset\":\"The address of the asset token\",\"discountType\":\"Type of discount determines how aggressively the lending module offers a discount\"}},\"setDiscountInfo(address,uint8,(uint256,uint256))\":{\"details\":\"Sets the liquidation discount\",\"params\":{\"asset\":\"The address of the asset token\",\"discountInfo\":\"Determines discount percentages depending on a block number\",\"discountType\":\"Determines how aggressively the lending module offers a discount\"}},\"swapStablecoinToAsset(address,address,address,uint256,uint256)\":{\"details\":\"This is a first step of two\",\"params\":{\"asset\":\"The address of the collateral token\",\"minAssetAmountEDecimal\":\"The minimum amount of collateral which the liquidator desires to obtain\",\"owner\":\"The owner of the collateral\",\"stablecoinAmountEDecimal\":\"The amount of stablecoins for the collateral buyout\",\"stablecoinToken\":\"The address of the stablecoin token\"}},\"swapUsdProToAsset(address,address,uint256,uint256)\":{\"params\":{\"asset\":\"The address of the collateral token\",\"minAssetAmountEDecimal\":\"The minimum amount of collateral which the liquidator desires to obtain\",\"owner\":\"The owner of the collateral\",\"stablecoinAmountE18\":\"The amount of stablecoins for the collateral buyout\"}},\"swapUsdProToStablecoin(address,uint256)\":{\"details\":\"This is a second step of two\",\"params\":{\"stablecoinAmountEDecimal\":\"The amount of stablecoins\",\"stablecoinToken\":\"The address of the stablecoin token\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"calculateLiquidationDiscount(address,address)\":{\"notice\":\"Calculates a liquidation discount\"},\"getDiscountInfo(address,uint8)\":{\"notice\":\"Returns information about discount percentages depending on a block number\"},\"setDiscountInfo(address,uint8,(uint256,uint256))\":{\"notice\":\"Only owner is able to call this function\"},\"swapStablecoinToAsset(address,address,address,uint256,uint256)\":{\"notice\":\"Swaps stablecoins from the whitelist to the collateral\"},\"swapUsdProToAsset(address,address,uint256,uint256)\":{\"notice\":\"Swaps USDPro to the collateral\"},\"swapUsdProToStablecoin(address,uint256)\":{\"notice\":\"Swaps USDPro to stablecoins from the whitelist\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/liquidator/SuLiquidation.sol\":\"SuLiquidation\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6777f3fccb5dab95a9088ef62c41bee0198fd92e50d7c94f0e3733788af4079e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"contracts/access-control/SuAuthenticated.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\npragma solidity >=0.7.6;\\n\\nimport \\\"../interfaces/ISuAccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title SuAuthenticated\\n * @dev other contracts should inherit to be authenticated\\n */\\nabstract contract SuAuthenticated is Initializable{\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant VAULT_ACCESS_ROLE = keccak256(\\\"VAULT_ACCESS_ROLE\\\");\\n    bytes32 public constant LIQUIDATION_ACCESS_ROLE = keccak256(\\\"LIQUIDATION_ACCESS_ROLE\\\");\\n    bytes32 private constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /// @dev the address of SuAccessControlSingleton - it should be one for all contract that inherits SuAuthenticated\\n    ISuAccessControl public ACCESS_CONTROL_SINGLETON;\\n\\n    /// @dev should be passed in constructor\\n    function __SuAuthenticated_init(address _accessControlSingleton) internal onlyInitializing {\\n        ACCESS_CONTROL_SINGLETON = ISuAccessControl(_accessControlSingleton);\\n        // TODO: check that _accessControlSingleton points to ISuAccessControl instance\\n        // require(ISuAccessControl(_accessControlSingleton).supportsInterface(ISuAccessControl.hasRole.selector), \\\"bad dependency\\\");\\n    }\\n\\n    /// @dev check DEFAULT_ADMIN_ROLE\\n    modifier onlyOwner() {\\n        require(ACCESS_CONTROL_SINGLETON.hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"SuAuth: onlyOwner AUTH_FAILED\\\");\\n        _;\\n    }\\n\\n    /// @dev check VAULT_ACCESS_ROLE\\n    modifier onlyVaultAccess() {\\n        require(ACCESS_CONTROL_SINGLETON.hasRole(VAULT_ACCESS_ROLE, msg.sender), \\\"SuAuth: onlyVaultAccess AUTH_FAILED\\\");\\n        _;\\n    }\\n\\n    /// @dev check VAULT_ACCESS_ROLE\\n    modifier onlyLiquidationAccess() {\\n        require(ACCESS_CONTROL_SINGLETON.hasRole(LIQUIDATION_ACCESS_ROLE, msg.sender), \\\"SuAuth: onlyLiquidationAccess AUTH_FAILED\\\");\\n        _;\\n    }\\n\\n    /// @dev check MINTER_ROLE\\n    modifier onlyMinter() {\\n        require(ACCESS_CONTROL_SINGLETON.hasRole(MINTER_ROLE, msg.sender), \\\"SuAuth: onlyMinter AUTH_FAILED\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x340220ca1c937826e44283ea69178ed0e8eff7e69926f51b599d905601458bd6\",\"license\":\"BSL 1.1\"},\"contracts/interfaces/IRewardChefV2.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface IRewardChefV2 {\\n    /// @notice Info of each reward pool.\\n    /// `allocPoint` The amount of allocation points assigned to the pool.\\n    /// Also known as the amount of REWARD_TOKEN to distribute per block.\\n    struct PoolInfo {\\n        uint128 accSushiPerShare;\\n        uint64 lastRewardBlock;\\n        uint64 allocPoint;\\n        uint256 lpSupply;\\n    }\\n\\n    /// @notice Info of each user.\\n    /// `amount` token amount the user has provided.\\n    /// `rewardDebt` The amount of rewards entitled to the user.\\n    struct UserInfo {\\n        uint256 amount;\\n        int256 rewardDebt;\\n\\n        uint256 multiplicator1e18;\\n        uint256 lockupPeriodSeconds;\\n        uint256 lockupStartTimestamp;\\n    }\\n\\n    // Public variables that are declared in RewardChefV2.sol\\n    //  function userInfo(address asset, address user) external returns ( UserInfo );\\n    //  function poolInfo(address asset) external returns ( PoolInfo );\\n\\n    function REWARD_TOKEN() external view returns ( IERC20Upgradeable );\\n    function add(uint256 allocPoint, address _asset) external;\\n\\n    function increaseAmount(address asset, address to, uint256 amountEDecimal, uint256 lockupPeriodSeconds) external;\\n    function decreaseAmount(address asset, address to, uint256 amountEDecimal) external;\\n    function decreaseAmountRewardPenalty(address asset, address to, uint256 amountEDecimal) external view returns (uint256);\\n    function harvest(address asset, address to, uint256 newLockupPeriodSeconds) external;\\n    function pendingSushi(address _asset, address _user) external view returns ( uint256 );\\n    function refillReward(uint256 amount, uint64 endBlock) external;\\n    function rewardsBetweenBlocks(uint256 startBlock, uint256 endBlock) external returns ( uint256 );\\n    function rewardEndBlock() external view returns ( uint256 );\\n    function set(address _asset, uint256 _allocPoint) external;\\n    function totalAllocPoint() external view returns ( uint256 );\\n    function updateAllPools() external;\\n    function updatePool(address asset) external returns ( PoolInfo memory );\\n    function resetAmount(address asset, address to) external;\\n}\\n\",\"keccak256\":\"0x0a6e440b16bf020794c13ae130977732b865847acd4306008e746ae9dab6ed5f\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ISuAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface ISuAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n    function grantRole(bytes32 role, address account) external;\\n    function revokeRole(bytes32 role, address account) external;\\n    function renounceRole(bytes32 role, address account) external;\\n\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    // TODO: remove legacy functionality\\n    function setVault(address _vault, bool _isVault) external;\\n    function setCdpManager(address _cdpManager, bool _isCdpManager) external;\\n    function setDAO(address _dao, bool _isDAO) external;\\n    function setManagerParameters(address _address, bool _permit) external;\\n    function transferOwnership(address newOwner) external;\\n}\\n\",\"keccak256\":\"0xd386f4bad5ae0d77788abea08ceec10dc02b02559465d8a8f4e30b58dfac2d2a\",\"license\":\"MIT\"},\"contracts/interfaces/ISuLiquidation.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/ISuLiquidationDiscount.sol\\\";\\n\\ninterface ISuLiquidation is ISuLiquidationDiscount {\\n    /// @notice Calculates a liquidation discount. Depends on a block number\\n    function calculateLiquidationDiscount(address asset, address owner) external view returns (uint256);\\n    /// @notice Swaps usdPRO to an asset which is liquidating.\\n    ///     Does sequentially the same as swapStablecoinToAsset() and swapUsdProToStablecoin(),\\n    ///     but without any third-party stablecoins\\n    function swapUsdProToAsset(\\n        address asset,\\n        address owner,\\n        uint256 stablecoinAmountE18,\\n        uint256 minAssetAmountEDecimal\\n    ) external;\\n    /// @notice Swaps stablecoins from the whitelist to an asset which is liquidating\\n    ///     The liquidator specifies a position(asset, owner) which is liquidating\\n    ///\\n    ///     The liquidator specifies an amount of stablecoins which he wants to swap to an asset.\\n    ///     The amount of asset is determined from current price and liquidation discount.\\n    ///     Also, the liquidator specifies the minimum amount of asset which he agrees to recieve.\\n    ///\\n    ///     The list of available stablecoins is restricted by whitelist.\\n    ///\\n    ///     The liquidator transfers his stablecoins to the address of this contract.\\n    ///     Further(see swapUsdProToStablecoin()) it can be swapped to USDPro.\\n    ///     At the same moment, the SuVault contract decreases the amount of debt by position and\\n    ///     withdraws the collateral to the liquidator\\n    function swapStablecoinToAsset(\\n        address asset,\\n        address owner,\\n        address stablecoinToken,\\n        uint256 stablecoinAmountEDecimal,\\n        uint256 minAssetAmountEDecimal\\n    ) external;\\n    /// @notice Swaps UsdPro to stablecoins from the whitelist\\n    ///     The contract transfers stablecoins to the liquidator.\\n    ///     At the same moment the liquidator burns and transfers to the foundation the amount of his USDPro.\\n    ///     Is is a finilization of liquidation.\\n    function swapUsdProToStablecoin(\\n        address stablecoinToken,\\n        uint256 stablecoinAmountEDecimal\\n    ) external;\\n}\",\"keccak256\":\"0x561afab2a06683e639452000c8b86499243550b90ed92a8ccc3c1994ca2978fb\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ISuLiquidationDiscount.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\nimport \\\"../liquidator/SuLiquidationStructs.sol\\\";\\n\\ninterface ISuLiquidationDiscount {\\n    /// @notice Sets percentages of discounts for different asset and discount types(aggressive/middle/conservative)\\n    ///     We can set different discounts for the first block and for other blocks per minute\\n    function setDiscountInfo(\\n        address asset,\\n        DiscountType discountType,\\n        DiscountInfo calldata discountInfo\\n    ) external;\\n    /// @notice Returns information about discount percentages which are used for discount calculation\\n    function getDiscountInfo(\\n        address asset,\\n        DiscountType discountType\\n    ) external view returns (DiscountInfo memory discountInfo);\\n    /// @notice Calculates the liquidation discount in percents by passed blocks.\\n    ///     We have three discount types(see SuLiquidationStruct.sol)\\n    function calculateDiscountE18(\\n        address asset,\\n        DiscountType discountType,\\n        uint256 liquidationBlock\\n    ) external view returns (uint256);\\n}\",\"keccak256\":\"0xaae552425b8202d8a270eb0e638290cfcaf56d9f463205051bbb26e8881e6e25\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ISuManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\ninterface ISuManager {\\n    function isLiquidatablePosition( address asset, address owner ) external view returns (bool);\\n    function triggerLiquidation( address asset, address owner ) external;\\n    function getPosition(\\n        address asset,\\n        address owner\\n    ) external view returns (\\n        uint256 liquidationBlock,\\n        uint256 collateralEDecimal,\\n        uint256 debtE18\\n    );\\n    function getLiquidationBlock(\\n        address asset,\\n        address owner\\n    ) external view returns (uint256 liquidationBlock);\\n    function liquidateAndRepay(\\n        address asset,\\n        address owner,\\n        address repayer,\\n        uint256 repaymentE18,\\n        uint256 excessAndFeeE18,\\n        uint256 assetAmountEDecimal\\n    ) external returns (bool destroyed);\\n    function liquidate(\\n        address asset,\\n        address owner,\\n        address repayer,\\n        uint256 repaymentE18,\\n        uint256 assetAmountEDecimal\\n    ) external returns (bool destroyed);\\n    function repay(\\n        address repayer,\\n        uint256 stablecoinAmountE18,\\n        uint256 excessAndFeeE18\\n    ) external;\\n    // TODO: add other methods from suManager.sol like join() and exit()\\n}\",\"keccak256\":\"0x54a9d258ac6a0d81a4068db6cf2449ee60c048f22f84a36c1e4e3da5fed6e645\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ISuOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity >=0.7.6;\\n\\ninterface ISuOracle {\\n    /**\\n     * @notice WARNING! Read this description very carefully!\\n     *      function getUsdPrice1e18(address asset) returns (uint256) that:\\n     *          basicAmountOfAsset * getUsdPrice1e18(asset) / 1e18 === $$ * 1e18\\n     *      in other words, it doesn't matter what's the erc20.decimals is,\\n     *      you just multiply token balance in basic units on value from oracle and get dollar amount multiplied on 1e18.\\n     *\\n     * different assets have different deviation threshold (errors)\\n     *      for wBTC it's <= 0.5%, read more https://data.chain.link/ethereum/mainnet/crypto-usd/btc-usd\\n     *      for other asset is can be larger based on particular oracle implementation.\\n     *\\n     * examples:\\n     *      assume market price of wBTC = $31,503.77, oracle error = $158\\n     *\\n     *       case #1: small amount of wBTC\\n     *           we have 0.0,000,001 wBTC that is worth v = $0.00315 \\u00b1 $0.00001 = 0.00315*1e18 = 315*1e13 \\u00b1 1*1e13\\n     *           actual balance on the asset b = wBTC.balanceOf() =  0.0000001*1e18 = 1e11\\n     *           oracle should return or = oracle.getUsdPrice1e18(wBTC) <=>\\n     *           <=> b*or = v => v/b = 315*1e13 / 1e11 = 315*1e2 \\u00b1 1e2\\n     *           error = or.error * b = 1e2 * 1e11 = 1e13 => 1e13/1e18 usd = 1e-5 = 0.00001 usd\\n     *\\n     *       case #2: large amount of wBTC\\n     *           v = 2,000,000 wBTC = $31,503.77 * 2m \\u00b1 158*2m = $63,007,540,000 \\u00b1 $316,000,000 = 63,007*1e24 \\u00b1 316*1e24\\n     *           for calc convenience we increase error on 0.05 and have v = 63,000*24 \\u00b1 300*1e24 = (630 \\u00b1 3)*1e26\\n     *           b = 2*1e6 * 1e18 = 2*1e24\\n     *           or = v/b = (630 \\u00b1 3)*1e26 / 2*1e24 = 315*1e2 \\u00b1 1.5*1e2\\n     *           error = or.error * b = 1.5*100 * 2*1e24 = 3*1e26 = 3*1e8*1e18 = $300,000,000 ~ $316,000,000\\n     *\\n     *      assume the market price of USDT = $0.97 \\u00b1 $0.00485,\\n     *\\n     *       case #3: little amount of USDT\\n     *           v = USDT amount 0.005 = 0.005*(0.97 \\u00b1 0.00485) = 0.00485*1e18 \\u00b1 0.00002425*1e18 = 485*1e13 \\u00b1 3*1e13\\n     *           we rounded error up on (3000-2425)/2425 ~= +24% for calculation convenience.\\n     *           b = USDT.balanceOf() = 0.005*1e6 = 5*1e3\\n     *           b*or = v => or = v/b = (485*1e13 \\u00b1 3*1e13) / 5*1e3 = 970*1e9 \\u00b1 6*1e9\\n     *           error = 6*1e9 * 5*1e3 / 1e18 = 30*1e12/1e18 = 3*1e-5 = $0,00005\\n     *\\n     *       case #4: lot of USDT\\n     *           v = we have 100,000,000,000 USDT = $97B = 97*1e9*1e18 \\u00b1 0.5*1e9*1e18\\n     *           b = USDT.balanceOf() = 1e11*1e6 = 1e17\\n     *           or = v/b = (97*1e9*1e18 \\u00b1 0.5*1e9*1e18) / 1e17 = 970*1e9 \\u00b1 5*1e9\\n     *           error = 5*1e9 * 1e17 = 5*1e26 = 0.5 * 1e8*1e18\\n     *\\n     * @param asset - address of erc20 token contract\\n     * @return usdPrice1e18 such that asset.balanceOf() * getUsdPrice1e18(asset) / 1e18 == $$ * 1e18\\n     **/\\n    function getUsdPrice1e18(address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x000567b74a69b532d893db59cb93c4e470aa794a909a7309fdacc0ba29671538\",\"license\":\"UNLICENSED\"},\"contracts/liquidator/SuLiquidation.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n/*\\n  Copyright 2022 StableUnit: Artem Belozerov\\n*/\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"../interfaces/ISuLiquidation.sol\\\";\\nimport \\\"../interfaces/ISuOracle.sol\\\";\\nimport \\\"../interfaces/ISuManager.sol\\\";\\nimport \\\"../interfaces/IRewardChefV2.sol\\\";\\nimport \\\"./SuLiquidationDiscount.sol\\\";\\nimport \\\"./SuLiquidationStructs.sol\\\";\\n\\ncontract SuLiquidation is SuLiquidationDiscount, ISuLiquidation {\\n    error ZeroAddress();\\n    error LessThanMinimum();\\n    error NotEnoughAmount();\\n    error NotEnoughDeferredAmount();\\n    error TooMuchAmount();\\n\\n    // solhint-disable var-name-mixedcase\\n    ISuManager internal SU_MANAGER;\\n    ISuOracle internal SU_ORACLE;\\n    IRewardChefV2 internal SU_REWARD;\\n    // solhint-enable var-name-mixedcase\\n\\n    // asset => structure of deferred stablecoin amount:\\n    // - liquidationBlock - the block number when the liquidation was triggered.\\n    // - toRepaymentE18 - amount of stablecoins which will be burned as debt repayment.\\n    // - toFoundationE18 - amount of stablecoins which will be transfered to the foundation\\n    //      as an excess of stablecoins over debt repayment\\n    mapping(address => DeferredStablecoinAmount) internal _deferredStablecoinAmounts;\\n\\n    function initialize(\\n        address _authControl,\\n        address _suManager,\\n        address _suOracle,\\n        address _suReward\\n    ) public initializer {\\n        SuLiquidationDiscount.init(_authControl);\\n\\n        if (_suManager == address(0)) revert ZeroAddress();\\n        if (_suOracle == address(0)) revert ZeroAddress();\\n\\n        SU_MANAGER = ISuManager(_suManager);\\n        SU_ORACLE = ISuOracle(_suOracle);\\n        SU_REWARD = IRewardChefV2(_suReward);\\n    }\\n\\n    /// @notice Calculates a liquidation discount\\n    /// @param asset The address of the collateral token\\n    /// @param owner The owner of the collateral\\n    function calculateLiquidationDiscount(\\n        address asset,\\n        address owner\\n    ) external view override returns (uint256) {\\n\\n        // get the block number when the liquidation was triggered\\n        uint256 liquidationBlock = SU_MANAGER.getLiquidationBlock(asset, owner);\\n\\n        // discount depends on a block number\\n        return _getAggressiveOrMiddleDiscountE18(asset, owner, liquidationBlock);\\n    }\\n\\n    /// @notice Swaps USDPro to the collateral\\n    /// @param asset The address of the collateral token\\n    /// @param owner The owner of the collateral\\n    /// @param stablecoinAmountE18 The amount of stablecoins for the collateral buyout\\n    /// @param minAssetAmountEDecimal The minimum amount of collateral which the liquidator desires to obtain\\n    function swapUsdProToAsset(\\n        address asset,\\n        address owner,\\n        uint256 stablecoinAmountE18,\\n        uint256 minAssetAmountEDecimal\\n    ) external override {\\n\\n        // prepare parameters of the liquidation\\n        (\\n            uint256 assetAmountE18,\\n            uint256 stablecoinsToRepaymentE18,\\n            uint256 stablecoinsToFoundationE18\\n        ) = _prepareLiquidationParams(asset, owner, stablecoinAmountE18, minAssetAmountEDecimal);\\n\\n        // repay the part of debt and withdraw the part of collateral to the liquidator\\n        SU_MANAGER.liquidateAndRepay(\\n            asset,\\n            owner,\\n            msg.sender,\\n            stablecoinsToRepaymentE18,\\n            stablecoinsToFoundationE18,\\n            assetAmountE18\\n        );\\n    }\\n\\n    /// @notice Swaps stablecoins from the whitelist to the collateral\\n    /// @dev This is a first step of two\\n    /// @param asset The address of the collateral token\\n    /// @param owner The owner of the collateral\\n    /// @param stablecoinToken The address of the stablecoin token\\n    /// @param stablecoinAmountEDecimal The amount of stablecoins for the collateral buyout\\n    /// @param minAssetAmountEDecimal The minimum amount of collateral which the liquidator desires to obtain\\n    function swapStablecoinToAsset(\\n        address asset,\\n        address owner,\\n        address stablecoinToken,\\n        uint256 stablecoinAmountEDecimal,\\n        uint256 minAssetAmountEDecimal\\n    ) external override {\\n        // TODO: whitelist\\n\\n        // calculate the price in usd\\n        uint256 usdPriceOfStablecoinE18 = SU_ORACLE.getUsdPrice1e18(stablecoinToken);\\n        uint256 stablecoinAmountE18 = usdPriceOfStablecoinE18 * stablecoinAmountEDecimal / 1e18;\\n\\n        // prepare parameters of the liquidation\\n        (\\n            uint256 assetAmountE18,\\n            uint256 usdProToRepaymentE18,\\n            uint256 usdProToFoundationE18\\n        ) = _prepareLiquidationParams(asset, owner, stablecoinAmountE18, minAssetAmountEDecimal);\\n\\n        // store the stablecoins of the liquidator to this contract\\n        uint256 paidStablecoinAmountEDecimal = (usdProToRepaymentE18 + usdProToFoundationE18) * 1e18 / usdPriceOfStablecoinE18;\\n        SafeERC20Upgradeable.safeTransferFrom(\\n            IERC20Upgradeable(stablecoinToken),\\n            msg.sender,\\n            address(this),\\n            paidStablecoinAmountEDecimal\\n        );\\n\\n        // get the block number when the liquidation was triggered\\n        // it will be needed to calculate the conservative discount\\n        // TODO: replace to _deferStablecoinsE18()\\n        uint256 liquidationBlock = SU_MANAGER.getLiquidationBlock(asset, owner);\\n\\n        // save the stablecoin amounts for the future payments\\n        // when another actor will swap USDPro to the stablecoins(second step)\\n        _deferStablecoinsE18(\\n            stablecoinToken,\\n            liquidationBlock,\\n            usdProToRepaymentE18,\\n            usdProToFoundationE18\\n        );\\n\\n        // cut the part of debt repayment and withdraw the part of collateral to the liquidator\\n        SU_MANAGER.liquidate(asset, owner, msg.sender, usdProToRepaymentE18, assetAmountE18);\\n    }\\n\\n    /// @notice Swaps USDPro to stablecoins from the whitelist\\n    /// @dev This is a second step of two\\n    /// @param stablecoinToken The address of the stablecoin token\\n    /// @param stablecoinAmountEDecimal The amount of stablecoins\\n    function swapUsdProToStablecoin(\\n        address stablecoinToken,\\n        uint256 stablecoinAmountEDecimal\\n    ) external override {\\n        // TODO: whitelist\\n\\n        // calculate the prices in usd\\n        uint256 stablecoinAmountE18 = SU_ORACLE.getUsdPrice1e18(stablecoinToken) * stablecoinAmountEDecimal / 1e18;\\n\\n        // reduce an amount of deferred stablecoins by \\\"stablecoinAmountEDecimal\\\"\\n        (uint256 usdProToRepaymentE18, uint256 usdProToFoundationE18) = _popDeferredStablecoinsE18(\\n            stablecoinToken,\\n            stablecoinAmountE18\\n        );\\n\\n        // the sender burns a part of USDPro as the debt repayment and\\n        // transfers another part of USDPro to the foundation\\n        SU_MANAGER.repay(msg.sender, usdProToRepaymentE18, usdProToFoundationE18);\\n\\n        // the contract transfers the stablecoins to the sender\\n        SafeERC20Upgradeable.safeTransfer(IERC20Upgradeable(stablecoinToken), msg.sender, stablecoinAmountEDecimal);\\n    }\\n\\n    /// @notice Returns parameters for future liquidation\\n    /// @param asset The address of the collateral token\\n    /// @param owner The owner of the collateral\\n    /// @param stablecoinAmountE18 The amount of stablecoins for the collateral buyout\\n    /// @param minAssetAmountEDecimal The minimum amount of collateral which the liquidator desires to obtain\\n    function _prepareLiquidationParams(\\n        address asset,\\n        address owner,\\n        uint256 stablecoinAmountE18,\\n        uint256 minAssetAmountEDecimal\\n    ) internal view returns (uint256, uint256, uint256) {\\n\\n        // get CDP info from the vault\\n        // TODO: remove liquidationBlock from response\\n        (\\n            uint256 liquidationBlock,\\n            uint256 collateralEDecimal,\\n            uint256 debtE18\\n        ) = SU_MANAGER.getPosition(asset, owner);\\n\\n        console.log(\\\"LIQUIDATION PARAMS (block, collaterl, debt):\\\", liquidationBlock, collateralEDecimal, debtE18);\\n\\n        // discount depends on a block number\\n        uint256 discountE18 = _getAggressiveOrMiddleDiscountE18(asset, owner, liquidationBlock);\\n\\n        // calculate the price of asset in USD\\n        uint256 usdPriceOfAssetE18 = SU_ORACLE.getUsdPrice1e18(asset);\\n\\n        // calculate the amount of asset which will be withdrawn to the liquidator\\n        (uint256 assetAmountEDecimal, uint256 discountedStablecoinAmountE18) = _calculateLiquidationAssetAmount(\\n            usdPriceOfAssetE18,\\n            stablecoinAmountE18,\\n            collateralEDecimal,\\n            discountE18\\n        );\\n        if (assetAmountEDecimal < minAssetAmountEDecimal) revert LessThanMinimum();\\n\\n        // an excess amount will be transfered to the foundation\\n        // the rest - will be burned as the debt repayment\\n        (uint256 repaymentE18, uint256 excessE18) = _calculateLiquidationStablecoinAmount(\\n            debtE18,\\n            discountedStablecoinAmountE18\\n        );\\n        return (assetAmountEDecimal, repaymentE18, excessE18);\\n    }\\n\\n    /// @notice Calculates the amount of asset which will be liquidated\\n    /// @param usdPriceOfAssetE18 The price of collateral in worth of stablecoins\\n    /// @param stablecoinAmountE18 The amount of stablecoins for the collateral buyout\\n    /// @param collateralEDecimal The amount of collateral\\n    /// @param discountE18 The percentage of discount for a liquidator\\n    function _calculateLiquidationAssetAmount(\\n        uint256 usdPriceOfAssetE18,\\n        uint256 stablecoinAmountE18,\\n        uint256 collateralEDecimal,\\n        uint256 discountE18\\n    ) internal view returns (uint256, uint256) {\\n\\n        // calculate value of collateral\\n        uint256 collateralValueE18 = usdPriceOfAssetE18 * collateralEDecimal / 1e18;\\n\\n        console.log(\\\"CALC_BONUS collateral(amount * price = assetValue):\\\", collateralEDecimal, usdPriceOfAssetE18, collateralValueE18);\\n        console.log(\\\"CALC_BONUS stablecoin (stablecoinAmountE18, discountE18):\\\", stablecoinAmountE18, discountE18);\\n\\n        // apply the discount. the amount of stablecoins could be decreased after the discount applying.\\n        uint256 stablecoinAmountWithBonusE18;\\n        (stablecoinAmountE18, stablecoinAmountWithBonusE18) = _applyDiscount(\\n            collateralValueE18,\\n            stablecoinAmountE18,\\n            discountE18\\n        );\\n\\n        console.log(\\\"CALC_BONUS stablecoin remainder:\\\", collateralValueE18 - stablecoinAmountWithBonusE18);\\n        console.log(\\\"CALC_BONUS stablecoin bonus:\\\", stablecoinAmountWithBonusE18 - stablecoinAmountE18);\\n        console.log(\\\"CALC_BONUS stablecoin payment:\\\", stablecoinAmountE18);\\n\\n        // calculate an amount of asset which a liquidator could take for his stablecoins\\n        // including bonus\\n        uint256 assetAmountEDecimal = stablecoinAmountWithBonusE18 * 1e18 / usdPriceOfAssetE18;\\n        return (assetAmountEDecimal, stablecoinAmountE18);\\n    }\\n\\n    /// @notice Returns the bonus and the amount of stablecoins after applying the discount\\n    /// @param collateralValueE18 The amount of collateral in worth of the stablecoins\\n    /// @param stablecoinAmountE18 The amount of stablecoins for the collateral buyout\\n    /// @param discountE18 The percentage of discount for a liquidator\\n    function _applyDiscount(\\n        uint256 collateralValueE18,\\n        uint256 stablecoinAmountE18,\\n        uint256 discountE18\\n    ) internal pure returns (\\n        uint256 stablecoinAmountWithoutBonusE18,\\n        uint256 stablecoinAmountWithBonusE18\\n    ) {\\n        stablecoinAmountWithBonusE18 = stablecoinAmountE18 * (1e18 + discountE18) / 1e18;\\n\\n        // decrease the amount of stablecoins which will be withdrawn from the liquidator\\n        // if the total amount(with bonus) more then the collateral value\\n        if (stablecoinAmountWithBonusE18 > collateralValueE18) {\\n            stablecoinAmountWithBonusE18 = collateralValueE18;\\n            stablecoinAmountWithoutBonusE18 = collateralValueE18 * 1e18 / (1e18 + discountE18);\\n        } else {\\n            stablecoinAmountWithoutBonusE18 = stablecoinAmountE18;\\n        }\\n    }\\n\\n    /// @notice Calculates what the amount of stablecoins goes to repay the debt\\n    /// @param debtE18 The amount of borrowed stablecoins\\n    /// @param amountE18 The amount of the sender's stablecoins\\n    function _calculateLiquidationStablecoinAmount(\\n        uint256 debtE18,\\n        uint256 amountE18\\n    ) internal pure returns (\\n        uint256 repaymentE18,\\n        uint256 excessE18\\n    ) {\\n        if (amountE18 > debtE18) {\\n            excessE18 = amountE18 - debtE18;\\n            repaymentE18 = debtE18;\\n        } else {\\n            repaymentE18 = amountE18;\\n        }\\n    }\\n\\n    /// @notice Stores stablecoins for the future payments\\n    /// @param stablecoinToken The address of the stablecoin token\\n    /// @param liquidationBlock The block number when the liquidation was triggered\\n    /// @param toRepaymentE18 The amount of stablecoins which will be burned as a debt repayment\\n    /// @param toFoundationE18 The amount of stablecoins which will be transfered to the foundation\\n    ///     (fees and the excess of stablecoins over the debt amount)\\n    function _deferStablecoinsE18(\\n        address stablecoinToken,\\n        uint256 liquidationBlock,\\n        uint256 toRepaymentE18,\\n        uint256 toFoundationE18\\n    ) internal {\\n        DeferredStablecoinAmount storage deferredAmount = _deferredStablecoinAmounts[stablecoinToken];\\n        deferredAmount.toRepaymentE18 += toRepaymentE18;\\n        deferredAmount.toFoundationE18 += toFoundationE18;\\n        if (deferredAmount.liquidationBlock == 0) {\\n            deferredAmount.liquidationBlock = liquidationBlock;\\n        }\\n    }\\n\\n    /// @notice Returns deferred stablecoins for burning and transferring to the foundation\\n    /// @param stablecoinToken The address of the stablecoin token\\n    /// @param amountE18 The total number of stablecoins which will be returned\\n    /// @return toRepaymentE18 The amount of stablecoins which will be burned as a debt repayment\\n    /// @return toFoundationE18 The amount of stablecoins which will be transfered to the foundation\\n    function _popDeferredStablecoinsE18(\\n        address stablecoinToken,\\n        uint256 amountE18\\n    ) internal returns (uint256 toRepaymentE18, uint256 toFoundationE18) {\\n        if (amountE18 == 0) revert NotEnoughAmount();\\n\\n        DeferredStablecoinAmount storage deferredAmount = _deferredStablecoinAmounts[stablecoinToken];\\n        if (deferredAmount.liquidationBlock == 0) revert NotEnoughDeferredAmount();\\n\\n        // calculate conservative discount\\n        uint256 discountE18 = calculateDiscountE18(\\n            stablecoinToken,\\n            DiscountType.conservative,\\n            deferredAmount.liquidationBlock\\n        );\\n\\n        (toRepaymentE18, toFoundationE18) = _calculateProportion(deferredAmount, amountE18);\\n\\n        // decrease an amount of deferred stablecoins\\n        if (toRepaymentE18 != 0) {\\n            deferredAmount.toRepaymentE18 -= toRepaymentE18;\\n        }\\n        if (toFoundationE18 != 0) {\\n            deferredAmount.toFoundationE18 -= toFoundationE18;\\n        }\\n\\n        if (deferredAmount.toRepaymentE18 == 0 && deferredAmount.toFoundationE18 == 0) {\\n            delete _deferredStablecoinAmounts[stablecoinToken];\\n        }\\n\\n        // apply the conservative discount. it reduces a payment in USDPro which pays the sender\\n        toRepaymentE18 = toRepaymentE18 * 1e18 / (1e18 + discountE18);\\n        toFoundationE18 = toFoundationE18 * 1e18 / (1e18 + discountE18);\\n        console.log(\\\"DISCOUNTS (discountE18, suToRepayment, suToFoundation)\\\", discountE18, toRepaymentE18, toFoundationE18);\\n    }\\n\\n    function _calculateProportion(\\n        DeferredStablecoinAmount memory deferredAmount,\\n        uint256 amountE18\\n    ) internal pure returns (uint256 toRepaymentE18, uint256 toFoundationE18) {\\n        // Firstly we try to empty the \\\"toRepaymentE18\\\"\\n        // TODO: should find out the correct proportion between toRepayment and toFoundation\\n\\n        if (amountE18 <= deferredAmount.toRepaymentE18) {\\n            toRepaymentE18 = amountE18;\\n        } else {\\n            amountE18 -= deferredAmount.toRepaymentE18;\\n            if (amountE18 > deferredAmount.toFoundationE18) revert TooMuchAmount();\\n\\n            toRepaymentE18 = deferredAmount.toRepaymentE18;\\n            toFoundationE18 = amountE18;\\n        }\\n    }\\n\\n    function _getAggressiveOrMiddleDiscountE18(\\n        address asset,\\n        address owner,\\n        uint256 liquidationBlock\\n    ) internal view returns (uint256) {\\n        DiscountType discountType = (owner == address(SU_REWARD)) ? DiscountType.middle : DiscountType.aggressive;\\n        return calculateDiscountE18(asset, discountType, liquidationBlock);\\n    }\\n}\\n\",\"keccak256\":\"0x469676fb968dfa7b5577b8098ac4c2303023af2d8af0e2b7c5d65ab09c3529a9\",\"license\":\"BSL 1.1\"},\"contracts/liquidator/SuLiquidationConstants.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nlibrary SuLiquidationConstants {\\n    uint256 internal constant AGGRESSIVE_DISCOUNT_LIMIT_PERCENT_E18 = 5e16;\\n    uint256 internal constant ONE_HUNDRED_PERCENT_E18 = 1e18;\\n}\",\"keccak256\":\"0x163d9f9d922d978a3a7bc69baeae343765e143c20879433dbc1373f5d934f43f\",\"license\":\"UNLICENSED\"},\"contracts/liquidator/SuLiquidationDiscount.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"../access-control/SuAuthenticated.sol\\\";\\nimport \\\"../interfaces/ISuLiquidationDiscount.sol\\\";\\nimport \\\"./SuLiquidationConstants.sol\\\";\\nimport \\\"./SuLiquidationStructs.sol\\\";\\n\\ncontract SuLiquidationDiscount is ISuLiquidationDiscount, SuAuthenticated {\\n    error IncorrectDiscount();\\n\\n    // asset => discountType(aggressive, middle, conservative) => discount info:\\n    //    - percent of discount at the first block\\n    //    - increment of discount per block in percentages\\n    mapping(address => mapping(DiscountType => DiscountInfo)) internal _discountsInfo;\\n\\n    function init(address _authControl) public initializer {\\n        __SuAuthenticated_init(_authControl);\\n    }\\n\\n    /// @notice Only owner is able to call this function\\n    /// @dev Sets the liquidation discount\\n    /// @param asset The address of the asset token\\n    /// @param discountType Determines how aggressively the lending module offers a discount\\n    /// @param discountInfo Determines discount percentages depending on a block number\\n    function setDiscountInfo(\\n        address asset,\\n        DiscountType discountType,\\n        DiscountInfo calldata discountInfo\\n    ) external override onlyOwner {\\n        // check that discount percentage less than a limit(e.g. 100%)\\n        _verifyDiscountInfo(discountType, discountInfo);\\n        _discountsInfo[asset][discountType] = discountInfo;\\n    }\\n\\n    /// @notice Returns information about discount percentages depending on a block number\\n    /// @param asset The address of the asset token\\n    /// @param discountType Type of discount determines how aggressively the lending module offers a discount\\n    function getDiscountInfo(\\n        address asset,\\n        DiscountType discountType\\n    ) external view override returns (DiscountInfo memory discountInfo) {\\n        return _discountsInfo[asset][discountType];\\n    }\\n\\n    /// @dev This is a linear function of the discount change.\\n    ///     Calculates the liquidation discount by passed blocks.\\n    /// @param asset The address of the main collateral token\\n    /// @param discountType Determines how aggressively the lending module offers a discount\\n    /// @param liquidationBlock The block number when the liquidation was triggered\\n    /// @return Amount of discount in percents, E18 format\\n    function calculateDiscountE18(\\n        address asset,\\n        DiscountType discountType,\\n        uint256 liquidationBlock\\n    ) public view override returns (uint256) {\\n        DiscountInfo storage discountInfo = _discountsInfo[asset][discountType];\\n\\n        // number of blocks between the liquidation starts and now\\n        uint256 blocksPast = block.number - liquidationBlock;\\n\\n        if (blocksPast == 0) {\\n            return 0;\\n        } else if (blocksPast == 1) {\\n            return discountInfo.firstBlockE18;\\n        } else {\\n\\n            if (discountType == DiscountType.aggressive) {\\n                // the aggressive discount starts the second block with a number equals the stepPerBlockE18\\n                return _discountFormula(\\n                    blocksPast,\\n                    SuLiquidationConstants.AGGRESSIVE_DISCOUNT_LIMIT_PERCENT_E18,\\n                    discountInfo.stepPerBlockE18,\\n                    discountInfo.stepPerBlockE18,\\n                    2\\n                );\\n            } else {\\n                return _discountFormula(\\n                    blocksPast,\\n                    SuLiquidationConstants.ONE_HUNDRED_PERCENT_E18,\\n                    discountInfo.firstBlockE18,\\n                    discountInfo.stepPerBlockE18,\\n                    1\\n                );\\n            }\\n        }\\n    }\\n\\n    /// @notice Returns percentages of discount by passed blocks from liquidation start\\n    /// @param blocksPast The number of blocks passed after the liquidation was triggered\\n    /// @param limitDiscountE18 The upper limit of discount in percentage\\n    /// @param initialDiscountE18 Starting discount\\n    /// @param stepPerBlockE18 Increment of discount per block in percentages\\n    /// @param initialBlockNumber The block number which the increment of discount starts from\\n    function _discountFormula(\\n        uint256 blocksPast,\\n        uint256 limitDiscountE18,\\n        uint256 initialDiscountE18,\\n        uint256 stepPerBlockE18,\\n        uint256 initialBlockNumber\\n    ) internal pure returns (uint256) {\\n        uint256 discountE18 = initialDiscountE18 + (blocksPast - initialBlockNumber) * stepPerBlockE18;\\n\\n        // return the limit discount if the block number went over the limit\\n        return (discountE18 > limitDiscountE18) ? limitDiscountE18 : discountE18;\\n    }\\n\\n    function _verifyDiscountInfo(DiscountType discountType, DiscountInfo calldata discountInfo) internal pure {\\n\\n        // the aggressive discount has a special upper limit\\n        uint256 limitDiscountE18;\\n        if (discountType == DiscountType.aggressive) {\\n            limitDiscountE18 = SuLiquidationConstants.AGGRESSIVE_DISCOUNT_LIMIT_PERCENT_E18;\\n        } else {\\n            limitDiscountE18 = SuLiquidationConstants.ONE_HUNDRED_PERCENT_E18;\\n        }\\n\\n        if (discountInfo.firstBlockE18 >= limitDiscountE18 || discountInfo.stepPerBlockE18 >= limitDiscountE18) {\\n            revert IncorrectDiscount();\\n        }\\n    }\\n}\",\"keccak256\":\"0xf2c34c36cea2228c270fcbe36b835a3a53d94579bff91621505ed54317ec747b\",\"license\":\"UNLICENSED\"},\"contracts/liquidator/SuLiquidationStructs.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\n// We have three discount strategies(numbers as an example):\\n//\\n// Mode #1 - aggressive: The lending module sells ASAP\\n// Discount goes from 0.1% first block, 1% second block, goes linear +1% minute\\n//\\n// Mode #2 - middle: The lending module sells some asset for whitelisted stablecoin as expensive as possible, no rush\\n// Discount goes from 0.1% first block, liner increase +0.1% minute\\n//\\n// Mode #3 - conservative: The lending module sells stablecoin(USDC) for USDPro as expensive as possible, no rush\\n// Discount goes from 0.01% first block, goes linear until 5% max in one day or so\\n\\nenum DiscountType {\\n    aggressive,\\n    middle,\\n    conservative\\n}\\n\\n// firstBlockE18 - percent of discount at the first block\\n// stepPerBlockE18 - percent of discount which will be incremented per block after N>=2 block\\nstruct DiscountInfo {\\n    uint256 firstBlockE18;\\n    uint256 stepPerBlockE18;\\n}\\n\\n// liquidationBlock - the block number when the liquidation was triggered.\\n//      It will turn into zero when all deferred stablecoins(toRepaymentE18 and toFoundationE18) be sold.\\n// toRepaymentE18 - amount of stablecoins which will be burned as debt repayment.\\n//      Actually, we can not burn it, because it is not a USDPro. So, we deferred that amounts of stablecoins\\n//      until someone swaps the stablecoins to USDPro(see swapUsdProToStablecoin())\\n// toFoundationE18 - amount of stablecoins which will be transfered to the foundation.\\n//      Has the same idea like \\\"toRepaymentE18\\\",\\n//      but about an excess of stablecoins over debt repayment\\nstruct DeferredStablecoinAmount {\\n    uint256 liquidationBlock;\\n    uint256 toRepaymentE18;\\n    uint256 toFoundationE18;\\n}\",\"keccak256\":\"0x948f8e21f85c18bd9c26c487a2532df297521efcbfd3479e54faf1a21b6b7acf\",\"license\":\"UNLICENSED\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611e7b806100206000396000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c806395bdf6bb1161008c578063d539139311610066578063d5391393146101f1578063dc97e84e14610218578063f4e2ebeb1461023f578063f8c8765e1461025257600080fd5b806395bdf6bb146101b8578063b08c4c8c146101cb578063c3009f36146101de57600080fd5b806319ab453c116100bd57806319ab453c146101645780633599f022146101775780634d2cf8b7146101a557600080fd5b806303ee9f22146100e457806314c376dc1461011a578063190e8c4c1461014f575b600080fd5b6000546100fd906201000090046001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6101417fe965846df3dd5b1dfa65f58e31477079e90140e0908b6dd31b5aead5a57cf36581565b604051908152602001610111565b61016261015d366004611a76565b610265565b005b610162610172366004611983565b610345565b61018a610185366004611ab7565b61041c565b60408051825181526020928301519281019290925201610111565b6101416101b336600461199d565b6104bd565b6101626101c6366004611a22565b61055b565b6101626101d9366004611b68565b6107a2565b6101416101ec366004611b2d565b6108eb565b6101417f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b6101417f9a9aef7c1247d5fc769b0185c052913e39673da29a880317dfd20ebf86f26a4981565b61016261024d366004611ae0565b6109fa565b6101626102603660046119cf565b610b6d565b600080600061027687878787610ce4565b6002546040517f6bf12d5f0000000000000000000000000000000000000000000000000000000081526001600160a01b038c811660048301528b81166024830152336044830152606482018590526084820184905260a482018690529497509295509093509190911690636bf12d5f9060c401602060405180830381600087803b15801561030357600080fd5b505af1158015610317573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033b9190611b91565b5050505050505050565b600054610100900460ff166103605760005460ff1615610364565b303b155b6103db5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600054610100900460ff161580156103fd576000805461ffff19166101011790555b61040682610ebf565b8015610418576000805461ff00191690555b5050565b60408051808201909152600080825260208201526001600160a01b03831660009081526001602052604081209083600281111561046957634e487b7160e01b600052602160045260246000fd5b600281111561048857634e487b7160e01b600052602160045260246000fd5b815260200190815260200160002060405180604001604052908160008201548152602001600182015481525050905092915050565b6002546040516304c9a55560e41b81526001600160a01b03848116600483015283811660248301526000928392911690634c9a55509060440160206040518083038186803b15801561050e57600080fd5b505afa158015610522573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105469190611bb1565b9050610553848483610f7c565b949350505050565b6003546040516306addfb360e31b81526001600160a01b038581166004830152600092169063356efd989060240160206040518083038186803b1580156105a157600080fd5b505afa1580156105b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d99190611bb1565b90506000670de0b6b3a76400006105f08584611cff565b6105fa9190611cdf565b9050600080600061060d8a8a8689610ce4565b919450925090506000856106218385611cc7565b61063390670de0b6b3a7640000611cff565b61063d9190611cdf565b905061064b89333084610fb6565b6002546040516304c9a55560e41b81526001600160a01b038d811660048301528c811660248301526000921690634c9a55509060440160206040518083038186803b15801561069957600080fd5b505afa1580156106ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d19190611bb1565b90506106df8a828686611058565b6002546040517f6f70e66f0000000000000000000000000000000000000000000000000000000081526001600160a01b038e811660048301528d81166024830152336044830152606482018790526084820188905290911690636f70e66f9060a401602060405180830381600087803b15801561075b57600080fd5b505af115801561076f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107939190611b91565b50505050505050505050505050565b6003546040516306addfb360e31b81526001600160a01b038481166004830152600092670de0b6b3a76400009285929091169063356efd989060240160206040518083038186803b1580156107f657600080fd5b505afa15801561080a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082e9190611bb1565b6108389190611cff565b6108429190611cdf565b905060008061085185846110b4565b6002546040517f8cd2e0c700000000000000000000000000000000000000000000000000000000815233600482015260248101849052604481018390529294509092506001600160a01b031690638cd2e0c790606401600060405180830381600087803b1580156108c157600080fd5b505af11580156108d5573d6000803e3d6000fd5b505050506108e4853386611293565b5050505050565b6001600160a01b038316600090815260016020526040812081908185600281111561092657634e487b7160e01b600052602160045260246000fd5b600281111561094557634e487b7160e01b600052602160045260246000fd5b81526020019081526020016000209050600083436109639190611d1e565b905080610975576000925050506109f3565b806001141561098757505490506109f3565b60008560028111156109a957634e487b7160e01b600052602160045260246000fd5b14156109d5576109cc8166b1a2bc2ec500008460010154856001015460026112e1565b925050506109f3565b6109cc81670de0b6b3a76400008460000154856001015460016112e1565b9392505050565b600080546040517f91d1485400000000000000000000000000000000000000000000000000000000815260048101929092523360248301526201000090046001600160a01b0316906391d148549060440160206040518083038186803b158015610a6357600080fd5b505afa158015610a77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9b9190611b91565b610ae75760405162461bcd60e51b815260206004820152601d60248201527f5375417574683a206f6e6c794f776e657220415554485f4641494c454400000060448201526064016103d2565b610af1828261131f565b6001600160a01b03831660009081526001602052604081208291846002811115610b2b57634e487b7160e01b600052602160045260246000fd5b6002811115610b4a57634e487b7160e01b600052602160045260246000fd5b8152602080820192909252604001600020823581559082013560018201556108e4565b600054610100900460ff16610b885760005460ff1615610b8c565b303b155b610bfe5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016103d2565b600054610100900460ff16158015610c20576000805461ffff19166101011790555b610c2985610345565b6001600160a01b038416610c505760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b038316610c775760405163d92e233d60e01b815260040160405180910390fd5b600280546001600160a01b038087167fffffffffffffffffffffffff00000000000000000000000000000000000000009283161790925560038054868416908316179055600480549285169290911691909117905580156108e4576000805461ff00191690555050505050565b6002546040517fb33dc1900000000000000000000000000000000000000000000000000000000081526001600160a01b0386811660048301528581166024830152600092839283928392839283929091169063b33dc1909060440160606040518083038186803b158015610d5757600080fd5b505afa158015610d6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8f9190611bc9565b925092509250610db96040518060600160405280602c8152602001611de7602c91398484846113ac565b6000610dc68b8b86610f7c565b6003546040516306addfb360e31b81526001600160a01b038e811660048301529293506000929091169063356efd989060240160206040518083038186803b158015610e1157600080fd5b505afa158015610e25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e499190611bb1565b9050600080610e5a838d888761140e565b915091508a821015610e98576040517fe4e014cd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080610ea5878461157e565b949c509a5092985050505050505050509450945094915050565b600054610100900460ff16610f3c5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016103d2565b600080546001600160a01b0390921662010000027fffffffffffffffffffff0000000000000000000000000000000000000000ffff909216919091179055565b60045460009081906001600160a01b03858116911614610f9d576000610fa0565b60015b9050610fad8582856108eb565b95945050505050565b6040516001600160a01b03808516602483015283166044820152606481018290526110529085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b60408051601f198184030181529190526020810180516001600160e01b03167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526115a8565b50505050565b6001600160a01b038416600090815260056020526040812060018101805491928592611085908490611cc7565b92505081905550818160020160008282546110a09190611cc7565b909155505080546108e45792909255505050565b600080826110ee576040517fe008b5f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0384166000908152600560205260409020805461113e576040517f895afd9500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061115086600284600001546108eb565b604080516060810182528454815260018501546020820152600285015491810191909152909150611181908661168d565b909450925083156111a657838260010160008282546111a09190611d1e565b90915550505b82156111c657828260020160008282546111c09190611d1e565b90915550505b60018201541580156111da57506002820154155b15611206576001600160a01b038616600090815260056020526040812081815560018101829055600201555b61121881670de0b6b3a7640000611cc7565b61122a85670de0b6b3a7640000611cff565b6112349190611cdf565b935061124881670de0b6b3a7640000611cc7565b61125a84670de0b6b3a7640000611cff565b6112649190611cdf565b925061128a604051806060016040528060368152602001611db1603691398286866113ac565b50509250929050565b6040516001600160a01b0383166024820152604481018290526112dc9084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401611003565b505050565b600080836112ef8489611d1e565b6112f99190611cff565b6113039086611cc7565b90508581116113125780611314565b855b979650505050505050565b60008083600281111561134257634e487b7160e01b600052602160045260246000fd5b1415611356575066b1a2bc2ec50000611361565b50670de0b6b3a76400005b813581111580611375575080826020013510155b156112dc576040517f8478aedc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611052848484846040516024016113c69493929190611c98565b60408051601f198184030181529190526020810180516001600160e01b03167f08ee5666000000000000000000000000000000000000000000000000000000001790526116fe565b60008080670de0b6b3a76400006114258689611cff565b61142f9190611cdf565b9050611455604051806060016040528060338152602001611e13603391398689846113ac565b611478604051806060016040528060398152602001611d7860399139878661171f565b600061148582888761177f565b6040805180820190915260208082527f43414c435f424f4e555320737461626c65636f696e2072656d61696e6465723a9082015291985091506114d1906114cc8385611d1e565b6117f6565b60408051808201909152601c81527f43414c435f424f4e555320737461626c65636f696e20626f6e75733a000000006020820152611513906114cc8984611d1e565b6115526040518060400160405280601e81526020017f43414c435f424f4e555320737461626c65636f696e207061796d656e743a0000815250886117f6565b60008861156783670de0b6b3a7640000611cff565b6115719190611cdf565b9997985050505050505050565b6000808383111561159d576115938484611d1e565b90508391506115a1565b8291505b9250929050565b60006115fd826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166118549092919063ffffffff16565b8051909150156112dc578080602001905181019061161b9190611b91565b6112dc5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016103d2565b600080836020015183116116a3578291506115a1565b60208401516116b29084611d1e565b925083604001518311156116f2576040517f35e8282000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50506020919091015191565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b6112dc83838360405160240161173793929190611c73565b60408051601f198184030181529190526020810180516001600160e01b03167f969cdd03000000000000000000000000000000000000000000000000000000001790526116fe565b600080670de0b6b3a76400006117958482611cc7565b61179f9086611cff565b6117a99190611cdf565b9050848111156117ea5750836117c783670de0b6b3a7640000611cc7565b6117d986670de0b6b3a7640000611cff565b6117e39190611cdf565b91506117ee565b8391505b935093915050565b610418828260405160240161180c929190611c51565b60408051601f198184030181529190526020810180516001600160e01b03167f9710a9d0000000000000000000000000000000000000000000000000000000001790526116fe565b60606105538484600085856001600160a01b0385163b6118b65760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103d2565b600080866001600160a01b031685876040516118d29190611c22565b60006040518083038185875af1925050503d806000811461190f576040519150601f19603f3d011682016040523d82523d6000602084013e611914565b606091505b50915091506113148282866060831561192e5750816109f3565b82511561193e5782518084602001fd5b8160405162461bcd60e51b81526004016103d29190611c3e565b80356001600160a01b038116811461196f57600080fd5b919050565b80356003811061196f57600080fd5b600060208284031215611994578081fd5b6109f382611958565b600080604083850312156119af578081fd5b6119b883611958565b91506119c660208401611958565b90509250929050565b600080600080608085870312156119e4578182fd5b6119ed85611958565b93506119fb60208601611958565b9250611a0960408601611958565b9150611a1760608601611958565b905092959194509250565b600080600080600060a08688031215611a39578081fd5b611a4286611958565b9450611a5060208701611958565b9350611a5e60408701611958565b94979396509394606081013594506080013592915050565b60008060008060808587031215611a8b578384fd5b611a9485611958565b9350611aa260208601611958565b93969395505050506040820135916060013590565b60008060408385031215611ac9578182fd5b611ad283611958565b91506119c660208401611974565b60008060008385036080811215611af5578384fd5b611afe85611958565b9350611b0c60208601611974565b92506040603f1982011215611b1f578182fd5b506040840190509250925092565b600080600060608486031215611b41578283fd5b611b4a84611958565b9250611b5860208501611974565b9150604084013590509250925092565b60008060408385031215611b7a578182fd5b611b8383611958565b946020939093013593505050565b600060208284031215611ba2578081fd5b815180151581146109f3578182fd5b600060208284031215611bc2578081fd5b5051919050565b600080600060608486031215611bdd578283fd5b8351925060208401519150604084015190509250925092565b60008151808452611c0e816020860160208601611d35565b601f01601f19169290920160200192915050565b60008251611c34818460208701611d35565b9190910192915050565b6020815260006109f36020830184611bf6565b604081526000611c646040830185611bf6565b90508260208301529392505050565b606081526000611c866060830186611bf6565b60208301949094525060400152919050565b608081526000611cab6080830187611bf6565b6020830195909552506040810192909252606090910152919050565b60008219821115611cda57611cda611d61565b500190565b600082611cfa57634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615611d1957611d19611d61565b500290565b600082821015611d3057611d30611d61565b500390565b60005b83811015611d50578181015183820152602001611d38565b838111156110525750506000910152565b634e487b7160e01b600052601160045260246000fdfe43414c435f424f4e555320737461626c65636f696e2028737461626c65636f696e416d6f756e744531382c20646973636f756e74453138293a444953434f554e54532028646973636f756e744531382c207375546f52657061796d656e742c207375546f466f756e646174696f6e294c49515549444154494f4e20504152414d532028626c6f636b2c20636f6c6c617465726c2c2064656274293a43414c435f424f4e555320636f6c6c61746572616c28616d6f756e74202a207072696365203d20617373657456616c7565293aa2646970667358221220ad4ab6ec5df3e73395c76f4bd60d4ea98043d2877500d50c17579cc4e6ac16ca64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100df5760003560e01c806395bdf6bb1161008c578063d539139311610066578063d5391393146101f1578063dc97e84e14610218578063f4e2ebeb1461023f578063f8c8765e1461025257600080fd5b806395bdf6bb146101b8578063b08c4c8c146101cb578063c3009f36146101de57600080fd5b806319ab453c116100bd57806319ab453c146101645780633599f022146101775780634d2cf8b7146101a557600080fd5b806303ee9f22146100e457806314c376dc1461011a578063190e8c4c1461014f575b600080fd5b6000546100fd906201000090046001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6101417fe965846df3dd5b1dfa65f58e31477079e90140e0908b6dd31b5aead5a57cf36581565b604051908152602001610111565b61016261015d366004611a76565b610265565b005b610162610172366004611983565b610345565b61018a610185366004611ab7565b61041c565b60408051825181526020928301519281019290925201610111565b6101416101b336600461199d565b6104bd565b6101626101c6366004611a22565b61055b565b6101626101d9366004611b68565b6107a2565b6101416101ec366004611b2d565b6108eb565b6101417f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b6101417f9a9aef7c1247d5fc769b0185c052913e39673da29a880317dfd20ebf86f26a4981565b61016261024d366004611ae0565b6109fa565b6101626102603660046119cf565b610b6d565b600080600061027687878787610ce4565b6002546040517f6bf12d5f0000000000000000000000000000000000000000000000000000000081526001600160a01b038c811660048301528b81166024830152336044830152606482018590526084820184905260a482018690529497509295509093509190911690636bf12d5f9060c401602060405180830381600087803b15801561030357600080fd5b505af1158015610317573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033b9190611b91565b5050505050505050565b600054610100900460ff166103605760005460ff1615610364565b303b155b6103db5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600054610100900460ff161580156103fd576000805461ffff19166101011790555b61040682610ebf565b8015610418576000805461ff00191690555b5050565b60408051808201909152600080825260208201526001600160a01b03831660009081526001602052604081209083600281111561046957634e487b7160e01b600052602160045260246000fd5b600281111561048857634e487b7160e01b600052602160045260246000fd5b815260200190815260200160002060405180604001604052908160008201548152602001600182015481525050905092915050565b6002546040516304c9a55560e41b81526001600160a01b03848116600483015283811660248301526000928392911690634c9a55509060440160206040518083038186803b15801561050e57600080fd5b505afa158015610522573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105469190611bb1565b9050610553848483610f7c565b949350505050565b6003546040516306addfb360e31b81526001600160a01b038581166004830152600092169063356efd989060240160206040518083038186803b1580156105a157600080fd5b505afa1580156105b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d99190611bb1565b90506000670de0b6b3a76400006105f08584611cff565b6105fa9190611cdf565b9050600080600061060d8a8a8689610ce4565b919450925090506000856106218385611cc7565b61063390670de0b6b3a7640000611cff565b61063d9190611cdf565b905061064b89333084610fb6565b6002546040516304c9a55560e41b81526001600160a01b038d811660048301528c811660248301526000921690634c9a55509060440160206040518083038186803b15801561069957600080fd5b505afa1580156106ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d19190611bb1565b90506106df8a828686611058565b6002546040517f6f70e66f0000000000000000000000000000000000000000000000000000000081526001600160a01b038e811660048301528d81166024830152336044830152606482018790526084820188905290911690636f70e66f9060a401602060405180830381600087803b15801561075b57600080fd5b505af115801561076f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107939190611b91565b50505050505050505050505050565b6003546040516306addfb360e31b81526001600160a01b038481166004830152600092670de0b6b3a76400009285929091169063356efd989060240160206040518083038186803b1580156107f657600080fd5b505afa15801561080a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082e9190611bb1565b6108389190611cff565b6108429190611cdf565b905060008061085185846110b4565b6002546040517f8cd2e0c700000000000000000000000000000000000000000000000000000000815233600482015260248101849052604481018390529294509092506001600160a01b031690638cd2e0c790606401600060405180830381600087803b1580156108c157600080fd5b505af11580156108d5573d6000803e3d6000fd5b505050506108e4853386611293565b5050505050565b6001600160a01b038316600090815260016020526040812081908185600281111561092657634e487b7160e01b600052602160045260246000fd5b600281111561094557634e487b7160e01b600052602160045260246000fd5b81526020019081526020016000209050600083436109639190611d1e565b905080610975576000925050506109f3565b806001141561098757505490506109f3565b60008560028111156109a957634e487b7160e01b600052602160045260246000fd5b14156109d5576109cc8166b1a2bc2ec500008460010154856001015460026112e1565b925050506109f3565b6109cc81670de0b6b3a76400008460000154856001015460016112e1565b9392505050565b600080546040517f91d1485400000000000000000000000000000000000000000000000000000000815260048101929092523360248301526201000090046001600160a01b0316906391d148549060440160206040518083038186803b158015610a6357600080fd5b505afa158015610a77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9b9190611b91565b610ae75760405162461bcd60e51b815260206004820152601d60248201527f5375417574683a206f6e6c794f776e657220415554485f4641494c454400000060448201526064016103d2565b610af1828261131f565b6001600160a01b03831660009081526001602052604081208291846002811115610b2b57634e487b7160e01b600052602160045260246000fd5b6002811115610b4a57634e487b7160e01b600052602160045260246000fd5b8152602080820192909252604001600020823581559082013560018201556108e4565b600054610100900460ff16610b885760005460ff1615610b8c565b303b155b610bfe5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016103d2565b600054610100900460ff16158015610c20576000805461ffff19166101011790555b610c2985610345565b6001600160a01b038416610c505760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b038316610c775760405163d92e233d60e01b815260040160405180910390fd5b600280546001600160a01b038087167fffffffffffffffffffffffff00000000000000000000000000000000000000009283161790925560038054868416908316179055600480549285169290911691909117905580156108e4576000805461ff00191690555050505050565b6002546040517fb33dc1900000000000000000000000000000000000000000000000000000000081526001600160a01b0386811660048301528581166024830152600092839283928392839283929091169063b33dc1909060440160606040518083038186803b158015610d5757600080fd5b505afa158015610d6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8f9190611bc9565b925092509250610db96040518060600160405280602c8152602001611de7602c91398484846113ac565b6000610dc68b8b86610f7c565b6003546040516306addfb360e31b81526001600160a01b038e811660048301529293506000929091169063356efd989060240160206040518083038186803b158015610e1157600080fd5b505afa158015610e25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e499190611bb1565b9050600080610e5a838d888761140e565b915091508a821015610e98576040517fe4e014cd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080610ea5878461157e565b949c509a5092985050505050505050509450945094915050565b600054610100900460ff16610f3c5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016103d2565b600080546001600160a01b0390921662010000027fffffffffffffffffffff0000000000000000000000000000000000000000ffff909216919091179055565b60045460009081906001600160a01b03858116911614610f9d576000610fa0565b60015b9050610fad8582856108eb565b95945050505050565b6040516001600160a01b03808516602483015283166044820152606481018290526110529085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b60408051601f198184030181529190526020810180516001600160e01b03167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526115a8565b50505050565b6001600160a01b038416600090815260056020526040812060018101805491928592611085908490611cc7565b92505081905550818160020160008282546110a09190611cc7565b909155505080546108e45792909255505050565b600080826110ee576040517fe008b5f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0384166000908152600560205260409020805461113e576040517f895afd9500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061115086600284600001546108eb565b604080516060810182528454815260018501546020820152600285015491810191909152909150611181908661168d565b909450925083156111a657838260010160008282546111a09190611d1e565b90915550505b82156111c657828260020160008282546111c09190611d1e565b90915550505b60018201541580156111da57506002820154155b15611206576001600160a01b038616600090815260056020526040812081815560018101829055600201555b61121881670de0b6b3a7640000611cc7565b61122a85670de0b6b3a7640000611cff565b6112349190611cdf565b935061124881670de0b6b3a7640000611cc7565b61125a84670de0b6b3a7640000611cff565b6112649190611cdf565b925061128a604051806060016040528060368152602001611db1603691398286866113ac565b50509250929050565b6040516001600160a01b0383166024820152604481018290526112dc9084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401611003565b505050565b600080836112ef8489611d1e565b6112f99190611cff565b6113039086611cc7565b90508581116113125780611314565b855b979650505050505050565b60008083600281111561134257634e487b7160e01b600052602160045260246000fd5b1415611356575066b1a2bc2ec50000611361565b50670de0b6b3a76400005b813581111580611375575080826020013510155b156112dc576040517f8478aedc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611052848484846040516024016113c69493929190611c98565b60408051601f198184030181529190526020810180516001600160e01b03167f08ee5666000000000000000000000000000000000000000000000000000000001790526116fe565b60008080670de0b6b3a76400006114258689611cff565b61142f9190611cdf565b9050611455604051806060016040528060338152602001611e13603391398689846113ac565b611478604051806060016040528060398152602001611d7860399139878661171f565b600061148582888761177f565b6040805180820190915260208082527f43414c435f424f4e555320737461626c65636f696e2072656d61696e6465723a9082015291985091506114d1906114cc8385611d1e565b6117f6565b60408051808201909152601c81527f43414c435f424f4e555320737461626c65636f696e20626f6e75733a000000006020820152611513906114cc8984611d1e565b6115526040518060400160405280601e81526020017f43414c435f424f4e555320737461626c65636f696e207061796d656e743a0000815250886117f6565b60008861156783670de0b6b3a7640000611cff565b6115719190611cdf565b9997985050505050505050565b6000808383111561159d576115938484611d1e565b90508391506115a1565b8291505b9250929050565b60006115fd826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166118549092919063ffffffff16565b8051909150156112dc578080602001905181019061161b9190611b91565b6112dc5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016103d2565b600080836020015183116116a3578291506115a1565b60208401516116b29084611d1e565b925083604001518311156116f2576040517f35e8282000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50506020919091015191565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b6112dc83838360405160240161173793929190611c73565b60408051601f198184030181529190526020810180516001600160e01b03167f969cdd03000000000000000000000000000000000000000000000000000000001790526116fe565b600080670de0b6b3a76400006117958482611cc7565b61179f9086611cff565b6117a99190611cdf565b9050848111156117ea5750836117c783670de0b6b3a7640000611cc7565b6117d986670de0b6b3a7640000611cff565b6117e39190611cdf565b91506117ee565b8391505b935093915050565b610418828260405160240161180c929190611c51565b60408051601f198184030181529190526020810180516001600160e01b03167f9710a9d0000000000000000000000000000000000000000000000000000000001790526116fe565b60606105538484600085856001600160a01b0385163b6118b65760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103d2565b600080866001600160a01b031685876040516118d29190611c22565b60006040518083038185875af1925050503d806000811461190f576040519150601f19603f3d011682016040523d82523d6000602084013e611914565b606091505b50915091506113148282866060831561192e5750816109f3565b82511561193e5782518084602001fd5b8160405162461bcd60e51b81526004016103d29190611c3e565b80356001600160a01b038116811461196f57600080fd5b919050565b80356003811061196f57600080fd5b600060208284031215611994578081fd5b6109f382611958565b600080604083850312156119af578081fd5b6119b883611958565b91506119c660208401611958565b90509250929050565b600080600080608085870312156119e4578182fd5b6119ed85611958565b93506119fb60208601611958565b9250611a0960408601611958565b9150611a1760608601611958565b905092959194509250565b600080600080600060a08688031215611a39578081fd5b611a4286611958565b9450611a5060208701611958565b9350611a5e60408701611958565b94979396509394606081013594506080013592915050565b60008060008060808587031215611a8b578384fd5b611a9485611958565b9350611aa260208601611958565b93969395505050506040820135916060013590565b60008060408385031215611ac9578182fd5b611ad283611958565b91506119c660208401611974565b60008060008385036080811215611af5578384fd5b611afe85611958565b9350611b0c60208601611974565b92506040603f1982011215611b1f578182fd5b506040840190509250925092565b600080600060608486031215611b41578283fd5b611b4a84611958565b9250611b5860208501611974565b9150604084013590509250925092565b60008060408385031215611b7a578182fd5b611b8383611958565b946020939093013593505050565b600060208284031215611ba2578081fd5b815180151581146109f3578182fd5b600060208284031215611bc2578081fd5b5051919050565b600080600060608486031215611bdd578283fd5b8351925060208401519150604084015190509250925092565b60008151808452611c0e816020860160208601611d35565b601f01601f19169290920160200192915050565b60008251611c34818460208701611d35565b9190910192915050565b6020815260006109f36020830184611bf6565b604081526000611c646040830185611bf6565b90508260208301529392505050565b606081526000611c866060830186611bf6565b60208301949094525060400152919050565b608081526000611cab6080830187611bf6565b6020830195909552506040810192909252606090910152919050565b60008219821115611cda57611cda611d61565b500190565b600082611cfa57634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615611d1957611d19611d61565b500290565b600082821015611d3057611d30611d61565b500390565b60005b83811015611d50578181015183820152602001611d38565b838111156110525750506000910152565b634e487b7160e01b600052601160045260246000fdfe43414c435f424f4e555320737461626c65636f696e2028737461626c65636f696e416d6f756e744531382c20646973636f756e74453138293a444953434f554e54532028646973636f756e744531382c207375546f52657061796d656e742c207375546f466f756e646174696f6e294c49515549444154494f4e20504152414d532028626c6f636b2c20636f6c6c617465726c2c2064656274293a43414c435f424f4e555320636f6c6c61746572616c28616d6f756e74202a207072696365203d20617373657456616c7565293aa2646970667358221220ad4ab6ec5df3e73395c76f4bd60d4ea98043d2877500d50c17579cc4e6ac16ca64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "calculateDiscountE18(address,uint8,uint256)": {
        "details": "This is a linear function of the discount change.     Calculates the liquidation discount by passed blocks.",
        "params": {
          "asset": "The address of the main collateral token",
          "discountType": "Determines how aggressively the lending module offers a discount",
          "liquidationBlock": "The block number when the liquidation was triggered"
        },
        "returns": {
          "_0": "Amount of discount in percents, E18 format"
        }
      },
      "calculateLiquidationDiscount(address,address)": {
        "params": {
          "asset": "The address of the collateral token",
          "owner": "The owner of the collateral"
        }
      },
      "getDiscountInfo(address,uint8)": {
        "params": {
          "asset": "The address of the asset token",
          "discountType": "Type of discount determines how aggressively the lending module offers a discount"
        }
      },
      "setDiscountInfo(address,uint8,(uint256,uint256))": {
        "details": "Sets the liquidation discount",
        "params": {
          "asset": "The address of the asset token",
          "discountInfo": "Determines discount percentages depending on a block number",
          "discountType": "Determines how aggressively the lending module offers a discount"
        }
      },
      "swapStablecoinToAsset(address,address,address,uint256,uint256)": {
        "details": "This is a first step of two",
        "params": {
          "asset": "The address of the collateral token",
          "minAssetAmountEDecimal": "The minimum amount of collateral which the liquidator desires to obtain",
          "owner": "The owner of the collateral",
          "stablecoinAmountEDecimal": "The amount of stablecoins for the collateral buyout",
          "stablecoinToken": "The address of the stablecoin token"
        }
      },
      "swapUsdProToAsset(address,address,uint256,uint256)": {
        "params": {
          "asset": "The address of the collateral token",
          "minAssetAmountEDecimal": "The minimum amount of collateral which the liquidator desires to obtain",
          "owner": "The owner of the collateral",
          "stablecoinAmountE18": "The amount of stablecoins for the collateral buyout"
        }
      },
      "swapUsdProToStablecoin(address,uint256)": {
        "details": "This is a second step of two",
        "params": {
          "stablecoinAmountEDecimal": "The amount of stablecoins",
          "stablecoinToken": "The address of the stablecoin token"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "calculateLiquidationDiscount(address,address)": {
        "notice": "Calculates a liquidation discount"
      },
      "getDiscountInfo(address,uint8)": {
        "notice": "Returns information about discount percentages depending on a block number"
      },
      "setDiscountInfo(address,uint8,(uint256,uint256))": {
        "notice": "Only owner is able to call this function"
      },
      "swapStablecoinToAsset(address,address,address,uint256,uint256)": {
        "notice": "Swaps stablecoins from the whitelist to the collateral"
      },
      "swapUsdProToAsset(address,address,uint256,uint256)": {
        "notice": "Swaps USDPro to the collateral"
      },
      "swapUsdProToStablecoin(address,uint256)": {
        "notice": "Swaps USDPro to stablecoins from the whitelist"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 454,
        "contract": "contracts/liquidator/SuLiquidation.sol:SuLiquidation",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 457,
        "contract": "contracts/liquidator/SuLiquidation.sol:SuLiquidation",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4355,
        "contract": "contracts/liquidator/SuLiquidation.sol:SuLiquidation",
        "label": "ACCESS_CONTROL_SINGLETON",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(ISuAccessControl)7493"
      },
      {
        "astId": 12084,
        "contract": "contracts/liquidator/SuLiquidation.sol:SuLiquidation",
        "label": "_discountsInfo",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_enum(DiscountType)12308,t_struct(DiscountInfo)12313_storage))"
      },
      {
        "astId": 11264,
        "contract": "contracts/liquidator/SuLiquidation.sol:SuLiquidation",
        "label": "SU_MANAGER",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ISuManager)7813"
      },
      {
        "astId": 11267,
        "contract": "contracts/liquidator/SuLiquidation.sol:SuLiquidation",
        "label": "SU_ORACLE",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ISuOracle)7885"
      },
      {
        "astId": 11270,
        "contract": "contracts/liquidator/SuLiquidation.sol:SuLiquidation",
        "label": "SU_REWARD",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IRewardChefV2)7412"
      },
      {
        "astId": 11275,
        "contract": "contracts/liquidator/SuLiquidation.sol:SuLiquidation",
        "label": "_deferredStablecoinAmounts",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(DeferredStablecoinAmount)12320_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IRewardChefV2)7412": {
        "encoding": "inplace",
        "label": "contract IRewardChefV2",
        "numberOfBytes": "20"
      },
      "t_contract(ISuAccessControl)7493": {
        "encoding": "inplace",
        "label": "contract ISuAccessControl",
        "numberOfBytes": "20"
      },
      "t_contract(ISuManager)7813": {
        "encoding": "inplace",
        "label": "contract ISuManager",
        "numberOfBytes": "20"
      },
      "t_contract(ISuOracle)7885": {
        "encoding": "inplace",
        "label": "contract ISuOracle",
        "numberOfBytes": "20"
      },
      "t_enum(DiscountType)12308": {
        "encoding": "inplace",
        "label": "enum DiscountType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_enum(DiscountType)12308,t_struct(DiscountInfo)12313_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(enum DiscountType => struct DiscountInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(DiscountType)12308,t_struct(DiscountInfo)12313_storage)"
      },
      "t_mapping(t_address,t_struct(DeferredStablecoinAmount)12320_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DeferredStablecoinAmount)",
        "numberOfBytes": "32",
        "value": "t_struct(DeferredStablecoinAmount)12320_storage"
      },
      "t_mapping(t_enum(DiscountType)12308,t_struct(DiscountInfo)12313_storage)": {
        "encoding": "mapping",
        "key": "t_enum(DiscountType)12308",
        "label": "mapping(enum DiscountType => struct DiscountInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(DiscountInfo)12313_storage"
      },
      "t_struct(DeferredStablecoinAmount)12320_storage": {
        "encoding": "inplace",
        "label": "struct DeferredStablecoinAmount",
        "members": [
          {
            "astId": 12315,
            "contract": "contracts/liquidator/SuLiquidation.sol:SuLiquidation",
            "label": "liquidationBlock",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 12317,
            "contract": "contracts/liquidator/SuLiquidation.sol:SuLiquidation",
            "label": "toRepaymentE18",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 12319,
            "contract": "contracts/liquidator/SuLiquidation.sol:SuLiquidation",
            "label": "toFoundationE18",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(DiscountInfo)12313_storage": {
        "encoding": "inplace",
        "label": "struct DiscountInfo",
        "members": [
          {
            "astId": 12310,
            "contract": "contracts/liquidator/SuLiquidation.sol:SuLiquidation",
            "label": "firstBlockE18",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 12312,
            "contract": "contracts/liquidator/SuLiquidation.sol:SuLiquidation",
            "label": "stepPerBlockE18",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}