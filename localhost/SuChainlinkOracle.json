{
  "address": "0x821f3361D454cc98b7555221A06Be563a7E2E0A6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_authControl",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ACCESS_CONTROL_SINGLETON",
      "outputs": [
        {
          "internalType": "contract ISuAccessControl",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VAULT_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "assetToDecimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "assetToFeed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getUsdPrice1e18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feed",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_decimals",
          "type": "uint8"
        }
      ],
      "name": "setAssetFeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa20ed211da2246fb4e59b219faf32341158a96dc971de841bb66d01c9a1ae9d6",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x821f3361D454cc98b7555221A06Be563a7E2E0A6",
    "transactionIndex": 0,
    "gasUsed": "479354",
    "logsBloom": "0x
    "blockHash": "0x525bef1e81e7f387aaac6eca99d1e314b7424dc646ab9596a55e726b6288807f",
    "transactionHash": "0xa20ed211da2246fb4e59b219faf32341158a96dc971de841bb66d01c9a1ae9d6",
    "logs": [],
    "blockNumber": 14518092,
    "cumulativeGasUsed": "479354",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8bCe54ff8aB45CB075b044AE117b8fD91F9351aB"
  ],
  "numDeployments": 1,
  "solcInputHash": "d1c3e992972545e414ac7f62b849d9a1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_authControl\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ACCESS_CONTROL_SINGLETON\",\"outputs\":[{\"internalType\":\"contract ISuAccessControl\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VAULT_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetToDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetToFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getUsdPrice1e18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feed\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"}],\"name\":\"setAssetFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getUsdPrice1e18(address)\":{\"params\":{\"asset\":\"of erc20 token\"},\"returns\":{\"_0\":\"price1e18 such as asset.balanceOf() * price1e18 / 1e18 == $$ 1e18*\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getUsdPrice1e18(address)\":{\"notice\":\"returns price1e18(assert) such that:   [assetAmount * price1e18(assert) / 1e18 === $$ 1e18] == suUSD   examples:       market price of btc = $30k,       for 0.1 wBTC the unit256 amount is 0.1 * 1e18       0.1 * 1e18 * (price1e18 / 1e18) == $3000 == uint256(3000*1e18)       => price1e18 = 30000 * 1e18;       market price of usdt = $0.97,       for 1 usdt uint256 = 1 * 1e6       so 1*1e6 * price1e18 / 1e18 == $0.97 == uint256(0.97*1e18)       => 1*1e6 * (price1e18 / 1e18) / (0.97*1e18)   = 1       =>  price1e18 = 0.97 * (1e18/1e6) * 1e18\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracles/SuChainlinkOracle.sol\":\"SuChainlinkOracle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4a1a0ba12bf1a33f10d9fe226278cf59675c0b929d29e4da99658a079b27fb84\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/access-control/SuAccessControlSingleton.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"./SuAuthenticated.sol\\\";\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title SuAccessControl\\n * @dev Access control for contracts. SuVaultParameters can be inherited from it.\\n */\\n// TODO: refactor by https://en.wikipedia.org/wiki/Principle_of_least_privilege\\ncontract SuAccessControlSingleton is AccessControl, SuAuthenticated {\\n    /**\\n     * @dev Initialize the contract with initial owner to be deployer\\n     */\\n    constructor() SuAuthenticated(address(this)) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    /**\\n    * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n    * Can only be called by the current owner.\\n    */\\n    function transferOwnership(address newOwner) external {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Ownable: caller is not the owner\\\");\\n\\n        if (hasRole(MINTER_ROLE, msg.sender)) {\\n            grantRole(MINTER_ROLE, newOwner);\\n            revokeRole(MINTER_ROLE, msg.sender);\\n        }\\n\\n        if (hasRole(VAULT_ACCESS_ROLE, msg.sender)) {\\n            grantRole(VAULT_ACCESS_ROLE, newOwner);\\n            revokeRole(VAULT_ACCESS_ROLE, msg.sender);\\n        }\\n\\n        grantRole(DEFAULT_ADMIN_ROLE, newOwner);\\n        revokeRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0xecbacd6aa378b65c97e1006790e9ec0c5af8808490f5f921c4c7dadac05b271b\",\"license\":\"BSL 1.1\"},\"contracts/access-control/SuAuthenticated.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\npragma solidity >=0.7.6;\\n\\nimport \\\"../interfaces/ISuAccessControl.sol\\\";\\n\\n/**\\n * @title SuAuthenticated\\n * @dev other contracts should inherit to be authenticated\\n */\\nabstract contract SuAuthenticated {\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant VAULT_ACCESS_ROLE = keccak256(\\\"VAULT_ACCESS_ROLE\\\");\\n    bytes32 private constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /// @dev the address of SuAccessControlSingleton - it should be one for all contract that inherits SuAuthenticated\\n    ISuAccessControl public immutable ACCESS_CONTROL_SINGLETON;\\n\\n    /// @dev should be passed in constructor\\n    constructor(address _accessControlSingleton) {\\n        ACCESS_CONTROL_SINGLETON = ISuAccessControl(_accessControlSingleton);\\n        // TODO: check that _accessControlSingleton points to ISuAccessControl instance\\n        // require(ISuAccessControl(_accessControlSingleton).supportsInterface(ISuAccessControl.hasRole.selector), \\\"bad dependency\\\");\\n    }\\n\\n    /// @dev check DEFAULT_ADMIN_ROLE\\n    modifier onlyOwner() {\\n        require(ACCESS_CONTROL_SINGLETON.hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"SuAuth: onlyOwner AUTH_FAILED\\\");\\n        _;\\n    }\\n\\n    /// @dev check VAULT_ACCESS_ROLE\\n    modifier onlyVaultAccess() {\\n        require(ACCESS_CONTROL_SINGLETON.hasRole(VAULT_ACCESS_ROLE, msg.sender), \\\"SuAuth: onlyVaultAccess AUTH_FAILED\\\");\\n        _;\\n    }\\n\\n    /// @dev check MINTER_ROLE\\n    modifier onlyMinter() {\\n        require(ACCESS_CONTROL_SINGLETON.hasRole(MINTER_ROLE, msg.sender), \\\"SuAuth: onlyMinter AUTH_FAILED\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x7e2dd99b7f458bd19debd482486a0f45e10c07527849f38e9b22e7a1c28e09d1\",\"license\":\"BSL 1.1\"},\"contracts/interfaces/ISuAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface ISuAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n    function grantRole(bytes32 role, address account) external;\\n    function revokeRole(bytes32 role, address account) external;\\n    function renounceRole(bytes32 role, address account) external;\\n\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    // TODO: remove legacy functionality\\n    function setVault(address _vault, bool _isVault) external;\\n    function setCdpManager(address _cdpManager, bool _isCdpManager) external;\\n    function setDAO(address _dao, bool _isDAO) external;\\n    function setManagerParameters(address _address, bool _permit) external;\\n    function transferOwnership(address newOwner) external;\\n}\\n\",\"keccak256\":\"0xd386f4bad5ae0d77788abea08ceec10dc02b02559465d8a8f4e30b58dfac2d2a\",\"license\":\"MIT\"},\"contracts/interfaces/ISuOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity >=0.7.6;\\n\\ninterface ISuOracle {\\n    /**\\n     * @notice returns price1e18(assert) such that:\\n     *   [assetAmount * price1e18(assert) / 1e18 === $$ 1e18] == suUSD\\n     *   examples:\\n     *       market price of btc = $30k,\\n     *       for 0.1 wBTC the unit256 amount is 0.1 * 1e18\\n     *       0.1 * 1e18 * (price1e18 / 1e18) == $3000 == uint256(3000*1e18)\\n     *       => price1e18 = 30000 * 1e18;\\n\\n     *       market price of usdt = $0.97,\\n     *       for 1 usdt uint256 = 1 * 1e6\\n     *       so 1*1e6 * price1e18 / 1e18 == $0.97 == uint256(0.97*1e18)\\n     *       => 1*1e6 * (price1e18 / 1e18) / (0.97*1e18)   = 1\\n     *       =>  price1e18 = 0.97 * (1e18/1e6) * 1e18\\n     * @param asset of erc20 token\\n     * @return price1e18 such as asset.balanceOf() * price1e18 / 1e18 == $$ 1e18\\n     **/\\n    function getUsdPrice1e18(address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2ec14e1ab536f98d4a70eb0f1233652d15e6dda29db4285c613315f499020123\",\"license\":\"UNLICENSED\"},\"contracts/oracles/SuChainlinkOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"../interfaces/ISuOracle.sol\\\";\\nimport \\\"../access-control/SuAccessControlSingleton.sol\\\";\\n\\ncontract SuChainlinkOracle is ISuOracle, SuAuthenticated {\\n    mapping (address => address) public assetToFeed;\\n    mapping (address => uint8) public assetToDecimals;\\n\\n    constructor(address _authControl) SuAuthenticated(_authControl) {\\n    }\\n\\n    function setAssetFeed(address _collateral, address _feed, uint8 _decimals) external onlyOwner {\\n        assetToFeed[_collateral] = _feed;\\n        assetToDecimals[_collateral] = _decimals;\\n    }\\n\\n    function getUsdPrice1e18(address asset) public override view returns (uint) {\\n        address feed = assetToFeed[asset];\\n        uint8 decimals = assetToDecimals[asset];\\n\\n        (\\n            /*uint80 roundID*/,\\n            int256 answer,\\n            /*uint256 startedAt*/,\\n            /*uint256 updatedAt*/,\\n            /*uint80 answeredInRound*/\\n        ) = AggregatorV3Interface(feed).latestRoundData();\\n\\n        int256 price = scalePrice(answer, decimals, 18);\\n\\n        return uint(price);\\n    }\\n\\n    function scalePrice(int256 _price, uint8 _priceDecimals, uint8 _decimals)\\n        internal\\n        pure\\n        returns (int256)\\n    {\\n        if (_priceDecimals < _decimals) {\\n            return _price * int256(10 ** uint256(_decimals - _priceDecimals));\\n        } else if (_priceDecimals > _decimals) {\\n            return _price / int256(10 ** uint256(_priceDecimals - _decimals));\\n        }\\n        return _price;\\n    }\\n}\\n\",\"keccak256\":\"0x5b2c3abff0434c3cdf030e2e7002f0e2b3cde64b920e58878c0305a1ebecd842\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405161084938038061084983398101604081905261002f91610044565b60601b6001600160601b031916608052610072565b600060208284031215610055578081fd5b81516001600160a01b038116811461006b578182fd5b9392505050565b60805160601c6107b361009660003960008181608701526102b501526107b36000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063762c21291161005b578063762c21291461010e578063cadcd17814610123578063d539139314610158578063e6741de21461017f57600080fd5b806303ee9f221461008257806314c376dc146100c6578063356efd98146100fb575b600080fd5b6100a97f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100ed7fe965846df3dd5b1dfa65f58e31477079e90140e0908b6dd31b5aead5a57cf36581565b6040519081526020016100bd565b6100ed6101093660046104ad565b6101a8565b61012161011c3660046104c7565b610280565b005b6101466101313660046104ad565b60016020526000908152604090205460ff1681565b60405160ff90911681526020016100bd565b6100ed7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b6100a961018d3660046104ad565b6000602081905290815260409020546001600160a01b031681565b6001600160a01b038082166000908152602081815260408083205460019092528083205481517ffeaf968c00000000000000000000000000000000000000000000000000000000815291519394929092169260ff909216918491849163feaf968c9160048082019260a092909190829003018186803b15801561022a57600080fd5b505afa15801561023e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102629190610532565b505050915050600061027682846012610404565b9695505050505050565b6040517f91d14854000000000000000000000000000000000000000000000000000000008152600060048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d148549060440160206040518083038186803b1580156102ff57600080fd5b505afa158015610313573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103379190610512565b6103a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f5375417574683a206f6e6c794f776e657220415554485f4641494c4544000000604482015260640160405180910390fd5b6001600160a01b0392831660009081526020818152604080832080547fffffffffffffffffffffffff000000000000000000000000000000000000000016959096169490941790945560019093529120805460ff191660ff909216919091179055565b60008160ff168360ff16101561043d5761041e8383610744565b61042c9060ff16600a6105fe565b61043690856106a8565b9050610470565b8160ff168360ff16111561046d576104558284610744565b6104639060ff16600a6105fe565b6104369085610581565b50825b9392505050565b80356001600160a01b038116811461048e57600080fd5b919050565b805169ffffffffffffffffffff8116811461048e57600080fd5b6000602082840312156104be578081fd5b61047082610477565b6000806000606084860312156104db578182fd5b6104e484610477565b92506104f260208501610477565b9150604084013560ff81168114610507578182fd5b809150509250925092565b600060208284031215610523578081fd5b81518015158114610470578182fd5b600080600080600060a08688031215610549578081fd5b61055286610493565b945060208601519350604086015192506060860151915061057560808701610493565b90509295509295909350565b60008261059c57634e487b7160e01b81526012600452602481fd5b600160ff1b8214600019841416156105b6576105b6610767565b500590565b600181815b808511156105f65781600019048211156105dc576105dc610767565b808516156105e957918102915b93841c93908002906105c0565b509250929050565b60006104708383600082610614575060016106a2565b81610621575060006106a2565b816001811461063757600281146106415761065d565b60019150506106a2565b60ff84111561065257610652610767565b50506001821b6106a2565b5060208310610133831016604e8410600b8410161715610680575081810a6106a2565b61068a83836105bb565b806000190482111561069e5761069e610767565b0290505b92915050565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff818413828413858304851182821616156106e7576106e7610767565b600160ff1b8487128682058812818416161561070557610705610767565b85871292508782058712848416161561072057610720610767565b8785058712818416161561073657610736610767565b505050929093029392505050565b600060ff821660ff84168082101561075e5761075e610767565b90039392505050565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220f5dbcaa84f4204f1c519b034ceaa9623c0ea6c8b6dddd8eb0625a2c05616a5e864736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063762c21291161005b578063762c21291461010e578063cadcd17814610123578063d539139314610158578063e6741de21461017f57600080fd5b806303ee9f221461008257806314c376dc146100c6578063356efd98146100fb575b600080fd5b6100a97f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100ed7fe965846df3dd5b1dfa65f58e31477079e90140e0908b6dd31b5aead5a57cf36581565b6040519081526020016100bd565b6100ed6101093660046104ad565b6101a8565b61012161011c3660046104c7565b610280565b005b6101466101313660046104ad565b60016020526000908152604090205460ff1681565b60405160ff90911681526020016100bd565b6100ed7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b6100a961018d3660046104ad565b6000602081905290815260409020546001600160a01b031681565b6001600160a01b038082166000908152602081815260408083205460019092528083205481517ffeaf968c00000000000000000000000000000000000000000000000000000000815291519394929092169260ff909216918491849163feaf968c9160048082019260a092909190829003018186803b15801561022a57600080fd5b505afa15801561023e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102629190610532565b505050915050600061027682846012610404565b9695505050505050565b6040517f91d14854000000000000000000000000000000000000000000000000000000008152600060048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d148549060440160206040518083038186803b1580156102ff57600080fd5b505afa158015610313573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103379190610512565b6103a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f5375417574683a206f6e6c794f776e657220415554485f4641494c4544000000604482015260640160405180910390fd5b6001600160a01b0392831660009081526020818152604080832080547fffffffffffffffffffffffff000000000000000000000000000000000000000016959096169490941790945560019093529120805460ff191660ff909216919091179055565b60008160ff168360ff16101561043d5761041e8383610744565b61042c9060ff16600a6105fe565b61043690856106a8565b9050610470565b8160ff168360ff16111561046d576104558284610744565b6104639060ff16600a6105fe565b6104369085610581565b50825b9392505050565b80356001600160a01b038116811461048e57600080fd5b919050565b805169ffffffffffffffffffff8116811461048e57600080fd5b6000602082840312156104be578081fd5b61047082610477565b6000806000606084860312156104db578182fd5b6104e484610477565b92506104f260208501610477565b9150604084013560ff81168114610507578182fd5b809150509250925092565b600060208284031215610523578081fd5b81518015158114610470578182fd5b600080600080600060a08688031215610549578081fd5b61055286610493565b945060208601519350604086015192506060860151915061057560808701610493565b90509295509295909350565b60008261059c57634e487b7160e01b81526012600452602481fd5b600160ff1b8214600019841416156105b6576105b6610767565b500590565b600181815b808511156105f65781600019048211156105dc576105dc610767565b808516156105e957918102915b93841c93908002906105c0565b509250929050565b60006104708383600082610614575060016106a2565b81610621575060006106a2565b816001811461063757600281146106415761065d565b60019150506106a2565b60ff84111561065257610652610767565b50506001821b6106a2565b5060208310610133831016604e8410600b8410161715610680575081810a6106a2565b61068a83836105bb565b806000190482111561069e5761069e610767565b0290505b92915050565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff818413828413858304851182821616156106e7576106e7610767565b600160ff1b8487128682058812818416161561070557610705610767565b85871292508782058712848416161561072057610720610767565b8785058712818416161561073657610736610767565b505050929093029392505050565b600060ff821660ff84168082101561075e5761075e610767565b90039392505050565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220f5dbcaa84f4204f1c519b034ceaa9623c0ea6c8b6dddd8eb0625a2c05616a5e864736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getUsdPrice1e18(address)": {
        "params": {
          "asset": "of erc20 token"
        },
        "returns": {
          "_0": "price1e18 such as asset.balanceOf() * price1e18 / 1e18 == $$ 1e18*"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getUsdPrice1e18(address)": {
        "notice": "returns price1e18(assert) such that:   [assetAmount * price1e18(assert) / 1e18 === $$ 1e18] == suUSD   examples:       market price of btc = $30k,       for 0.1 wBTC the unit256 amount is 0.1 * 1e18       0.1 * 1e18 * (price1e18 / 1e18) == $3000 == uint256(3000*1e18)       => price1e18 = 30000 * 1e18;       market price of usdt = $0.97,       for 1 usdt uint256 = 1 * 1e6       so 1*1e6 * price1e18 / 1e18 == $0.97 == uint256(0.97*1e18)       => 1*1e6 * (price1e18 / 1e18) / (0.97*1e18)   = 1       =>  price1e18 = 0.97 * (1e18/1e6) * 1e18"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8159,
        "contract": "contracts/oracles/SuChainlinkOracle.sol:SuChainlinkOracle",
        "label": "assetToFeed",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 8163,
        "contract": "contracts/oracles/SuChainlinkOracle.sol:SuChainlinkOracle",
        "label": "assetToDecimals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint8)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_uint8)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}