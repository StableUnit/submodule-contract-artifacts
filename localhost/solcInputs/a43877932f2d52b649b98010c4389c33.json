{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\n        // contract may have been reentered.\n        require(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} modifier, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary SafeCastUpgradeable {\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        require(value <= type(uint224).max, \"SafeCast: value doesn't fit in 224 bits\");\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(value <= type(uint128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        require(value <= type(uint96).max, \"SafeCast: value doesn't fit in 96 bits\");\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value <= type(uint64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        require(value <= type(uint32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        require(value <= type(uint16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        require(value <= type(uint8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        require(value >= 0, \"SafeCast: value must be positive\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt128(int256 value) internal pure returns (int128) {\n        require(value >= type(int128).min && value <= type(int128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return int128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt64(int256 value) internal pure returns (int64) {\n        require(value >= type(int64).min && value <= type(int64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return int64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt32(int256 value) internal pure returns (int32) {\n        require(value >= type(int32).min && value <= type(int32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return int32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt16(int256 value) internal pure returns (int16) {\n        require(value >= type(int16).min && value <= type(int16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return int16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     *\n     * _Available since v3.1._\n     */\n    function toInt8(int256 value) internal pure returns (int8) {\n        require(value >= type(int8).min && value <= type(int8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return int8(value);\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        require(value <= uint256(type(int256).max), \"SafeCast: value doesn't fit in an int256\");\n        return int256(value);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSetUpgradeable {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/access-control/SuAccessControlSingleton.sol": {
      "content": "// SPDX-License-Identifier: BSL 1.1\n\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"./SuAuthenticated.sol\";\n\npragma solidity ^0.8.0;\n\n/**\n * @title SuAccessControl\n * @dev Access control for contracts. SuVaultParameters can be inherited from it.\n */\n// TODO: refactor by https://en.wikipedia.org/wiki/Principle_of_least_privilege\ncontract SuAccessControlSingleton is AccessControlUpgradeable, SuAuthenticated, ISuAccessControl {\n    /**\n     * @dev Initialize the contract with initial owner to be deployer\n     */\n    function initialize() public initializer {\n        __AccessControl_init();\n        __SuAuthenticated_init(address(this));\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n\n    function transferOwnership(address newOwner) external {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \"Ownable: caller is not the owner\");\n\n        if (hasRole(MINTER_ROLE, msg.sender)) {\n            grantRole(MINTER_ROLE, newOwner);\n            revokeRole(MINTER_ROLE, msg.sender);\n        }\n\n        if (hasRole(VAULT_ACCESS_ROLE, msg.sender)) {\n            grantRole(VAULT_ACCESS_ROLE, newOwner);\n            revokeRole(VAULT_ACCESS_ROLE, msg.sender);\n        }\n\n        grantRole(DEFAULT_ADMIN_ROLE, newOwner);\n        revokeRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n}\n"
    },
    "contracts/access-control/SuAuthenticated.sol": {
      "content": "// SPDX-License-Identifier: BSL 1.1\n\npragma solidity ^0.8.0;\n\nimport \"../interfaces/ISuAccessControl.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\n/**\n * @title SuAuthenticated\n * @dev other contracts should inherit to be authenticated\n */\nabstract contract SuAuthenticated is Initializable {\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    bytes32 public constant VAULT_ACCESS_ROLE = keccak256(\"VAULT_ACCESS_ROLE\");\n    bytes32 public constant LIQUIDATION_ACCESS_ROLE = keccak256(\"LIQUIDATION_ACCESS_ROLE\");\n    bytes32 private constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    // @dev the address of SuAccessControlSingleton - it should be one for all contract that inherits SuAuthenticated\n    ISuAccessControl public ACCESS_CONTROL_SINGLETON;\n\n    // @dev should be passed in constructor\n    function __SuAuthenticated_init(address _accessControlSingleton) internal onlyInitializing {\n        ACCESS_CONTROL_SINGLETON = ISuAccessControl(_accessControlSingleton);\n        // TODO: check that _accessControlSingleton points to ISuAccessControl instance\n        // require(ISuAccessControl(_accessControlSingleton).supportsInterface(ISuAccessControl.hasRole.selector), \"bad dependency\");\n    }\n\n    // @dev check DEFAULT_ADMIN_ROLE\n    modifier onlyOwner() {\n        require(ACCESS_CONTROL_SINGLETON.hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \"SuAuth: onlyOwner AUTH_FAILED\");\n        _;\n    }\n\n    // @dev check VAULT_ACCESS_ROLE\n    modifier onlyVaultAccess() {\n        require(ACCESS_CONTROL_SINGLETON.hasRole(VAULT_ACCESS_ROLE, msg.sender), \"SuAuth: onlyVaultAccess AUTH_FAILED\");\n        _;\n    }\n\n    // @dev check VAULT_ACCESS_ROLE\n    modifier onlyLiquidationAccess() {\n        require(ACCESS_CONTROL_SINGLETON.hasRole(LIQUIDATION_ACCESS_ROLE, msg.sender), \"SuAuth: onlyLiquidationAccess AUTH_FAILED\");\n        _;\n    }\n\n    // @dev check MINTER_ROLE\n    modifier onlyMinter() {\n        require(ACCESS_CONTROL_SINGLETON.hasRole(MINTER_ROLE, msg.sender), \"SuAuth: onlyMinter AUTH_FAILED\");\n        _;\n    }\n}\n"
    },
    "contracts/gain-erc20/GainErc20v3Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\";\n\n/**\n * This is fork on openzeppelin ERC20Upgradeable v4.5.0\n * @dev Implementation of the {IERC20} interface.\n */\ncontract GainableERC20v3Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    using SafeCastUpgradeable for uint256;\n    using SafeCastUpgradeable for uint128;\n    using SafeCastUpgradeable for uint64;\n    using SafeCastUpgradeable for int256;\n\n    /**\n     * ⌈log2(1e18)⌉ = 60 bit\n     *\n     */\n    struct IAccount {\n        uint256 balance;\n        int256 rewardDebt;\n        bool isGainDisabled;\n    }\n\n    struct IRewardPool {\n        uint128 accRewardPerShare;\n        uint64 lastRewardBlock;\n        //        uint256 lpSupply;\n    }\n\n    uint256 private constant ACC_REWARD_TOKEN_PRECISION = 1e12;\n    IRewardPool public rewardPool;\n\n    mapping(address => IAccount) public _accounts;\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n\n\n    // ==========================REWARDER================================\n    uint256 public rewardPerBlock;\n    uint256 public rewardEndBlock;\n\n    function refillReward(uint256 amount, uint64 endBlock) public {\n        require(block.number < endBlock, \"EndBlock should be greater than current block\");\n        updateRewardPool();\n\n        transferFrom(msg.sender, address(this), amount);\n        uint256 rewardLeftAmount;\n        // if there are active rewards leftovers\n        if (rewardEndBlock > 0) {\n            // if we call refillReward before old endBlock ends\n            if (block.number < rewardEndBlock) {\n                rewardLeftAmount = rewardPerBlock * (rewardEndBlock - block.number);\n            } else {\n                // if we start the new reward interval that has nothing in common with the old noe\n                rewardLeftAmount = 0;\n            }\n        }\n        rewardPerBlock = (rewardLeftAmount + amount) / (endBlock - block.number);\n        rewardEndBlock = endBlock;\n    }\n\n    /**\n     *  @dev returns total amount of rewards allocated to the all pools on the rage (startBlock, endBlock]\n     *      i.e. excluding startBlock but including endBlock\n     */\n    function rewardsBetweenBlocks(uint256 startBlock, uint256 endBlock) public view returns (uint256) {\n        // if all rewards were allocation before our range - then answer is 0\n        if (rewardEndBlock <= startBlock) {\n            return 0;\n        } else {\n            // if rewards allocates on the whole range, than just calc rectangle area\n            if (endBlock < rewardEndBlock) {\n                return (endBlock - startBlock) * rewardPerBlock;\n            } else {\n                // other-vice, rewards end its allocation during our rage, so we have to calc only until rewardEndBlock\n                return (rewardEndBlock - startBlock) * rewardPerBlock;\n            }\n        }\n    }\n\n    function rewardsLeftToDistribute() internal view returns (uint256) {\n        if (block.number > rewardEndBlock) {\n            return 0;\n        }\n        return rewardPerBlock * (rewardEndBlock - block.number);\n    }\n\n    function updateRewardPool() public {\n        if (block.number > rewardPool.lastRewardBlock) {\n            uint256 activeSupply = _totalSupply - rewardsLeftToDistribute();\n            // totalSupply - undistributed reward - disabled accounts\n            if (activeSupply > 0) {\n                uint256 totalRewardsSinceLastUpdate = rewardsBetweenBlocks(rewardPool.lastRewardBlock, block.number);\n\n                rewardPool.accRewardPerShare = rewardPool.accRewardPerShare +\n                (totalRewardsSinceLastUpdate * ACC_REWARD_TOKEN_PRECISION / activeSupply).toUint128();\n            }\n            rewardPool.lastRewardBlock = block.number.toUint64();\n        }\n    }\n\n    function pendingRewards(address account) public view returns (uint256) {\n        // simulate updateRewardPool() in-place\n        uint256 activeSupply = _totalSupply - rewardsLeftToDistribute();\n        // We need to have some initial _totalSupply or we'll have division by zero here.\n        if (activeSupply == 0) {\n            return 0;\n        }\n\n        uint256 currentAccRewardPerShare = rewardPool.accRewardPerShare;\n        if (block.number > rewardPool.lastRewardBlock) {\n            uint256 totalRewardsSinceLastUpdate = rewardsBetweenBlocks(rewardPool.lastRewardBlock, block.number);\n            // totalSupply - undistributed reward - disabled accounts\n            currentAccRewardPerShare = currentAccRewardPerShare +\n            (totalRewardsSinceLastUpdate * ACC_REWARD_TOKEN_PRECISION / activeSupply);\n        }\n\n        // simulate harvest()\n        IAccount memory user = _accounts[account];\n        int256 completeAccountReward = (user.balance * currentAccRewardPerShare / ACC_REWARD_TOKEN_PRECISION).toInt256();\n        uint256 pending = (completeAccountReward - user.rewardDebt).toUint256();\n        return pending;\n    }\n\n    function harvest(address account) internal {\n        IAccount storage user = _accounts[account];\n        updateRewardPool();\n        int256 accumulatedRewards = (user.balance * rewardPool.accRewardPerShare / ACC_REWARD_TOKEN_PRECISION).toInt256();\n        uint256 _pendingRewards = (accumulatedRewards - user.rewardDebt).toUint256();\n\n        // Effects\n        user.balance = user.balance + _pendingRewards;\n        // Should use new balance\n        user.rewardDebt = (user.balance * rewardPool.accRewardPerShare / ACC_REWARD_TOKEN_PRECISION).toInt256();\n    }\n\n    function getYieldAPR() public view returns (uint256) {\n        if (block.number > rewardEndBlock) {\n            return 0;\n        }\n        uint256 activeSupply = _totalSupply - rewardsLeftToDistribute();\n        uint256 blocksPerYear = 4 * 60 * 24 * 365;\n\n        return rewardPerBlock * blocksPerYear * 1e18 / activeSupply;\n    }\n    //===================================================================\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _accounts[account].balance + pendingRewards(account);\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = _allowances[owner][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _accounts[from].balance;\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _accounts[from].balance = fromBalance - amount;\n            _accounts[from].rewardDebt = (_accounts[from].balance * rewardPool.accRewardPerShare / ACC_REWARD_TOKEN_PRECISION).toInt256();\n        }\n        _accounts[to].balance += amount;\n        _accounts[to].rewardDebt = (_accounts[to].balance * rewardPool.accRewardPerShare / ACC_REWARD_TOKEN_PRECISION).toInt256();\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _accounts[account].balance += amount;\n        _accounts[account].rewardDebt = (_accounts[account].balance * rewardPool.accRewardPerShare / ACC_REWARD_TOKEN_PRECISION).toInt256();\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _accounts[account].balance;\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _accounts[account].balance = accountBalance - amount;\n            _accounts[account].rewardDebt = (_accounts[account].balance * rewardPool.accRewardPerShare / ACC_REWARD_TOKEN_PRECISION).toInt256();\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256\n    ) internal {\n        if (from != address(0)) {\n            harvest(from);\n        }\n        if (to != address(0)) {\n            harvest(to);\n        }\n    }\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[45] private __gap;\n}\n"
    },
    "contracts/interfaces/IRewardChefV2.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"./ISuOracle.sol\";\n\n/**\n * @title RewardChefV2\n * @notice fork of MasterChefV2(May-13-2021) https://etherscan.io/address/0xef0881ec094552b2e128cf945ef17a6752b4ec5d#code\n * @dev This contract is based on MVC2, but uses \"virtual\" balances instead of storing real ERC20 tokens\n * and uses address of this assets instead of pid.\n * Rewards that are distributed have to be deposited using refillReward(uint256 amount, uint64 endBlock)\n **/\ninterface IRewardChefV2 {\n    // @notice Info of each reward pool.\n    // `allocPoint` The amount of allocation points assigned to the pool.\n    // Also known as the amount of REWARD_TOKEN to distribute per block.\n    struct PoolInfo {\n        uint128 accSushiPerShare;\n        uint64 lastRewardBlock;\n        uint64 allocPoint;\n        uint256 lpSupply;\n    }\n\n    // @notice Info of each user.\n    // `amount` token amount the user has provided.\n    // `rewardDebt` The amount of rewards entitled to the user.\n    struct UserInfo {\n        uint256 amount;\n        int256 rewardDebt;\n\n        uint256 multiplicator1e18;\n        uint256 lockupPeriodSeconds;\n        uint256 lockupStartTimestamp;\n    }\n\n    struct ILockupPeriod {\n        uint256 lockupPeriodSeconds;\n        uint256 multiplicator1e18;\n    }\n\n    // =======================================EVENTS=============================================\n    event VirtualDeposit(address indexed user, address indexed asset, uint256 amount);\n    event VirtualWithdraw(address indexed user, address indexed asset, uint256 amount);\n    event ResetAmount(address indexed user, address indexed asset, address indexed to, uint256 amount, uint256 lockupPeriodSeconds);\n    event Harvest(address indexed user, address indexed asset, uint256 amount);\n    event LogPoolAddition(address indexed asset, uint256 allocPoint);\n    event LogSetPool(address indexed asset, uint256 allocPoint);\n    event LogUpdatePool(address indexed asset, uint64 lastRewardBlock, uint256 lpSupply, uint256 accSushiPerShare);\n\n    // =========================================VARS====================_=========================\n    // @dev Total allocation points. Must be the sum of all allocation points in all pools.\n    // The good practice, to always keep this variable is equal 1000.\n    function totalAllocPoint() external view returns ( uint256 );\n\n    // =======================================REWARDER=============================================\n    function REWARD_TOKEN() external view returns ( IERC20Upgradeable );\n    function ORACLE() external view returns ( ISuOracle );\n    function rewardPerBlock() external view returns ( uint256 );\n    function rewardEndBlock() external view returns ( uint256 );\n\n    function refillReward(uint256 amount, uint64 endBlock) external;\n    /**\n     *  @dev returns total amount of rewards allocated to the all pools on the rage (startBlock, endBlock]\n     *      i.e. excluding startBlock but including endBlock\n     */\n    function rewardsBetweenBlocks(uint256 startBlock, uint256 endBlock) external returns ( uint256 );\n\n    //=======================================LOCKUP LOGIC===========================================\n    function getPossibleLockupPeriodsSeconds() external view returns (ILockupPeriod[] memory);\n    function setPossibleLockupPeriodsSeconds(uint256 lockupPeriodSeconds, uint256 multiplicator1e18) external;\n\n    //================================CORE REWARD CHEF METHODS======================================\n    // @notice Add a new reward pool. Can only be called by the owner.\n    // DO NOT add the same LP token more than once.\n    // @param allocPoint AP of the new pool.\n    // @param _asset Address of the ERC-20 token.\n    function add(uint256 allocPoint, address _asset) external;\n\n    // @notice Update the given pool's REWARD_TOKEN allocation point. Can only be called by the owner.\n    // @param _asset Address of the ERC-20 token.\n    // @param _allocPoint New AP of the pool.\n    function set(address _asset, uint256 _allocPoint) external;\n\n    // @notice View function to see pending REWARD_TOKEN on frontend.\n    // @param _asset Address of the ERC-20 token.\n    // @param _user Address of user.\n    // @return pending REWARD_TOKEN reward for a given user.\n    function pendingSushi(address _asset, address _user) external view returns ( uint256 );\n\n    // @notice Update reward variables of the given pool.\n    // @param asset Asset address\n    // @return pool Returns the pool that was updated.\n    function updatePool(address asset) external returns ( PoolInfo memory );\n\n    // @notice Update reward variables for all pools. Be careful of gas spending!\n    function updateAllPools() external;\n\n    // @notice analogues to MCV2 Deposit method, but can be called only by trusted address\n    // that is trusted to honestly calc how many \"virtual\" tokens have to be allocated for each user.\n    function increaseAmount(address asset, address to, uint256 amountEDecimal, uint256 lockupPeriodSeconds) external;\n\n    // @notice Analogues to MVC2 Withdraw method, that can be called only by trusted address\n    // that is trusted to honestly calc how many \"virtual\" tokens have to be allocated for each user.\n    function decreaseAmount(address asset, address to, uint256 amountEDecimal) external;\n\n    function decreaseAmountRewardPenalty(address asset, address to, uint256 amountEDecimal) external view returns (uint256);\n\n    // @notice Harvest proceeds for transaction sender to `to`.\n    // @param asset Asset address\n    // @param to Receiver of REWARD_TOKEN rewards.\n    function harvest(address asset, address to, uint256 newLockupPeriodSeconds) external;\n\n    // TODO: check for exploits\n    // @notice Withdraw without caring about rewards. EMERGENCY ONLY.\n    // @param asset Asset address\n    // @param to The address of the user whose information will be cleared\n    function resetAmount(address asset, address to) external;\n\n    //================================VIEW METHODS======================================\n    function getPoolApr(address asset) external view  returns (uint256);\n}\n"
    },
    "contracts/interfaces/ISuAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\";\n\n/**\n * @notice Access control for contracts\n * @dev External interface of AccessControl declared to support ERC165 detection.\n **/\ninterface ISuAccessControl is IAccessControlUpgradeable {\n    /**\n     * @dev Transfers all roles from caller to owner, and revoke all roles from the caller.\n     **/\n    function transferOwnership(address newOwner) external;\n}\n"
    },
    "contracts/interfaces/ISuCdpRegistry.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\n/**\n * @title SuCdpRegistry\n * @notice This contract is needed to index all opened CDPs.\n * @dev It can be removed if there's more gas-efficient way to do that, such as graphQL, NFT-lps or other methods\n **/\ninterface ISuCdpRegistry {\n    // @notice Collateral Debt Position\n    struct CDP {\n        address asset; // collateral token\n        address owner; // borrower account\n    }\n\n    /* ===================== EVENTS ===================== */\n\n    // @notice event emitted when a new CDP is created\n    event Added(address indexed asset, address indexed owner);\n\n    // @notice event emitted when a CDP is closed\n    event Removed(address indexed asset, address indexed owner);\n\n    /* ===================== ERRORS ===================== */\n\n    error ZeroAddress();\n    error ArgumentsLengthMismatch();\n\n    /* ==================== METHODS ==================== */\n\n    // @notice method to add or remove owner from cdpList[asset]\n    function checkpoint ( address asset, address owner ) external;\n\n    // @notice multiple checkpoint(...) call for the args arrays\n    function batchCheckpoint ( address[] calldata assets, address[] calldata owners ) external;\n\n    // @notice checkpoint in loop\n    function batchCheckpointForAsset ( address asset, address[] calldata owners ) external;\n\n    // @notice read-only function to get the list of all cdps\n    function getAllCdps (  ) external view returns ( CDP[] memory r );\n\n    // @notice read-only function to get the list of cdps for a given collateral\n    function getCdpsByCollateral ( address asset ) external view returns ( CDP[] memory cdps );\n\n    // @notice read-only function to get the list of all cdps by borrower\n    function getCdpsByOwner ( address owner ) external view returns ( CDP[] memory r );\n\n    // @notice total number of cdps\n    function getCdpsCount (  ) external view returns ( uint256 totalCdpCount );\n\n    // @notice number of cdps for a given collateral\n    function getCdpsCountForCollateral ( address asset ) external view returns ( uint256 );\n\n    // @notice alive means there are debts in the vault for this collateral of this borrower\n    function isAlive ( address asset, address owner ) external view returns ( bool );\n\n    // @notice listed means there are created cdps in this contract for this collateral of this borrower\n    function isListed ( address asset, address owner ) external view returns ( bool );\n}\n"
    },
    "contracts/interfaces/ISuCollateralRegistry.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\n/**\n * @title SuCollateralRegistry\n * @notice Simple enumerableSet of asset.\n * @dev It's used only by CdpRegistry. Can be change to https://docs.openzeppelin.com/contracts/4.x/api/utils#EnumerableSet\n **/\ninterface ISuCollateralRegistry {\n    /* ===================== EVENTS ===================== */\n    event CollateralAdded(address indexed asset);\n    event CollateralRemoved(address indexed asset);\n\n    /* ===================== ERRORS ===================== */\n\n    error ZeroAddress();\n    error AlreadyExist();\n    error NotExist();\n\n    /* ====================== VARS ====================== */\n    // @notice mapping of collateral to its index in collateralList\n    // it allowed to find collateral by address in the list without loop\n    function collateralId ( address ) external view returns ( uint256 );\n\n    /* ==================== METHODS ==================== */\n    // @notice return all collateral assets\n    function collaterals (  ) external view returns ( address[] memory );\n\n    // @notice after deployment more collaterals can be added by managers\n    function addCollateral ( address asset ) external;\n\n    // @notice as well collaterals can be removed\n    function removeCollateral ( address asset ) external;\n\n    // @notice check whether asset is collateral\n    function isCollateral ( address asset ) external view returns ( bool );\n\n    // @notice return total number of collateral assets\n    function collateralsCount (  ) external view returns ( uint256 );\n}\n"
    },
    "contracts/interfaces/ISuLendingLiquidation.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\ninterface ISuLendingLiquidation {\n    /* ===================== ERRORS ===================== */\n\n    error Restricted();\n    error PositionIsSafe();\n    error LiquidationIsTriggered();\n    error LiquidationIsNotTriggered();\n    error SmallCollateral();\n\n    /* ==================== METHODS ==================== */\n\n    // @notice Marks a position as to be liquidated\n    // @param asset The address of the main collateral token of a position\n    // @param owner The owner of a position\n    /** @dev\n    Emits LiquidationTriggered event.\n    Sets the current block as liquidationBlock for the position.\n    Can be triggered only once for the position.\n    */\n    function triggerLiquidation(address asset, address owner) external;\n\n    // how can cascading liquidation happen step by step?\n    // please see https://ratiofinance.medium.com/ratio-risk-lesson-2-cascading-liquidations-e91e04050f47\n    // @notice Liquidates a position's collateral completely\n    // @dev Supports a partial liquidation\n    // @param asset The address of the main collateral token of a position\n    // @param owner The owner of a position\n    // @param repayer The person who repaies by debt and recieves a position's collateral\n    // @param repaymentE18 The amount of repayment\n    // @param excessAndFeeE18 The amount of stablecoins which transfer to foundation\n    // @param assetAmountEDecimal The position's collateral which be recieved by repayer\n    function liquidateAndRepay(\n        address asset,\n        address owner,\n        address repayer,\n        uint256 repaymentE18,\n        uint256 excessAndFeeE18,\n        uint256 assetAmountEDecimal\n    ) external;\n\n    // @notice Liquidates a position\n    // @dev Supports a partial liquidation\n    // @param asset The address of the main collateral token of a position\n    // @param owner The owner of the collateral\n    // @param repayer The person who repaies by debt and transfers stablecoins to the foundation\n    // @param stablecoinsToRepaymentE18 The amount of stablecoins which will be burned as a debt repaymention\n    // @param assetAmountEDecimal The position's collateral which be recieved by repayer\n    function liquidate(\n        address asset,\n        address owner,\n        address repayer,\n        uint256 stablecoinsToRepaymentE18,\n        uint256 assetAmountEDecimal\n    ) external;\n\n    // @notice Finilizes the liquidation - here we pay fee and burn user USDPro\n    // @param repayer The person who repaies by debt and transfers stablecoins to the foundation\n    // @param stablecoinsToRepaymentE18 The amount of stablecoins which will be burned as a debt repayment\n    // @param stablecoinsToFoundationE18 The amount of stablecoins which will be transfered to the foundation\n    function payFeeAndBurn(address repayer, uint256 stablecoinsToRepaymentE18, uint256 stablecoinsToFoundationE18) external;\n\n    // @notice view function to check if position is liquidatable\n    function isLiquidatablePosition(address asset, address owner) external view returns (bool);\n\n    // @notice Returns information about a liquidating position\n    // @param asset The address of the main collateral token of a position\n    // @param owner The owner of the collateral\n    // @return liquidationBlock The block number when the liquidation was triggered\n    // @return collateralEDecimal The amount of collateral\n    // @return debtE18 The amount of borrowed stablecoins\n    function getPositionInfo(address asset, address owner) external view returns (uint256 liquidationBlock, uint256 collateralEDecimal, uint256 debtE18);\n\n    // @notice Returns information about a liquidating position\n    // @param asset The address of the main collateral token of a position\n    // @param owner The owner of the collateral\n    // @return liquidationBlock The block number when the liquidation was triggered\n    function getLiquidationBlock(address asset, address owner) external view returns (uint256);\n\n    /* ==================== UI HELPERS ==================== */\n\n    // @notice calculate liquidation price\n    // @dev can be used inside of _isLiquidatablePosition\n    function liquidationPriceE18(address asset, address owner) external view returns (uint256);\n\n    function liquidationPriceByAmount(\n        address asset,\n        address owner,\n        uint256 additionalCollateralAmount,\n        uint256 additionalStablecoinAmount\n    ) external view returns (uint256);\n\n    // @notice view function to show utilization ratio\n    // the same function can be used inside of _isLiquidatablePosition\n    function utilizationRatioE18(address asset, address owner) external view returns (uint256);\n}"
    },
    "contracts/interfaces/ISuLiquidation.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport \"../interfaces/ISuLiquidationDiscount.sol\";\n\ninterface ISuLiquidation is ISuLiquidationDiscount {\n    // @notice Calculates a liquidation discount. Depends on a block number\n    function calculateLiquidationDiscount(address asset, address owner) external view returns (uint256);\n\n    // @notice Swaps usdPRO to an asset which is liquidating.\n    //     Does sequentially the same as swapStablecoinToAsset() and swapUsdProToStablecoin(),\n    //     but without any third-party stablecoins\n    function swapUsdProToAsset(\n        address asset,\n        address owner,\n        uint256 stablecoinAmountE18,\n        uint256 minAssetAmountEDecimal\n    ) external;\n\n    // @notice Swaps stablecoins from the whitelist to an asset which is liquidating\n    //     The liquidator specifies a position(asset, owner) which is liquidating\n    //\n    //     The liquidator specifies an amount of stablecoins which he wants to swap to an asset.\n    //     The amount of asset is determined from current price and liquidation discount.\n    //     Also, the liquidator specifies the minimum amount of asset which he agrees to recieve.\n    //\n    //     The list of available stablecoins is restricted by whitelist.\n    //\n    //     The liquidator transfers his stablecoins to the address of this contract.\n    //     Further(see swapUsdProToStablecoin()) it can be swapped to USDPro.\n    //     At the same moment, the SuVault contract decreases the amount of debt by position and\n    //     withdraws the collateral to the liquidator\n    function swapStablecoinToAsset(\n        address asset,\n        address owner,\n        address stablecoinToken,\n        uint256 stablecoinAmountEDecimal,\n        uint256 minAssetAmountEDecimal\n    ) external;\n\n    // @notice Swaps UsdPro to stablecoins from the whitelist\n    //     The contract transfers stablecoins to the liquidator.\n    //     At the same moment the liquidator burns and transfers to the foundation the amount of his USDPro.\n    //     Is is a finilization of liquidation.\n    function swapUsdProToStablecoin(address stablecoinToken, uint256 stablecoinAmountEDecimal) external;\n}"
    },
    "contracts/interfaces/ISuLiquidationDiscount.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\nimport \"../liquidator/SuLiquidationStructs.sol\";\n\ninterface ISuLiquidationDiscount {\n    // @notice Sets percentages of discounts for different asset and discount types(aggressive/middle/conservative)\n    //     We can set different discounts for the first block and for other blocks per minute\n    function setDiscountInfo(\n        address asset,\n        DiscountType discountType,\n        DiscountInfo calldata discountInfo\n    ) external;\n\n    // @notice Returns information about discount percentages which are used for discount calculation\n    function getDiscountInfo(\n        address asset,\n        DiscountType discountType\n    ) external view returns (DiscountInfo memory discountInfo);\n    \n    // @notice Calculates the liquidation discount in percents by passed blocks.\n    //     We have three discount types(see SuLiquidationStruct.sol)\n    function calculateDiscountE18(\n        address asset,\n        DiscountType discountType,\n        uint256 liquidationBlock\n    ) external view returns (uint256);\n}"
    },
    "contracts/interfaces/ISuManager.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport \"./ISuManagerParameters.sol\";\n\n/**\n * @title SuManager\n * @notice Manager mighty over the vault. Allows users to interact with their CDPs.\n * User does only interact with manager as proxy to the vault.\n **/\ninterface ISuManager is ISuManagerParameters {\n    /* ===================== EVENTS ===================== */\n    // @notice Even triggered when user deposit collateral\n    event Join(address indexed asset, address indexed owner, uint256 main, uint256 stablecoin);\n\n    // @notice Event triggered when user withdraws collateral\n    event Exit(address indexed asset, address indexed owner, uint256 main, uint256 stablecoin);\n\n    /* ===================== ERRORS ===================== */\n    error InvalidArgs();\n    error Restricted();\n    error UselessTransaction();\n    error UnsupportedDecimals();\n    error LiquidationIsTriggered();\n    error UnderCollateralized();\n    error SmallCollateral();\n\n    /* ==================== METHODS ==================== */\n    // @notice this function is called by user to deposit collateral and receive stablecoin\n    // @dev before calling this function user has to approve the Vault to take his collateral\n    function join(address asset, uint256 assetAmountEDecimal, uint256 stablecoinAmountE18, uint256 lockupPeriodSeconds) external;\n\n    // @notice user can pay back the stablecoin and take his collateral\n    // instead of passing both assetAmount and stablecoinAmount\n    // better user just to pass one of them\n    // also pass preferred rate and maybe acceptable diff percent\n    // that's the purpose of passing both to protect user from rate fluctuations\n    function exit(address asset, uint256 assetAmountEDecimal, uint256 stablecoinAmountE18) external;\n\n    // @notice USD value of collateral of owner\n    function getCollateralUsdValueE18(address asset, address owner) external view returns (uint);\n\n    /* ==================== UI HELPERS ==================== */\n\n    // @notice Returns Loan-To-Value in e18\n    function getLTVE18(address asset, address owner) external view returns (uint256);\n\n    // @notice Returns Available to Borrow\n    // we have invariant: (collateralAmountEDecimal * collateralPriceE18 / 1e18) * initialCollateralRatioE18 <= debtE18\n    // Has similar logic like in _ensurePositionCollateralization\n    function getAvailableToBorrowE18(address asset, address owner) external view returns (uint256);\n\n    // @notice Returns Available to Withdraw\n    // Has similar invariant like in getAvailableToBorrowE18\n    function getAvailableToWithdrawE18(address asset, address owner) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/ISuManagerParameters.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\ninterface ISuManagerParameters {\n    /* ====================== VARS ====================== */\n    // @notice map token to initial collateralization ratio; 1e18 = 100% ratio\n    function initialCollateralRatioE18 ( address ) external view returns ( uint256 );\n\n    // @notice map token to liquidation ratio; 1e18 = 100% ratio\n    function liquidationRatioE18 ( address ) external view returns ( uint256 );\n\n    // @notice the minimum value of collateral in USD which allowed to be left after partial closure\n    function minCollateralInUsdE18 ( ) external view returns ( uint256 );\n\n    /* ===================== ERRORS ===================== */\n    error BadLiquidationRatioValue();\n    error BadInitialCollateralRatioValue();\n\n    /* ==================== METHODS ==================== */\n    function setCollateral (\n        address asset,\n        uint256 stabilityFeeValueE18,\n        uint256 initialCollateralRatioValueE18,\n        uint256 liquidationRatioValueE18,\n        uint256 stablecoinLimitE18,\n        uint256 minCollateralInUsdValueE18\n    ) external;\n\n    /**\n     * @notice Only manager is able to call this function\n     * @dev Sets the initial collateral ratio\n     * @param asset The address of the main collateral token\n     * @param newValueE18 The collateralization ratio (1e18 = 100%)\n     **/\n    function setInitialCollateralRatioE18 ( address asset, uint256 newValueE18 ) external;\n\n    /**\n     * @notice Only manager is able to call this function\n     * @dev Sets the liquidation ratio\n     * @param asset The address of the main collateral token\n     * @param newValueE18 The liquidation ratio (1e18 = 100%)\n     **/\n    function setLiquidationRatioE18 ( address asset, uint256 newValueE18 ) external;\n\n    /**\n     * @notice Only manager is able to call this function\n     * @dev Sets a minimum value of collateral in USD which allowed to be left after partial closure\n     * @param newValueE18 The minimum value of collateral in USD\n     */\n    function setMinCollateralInUsdE18 ( uint256 newValueE18 ) external;\n}\n"
    },
    "contracts/interfaces/ISuOracle.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\n// solhint-disable compiler-version\npragma solidity >=0.7.6;\n\ninterface ISuOracle {\n    /**\n     * @notice WARNING! Read this description very carefully!\n     *      function getUsdPrice1e18(address asset) returns (uint256) that:\n     *          basicAmountOfAsset * getUsdPrice1e18(asset) / 1e18 === $$ * 1e18\n     *      in other words, it doesn't matter what's the erc20.decimals is,\n     *      you just multiply token balance in basic units on value from oracle and get dollar amount multiplied on 1e18.\n     *\n     * different assets have different deviation threshold (errors)\n     *      for wBTC it's <= 0.5%, read more https://data.chain.link/ethereum/mainnet/crypto-usd/btc-usd\n     *      for other asset is can be larger based on particular oracle implementation.\n     *\n     * examples:\n     *       market price of btc = $30k,\n     *       for 0.1 wBTC the unit256 amount is 0.1 * 1e18\n     *       0.1 * 1e18 * (price1e18 / 1e18) == $3000 == uint256(3000*1e18)\n     *       => price1e18 = 30000 * 1e18;\n     *\n     *       market price of usdt = $0.97,\n     *       for 1 usdt uint256 = 1 * 1e6\n     *       so 1*1e6 * price1e18 / 1e18 == $0.97 == uint256(0.97*1e18)\n     *       => 1*1e6 * (price1e18 / 1e18) / (0.97*1e18)   = 1\n     *       =>  price1e18 = 0.97 * (1e18/1e6) * 1e18\n     *\n     *      assume market price of wBTC = $31,503.77, oracle error = $158\n     *\n     *       case #1: small amount of wBTC\n     *           we have 0.0,000,001 wBTC that is worth v = $0.00315 ± $0.00001 = 0.00315*1e18 = 315*1e13 ± 1*1e13\n     *           actual balance on the asset b = wBTC.balanceOf() =  0.0000001*1e18 = 1e11\n     *           oracle should return or = oracle.getUsdPrice1e18(wBTC) <=>\n     *           <=> b*or = v => v/b = 315*1e13 / 1e11 = 315*1e2 ± 1e2\n     *           error = or.error * b = 1e2 * 1e11 = 1e13 => 1e13/1e18 usd = 1e-5 = 0.00001 usd\n     *\n     *       case #2: large amount of wBTC\n     *           v = 2,000,000 wBTC = $31,503.77 * 2m ± 158*2m = $63,007,540,000 ± $316,000,000 = 63,007*1e24 ± 316*1e24\n     *           for calc convenience we increase error on 0.05 and have v = 63,000*24 ± 300*1e24 = (630 ± 3)*1e26\n     *           b = 2*1e6 * 1e18 = 2*1e24\n     *           or = v/b = (630 ± 3)*1e26 / 2*1e24 = 315*1e2 ± 1.5*1e2\n     *           error = or.error * b = 1.5*100 * 2*1e24 = 3*1e26 = 3*1e8*1e18 = $300,000,000 ~ $316,000,000\n     *\n     *      assume the market price of USDT = $0.97 ± $0.00485,\n     *\n     *       case #3: little amount of USDT\n     *           v = USDT amount 0.005 = 0.005*(0.97 ± 0.00485) = 0.00485*1e18 ± 0.00002425*1e18 = 485*1e13 ± 3*1e13\n     *           we rounded error up on (3000-2425)/2425 ~= +24% for calculation convenience.\n     *           b = USDT.balanceOf() = 0.005*1e6 = 5*1e3\n     *           b*or = v => or = v/b = (485*1e13 ± 3*1e13) / 5*1e3 = 970*1e9 ± 6*1e9\n     *           error = 6*1e9 * 5*1e3 / 1e18 = 30*1e12/1e18 = 3*1e-5 = $0,00005\n     *\n     *       case #4: lot of USDT\n     *           v = we have 100,000,000,000 USDT = $97B = 97*1e9*1e18 ± 0.5*1e9*1e18\n     *           b = USDT.balanceOf() = 1e11*1e6 = 1e17\n     *           or = v/b = (97*1e9*1e18 ± 0.5*1e9*1e18) / 1e17 = 970*1e9 ± 5*1e9\n     *           error = 5*1e9 * 1e17 = 5*1e26 = 0.5 * 1e8*1e18\n     *\n     * @param asset - address of erc20 token contract\n     * @return usdPrice1e18 such that asset.balanceOf() * getUsdPrice1e18(asset) / 1e18 == $$ * 1e18\n     **/\n    function getUsdPrice1e18(address asset) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/ISuVault.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport \"../lending/SuVaultParameters.sol\";\nimport \"../interfaces/ISuVaultParameters.sol\";\nimport \"../reward/RewardChefV2.sol\";\n\ninterface ISuVault is ISuVaultParameters {\n    /* ===================== EVENTS ===================== */\n    // @notice Event triggered when user destroys cdp\n    event PositionLiquidated(address asset, address owner, address repayer, uint256 assetAmountEDecimal, uint256 repaymentE18);\n\n    // @notice Event triggered when user liquidate some part of cdp (debt > 0)\n    event PositionLiquidatedPartial(address asset, address owner, address repayer, uint256 assetAmountEDecimal, uint256 repaymentE18);\n\n    // @notice Event triggered when user call repay() function\n    event PositionRepaid(address repayer, uint256 repaymentE18, uint256 excessAndFeeE18);\n\n    // @notice Event triggered when user didnt withdraw collateral before price goes down\n    event LiquidationTriggered(address indexed asset, address indexed owner);\n\n    /* ===================== ERRORS ===================== */\n    error LiquidationIsTriggered();\n    error Restricted();\n    error WithdrawExceeded();\n    error WrongDebt();\n    error WrongTotalDebt();\n    error UselessTransaction();\n    error AssetDebtLimit();\n\n    /* ====================== VARS ====================== */\n    // @notice how much collateral the users staked == collaterals[asset][user], i.e deposits\n    // EDecimal means that this value in asset denomination, i.e. x{human readable value} * 10^{erc20.decimals()}\n    function collateralsEDecimal ( address, address ) external view returns ( uint256 );\n\n    // @notice stablecoin amount == debts[asset][user]\n    function debtsE18 ( address, address ) external view returns ( uint256 );\n\n    // TODO: can we add names to arguments? alternatively use tag param\n    // @notice the last time, when every fee before lastUpdates are calculated in the debt.\n    // All data such as fees are from lastUpdate only\n    function lastUpdate ( address, address ) external view returns ( uint256 );\n\n    // @notice asset => user => block number\n    function liquidationBlock (address, address) external view returns (uint256);\n\n    // @notice current interest that user pay for stabilityFee[asset][user]\n    function stabilityFeeE18 ( address, address ) external view returns ( uint256 );\n\n    // @notice Stats, how much stablecoins were borrowed against particular asset == tokenDebts[asset]\n    function tokenDebtsE18 ( address ) external view returns ( uint256 );\n\n    /* ==================== METHODS ==================== */\n    // @notice borrow usdPRO using selected asset.\n    // user expected previously to deposit collateral and then being able to take stablecoin\n    // user can't create single position with multiple collaterals?\n    function borrow ( address asset, address user, uint256 amountE18 ) external;\n\n    // TODO:  split view functions into section:  view method, mutable methods\n    // @notice fee is increased with time. Any call of vault.update would calc fee in debt and restart fee timer\n    function calculateFeeE18 ( address asset, address user, uint256 amountE18 ) external view returns ( uint256 );\n\n    // @notice collateral deposit\n    function deposit ( address asset, address user, uint256 amountEDecimal, uint256 lockupPeriodSeconds ) external;\n\n    // @notice only destroy debt info\n    // @dev onlyVaultAccess, exit -> _repay -> destroy if debt == 0\n    function destroy ( address asset, address user ) external;\n\n    // @notice withdraw in case of some protocol errors, users can always get back their tokens\n    function emergencyWithdraw ( address asset, address user, uint256 amountEDecimal ) external;\n\n    // @notice total dept is calculated as current debt with added calculated fee, don't use it in practice\n    function getTotalDebtE18 ( address asset, address user ) external view returns ( uint256 );\n\n    // @notice liquidate user position\n    function liquidate(\n        address asset,\n        address owner,\n        address recipient,\n        uint256 assetAmountEDecimal,\n        uint256 stablecoinAmountE18\n    ) external;\n\n    // @notice set new RewardChef contract address\n    function setRewardChef(address rewardChef) external;\n\n    // @notice Marks a position as to be liquidated\n    // @param asset The address of the main collateral token of a position\n    // @param positionOwner The owner of a position\n    // @dev Sets the current block as liquidationBlock for the position. Can be triggered only once for the position.\n    function triggerLiquidation(address asset, address positionOwner) external;\n\n    // @notice Update all main state vars\n    // position is not allowed to be modified during liquidation, because when it's launched -\n    // liquidators want to be sure they can participate\n    // @dev is called, when user borrows more\n    function update ( address asset, address user ) external;\n\n    // @notice collateral withdraw\n    function withdraw ( address asset, address user, address recipient, uint256 amountEDecimal ) external;\n\n    // @notice Burns a debt repayment and transfers fees to the foundation.\n    // @param repayer The person who repaies by debt and transfers stablecoins to the foundation\n    // @param stablecoinsToRepaymentE18 The amount of stablecoins which will be burned as a debt repayment\n    // @param stablecoinsToFoundationE18 The amount of stablecoins which will be transfered to the foundation(e.g fees)\n    function payFeeAndBurn(address repayer, uint256 stablecoinsToRepaymentE18, uint256 stablecoinsToFoundationE18) external;\n}\n"
    },
    "contracts/interfaces/ISuVaultParameters.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\n/**\n * @title SuVaultParameters\n * @notice SuVaultParameters is Singleton for Access Control, like configuration contract.\n **/\ninterface ISuVaultParameters {\n    /* ====================== VARS ====================== */\n    // @notice stability fee can be different for each collateral\n    function protocolStabilityFeeE18 ( address ) external view returns ( uint256 );\n\n    // @notice limit for each collateral-asset to manage risk profile\n    function tokenDebtLimitE18 ( address ) external view returns ( uint256 );\n\n    /* ===================== ERRORS ===================== */\n    error ZeroAddress();\n\n    /* ==================== METHODS ==================== */\n    // @notice manager is allowed to add new collaterals and modify existing ones\n    // @dev I think creating new collaterals and modifying existing ones should be separate functions for security reason\n    function setCollateral (address asset, uint256 stabilityFeeValueE18, uint256 stablecoinLimitE18) external;\n\n    // TODO: should we move it from value to somewhere else? also rename to DAO?\n    // @notice manager is allowed to change foundation that receive fees and etc\n    function setFoundation ( address newFoundation ) external;\n\n    // TODO: unclear what is it\n    // @notice set fee percentage (1e18 = 100%)\n    function setStabilityFeeE18 ( address asset, uint256 newValue ) external;\n\n    // @notice debt limit can be changed for any collateral along with liquidation and stability fees\n    function setTokenDebtLimitE18 ( address asset, uint256 limit ) external;\n}\n"
    },
    "contracts/lending/SuCdpRegistry.sol": {
      "content": "// SPDX-License-Identifier: BSL 1.1\r\n\r\n/*\r\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\r\n*/\r\npragma solidity ^0.8.0;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\n\r\nimport \"../interfaces/ISuVault.sol\";\r\nimport \"../interfaces/ISuCollateralRegistry.sol\";\r\nimport \"../interfaces/ISuCdpRegistry.sol\";\r\n\r\ncontract SuCdpRegistry is Initializable, ISuCdpRegistry {\r\n    // mapping from collateral token to list of borrowers?\r\n    mapping (address => address[]) private cdpList;\r\n\r\n    // mapping from collateral token to borrower to the INDEX, index in the previous list?\r\n    mapping (address => mapping (address => uint)) private cdpIndex;\r\n\r\n    ISuVault public vault;\r\n    ISuCollateralRegistry public cr;\r\n\r\n    function initialize(address _vault, address _collateralRegistry) public initializer {\r\n        if (_vault == address(0) || _collateralRegistry == address(0)) revert ZeroAddress();\r\n        vault = ISuVault(_vault);\r\n        cr = ISuCollateralRegistry(_collateralRegistry);\r\n    }\r\n\r\n    // anyone can create checkpoint?\r\n    function checkpoint(address asset, address owner) public {\r\n        if (asset == address(0) || owner == address(0)) revert ZeroAddress();\r\n\r\n        bool listed = isListed(asset, owner);\r\n        bool alive = isAlive(asset, owner);\r\n\r\n        if (alive && !listed) {\r\n            _addCdp(asset, owner);\r\n        } else if (listed && !alive) {\r\n            _removeCdp(asset, owner);\r\n        }\r\n    }\r\n\r\n    function batchCheckpointForAsset(address asset, address[] calldata owners) external {\r\n        for (uint i = 0; i < owners.length; i++) {\r\n            checkpoint(asset, owners[i]);\r\n        }\r\n    }\r\n\r\n    function batchCheckpoint(address[] calldata assets, address[] calldata owners) external {\r\n        if (assets.length != owners.length) revert ArgumentsLengthMismatch();\r\n        for (uint i = 0; i < owners.length; i++) {\r\n            checkpoint(assets[i], owners[i]);\r\n        }\r\n    }\r\n\r\n    function isAlive(address asset, address owner) public view returns (bool) {\r\n        return vault.debtsE18(asset, owner) != 0;\r\n    }\r\n\r\n    function isListed(address asset, address owner) public view returns (bool) {\r\n        if (cdpList[asset].length == 0) { return false; }\r\n        return cdpIndex[asset][owner] != 0 || cdpList[asset][0] == owner;\r\n    }\r\n\r\n    function _removeCdp(address asset, address owner) internal {\r\n        // take the index by collateral and borrower\r\n        uint id = cdpIndex[asset][owner];\r\n\r\n        // then delete this index\r\n        delete cdpIndex[asset][owner];\r\n\r\n        // if the index is not the last one\r\n        uint lastId = cdpList[asset].length - 1;\r\n\r\n        // swap the last element with the element to be deleted\r\n        if (id != lastId) {\r\n            address lastOwner = cdpList[asset][lastId];\r\n            cdpList[asset][id] = lastOwner;\r\n            cdpIndex[asset][lastOwner] = id;\r\n        }\r\n\r\n        // delete the last element\r\n        cdpList[asset].pop();\r\n\r\n        // can we optimize this remove function by changing the structure?\r\n\r\n        emit Removed(asset, owner);\r\n    }\r\n\r\n    function _addCdp(address asset, address owner) internal {\r\n        // remember the index of the new element\r\n        cdpIndex[asset][owner] = cdpList[asset].length;\r\n\r\n        // add the new element to the end of the list\r\n        cdpList[asset].push(owner);\r\n\r\n        emit Added(asset, owner);\r\n    }\r\n\r\n    function getCdpsByCollateral(address asset) external view returns (CDP[] memory cdps) {\r\n        address[] memory owners = cdpList[asset];\r\n        cdps = new CDP[](owners.length);\r\n        for (uint i = 0; i < owners.length; i++) {\r\n            cdps[i] = CDP(asset, owners[i]);\r\n        }\r\n    }\r\n\r\n    function getCdpsByOwner(address owner) external view returns (CDP[] memory r) {\r\n        address[] memory assets = cr.collaterals();\r\n        CDP[] memory cdps = new CDP[](assets.length);\r\n        uint actualCdpsCount;\r\n\r\n        for (uint i = 0; i < assets.length; i++) {\r\n            if (isListed(assets[i], owner)) {\r\n                cdps[actualCdpsCount++] = CDP(assets[i], owner);\r\n            }\r\n        }\r\n\r\n        r = new CDP[](actualCdpsCount);\r\n\r\n        for (uint i = 0; i < actualCdpsCount; i++) {\r\n            r[i] = cdps[i];\r\n        }\r\n    }\r\n\r\n    function getAllCdps() external view returns (CDP[] memory r) {\r\n        uint totalCdpCount = getCdpsCount();\r\n\r\n        uint cdpCount;\r\n\r\n        r = new CDP[](totalCdpCount);\r\n\r\n        address[] memory assets = cr.collaterals();\r\n        for (uint i = 0; i < assets.length; i++) {\r\n            address[] memory owners = cdpList[assets[i]];\r\n            for (uint j = 0; j < owners.length; j++) {\r\n                r[cdpCount++] = CDP(assets[i], owners[j]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function getCdpsCount() public view returns (uint totalCdpCount) {\r\n        address[] memory assets = cr.collaterals();\r\n        totalCdpCount = 0;\r\n        for (uint i = 0; i < assets.length; i++) {\r\n            totalCdpCount += cdpList[assets[i]].length;\r\n        }\r\n    }\r\n\r\n    function getCdpsCountForCollateral(address asset) public view returns (uint) {\r\n        return cdpList[asset].length;\r\n    }\r\n}\r\n"
    },
    "contracts/lending/SuLendingLiquidation.sol": {
      "content": "// SPDX-License-Identifier: BSL 1.1\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\n\nimport \"../interfaces/ISuLendingLiquidation.sol\";\nimport \"../interfaces/ISuVault.sol\";\nimport \"../interfaces/ISuManager.sol\";\nimport \"../interfaces/ISuCdpRegistry.sol\";\n\nimport \"../access-control/SuAuthenticated.sol\";\n\ncontract SuLendingLiquidation is ReentrancyGuardUpgradeable, SuAuthenticated, ISuLendingLiquidation {\n    ISuVault public vault;\n    ISuManager public manager;\n    ISuCdpRegistry public cdpRegistry;\n\n    modifier checkpoint(address asset, address owner) {\n        _;\n        cdpRegistry.checkpoint(asset, owner);\n    }\n\n    function initialize(address _authControl, address _suManager, address _suVault, address _cdpRegistry) public initializer {\n        __SuAuthenticated_init(_authControl);\n\n        manager = ISuManager(_suManager);\n        vault = ISuVault(_suVault);\n        cdpRegistry = ISuCdpRegistry(_cdpRegistry);\n    }\n\n    // wrapper ether only, no native\n    receive() external payable {\n        revert Restricted();\n    }\n\n    function triggerLiquidation(address asset, address owner) external {\n        if (vault.liquidationBlock(asset, owner) > 0) revert LiquidationIsTriggered();\n        if (!isLiquidatablePosition(asset, owner)) revert PositionIsSafe();\n\n        // summarize debt with accumulated fees\n        vault.update(asset, owner);\n\n        // then vault will trigger liquidation and auction begins\n        vault.triggerLiquidation(asset, owner);\n    }\n\n    function liquidateAndRepay(\n        address asset,\n        address owner,\n        address repayer,\n        uint256 repaymentE18,\n        uint256 excessAndFeeE18,\n        uint256 assetAmountEDecimal\n    ) public nonReentrant checkpoint(asset, owner) onlyLiquidationAccess {\n        if (vault.liquidationBlock(asset, owner) == 0) revert LiquidationIsNotTriggered();\n\n        vault.liquidate(asset, owner, repayer, assetAmountEDecimal, repaymentE18);\n\n        // not allowed to left some dust after partial closure the position\n        _ensureMinCollateralThreshold(asset, msg.sender);\n\n        vault.payFeeAndBurn(repayer, repaymentE18, excessAndFeeE18);\n    }\n\n    function liquidate(\n        address asset,\n        address owner,\n        address repayer,\n        uint256 stablecoinsToRepaymentE18,\n        uint256 assetAmountEDecimal\n    ) public nonReentrant checkpoint(asset, owner) onlyLiquidationAccess {\n        if (vault.liquidationBlock(asset, owner) == 0) revert LiquidationIsNotTriggered();\n\n        vault.liquidate(asset, owner, repayer, assetAmountEDecimal, stablecoinsToRepaymentE18);\n\n        // not allowed to left some dust after partial closure the position\n        _ensureMinCollateralThreshold(asset, msg.sender);\n    }\n\n    function payFeeAndBurn(address repayer, uint256 stablecoinsToRepaymentE18, uint256 stablecoinsToFoundationE18) public {\n        vault.payFeeAndBurn(repayer, stablecoinsToRepaymentE18, stablecoinsToFoundationE18);\n    }\n\n    function isLiquidatablePosition(address asset, address owner) public view returns (bool) {\n        uint256 usdValueE18 = manager.getCollateralUsdValueE18(asset, owner);\n\n        // calculate current debt to be returned\n        uint256 debtE18 = vault.getTotalDebtE18(asset, owner);\n\n        if (debtE18 == 0) return false;\n        // make sure its not under collaterazied\n        // should liquidation ration always be higher than 1 or allowed lower?\n        return debtE18 * 1e18 / usdValueE18 >= manager.liquidationRatioE18(asset);\n    }\n\n    function getPositionInfo(address asset, address owner) external view returns (\n        uint256 liquidationBlock,\n        uint256 collateralEDecimal,\n        uint256 debtE18\n    ) {\n        liquidationBlock = vault.liquidationBlock(asset, owner);\n        collateralEDecimal = vault.collateralsEDecimal(asset, owner);\n        debtE18 = vault.debtsE18(asset, owner);\n    }\n\n    function getLiquidationBlock(address asset, address owner) external view returns (uint256) {\n        return vault.liquidationBlock(asset, owner);\n    }\n\n    // after partial closure should be made sure it is not left too little amount of collateral\n    function _ensureMinCollateralThreshold(address asset, address owner) internal view {\n        uint256 usdValueE18 = manager.getCollateralUsdValueE18(asset, owner);\n\n        if (usdValueE18 > 0 && usdValueE18 <= manager.minCollateralInUsdE18()) revert SmallCollateral();\n    }\n\n    /* ====================== UI HELPERS ====================== */\n\n    function liquidationPriceE18(address asset, address owner) external view returns (uint256) {\n        uint256 debtE18 = vault.getTotalDebtE18(asset, owner);\n        if (debtE18 == 0) return type(uint256).max;\n\n        uint256 collateralLiqPriceE18 = debtE18 * 1e18 / manager.liquidationRatioE18(asset);\n\n        return collateralLiqPriceE18 * 1e18 / vault.collateralsEDecimal(asset, owner) / 10 ** (18 - IERC20Metadata(asset).decimals());\n    }\n\n    function liquidationPriceByAmount(\n        address asset,\n        address owner,\n        uint256 additionalCollateralAmount,\n        uint256 additionalStablecoinAmount\n    ) external view returns (uint256) {\n        uint256 debtE18 = vault.getTotalDebtE18(asset, owner) + additionalStablecoinAmount;\n        if (debtE18 == 0) return type(uint256).max;\n\n        uint256 collateralLiqPriceE18 = debtE18 * 1e18 / manager.liquidationRatioE18(asset);\n        uint256 collaterals = vault.collateralsEDecimal(asset, owner) + additionalCollateralAmount;\n\n        return collateralLiqPriceE18 * 1e18 / collaterals / 10 ** (18 - IERC20Metadata(asset).decimals());\n    }\n\n    function utilizationRatioE18(address asset, address owner) public view returns (uint256) {\n        uint256 debtE18 = vault.getTotalDebtE18(asset, owner);\n        if (debtE18 == 0) return 0;\n\n        uint256 usdValueE18 = manager.getCollateralUsdValueE18(asset, owner);\n\n        return debtE18 * 1e18 / usdValueE18;\n    }\n}"
    },
    "contracts/lending/SuManager.sol": {
      "content": "// SPDX-License-Identifier: BSL 1.1\n\n/*\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\n*/\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\nimport \"../interfaces/ISuOracle.sol\";\nimport \"../interfaces/ISuVault.sol\";\nimport \"../interfaces/ISuCdpRegistry.sol\";\nimport \"../interfaces/ISuManager.sol\";\nimport \"./SuManagerParameters.sol\";\n\ncontract SuManager is ReentrancyGuardUpgradeable, SuManagerParameters, ISuManager {\n    ISuVault public vault;\n    ISuCdpRegistry public cdpRegistry;\n    ISuOracle public suOracle;\n\n    modifier checkpoint(address asset, address owner) {\n        _;\n        cdpRegistry.checkpoint(asset, owner);\n    }\n\n    function initialize(address _vault, address _suOracle, address _cdpRegistry) public initializer {\n        if (_cdpRegistry == address(0) || _suOracle == address(0)) revert InvalidArgs();\n\n        __ReentrancyGuard_init();\n        __SuManagerParameters_init(_vault);\n\n        suOracle = ISuOracle(_suOracle);\n        vault = ISuVault(_vault);\n        cdpRegistry = ISuCdpRegistry(_cdpRegistry);\n    }\n\n    // wrapper ether only, no native\n    receive() external payable {\n        revert Restricted();\n    }\n\n    function join(address asset, uint256 assetAmountEDecimal, uint256 stablecoinAmountE18, uint256 lockupPeriodSeconds) public nonReentrant checkpoint(asset, msg.sender) {\n        if (stablecoinAmountE18 == 0 && assetAmountEDecimal == 0) revert UselessTransaction();\n        if (IERC20Metadata(asset).decimals() > 18) revert UnsupportedDecimals();\n\n        if (stablecoinAmountE18 == 0) {\n            vault.deposit(asset, msg.sender, assetAmountEDecimal, lockupPeriodSeconds);\n        } else {\n            if (assetAmountEDecimal != 0) {\n                vault.deposit(asset, msg.sender, assetAmountEDecimal, lockupPeriodSeconds);\n            }\n\n            vault.borrow(asset, msg.sender, stablecoinAmountE18);\n\n            _ensurePositionCollateralization(asset, msg.sender);\n        }\n\n        // not allowed to left some dust after partial closure the position\n        _ensureMinCollateralThreshold(asset, msg.sender);\n\n        emit Join(asset, msg.sender, assetAmountEDecimal, stablecoinAmountE18);\n    }\n\n    function exit(address asset, uint256 assetAmountEDecimal, uint256 stablecoinAmountE18) public nonReentrant checkpoint(asset, msg.sender) {\n        if (vault.liquidationBlock(asset, msg.sender) > 0) revert LiquidationIsTriggered();\n\n        // not to pay more stablecoin than debt\n        uint256 debtE18 = vault.debtsE18(asset, msg.sender);\n        if (stablecoinAmountE18 > debtE18) { stablecoinAmountE18 = debtE18; }\n\n        // calculate and charge fee\n        uint256 feeE18 = vault.calculateFeeE18(asset, msg.sender, stablecoinAmountE18);\n\n        vault.liquidate(asset, msg.sender, msg.sender, assetAmountEDecimal, stablecoinAmountE18);\n\n        // not allowed to left some dust after partial closure the position\n        _ensureMinCollateralThreshold(asset, msg.sender);\n\n        vault.payFeeAndBurn(msg.sender, stablecoinAmountE18, feeE18);\n\n        if (vault.debtsE18(asset, msg.sender) > 0) {\n            // TODO: check that withdrawals lead to update\n            vault.update(asset, msg.sender);\n\n            // dont need to check this after full repayment\n            _ensurePositionCollateralization(asset, msg.sender);\n        }\n\n        emit Exit(asset, msg.sender, assetAmountEDecimal, stablecoinAmountE18);\n    }\n\n    // after partial repayment should be made sure its still collateralized enough\n    function _ensurePositionCollateralization(address asset, address owner) internal view {\n        // calculate value in usd from collateral position\n        uint256 usdValueE18 = getCollateralUsdValueE18(asset, owner);\n\n        // multiply value in usd to the collateral ratio, then divide by 1e18\n        uint256 usdLimitE18 = usdValueE18 * initialCollateralRatioE18[asset] / 1e18;\n\n        // make sure calculated allowed limit is higher than the actual debt\n        if (vault.getTotalDebtE18(asset, owner) > usdLimitE18) revert UnderCollateralized();\n    }\n\n    // after partial closure should be made sure it is not left too little amount of collateral\n    function _ensureMinCollateralThreshold(address asset, address owner) internal view {\n        uint256 usdValueE18 = getCollateralUsdValueE18(asset, owner);\n\n        if (usdValueE18 > 0 && usdValueE18 <= minCollateralInUsdE18) revert SmallCollateral();\n    }\n\n    function getCollateralUsdValueE18(address asset, address owner) public view returns (uint) {\n        uint256 assetAmountEDecimal = vault.collateralsEDecimal(asset, owner);\n\n        return suOracle.getUsdPrice1e18(asset) * assetAmountEDecimal / 1e18;\n    }\n\n    /* ====================== UI HELPERS ====================== */\n\n    function getLTVE18(address asset, address owner) external view returns (uint256) {\n        uint256 usdValueE18 = getCollateralUsdValueE18(asset, owner);\n        if (usdValueE18 == 0) return 0;\n\n        uint256 debtE18 = vault.debtsE18(asset, owner);\n\n        return debtE18 * 1e18 / usdValueE18;\n    }\n\n    function getAvailableToBorrowE18(address asset, address owner) external view returns (uint256) {\n        uint256 usdValueE18 = getCollateralUsdValueE18(asset, owner);\n        uint256 usdLimitE18 = usdValueE18 * initialCollateralRatioE18[asset] / 1e18;\n\n        uint256 totalDebtE18 = vault.getTotalDebtE18(asset, owner);\n\n        if (usdLimitE18 <= totalDebtE18) return 0;\n\n        return usdLimitE18 - totalDebtE18;\n    }\n\n    function getAvailableToWithdrawE18(address asset, address owner) external view returns (uint256) {\n        uint256 collateralAmountEDecimal = vault.collateralsEDecimal(asset, owner);\n        uint256 collateralPriceE18 = suOracle.getUsdPrice1e18(asset);\n        if (collateralPriceE18 == 0) return 0;\n        uint256 debtE18 = vault.debtsE18(asset, owner);\n\n        uint256 minCollateralAmountEDecimal = debtE18 * (10 ** IERC20Metadata(asset).decimals()) * 1e18 / (collateralPriceE18 * initialCollateralRatioE18[asset]);\n\n        return collateralAmountEDecimal - minCollateralAmountEDecimal;\n    }\n}\n"
    },
    "contracts/lending/SuManagerParameters.sol": {
      "content": "// SPDX-License-Identifier: BSL 1.1\n\n/*\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\n*/\npragma solidity ^0.8.0;\n\nimport \"./SuVaultParameters.sol\";\nimport \"../access-control/SuAccessControlSingleton.sol\";\nimport \"../interfaces/ISuManagerParameters.sol\";\n\nabstract contract SuManagerParameters is SuAuthenticated, ISuManagerParameters {\n    mapping(address => uint256) public initialCollateralRatioE18;\n    mapping(address => uint256) public liquidationRatioE18;\n    uint256 public minCollateralInUsdE18;\n\n    SuVaultParameters public vaultParameters;\n\n    function __SuManagerParameters_init(address _vaultParameters)  internal onlyInitializing {\n        __SuAuthenticated_init(address(SuAuthenticated(_vaultParameters).ACCESS_CONTROL_SINGLETON()));\n\n        vaultParameters = SuVaultParameters(_vaultParameters);\n        minCollateralInUsdE18 = 5 * 1e18;\n    }\n\n    function setCollateral(\n        address asset,\n        uint256 stabilityFeeValueE18,\n        uint256 initialCollateralRatioValueE18,\n        uint256 liquidationRatioValueE18,\n        uint256 stablecoinLimitE18,\n        uint256 minCollateralInUsdValueE18\n    ) external onlyOwner {\n        vaultParameters.setCollateral(asset, stabilityFeeValueE18, stablecoinLimitE18);\n        setInitialCollateralRatioE18(asset, initialCollateralRatioValueE18);\n        setLiquidationRatioE18(asset, liquidationRatioValueE18);\n        setMinCollateralInUsdE18(minCollateralInUsdValueE18);\n    }\n\n    function setInitialCollateralRatioE18(address asset, uint256 newValueE18) public onlyOwner {\n        if (newValueE18 == 0 || newValueE18 > 1e18) revert BadInitialCollateralRatioValue();\n        initialCollateralRatioE18[asset] = newValueE18;\n    }\n\n    function setLiquidationRatioE18(address asset, uint256 newValueE18) public onlyOwner {\n        if (newValueE18 == 0 || newValueE18 < initialCollateralRatioE18[asset]) revert BadLiquidationRatioValue();\n        liquidationRatioE18[asset] = newValueE18;\n    }\n\n    function setMinCollateralInUsdE18(uint256 newValueE18) public onlyOwner {\n        minCollateralInUsdE18 = newValueE18;\n    }\n}\n"
    },
    "contracts/lending/SuVault.sol": {
      "content": "// SPDX-License-Identifier: BSL 1.1\n\n/*\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\n*/\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"./SuVaultParameters.sol\";\nimport \"../USDPro.sol\";\nimport \"../reward/RewardChefV2.sol\";\nimport \"../interfaces/ISuVault.sol\";\n\ncontract SuVault is SuVaultParameters, ISuVault  {\n    address public STABLECOIN;\n\n    mapping(address => mapping(address => uint256)) public collateralsEDecimal;\n    mapping(address => mapping(address => uint256)) public debtsE18;\n    mapping(address => uint256) public tokenDebtsE18;\n    mapping(address => mapping(address => uint256)) public stabilityFeeE18;\n    mapping(address => mapping(address => uint256)) public lastUpdate;\n    mapping(address => mapping(address => uint256)) public liquidationBlock;\n\n    // @notice check if liquidation process not started for asset of user\n    modifier notLiquidating(address asset, address user) {\n        if (liquidationBlock[asset][user] > 0) revert LiquidationIsTriggered();\n        _;\n    }\n\n    RewardChefV2 public rewardChef;\n\n    // @notice vault is initialize with parameters for auth (we are using OZ instead)\n    // and it accept address for wrapped eth, main stable coin, and probably governance token\n    function initialize(\n        address _authControl,\n        address _stablecoin,\n        address _foundation,\n        address _rewardChef\n    ) public initializer {\n        __SuVaultParameters_init(_authControl, payable(this), _foundation);\n\n        STABLECOIN = _stablecoin;\n        rewardChef = RewardChefV2(_rewardChef);\n    }\n\n    // @notice do not accept direct payments from users because they will be stuck on contract address\n    receive() external payable {\n        revert Restricted();\n    }\n\n    function update(address asset, address user) public onlyVaultAccess notLiquidating(asset, user) {\n        // probably should be checked if zero then skip\n        uint256 debtWithFeeE18 = getTotalDebtE18(asset, user);\n\n        tokenDebtsE18[asset] = tokenDebtsE18[asset] - debtsE18[asset][user] + debtWithFeeE18;\n        debtsE18[asset][user] = debtWithFeeE18;\n        stabilityFeeE18[asset][user] = protocolStabilityFeeE18[asset];\n        lastUpdate[asset][user] = block.timestamp;\n    }\n\n    function destroy(address asset, address user) public onlyVaultAccess {\n        delete stabilityFeeE18[asset][user];\n        delete lastUpdate[asset][user];\n        delete liquidationBlock[asset][user];\n    }\n\n    function deposit(address asset, address user, uint256 amountEDecimal, uint256 lockupPeriodSeconds) external onlyVaultAccess notLiquidating(asset, user) {\n        SafeERC20Upgradeable.safeTransferFrom(IERC20Upgradeable(asset), user, address(this), amountEDecimal);\n        collateralsEDecimal[asset][user] = collateralsEDecimal[asset][user] + amountEDecimal;\n        rewardChef.increaseAmount(asset, user, amountEDecimal, lockupPeriodSeconds);\n    }\n\n    function withdraw(address asset, address user, address recipient, uint256 amountEDecimal) public onlyVaultAccess {\n        if (amountEDecimal > collateralsEDecimal[asset][user]) revert WithdrawExceeded();\n        collateralsEDecimal[asset][user] = collateralsEDecimal[asset][user] - amountEDecimal;\n        SafeERC20Upgradeable.safeTransfer(IERC20Upgradeable(asset), recipient, amountEDecimal);\n        rewardChef.decreaseAmount(asset, user, amountEDecimal);\n    }\n\n    function emergencyWithdraw(address asset, address user, uint256 amountEDecimal) external onlyVaultAccess {\n        if (amountEDecimal > collateralsEDecimal[asset][user]) revert WithdrawExceeded();\n        collateralsEDecimal[asset][user] = collateralsEDecimal[asset][user] - amountEDecimal;\n        SafeERC20Upgradeable.safeTransfer(IERC20Upgradeable(asset), user, amountEDecimal);\n\n        try rewardChef.resetAmount(asset, user) {} catch {}\n    }\n\n    function borrow(address asset, address user, uint256 amountE18) external onlyVaultAccess notLiquidating(asset, user) {\n        update(asset, user);\n\n        debtsE18[asset][user] = debtsE18[asset][user] + amountE18;\n        tokenDebtsE18[asset] = tokenDebtsE18[asset] + amountE18;\n\n        if (tokenDebtsE18[asset] > tokenDebtLimitE18[asset]) revert AssetDebtLimit();\n\n        USDPro(STABLECOIN).mint(user, amountE18);\n    }\n\n    function _cutDebt(address asset, address user, uint256 stablecoinAmountE18) internal onlyVaultAccess {\n        if (stablecoinAmountE18 > debtsE18[asset][user]) revert WrongDebt();\n        if (stablecoinAmountE18 > tokenDebtsE18[asset]) revert WrongTotalDebt();\n\n        // current debt of user by given collateral\n        // is being decreased by chosen amount\n        debtsE18[asset][user] = debtsE18[asset][user] - stablecoinAmountE18;\n\n        // total debt by asset is being decreased too\n        // this value is used to limit total collateral allowed debt\n        tokenDebtsE18[asset] = tokenDebtsE18[asset] - stablecoinAmountE18;\n    }\n\n    function liquidate(\n        address asset,\n        address user,\n        address recipient,\n        uint256 assetAmountEDecimal,\n        uint256 stablecoinAmountE18\n    ) external onlyVaultAccess {\n        if (assetAmountEDecimal == 0 && stablecoinAmountE18 == 0) revert UselessTransaction();\n\n        // reduce debt and don't repay, stablecoinAmount == 0 in case of withdraw\n        if (stablecoinAmountE18 != 0) {\n            _cutDebt(asset, user, stablecoinAmountE18);\n        }\n\n        // vault will transfer collateral to the user\n        if (assetAmountEDecimal != 0) {\n            withdraw(asset, user, recipient, assetAmountEDecimal);\n        }\n\n        // clean state\n        if (debtsE18[asset][user] == 0) {\n            destroy(asset, user);\n            emit PositionLiquidated(asset, user, recipient, assetAmountEDecimal, stablecoinAmountE18);\n        } else {\n            emit PositionLiquidatedPartial(asset, user, recipient, assetAmountEDecimal, stablecoinAmountE18);\n        }\n    }\n\n    function triggerLiquidation(address asset, address positionOwner) external onlyVaultAccess notLiquidating(asset, positionOwner) {\n        emit LiquidationTriggered(asset, positionOwner);\n\n        liquidationBlock[asset][positionOwner] = block.number;\n    }\n\n    function getTotalDebtE18(address asset, address user) public view returns (uint) {\n        uint256 debtE18 = debtsE18[asset][user];\n        uint256 feeE18 = calculateFeeE18(asset, user, debtE18);\n        return debtE18 + feeE18;\n    }\n\n    function calculateFeeE18(address asset, address user, uint256 amountE18) public view returns (uint) {\n        uint256 sFeePercentE18 = stabilityFeeE18[asset][user];\n        uint256 timePast = block.timestamp - lastUpdate[asset][user];\n\n        return amountE18 * sFeePercentE18 * timePast / (365 days) / 1e18;\n    }\n\n    function payFeeAndBurn(\n        address repayer,\n        uint256 stablecoinsToRepaymentE18,\n        uint256 stablecoinsToFoundationE18\n    ) external onlyVaultAccess {\n        emit PositionRepaid(repayer, stablecoinsToRepaymentE18, stablecoinsToFoundationE18);\n\n        // the repayer transfers fees and excesses over the repayment\n        if (stablecoinsToFoundationE18 != 0) {\n            SafeERC20Upgradeable.safeTransferFrom(\n                IERC20Upgradeable(STABLECOIN),\n                repayer,\n                foundation,\n                stablecoinsToFoundationE18\n            );\n        }\n\n        // we burn stablecoin from user\n        USDPro(STABLECOIN).burn(repayer, stablecoinsToRepaymentE18);\n    }\n\n    function setRewardChef(address _rewardChef) public onlyVaultAccess {\n        rewardChef = RewardChefV2(_rewardChef);\n    }\n}\n"
    },
    "contracts/lending/SuVaultParameters.sol": {
      "content": "// SPDX-License-Identifier: BSL 1.1\r\n\r\nimport \"../access-control/SuAccessControlSingleton.sol\";\r\nimport \"../access-control/SuAuthenticated.sol\";\r\nimport \"../interfaces/ISuVaultParameters.sol\";\r\n\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract SuVaultParameters is SuAuthenticated, ISuVaultParameters {\r\n    mapping(address => uint256) public protocolStabilityFeeE18;\r\n    mapping(address => uint256) public tokenDebtLimitE18;\r\n    address public foundation;\r\n    address public vault;\r\n\r\n    // how can vault address be known at this moment?\r\n    // Precult based on CREATE spec\r\n    // can be created another function to set vault address once deployed?\r\n    // Yes, possibly with some logic change\r\n    function __SuVaultParameters_init(\r\n        address _authControl,\r\n        address payable _vault,\r\n        address _foundation\r\n    )  internal onlyInitializing {\r\n        if (_vault == address(0) || _foundation == address(0)) revert ZeroAddress();\r\n\r\n        __SuAuthenticated_init(_authControl);\r\n        vault = _vault;\r\n        foundation = _foundation;\r\n    }\r\n\r\n    function setFoundation(address newFoundation) external onlyOwner {\r\n        if (newFoundation == address(0)) revert ZeroAddress();\r\n        foundation = newFoundation;\r\n    }\r\n\r\n    function setCollateral(address asset, uint256 stabilityFeeValueE18, uint256 stablecoinLimitE18) external onlyOwner {\r\n        // stability fee should be validated in range, what is stability fee should be described here?\r\n        setStabilityFeeE18(asset, stabilityFeeValueE18);\r\n        // why debt limit for collateral is necessary? to manage risks in case of collateral failure?\r\n        setTokenDebtLimitE18(asset, stablecoinLimitE18);\r\n    }\r\n\r\n    function setStabilityFeeE18(address asset, uint256 newValue) public onlyOwner {\r\n        protocolStabilityFeeE18[asset] = newValue;\r\n    }\r\n\r\n    function setTokenDebtLimitE18(address asset, uint256 limit) public onlyOwner {\r\n        tokenDebtLimitE18[asset] = limit;\r\n    }\r\n}\r\n"
    },
    "contracts/liquidator/SuLiquidation.sol": {
      "content": "// SPDX-License-Identifier: BSL 1.1\n/*\n  Copyright 2022 StableUnit: Artem Belozerov\n*/\npragma solidity ^0.8.0;\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"hardhat/console.sol\";\nimport \"../interfaces/ISuLiquidation.sol\";\nimport \"../interfaces/ISuOracle.sol\";\nimport \"../interfaces/IRewardChefV2.sol\";\nimport \"../interfaces/ISuLendingLiquidation.sol\";\nimport \"./SuLiquidationDiscount.sol\";\nimport \"./SuLiquidationStructs.sol\";\n\ncontract SuLiquidation is SuLiquidationDiscount, ISuLiquidation {\n    error ZeroAddress();\n    error LessThanMinimum();\n    error NotEnoughAmount();\n    error NotEnoughDeferredAmount();\n    error TooMuchAmount();\n\n    // solhint-disable var-name-mixedcase\n    ISuLendingLiquidation internal SU_LENDING_LIQUIDATION;\n    ISuOracle internal SU_ORACLE;\n    IRewardChefV2 internal SU_REWARD;\n    // solhint-enable var-name-mixedcase\n\n    // asset => structure of deferred stablecoin amount:\n    // - liquidationBlock - the block number when the liquidation was triggered.\n    // - toRepaymentE18 - amount of stablecoins which will be burned as debt repayment.\n    // - toFoundationE18 - amount of stablecoins which will be transfered to the foundation\n    //      as an excess of stablecoins over debt repayment\n    mapping(address => DeferredStablecoinAmount) internal _deferredStablecoinAmounts;\n\n    function initialize(\n        address _authControl,\n        address _suLendingLiquidation,\n        address _suOracle,\n        address _suReward\n    ) public initializer {\n        SuLiquidationDiscount.init(_authControl);\n\n        if (_suLendingLiquidation == address(0) || _suOracle == address(0)) revert ZeroAddress();\n\n        SU_LENDING_LIQUIDATION = ISuLendingLiquidation(_suLendingLiquidation);\n        SU_ORACLE = ISuOracle(_suOracle);\n        SU_REWARD = IRewardChefV2(_suReward);\n    }\n\n    // @notice Calculates a liquidation discount\n    // @param asset The address of the collateral token\n    // @param owner The owner of the collateral\n    function calculateLiquidationDiscount(\n        address asset,\n        address owner\n    ) external view returns (uint256) {\n\n        // get the block number when the liquidation was triggered\n        uint256 liquidationBlock = SU_LENDING_LIQUIDATION.getLiquidationBlock(asset, owner);\n\n        // discount depends on a block number\n        return _getAggressiveOrMiddleDiscountE18(asset, owner, liquidationBlock);\n    }\n\n    // @notice Swaps USDPro to the collateral\n    // @param asset The address of the collateral token\n    // @param owner The owner of the collateral\n    // @param stablecoinAmountE18 The amount of stablecoins for the collateral buyout\n    // @param minAssetAmountEDecimal The minimum amount of collateral which the liquidator desires to obtain\n    function swapUsdProToAsset(\n        address asset,\n        address owner,\n        uint256 stablecoinAmountE18,\n        uint256 minAssetAmountEDecimal\n    ) external {\n\n        // prepare parameters of the liquidation\n        (\n            uint256 assetAmountE18,\n            uint256 stablecoinsToRepaymentE18,\n            uint256 stablecoinsToFoundationE18\n        ) = _prepareLiquidationParams(asset, owner, stablecoinAmountE18, minAssetAmountEDecimal);\n\n        // repay the part of debt and withdraw the part of collateral to the liquidator\n        SU_LENDING_LIQUIDATION.liquidateAndRepay(\n            asset,\n            owner,\n            msg.sender,\n            stablecoinsToRepaymentE18,\n            stablecoinsToFoundationE18,\n            assetAmountE18\n        );\n    }\n\n    // @notice Swaps stablecoins from the whitelist to the collateral\n    // @dev This is a first step of two\n    // @param asset The address of the collateral token\n    // @param owner The owner of the collateral\n    // @param stablecoinToken The address of the stablecoin token\n    // @param stablecoinAmountEDecimal The amount of stablecoins for the collateral buyout\n    // @param minAssetAmountEDecimal The minimum amount of collateral which the liquidator desires to obtain\n    function swapStablecoinToAsset(\n        address asset,\n        address owner,\n        address stablecoinToken,\n        uint256 stablecoinAmountEDecimal,\n        uint256 minAssetAmountEDecimal\n    ) external {\n        // TODO: whitelist\n\n        // calculate the price in usd\n        uint256 usdPriceOfStablecoinE18 = SU_ORACLE.getUsdPrice1e18(stablecoinToken);\n        uint256 stablecoinAmountE18 = usdPriceOfStablecoinE18 * stablecoinAmountEDecimal / 1e18;\n\n        // prepare parameters of the liquidation\n        (\n            uint256 assetAmountE18,\n            uint256 usdProToRepaymentE18,\n            uint256 usdProToFoundationE18\n        ) = _prepareLiquidationParams(asset, owner, stablecoinAmountE18, minAssetAmountEDecimal);\n\n        // store the stablecoins of the liquidator to this contract\n        uint256 paidStablecoinAmountEDecimal = (usdProToRepaymentE18 + usdProToFoundationE18) * 1e18 / usdPriceOfStablecoinE18;\n        SafeERC20Upgradeable.safeTransferFrom(\n            IERC20Upgradeable(stablecoinToken),\n            msg.sender,\n            address(this),\n            paidStablecoinAmountEDecimal\n        );\n\n        // get the block number when the liquidation was triggered\n        // it will be needed to calculate the conservative discount\n        // TODO: replace to _deferStablecoinsE18()\n        uint256 liquidationBlock = SU_LENDING_LIQUIDATION.getLiquidationBlock(asset, owner);\n\n        // save the stablecoin amounts for the future payments\n        // when another actor will swap USDPro to the stablecoins(second step)\n        _deferStablecoinsE18(\n            stablecoinToken,\n            liquidationBlock,\n            usdProToRepaymentE18,\n            usdProToFoundationE18\n        );\n\n        // cut the part of debt repayment and withdraw the part of collateral to the liquidator\n        SU_LENDING_LIQUIDATION.liquidate(asset, owner, msg.sender, usdProToRepaymentE18, assetAmountE18);\n    }\n\n    // @notice Swaps USDPro to stablecoins from the whitelist\n    // @dev This is a second step of two\n    // @param stablecoinToken The address of the stablecoin token\n    // @param stablecoinAmountEDecimal The amount of stablecoins\n    function swapUsdProToStablecoin(\n        address stablecoinToken,\n        uint256 stablecoinAmountEDecimal\n    ) external {\n        // TODO: whitelist\n\n        // calculate the prices in usd\n        uint256 stablecoinAmountE18 = SU_ORACLE.getUsdPrice1e18(stablecoinToken) * stablecoinAmountEDecimal / 1e18;\n\n        // reduce an amount of deferred stablecoins by \"stablecoinAmountEDecimal\"\n        (uint256 usdProToRepaymentE18, uint256 usdProToFoundationE18) = _popDeferredStablecoinsE18(\n            stablecoinToken,\n            stablecoinAmountE18\n        );\n\n        SU_LENDING_LIQUIDATION.payFeeAndBurn(msg.sender, usdProToRepaymentE18, usdProToFoundationE18);\n\n        // the contract transfers the stablecoins to the sender\n        SafeERC20Upgradeable.safeTransfer(IERC20Upgradeable(stablecoinToken), msg.sender, stablecoinAmountEDecimal);\n    }\n\n    // @notice Returns parameters for future liquidation\n    // @param asset The address of the collateral token\n    // @param owner The owner of the collateral\n    // @param stablecoinAmountE18 The amount of stablecoins for the collateral buyout\n    // @param minAssetAmountEDecimal The minimum amount of collateral which the liquidator desires to obtain\n    function _prepareLiquidationParams(\n        address asset,\n        address owner,\n        uint256 stablecoinAmountE18,\n        uint256 minAssetAmountEDecimal\n    ) internal view returns (uint256, uint256, uint256) {\n\n        // get CDP info from the vault\n        // TODO: remove liquidationBlock from response\n        (\n            uint256 liquidationBlock,\n            uint256 collateralEDecimal,\n            uint256 debtE18\n        ) = SU_LENDING_LIQUIDATION.getPositionInfo(asset, owner);\n\n        console.log(\"LIQUIDATION PARAMS (block, collaterl, debt):\", liquidationBlock, collateralEDecimal, debtE18);\n\n        // discount depends on a block number\n        uint256 discountE18 = _getAggressiveOrMiddleDiscountE18(asset, owner, liquidationBlock);\n\n        // calculate the price of asset in USD\n        uint256 usdPriceOfAssetE18 = SU_ORACLE.getUsdPrice1e18(asset);\n\n        // calculate the amount of asset which will be withdrawn to the liquidator\n        (uint256 assetAmountEDecimal, uint256 discountedStablecoinAmountE18) = _calculateLiquidationAssetAmount(\n            usdPriceOfAssetE18,\n            stablecoinAmountE18,\n            collateralEDecimal,\n            discountE18\n        );\n        if (assetAmountEDecimal < minAssetAmountEDecimal) revert LessThanMinimum();\n\n        // an excess amount will be transfered to the foundation\n        // the rest - will be burned as the debt repayment\n        (uint256 repaymentE18, uint256 excessE18) = _calculateLiquidationStablecoinAmount(\n            debtE18,\n            discountedStablecoinAmountE18\n        );\n        return (assetAmountEDecimal, repaymentE18, excessE18);\n    }\n\n    // @notice Calculates the amount of asset which will be liquidated\n    // @param usdPriceOfAssetE18 The price of collateral in worth of stablecoins\n    // @param stablecoinAmountE18 The amount of stablecoins for the collateral buyout\n    // @param collateralEDecimal The amount of collateral\n    // @param discountE18 The percentage of discount for a liquidator\n    function _calculateLiquidationAssetAmount(\n        uint256 usdPriceOfAssetE18,\n        uint256 stablecoinAmountE18,\n        uint256 collateralEDecimal,\n        uint256 discountE18\n    ) internal view returns (uint256, uint256) {\n\n        // calculate value of collateral\n        uint256 collateralValueE18 = usdPriceOfAssetE18 * collateralEDecimal / 1e18;\n\n        console.log(\"CALC_BONUS collateral(amount * price = assetValue):\", collateralEDecimal, usdPriceOfAssetE18, collateralValueE18);\n        console.log(\"CALC_BONUS stablecoin (stablecoinAmountE18, discountE18):\", stablecoinAmountE18, discountE18);\n\n        // apply the discount. the amount of stablecoins could be decreased after the discount applying.\n        uint256 stablecoinAmountWithBonusE18;\n        (stablecoinAmountE18, stablecoinAmountWithBonusE18) = _applyDiscount(\n            collateralValueE18,\n            stablecoinAmountE18,\n            discountE18\n        );\n\n        console.log(\"CALC_BONUS stablecoin remainder:\", collateralValueE18 - stablecoinAmountWithBonusE18);\n        console.log(\"CALC_BONUS stablecoin bonus:\", stablecoinAmountWithBonusE18 - stablecoinAmountE18);\n        console.log(\"CALC_BONUS stablecoin payment:\", stablecoinAmountE18);\n\n        // calculate an amount of asset which a liquidator could take for his stablecoins\n        // including bonus\n        uint256 assetAmountEDecimal = stablecoinAmountWithBonusE18 * 1e18 / usdPriceOfAssetE18;\n        return (assetAmountEDecimal, stablecoinAmountE18);\n    }\n\n    // @notice Returns the bonus and the amount of stablecoins after applying the discount\n    // @param collateralValueE18 The amount of collateral in worth of the stablecoins\n    // @param stablecoinAmountE18 The amount of stablecoins for the collateral buyout\n    // @param discountE18 The percentage of discount for a liquidator\n    function _applyDiscount(\n        uint256 collateralValueE18,\n        uint256 stablecoinAmountE18,\n        uint256 discountE18\n    ) internal pure returns (\n        uint256 stablecoinAmountWithoutBonusE18,\n        uint256 stablecoinAmountWithBonusE18\n    ) {\n        stablecoinAmountWithBonusE18 = stablecoinAmountE18 * (1e18 + discountE18) / 1e18;\n\n        // decrease the amount of stablecoins which will be withdrawn from the liquidator\n        // if the total amount(with bonus) more then the collateral value\n        if (stablecoinAmountWithBonusE18 > collateralValueE18) {\n            stablecoinAmountWithBonusE18 = collateralValueE18;\n            stablecoinAmountWithoutBonusE18 = collateralValueE18 * 1e18 / (1e18 + discountE18);\n        } else {\n            stablecoinAmountWithoutBonusE18 = stablecoinAmountE18;\n        }\n    }\n\n    // @notice Calculates what the amount of stablecoins goes to repay the debt\n    // @param debtE18 The amount of borrowed stablecoins\n    // @param amountE18 The amount of the sender's stablecoins\n    function _calculateLiquidationStablecoinAmount(\n        uint256 debtE18,\n        uint256 amountE18\n    ) internal pure returns (\n        uint256 repaymentE18,\n        uint256 excessE18\n    ) {\n        if (amountE18 > debtE18) {\n            excessE18 = amountE18 - debtE18;\n            repaymentE18 = debtE18;\n        } else {\n            repaymentE18 = amountE18;\n        }\n    }\n\n    // @notice Stores stablecoins for the future payments\n    // @param stablecoinToken The address of the stablecoin token\n    // @param liquidationBlock The block number when the liquidation was triggered\n    // @param toRepaymentE18 The amount of stablecoins which will be burned as a debt repayment\n    // @param toFoundationE18 The amount of stablecoins which will be transfered to the foundation\n    //     (fees and the excess of stablecoins over the debt amount)\n    function _deferStablecoinsE18(\n        address stablecoinToken,\n        uint256 liquidationBlock,\n        uint256 toRepaymentE18,\n        uint256 toFoundationE18\n    ) internal {\n        DeferredStablecoinAmount storage deferredAmount = _deferredStablecoinAmounts[stablecoinToken];\n        deferredAmount.toRepaymentE18 += toRepaymentE18;\n        deferredAmount.toFoundationE18 += toFoundationE18;\n        if (deferredAmount.liquidationBlock == 0) {\n            deferredAmount.liquidationBlock = liquidationBlock;\n        }\n    }\n\n    // @notice Returns deferred stablecoins for burning and transferring to the foundation\n    // @param stablecoinToken The address of the stablecoin token\n    // @param amountE18 The total number of stablecoins which will be returned\n    // @return toRepaymentE18 The amount of stablecoins which will be burned as a debt repayment\n    // @return toFoundationE18 The amount of stablecoins which will be transfered to the foundation\n    function _popDeferredStablecoinsE18(\n        address stablecoinToken,\n        uint256 amountE18\n    ) internal returns (uint256 toRepaymentE18, uint256 toFoundationE18) {\n        if (amountE18 == 0) revert NotEnoughAmount();\n\n        DeferredStablecoinAmount storage deferredAmount = _deferredStablecoinAmounts[stablecoinToken];\n        if (deferredAmount.liquidationBlock == 0) revert NotEnoughDeferredAmount();\n\n        // calculate conservative discount\n        uint256 discountE18 = calculateDiscountE18(\n            stablecoinToken,\n            DiscountType.conservative,\n            deferredAmount.liquidationBlock\n        );\n\n        (toRepaymentE18, toFoundationE18) = _calculateProportion(deferredAmount, amountE18);\n\n        // decrease an amount of deferred stablecoins\n        if (toRepaymentE18 != 0) {\n            deferredAmount.toRepaymentE18 -= toRepaymentE18;\n        }\n        if (toFoundationE18 != 0) {\n            deferredAmount.toFoundationE18 -= toFoundationE18;\n        }\n\n        if (deferredAmount.toRepaymentE18 == 0 && deferredAmount.toFoundationE18 == 0) {\n            delete _deferredStablecoinAmounts[stablecoinToken];\n        }\n\n        // apply the conservative discount. it reduces a payment in USDPro which pays the sender\n        toRepaymentE18 = toRepaymentE18 * 1e18 / (1e18 + discountE18);\n        toFoundationE18 = toFoundationE18 * 1e18 / (1e18 + discountE18);\n        console.log(\"DISCOUNTS (discountE18, suToRepayment, suToFoundation)\", discountE18, toRepaymentE18, toFoundationE18);\n    }\n\n    function _calculateProportion(\n        DeferredStablecoinAmount memory deferredAmount,\n        uint256 amountE18\n    ) internal pure returns (uint256 toRepaymentE18, uint256 toFoundationE18) {\n        // Firstly we try to empty the \"toRepaymentE18\"\n        // TODO: should find out the correct proportion between toRepayment and toFoundation\n\n        if (amountE18 <= deferredAmount.toRepaymentE18) {\n            toRepaymentE18 = amountE18;\n        } else {\n            amountE18 -= deferredAmount.toRepaymentE18;\n            if (amountE18 > deferredAmount.toFoundationE18) revert TooMuchAmount();\n\n            toRepaymentE18 = deferredAmount.toRepaymentE18;\n            toFoundationE18 = amountE18;\n        }\n    }\n\n    function _getAggressiveOrMiddleDiscountE18(\n        address asset,\n        address owner,\n        uint256 liquidationBlock\n    ) internal view returns (uint256) {\n        DiscountType discountType = (owner == address(SU_REWARD)) ? DiscountType.middle : DiscountType.aggressive;\n        return calculateDiscountE18(asset, discountType, liquidationBlock);\n    }\n}\n"
    },
    "contracts/liquidator/SuLiquidationConstants.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nlibrary SuLiquidationConstants {\n    uint256 internal constant AGGRESSIVE_DISCOUNT_LIMIT_PERCENT_E18 = 5e16;\n    uint256 internal constant ONE_HUNDRED_PERCENT_E18 = 1e18;\n}"
    },
    "contracts/liquidator/SuLiquidationDiscount.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport \"../access-control/SuAuthenticated.sol\";\nimport \"../interfaces/ISuLiquidationDiscount.sol\";\nimport \"./SuLiquidationConstants.sol\";\nimport \"./SuLiquidationStructs.sol\";\n\ncontract SuLiquidationDiscount is ISuLiquidationDiscount, SuAuthenticated {\n    error IncorrectDiscount();\n\n    // asset => discountType(aggressive, middle, conservative) => discount info:\n    //    - percent of discount at the first block\n    //    - increment of discount per block in percentages\n    mapping(address => mapping(DiscountType => DiscountInfo)) internal _discountsInfo;\n\n    function init(address _authControl) public initializer {\n        __SuAuthenticated_init(_authControl);\n    }\n\n    // @notice Only owner is able to call this function\n    // @dev Sets the liquidation discount\n    // @param asset The address of the asset token\n    // @param discountType Determines how aggressively the lending module offers a discount\n    // @param discountInfo Determines discount percentages depending on a block number\n    function setDiscountInfo(\n        address asset,\n        DiscountType discountType,\n        DiscountInfo calldata discountInfo\n    ) external onlyOwner {\n        // check that discount percentage less than a limit(e.g. 100%)\n        _verifyDiscountInfo(discountType, discountInfo);\n        _discountsInfo[asset][discountType] = discountInfo;\n    }\n\n    // @notice Returns information about discount percentages depending on a block number\n    // @param asset The address of the asset token\n    // @param discountType Type of discount determines how aggressively the lending module offers a discount\n    function getDiscountInfo(\n        address asset,\n        DiscountType discountType\n    ) external view returns (DiscountInfo memory discountInfo) {\n        return _discountsInfo[asset][discountType];\n    }\n\n    // @dev This is a linear function of the discount change.\n    //     Calculates the liquidation discount by passed blocks.\n    // @param asset The address of the main collateral token\n    // @param discountType Determines how aggressively the lending module offers a discount\n    // @param liquidationBlock The block number when the liquidation was triggered\n    // @return Amount of discount in percents, E18 format\n    function calculateDiscountE18(\n        address asset,\n        DiscountType discountType,\n        uint256 liquidationBlock\n    ) public view returns (uint256) {\n        DiscountInfo storage discountInfo = _discountsInfo[asset][discountType];\n\n        // number of blocks between the liquidation starts and now\n        uint256 blocksPast = block.number - liquidationBlock;\n\n        if (blocksPast == 0) {\n            return 0;\n        } else if (blocksPast == 1) {\n            return discountInfo.firstBlockE18;\n        } else {\n\n            if (discountType == DiscountType.aggressive) {\n                // the aggressive discount starts the second block with a number equals the stepPerBlockE18\n                return _discountFormula(\n                    blocksPast,\n                    SuLiquidationConstants.AGGRESSIVE_DISCOUNT_LIMIT_PERCENT_E18,\n                    discountInfo.stepPerBlockE18,\n                    discountInfo.stepPerBlockE18,\n                    2\n                );\n            } else {\n                return _discountFormula(\n                    blocksPast,\n                    SuLiquidationConstants.ONE_HUNDRED_PERCENT_E18,\n                    discountInfo.firstBlockE18,\n                    discountInfo.stepPerBlockE18,\n                    1\n                );\n            }\n        }\n    }\n\n    // @notice Returns percentages of discount by passed blocks from liquidation start\n    // @param blocksPast The number of blocks passed after the liquidation was triggered\n    // @param limitDiscountE18 The upper limit of discount in percentage\n    // @param initialDiscountE18 Starting discount\n    // @param stepPerBlockE18 Increment of discount per block in percentages\n    // @param initialBlockNumber The block number which the increment of discount starts from\n    function _discountFormula(\n        uint256 blocksPast,\n        uint256 limitDiscountE18,\n        uint256 initialDiscountE18,\n        uint256 stepPerBlockE18,\n        uint256 initialBlockNumber\n    ) internal pure returns (uint256) {\n        uint256 discountE18 = initialDiscountE18 + (blocksPast - initialBlockNumber) * stepPerBlockE18;\n\n        // return the limit discount if the block number went over the limit\n        return (discountE18 > limitDiscountE18) ? limitDiscountE18 : discountE18;\n    }\n\n    function _verifyDiscountInfo(DiscountType discountType, DiscountInfo calldata discountInfo) internal pure {\n\n        // the aggressive discount has a special upper limit\n        uint256 limitDiscountE18;\n        if (discountType == DiscountType.aggressive) {\n            limitDiscountE18 = SuLiquidationConstants.AGGRESSIVE_DISCOUNT_LIMIT_PERCENT_E18;\n        } else {\n            limitDiscountE18 = SuLiquidationConstants.ONE_HUNDRED_PERCENT_E18;\n        }\n\n        if (discountInfo.firstBlockE18 >= limitDiscountE18 || discountInfo.stepPerBlockE18 >= limitDiscountE18) {\n            revert IncorrectDiscount();\n        }\n    }\n}"
    },
    "contracts/liquidator/SuLiquidationStructs.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\n// We have three discount strategies(numbers as an example):\n//\n// Mode #1 - aggressive: The lending module sells ASAP\n// Discount goes from 0.1% first block, 1% second block, goes linear +1% minute\n//\n// Mode #2 - middle: The lending module sells some asset for whitelisted stablecoin as expensive as possible, no rush\n// Discount goes from 0.1% first block, liner increase +0.1% minute\n//\n// Mode #3 - conservative: The lending module sells stablecoin(USDC) for USDPro as expensive as possible, no rush\n// Discount goes from 0.01% first block, goes linear until 5% max in one day or so\n\nenum DiscountType {\n    aggressive,\n    middle,\n    conservative\n}\n\n// firstBlockE18 - percent of discount at the first block\n// stepPerBlockE18 - percent of discount which will be incremented per block after N>=2 block\nstruct DiscountInfo {\n    uint256 firstBlockE18;\n    uint256 stepPerBlockE18;\n}\n\n// liquidationBlock - the block number when the liquidation was triggered.\n//      It will turn into zero when all deferred stablecoins(toRepaymentE18 and toFoundationE18) be sold.\n// toRepaymentE18 - amount of stablecoins which will be burned as debt repayment.\n//      Actually, we can not burn it, because it is not a USDPro. So, we deferred that amounts of stablecoins\n//      until someone swaps the stablecoins to USDPro(see swapUsdProToStablecoin())\n// toFoundationE18 - amount of stablecoins which will be transfered to the foundation.\n//      Has the same idea like \"toRepaymentE18\",\n//      but about an excess of stablecoins over debt repayment\nstruct DeferredStablecoinAmount {\n    uint256 liquidationBlock;\n    uint256 toRepaymentE18;\n    uint256 toFoundationE18;\n}"
    },
    "contracts/reward/RewardChefV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\";\nimport \"../access-control/SuAuthenticated.sol\";\nimport \"../interfaces/IRewardChefV2.sol\";\nimport \"../interfaces/ISuOracle.sol\";\n\ncontract RewardChefV2 is IRewardChefV2, SuAuthenticated {\n    using SafeCastUpgradeable for uint256;\n    using SafeCastUpgradeable for uint128;\n    using SafeCastUpgradeable for uint64;\n    using SafeCastUpgradeable for int256;\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.UintSet;\n\n    // SuDAO: instead of pool Ids (pid) we use address of the asset directly.\n    //        Also, there aren't just LPs but regular assets as well\n    // @notice Info of each MCV2 pool. PoolInfo memory pool = poolInfo[_pid]\n    //    PoolInfo[] public poolInfo;\n    mapping(address => PoolInfo) public poolInfo;\n\n    // @notice Info of each user that stakes tokens. userInfo[_asset][_user]\n    mapping(address => mapping(address => UserInfo)) public userInfo;\n\n    uint256 public totalAllocPoint;\n\n    // @notice Address of the LP token for each MCV2 pool.\n    //    IERC20Upgradeable[] public lpTokens;\n    // @notice Set of reward-able assets\n    EnumerableSetUpgradeable.AddressSet private assetSet;\n    uint256 private constant ACC_REWARD_TOKEN_PRECISION = 1e12; // TODO*: make it 1e18? check values overflow\n\n    // ==========================REWARDER================================\n    // @notice Address of REWARD_TOKEN contract.\n    IERC20Upgradeable public REWARD_TOKEN;\n    ISuOracle public ORACLE;\n    uint256 public rewardPerBlock;\n    uint256 public rewardEndBlock;\n\n    function refillReward(uint256 amount, uint64 endBlock) public onlyOwner {\n        require(endBlock > block.number, \"EndBlock should be greater than current block\");\n        // TODO: gas optimization\n        updateAllPools();\n\n        REWARD_TOKEN.safeTransferFrom(msg.sender, address(this), amount);\n        uint256 rewardLeftAmount;\n        // if there are active rewards leftovers\n        if (rewardEndBlock > 0) {\n            // if we call refillReward before old endBlock ends\n            if (block.number < rewardEndBlock) {\n                rewardLeftAmount = rewardPerBlock * (rewardEndBlock - block.number);\n            } else {\n                // if we start the new reward interval that has nothing in common with the old noe\n                rewardLeftAmount = 0;\n            }\n        }\n        rewardPerBlock = (rewardLeftAmount + amount) / (endBlock - block.number);\n        rewardEndBlock = endBlock;\n    }\n\n    function rewardsBetweenBlocks(uint256 startBlock, uint256 endBlock) public view returns (uint256) {\n        // if all rewards were allocation before our range - then answer is 0\n        if (rewardEndBlock <= startBlock) {\n            return 0;\n        } else {\n            // if rewards allocates on the whole range, than just calc rectangle area\n            if (endBlock < rewardEndBlock) {\n                return (endBlock - startBlock) * rewardPerBlock;\n            } else {\n                // other-vice, rewards end its allocation during our rage, so we have to calc only until rewardEndBlock\n                return (rewardEndBlock - startBlock) * rewardPerBlock;\n            }\n        }\n    }\n\n    /* ==========================LOCKUP LOGIC========================================= */\n    mapping(uint256 => uint256) public multiplicator1e18ForLockupPeriod;\n    EnumerableSetUpgradeable.UintSet private possibleLockupPeriodsSeconds;\n\n    function getPossibleLockupPeriodsSeconds() external view returns (ILockupPeriod[] memory) {\n        uint256[] memory periods = possibleLockupPeriodsSeconds.values();\n        uint256 len = periods.length;\n        ILockupPeriod[] memory lockupPeriods = new ILockupPeriod[](len);\n        for (uint256 i = 0; i < len; i++) {\n            lockupPeriods[i] = ILockupPeriod({\n            lockupPeriodSeconds : periods[i],\n            multiplicator1e18 : multiplicator1e18ForLockupPeriod[periods[i]]\n            });\n        }\n        return lockupPeriods;\n    }\n\n    function setPossibleLockupPeriodsSeconds(uint256 lockupPeriodSeconds, uint256 multiplicator1e18) external onlyOwner {\n        require(lockupPeriodSeconds != 0, \"Lockup period equils zero seconds\");\n        multiplicator1e18ForLockupPeriod[lockupPeriodSeconds] = multiplicator1e18;\n        if (multiplicator1e18 == 0) {\n            possibleLockupPeriodsSeconds.remove(lockupPeriodSeconds);\n        } else {\n            possibleLockupPeriodsSeconds.add(lockupPeriodSeconds);\n        }\n    }\n    /* =================================================================== */\n\n    // @param _rewardToken The REWARD_TOKEN token contract address.\n    function initialize(address _authControl, IERC20Upgradeable _rewardToken, ISuOracle _oracle) public initializer {\n        __SuAuthenticated_init(_authControl);\n\n        REWARD_TOKEN = _rewardToken;\n        ORACLE = _oracle;\n    }\n\n    function add(uint256 allocPoint, address _asset) public onlyOwner {\n        // check for possible duplications\n        require(poolInfo[_asset].lastRewardBlock == 0, \"Pool already exist\");\n\n        uint256 lastRewardBlock = block.number;\n        totalAllocPoint = totalAllocPoint + allocPoint;\n        //        lpTokens.push(_lpToken);\n        assetSet.add(_asset);\n\n        poolInfo[_asset] = PoolInfo({\n        allocPoint : allocPoint.toUint64(),\n        lastRewardBlock : lastRewardBlock.toUint64(),\n        accSushiPerShare : 0,\n        lpSupply : 0\n        });\n\n        emit LogPoolAddition(_asset, allocPoint);\n    }\n\n    function set(address _asset, uint256 _allocPoint) public onlyOwner {\n        require(poolInfo[_asset].lastRewardBlock != 0, \"Pool doesn't exist\");\n        // TODO: why was it in legal in MVC2 to call this function without mandatory update method?\n        updatePool(_asset);\n\n        uint64 oldAllocPoint = poolInfo[_asset].allocPoint;\n        totalAllocPoint = totalAllocPoint - oldAllocPoint + _allocPoint;\n        poolInfo[_asset].allocPoint = _allocPoint.toUint64();\n        if (_allocPoint == 0) {\n            // we don't need to call updatePool(_asset) again\n            // because the result of the second time call in the same block doesn't change anything\n            assetSet.remove(_asset);\n        } else if (oldAllocPoint == 0) {\n            // when pool exists, but asset was removed from assetSet\n            assetSet.add(_asset);\n        }\n        emit LogSetPool(_asset, _allocPoint);\n    }\n\n    function pendingSushi(address _asset, address _user) public view returns (uint256 pending) {\n        PoolInfo memory pool = poolInfo[_asset];\n        UserInfo memory user = userInfo[_asset][_user];\n        uint256 accSushiPerShare = pool.accSushiPerShare;\n        // we don't have real balances anymore, so instead of\n        //        uint256 lpSupply = lpTokens[_pid].balanceOf(address(this));\n        // we use virtual total balance\n        uint256 lpSupply = poolInfo[_asset].lpSupply;\n        if (block.number > pool.lastRewardBlock && lpSupply != 0 && totalAllocPoint != 0) {\n            // how much reward were minted since last update pool.lastRewardBlock\n            uint256 totalSushiReward = rewardsBetweenBlocks(pool.lastRewardBlock, block.number);\n            uint256 poolSushiReward = totalSushiReward * pool.allocPoint / totalAllocPoint;\n            // account it into share value\n            accSushiPerShare = accSushiPerShare + (poolSushiReward * ACC_REWARD_TOKEN_PRECISION / lpSupply);\n        }\n        pending = ((user.amount * accSushiPerShare / ACC_REWARD_TOKEN_PRECISION).toInt256() - user.rewardDebt).toUint256();\n    }\n\n    function updatePool(address asset) public returns (PoolInfo memory pool) {\n        pool = poolInfo[asset];\n        if (block.number > pool.lastRewardBlock) {\n            // uint256 lpSupply = lpTokens[pid].balanceOf(address(this));\n            uint256 lpSupply = pool.lpSupply;\n            if (lpSupply > 0 && pool.allocPoint > 0) {\n                // calc how much rewards are minted since pool.lastRewardBlock for the pool\n                uint256 totalSushiReward = rewardsBetweenBlocks(pool.lastRewardBlock, block.number);\n                uint256 poolSushiReward = totalSushiReward * pool.allocPoint / totalAllocPoint;\n                pool.accSushiPerShare = pool.accSushiPerShare + (poolSushiReward * ACC_REWARD_TOKEN_PRECISION / lpSupply).toUint128();\n            }\n            pool.lastRewardBlock = block.number.toUint64();\n            poolInfo[asset] = pool;\n            emit LogUpdatePool(asset, pool.lastRewardBlock, lpSupply, pool.accSushiPerShare);\n        }\n    }\n\n    function updateAllPools() public {\n        address[] memory assets = assetSet.values();\n        uint256 len = assets.length;\n        for (uint256 i = 0; i < len; i++) {\n            updatePool(assets[i]);\n        }\n    }\n\n    function increaseAmount(address asset, address to, uint256 amountEDecimal, uint256 lockupPeriodSeconds) public onlyOwner {\n        PoolInfo memory pool = updatePool(asset);\n        UserInfo storage user = userInfo[asset][to];\n\n        if (user.lockupPeriodSeconds == 0) {// it means there's no deposit yet\n            user.multiplicator1e18 = multiplicator1e18ForLockupPeriod[lockupPeriodSeconds];\n            user.lockupPeriodSeconds = lockupPeriodSeconds;\n            user.lockupStartTimestamp = block.timestamp;\n        } else {\n            require(user.lockupPeriodSeconds == lockupPeriodSeconds, \"Existing deposit has different lockup\");\n        }\n\n        require(user.multiplicator1e18 != 0, \"User multiplicator equils zero\");\n\n        // Effects\n        // user.amount = user.amount + amountEDecimal;\n        uint256 additionalAmount = amountEDecimal * user.multiplicator1e18 / 1e18;\n        user.amount = user.amount + additionalAmount;\n        user.rewardDebt = user.rewardDebt + (additionalAmount * pool.accSushiPerShare / ACC_REWARD_TOKEN_PRECISION).toInt256();\n\n        // we don't need, since the balances are virtual\n        // lpToken[pid].safeTransferFrom(msg.sender, address(this), amount);\n        // but we need to calc total supply of virtual tokens\n        pool.lpSupply = pool.lpSupply + additionalAmount;\n        poolInfo[asset] = pool;\n\n        emit VirtualDeposit(to, asset, additionalAmount);\n    }\n\n    function decreaseAmount(address asset, address to, uint256 amountEDecimal) public onlyOwner {\n        PoolInfo memory pool = updatePool(asset);\n        UserInfo storage user = userInfo[asset][to];\n\n        require(user.multiplicator1e18 != 0, \"User multiplicator equils zero\");\n\n        // how much penalty?\n        uint256 penalty = 0;\n        if (block.timestamp < user.lockupStartTimestamp + user.lockupPeriodSeconds) {\n           // if we decreasing before time-lock is over\n            penalty = decreaseAmountRewardPenalty(asset, to, amountEDecimal);\n        }\n\n        // Effects\n        uint256 subtractAmount = amountEDecimal * user.multiplicator1e18 / 1e18;\n        user.rewardDebt = user.rewardDebt - (subtractAmount * pool.accSushiPerShare / ACC_REWARD_TOKEN_PRECISION).toInt256() + penalty.toInt256();\n        user.amount = user.amount - subtractAmount;\n\n        if (user.amount == 0 && user.rewardDebt == 0) {\n            // Reset lockupPeriod\n            user.lockupStartTimestamp = block.timestamp;\n            user.lockupPeriodSeconds = 0;\n            user.multiplicator1e18 = 0;\n        }\n\n        // lpTokens[pid].safeTransfer(to, amount);\n        pool.lpSupply = pool.lpSupply - subtractAmount;\n        poolInfo[asset] = pool;\n\n        emit VirtualWithdraw(to, asset, subtractAmount);\n    }\n\n    function decreaseAmountRewardPenalty(address asset, address to, uint256 amountEDecimal) public view returns (uint256) {\n        UserInfo memory user = userInfo[asset][to];\n\n        if (user.multiplicator1e18 == 0) {\n            return 0;\n        }\n\n        uint256 subtractAmount = amountEDecimal * user.multiplicator1e18 / 1e18;\n\n        uint256 pending = pendingSushi(asset, to);\n        return pending * subtractAmount / user.amount;\n    }\n\n    function harvest(address asset, address to, uint256 newLockupPeriodSeconds) public {\n        PoolInfo memory pool = updatePool(asset);\n        UserInfo storage user = userInfo[asset][msg.sender];\n\n        require(user.lockupStartTimestamp + user.lockupPeriodSeconds <= block.timestamp, \"Can't harvest before lockup is over\");\n        require(user.multiplicator1e18 != 0, \"User multiplicator equils zero\");\n\n        int256 accumulatedSushi = (user.amount * pool.accSushiPerShare / ACC_REWARD_TOKEN_PRECISION).toInt256();\n        uint256 _pendingSushi = (accumulatedSushi - user.rewardDebt).toUint256();\n\n        // Effects\n        user.rewardDebt = accumulatedSushi;\n        // accumulatedSushi = user.rewardDebt + _pendingSushi;\n\n        // Interactions\n        if (_pendingSushi > 0) {\n            REWARD_TOKEN.safeTransfer(to, _pendingSushi);\n        }\n\n        // Reset lockupPeriod\n        user.lockupStartTimestamp = block.timestamp;\n        // it's possible to remove code duplicates by using signed amount, but for simplicity I'll leave as it is\n        uint256 newMultiplicator1e18 = multiplicator1e18ForLockupPeriod[newLockupPeriodSeconds];\n        require(newMultiplicator1e18 != 0, \"New multiplicator equils zero\");\n        if (user.multiplicator1e18 < newMultiplicator1e18) {\n            // since multiplicator increases, we need to increase amount\n            uint256 additionalAmount = user.amount * newMultiplicator1e18 / user.multiplicator1e18 - user.amount;\n\n            user.amount = user.amount + additionalAmount;\n            user.rewardDebt = user.rewardDebt + (additionalAmount * pool.accSushiPerShare / ACC_REWARD_TOKEN_PRECISION).toInt256();\n        } else if (user.multiplicator1e18 > newMultiplicator1e18) {\n            uint256 subtractAmount = user.amount - user.amount * newMultiplicator1e18 / user.multiplicator1e18;\n\n            user.rewardDebt = user.rewardDebt - (subtractAmount * pool.accSushiPerShare / ACC_REWARD_TOKEN_PRECISION).toInt256();\n            user.amount = user.amount - subtractAmount;\n        }\n        user.multiplicator1e18 = newMultiplicator1e18;\n\n        emit Harvest(msg.sender, asset, _pendingSushi);\n    }\n\n    function resetAmount(address asset, address to) public {\n        PoolInfo storage pool = poolInfo[asset];\n        UserInfo storage user = userInfo[asset][msg.sender];\n\n        uint256 userAmount = user.amount;\n        uint256 userLockupPeriodSeconds = user.lockupPeriodSeconds;\n\n        pool.lpSupply = pool.lpSupply - userAmount;\n        poolInfo[asset] = pool;\n        user.amount = 0;\n        user.rewardDebt = 0;\n\n        // Reset lockupPeriod\n        user.lockupStartTimestamp = block.timestamp;\n        user.lockupPeriodSeconds = 0;\n        user.multiplicator1e18 = 0;\n\n        emit ResetAmount(msg.sender, asset, to, userAmount, userLockupPeriodSeconds);\n    }\n\n    /* ================================VIEW METHODS====================================== */\n\n    function getPoolApr(address asset) public view returns (uint256) {\n        require(poolInfo[asset].lpSupply != 0, \"RewardChef: Pool doesn't have liquidity\");\n        require(totalAllocPoint != 0, \"RewardChef: Total allocation point is 0\");\n        require(rewardEndBlock > block.number, \"RewardChef: Vesting is already finished\");\n\n        uint256 rewardPerBlockForPool = rewardPerBlock * poolInfo[asset].allocPoint / totalAllocPoint;\n        uint256 rewardTokenPrice = ORACLE.getUsdPrice1e18(address(REWARD_TOKEN));\n        uint256 usdRewardYearForPool = rewardPerBlockForPool * 4 * 60 * 24 * 366 * rewardTokenPrice;\n        // TODO: fix decimals and unify oracle answer\n        uint256 usdValuePool = ORACLE.getUsdPrice1e18(asset) * poolInfo[asset].lpSupply / 10 ** IERC20Metadata(asset).decimals();\n        return usdRewardYearForPool / usdValuePool;\n    }\n}\n"
    },
    "contracts/USDPro.sol": {
      "content": "// SPDX-License-Identifier: BSL 1.1\n\n/*\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\n*/\npragma solidity ^0.8.0;\n\nimport \"./access-control/SuAccessControlSingleton.sol\";\nimport \"./gain-erc20/GainErc20v3Upgradeable.sol\";\n\ncontract USDPro is GainableERC20v3Upgradeable, SuAuthenticated {\n    function initialize(address _authControl) public initializer {\n        __ERC20_init(\"StableUnit USD Pro\", \"USDPro\");\n        __SuAuthenticated_init(_authControl);\n    }\n\n    /**\n      * @notice Only Vault can mint USDPro\n      * @dev Mints 'amount' of tokens to address 'to', and MUST fire the\n      * Transfer event\n      * @param to The address of the recipient\n      * @param amount The amount of token to be minted\n     **/\n\n     // dollars can be minted by vault (once user deposited collateral)\n    function mint(address to, uint256 amount) external onlyMinter {\n        _mint(to, amount);\n    }\n\n    // dollars can be burned by manager but only his own dollars\n    // which managers will be using this feature? burning protocol fees?\n    function burn(uint256 amount) external onlyOwner {\n        _burn(msg.sender, amount);\n    }\n\n     // also vault is allowed to burn dollars of any account\n     // when user repays his loan and takes back his collateral\n    function burn(address from, uint256 amount) external onlyMinter {\n        _burn(from, amount);\n    }\n}\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.4.22 <0.9.0;\n\nlibrary console {\n\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n\tfunction _sendLogPayload(bytes memory payload) private view {\n\t\tuint256 payloadLength = payload.length;\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\n\t\tassembly {\n\t\t\tlet payloadStart := add(payload, 32)\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n\t\t}\n\t}\n\n\tfunction log() internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\n\t}\n\n\tfunction logInt(int256 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int256)\", p0));\n\t}\n\n\tfunction logUint(uint256 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n\t}\n\n\tfunction logString(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction logBool(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction logAddress(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction logBytes(bytes memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n\t}\n\n\tfunction logBytes1(bytes1 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n\t}\n\n\tfunction logBytes2(bytes2 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n\t}\n\n\tfunction logBytes3(bytes3 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n\t}\n\n\tfunction logBytes4(bytes4 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n\t}\n\n\tfunction logBytes5(bytes5 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n\t}\n\n\tfunction logBytes6(bytes6 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n\t}\n\n\tfunction logBytes7(bytes7 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n\t}\n\n\tfunction logBytes8(bytes8 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n\t}\n\n\tfunction logBytes9(bytes9 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n\t}\n\n\tfunction logBytes10(bytes10 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n\t}\n\n\tfunction logBytes11(bytes11 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n\t}\n\n\tfunction logBytes12(bytes12 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n\t}\n\n\tfunction logBytes13(bytes13 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n\t}\n\n\tfunction logBytes14(bytes14 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n\t}\n\n\tfunction logBytes15(bytes15 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n\t}\n\n\tfunction logBytes16(bytes16 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n\t}\n\n\tfunction logBytes17(bytes17 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n\t}\n\n\tfunction logBytes18(bytes18 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n\t}\n\n\tfunction logBytes19(bytes19 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n\t}\n\n\tfunction logBytes20(bytes20 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n\t}\n\n\tfunction logBytes21(bytes21 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n\t}\n\n\tfunction logBytes22(bytes22 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n\t}\n\n\tfunction logBytes23(bytes23 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n\t}\n\n\tfunction logBytes24(bytes24 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n\t}\n\n\tfunction logBytes25(bytes25 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n\t}\n\n\tfunction logBytes26(bytes26 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n\t}\n\n\tfunction logBytes27(bytes27 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n\t}\n\n\tfunction logBytes28(bytes28 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n\t}\n\n\tfunction logBytes29(bytes29 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n\t}\n\n\tfunction logBytes30(bytes30 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n\t}\n\n\tfunction logBytes31(bytes31 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n\t}\n\n\tfunction logBytes32(bytes32 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n\t}\n\n\tfunction log(uint256 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n\t}\n\n\tfunction log(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction log(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction log(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256)\", p0, p1));\n\t}\n\n\tfunction log(uint256 p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string)\", p0, p1));\n\t}\n\n\tfunction log(uint256 p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool)\", p0, p1));\n\t}\n\n\tfunction log(uint256 p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n\t}\n\n\tfunction log(address p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256)\", p0, p1));\n\t}\n\n\tfunction log(address p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n\t}\n\n\tfunction log(address p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n\t}\n\n\tfunction log(address p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}