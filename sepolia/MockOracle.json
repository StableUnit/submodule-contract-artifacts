{
  "address": "0x84C0e4FA1a15A59beD2957597c150e8B345d3865",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FIAT_NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getFiatPrice1e18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "setFiatPrice1e18",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "prices",
          "type": "uint256[]"
        }
      ],
      "name": "setFiatPrice1e18Array",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbd63633291bf29ab71991142c35bf7f0f6a94eef94a52123925e4b7d808fe32f",
  "receipt": {
    "to": null,
    "from": "0x2b8DC2cc8D545Bc9E5a2015c8eCfC5dc74316477",
    "contractAddress": "0x84C0e4FA1a15A59beD2957597c150e8B345d3865",
    "transactionIndex": 55,
    "gasUsed": "397036",
    "logsBloom": "0x
    "blockHash": "0x65e1da7a5b57c8b2fc0b7f3736b4f75f414fdf38fdbd42ad6436637d983c77c3",
    "transactionHash": "0xbd63633291bf29ab71991142c35bf7f0f6a94eef94a52123925e4b7d808fe32f",
    "logs": [
      {
        "transactionIndex": 55,
        "blockNumber": 5469880,
        "transactionHash": "0xbd63633291bf29ab71991142c35bf7f0f6a94eef94a52123925e4b7d808fe32f",
        "address": "0x84C0e4FA1a15A59beD2957597c150e8B345d3865",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002b8dc2cc8d545bc9e5a2015c8ecfc5dc74316477"
        ],
        "data": "0x",
        "logIndex": 147,
        "blockHash": "0x65e1da7a5b57c8b2fc0b7f3736b4f75f414fdf38fdbd42ad6436637d983c77c3"
      }
    ],
    "blockNumber": 5469880,
    "cumulativeGasUsed": "5742914",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6c31cc5657a386a5e63d4506ca82bbf1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FIAT_NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getFiatPrice1e18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setFiatPrice1e18\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"}],\"name\":\"setFiatPrice1e18Array\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getFiatPrice1e18(address)\":{\"params\":{\"asset\":\"- address of erc20 token contract\"},\"returns\":{\"_0\":\"usdPrice1e18 such that asset.balanceOf() * getFiatPrice1e18(asset) / 1e18 == $$ * 1e18*\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getFiatPrice1e18(address)\":{\"notice\":\"WARNING! Read this description very carefully!     function getFiatPrice1e18(address asset) returns (uint256) that:         basicAmountOfAsset * getFiatPrice1e18(asset) / 1e18 === $$ * 1e18     in other words, it doesn't matter what's the erc20.decimals is,     you just multiply token balance in basic units on value from oracle and get dollar amount multiplied on 1e18. different assets have different deviation threshold (errors)     for wBTC it's <= 0.5%, read more https://data.chain.link/ethereum/mainnet/crypto-usd/btc-usd     for other asset is can be larger based on particular oracle implementation. examples:     market price of btc = $30k,     for 0.1 wBTC the unit256 amount is 0.1 * 1e18     0.1 * 1e18 * (price1e18 / 1e18) == $3000 == uint256(3000*1e18)     => price1e18 = 30000 * 1e18;     market price of usdt = $0.97,     for 1 usdt uint256 = 1 * 1e6     so 1*1e6 * price1e18 / 1e18 == $0.97 == uint256(0.97*1e18)     => 1*1e6 * (price1e18 / 1e18) / (0.97*1e18)   = 1     =>  price1e18 = 0.97 * (1e18/1e6) * 1e18    assume market price of wBTC = $31,503.77, oracle error = $158     case #1: small amount of wBTC         we have 0.0,000,001 wBTC that is worth v = $0.00315 \\u00b1 $0.00001 = 0.00315*1e18 = 315*1e13 \\u00b1 1*1e13         actual balance on the asset b = wBTC.balanceOf() =  0.0000001*1e18 = 1e11         oracle should return or = oracle.getFiatPrice1e18(wBTC) <=>         <=> b*or = v => v/b = 315*1e13 / 1e11 = 315*1e2 \\u00b1 1e2         error = or.error * b = 1e2 * 1e11 = 1e13 => 1e13/1e18 usd = 1e-5 = 0.00001 usd     case #2: large amount of wBTC         v = 2,000,000 wBTC = $31,503.77 * 2m \\u00b1 158*2m = $63,007,540,000 \\u00b1 $316,000,000 = 63,007*1e24 \\u00b1 316*1e24         for calc convenience we increase error on 0.05 and have v = 63,000*24 \\u00b1 300*1e24 = (630 \\u00b1 3)*1e26         b = 2*1e6 * 1e18 = 2*1e24         or = v/b = (630 \\u00b1 3)*1e26 / 2*1e24 = 315*1e2 \\u00b1 1.5*1e2         error = or.error * b = 1.5*100 * 2*1e24 = 3*1e26 = 3*1e8*1e18 = $300,000,000 ~ $316,000,000     assume the market price of USDT = $0.97 \\u00b1 $0.00485,     case #3: little amount of USDT         v = USDT amount 0.005 = 0.005*(0.97 \\u00b1 0.00485) = 0.00485*1e18 \\u00b1 0.00002425*1e18 = 485*1e13 \\u00b1 3*1e13         we rounded error up on (3000-2425)/2425 ~= +24% for calculation convenience.         b = USDT.balanceOf() = 0.005*1e6 = 5*1e3         b*or = v => or = v/b = (485*1e13 \\u00b1 3*1e13) / 5*1e3 = 970*1e9 \\u00b1 6*1e9         error = 6*1e9 * 5*1e3 / 1e18 = 30*1e12/1e18 = 3*1e-5 = $0,00005     case #4: lot of USDT         v = we have 100,000,000,000 USDT = $97B = 97*1e9*1e18 \\u00b1 0.5*1e9*1e18         b = USDT.balanceOf() = 1e11*1e6 = 1e17         or = v/b = (97*1e9*1e18 \\u00b1 0.5*1e9*1e18) / 1e17 = 970*1e9 \\u00b1 5*1e9         error = 5*1e9 * 1e17 = 5*1e26 = 0.5 * 1e8*1e18\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/periphery/contracts/mocks/MockOracle.sol\":\"MockOracle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"contracts/periphery/contracts/interfaces/oracle/ISuOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\n// solhint-disable compiler-version\\npragma solidity >=0.7.6;\\n\\ninterface ISuOracle {\\n    /**\\n     * @notice WARNING! Read this description very carefully!\\n     *     function getFiatPrice1e18(address asset) returns (uint256) that:\\n     *         basicAmountOfAsset * getFiatPrice1e18(asset) / 1e18 === $$ * 1e18\\n     *     in other words, it doesn't matter what's the erc20.decimals is,\\n     *     you just multiply token balance in basic units on value from oracle and get dollar amount multiplied on 1e18.\\n     *\\n     * different assets have different deviation threshold (errors)\\n     *     for wBTC it's <= 0.5%, read more https://data.chain.link/ethereum/mainnet/crypto-usd/btc-usd\\n     *     for other asset is can be larger based on particular oracle implementation.\\n     *\\n     * examples:\\n     *     market price of btc = $30k,\\n     *     for 0.1 wBTC the unit256 amount is 0.1 * 1e18\\n     *     0.1 * 1e18 * (price1e18 / 1e18) == $3000 == uint256(3000*1e18)\\n     *     => price1e18 = 30000 * 1e18;\\n     *\\n     *     market price of usdt = $0.97,\\n     *     for 1 usdt uint256 = 1 * 1e6\\n     *     so 1*1e6 * price1e18 / 1e18 == $0.97 == uint256(0.97*1e18)\\n     *     => 1*1e6 * (price1e18 / 1e18) / (0.97*1e18)   = 1\\n     *     =>  price1e18 = 0.97 * (1e18/1e6) * 1e18\\n     *\\n     *    assume market price of wBTC = $31,503.77, oracle error = $158\\n     *\\n     *     case #1: small amount of wBTC\\n     *         we have 0.0,000,001 wBTC that is worth v = $0.00315 \\u00b1 $0.00001 = 0.00315*1e18 = 315*1e13 \\u00b1 1*1e13\\n     *         actual balance on the asset b = wBTC.balanceOf() =  0.0000001*1e18 = 1e11\\n     *         oracle should return or = oracle.getFiatPrice1e18(wBTC) <=>\\n     *         <=> b*or = v => v/b = 315*1e13 / 1e11 = 315*1e2 \\u00b1 1e2\\n     *         error = or.error * b = 1e2 * 1e11 = 1e13 => 1e13/1e18 usd = 1e-5 = 0.00001 usd\\n     *\\n     *     case #2: large amount of wBTC\\n     *         v = 2,000,000 wBTC = $31,503.77 * 2m \\u00b1 158*2m = $63,007,540,000 \\u00b1 $316,000,000 = 63,007*1e24 \\u00b1 316*1e24\\n     *         for calc convenience we increase error on 0.05 and have v = 63,000*24 \\u00b1 300*1e24 = (630 \\u00b1 3)*1e26\\n     *         b = 2*1e6 * 1e18 = 2*1e24\\n     *         or = v/b = (630 \\u00b1 3)*1e26 / 2*1e24 = 315*1e2 \\u00b1 1.5*1e2\\n     *         error = or.error * b = 1.5*100 * 2*1e24 = 3*1e26 = 3*1e8*1e18 = $300,000,000 ~ $316,000,000\\n     *\\n     *     assume the market price of USDT = $0.97 \\u00b1 $0.00485,\\n     *\\n     *     case #3: little amount of USDT\\n     *         v = USDT amount 0.005 = 0.005*(0.97 \\u00b1 0.00485) = 0.00485*1e18 \\u00b1 0.00002425*1e18 = 485*1e13 \\u00b1 3*1e13\\n     *         we rounded error up on (3000-2425)/2425 ~= +24% for calculation convenience.\\n     *         b = USDT.balanceOf() = 0.005*1e6 = 5*1e3\\n     *         b*or = v => or = v/b = (485*1e13 \\u00b1 3*1e13) / 5*1e3 = 970*1e9 \\u00b1 6*1e9\\n     *         error = 6*1e9 * 5*1e3 / 1e18 = 30*1e12/1e18 = 3*1e-5 = $0,00005\\n     *\\n     *     case #4: lot of USDT\\n     *         v = we have 100,000,000,000 USDT = $97B = 97*1e9*1e18 \\u00b1 0.5*1e9*1e18\\n     *         b = USDT.balanceOf() = 1e11*1e6 = 1e17\\n     *         or = v/b = (97*1e9*1e18 \\u00b1 0.5*1e9*1e18) / 1e17 = 970*1e9 \\u00b1 5*1e9\\n     *         error = 5*1e9 * 1e17 = 5*1e26 = 0.5 * 1e8*1e18\\n     *\\n     * @param asset - address of erc20 token contract\\n     * @return usdPrice1e18 such that asset.balanceOf() * getFiatPrice1e18(asset) / 1e18 == $$ * 1e18\\n     **/\\n    function getFiatPrice1e18(address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa56b9cc86ef5935efecc276e6a3188d518f1a99cad960083a8de35849c997687\",\"license\":\"UNLICENSED\"},\"contracts/periphery/contracts/mocks/MockOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"../interfaces/oracle/ISuOracle.sol\\\";\\n\\ncontract MockOracle is ISuOracle, Ownable {\\n    mapping (address => uint256[]) assetsToPrices1e18;\\n    string public constant FIAT_NAME = \\\"EUR\\\";\\n\\n    function getFiatPrice1e18(address asset) override external view returns (uint) {\\n        uint256 len = assetsToPrices1e18[asset].length;\\n        require(len > 0, \\\"MockOracle: asset isn't supported\\\");\\n        return assetsToPrices1e18[asset][block.number % len];\\n    }\\n\\n    function setFiatPrice1e18(address asset, uint256 price) public {\\n        assetsToPrices1e18[asset] = [price];\\n    }\\n\\n    function setFiatPrice1e18Array(address asset, uint256[] memory prices) public {\\n        assetsToPrices1e18[asset] = prices;\\n    }\\n}\\n\",\"keccak256\":\"0xa101a788d433827aab38dccfdc5abc5bf09006e099be5205c153b66ca992b048\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461005b5760008054336001600160a01b0319821681178355916001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a36105c390816100618239f35b600080fdfe6080604081815260048036101561001557600080fd5b600092833560e01c9081634cf0aef2146104395750806353615434146103a1578063715018a6146103595780638da5cb5b1461032d5780639814cb2e146101e2578063b9ac2b38146101235763f2fde38b1461007057600080fd5b3461011f57602036600319011261011f576100896104fa565b90610092610515565b6001600160a01b039182169283156100cd57505082546001600160a01b03198116831784551660008051602061056e8339815191528380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8280fd5b503461011f57602092836003193601126101df576001600160a01b036101476104fa565b1680825260018552838220549081156101925782526001855283822090430692815484101561017f5750815283902001549051908152f35b634e487b7160e01b835260329052602482fd5b845162461bcd60e51b8152808501879052602160248201527f4d6f636b4f7261636c653a2061737365742069736e277420737570706f7274656044820152601960fa1b6064820152608490fd5b80fd5b503461011f578160031936011261011f576101fb6104fa565b6001600160401b03919060248035919084831161032957366023840112156103295782840135938585116102f2578460051b92875195601f19603f8601168701878110898211176103175789528652602094858701848196830101913683116103135785889101915b83831061030357505050506001600160a01b03168852600180855296882094519586116102f257600160401b86116102f257505082548484558085106102cb575b5091855280852090855b8481106102ba578680f35b8351838201559281019285016102af565b838752858584892092830192015b8281106102e75750506102a5565b8881550186906102d9565b634e487b7160e01b88526041905286fd5b8235815291810191889101610264565b8b80fd5b634e487b7160e01b8b5260418452848bfd5b8680fd5b505034610355578160031936011261035557905490516001600160a01b039091168152602090f35b5080fd5b83346101df57806003193601126101df57610372610515565b80546001600160a01b03198116825581906001600160a01b031660008051602061056e8339815191528280a380f35b503461011f578260031936011261011f57815190818301906001600160401b0382118383101761042657508252600381526020906222aaa960e91b8282015282519382859384528251928382860152825b84811061041057505050828201840152601f01601f19168101030190f35b81810183015188820188015287955082016103f2565b634e487b7160e01b855260419052602484fd5b9050346104f657826003193601126104f6576104536104fa565b602092828401906001600160401b038211848310176104e35750845260243582526001600160a01b03168452600180835292842080548482559091908085106104bc575b50908452818420845b8481106104ab578580f35b8251828201559183019184016104a0565b828652848085882092830192015b8281106104d8575050610497565b8781550185906104ca565b634e487b7160e01b875260419052602486fd5b8380fd5b600435906001600160a01b038216820361051057565b600080fd5b6000546001600160a01b0316330361052957565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fdfe8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0a2646970667358221220a85a200005006d1dc10771818fde84e9c4c55f624f75154017f4b5572e2b27f564736f6c63430008110033",
  "deployedBytecode": "0x6080604081815260048036101561001557600080fd5b600092833560e01c9081634cf0aef2146104395750806353615434146103a1578063715018a6146103595780638da5cb5b1461032d5780639814cb2e146101e2578063b9ac2b38146101235763f2fde38b1461007057600080fd5b3461011f57602036600319011261011f576100896104fa565b90610092610515565b6001600160a01b039182169283156100cd57505082546001600160a01b03198116831784551660008051602061056e8339815191528380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8280fd5b503461011f57602092836003193601126101df576001600160a01b036101476104fa565b1680825260018552838220549081156101925782526001855283822090430692815484101561017f5750815283902001549051908152f35b634e487b7160e01b835260329052602482fd5b845162461bcd60e51b8152808501879052602160248201527f4d6f636b4f7261636c653a2061737365742069736e277420737570706f7274656044820152601960fa1b6064820152608490fd5b80fd5b503461011f578160031936011261011f576101fb6104fa565b6001600160401b03919060248035919084831161032957366023840112156103295782840135938585116102f2578460051b92875195601f19603f8601168701878110898211176103175789528652602094858701848196830101913683116103135785889101915b83831061030357505050506001600160a01b03168852600180855296882094519586116102f257600160401b86116102f257505082548484558085106102cb575b5091855280852090855b8481106102ba578680f35b8351838201559281019285016102af565b838752858584892092830192015b8281106102e75750506102a5565b8881550186906102d9565b634e487b7160e01b88526041905286fd5b8235815291810191889101610264565b8b80fd5b634e487b7160e01b8b5260418452848bfd5b8680fd5b505034610355578160031936011261035557905490516001600160a01b039091168152602090f35b5080fd5b83346101df57806003193601126101df57610372610515565b80546001600160a01b03198116825581906001600160a01b031660008051602061056e8339815191528280a380f35b503461011f578260031936011261011f57815190818301906001600160401b0382118383101761042657508252600381526020906222aaa960e91b8282015282519382859384528251928382860152825b84811061041057505050828201840152601f01601f19168101030190f35b81810183015188820188015287955082016103f2565b634e487b7160e01b855260419052602484fd5b9050346104f657826003193601126104f6576104536104fa565b602092828401906001600160401b038211848310176104e35750845260243582526001600160a01b03168452600180835292842080548482559091908085106104bc575b50908452818420845b8481106104ab578580f35b8251828201559183019184016104a0565b828652848085882092830192015b8281106104d8575050610497565b8781550185906104ca565b634e487b7160e01b875260419052602486fd5b8380fd5b600435906001600160a01b038216820361051057565b600080fd5b6000546001600160a01b0316330361052957565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fdfe8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0a2646970667358221220a85a200005006d1dc10771818fde84e9c4c55f624f75154017f4b5572e2b27f564736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getFiatPrice1e18(address)": {
        "params": {
          "asset": "- address of erc20 token contract"
        },
        "returns": {
          "_0": "usdPrice1e18 such that asset.balanceOf() * getFiatPrice1e18(asset) / 1e18 == $$ * 1e18*"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getFiatPrice1e18(address)": {
        "notice": "WARNING! Read this description very carefully!     function getFiatPrice1e18(address asset) returns (uint256) that:         basicAmountOfAsset * getFiatPrice1e18(asset) / 1e18 === $$ * 1e18     in other words, it doesn't matter what's the erc20.decimals is,     you just multiply token balance in basic units on value from oracle and get dollar amount multiplied on 1e18. different assets have different deviation threshold (errors)     for wBTC it's <= 0.5%, read more https://data.chain.link/ethereum/mainnet/crypto-usd/btc-usd     for other asset is can be larger based on particular oracle implementation. examples:     market price of btc = $30k,     for 0.1 wBTC the unit256 amount is 0.1 * 1e18     0.1 * 1e18 * (price1e18 / 1e18) == $3000 == uint256(3000*1e18)     => price1e18 = 30000 * 1e18;     market price of usdt = $0.97,     for 1 usdt uint256 = 1 * 1e6     so 1*1e6 * price1e18 / 1e18 == $0.97 == uint256(0.97*1e18)     => 1*1e6 * (price1e18 / 1e18) / (0.97*1e18)   = 1     =>  price1e18 = 0.97 * (1e18/1e6) * 1e18    assume market price of wBTC = $31,503.77, oracle error = $158     case #1: small amount of wBTC         we have 0.0,000,001 wBTC that is worth v = $0.00315 ± $0.00001 = 0.00315*1e18 = 315*1e13 ± 1*1e13         actual balance on the asset b = wBTC.balanceOf() =  0.0000001*1e18 = 1e11         oracle should return or = oracle.getFiatPrice1e18(wBTC) <=>         <=> b*or = v => v/b = 315*1e13 / 1e11 = 315*1e2 ± 1e2         error = or.error * b = 1e2 * 1e11 = 1e13 => 1e13/1e18 usd = 1e-5 = 0.00001 usd     case #2: large amount of wBTC         v = 2,000,000 wBTC = $31,503.77 * 2m ± 158*2m = $63,007,540,000 ± $316,000,000 = 63,007*1e24 ± 316*1e24         for calc convenience we increase error on 0.05 and have v = 63,000*24 ± 300*1e24 = (630 ± 3)*1e26         b = 2*1e6 * 1e18 = 2*1e24         or = v/b = (630 ± 3)*1e26 / 2*1e24 = 315*1e2 ± 1.5*1e2         error = or.error * b = 1.5*100 * 2*1e24 = 3*1e26 = 3*1e8*1e18 = $300,000,000 ~ $316,000,000     assume the market price of USDT = $0.97 ± $0.00485,     case #3: little amount of USDT         v = USDT amount 0.005 = 0.005*(0.97 ± 0.00485) = 0.00485*1e18 ± 0.00002425*1e18 = 485*1e13 ± 3*1e13         we rounded error up on (3000-2425)/2425 ~= +24% for calculation convenience.         b = USDT.balanceOf() = 0.005*1e6 = 5*1e3         b*or = v => or = v/b = (485*1e13 ± 3*1e13) / 5*1e3 = 970*1e9 ± 6*1e9         error = 6*1e9 * 5*1e3 / 1e18 = 30*1e12/1e18 = 3*1e-5 = $0,00005     case #4: lot of USDT         v = we have 100,000,000,000 USDT = $97B = 97*1e9*1e18 ± 0.5*1e9*1e18         b = USDT.balanceOf() = 1e11*1e6 = 1e17         or = v/b = (97*1e9*1e18 ± 0.5*1e9*1e18) / 1e17 = 970*1e9 ± 5*1e9         error = 5*1e9 * 1e17 = 5*1e26 = 0.5 * 1e8*1e18"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4978,
        "contract": "contracts/periphery/contracts/mocks/MockOracle.sol:MockOracle",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 17230,
        "contract": "contracts/periphery/contracts/mocks/MockOracle.sol:MockOracle",
        "label": "assetsToPrices1e18",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}