{
  "address": "0x606A3Be3e7aE7eE406631F39c8c31B60616e33be",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NotAuthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotContractEnabled",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "DisableContract",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "usr",
          "type": "address"
        }
      ],
      "name": "addAuthorization",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "usr",
          "type": "address"
        }
      ],
      "name": "approveSAFEModification",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "authorizedAccounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "cdpRights",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "coinBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "collateralTypes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "debtAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accumulatedRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "safetyPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "debtCeiling",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "debtFloor",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "cdp",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "collateralCounterparty",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "debtCounterparty",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "deltaCollateral",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "deltaDebt",
          "type": "int256"
        }
      ],
      "name": "confiscateSAFECollateralAndDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractEnabled",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "debtDestination",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "coinDestination",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rad",
          "type": "uint256"
        }
      ],
      "name": "createUnbackedDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "debtBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "usr",
          "type": "address"
        }
      ],
      "name": "denySAFEModification",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disableContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "globalDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "globalDebtCeiling",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "globalUnbackedDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        }
      ],
      "name": "initializeCollateralType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "usr",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "wad",
          "type": "int256"
        }
      ],
      "name": "modifyCollateralBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "what",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "data",
          "type": "uint256"
        }
      ],
      "name": "modifyParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "what",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "data",
          "type": "uint256"
        }
      ],
      "name": "modifyParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "cdp",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "collateralSource",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "debtDestination",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "deltaCollateral",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "deltaDebt",
          "type": "int256"
        }
      ],
      "name": "modifySAFECollateralization",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "usr",
          "type": "address"
        }
      ],
      "name": "removeAuthorization",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "safes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lockedCollateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "generatedDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rad",
          "type": "uint256"
        }
      ],
      "name": "settleDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "transferCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rad",
          "type": "uint256"
        }
      ],
      "name": "transferInternalCoins",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "deltaCollateral",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "deltaDebt",
          "type": "int256"
        }
      ],
      "name": "transferSAFECollateralAndDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "surplusDst",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "accumulatedRate",
          "type": "int256"
        }
      ],
      "name": "updateAccumulatedRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "5a3048d5b2f56301a323a2276b6562ea",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotAuthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotContractEnabled\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DisableContract\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"addAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"approveSAFEModification\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedAccounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cdpRights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"coinBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"collateralTypes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"debtAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accumulatedRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"safetyPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtCeiling\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtFloor\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"cdp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralCounterparty\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"debtCounterparty\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"deltaCollateral\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"deltaDebt\",\"type\":\"int256\"}],\"name\":\"confiscateSAFECollateralAndDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractEnabled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"debtDestination\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"coinDestination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rad\",\"type\":\"uint256\"}],\"name\":\"createUnbackedDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"debtBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"denySAFEModification\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalDebtCeiling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalUnbackedDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"}],\"name\":\"initializeCollateralType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"wad\",\"type\":\"int256\"}],\"name\":\"modifyCollateralBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"cdp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralSource\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"debtDestination\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"deltaCollateral\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"deltaDebt\",\"type\":\"int256\"}],\"name\":\"modifySAFECollateralization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"removeAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"safes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockedCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"generatedDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rad\",\"type\":\"uint256\"}],\"name\":\"settleDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transferCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rad\",\"type\":\"uint256\"}],\"name\":\"transferInternalCoins\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"deltaCollateral\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"deltaDebt\",\"type\":\"int256\"}],\"name\":\"transferSAFECollateralAndDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"surplusDst\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"accumulatedRate\",\"type\":\"int256\"}],\"name\":\"updateAccumulatedRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approveSAFEModification(address)\":{\"params\":{\"usr\":\"Account to give CDP permissions to\"}},\"confiscateSAFECollateralAndDebt(bytes32,address,address,address,int256,int256)\":{\"params\":{\"cdp\":\"Target CDP\",\"collateralCounterparty\":\"Who we take/give collateral to\",\"collateralType\":\"Collateral type the CDP has locked inside\",\"debtCounterparty\":\"Who we take/give debt to\",\"deltaCollateral\":\"Amount of collateral taken/added into the CDP\",\"deltaDebt\":\"Amount of debt taken/added into the CDP\"}},\"createUnbackedDebt(address,address,uint256)\":{\"params\":{\"coinDestination\":\"Usually CoinSavingsAccount who passes the new coins to depositors\",\"debtDestination\":\"Usually AccountingEngine that can settle decreaseSoldAmount with surplus\",\"rad\":\"Amount of debt to create (expressed as a number with 45 decimals)\"}},\"denySAFEModification(address)\":{\"params\":{\"usr\":\"Account to give CDP permissions to\"}},\"modifySAFECollateralization(bytes32,address,address,address,int256,int256)\":{\"params\":{\"cdp\":\"Target CDP\",\"collateralSource\":\"Account we take collateral from/put collateral into\",\"collateralType\":\"Type of collateral to withdraw/deposit in and from the CDP\",\"debtDestination\":\"Account from which we credit/debit coins and debt\",\"deltaCollateral\":\"Amount of collateral added/extract from the CDP\",\"deltaDebt\":\"Amount of debt to generate/repay\"}},\"settleDebt(uint256)\":{\"params\":{\"rad\":\"Amount of debt & coins to destroy (expressed as a number with 45 decimals)\"}},\"transferSAFECollateralAndDebt(bytes32,address,address,int256,int256)\":{\"params\":{\"collateralType\":\"Collateral type transferred between CDPs\",\"deltaCollateral\":\"Amount of collateral to take/add into src and give/take from dst\",\"deltaDebt\":\"Amount of debt to take/add into src and give/take from dst\",\"dst\":\"Destination CDP\",\"src\":\"Source CDP\"}},\"updateAccumulatedRate(bytes32,address,int256)\":{\"params\":{\"accumulatedRate\":\"Multiplier applied to the debtAmount in order to calculate the surplus\",\"collateralType\":\"Collateral type we accrue interest for\",\"surplusDst\":\"Destination for amount of surplus created by applying the interest rate to debt created by CDPs with 'collateralType'\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approveSAFEModification(address)\":{\"notice\":\"Allow an address to modify your CDP\"},\"collateralTypes(bytes32)\":{\"notice\":\"Total User Debt (drawn dai + stability fee accrued) = SAFE.generatedDebt * CollateralType.accumulatedRate;\"},\"confiscateSAFECollateralAndDebt(bytes32,address,address,address,int256,int256)\":{\"notice\":\"Normally used by the LiquidationEngine in order to confiscate collateral and debt from a CDP and give them to someone else\"},\"createUnbackedDebt(address,address,uint256)\":{\"notice\":\"Usually called by CoinSavingsAccount in order to create unbacked debt\"},\"denySAFEModification(address)\":{\"notice\":\"Deny an address the rights to modify your CDP\"},\"modifySAFECollateralization(bytes32,address,address,address,int256,int256)\":{\"notice\":\"Add/remove collateral or put back/generate more debt in a CDP\"},\"settleDebt(uint256)\":{\"notice\":\"Nullify an amount of coins with an equal amount of debt\"},\"transferSAFECollateralAndDebt(bytes32,address,address,int256,int256)\":{\"notice\":\"Transfer collateral and/or debt between CDPs\"},\"updateAccumulatedRate(bytes32,address,int256)\":{\"notice\":\"Usually called by TaxCollector in order to accrue interest on a specific collateral type\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/makerdao/core/SafeEngine.sol\":\"SafeEngine\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/makerdao/core/SafeEngine.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\n/// SAFEEngine.sol -- Dai CDP database\\n\\n// Copyright (C) 2018 Rain <rainbreak@riseup.net>\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport {AuthWithContractEnabled} from \\\"../utils/AuthWithContractEnabled.sol\\\";\\nimport {Math} from \\\"../utils/Math.sol\\\";\\nimport {ISafeEngine} from \\\"../interfaces/ISafeEngine.sol\\\";\\n\\n// FIXME: This contract was altered compared to the production version.\\n// It doesn't use LibNote anymore.\\n// New deployments of this contract will need to include custom events (TO DO).\\n\\ncontract SafeEngine is AuthWithContractEnabled, Math, ISafeEngine {\\n    // --- Auth ---\\n    // Who can transfer collateral & debt in/out of a CDP\\n    mapping(address => mapping (address => uint)) public cdpRights;\\n\\n    function approveSAFEModification(address usr) external { cdpRights[msg.sender][usr] = 1; }\\n\\n    function denySAFEModification(address usr) external { cdpRights[msg.sender][usr] = 0; }\\n\\n    function canModifySAFE(address cdp, address account) internal view returns (bool) {\\n        return either(cdp == account, cdpRights[cdp][account] == 1);\\n    }\\n\\n    /// Total User Debt (drawn dai + stability fee accrued) = SAFE.generatedDebt * CollateralType.accumulatedRate;\\n\\n    // Data about each collateral type\\n    mapping (bytes32 => CollateralType)            public collateralTypes;\\n    // Data about each SAFE\\n    mapping (bytes32 => mapping (address => SAFE)) public safes;\\n    // Balance of each collateral type\\n    mapping (bytes32 => mapping (address => uint)) public tokenCollateral; // [wad]\\n    // Internal balance of pegged-coins\\n    mapping (address => uint256)                   public coinBalance;     // [rad]\\n    // Amount of debt held by an account. Coin & debt are like matter and antimatter. They nullify each other\\n    mapping (address => uint256)                   public debtBalance;     // [rad]\\n\\n    uint256 public globalDebt;          // Total amount of debt (coins) currently issued [rad]\\n    uint256 public globalUnbackedDebt;  // 'Bad' debt that's not covered by collateral   [rad]\\n    uint256 public globalDebtCeiling;   // Maximum amount of debt that can be issued     [rad]\\n\\n    // --- Init ---\\n    constructor() public {\\n        authorizedAccounts[msg.sender] = 1;\\n        contractEnabled = 1;\\n    }\\n\\n    // --- Administration ---\\n    function initializeCollateralType(bytes32 collateralType) external isAuthorized {\\n        require(collateralTypes[collateralType].accumulatedRate == 0, \\\"SafeEngine/collateral-type-already-init\\\");\\n        collateralTypes[collateralType].accumulatedRate = 10 ** 27;\\n    }\\n    function modifyParameters(bytes32 what, uint data) external isAuthorized {\\n        require(contractEnabled == 1, \\\"SafeEngine/not-contractEnabled\\\");\\n        if (what == \\\"globalDebtCeiling\\\") globalDebtCeiling = data;\\n        else revert(\\\"SafeEngine/modifyParameters-unrecognized-param\\\");\\n    }\\n    function modifyParameters(bytes32 collateralType, bytes32 what, uint data) external isAuthorized {\\n        require(contractEnabled == 1, \\\"SafeEngine/not-contractEnabled\\\");\\n        if (what == \\\"safetyPrice\\\") collateralTypes[collateralType].safetyPrice = data;\\n        else if (what == \\\"debtCeiling\\\") collateralTypes[collateralType].debtCeiling = data;\\n        else if (what == \\\"debtFloor\\\") collateralTypes[collateralType].debtFloor = data;\\n        else revert(\\\"SafeEngine/modifyParameters-unrecognized-param\\\");\\n    }\\n\\n    // --- Fungibility ---\\n    function modifyCollateralBalance(bytes32 collateralType, address usr, int256 wad) external isAuthorized {\\n        tokenCollateral[collateralType][usr] = _add(tokenCollateral[collateralType][usr], wad);\\n    }\\n    function transferCollateral(bytes32 collateralType, address src, address dst, uint256 wad) external {\\n        require(canModifySAFE(src, msg.sender), \\\"SafeEngine/not-allowed\\\");\\n        tokenCollateral[collateralType][src] = _sub(tokenCollateral[collateralType][src], wad);\\n        tokenCollateral[collateralType][dst] = _add(tokenCollateral[collateralType][dst], wad);\\n    }\\n    function transferInternalCoins(address src, address dst, uint256 rad) external {\\n        require(canModifySAFE(src, msg.sender), \\\"SafeEngine/not-allowed\\\");\\n        coinBalance[src] = _sub(coinBalance[src], rad);\\n        coinBalance[dst] = _add(coinBalance[dst], rad);\\n    }\\n\\n    // --- CDP Manipulation ---\\n    function modifySAFECollateralization(bytes32 collateralType, address cdp, address collateralSource, address debtDestination, int deltaCollateral, int deltaDebt) external {\\n        // system is contractEnabled\\n        require(contractEnabled == 1, \\\"SafeEngine/not-contractEnabled\\\");\\n\\n        SAFE memory safe_ = safes[collateralType][cdp];\\n        CollateralType memory collateralType_ = collateralTypes[collateralType];\\n        // collateralType has been initialised\\n        require(collateralType_.accumulatedRate != 0, \\\"SafeEngine/collateral-type-not-init\\\");\\n\\n        safe_.lockedCollateral = _add(safe_.lockedCollateral, deltaCollateral);\\n        safe_.generatedDebt = _add(safe_.generatedDebt, deltaDebt);\\n        collateralType_.debtAmount = _add(collateralType_.debtAmount, deltaDebt);\\n\\n        int dAmountToRaise = _mul(collateralType_.accumulatedRate, deltaDebt);\\n        uint amountToRaise = _mul(collateralType_.accumulatedRate, safe_.generatedDebt);\\n        globalDebt = _add(globalDebt, dAmountToRaise);\\n\\n        // either debt has decreased, or debt ceilings are not exceeded\\n        require(either(deltaDebt <= 0, both(_mul(collateralType_.debtAmount, collateralType_.accumulatedRate) <= collateralType_.debtCeiling, globalDebt <= globalDebtCeiling)), \\\"SafeEngine/ceiling-exceeded\\\");\\n        // safe is either less risky than before, or it is safe\\n        require(either(both(deltaDebt <= 0, deltaCollateral >= 0), amountToRaise <= _mul(safe_.lockedCollateral, collateralType_.safetyPrice)), \\\"SafeEngine/not-safe\\\");\\n\\n        // safe is either more safe, or the owner consents\\n        require(either(both(deltaDebt <= 0, deltaCollateral >= 0), canModifySAFE(cdp, msg.sender)), \\\"SafeEngine/not-allowed-u\\\");\\n        // collateral src consents\\n        require(either(deltaCollateral <= 0, canModifySAFE(collateralSource, msg.sender)), \\\"SafeEngine/not-allowed-v\\\");\\n        // debt dst consents\\n        require(either(deltaDebt >= 0, canModifySAFE(debtDestination, msg.sender)), \\\"SafeEngine/not-allowed-w\\\");\\n\\n        // safe has no debt, or a non-dusty amount\\n        require(either(safe_.generatedDebt == 0, amountToRaise >= collateralType_.debtFloor), \\\"SafeEngine/debtFloor\\\");\\n\\n        tokenCollateral[collateralType][collateralSource] = _sub(tokenCollateral[collateralType][collateralSource], deltaCollateral);\\n        coinBalance[debtDestination]    = _add(coinBalance[debtDestination],    dAmountToRaise);\\n\\n        safes[collateralType][cdp]      = safe_;\\n        collateralTypes[collateralType] = collateralType_;\\n    }\\n    // --- CDP Fungibility ---\\n    function transferSAFECollateralAndDebt(bytes32 collateralType, address src, address dst, int deltaCollateral, int deltaDebt) external {\\n        SAFE storage srcCDP = safes[collateralType][src];\\n        SAFE storage dstCDP = safes[collateralType][dst];\\n        CollateralType storage col = collateralTypes[collateralType];\\n\\n        srcCDP.lockedCollateral = _sub(srcCDP.lockedCollateral, deltaCollateral);\\n        srcCDP.generatedDebt = _sub(srcCDP.generatedDebt, deltaDebt);\\n        dstCDP.lockedCollateral = _add(dstCDP.lockedCollateral, deltaCollateral);\\n        dstCDP.generatedDebt = _add(dstCDP.generatedDebt, deltaDebt);\\n\\n        uint srcAmountToRaise = _mul(srcCDP.generatedDebt, col.accumulatedRate);\\n        uint dstAmountToRaise = _mul(dstCDP.generatedDebt, col.accumulatedRate);\\n\\n        // both sides consent\\n        require(both(canModifySAFE(src, msg.sender), canModifySAFE(dst, msg.sender)), \\\"SafeEngine/not-allowed\\\");\\n\\n        // both sides safe\\n        require(srcAmountToRaise <= _mul(srcCDP.lockedCollateral, col.safetyPrice), \\\"SafeEngine/not-safe-src\\\");\\n        require(dstAmountToRaise <= _mul(dstCDP.lockedCollateral, col.safetyPrice), \\\"SafeEngine/not-safe-dst\\\");\\n\\n        // both sides non-dusty\\n        require(either(srcAmountToRaise >= col.debtFloor, srcCDP.generatedDebt == 0), \\\"SafeEngine/debtFloor-src\\\");\\n        require(either(dstAmountToRaise >= col.debtFloor, dstCDP.generatedDebt == 0), \\\"SafeEngine/debtFloor-dst\\\");\\n    }\\n    // --- CDP Confiscation ---\\n    function confiscateSAFECollateralAndDebt(bytes32 collateralType, address cdp, address collateralCounterparty, address debtCounterparty, int deltaCollateral, int deltaDebt) external isAuthorized {\\n        SAFE storage safe_ = safes[collateralType][cdp];\\n        CollateralType storage collateralType_ = collateralTypes[collateralType];\\n\\n        safe_.lockedCollateral = _add(safe_.lockedCollateral, deltaCollateral);\\n        safe_.generatedDebt = _add(safe_.generatedDebt, deltaDebt);\\n        collateralType_.debtAmount = _add(collateralType_.debtAmount, deltaDebt);\\n\\n        int deltaTotalIssuedDebt = _mul(collateralType_.accumulatedRate, deltaDebt);\\n\\n        tokenCollateral[collateralType][collateralCounterparty] = _sub(tokenCollateral[collateralType][collateralCounterparty], deltaCollateral);\\n        debtBalance[debtCounterparty]    = _sub(debtBalance[debtCounterparty], deltaTotalIssuedDebt);\\n        globalUnbackedDebt      = _sub(globalUnbackedDebt, deltaTotalIssuedDebt);\\n    }\\n\\n    // --- Settlement ---\\n\\n    function settleDebt(uint rad) external {\\n        address account      = msg.sender;\\n        debtBalance[account] = _sub(debtBalance[account], rad);\\n        coinBalance[account] = _sub(coinBalance[account], rad);\\n        globalUnbackedDebt   = _sub(globalUnbackedDebt,   rad);\\n        globalDebt           = _sub(globalDebt,   rad);\\n    }\\n\\n    function createUnbackedDebt(address debtDestination, address coinDestination, uint rad) external isAuthorized {\\n        debtBalance[debtDestination] = _add(debtBalance[debtDestination], rad);\\n        coinBalance[coinDestination] = _add(coinBalance[coinDestination], rad);\\n        globalUnbackedDebt           = _add(globalUnbackedDebt,   rad);\\n        globalDebt                   = _add(globalDebt,   rad);\\n    }\\n\\n    // --- Rates ---\\n    function updateAccumulatedRate(bytes32 collateralType, address surplusDst, int accumulatedRate) external isAuthorized {\\n        require(contractEnabled == 1, \\\"SafeEngine/not-contractEnabled\\\");\\n        CollateralType storage collateralType_ = collateralTypes[collateralType];\\n        collateralType_.accumulatedRate        = _add(collateralType_.accumulatedRate, accumulatedRate);\\n        int deltaSurplus                       = _mul(collateralType_.debtAmount, accumulatedRate);\\n        coinBalance[surplusDst]                = _add(coinBalance[surplusDst], deltaSurplus);\\n        globalDebt                             = _add(globalDebt, deltaSurplus);\\n    }\\n}\\n\",\"keccak256\":\"0xeb34112306b204885ab9e5bd285d3028342b02da6c807144a16a8c232624974b\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/makerdao/interfaces/IAuth.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\ninterface IAuth {\\n    function addAuthorization(address usr) external;\\n    function removeAuthorization(address usr) external;\\n}\\n\",\"keccak256\":\"0x0ba65ef98ccabdaae896001950518dbbfbea94c2f3ac84b064abe0cbeddd9b89\",\"license\":\"UNLICENSED\"},\"contracts/makerdao/interfaces/IAuthWithContractEnabled.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport {IAuth} from \\\"./IAuth.sol\\\";\\n\\ninterface IAuthWithContractEnabled is IAuth {\\n    event DisableContract();\\n\\n    function disableContract() external;\\n}\\n\",\"keccak256\":\"0x2c6b500483ce79cf7f277949eed8f8f1322227c031eb504ccf316b3ad49aa49c\",\"license\":\"UNLICENSED\"},\"contracts/makerdao/interfaces/ISafeEngine.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title SafeEngine\\n * @notice The single source of truth for the Maker Protocol. It contains the accounting system of the core Vault,\\n * Internal Dai balances, and collateral state. It houses the public interface for Vault management,\\n * allowing safe(= CDP or Vault) owners to adjust their Vault state balances. It also contains the public interface\\n * for Vault fungibility, allowing safe (Vault) owners to transfer, split, and merge Vaults.\\n * Excluding these interfaces, SAFEEngine is accessed through trusted smart contract modules.\\n **/\\ninterface ISafeEngine {\\n    /* ==================== METHODS ==================== */\\n\\n    // --- Data ---\\n    struct CollateralType {\\n        uint256 debtAmount;       // Total debt issued for this specific collateral type                          [wad]\\n        uint256 accumulatedRate;  // Accumulator for interest accrued on this collateral type                     [ray]\\n        uint256 safetyPrice;      // Floor price at which a CDP is allowed to generate debt                       [ray]\\n        uint256 debtCeiling;      // Maximum amount of debt that can be generated with this collateral type       [rad]\\n        uint256 debtFloor;        // Minimum amount of debt that must be generated by a CDP using this collateral [rad]\\n    }\\n    struct SAFE {\\n        uint256 lockedCollateral; // Total amount of collateral locked in a SAFE/CDP  [wad]\\n        uint256 generatedDebt;    // Total amount of debt generated by a SAFE/CDP     [wad]\\n    }\\n\\n    // --- VARS ---\\n\\n    function safes(bytes32, address) external view returns (uint, uint);\\n\\n    function collateralTypes(bytes32) external view returns (\\n        uint256 debtAmount,   // [wad]\\n        uint256 accumulatedRate,   // [ray]\\n        uint256 safetyPrice,\\n        uint256 debtCeiling,\\n        uint256 debtFloor\\n    );\\n\\n    function tokenCollateral(bytes32, address) external view returns (uint256);\\n\\n    function coinBalance(address) external view returns (uint256);\\n\\n    function debtBalance(address) external view returns (uint256);\\n\\n    // --- Auth ---\\n    /**\\n     * @notice Allow an address to modify your CDP\\n     * @param usr Account to give CDP permissions to\\n     */\\n    function approveSAFEModification(address usr) external;\\n\\n    /**\\n     * @notice Deny an address the rights to modify your CDP\\n     * @param usr Account to give CDP permissions to\\n     */\\n    function denySAFEModification(address usr) external;\\n\\n    // --- Administration ---\\n\\n    function initializeCollateralType(bytes32 collateralType) external;\\n    function modifyParameters(bytes32 what, uint data) external;\\n    function modifyParameters(bytes32 collateralType, bytes32 what, uint data) external;\\n\\n    // --- Fungibility ---\\n    function modifyCollateralBalance(bytes32 collateralType, address usr, int256 wad) external;\\n    function transferCollateral(bytes32 collateralType, address src, address dst, uint256 wad) external;\\n    function transferInternalCoins(address src, address dst, uint256 rad) external;\\n\\n    // --- CDP Manipulation ---\\n    /**\\n     * @notice Add/remove collateral or put back/generate more debt in a CDP\\n     * @param collateralType Type of collateral to withdraw/deposit in and from the CDP\\n     * @param cdp Target CDP\\n     * @param collateralSource Account we take collateral from/put collateral into\\n     * @param debtDestination Account from which we credit/debit coins and debt\\n     * @param deltaCollateral Amount of collateral added/extract from the CDP\\n     * @param deltaDebt Amount of debt to generate/repay\\n     */\\n    function modifySAFECollateralization(bytes32 collateralType, address cdp, address collateralSource, address debtDestination, int deltaCollateral, int deltaDebt) external;\\n\\n    // --- CDP Fungibility ---\\n    /**\\n     * @notice Transfer collateral and/or debt between CDPs\\n     * @param collateralType Collateral type transferred between CDPs\\n     * @param src Source CDP\\n     * @param dst Destination CDP\\n     * @param deltaCollateral Amount of collateral to take/add into src and give/take from dst\\n     * @param deltaDebt Amount of debt to take/add into src and give/take from dst\\n     */\\n    function transferSAFECollateralAndDebt(bytes32 collateralType, address src, address dst, int deltaCollateral, int deltaDebt) external;\\n\\n    // --- CDP Confiscation ---\\n    /**\\n     * @notice Normally used by the LiquidationEngine in order to confiscate collateral and\\n       debt from a CDP and give them to someone else\\n     * @param collateralType Collateral type the CDP has locked inside\\n     * @param cdp Target CDP\\n     * @param collateralCounterparty Who we take/give collateral to\\n     * @param debtCounterparty Who we take/give debt to\\n     * @param deltaCollateral Amount of collateral taken/added into the CDP\\n     * @param deltaDebt Amount of debt taken/added into the CDP\\n     */\\n    function confiscateSAFECollateralAndDebt(bytes32 collateralType, address cdp, address collateralCounterparty, address debtCounterparty, int deltaCollateral, int deltaDebt) external;\\n\\n    // --- Settlement ---\\n    /**\\n     * @notice Nullify an amount of coins with an equal amount of debt\\n     * @param rad Amount of debt & coins to destroy (expressed as a number with 45 decimals)\\n     */\\n    function settleDebt(uint rad) external;\\n\\n    /**\\n     * @notice Usually called by CoinSavingsAccount in order to create unbacked debt\\n     * @param debtDestination Usually AccountingEngine that can settle decreaseSoldAmount with surplus\\n     * @param coinDestination Usually CoinSavingsAccount who passes the new coins to depositors\\n     * @param rad Amount of debt to create (expressed as a number with 45 decimals)\\n     */\\n    function createUnbackedDebt(address debtDestination, address coinDestination, uint rad) external;\\n\\n    // --- Rates ---\\n    /**\\n     * @notice Usually called by TaxCollector in order to accrue interest on a specific collateral type\\n     * @param collateralType Collateral type we accrue interest for\\n     * @param surplusDst Destination for amount of surplus created by applying the interest rate\\n       to debt created by CDPs with 'collateralType'\\n     * @param accumulatedRate Multiplier applied to the debtAmount in order to calculate the surplus\\n     */\\n    function updateAccumulatedRate(bytes32 collateralType, address surplusDst, int accumulatedRate) external;\\n}\\n\",\"keccak256\":\"0xf1e715f60362b95b7788deb8531bfefbcc45ab70497f84a13eac55544ad42bb1\",\"license\":\"UNLICENSED\"},\"contracts/makerdao/utils/AuthWithContractEnabled.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IAuthWithContractEnabled} from \\\"../interfaces/IAuthWithContractEnabled.sol\\\";\\n\\nabstract contract AuthWithContractEnabled is IAuthWithContractEnabled {\\n    error NotAuthorized();\\n    error NotContractEnabled();\\n\\n    // --- Auth ---\\n    mapping (address => uint) public authorizedAccounts;\\n    function addAuthorization(address usr) external isAuthorized {\\n        if (contractEnabled != 1) revert NotContractEnabled();\\n        authorizedAccounts[usr] = 1;\\n    }\\n    function removeAuthorization(address usr) external isAuthorized {\\n        if (contractEnabled != 1) revert NotContractEnabled();\\n        authorizedAccounts[usr] = 0;\\n    }\\n    modifier isAuthorized {\\n        if (authorizedAccounts[msg.sender] != 1) revert NotAuthorized();\\n        _;\\n    }\\n\\n    uint256 public contractEnabled; // Access flag, indicates whether this contract is still active\\n    function disableContract() external isAuthorized {\\n        contractEnabled = 0;\\n        emit DisableContract();\\n    }\\n}\\n\",\"keccak256\":\"0xd337dc8afbfca938d9fd75af151179b6030c37805d4234695940537de02f23c0\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/makerdao/utils/Math.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nabstract contract Math {\\n    uint256 constant WAD = 10 ** 18;\\n\\n    /**\\n    * @notice Calculates the sum of an unsigned integer and a signed integer\\n    * @param  x Unsigned integer\\n    * @param  y Signed integer\\n    * @return z Unsigned sum of `x` and `y`\\n    */\\n    function _add(uint x, int y) internal pure returns (uint z) {\\n        if (y >= 0) {\\n            z = x + uint256(y);\\n        } else {\\n            z = x - uint256(-y);\\n        }\\n        require(y >= 0 || z <= x);\\n        require(y <= 0 || z >= x);\\n    }\\n\\n    /**\\n    * @notice Calculates the substraction of an unsigned integer and a signed integer\\n    * @param  x Unsigned integer\\n    * @param  y Signed integer\\n    * @return z Unsigned substraction of `x` and `y`\\n    */\\n    function _sub(uint x, int y) internal pure returns (uint z) {\\n        if (y >= 0) {\\n            z = x - uint256(y);\\n        } else {\\n            z = x + uint256(-y);\\n        }\\n        require(y <= 0 || z <= x);\\n        require(y >= 0 || z >= x);\\n    }\\n    function _mul(uint x, int y) internal pure returns (int z) {\\n        z = int(x) * y;\\n        require(int(x) >= 0);\\n        require(y == 0 || z / y == int(x));\\n    }\\n\\n    function _add(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x + y) >= x);\\n    }\\n    function _sub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) <= x);\\n    }\\n    function _mul(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x);\\n    }\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x <= y ? x : y;\\n    }\\n\\n    function either(bool x, bool y) internal pure returns (bool z) {\\n        assembly{ z := or(x, y)}\\n    }\\n    function both(bool x, bool y) internal pure returns (bool z) {\\n        assembly{ z := and(x, y)}\\n    }\\n}\\n\",\"keccak256\":\"0xcc88ae73c3c41786ae52f22a516bc57dbd66ffb4de9ea42d2344231b3d82dd3f\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x6080806040523461002b5733600052600060205260016040600020556001805561170a90816100318239f35b600080fdfe608080604052600436101561001357600080fd5b60003560e01c9081630e9e11d3146112725750806311005b07146112385780631b142820146111785780631d2a783d1461115a57806324ba58841461112057806327a0bb33146110825780632efcc8661461106457806335b281531461100f5780633d42250414610fbe57806341b3a0d914610fa0578063476bb6ef14610d7f5780634a11825e14610d0d5780634e14a96714610c065780634e5111a614610b355780635e41285814610a7e57806376e0b4ca14610a365780638543d5e014610a18578063894ba833146109c557806394f3f81d1461096157806399bec315146104cb578063d07900bb14610473578063d49d786714610431578063d4b9311d14610378578063d94d420814610335578063da49bada146102e4578063efabcadc14610259578063fabde80c1461021f5763fe4f58901461015357600080fd5b3461021a57604036600319011261021a5733600052600060205260016040600020540361020857610187600180541461140a565b60043570676c6f62616c446562744365696c696e6760781b036101ac57602435600a55005b60405162461bcd60e51b815260206004820152602e60248201527f53616665456e67696e652f6d6f64696679506172616d65746572732d756e726560448201526d636f676e697a65642d706172616d60901b6064820152608490fd5b60405163ea8e4eb560e01b8152600490fd5b600080fd5b3461021a57602036600319011261021a576001600160a01b03610240611320565b1660005260066020526020604060002054604051908152f35b3461021a576102673661138c565b919061027b610276338461149b565b611456565b6001600160a01b03918216600081815260066020526040902054906102a085836114f4565b91821161021a57600052600660205260406000205516806000526102ca6040600020549283611501565b91821061021a576000526006602052604060002055600080f35b3461021a57604036600319011261021a576102fd611320565b610305611336565b9060018060a01b038091166000526002602052604060002091166000526020526020604060002054604051908152f35b3461021a57602036600319011261021a5761034e611320565b33600052600260205260406000209060018060a01b03166000526020526001604060002055600080f35b3461021a57606036600319011261021a576004356024359060443591336000526000602052600160406000205403610208576103b7600180541461140a565b6a736166657479507269636560a81b81036103e057506000526003602052600260406000200155005b6a646562744365696c696e6760a81b810361040c57506000526003602052600360406000200155600080f35b683232b13a233637b7b960b91b036101ac576000526003602052600460406000200155005b3461021a57602036600319011261021a5761044a611320565b33600052600260205260406000209060018060a01b031660005260205260006040812055600080f35b3461021a57602036600319011261021a57600435600052600360205260a06040600020805490600181015490600281015460046003830154920154926040519485526020850152604084015260608301526080820152f35b3461021a576104d9366113c1565b906104ec6001809796949597541461140a565b60008581526004602090815260408083206001600160a01b038716845290915290819020815195918601906001600160401b0382118783101761094b576001916040528054875201546020860152856000526003602052604060002096604051978860a081011060018060401b0360a08b01111761094b5760a089016040528054895260046001820154918260208c0152600281015460408c0152600381015460608c0152015460808a0152156108fa576105a883875161150e565b86526105b884602088015161150e565b60208701526105c884895161150e565b88526105d88460208a01516115e0565b936105ec60208a0151602089015190611683565b906105f98660085461150e565b8060085561060d8b5160208d015190611683565b60608c0151101590600a54101516600082131517156108b7576000851215600082131516610641895160408d015190611683565b83111581171561087c57610655338961149b565b171561083c57610665338461149b565b600086131517156107fc57600061067c338661149b565b91121517156107bc576020870151159060808a015111151715610780576106ca6107039388600052600560205260406000209260018060a01b0316928360005260205260406000205461157f565b9087600052600560205260406000209060005260205260406000205560018060a01b03169182600052600660205260406000205461150e565b90600052600660205260406000205582600052600460205260406000209060018060a01b031660005260205260016020604060002092805184550151910155600052600360205260046080604060002092805184556020810151600185015560408101516002850155606081015160038501550151910155600080f35b60405162461bcd60e51b815260206004820152601460248201527329b0b332a2b733b4b73297b232b13a233637b7b960611b6044820152606490fd5b60405162461bcd60e51b815260206004820152601860248201527753616665456e67696e652f6e6f742d616c6c6f7765642d7760401b6044820152606490fd5b60405162461bcd60e51b815260206004820152601860248201527729b0b332a2b733b4b73297b737ba16b0b63637bbb2b216bb60411b6044820152606490fd5b60405162461bcd60e51b815260206004820152601860248201527753616665456e67696e652f6e6f742d616c6c6f7765642d7560401b6044820152606490fd5b60405162461bcd60e51b815260206004820152601360248201527253616665456e67696e652f6e6f742d7361666560681b6044820152606490fd5b60405162461bcd60e51b815260206004820152601b60248201527a14d85999515b99da5b994bd8d95a5b1a5b99cb595e18d959591959602a1b6044820152606490fd5b60405162461bcd60e51b815260206004820152602360248201527f53616665456e67696e652f636f6c6c61746572616c2d747970652d6e6f742d696044820152621b9a5d60ea1b6064820152608490fd5b634e487b7160e01b600052604160045260246000fd5b3461021a57602036600319011261021a5761097a611320565b3360005260006020526001604060002054036102085760018054036109b3576001600160a01b0316600090815260208190526040812055005b6040516374f80d5760e11b8152600490fd5b3461021a57600036600319011261021a573360005260006020526001604060002054036102085760006001557f2d4b4ecff7bd7503135271925520a2f6c0d98c9473ffc1a1e72c92502f51b25e600080a1005b3461021a57600036600319011261021a576020600854604051908152f35b3461021a57604036600319011261021a57610a4f611336565b600435600052600560205260406000209060018060a01b03166000526020526020604060002054604051908152f35b3461021a57602036600319011261021a5760043533600052600060205260016040600020540361020857806000526003602052600160406000200154610ae0576000526003602052676765c793fa10079d601b1b600160406000200155600080f35b60405162461bcd60e51b815260206004820152602760248201527f53616665456e67696e652f636f6c6c61746572616c2d747970652d616c726561604482015266191e4b5a5b9a5d60ca1b6064820152608490fd5b3461021a57608036600319011261021a57600435610b51611336565b610b5961134c565b9060643592610b6b610276338461149b565b60008181526005602090815260408083206001600160a01b03958616808552908352922054909391610b9d87836114f4565b91821161021a578360005260058552604060002090600052845260406000205581600052600583526040600020931692836000528252610be36040600020549485611501565b93841061021a576000526005815260406000209160005252604060002055600080f35b3461021a57610c14366113c1565b91949294939093336000526020936000855260016040600020540361020857610d0896610cc4610ca16007968460005260048952604060002060018060a01b03809816600052895260018a8160406000208860005260038d52610c7d604060002093825461150e565b815501610c8b84825461150e565b9055610c9883825461150e565b815501546115e0565b97836000526005885285604060002093169283600052885260406000205461157f565b91600052600586526040600020906000528552604060002055169182600052818152610cf58460406000205461157f565b926000525260406000205560095461157f565b600955005b3461021a57610d1b36611362565b33600052600060205260016040600020540361020857610d5f9083600052600560205260406000209260018060a01b0316928360005260205260406000205461150e565b916000526005602052604060002090600052602052604060002055600080f35b3461021a5760a036600319011261021a57600435610d9b611336565b610da361134c565b60008381526004602090815260408083206001600160a01b038681168552908352818420908516845281842096845260038352922082549195929360843593909260643590610df390829061157f565b8655610e226001610e1581890193610e0c89865461157f565b8555855461150e565b938481550195865461150e565b8095555494610e60600184015494610e5a610e52610e4a610e43898c611683565b988a611683565b9a339061149b565b91339061149b565b16611456565b5490610e7160028401548093611683565b8411610f615790610e8191611683565b8511610f2257600401548093159110151715610ee257159110151715610ea357005b6064906040519062461bcd60e51b82526004820152601860248201527714d85999515b99da5b994bd919589d119b1bdbdc8b591cdd60421b6044820152fd5b60405162461bcd60e51b815260048101859052601860248201527753616665456e67696e652f64656274466c6f6f722d73726360401b6044820152606490fd5b60405162461bcd60e51b815260048101879052601760248201527614d85999515b99da5b994bdb9bdd0b5cd859994b591cdd604a1b6044820152606490fd5b60405162461bcd60e51b815260048101899052601760248201527653616665456e67696e652f6e6f742d736166652d73726360481b6044820152606490fd5b3461021a57600036600319011261021a576020600154604051908152f35b3461021a57604036600319011261021a57610fd7611336565b600435600052600460205260406000209060018060a01b03166000526020526040806000206001815491015482519182526020820152f35b3461021a57602036600319011261021a57611028611320565b3360005260006020526001604060002054036102085760018054036109b3576001600160a01b0316600090815260208190526040902060019055005b3461021a57600036600319011261021a576020600a54604051908152f35b3461021a57602036600319011261021a576004353360005260076020526040600020546110af82826114f4565b90811161021a5733600052600760205260406000205560066020526040600020546110da82826114f4565b90811161021a573360005260066020526040600020556009546110fd82826114f4565b90811161021a5760095561111460085491826114f4565b90811161021a57600855005b3461021a57602036600319011261021a576001600160a01b03611141611320565b1660005260006020526020604060002054604051908152f35b3461021a57600036600319011261021a576020600954604051908152f35b3461021a576111863661138c565b9190336000526000602052600160406000205403610208576001600160a01b03918216600081815260076020526040902054906111c38583611501565b91821061021a57600052600760205260406000205516806000526006602052604060002054906111f38383611501565b91821061021a5760005260066020526040600020556009546112158282611501565b90811061021a5760095561122c6008549182611501565b90811061021a57600855005b3461021a57602036600319011261021a576001600160a01b03611259611320565b1660005260076020526020604060002054604051908152f35b3461021a5761128036611362565b92919091336000526000602052600160406000205403611311575061130c926112d4916112b0600180541461140a565b60005260036020526040600020600181016112cc83825461150e565b9055546115e0565b9060018060a01b03168060005260066020526112f58260406000205461150e565b90600052600660205260406000205560085461150e565b600855005b63ea8e4eb560e01b8152600490fd5b600435906001600160a01b038216820361021a57565b602435906001600160a01b038216820361021a57565b604435906001600160a01b038216820361021a57565b606090600319011261021a57600435906024356001600160a01b038116810361021a579060443590565b606090600319011261021a576001600160a01b0390600435828116810361021a5791602435908116810361021a579060443590565b60c090600319011261021a57600435906001600160a01b03602435818116810361021a5791604435828116810361021a5791606435908116810361021a57906084359060a43590565b1561141157565b60405162461bcd60e51b815260206004820152601e60248201527f53616665456e67696e652f6e6f742d636f6e7472616374456e61626c656400006044820152606490fd5b1561145d57565b60405162461bcd60e51b815260206004820152601660248201527514d85999515b99da5b994bdb9bdd0b585b1b1bddd95960521b6044820152606490fd5b9060018060a01b0380911691169081600052600260205260406000208160005260205260016040600020541491141790565b600160ff1b81146114de5760000390565b634e487b7160e01b600052601160045260246000fd5b919082039182116114de57565b919082018092116114de57565b60008083128015949391929190806115675761152a8284611501565b955b9061155d575b156115595782129081159161154e575b501561154b5750565b80fd5b905083101538611542565b8280fd5b5081851115611532565b611579611573836114cd565b846114f4565b9561152c565b909190600090818412908115826115c7578361159b87846114f4565b965b138015906115bd575b156115b9579161154e57501561154b5750565b8380fd5b50818611156115a6565b836115da6115d4886114cd565b84611501565b9661159d565b600080821293929091600160ff1b91808202838214871661166f5782810582148315171561166f57809661166b578115938415611624575b505050501561154b5750565b9091929361165757811460001983141661164357051438808080611618565b634e487b7160e01b84526011600452602484fd5b634e487b7160e01b85526012600452602485fd5b8480fd5b634e487b7160e01b85526011600452602485fd5b600092918391811591821561169d575b50501561154b5750565b818192939650028281048214831517156116435780956116c05704143880611693565b634e487b7160e01b84526012600452602484fdfea2646970667358221220b4516228be5d4b6647826d329605eb6a1d757713c8253d855136578814bf1f1d64736f6c63430008110033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b60003560e01c9081630e9e11d3146112725750806311005b07146112385780631b142820146111785780631d2a783d1461115a57806324ba58841461112057806327a0bb33146110825780632efcc8661461106457806335b281531461100f5780633d42250414610fbe57806341b3a0d914610fa0578063476bb6ef14610d7f5780634a11825e14610d0d5780634e14a96714610c065780634e5111a614610b355780635e41285814610a7e57806376e0b4ca14610a365780638543d5e014610a18578063894ba833146109c557806394f3f81d1461096157806399bec315146104cb578063d07900bb14610473578063d49d786714610431578063d4b9311d14610378578063d94d420814610335578063da49bada146102e4578063efabcadc14610259578063fabde80c1461021f5763fe4f58901461015357600080fd5b3461021a57604036600319011261021a5733600052600060205260016040600020540361020857610187600180541461140a565b60043570676c6f62616c446562744365696c696e6760781b036101ac57602435600a55005b60405162461bcd60e51b815260206004820152602e60248201527f53616665456e67696e652f6d6f64696679506172616d65746572732d756e726560448201526d636f676e697a65642d706172616d60901b6064820152608490fd5b60405163ea8e4eb560e01b8152600490fd5b600080fd5b3461021a57602036600319011261021a576001600160a01b03610240611320565b1660005260066020526020604060002054604051908152f35b3461021a576102673661138c565b919061027b610276338461149b565b611456565b6001600160a01b03918216600081815260066020526040902054906102a085836114f4565b91821161021a57600052600660205260406000205516806000526102ca6040600020549283611501565b91821061021a576000526006602052604060002055600080f35b3461021a57604036600319011261021a576102fd611320565b610305611336565b9060018060a01b038091166000526002602052604060002091166000526020526020604060002054604051908152f35b3461021a57602036600319011261021a5761034e611320565b33600052600260205260406000209060018060a01b03166000526020526001604060002055600080f35b3461021a57606036600319011261021a576004356024359060443591336000526000602052600160406000205403610208576103b7600180541461140a565b6a736166657479507269636560a81b81036103e057506000526003602052600260406000200155005b6a646562744365696c696e6760a81b810361040c57506000526003602052600360406000200155600080f35b683232b13a233637b7b960b91b036101ac576000526003602052600460406000200155005b3461021a57602036600319011261021a5761044a611320565b33600052600260205260406000209060018060a01b031660005260205260006040812055600080f35b3461021a57602036600319011261021a57600435600052600360205260a06040600020805490600181015490600281015460046003830154920154926040519485526020850152604084015260608301526080820152f35b3461021a576104d9366113c1565b906104ec6001809796949597541461140a565b60008581526004602090815260408083206001600160a01b038716845290915290819020815195918601906001600160401b0382118783101761094b576001916040528054875201546020860152856000526003602052604060002096604051978860a081011060018060401b0360a08b01111761094b5760a089016040528054895260046001820154918260208c0152600281015460408c0152600381015460608c0152015460808a0152156108fa576105a883875161150e565b86526105b884602088015161150e565b60208701526105c884895161150e565b88526105d88460208a01516115e0565b936105ec60208a0151602089015190611683565b906105f98660085461150e565b8060085561060d8b5160208d015190611683565b60608c0151101590600a54101516600082131517156108b7576000851215600082131516610641895160408d015190611683565b83111581171561087c57610655338961149b565b171561083c57610665338461149b565b600086131517156107fc57600061067c338661149b565b91121517156107bc576020870151159060808a015111151715610780576106ca6107039388600052600560205260406000209260018060a01b0316928360005260205260406000205461157f565b9087600052600560205260406000209060005260205260406000205560018060a01b03169182600052600660205260406000205461150e565b90600052600660205260406000205582600052600460205260406000209060018060a01b031660005260205260016020604060002092805184550151910155600052600360205260046080604060002092805184556020810151600185015560408101516002850155606081015160038501550151910155600080f35b60405162461bcd60e51b815260206004820152601460248201527329b0b332a2b733b4b73297b232b13a233637b7b960611b6044820152606490fd5b60405162461bcd60e51b815260206004820152601860248201527753616665456e67696e652f6e6f742d616c6c6f7765642d7760401b6044820152606490fd5b60405162461bcd60e51b815260206004820152601860248201527729b0b332a2b733b4b73297b737ba16b0b63637bbb2b216bb60411b6044820152606490fd5b60405162461bcd60e51b815260206004820152601860248201527753616665456e67696e652f6e6f742d616c6c6f7765642d7560401b6044820152606490fd5b60405162461bcd60e51b815260206004820152601360248201527253616665456e67696e652f6e6f742d7361666560681b6044820152606490fd5b60405162461bcd60e51b815260206004820152601b60248201527a14d85999515b99da5b994bd8d95a5b1a5b99cb595e18d959591959602a1b6044820152606490fd5b60405162461bcd60e51b815260206004820152602360248201527f53616665456e67696e652f636f6c6c61746572616c2d747970652d6e6f742d696044820152621b9a5d60ea1b6064820152608490fd5b634e487b7160e01b600052604160045260246000fd5b3461021a57602036600319011261021a5761097a611320565b3360005260006020526001604060002054036102085760018054036109b3576001600160a01b0316600090815260208190526040812055005b6040516374f80d5760e11b8152600490fd5b3461021a57600036600319011261021a573360005260006020526001604060002054036102085760006001557f2d4b4ecff7bd7503135271925520a2f6c0d98c9473ffc1a1e72c92502f51b25e600080a1005b3461021a57600036600319011261021a576020600854604051908152f35b3461021a57604036600319011261021a57610a4f611336565b600435600052600560205260406000209060018060a01b03166000526020526020604060002054604051908152f35b3461021a57602036600319011261021a5760043533600052600060205260016040600020540361020857806000526003602052600160406000200154610ae0576000526003602052676765c793fa10079d601b1b600160406000200155600080f35b60405162461bcd60e51b815260206004820152602760248201527f53616665456e67696e652f636f6c6c61746572616c2d747970652d616c726561604482015266191e4b5a5b9a5d60ca1b6064820152608490fd5b3461021a57608036600319011261021a57600435610b51611336565b610b5961134c565b9060643592610b6b610276338461149b565b60008181526005602090815260408083206001600160a01b03958616808552908352922054909391610b9d87836114f4565b91821161021a578360005260058552604060002090600052845260406000205581600052600583526040600020931692836000528252610be36040600020549485611501565b93841061021a576000526005815260406000209160005252604060002055600080f35b3461021a57610c14366113c1565b91949294939093336000526020936000855260016040600020540361020857610d0896610cc4610ca16007968460005260048952604060002060018060a01b03809816600052895260018a8160406000208860005260038d52610c7d604060002093825461150e565b815501610c8b84825461150e565b9055610c9883825461150e565b815501546115e0565b97836000526005885285604060002093169283600052885260406000205461157f565b91600052600586526040600020906000528552604060002055169182600052818152610cf58460406000205461157f565b926000525260406000205560095461157f565b600955005b3461021a57610d1b36611362565b33600052600060205260016040600020540361020857610d5f9083600052600560205260406000209260018060a01b0316928360005260205260406000205461150e565b916000526005602052604060002090600052602052604060002055600080f35b3461021a5760a036600319011261021a57600435610d9b611336565b610da361134c565b60008381526004602090815260408083206001600160a01b038681168552908352818420908516845281842096845260038352922082549195929360843593909260643590610df390829061157f565b8655610e226001610e1581890193610e0c89865461157f565b8555855461150e565b938481550195865461150e565b8095555494610e60600184015494610e5a610e52610e4a610e43898c611683565b988a611683565b9a339061149b565b91339061149b565b16611456565b5490610e7160028401548093611683565b8411610f615790610e8191611683565b8511610f2257600401548093159110151715610ee257159110151715610ea357005b6064906040519062461bcd60e51b82526004820152601860248201527714d85999515b99da5b994bd919589d119b1bdbdc8b591cdd60421b6044820152fd5b60405162461bcd60e51b815260048101859052601860248201527753616665456e67696e652f64656274466c6f6f722d73726360401b6044820152606490fd5b60405162461bcd60e51b815260048101879052601760248201527614d85999515b99da5b994bdb9bdd0b5cd859994b591cdd604a1b6044820152606490fd5b60405162461bcd60e51b815260048101899052601760248201527653616665456e67696e652f6e6f742d736166652d73726360481b6044820152606490fd5b3461021a57600036600319011261021a576020600154604051908152f35b3461021a57604036600319011261021a57610fd7611336565b600435600052600460205260406000209060018060a01b03166000526020526040806000206001815491015482519182526020820152f35b3461021a57602036600319011261021a57611028611320565b3360005260006020526001604060002054036102085760018054036109b3576001600160a01b0316600090815260208190526040902060019055005b3461021a57600036600319011261021a576020600a54604051908152f35b3461021a57602036600319011261021a576004353360005260076020526040600020546110af82826114f4565b90811161021a5733600052600760205260406000205560066020526040600020546110da82826114f4565b90811161021a573360005260066020526040600020556009546110fd82826114f4565b90811161021a5760095561111460085491826114f4565b90811161021a57600855005b3461021a57602036600319011261021a576001600160a01b03611141611320565b1660005260006020526020604060002054604051908152f35b3461021a57600036600319011261021a576020600954604051908152f35b3461021a576111863661138c565b9190336000526000602052600160406000205403610208576001600160a01b03918216600081815260076020526040902054906111c38583611501565b91821061021a57600052600760205260406000205516806000526006602052604060002054906111f38383611501565b91821061021a5760005260066020526040600020556009546112158282611501565b90811061021a5760095561122c6008549182611501565b90811061021a57600855005b3461021a57602036600319011261021a576001600160a01b03611259611320565b1660005260076020526020604060002054604051908152f35b3461021a5761128036611362565b92919091336000526000602052600160406000205403611311575061130c926112d4916112b0600180541461140a565b60005260036020526040600020600181016112cc83825461150e565b9055546115e0565b9060018060a01b03168060005260066020526112f58260406000205461150e565b90600052600660205260406000205560085461150e565b600855005b63ea8e4eb560e01b8152600490fd5b600435906001600160a01b038216820361021a57565b602435906001600160a01b038216820361021a57565b604435906001600160a01b038216820361021a57565b606090600319011261021a57600435906024356001600160a01b038116810361021a579060443590565b606090600319011261021a576001600160a01b0390600435828116810361021a5791602435908116810361021a579060443590565b60c090600319011261021a57600435906001600160a01b03602435818116810361021a5791604435828116810361021a5791606435908116810361021a57906084359060a43590565b1561141157565b60405162461bcd60e51b815260206004820152601e60248201527f53616665456e67696e652f6e6f742d636f6e7472616374456e61626c656400006044820152606490fd5b1561145d57565b60405162461bcd60e51b815260206004820152601660248201527514d85999515b99da5b994bdb9bdd0b585b1b1bddd95960521b6044820152606490fd5b9060018060a01b0380911691169081600052600260205260406000208160005260205260016040600020541491141790565b600160ff1b81146114de5760000390565b634e487b7160e01b600052601160045260246000fd5b919082039182116114de57565b919082018092116114de57565b60008083128015949391929190806115675761152a8284611501565b955b9061155d575b156115595782129081159161154e575b501561154b5750565b80fd5b905083101538611542565b8280fd5b5081851115611532565b611579611573836114cd565b846114f4565b9561152c565b909190600090818412908115826115c7578361159b87846114f4565b965b138015906115bd575b156115b9579161154e57501561154b5750565b8380fd5b50818611156115a6565b836115da6115d4886114cd565b84611501565b9661159d565b600080821293929091600160ff1b91808202838214871661166f5782810582148315171561166f57809661166b578115938415611624575b505050501561154b5750565b9091929361165757811460001983141661164357051438808080611618565b634e487b7160e01b84526011600452602484fd5b634e487b7160e01b85526012600452602485fd5b8480fd5b634e487b7160e01b85526011600452602485fd5b600092918391811591821561169d575b50501561154b5750565b818192939650028281048214831517156116435780956116c05704143880611693565b634e487b7160e01b84526012600452602484fdfea2646970667358221220b4516228be5d4b6647826d329605eb6a1d757713c8253d855136578814bf1f1d64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approveSAFEModification(address)": {
        "params": {
          "usr": "Account to give CDP permissions to"
        }
      },
      "confiscateSAFECollateralAndDebt(bytes32,address,address,address,int256,int256)": {
        "params": {
          "cdp": "Target CDP",
          "collateralCounterparty": "Who we take/give collateral to",
          "collateralType": "Collateral type the CDP has locked inside",
          "debtCounterparty": "Who we take/give debt to",
          "deltaCollateral": "Amount of collateral taken/added into the CDP",
          "deltaDebt": "Amount of debt taken/added into the CDP"
        }
      },
      "createUnbackedDebt(address,address,uint256)": {
        "params": {
          "coinDestination": "Usually CoinSavingsAccount who passes the new coins to depositors",
          "debtDestination": "Usually AccountingEngine that can settle decreaseSoldAmount with surplus",
          "rad": "Amount of debt to create (expressed as a number with 45 decimals)"
        }
      },
      "denySAFEModification(address)": {
        "params": {
          "usr": "Account to give CDP permissions to"
        }
      },
      "modifySAFECollateralization(bytes32,address,address,address,int256,int256)": {
        "params": {
          "cdp": "Target CDP",
          "collateralSource": "Account we take collateral from/put collateral into",
          "collateralType": "Type of collateral to withdraw/deposit in and from the CDP",
          "debtDestination": "Account from which we credit/debit coins and debt",
          "deltaCollateral": "Amount of collateral added/extract from the CDP",
          "deltaDebt": "Amount of debt to generate/repay"
        }
      },
      "settleDebt(uint256)": {
        "params": {
          "rad": "Amount of debt & coins to destroy (expressed as a number with 45 decimals)"
        }
      },
      "transferSAFECollateralAndDebt(bytes32,address,address,int256,int256)": {
        "params": {
          "collateralType": "Collateral type transferred between CDPs",
          "deltaCollateral": "Amount of collateral to take/add into src and give/take from dst",
          "deltaDebt": "Amount of debt to take/add into src and give/take from dst",
          "dst": "Destination CDP",
          "src": "Source CDP"
        }
      },
      "updateAccumulatedRate(bytes32,address,int256)": {
        "params": {
          "accumulatedRate": "Multiplier applied to the debtAmount in order to calculate the surplus",
          "collateralType": "Collateral type we accrue interest for",
          "surplusDst": "Destination for amount of surplus created by applying the interest rate to debt created by CDPs with 'collateralType'"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approveSAFEModification(address)": {
        "notice": "Allow an address to modify your CDP"
      },
      "collateralTypes(bytes32)": {
        "notice": "Total User Debt (drawn dai + stability fee accrued) = SAFE.generatedDebt * CollateralType.accumulatedRate;"
      },
      "confiscateSAFECollateralAndDebt(bytes32,address,address,address,int256,int256)": {
        "notice": "Normally used by the LiquidationEngine in order to confiscate collateral and debt from a CDP and give them to someone else"
      },
      "createUnbackedDebt(address,address,uint256)": {
        "notice": "Usually called by CoinSavingsAccount in order to create unbacked debt"
      },
      "denySAFEModification(address)": {
        "notice": "Deny an address the rights to modify your CDP"
      },
      "modifySAFECollateralization(bytes32,address,address,address,int256,int256)": {
        "notice": "Add/remove collateral or put back/generate more debt in a CDP"
      },
      "settleDebt(uint256)": {
        "notice": "Nullify an amount of coins with an equal amount of debt"
      },
      "transferSAFECollateralAndDebt(bytes32,address,address,int256,int256)": {
        "notice": "Transfer collateral and/or debt between CDPs"
      },
      "updateAccumulatedRate(bytes32,address,int256)": {
        "notice": "Usually called by TaxCollector in order to accrue interest on a specific collateral type"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5524,
        "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
        "label": "authorizedAccounts",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5582,
        "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
        "label": "contractEnabled",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2135,
        "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
        "label": "cdpRights",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 2194,
        "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
        "label": "collateralTypes",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_struct(CollateralType)5276_storage)"
      },
      {
        "astId": 2201,
        "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
        "label": "safes",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_struct(SAFE)5281_storage))"
      },
      {
        "astId": 2207,
        "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
        "label": "tokenCollateral",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 2211,
        "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
        "label": "coinBalance",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2215,
        "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
        "label": "debtBalance",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2217,
        "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
        "label": "globalDebt",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 2219,
        "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
        "label": "globalUnbackedDebt",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 2221,
        "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
        "label": "globalDebtCeiling",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(SAFE)5281_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ISafeEngine.SAFE)",
        "numberOfBytes": "32",
        "value": "t_struct(SAFE)5281_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_struct(SAFE)5281_storage))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => struct ISafeEngine.SAFE))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(SAFE)5281_storage)"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_bytes32,t_struct(CollateralType)5276_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct ISafeEngine.CollateralType)",
        "numberOfBytes": "32",
        "value": "t_struct(CollateralType)5276_storage"
      },
      "t_struct(CollateralType)5276_storage": {
        "encoding": "inplace",
        "label": "struct ISafeEngine.CollateralType",
        "members": [
          {
            "astId": 5267,
            "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
            "label": "debtAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5269,
            "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
            "label": "accumulatedRate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5271,
            "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
            "label": "safetyPrice",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5273,
            "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
            "label": "debtCeiling",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5275,
            "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
            "label": "debtFloor",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(SAFE)5281_storage": {
        "encoding": "inplace",
        "label": "struct ISafeEngine.SAFE",
        "members": [
          {
            "astId": 5278,
            "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
            "label": "lockedCollateral",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5280,
            "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
            "label": "generatedDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}