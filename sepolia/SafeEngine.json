{
  "address": "0xeCD2C5f627FFcB1FCCd7240e2eF317BA46cfd433",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "accessControl",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "BadAccessControlSingleton",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAdminError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAlerterError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyCDPAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyDAOError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyDisablerAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyLiquidationAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyMintAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyRewardAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyRoleError",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "DisableContract",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACCESS_CONTROL_SINGLETON",
      "outputs": [
        {
          "internalType": "contract ISuAccessControl",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ALERTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CDP_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DAO_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DISABLER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIQUIDATION_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINT_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARD_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SYSTEM_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "usr",
          "type": "address"
        }
      ],
      "name": "approveSAFEModification",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "cdpRights",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "coinBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "collateralTypes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "debtAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accumulatedRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "safetyPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "debtCeiling",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "debtFloor",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "cdp",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "collateralCounterparty",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "debtCounterparty",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "deltaCollateral",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "deltaDebt",
          "type": "int256"
        }
      ],
      "name": "confiscateSAFECollateralAndDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractEnabled",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "debtDestination",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "coinDestination",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rad",
          "type": "uint256"
        }
      ],
      "name": "createUnbackedDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "debtBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "usr",
          "type": "address"
        }
      ],
      "name": "denySAFEModification",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disableContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "globalDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "globalDebtCeiling",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "globalUnbackedDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        }
      ],
      "name": "initializeCollateralType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "usr",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "wad",
          "type": "int256"
        }
      ],
      "name": "modifyCollateralBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "what",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "data",
          "type": "uint256"
        }
      ],
      "name": "modifyParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "what",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "data",
          "type": "uint256"
        }
      ],
      "name": "modifyParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "cdp",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "collateralSource",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "debtDestination",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "deltaCollateral",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "deltaDebt",
          "type": "int256"
        }
      ],
      "name": "modifySAFECollateralization",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "safes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lockedCollateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "generatedDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rad",
          "type": "uint256"
        }
      ],
      "name": "settleDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "transferCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rad",
          "type": "uint256"
        }
      ],
      "name": "transferInternalCoins",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "deltaCollateral",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "deltaDebt",
          "type": "int256"
        }
      ],
      "name": "transferSAFECollateralAndDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "surplusDst",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "accumulatedRate",
          "type": "int256"
        }
      ],
      "name": "updateAccumulatedRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "numDeployments": 2,
  "solcInputHash": "c51927dd277f1318ab9de6db4c2443ac",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"accessControl\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BadAccessControlSingleton\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAdminError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAlerterError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyCDPAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyDAOError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyDisablerAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyLiquidationAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyMintAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRewardAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRoleError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DisableContract\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACCESS_CONTROL_SINGLETON\",\"outputs\":[{\"internalType\":\"contract ISuAccessControl\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ALERTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CDP_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAO_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DISABLER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDATION_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SYSTEM_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"approveSAFEModification\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cdpRights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"coinBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"collateralTypes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"debtAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accumulatedRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"safetyPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtCeiling\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtFloor\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"cdp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralCounterparty\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"debtCounterparty\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"deltaCollateral\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"deltaDebt\",\"type\":\"int256\"}],\"name\":\"confiscateSAFECollateralAndDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractEnabled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"debtDestination\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"coinDestination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rad\",\"type\":\"uint256\"}],\"name\":\"createUnbackedDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"debtBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"denySAFEModification\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalDebtCeiling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalUnbackedDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"}],\"name\":\"initializeCollateralType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"wad\",\"type\":\"int256\"}],\"name\":\"modifyCollateralBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"cdp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralSource\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"debtDestination\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"deltaCollateral\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"deltaDebt\",\"type\":\"int256\"}],\"name\":\"modifySAFECollateralization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"safes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockedCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"generatedDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rad\",\"type\":\"uint256\"}],\"name\":\"settleDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transferCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rad\",\"type\":\"uint256\"}],\"name\":\"transferInternalCoins\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"deltaCollateral\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"deltaDebt\",\"type\":\"int256\"}],\"name\":\"transferSAFECollateralAndDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"surplusDst\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"accumulatedRate\",\"type\":\"int256\"}],\"name\":\"updateAccumulatedRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approveSAFEModification(address)\":{\"params\":{\"usr\":\"Account to give CDP permissions to\"}},\"confiscateSAFECollateralAndDebt(bytes32,address,address,address,int256,int256)\":{\"params\":{\"cdp\":\"Target CDP\",\"collateralCounterparty\":\"Who we take/give collateral to\",\"collateralType\":\"Collateral type the CDP has locked inside\",\"debtCounterparty\":\"Who we take/give debt to\",\"deltaCollateral\":\"Amount of collateral taken/added into the CDP\",\"deltaDebt\":\"Amount of debt taken/added into the CDP\"}},\"createUnbackedDebt(address,address,uint256)\":{\"params\":{\"coinDestination\":\"Usually CoinSavingsAccount who passes the new coins to depositors\",\"debtDestination\":\"Usually AccountingEngine that can settle decreaseSoldAmount with surplus\",\"rad\":\"Amount of debt to create (expressed as a number with 45 decimals)\"}},\"denySAFEModification(address)\":{\"params\":{\"usr\":\"Account to give CDP permissions to\"}},\"modifyParameters(bytes32,bytes32,uint256)\":{\"params\":{\"collateralType\":\"- collateral type we wand to modify (collateralTypes[collateralType])\",\"data\":\"- new value of this variable\",\"what\":\"- name of variable in struct we want to change\"}},\"modifyParameters(bytes32,uint256)\":{\"params\":{\"data\":\"- new value of this variable\",\"what\":\"- name of variable we want to change\"}},\"modifySAFECollateralization(bytes32,address,address,address,int256,int256)\":{\"params\":{\"cdp\":\"Target CDP\",\"collateralSource\":\"Account we take collateral from/put collateral into\",\"collateralType\":\"Type of collateral to withdraw/deposit in and from the CDP\",\"debtDestination\":\"Account from which we credit/debit coins and debt\",\"deltaCollateral\":\"Amount of collateral added/extract from the CDP\",\"deltaDebt\":\"Amount of debt to generate/repay\"}},\"settleDebt(uint256)\":{\"params\":{\"rad\":\"Amount of debt & coins to destroy (expressed as a number with 45 decimals)\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferSAFECollateralAndDebt(bytes32,address,address,int256,int256)\":{\"params\":{\"collateralType\":\"Collateral type transferred between CDPs\",\"deltaCollateral\":\"Amount of collateral to take/add into src and give/take from dst\",\"deltaDebt\":\"Amount of debt to take/add into src and give/take from dst\",\"dst\":\"Destination CDP\",\"src\":\"Source CDP\"}},\"updateAccumulatedRate(bytes32,address,int256)\":{\"params\":{\"accumulatedRate\":\"Multiplier applied to the debtAmount in order to calculate the surplus\",\"collateralType\":\"Collateral type we accrue interest for\",\"surplusDst\":\"Destination for amount of surplus created by applying the interest rate to debt created by CDPs with 'collateralType'\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approveSAFEModification(address)\":{\"notice\":\"Allow an address to modify your CDP. For example coinAdapter should be able to modify your CDP to withdraw all correctly.\"},\"collateralTypes(bytes32)\":{\"notice\":\"Total User Debt (drawn StablePro + stability fee accrued) = SAFE.generatedDebt * CollateralType.accumulatedRate\"},\"confiscateSAFECollateralAndDebt(bytes32,address,address,address,int256,int256)\":{\"notice\":\"Normally used by the LiquidationEngine in order to confiscate collateral and debt from a CDP and give them to someone else\"},\"createUnbackedDebt(address,address,uint256)\":{\"notice\":\"Usually called by CoinSavingsAccount in order to create unbacked debt\"},\"denySAFEModification(address)\":{\"notice\":\"Deny an address the rights to modify your CDP\"},\"modifyParameters(bytes32,bytes32,uint256)\":{\"notice\":\"Method to modify values in struct of collateralTypes\"},\"modifyParameters(bytes32,uint256)\":{\"notice\":\"Method to modify some global variables\"},\"modifySAFECollateralization(bytes32,address,address,address,int256,int256)\":{\"notice\":\"Add/remove collateral or put back/generate more debt in a CDP\"},\"settleDebt(uint256)\":{\"notice\":\"Nullify an amount of coins with an equal amount of debt\"},\"transferSAFECollateralAndDebt(bytes32,address,address,int256,int256)\":{\"notice\":\"Transfer collateral and/or debt between CDPs\"},\"updateAccumulatedRate(bytes32,address,int256)\":{\"notice\":\"Usually called by TaxCollector in order to accrue interest on a specific collateral type\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/makerdao/core/SafeEngine.sol\":\"SafeEngine\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/makerdao/core/SafeEngine.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\n/// SAFEEngine.sol -- StablePro CDP database\\n\\n// Copyright (C) 2018 Rain <rainbreak@riseup.net>\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport {Math} from \\\"../utils/Math.sol\\\";\\nimport {ISafeEngine} from \\\"../interfaces/ISafeEngine.sol\\\";\\nimport \\\"../../periphery/contracts/access-control/SuAuthenticatedNonUpgradeable.sol\\\";\\n\\n// FIXME: This contract was altered compared to the production version.\\n// It doesn't use LibNote anymore.\\n// New deployments of this contract will need to include custom events (TO DO).\\n\\n// CHANGED: added interface, moved structs there.\\n// Maybe we'll need to add events in each method (need to discuss, in another branch dss has LogNote for that)\\n// Added SuAuthenticated instead of authorizedAccounts\\n\\ncontract SafeEngine is SuAuthenticatedNonUpgradeable, Math, ISafeEngine {\\n    // --- Disable ---\\n    uint public contractEnabled;\\n    function disableContract() external onlyDisablerAccess {\\n        contractEnabled = 0;\\n        emit DisableContract();\\n    }\\n\\n    // --- Auth ---\\n    // Who can transfer collateral & debt in/out of a CDP\\n    mapping(address => mapping (address => uint)) public cdpRights;\\n\\n    function approveSAFEModification(address usr) external { cdpRights[msg.sender][usr] = 1; }\\n\\n    function denySAFEModification(address usr) external { cdpRights[msg.sender][usr] = 0; }\\n\\n    function canModifySAFE(address cdp, address account) internal view returns (bool) {\\n        return either(cdp == account, cdpRights[cdp][account] == 1);\\n    }\\n\\n    /// Total User Debt (drawn StablePro + stability fee accrued) = SAFE.generatedDebt * CollateralType.accumulatedRate\\n\\n    // Data about each collateral type\\n    mapping (bytes32 => CollateralType)            public collateralTypes;\\n    // Data about each SAFE\\n    mapping (bytes32 => mapping (address => SAFE)) public safes;\\n    // Balance of each collateral type\\n    mapping (bytes32 => mapping (address => uint)) public tokenCollateral; // [wad]\\n    // Internal balance of pegged-coins\\n    mapping (address => uint256)                   public coinBalance;     // [rad]\\n    // Amount of debt held by an account. Coin & debt are like matter and antimatter. They nullify each other\\n    mapping (address => uint256)                   public debtBalance;     // [rad]\\n\\n    uint256 public globalDebt;          // Total amount of debt (coins) currently issued [rad]\\n    uint256 public globalUnbackedDebt;  // 'Bad' debt that's not covered by collateral   [rad]\\n    uint256 public globalDebtCeiling;   // Maximum amount of debt that can be issued     [rad]\\n\\n    // --- Init ---\\n    constructor(address accessControl) SuAuthenticatedNonUpgradeable(accessControl) public {\\n        contractEnabled = 1;\\n    }\\n\\n    // --- Administration ---\\n    function initializeCollateralType(bytes32 collateralType) external onlyAdmin {\\n        require(collateralTypes[collateralType].accumulatedRate == 0, \\\"SafeEngine/collateral-type-already-init\\\");\\n        collateralTypes[collateralType].accumulatedRate = 10 ** 27;\\n    }\\n    function modifyParameters(bytes32 what, uint data) external onlyAdmin {\\n        require(contractEnabled == 1, \\\"SafeEngine/not-contractEnabled\\\");\\n        if (what == \\\"globalDebtCeiling\\\") globalDebtCeiling = data;\\n        else revert(\\\"SafeEngine/modifyParameters-unrecognized-param\\\");\\n    }\\n    function modifyParameters(bytes32 collateralType, bytes32 what, uint data) external onlyAdmin {\\n        require(contractEnabled == 1, \\\"SafeEngine/not-contractEnabled\\\");\\n        if (what == \\\"safetyPrice\\\") collateralTypes[collateralType].safetyPrice = data;\\n        else if (what == \\\"debtCeiling\\\") collateralTypes[collateralType].debtCeiling = data;\\n        else if (what == \\\"debtFloor\\\") collateralTypes[collateralType].debtFloor = data;\\n        else revert(\\\"SafeEngine/modifyParameters-unrecognized-param\\\");\\n    }\\n\\n    // --- Fungibility ---\\n    function modifyCollateralBalance(bytes32 collateralType, address usr, int256 wad) external onlyCDPAccess {\\n        tokenCollateral[collateralType][usr] = _add(tokenCollateral[collateralType][usr], wad);\\n    }\\n    function transferCollateral(bytes32 collateralType, address src, address dst, uint256 wad) external {\\n        require(canModifySAFE(src, msg.sender), \\\"SafeEngine/not-allowed\\\");\\n        tokenCollateral[collateralType][src] = _sub(tokenCollateral[collateralType][src], wad);\\n        tokenCollateral[collateralType][dst] = _add(tokenCollateral[collateralType][dst], wad);\\n    }\\n    function transferInternalCoins(address src, address dst, uint256 rad) external {\\n        require(canModifySAFE(src, msg.sender), \\\"SafeEngine/not-allowed\\\");\\n        coinBalance[src] = _sub(coinBalance[src], rad);\\n        coinBalance[dst] = _add(coinBalance[dst], rad);\\n    }\\n\\n    // --- CDP Manipulation ---\\n    function modifySAFECollateralization(\\n        bytes32 collateralType,\\n        address cdp,\\n        address collateralSource,\\n        address debtDestination,\\n        int deltaCollateral,\\n        int deltaDebt\\n    ) external {\\n        // system is contractEnabled\\n        require(contractEnabled == 1, \\\"SafeEngine/not-contractEnabled\\\");\\n\\n        SAFE memory safe_ = safes[collateralType][cdp];\\n        CollateralType memory collateralType_ = collateralTypes[collateralType];\\n        // collateralType has been initialised\\n        require(collateralType_.accumulatedRate != 0, \\\"SafeEngine/collateral-type-not-init\\\");\\n\\n        safe_.lockedCollateral = _add(safe_.lockedCollateral, deltaCollateral);\\n        safe_.generatedDebt = _add(safe_.generatedDebt, deltaDebt);\\n        collateralType_.debtAmount = _add(collateralType_.debtAmount, deltaDebt);\\n\\n        int dAmountToRaise = _mul(collateralType_.accumulatedRate, deltaDebt);\\n        uint amountToRaise = _mul(collateralType_.accumulatedRate, safe_.generatedDebt);\\n        globalDebt = _add(globalDebt, dAmountToRaise);\\n\\n        // either debt has decreased, or debt ceilings are not exceeded\\n        require(\\n            either(\\n                deltaDebt <= 0,\\n                both(\\n                    _mul(collateralType_.debtAmount, collateralType_.accumulatedRate) <= collateralType_.debtCeiling,\\n                    globalDebt <= globalDebtCeiling\\n                )\\n            ),\\n            \\\"SafeEngine/ceiling-exceeded\\\"\\n        );\\n        // safe is either less risky than before, or it is safe\\n        require(\\n            either(\\n                both(deltaDebt <= 0, deltaCollateral >= 0),\\n                amountToRaise <= _mul(safe_.lockedCollateral, collateralType_.safetyPrice)\\n            ),\\n            \\\"SafeEngine/not-safe\\\"\\n        );\\n\\n        // safe is either more safe, or the owner consents\\n        require(\\n            either(both(deltaDebt <= 0, deltaCollateral >= 0), canModifySAFE(cdp, msg.sender)),\\n            \\\"SafeEngine/not-allowed-u\\\"\\n        );\\n        // collateral src consents\\n        require(either(deltaCollateral <= 0, canModifySAFE(collateralSource, msg.sender)), \\\"SafeEngine/not-allowed-v\\\");\\n        // debt dst consents\\n        require(either(deltaDebt >= 0, canModifySAFE(debtDestination, msg.sender)), \\\"SafeEngine/not-allowed-w\\\");\\n\\n        // safe has no debt, or a non-dusty amount\\n        require(either(safe_.generatedDebt == 0, amountToRaise >= collateralType_.debtFloor), \\\"SafeEngine/debtFloor\\\");\\n\\n        tokenCollateral[collateralType][collateralSource] =\\n                        _sub(tokenCollateral[collateralType][collateralSource], deltaCollateral);\\n        coinBalance[debtDestination] = _add(coinBalance[debtDestination], dAmountToRaise);\\n\\n        safes[collateralType][cdp] = safe_;\\n        collateralTypes[collateralType] = collateralType_;\\n    }\\n    // --- CDP Fungibility ---\\n    function transferSAFECollateralAndDebt(\\n        bytes32 collateralType,\\n        address src,\\n        address dst,\\n        int deltaCollateral,\\n        int deltaDebt\\n    ) external {\\n        SAFE storage srcCDP = safes[collateralType][src];\\n        SAFE storage dstCDP = safes[collateralType][dst];\\n        CollateralType storage col = collateralTypes[collateralType];\\n\\n        srcCDP.lockedCollateral = _sub(srcCDP.lockedCollateral, deltaCollateral);\\n        srcCDP.generatedDebt = _sub(srcCDP.generatedDebt, deltaDebt);\\n        dstCDP.lockedCollateral = _add(dstCDP.lockedCollateral, deltaCollateral);\\n        dstCDP.generatedDebt = _add(dstCDP.generatedDebt, deltaDebt);\\n\\n        uint srcAmountToRaise = _mul(srcCDP.generatedDebt, col.accumulatedRate);\\n        uint dstAmountToRaise = _mul(dstCDP.generatedDebt, col.accumulatedRate);\\n\\n        // both sides consent\\n        require(both(canModifySAFE(src, msg.sender), canModifySAFE(dst, msg.sender)), \\\"SafeEngine/not-allowed\\\");\\n\\n        // both sides safe\\n        require(srcAmountToRaise <= _mul(srcCDP.lockedCollateral, col.safetyPrice), \\\"SafeEngine/not-safe-src\\\");\\n        require(dstAmountToRaise <= _mul(dstCDP.lockedCollateral, col.safetyPrice), \\\"SafeEngine/not-safe-dst\\\");\\n\\n        // both sides non-dusty\\n        require(either(srcAmountToRaise >= col.debtFloor, srcCDP.generatedDebt == 0), \\\"SafeEngine/debtFloor-src\\\");\\n        require(either(dstAmountToRaise >= col.debtFloor, dstCDP.generatedDebt == 0), \\\"SafeEngine/debtFloor-dst\\\");\\n    }\\n    // --- CDP Confiscation ---\\n    function confiscateSAFECollateralAndDebt(\\n        bytes32 collateralType,\\n        address cdp,\\n        address collateralCounterparty,\\n        address debtCounterparty,\\n        int deltaCollateral,\\n        int deltaDebt\\n    ) external onlyCDPAccess {\\n        SAFE storage safe_ = safes[collateralType][cdp];\\n        CollateralType storage collateralType_ = collateralTypes[collateralType];\\n\\n        safe_.lockedCollateral = _add(safe_.lockedCollateral, deltaCollateral);\\n        safe_.generatedDebt = _add(safe_.generatedDebt, deltaDebt);\\n        collateralType_.debtAmount = _add(collateralType_.debtAmount, deltaDebt);\\n\\n        int deltaTotalIssuedDebt = _mul(collateralType_.accumulatedRate, deltaDebt);\\n\\n        tokenCollateral[collateralType][collateralCounterparty] =\\n                        _sub(tokenCollateral[collateralType][collateralCounterparty], deltaCollateral);\\n        debtBalance[debtCounterparty] = _sub(debtBalance[debtCounterparty], deltaTotalIssuedDebt);\\n        globalUnbackedDebt = _sub(globalUnbackedDebt, deltaTotalIssuedDebt);\\n    }\\n\\n    // --- Settlement ---\\n\\n    function settleDebt(uint rad) external {\\n        address account      = msg.sender;\\n        debtBalance[account] = _sub(debtBalance[account], rad);\\n        coinBalance[account] = _sub(coinBalance[account], rad);\\n        globalUnbackedDebt   = _sub(globalUnbackedDebt,   rad);\\n        globalDebt           = _sub(globalDebt,   rad);\\n    }\\n\\n    function createUnbackedDebt(address debtDestination, address coinDestination, uint rad) external onlyCDPAccess {\\n        debtBalance[debtDestination] = _add(debtBalance[debtDestination], rad);\\n        coinBalance[coinDestination] = _add(coinBalance[coinDestination], rad);\\n        globalUnbackedDebt           = _add(globalUnbackedDebt,   rad);\\n        globalDebt                   = _add(globalDebt,   rad);\\n    }\\n\\n    // --- Rates ---\\n    function updateAccumulatedRate(\\n        bytes32 collateralType,\\n        address surplusDst,\\n        int accumulatedRate\\n    ) external onlyCDPAccess {\\n        require(contractEnabled == 1, \\\"SafeEngine/not-contractEnabled\\\");\\n        CollateralType storage collateralType_ = collateralTypes[collateralType];\\n        collateralType_.accumulatedRate        = _add(collateralType_.accumulatedRate, accumulatedRate);\\n        int deltaSurplus                       = _mul(collateralType_.debtAmount, accumulatedRate);\\n        coinBalance[surplusDst]                = _add(coinBalance[surplusDst], deltaSurplus);\\n        globalDebt                             = _add(globalDebt, deltaSurplus);\\n    }\\n}\\n\",\"keccak256\":\"0x3e829e6a2f5bc0399a13eb508cefd5cdd2c4076ee76d00150869ada334ede76b\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/makerdao/interfaces/ISafeEngine.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// TODO: check how to operate with license and use one for all contracts\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title SafeEngine\\n * @notice The single source of truth for the Maker Protocol. It contains the accounting system of the core Vault,\\n * Internal StablePro balances, and collateral state. It houses the public interface for Vault management,\\n * allowing safe(= CDP or Vault) owners to adjust their Vault state balances. It also contains the public interface\\n * for Vault fungibility, allowing safe (Vault) owners to transfer, split, and merge Vaults.\\n * Excluding these interfaces, SAFEEngine is accessed through trusted smart contract modules.\\n **/\\ninterface ISafeEngine {\\n    /* ==================== EVENTS ==================== */\\n    event DisableContract();\\n\\n    /* ==================== METHODS ==================== */\\n\\n    // --- Data ---\\n    struct CollateralType {\\n        uint256 debtAmount;       // Total debt issued for this specific collateral type                          [wad]\\n        uint256 accumulatedRate;  // Accumulator for interest accrued on this collateral type                     [ray]\\n        uint256 safetyPrice;      // Floor price at which a CDP is allowed to generate debt                       [ray]\\n        uint256 debtCeiling;      // Maximum amount of debt that can be generated with this collateral type       [rad]\\n        uint256 debtFloor;        // Minimum amount of debt that must be generated by a CDP using this collateral [rad]\\n    }\\n    struct SAFE {\\n        uint256 lockedCollateral; // Total amount of collateral locked in a SAFE/CDP  [wad]\\n        uint256 generatedDebt;    // Total amount of debt generated by a SAFE/CDP     [wad]\\n    }\\n\\n    // --- VARS ---\\n\\n    function safes(bytes32, address) external view returns (uint, uint);\\n\\n    function collateralTypes(bytes32) external view returns (\\n        uint256 debtAmount,      // [wad]\\n        uint256 accumulatedRate, // [ray]\\n        uint256 safetyPrice,     // [ray]\\n        uint256 debtCeiling,     // [rad]\\n        uint256 debtFloor        // [rad]\\n    );\\n\\n    function tokenCollateral(bytes32, address) external view returns (uint256);\\n\\n    function coinBalance(address) external view returns (uint256);\\n\\n    function debtBalance(address) external view returns (uint256);\\n\\n    function cdpRights(address, address) external view returns (uint256);\\n\\n    // --- Auth ---\\n    /**\\n     * @notice Allow an address to modify your CDP.\\n     * For example coinAdapter should be able to modify your CDP to withdraw all correctly.\\n     * @param usr Account to give CDP permissions to\\n     */\\n    function approveSAFEModification(address usr) external;\\n\\n    /**\\n     * @notice Deny an address the rights to modify your CDP\\n     * @param usr Account to give CDP permissions to\\n     */\\n    function denySAFEModification(address usr) external;\\n\\n    // --- Administration ---\\n\\n    function initializeCollateralType(bytes32 collateralType) external;\\n    // TODO: check why not to use strings instead of bytes32\\n    /**\\n     * @notice Method to modify some global variables\\n     * @param what - name of variable we want to change\\n     * @param data - new value of this variable\\n     */\\n    function modifyParameters(bytes32 what, uint data) external;\\n    /**\\n     * @notice Method to modify values in struct of collateralTypes\\n     * @param collateralType - collateral type we wand to modify (collateralTypes[collateralType])\\n     * @param what - name of variable in struct we want to change\\n     * @param data - new value of this variable\\n     */\\n    function modifyParameters(bytes32 collateralType, bytes32 what, uint data) external;\\n\\n    // --- Fungibility ---\\n    function modifyCollateralBalance(bytes32 collateralType, address usr, int256 wad) external;\\n    function transferCollateral(bytes32 collateralType, address src, address dst, uint256 wad) external;\\n    function transferInternalCoins(address src, address dst, uint256 rad) external;\\n\\n    // --- CDP Manipulation ---\\n    /**\\n     * @notice Add/remove collateral or put back/generate more debt in a CDP\\n     * @param collateralType Type of collateral to withdraw/deposit in and from the CDP\\n     * @param cdp Target CDP\\n     * @param collateralSource Account we take collateral from/put collateral into\\n     * @param debtDestination Account from which we credit/debit coins and debt\\n     * @param deltaCollateral Amount of collateral added/extract from the CDP\\n     * @param deltaDebt Amount of debt to generate/repay\\n     */\\n    function modifySAFECollateralization(\\n        bytes32 collateralType,\\n        address cdp,\\n        address collateralSource,\\n        address debtDestination,\\n        int deltaCollateral,\\n        int deltaDebt\\n    ) external;\\n\\n    // --- CDP Fungibility ---\\n    /**\\n     * @notice Transfer collateral and/or debt between CDPs\\n     * @param collateralType Collateral type transferred between CDPs\\n     * @param src Source CDP\\n     * @param dst Destination CDP\\n     * @param deltaCollateral Amount of collateral to take/add into src and give/take from dst\\n     * @param deltaDebt Amount of debt to take/add into src and give/take from dst\\n     */\\n    function transferSAFECollateralAndDebt(\\n        bytes32 collateralType,\\n        address src,\\n        address dst,\\n        int deltaCollateral,\\n        int deltaDebt\\n    ) external;\\n\\n    // --- CDP Confiscation ---\\n    /**\\n     * @notice Normally used by the LiquidationEngine in order to confiscate collateral and\\n       debt from a CDP and give them to someone else\\n     * @param collateralType Collateral type the CDP has locked inside\\n     * @param cdp Target CDP\\n     * @param collateralCounterparty Who we take/give collateral to\\n     * @param debtCounterparty Who we take/give debt to\\n     * @param deltaCollateral Amount of collateral taken/added into the CDP\\n     * @param deltaDebt Amount of debt taken/added into the CDP\\n     */\\n    function confiscateSAFECollateralAndDebt(\\n        bytes32 collateralType,\\n        address cdp,\\n        address collateralCounterparty,\\n        address debtCounterparty,\\n        int deltaCollateral,\\n        int deltaDebt\\n    ) external;\\n\\n    // --- Settlement ---\\n    /**\\n     * @notice Nullify an amount of coins with an equal amount of debt\\n     * @param rad Amount of debt & coins to destroy (expressed as a number with 45 decimals)\\n     */\\n    function settleDebt(uint rad) external;\\n\\n    /**\\n     * @notice Usually called by CoinSavingsAccount in order to create unbacked debt\\n     * @param debtDestination Usually AccountingEngine that can settle decreaseSoldAmount with surplus\\n     * @param coinDestination Usually CoinSavingsAccount who passes the new coins to depositors\\n     * @param rad Amount of debt to create (expressed as a number with 45 decimals)\\n     */\\n    function createUnbackedDebt(address debtDestination, address coinDestination, uint rad) external;\\n\\n    // --- Rates ---\\n    /**\\n     * @notice Usually called by TaxCollector in order to accrue interest on a specific collateral type\\n     * @param collateralType Collateral type we accrue interest for\\n     * @param surplusDst Destination for amount of surplus created by applying the interest rate\\n       to debt created by CDPs with 'collateralType'\\n     * @param accumulatedRate Multiplier applied to the debtAmount in order to calculate the surplus\\n     */\\n    function updateAccumulatedRate(bytes32 collateralType, address surplusDst, int accumulatedRate) external;\\n}\\n\",\"keccak256\":\"0x11845dee83c9eff2f02955a03ada14f08538121841c83f8a5ff8f13e874f2a8d\",\"license\":\"UNLICENSED\"},\"contracts/makerdao/utils/Math.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nabstract contract Math {\\n    uint256 constant WAD = 10 ** 18;\\n\\n    /**\\n    * @notice Calculates the sum of an unsigned integer and a signed integer\\n    * @param  x Unsigned integer\\n    * @param  y Signed integer\\n    * @return z Unsigned sum of `x` and `y`\\n    */\\n    function _add(uint x, int y) internal pure returns (uint z) {\\n        if (y >= 0) {\\n            z = x + uint256(y);\\n        } else {\\n            z = x - uint256(-y);\\n        }\\n        require(y >= 0 || z <= x);\\n        require(y <= 0 || z >= x);\\n    }\\n\\n    /**\\n    * @notice Calculates the substraction of an unsigned integer and a signed integer\\n    * @param  x Unsigned integer\\n    * @param  y Signed integer\\n    * @return z Unsigned substraction of `x` and `y`\\n    */\\n    function _sub(uint x, int y) internal pure returns (uint z) {\\n        if (y >= 0) {\\n            z = x - uint256(y);\\n        } else {\\n            z = x + uint256(-y);\\n        }\\n        require(y <= 0 || z <= x);\\n        require(y >= 0 || z >= x);\\n    }\\n    function _mul(uint x, int y) internal pure returns (int z) {\\n        z = int(x) * y;\\n        require(int(x) >= 0);\\n        require(y == 0 || z / y == int(x));\\n    }\\n\\n    function _add(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x + y) >= x);\\n    }\\n    function _sub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) <= x);\\n    }\\n    function _mul(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x);\\n    }\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x <= y ? x : y;\\n    }\\n\\n    function either(bool x, bool y) internal pure returns (bool z) {\\n        assembly{ z := or(x, y)}\\n    }\\n    function both(bool x, bool y) internal pure returns (bool z) {\\n        assembly{ z := and(x, y)}\\n    }\\n}\\n\",\"keccak256\":\"0xcc88ae73c3c41786ae52f22a516bc57dbd66ffb4de9ea42d2344231b3d82dd3f\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/periphery/contracts/access-control/SuAccessRoles.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title SuAccessRoles Library\\n * @dev SuAuthenticated and SuAccessControlSingleton need to have this constants\\n * Hierarchy:\\n *      1. DAO - can give admins and system roles\\n *      2.1. Admin - can set Alerters\\n *      2.2. System - includes Minter, Liquidation, Reward and Disabler roles, don't have access to give some roles.\\n *      3. Alerter - can send alerts and trigger rate limits, don't have access to give some roles.\\n */\\nabstract contract SuAccessRoles {\\n    bytes32 public constant ADMIN_ROLE = 0x00;\\n\\n    bytes32 public constant DAO_ROLE = keccak256(\\\"DAO_ROLE\\\");\\n\\n    bytes32 public constant ALERTER_ROLE = keccak256(\\\"ALERTER_ROLE\\\");\\n\\n    // system roles\\n    bytes32 public constant MINT_ACCESS_ROLE = keccak256(\\\"MINT_ACCESS_ROLE\\\");\\n    bytes32 public constant LIQUIDATION_ACCESS_ROLE = keccak256(\\\"LIQUIDATION_ACCESS_ROLE\\\");\\n    bytes32 public constant REWARD_ACCESS_ROLE = keccak256(\\\"REWARD_ACCESS_ROLE\\\");\\n    bytes32 public constant SYSTEM_ROLE = keccak256(\\\"SYSTEM_ROLE\\\");\\n    bytes32 public constant DISABLER_ROLE = keccak256(\\\"DISABLER_ROLE\\\");\\n    bytes32 public constant CDP_ACCESS_ROLE = keccak256(\\\"CDP_ACCESS_ROLE\\\");\\n}\\n\",\"keccak256\":\"0xd50595d758a48c261b844b1c93de15aca5614e5782e7e5852f32f456f8123e6b\",\"license\":\"BSL 1.1\"},\"contracts/periphery/contracts/access-control/SuAuthenticatedNonUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/access-control/ISuAccessControl.sol\\\";\\nimport \\\"./SuAccessRoles.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title SuAuthenticated\\n * @dev other contracts should inherit to be authenticated.\\n * The address of SuAccessControlSingleton should be one for all contract that inherits SuAuthenticated\\n */\\nabstract contract SuAuthenticatedNonUpgradeable is SuAccessRoles, IERC165 {\\n    ISuAccessControl public ACCESS_CONTROL_SINGLETON;\\n\\n    error OnlyDAOError();\\n    error OnlyAdminError();\\n    error OnlyAlerterError();\\n    error OnlyLiquidationAccessError();\\n    error OnlyMintAccessError();\\n    error OnlyRewardAccessError();\\n    error OnlyDisablerAccessError();\\n    error OnlyRoleError();\\n    error OnlyCDPAccessError();\\n    error BadAccessControlSingleton();\\n\\n    constructor (address _accessControlSingleton) internal {\\n        ACCESS_CONTROL_SINGLETON = ISuAccessControl(_accessControlSingleton);\\n        if (\\n            !ISuAccessControl(_accessControlSingleton).supportsInterface(type(IAccessControlUpgradeable).interfaceId)\\n        ) revert BadAccessControlSingleton();\\n    }\\n\\n    /** CORE ROLES */\\n\\n    modifier onlyDAO() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(DAO_ROLE, msg.sender)) revert OnlyDAOError();\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(ADMIN_ROLE, msg.sender)) revert OnlyAdminError();\\n        _;\\n    }\\n\\n    modifier onlyAlerter() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(ALERTER_ROLE, msg.sender)) revert OnlyAlerterError();\\n        _;\\n    }\\n\\n    /** SYSTEM ROLES */\\n\\n    modifier onlyLiquidationAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(LIQUIDATION_ACCESS_ROLE, msg.sender)) revert OnlyLiquidationAccessError();\\n        _;\\n    }\\n\\n    modifier onlyMintAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(MINT_ACCESS_ROLE, msg.sender)) revert OnlyMintAccessError();\\n        _;\\n    }\\n\\n    modifier onlyRewardAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(REWARD_ACCESS_ROLE, msg.sender)) revert OnlyRewardAccessError();\\n        _;\\n    }\\n\\n    modifier onlyDisablerAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(DISABLER_ROLE, msg.sender)) revert OnlyDisablerAccessError();\\n        _;\\n    }\\n\\n    modifier onlyCDPAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(CDP_ACCESS_ROLE, msg.sender)) revert OnlyCDPAccessError();\\n        _;\\n    }\\n\\n    // syntax sugar under ACCESS_CONTROL_SINGLETON\\n    modifier onlyRole(bytes32 role) {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(role, msg.sender)) revert OnlyRoleError();\\n        _;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return ACCESS_CONTROL_SINGLETON.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x9fb9c4bb40b10fd114174d004a210e94357ea3b056d7224a84e9b43bf2d2a07c\",\"license\":\"BSL 1.1\"},\"contracts/periphery/contracts/interfaces/access-control/ISuAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\nimport \\\"../../access-control/SuAccessRoles.sol\\\";\\n\\n/**\\n * @notice Access control for contracts\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n **/\\ninterface ISuAccessControl is IAccessControlUpgradeable, IERC165Upgradeable {\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\\n}\\n\",\"keccak256\":\"0x25724ac502fd6418ccd38273b276de4b2fdecd023d723c5d80c9f0a27c407bcd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60808060405234620001125760208162001d7c803803809162000023828562000117565b8339810103126200011257516001600160a01b038116908190036200011257600080546001600160a01b031916821781556040516301ffc9a760e01b8152637965db0b60e01b600482015291602090839060249082905afa91821562000105578192620000b9575b505015620000a75760018055604051611c2a9081620001528239f35b6040516384d942fd60e01b8152600490fd5b9091506020813d8211620000fc575b81620000d76020938362000117565b81010312620000f85751908115158203620000f5575038806200008b565b80fd5b5080fd5b3d9150620000c8565b50604051903d90823e3d90fd5b600080fd5b601f909101601f19168101906001600160401b038211908210176200013b57604052565b634e487b7160e01b600052604160045260246000fdfe608080604052600436101561001357600080fd5b60003560e01c90816301ffc9a71461173d5750806303ee9f22146117145780630e9e11d31461162457806311005b07146115ea5780631b142820146114d65780631d2a783d146114b857806327a0bb331461141a5780632efcc866146113fc5780633d422504146113ab57806341b3a0d91461138d578063438280dd14611352578063476bb6ef146111315780634a11825e146110695780634e14a96714610eff5780634e5111a614610e2e5780635e41285814610d2e57806371d0fb4114610cf357806375071d2a14610cb857806375b238fc14610c9c57806376e0b4ca14610c545780638543d5e014610c36578063894ba83314610b745780638e5313e014610b3957806399bec315146106a3578063bd5f5be61461067a578063d07900bb14610622578063d2351cee146105f9578063d49d7867146105b7578063d4b9311d146104b3578063d94d420814610470578063da49bada1461041f578063dc97e84e146103e4578063e9c26518146103a9578063efabcadc1461031e578063fabde80c146102e45763fe4f5890146101ab57600080fd5b346102df5760403660031901126102df5760008054604051632474521560e21b81526004810192909252336024830152602090829060449082906001600160a01b03165afa9081156102d3576000916102a5575b50156102935761021260018054146118ea565b60043570676c6f62616c446562744365696c696e6760781b0361023757602435600a55005b60405162461bcd60e51b815260206004820152602e60248201527f53616665456e67696e652f6d6f64696679506172616d65746572732d756e726560448201526d636f676e697a65642d706172616d60901b6064820152608490fd5b604051631886ea7d60e11b8152600490fd5b6102c6915060203d81116102cc575b6102be81836118af565b8101906118d2565b386101ff565b503d6102b4565b6040513d6000823e3d90fd5b600080fd5b346102df5760203660031901126102df576001600160a01b036103056117c5565b1660005260066020526020604060002054604051908152f35b346102df5761032c36611831565b919061034061033b338461197b565b611936565b6001600160a01b039182166000818152600660205260409020549061036585836119d4565b9182116102df576000526006602052604060002055168060005261038f60406000205492836119e1565b9182106102df576000526006602052604060002055600080f35b346102df5760003660031901126102df5760206040517f3b5d4cc60d3ec3516ee8ae083bd60934f6eb2a6c54b1229985c41bfb092b26038152f35b346102df5760003660031901126102df5760206040517f9a9aef7c1247d5fc769b0185c052913e39673da29a880317dfd20ebf86f26a498152f35b346102df5760403660031901126102df576104386117c5565b6104406117db565b9060018060a01b038091166000526002602052604060002091166000526020526020604060002054604051908152f35b346102df5760203660031901126102df576104896117c5565b33600052600260205260406000209060018060a01b03166000526020526001604060002055600080f35b346102df5760603660031901126102df57600435602435906044359160018060a01b0360005416906040518092632474521560e21b82526000600483015233602483015281604460209586935afa9081156102d35760009161059a575b50156102935761052360018054146118ea565b6a736166657479507269636560a81b810361054b575060039160005252600260406000200155005b6a646562744365696c696e6760a81b8103610576575060039160005252600360406000200155600080f35b683232b13a233637b7b960b91b036102375760039160005252600460406000200155005b6105b19150833d85116102cc576102be81836118af565b85610510565b346102df5760203660031901126102df576105d06117c5565b33600052600260205260406000209060018060a01b031660005260205260006040812055600080f35b346102df5760003660031901126102df576020604051600080516020611bd58339815191528152f35b346102df5760203660031901126102df57600435600052600360205260a06040600020805490600181015490600281015460046003830154920154926040519485526020850152604084015260608301526080820152f35b346102df5760003660031901126102df576020604051600080516020611bb58339815191528152f35b346102df576106b136611866565b906106c4600180979694959754146118ea565b60008581526004602090815260408083206001600160a01b038716845290915290819020815195918601906001600160401b03821187831017610b23576001916040528054875201546020860152856000526003602052604060002096604051978860a081011060018060401b0360a08b011117610b235760a089016040528054895260046001820154918260208c0152600281015460408c0152600381015460608c0152015460808a015215610ad2576107808387516119ee565b86526107908460208801516119ee565b60208701526107a08489516119ee565b88526107b08460208a0151611ac0565b936107c460208a0151602089015190611b63565b906107d1866008546119ee565b806008556107e58b5160208d015190611b63565b60608c0151101590600a5410151660008213151715610a8f576000851215600082131516610819895160408d015190611b63565b831115811715610a545761082d338961197b565b1715610a145761083d338461197b565b600086131517156109d4576000610854338661197b565b9112151715610994576020870151159060808a015111151715610958576108a26108db9388600052600560205260406000209260018060a01b03169283600052602052604060002054611a5f565b9087600052600560205260406000209060005260205260406000205560018060a01b0316918260005260066020526040600020546119ee565b90600052600660205260406000205582600052600460205260406000209060018060a01b031660005260205260016020604060002092805184550151910155600052600360205260046080604060002092805184556020810151600185015560408101516002850155606081015160038501550151910155600080f35b60405162461bcd60e51b815260206004820152601460248201527329b0b332a2b733b4b73297b232b13a233637b7b960611b6044820152606490fd5b60405162461bcd60e51b815260206004820152601860248201527753616665456e67696e652f6e6f742d616c6c6f7765642d7760401b6044820152606490fd5b60405162461bcd60e51b815260206004820152601860248201527729b0b332a2b733b4b73297b737ba16b0b63637bbb2b216bb60411b6044820152606490fd5b60405162461bcd60e51b815260206004820152601860248201527753616665456e67696e652f6e6f742d616c6c6f7765642d7560401b6044820152606490fd5b60405162461bcd60e51b815260206004820152601360248201527253616665456e67696e652f6e6f742d7361666560681b6044820152606490fd5b60405162461bcd60e51b815260206004820152601b60248201527a14d85999515b99da5b994bd8d95a5b1a5b99cb595e18d959591959602a1b6044820152606490fd5b60405162461bcd60e51b815260206004820152602360248201527f53616665456e67696e652f636f6c6c61746572616c2d747970652d6e6f742d696044820152621b9a5d60ea1b6064820152608490fd5b634e487b7160e01b600052604160045260246000fd5b346102df5760003660031901126102df5760206040517fe453bacb314e78dcd5192e6b1a2b1f0e7c76e92f6b7e429a6a90f04e39db3b768152f35b346102df5760003660031901126102df57600054604051632474521560e21b8152600080516020611bd5833981519152600482015233602482015290602090829060449082906001600160a01b03165afa9081156102d357600091610c18575b5015610c065760006001557f2d4b4ecff7bd7503135271925520a2f6c0d98c9473ffc1a1e72c92502f51b25e600080a1005b60405163bb0684b760e01b8152600490fd5b610c30915060203d81116102cc576102be81836118af565b81610bd4565b346102df5760003660031901126102df576020600854604051908152f35b346102df5760403660031901126102df57610c6d6117db565b600435600052600560205260406000209060018060a01b03166000526020526020604060002054604051908152f35b346102df5760003660031901126102df57602060405160008152f35b346102df5760003660031901126102df5760206040517f5719df9ef2c4678b547f89e4f5ae410dbf400fc51cf3ded434c55f6adea2c43f8152f35b346102df5760003660031901126102df5760206040517f880a91047114272656e533301261260c75e4d11543ac7303d6fe4204579ec7278152f35b346102df576020806003193601126102df576004359060448160018060a01b036000541660405192838092632474521560e21b8252600060048301523360248301525afa9081156102d357600091610e11575b5015610293578160005260038152600160406000200154610dbd5760039160005252676765c793fa10079d601b1b600160406000200155600080f35b6084906040519062461bcd60e51b82526004820152602760248201527f53616665456e67696e652f636f6c6c61746572616c2d747970652d616c726561604482015266191e4b5a5b9a5d60ca1b6064820152fd5b610e289150823d84116102cc576102be81836118af565b83610d81565b346102df5760803660031901126102df57600435610e4a6117db565b610e526117f1565b9060643592610e6461033b338461197b565b60008181526005602090815260408083206001600160a01b03958616808552908352922054909391610e9687836119d4565b9182116102df578360005260058552604060002090600052845260406000205581600052600583526040600020931692836000528252610edc60406000205494856119e1565b9384106102df576000526005815260406000209160005252604060002055600080f35b346102df57610f0d36611866565b9490939160018060a01b03918260005416946040518096632474521560e21b8252600080516020611bb583398151915260048301523360248301528160446020998a935afa9081156102d35760009161104c575b501561103a57610ff1610fce611035996007978560005260048a528760406000209116600052895260018a8160406000208860005260038d52610faa60406000209382546119ee565b815501610fb88482546119ee565b9055610fc58382546119ee565b81550154611ac0565b978360005260058852856040600020931692836000528852604060002054611a5f565b9160005260058652604060002090600052855260406000205516918260005281815261102284604060002054611a5f565b9260005252604060002055600954611a5f565b600955005b604051635e9e090760e01b8152600490fd5b6110639150873d89116102cc576102be81836118af565b89610f61565b346102df5761107736611807565b600054604051632474521560e21b8152600080516020611bb583398151915260048201523360248201526020926001600160a01b039290919084908290604490829087165afa9081156102d357600091611114575b501561103a576110f791856000526005845260406000209416938460005283526040600020546119ee565b926000526005815260406000209160005252604060002055600080f35b61112b9150843d86116102cc576102be81836118af565b866110cc565b346102df5760a03660031901126102df5760043561114d6117db565b6111556117f1565b60008381526004602090815260408083206001600160a01b0386811685529083528184209085168452818420968452600383529220825491959293608435939092606435906111a5908290611a5f565b86556111d460016111c7818901936111be898654611a5f565b855585546119ee565b93848155019586546119ee565b809555549461121260018401549461120c6112046111fc6111f5898c611b63565b988a611b63565b9a339061197b565b91339061197b565b16611936565b549061122360028401548093611b63565b8411611313579061123391611b63565b85116112d4576004015480931591101517156112945715911015171561125557005b6064906040519062461bcd60e51b82526004820152601860248201527714d85999515b99da5b994bd919589d119b1bdbdc8b591cdd60421b6044820152fd5b60405162461bcd60e51b815260048101859052601860248201527753616665456e67696e652f64656274466c6f6f722d73726360401b6044820152606490fd5b60405162461bcd60e51b815260048101879052601760248201527614d85999515b99da5b994bdb9bdd0b5cd859994b591cdd604a1b6044820152606490fd5b60405162461bcd60e51b815260048101899052601760248201527653616665456e67696e652f6e6f742d736166652d73726360481b6044820152606490fd5b346102df5760003660031901126102df5760206040517f39f61ca2a1a28fee144218173ec637b649a353e4026b2738c673800e5bf1437b8152f35b346102df5760003660031901126102df576020600154604051908152f35b346102df5760403660031901126102df576113c46117db565b600435600052600460205260406000209060018060a01b03166000526020526040806000206001815491015482519182526020820152f35b346102df5760003660031901126102df576020600a54604051908152f35b346102df5760203660031901126102df5760043533600052600760205260406000205461144782826119d4565b9081116102df57336000526007602052604060002055600660205260406000205461147282826119d4565b9081116102df5733600052600660205260406000205560095461149582826119d4565b9081116102df576009556114ac60085491826119d4565b9081116102df57600855005b346102df5760003660031901126102df576020600954604051908152f35b346102df576114e436611831565b600054604051632474521560e21b8152600080516020611bb5833981519152600482015233602482015291936020936001600160a01b0393909285908290604490829088165afa9081156102d3576000916115cd575b501561103a57821680600052600784526040600020549061155b86836119e1565b9182106102df57600052600784526040600020551680600052600682526040600020549161158984846119e1565b9283106102df57600691600052526040600020556009546115aa82826119e1565b9081106102df576009556115c160085491826119e1565b9081106102df57600855005b6115e49150853d87116102cc576102be81836118af565b8661153a565b346102df5760203660031901126102df576001600160a01b0361160b6117c5565b1660005260076020526020604060002054604051908152f35b346102df5761163236611807565b600054604051632474521560e21b8152600080516020611bb58339815191526004820152336024820152602092916001600160a01b03919084908290604490829086165afa9081156102d3576000916116f7575b501561103a576116c66006926116f2966116a360018054146118ea565b600052600385526040600020600181016116be8382546119ee565b905554611ac0565b931691826000528181526116df846040600020546119ee565b92600052526040600020556008546119ee565b600855005b61170e9150843d86116102cc576102be81836118af565b86611686565b346102df5760003660031901126102df576000546040516001600160a01b039091168152602090f35b346102df5760203660031901126102df5760043563ffffffff60e01b81168091036102df576000546301ffc9a760e01b83526004830191909152602090829060249082906001600160a01b03165afa80156102d3576020916000916117a8575b506040519015158152f35b6117bf9150823d81116102cc576102be81836118af565b8261179d565b600435906001600160a01b03821682036102df57565b602435906001600160a01b03821682036102df57565b604435906001600160a01b03821682036102df57565b60609060031901126102df57600435906024356001600160a01b03811681036102df579060443590565b60609060031901126102df576001600160a01b039060043582811681036102df579160243590811681036102df579060443590565b60c09060031901126102df57600435906001600160a01b0360243581811681036102df579160443582811681036102df579160643590811681036102df57906084359060a43590565b601f909101601f19168101906001600160401b03821190821017610b2357604052565b908160209103126102df575180151581036102df5790565b156118f157565b60405162461bcd60e51b815260206004820152601e60248201527f53616665456e67696e652f6e6f742d636f6e7472616374456e61626c656400006044820152606490fd5b1561193d57565b60405162461bcd60e51b815260206004820152601660248201527514d85999515b99da5b994bdb9bdd0b585b1b1bddd95960521b6044820152606490fd5b9060018060a01b0380911691169081600052600260205260406000208160005260205260016040600020541491141790565b600160ff1b81146119be5760000390565b634e487b7160e01b600052601160045260246000fd5b919082039182116119be57565b919082018092116119be57565b6000808312801594939192919080611a4757611a0a82846119e1565b955b90611a3d575b15611a3957821290811591611a2e575b5015611a2b5750565b80fd5b905083101538611a22565b8280fd5b5081851115611a12565b611a59611a53836119ad565b846119d4565b95611a0c565b90919060009081841290811582611aa75783611a7b87846119d4565b965b13801590611a9d575b15611a995791611a2e575015611a2b5750565b8380fd5b5081861115611a86565b83611aba611ab4886119ad565b846119e1565b96611a7d565b600080821293929091600160ff1b918082028382148716611b4f57828105821483151715611b4f578096611b4b578115938415611b04575b5050505015611a2b5750565b90919293611b37578114600019831416611b2357051438808080611af8565b634e487b7160e01b84526011600452602484fd5b634e487b7160e01b85526012600452602485fd5b8480fd5b634e487b7160e01b85526011600452602485fd5b6000929183918115918215611b7d575b505015611a2b5750565b81819293965002828104821483151715611b23578095611ba05704143880611b73565b634e487b7160e01b84526012600452602484fdfe4f14c8366fa999817edc9f29824eb88a00cc31225e2156f399da4bc91049eb10b0fdd1623e42dbffda4acd8bd643e1cb69f00f0e83abeaa8150ee42cf0fd105ea2646970667358221220fbc65d65b46aaa15d2378c0f3dec74365a8c66962bb80589ea311ed237ce0f8e64736f6c63430008110033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b60003560e01c90816301ffc9a71461173d5750806303ee9f22146117145780630e9e11d31461162457806311005b07146115ea5780631b142820146114d65780631d2a783d146114b857806327a0bb331461141a5780632efcc866146113fc5780633d422504146113ab57806341b3a0d91461138d578063438280dd14611352578063476bb6ef146111315780634a11825e146110695780634e14a96714610eff5780634e5111a614610e2e5780635e41285814610d2e57806371d0fb4114610cf357806375071d2a14610cb857806375b238fc14610c9c57806376e0b4ca14610c545780638543d5e014610c36578063894ba83314610b745780638e5313e014610b3957806399bec315146106a3578063bd5f5be61461067a578063d07900bb14610622578063d2351cee146105f9578063d49d7867146105b7578063d4b9311d146104b3578063d94d420814610470578063da49bada1461041f578063dc97e84e146103e4578063e9c26518146103a9578063efabcadc1461031e578063fabde80c146102e45763fe4f5890146101ab57600080fd5b346102df5760403660031901126102df5760008054604051632474521560e21b81526004810192909252336024830152602090829060449082906001600160a01b03165afa9081156102d3576000916102a5575b50156102935761021260018054146118ea565b60043570676c6f62616c446562744365696c696e6760781b0361023757602435600a55005b60405162461bcd60e51b815260206004820152602e60248201527f53616665456e67696e652f6d6f64696679506172616d65746572732d756e726560448201526d636f676e697a65642d706172616d60901b6064820152608490fd5b604051631886ea7d60e11b8152600490fd5b6102c6915060203d81116102cc575b6102be81836118af565b8101906118d2565b386101ff565b503d6102b4565b6040513d6000823e3d90fd5b600080fd5b346102df5760203660031901126102df576001600160a01b036103056117c5565b1660005260066020526020604060002054604051908152f35b346102df5761032c36611831565b919061034061033b338461197b565b611936565b6001600160a01b039182166000818152600660205260409020549061036585836119d4565b9182116102df576000526006602052604060002055168060005261038f60406000205492836119e1565b9182106102df576000526006602052604060002055600080f35b346102df5760003660031901126102df5760206040517f3b5d4cc60d3ec3516ee8ae083bd60934f6eb2a6c54b1229985c41bfb092b26038152f35b346102df5760003660031901126102df5760206040517f9a9aef7c1247d5fc769b0185c052913e39673da29a880317dfd20ebf86f26a498152f35b346102df5760403660031901126102df576104386117c5565b6104406117db565b9060018060a01b038091166000526002602052604060002091166000526020526020604060002054604051908152f35b346102df5760203660031901126102df576104896117c5565b33600052600260205260406000209060018060a01b03166000526020526001604060002055600080f35b346102df5760603660031901126102df57600435602435906044359160018060a01b0360005416906040518092632474521560e21b82526000600483015233602483015281604460209586935afa9081156102d35760009161059a575b50156102935761052360018054146118ea565b6a736166657479507269636560a81b810361054b575060039160005252600260406000200155005b6a646562744365696c696e6760a81b8103610576575060039160005252600360406000200155600080f35b683232b13a233637b7b960b91b036102375760039160005252600460406000200155005b6105b19150833d85116102cc576102be81836118af565b85610510565b346102df5760203660031901126102df576105d06117c5565b33600052600260205260406000209060018060a01b031660005260205260006040812055600080f35b346102df5760003660031901126102df576020604051600080516020611bd58339815191528152f35b346102df5760203660031901126102df57600435600052600360205260a06040600020805490600181015490600281015460046003830154920154926040519485526020850152604084015260608301526080820152f35b346102df5760003660031901126102df576020604051600080516020611bb58339815191528152f35b346102df576106b136611866565b906106c4600180979694959754146118ea565b60008581526004602090815260408083206001600160a01b038716845290915290819020815195918601906001600160401b03821187831017610b23576001916040528054875201546020860152856000526003602052604060002096604051978860a081011060018060401b0360a08b011117610b235760a089016040528054895260046001820154918260208c0152600281015460408c0152600381015460608c0152015460808a015215610ad2576107808387516119ee565b86526107908460208801516119ee565b60208701526107a08489516119ee565b88526107b08460208a0151611ac0565b936107c460208a0151602089015190611b63565b906107d1866008546119ee565b806008556107e58b5160208d015190611b63565b60608c0151101590600a5410151660008213151715610a8f576000851215600082131516610819895160408d015190611b63565b831115811715610a545761082d338961197b565b1715610a145761083d338461197b565b600086131517156109d4576000610854338661197b565b9112151715610994576020870151159060808a015111151715610958576108a26108db9388600052600560205260406000209260018060a01b03169283600052602052604060002054611a5f565b9087600052600560205260406000209060005260205260406000205560018060a01b0316918260005260066020526040600020546119ee565b90600052600660205260406000205582600052600460205260406000209060018060a01b031660005260205260016020604060002092805184550151910155600052600360205260046080604060002092805184556020810151600185015560408101516002850155606081015160038501550151910155600080f35b60405162461bcd60e51b815260206004820152601460248201527329b0b332a2b733b4b73297b232b13a233637b7b960611b6044820152606490fd5b60405162461bcd60e51b815260206004820152601860248201527753616665456e67696e652f6e6f742d616c6c6f7765642d7760401b6044820152606490fd5b60405162461bcd60e51b815260206004820152601860248201527729b0b332a2b733b4b73297b737ba16b0b63637bbb2b216bb60411b6044820152606490fd5b60405162461bcd60e51b815260206004820152601860248201527753616665456e67696e652f6e6f742d616c6c6f7765642d7560401b6044820152606490fd5b60405162461bcd60e51b815260206004820152601360248201527253616665456e67696e652f6e6f742d7361666560681b6044820152606490fd5b60405162461bcd60e51b815260206004820152601b60248201527a14d85999515b99da5b994bd8d95a5b1a5b99cb595e18d959591959602a1b6044820152606490fd5b60405162461bcd60e51b815260206004820152602360248201527f53616665456e67696e652f636f6c6c61746572616c2d747970652d6e6f742d696044820152621b9a5d60ea1b6064820152608490fd5b634e487b7160e01b600052604160045260246000fd5b346102df5760003660031901126102df5760206040517fe453bacb314e78dcd5192e6b1a2b1f0e7c76e92f6b7e429a6a90f04e39db3b768152f35b346102df5760003660031901126102df57600054604051632474521560e21b8152600080516020611bd5833981519152600482015233602482015290602090829060449082906001600160a01b03165afa9081156102d357600091610c18575b5015610c065760006001557f2d4b4ecff7bd7503135271925520a2f6c0d98c9473ffc1a1e72c92502f51b25e600080a1005b60405163bb0684b760e01b8152600490fd5b610c30915060203d81116102cc576102be81836118af565b81610bd4565b346102df5760003660031901126102df576020600854604051908152f35b346102df5760403660031901126102df57610c6d6117db565b600435600052600560205260406000209060018060a01b03166000526020526020604060002054604051908152f35b346102df5760003660031901126102df57602060405160008152f35b346102df5760003660031901126102df5760206040517f5719df9ef2c4678b547f89e4f5ae410dbf400fc51cf3ded434c55f6adea2c43f8152f35b346102df5760003660031901126102df5760206040517f880a91047114272656e533301261260c75e4d11543ac7303d6fe4204579ec7278152f35b346102df576020806003193601126102df576004359060448160018060a01b036000541660405192838092632474521560e21b8252600060048301523360248301525afa9081156102d357600091610e11575b5015610293578160005260038152600160406000200154610dbd5760039160005252676765c793fa10079d601b1b600160406000200155600080f35b6084906040519062461bcd60e51b82526004820152602760248201527f53616665456e67696e652f636f6c6c61746572616c2d747970652d616c726561604482015266191e4b5a5b9a5d60ca1b6064820152fd5b610e289150823d84116102cc576102be81836118af565b83610d81565b346102df5760803660031901126102df57600435610e4a6117db565b610e526117f1565b9060643592610e6461033b338461197b565b60008181526005602090815260408083206001600160a01b03958616808552908352922054909391610e9687836119d4565b9182116102df578360005260058552604060002090600052845260406000205581600052600583526040600020931692836000528252610edc60406000205494856119e1565b9384106102df576000526005815260406000209160005252604060002055600080f35b346102df57610f0d36611866565b9490939160018060a01b03918260005416946040518096632474521560e21b8252600080516020611bb583398151915260048301523360248301528160446020998a935afa9081156102d35760009161104c575b501561103a57610ff1610fce611035996007978560005260048a528760406000209116600052895260018a8160406000208860005260038d52610faa60406000209382546119ee565b815501610fb88482546119ee565b9055610fc58382546119ee565b81550154611ac0565b978360005260058852856040600020931692836000528852604060002054611a5f565b9160005260058652604060002090600052855260406000205516918260005281815261102284604060002054611a5f565b9260005252604060002055600954611a5f565b600955005b604051635e9e090760e01b8152600490fd5b6110639150873d89116102cc576102be81836118af565b89610f61565b346102df5761107736611807565b600054604051632474521560e21b8152600080516020611bb583398151915260048201523360248201526020926001600160a01b039290919084908290604490829087165afa9081156102d357600091611114575b501561103a576110f791856000526005845260406000209416938460005283526040600020546119ee565b926000526005815260406000209160005252604060002055600080f35b61112b9150843d86116102cc576102be81836118af565b866110cc565b346102df5760a03660031901126102df5760043561114d6117db565b6111556117f1565b60008381526004602090815260408083206001600160a01b0386811685529083528184209085168452818420968452600383529220825491959293608435939092606435906111a5908290611a5f565b86556111d460016111c7818901936111be898654611a5f565b855585546119ee565b93848155019586546119ee565b809555549461121260018401549461120c6112046111fc6111f5898c611b63565b988a611b63565b9a339061197b565b91339061197b565b16611936565b549061122360028401548093611b63565b8411611313579061123391611b63565b85116112d4576004015480931591101517156112945715911015171561125557005b6064906040519062461bcd60e51b82526004820152601860248201527714d85999515b99da5b994bd919589d119b1bdbdc8b591cdd60421b6044820152fd5b60405162461bcd60e51b815260048101859052601860248201527753616665456e67696e652f64656274466c6f6f722d73726360401b6044820152606490fd5b60405162461bcd60e51b815260048101879052601760248201527614d85999515b99da5b994bdb9bdd0b5cd859994b591cdd604a1b6044820152606490fd5b60405162461bcd60e51b815260048101899052601760248201527653616665456e67696e652f6e6f742d736166652d73726360481b6044820152606490fd5b346102df5760003660031901126102df5760206040517f39f61ca2a1a28fee144218173ec637b649a353e4026b2738c673800e5bf1437b8152f35b346102df5760003660031901126102df576020600154604051908152f35b346102df5760403660031901126102df576113c46117db565b600435600052600460205260406000209060018060a01b03166000526020526040806000206001815491015482519182526020820152f35b346102df5760003660031901126102df576020600a54604051908152f35b346102df5760203660031901126102df5760043533600052600760205260406000205461144782826119d4565b9081116102df57336000526007602052604060002055600660205260406000205461147282826119d4565b9081116102df5733600052600660205260406000205560095461149582826119d4565b9081116102df576009556114ac60085491826119d4565b9081116102df57600855005b346102df5760003660031901126102df576020600954604051908152f35b346102df576114e436611831565b600054604051632474521560e21b8152600080516020611bb5833981519152600482015233602482015291936020936001600160a01b0393909285908290604490829088165afa9081156102d3576000916115cd575b501561103a57821680600052600784526040600020549061155b86836119e1565b9182106102df57600052600784526040600020551680600052600682526040600020549161158984846119e1565b9283106102df57600691600052526040600020556009546115aa82826119e1565b9081106102df576009556115c160085491826119e1565b9081106102df57600855005b6115e49150853d87116102cc576102be81836118af565b8661153a565b346102df5760203660031901126102df576001600160a01b0361160b6117c5565b1660005260076020526020604060002054604051908152f35b346102df5761163236611807565b600054604051632474521560e21b8152600080516020611bb58339815191526004820152336024820152602092916001600160a01b03919084908290604490829086165afa9081156102d3576000916116f7575b501561103a576116c66006926116f2966116a360018054146118ea565b600052600385526040600020600181016116be8382546119ee565b905554611ac0565b931691826000528181526116df846040600020546119ee565b92600052526040600020556008546119ee565b600855005b61170e9150843d86116102cc576102be81836118af565b86611686565b346102df5760003660031901126102df576000546040516001600160a01b039091168152602090f35b346102df5760203660031901126102df5760043563ffffffff60e01b81168091036102df576000546301ffc9a760e01b83526004830191909152602090829060249082906001600160a01b03165afa80156102d3576020916000916117a8575b506040519015158152f35b6117bf9150823d81116102cc576102be81836118af565b8261179d565b600435906001600160a01b03821682036102df57565b602435906001600160a01b03821682036102df57565b604435906001600160a01b03821682036102df57565b60609060031901126102df57600435906024356001600160a01b03811681036102df579060443590565b60609060031901126102df576001600160a01b039060043582811681036102df579160243590811681036102df579060443590565b60c09060031901126102df57600435906001600160a01b0360243581811681036102df579160443582811681036102df579160643590811681036102df57906084359060a43590565b601f909101601f19168101906001600160401b03821190821017610b2357604052565b908160209103126102df575180151581036102df5790565b156118f157565b60405162461bcd60e51b815260206004820152601e60248201527f53616665456e67696e652f6e6f742d636f6e7472616374456e61626c656400006044820152606490fd5b1561193d57565b60405162461bcd60e51b815260206004820152601660248201527514d85999515b99da5b994bdb9bdd0b585b1b1bddd95960521b6044820152606490fd5b9060018060a01b0380911691169081600052600260205260406000208160005260205260016040600020541491141790565b600160ff1b81146119be5760000390565b634e487b7160e01b600052601160045260246000fd5b919082039182116119be57565b919082018092116119be57565b6000808312801594939192919080611a4757611a0a82846119e1565b955b90611a3d575b15611a3957821290811591611a2e575b5015611a2b5750565b80fd5b905083101538611a22565b8280fd5b5081851115611a12565b611a59611a53836119ad565b846119d4565b95611a0c565b90919060009081841290811582611aa75783611a7b87846119d4565b965b13801590611a9d575b15611a995791611a2e575015611a2b5750565b8380fd5b5081861115611a86565b83611aba611ab4886119ad565b846119e1565b96611a7d565b600080821293929091600160ff1b918082028382148716611b4f57828105821483151715611b4f578096611b4b578115938415611b04575b5050505015611a2b5750565b90919293611b37578114600019831416611b2357051438808080611af8565b634e487b7160e01b84526011600452602484fd5b634e487b7160e01b85526012600452602485fd5b8480fd5b634e487b7160e01b85526011600452602485fd5b6000929183918115918215611b7d575b505015611a2b5750565b81819293965002828104821483151715611b23578095611ba05704143880611b73565b634e487b7160e01b84526012600452602484fdfe4f14c8366fa999817edc9f29824eb88a00cc31225e2156f399da4bc91049eb10b0fdd1623e42dbffda4acd8bd643e1cb69f00f0e83abeaa8150ee42cf0fd105ea2646970667358221220fbc65d65b46aaa15d2378c0f3dec74365a8c66962bb80589ea311ed237ce0f8e64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approveSAFEModification(address)": {
        "params": {
          "usr": "Account to give CDP permissions to"
        }
      },
      "confiscateSAFECollateralAndDebt(bytes32,address,address,address,int256,int256)": {
        "params": {
          "cdp": "Target CDP",
          "collateralCounterparty": "Who we take/give collateral to",
          "collateralType": "Collateral type the CDP has locked inside",
          "debtCounterparty": "Who we take/give debt to",
          "deltaCollateral": "Amount of collateral taken/added into the CDP",
          "deltaDebt": "Amount of debt taken/added into the CDP"
        }
      },
      "createUnbackedDebt(address,address,uint256)": {
        "params": {
          "coinDestination": "Usually CoinSavingsAccount who passes the new coins to depositors",
          "debtDestination": "Usually AccountingEngine that can settle decreaseSoldAmount with surplus",
          "rad": "Amount of debt to create (expressed as a number with 45 decimals)"
        }
      },
      "denySAFEModification(address)": {
        "params": {
          "usr": "Account to give CDP permissions to"
        }
      },
      "modifyParameters(bytes32,bytes32,uint256)": {
        "params": {
          "collateralType": "- collateral type we wand to modify (collateralTypes[collateralType])",
          "data": "- new value of this variable",
          "what": "- name of variable in struct we want to change"
        }
      },
      "modifyParameters(bytes32,uint256)": {
        "params": {
          "data": "- new value of this variable",
          "what": "- name of variable we want to change"
        }
      },
      "modifySAFECollateralization(bytes32,address,address,address,int256,int256)": {
        "params": {
          "cdp": "Target CDP",
          "collateralSource": "Account we take collateral from/put collateral into",
          "collateralType": "Type of collateral to withdraw/deposit in and from the CDP",
          "debtDestination": "Account from which we credit/debit coins and debt",
          "deltaCollateral": "Amount of collateral added/extract from the CDP",
          "deltaDebt": "Amount of debt to generate/repay"
        }
      },
      "settleDebt(uint256)": {
        "params": {
          "rad": "Amount of debt & coins to destroy (expressed as a number with 45 decimals)"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      },
      "transferSAFECollateralAndDebt(bytes32,address,address,int256,int256)": {
        "params": {
          "collateralType": "Collateral type transferred between CDPs",
          "deltaCollateral": "Amount of collateral to take/add into src and give/take from dst",
          "deltaDebt": "Amount of debt to take/add into src and give/take from dst",
          "dst": "Destination CDP",
          "src": "Source CDP"
        }
      },
      "updateAccumulatedRate(bytes32,address,int256)": {
        "params": {
          "accumulatedRate": "Multiplier applied to the debtAmount in order to calculate the surplus",
          "collateralType": "Collateral type we accrue interest for",
          "surplusDst": "Destination for amount of surplus created by applying the interest rate to debt created by CDPs with 'collateralType'"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approveSAFEModification(address)": {
        "notice": "Allow an address to modify your CDP. For example coinAdapter should be able to modify your CDP to withdraw all correctly."
      },
      "collateralTypes(bytes32)": {
        "notice": "Total User Debt (drawn StablePro + stability fee accrued) = SAFE.generatedDebt * CollateralType.accumulatedRate"
      },
      "confiscateSAFECollateralAndDebt(bytes32,address,address,address,int256,int256)": {
        "notice": "Normally used by the LiquidationEngine in order to confiscate collateral and debt from a CDP and give them to someone else"
      },
      "createUnbackedDebt(address,address,uint256)": {
        "notice": "Usually called by CoinSavingsAccount in order to create unbacked debt"
      },
      "denySAFEModification(address)": {
        "notice": "Deny an address the rights to modify your CDP"
      },
      "modifyParameters(bytes32,bytes32,uint256)": {
        "notice": "Method to modify values in struct of collateralTypes"
      },
      "modifyParameters(bytes32,uint256)": {
        "notice": "Method to modify some global variables"
      },
      "modifySAFECollateralization(bytes32,address,address,address,int256,int256)": {
        "notice": "Add/remove collateral or put back/generate more debt in a CDP"
      },
      "settleDebt(uint256)": {
        "notice": "Nullify an amount of coins with an equal amount of debt"
      },
      "transferSAFECollateralAndDebt(bytes32,address,address,int256,int256)": {
        "notice": "Transfer collateral and/or debt between CDPs"
      },
      "updateAccumulatedRate(bytes32,address,int256)": {
        "notice": "Usually called by TaxCollector in order to accrue interest on a specific collateral type"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10177,
        "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
        "label": "ACCESS_CONTROL_SINGLETON",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ISuAccessControl)10394"
      },
      {
        "astId": 4504,
        "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
        "label": "contractEnabled",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 4523,
        "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
        "label": "cdpRights",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 4582,
        "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
        "label": "collateralTypes",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_struct(CollateralType)9349_storage)"
      },
      {
        "astId": 4589,
        "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
        "label": "safes",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_struct(SAFE)9354_storage))"
      },
      {
        "astId": 4595,
        "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
        "label": "tokenCollateral",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 4599,
        "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
        "label": "coinBalance",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4603,
        "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
        "label": "debtBalance",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4605,
        "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
        "label": "globalDebt",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 4607,
        "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
        "label": "globalUnbackedDebt",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 4609,
        "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
        "label": "globalDebtCeiling",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ISuAccessControl)10394": {
        "encoding": "inplace",
        "label": "contract ISuAccessControl",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(SAFE)9354_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ISafeEngine.SAFE)",
        "numberOfBytes": "32",
        "value": "t_struct(SAFE)9354_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_struct(SAFE)9354_storage))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => struct ISafeEngine.SAFE))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(SAFE)9354_storage)"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_bytes32,t_struct(CollateralType)9349_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct ISafeEngine.CollateralType)",
        "numberOfBytes": "32",
        "value": "t_struct(CollateralType)9349_storage"
      },
      "t_struct(CollateralType)9349_storage": {
        "encoding": "inplace",
        "label": "struct ISafeEngine.CollateralType",
        "members": [
          {
            "astId": 9340,
            "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
            "label": "debtAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9342,
            "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
            "label": "accumulatedRate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9344,
            "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
            "label": "safetyPrice",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9346,
            "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
            "label": "debtCeiling",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 9348,
            "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
            "label": "debtFloor",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(SAFE)9354_storage": {
        "encoding": "inplace",
        "label": "struct ISafeEngine.SAFE",
        "members": [
          {
            "astId": 9351,
            "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
            "label": "lockedCollateral",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9353,
            "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
            "label": "generatedDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}