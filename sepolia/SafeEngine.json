{
  "address": "0xA331E4D8371a467ce50260cc371693d890cCBE5C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "accessControl",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "BadAccessControlSingleton",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAdminError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAlerterError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyCDPAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyDAOError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyDisablerAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyLiquidationAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyMintAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyRewardAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyRoleError",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "DisableContract",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACCESS_CONTROL_SINGLETON",
      "outputs": [
        {
          "internalType": "contract ISuAccessControl",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ALERTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CDP_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DAO_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DISABLER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIQUIDATION_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINT_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ORACLE",
      "outputs": [
        {
          "internalType": "contract ISuOracleAggregator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARD_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VOTING_ESCROW_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "usr",
          "type": "address"
        }
      ],
      "name": "approveSAFEModification",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "cdpRights",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "coinBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "collateralTypes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "debtAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accumulatedRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "debtCeiling",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "debtFloor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "safetyPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidationRatio",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "collateralAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "safetyPriceBlockNumber",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "cdp",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "collateralCounterparty",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "debtCounterparty",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "deltaCollateral",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "deltaDebt",
          "type": "int256"
        }
      ],
      "name": "confiscateSAFECollateralAndDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractEnabled",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "debtDestination",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "coinDestination",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rad",
          "type": "uint256"
        }
      ],
      "name": "createUnbackedDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "debtBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultLiquidationRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "usr",
          "type": "address"
        }
      ],
      "name": "denySAFEModification",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disableContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "globalDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "globalDebtCeiling",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "globalUnbackedDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "collateralAddress",
          "type": "address"
        }
      ],
      "name": "initializeCollateralType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "usr",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "wad",
          "type": "int256"
        }
      ],
      "name": "modifyCollateralBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "what",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "data",
          "type": "uint256"
        }
      ],
      "name": "modifyParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "what",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "data",
          "type": "uint256"
        }
      ],
      "name": "modifyParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "cdp",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "collateralSource",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "debtDestination",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "deltaCollateral",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "deltaDebt",
          "type": "int256"
        }
      ],
      "name": "modifySAFECollateralization",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redemptionPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "safes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lockedCollateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "generatedDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "safetyPriceValidBlockAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rad",
          "type": "uint256"
        }
      ],
      "name": "settleDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "transferCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rad",
          "type": "uint256"
        }
      ],
      "name": "transferInternalCoins",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "deltaCollateral",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "deltaDebt",
          "type": "int256"
        }
      ],
      "name": "transferSAFECollateralAndDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "surplusDst",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "accumulatedRate",
          "type": "int256"
        }
      ],
      "name": "updateAccumulatedRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        }
      ],
      "name": "updateSafetyPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "numDeployments": 3,
  "solcInputHash": "bf39d1579cb15455a9583613f66e6945",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"accessControl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BadAccessControlSingleton\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAdminError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAlerterError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyCDPAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyDAOError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyDisablerAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyLiquidationAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyMintAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRewardAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRoleError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DisableContract\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACCESS_CONTROL_SINGLETON\",\"outputs\":[{\"internalType\":\"contract ISuAccessControl\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ALERTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CDP_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAO_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DISABLER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDATION_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ORACLE\",\"outputs\":[{\"internalType\":\"contract ISuOracleAggregator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VOTING_ESCROW_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"approveSAFEModification\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cdpRights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"coinBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"collateralTypes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"debtAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accumulatedRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtCeiling\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtFloor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"safetyPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationRatio\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collateralAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"safetyPriceBlockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"cdp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralCounterparty\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"debtCounterparty\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"deltaCollateral\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"deltaDebt\",\"type\":\"int256\"}],\"name\":\"confiscateSAFECollateralAndDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractEnabled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"debtDestination\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"coinDestination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rad\",\"type\":\"uint256\"}],\"name\":\"createUnbackedDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"debtBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultLiquidationRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"denySAFEModification\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalDebtCeiling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalUnbackedDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"collateralAddress\",\"type\":\"address\"}],\"name\":\"initializeCollateralType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"wad\",\"type\":\"int256\"}],\"name\":\"modifyCollateralBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"cdp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralSource\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"debtDestination\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"deltaCollateral\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"deltaDebt\",\"type\":\"int256\"}],\"name\":\"modifySAFECollateralization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redemptionPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"safes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockedCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"generatedDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safetyPriceValidBlockAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rad\",\"type\":\"uint256\"}],\"name\":\"settleDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transferCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rad\",\"type\":\"uint256\"}],\"name\":\"transferInternalCoins\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"deltaCollateral\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"deltaDebt\",\"type\":\"int256\"}],\"name\":\"transferSAFECollateralAndDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"surplusDst\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"accumulatedRate\",\"type\":\"int256\"}],\"name\":\"updateAccumulatedRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"}],\"name\":\"updateSafetyPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approveSAFEModification(address)\":{\"params\":{\"usr\":\"Account to give CDP permissions to\"}},\"confiscateSAFECollateralAndDebt(bytes32,address,address,address,int256,int256)\":{\"params\":{\"cdp\":\"Target CDP\",\"collateralCounterparty\":\"Who we take/give collateral to\",\"collateralType\":\"Collateral type the CDP has locked inside\",\"debtCounterparty\":\"Who we take/give debt to\",\"deltaCollateral\":\"Amount of collateral taken/added into the CDP\",\"deltaDebt\":\"Amount of debt taken/added into the CDP\"}},\"createUnbackedDebt(address,address,uint256)\":{\"params\":{\"coinDestination\":\"Usually CoinSavingsAccount who passes the new coins to depositors\",\"debtDestination\":\"Usually AccountingEngine that can settle decreaseSoldAmount with surplus\",\"rad\":\"Amount of debt to create (expressed as a number with 45 decimals)\"}},\"denySAFEModification(address)\":{\"params\":{\"usr\":\"Account to give CDP permissions to\"}},\"modifyParameters(bytes32,bytes32,uint256)\":{\"params\":{\"collateralType\":\"- collateral type we want to modify (collateralTypes[collateralType])\",\"data\":\"- new value of this variable\",\"what\":\"- name of variable in struct we want to change\"}},\"modifyParameters(bytes32,uint256)\":{\"params\":{\"data\":\"- new value of this variable\",\"what\":\"- name of variable we want to change\"}},\"modifySAFECollateralization(bytes32,address,address,address,int256,int256)\":{\"params\":{\"cdp\":\"Target CDP\",\"collateralSource\":\"Account we take collateral from/put collateral into\",\"collateralType\":\"Type of collateral to withdraw/deposit in and from the CDP\",\"debtDestination\":\"Account from which we credit/debit coins and debt\",\"deltaCollateral\":\"Amount of collateral added/extract from the CDP\",\"deltaDebt\":\"Amount of debt to generate/repay\"}},\"settleDebt(uint256)\":{\"params\":{\"rad\":\"Amount of debt & coins to destroy (expressed as a number with 45 decimals)\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferSAFECollateralAndDebt(bytes32,address,address,int256,int256)\":{\"params\":{\"collateralType\":\"Collateral type transferred between CDPs\",\"deltaCollateral\":\"Amount of collateral to take/add into src and give/take from dst\",\"deltaDebt\":\"Amount of debt to take/add into src and give/take from dst\",\"dst\":\"Destination CDP\",\"src\":\"Source CDP\"}},\"updateAccumulatedRate(bytes32,address,int256)\":{\"params\":{\"accumulatedRate\":\"Multiplier applied to the debtAmount in order to calculate the surplus\",\"collateralType\":\"Collateral type we accrue interest for\",\"surplusDst\":\"Destination for amount of surplus created by applying the interest rate to debt created by CDPs with 'collateralType'\"}},\"updateSafetyPrice(bytes32)\":{\"params\":{\"collateralType\":\"- safetyPrice's collateral type we want to update\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approveSAFEModification(address)\":{\"notice\":\"Allow an address to modify your CDP. For example coinAdapter should be able to modify your CDP to withdraw all correctly.\"},\"collateralTypes(bytes32)\":{\"notice\":\"Total User Debt (drawn StablePro + stability fee accrued) = SAFE.generatedDebt * CollateralType.accumulatedRate\"},\"confiscateSAFECollateralAndDebt(bytes32,address,address,address,int256,int256)\":{\"notice\":\"Normally used by the LiquidationEngine in order to confiscate collateral and debt from a CDP and give them to someone else\"},\"createUnbackedDebt(address,address,uint256)\":{\"notice\":\"Usually called by CoinSavingsAccount in order to create unbacked debt\"},\"denySAFEModification(address)\":{\"notice\":\"Deny an address the rights to modify your CDP\"},\"modifyParameters(bytes32,bytes32,uint256)\":{\"notice\":\"Method to modify values in struct of collateralTypes\"},\"modifyParameters(bytes32,uint256)\":{\"notice\":\"Method to modify some global variables\"},\"modifySAFECollateralization(bytes32,address,address,address,int256,int256)\":{\"notice\":\"Add/remove collateral or put back/generate more debt in a CDP\"},\"settleDebt(uint256)\":{\"notice\":\"Nullify an amount of coins with an equal amount of debt\"},\"transferSAFECollateralAndDebt(bytes32,address,address,int256,int256)\":{\"notice\":\"Transfer collateral and/or debt between CDPs\"},\"updateAccumulatedRate(bytes32,address,int256)\":{\"notice\":\"Usually called by TaxCollector in order to accrue interest on a specific collateral type\"},\"updateSafetyPrice(bytes32)\":{\"notice\":\"Method to update safetyPrice, it's called each time, when function need actual safetyPrice\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/makerdao/core/SafeEngine.sol\":\"SafeEngine\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/makerdao/core/SafeEngine.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\n/// SAFEEngine.sol -- StablePro CDP database\\n\\n// Copyright (C) 2018 Rain <rainbreak@riseup.net>\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport {Math} from \\\"../utils/Math.sol\\\";\\nimport {ISafeEngine} from \\\"../interfaces/ISafeEngine.sol\\\";\\nimport \\\"../../periphery/contracts/access-control/SuAuthenticatedNonUpgradeable.sol\\\";\\nimport \\\"../../periphery/contracts/interfaces/oracle/ISuOracleAggregator.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n// FIXME: This contract was altered compared to the production version.\\n// It doesn't use LibNote anymore.\\n// New deployments of this contract will need to include custom events (TO DO).\\n\\n// CHANGED: added interface, moved structs there.\\n// Maybe we'll need to add events in each method (need to discuss, in another branch dss has LogNote for that)\\n// Added SuAuthenticated instead of authorizedAccounts\\n\\ncontract SafeEngine is SuAuthenticatedNonUpgradeable, Math, ISafeEngine {\\n    // --- Disable ---\\n    uint public contractEnabled;\\n    function disableContract() external onlyDisablerAccess {\\n        contractEnabled = 0;\\n        emit DisableContract();\\n    }\\n\\n    // --- Auth ---\\n    // Who can transfer collateral & debt in/out of a CDP\\n    mapping(address => mapping (address => uint)) public cdpRights;\\n\\n    function approveSAFEModification(address usr) external { cdpRights[msg.sender][usr] = 1; }\\n\\n    function denySAFEModification(address usr) external { cdpRights[msg.sender][usr] = 0; }\\n\\n    function canModifySAFE(address cdp, address account) internal view returns (bool) {\\n        return either(cdp == account, cdpRights[cdp][account] == 1);\\n    }\\n\\n    /// Total User Debt (drawn StablePro + stability fee accrued) = SAFE.generatedDebt * CollateralType.accumulatedRate\\n\\n    // Data about each collateral type\\n    mapping (bytes32 => CollateralType)            public collateralTypes;\\n    // Data about each SAFE\\n    mapping (bytes32 => mapping (address => SAFE)) public safes;\\n    // Balance of each collateral type\\n    mapping (bytes32 => mapping (address => uint)) public tokenCollateral; // [wad]\\n    // Internal balance of pegged-coins\\n    mapping (address => uint256)                   public coinBalance;     // [rad]\\n    // Amount of debt held by an account. Coin & debt are like matter and antimatter. They nullify each other\\n    mapping (address => uint256)                   public debtBalance;     // [rad]\\n\\n    ISuOracleAggregator public ORACLE;              // Total amount of debt (coins) currently issued [rad]\\n    uint256 public globalDebt;          // Total amount of debt (coins) currently issued [rad]\\n    uint256 public globalUnbackedDebt;  // 'Bad' debt that's not covered by collateral   [rad]\\n    uint256 public globalDebtCeiling;   // Maximum amount of debt that can be issued     [rad]\\n    uint256 public redemptionPrice;     // Reference value per StablePro, as default = 1e27, that mean 1:1 to USD [ray]\\n    uint256 public safetyPriceValidBlockAmount;     // Amount of blocks during which safetyPrice is valid\\n    uint256 public defaultLiquidationRatio;     // Liquidation ratio that is set in initializeCollateralType\\n\\n    // --- Init ---\\n    constructor(address accessControl, address oracle) SuAuthenticatedNonUpgradeable(accessControl) public {\\n        contractEnabled = 1;\\n        redemptionPrice = ONE;\\n        safetyPriceValidBlockAmount = 1; // 2 = this block and 1 block after, 1 = only this block\\n        defaultLiquidationRatio = ONE * 15 / 10; // 150%\\n        ORACLE = ISuOracleAggregator(oracle);\\n    }\\n\\n    // --- Administration ---\\n    function initializeCollateralType(bytes32 collateralType, address collateralAddress) external onlyAdmin {\\n        require(collateralTypes[collateralType].accumulatedRate == 0, \\\"SafeEngine/collateral-type-already-init\\\");\\n        collateralTypes[collateralType].accumulatedRate = ONE;\\n        collateralTypes[collateralType].collateralAddress = collateralAddress;\\n        collateralTypes[collateralType].liquidationRatio = defaultLiquidationRatio;\\n    }\\n    function modifyParameters(bytes32 what, uint data) external onlyDAO {\\n        require(contractEnabled == 1, \\\"SafeEngine/not-contractEnabled\\\");\\n        if (what == \\\"globalDebtCeiling\\\") globalDebtCeiling = data;\\n        else if (what == \\\"redemptionPrice\\\") redemptionPrice = data;\\n        else if (what == \\\"defaultLiquidationRatio\\\") defaultLiquidationRatio = data;\\n        else if (what == \\\"safetyPriceValidBlockAmount\\\") safetyPriceValidBlockAmount = data;\\n        else revert(\\\"SafeEngine/modifyParameters-unrecognized-param\\\");\\n    }\\n    function modifyParameters(bytes32 collateralType, bytes32 what, uint data) external onlyDAO {\\n        require(contractEnabled == 1, \\\"SafeEngine/not-contractEnabled\\\");\\n        // if (what == \\\"safetyPrice\\\") collateralTypes[collateralType].safetyPrice = data;\\n        if (what == \\\"debtCeiling\\\") collateralTypes[collateralType].debtCeiling = data;\\n        else if (what == \\\"debtFloor\\\") collateralTypes[collateralType].debtFloor = data;\\n        else if (what == \\\"liquidationRatio\\\") collateralTypes[collateralType].liquidationRatio = data;\\n        else revert(\\\"SafeEngine/modifyParameters-unrecognized-param\\\");\\n    }\\n    function updateSafetyPrice(bytes32 collateralType) public {\\n        if (collateralTypes[collateralType].safetyPriceBlockNumber == 0) {\\n            collateralTypes[collateralType].safetyPriceBlockNumber = block.number;\\n        } else if (\\n            collateralTypes[collateralType].safetyPriceBlockNumber + safetyPriceValidBlockAmount >= block.number\\n        ) return;\\n\\n        address collateralAddress = collateralTypes[collateralType].collateralAddress;\\n        uint256 decimals = IERC20Metadata(collateralAddress).decimals();\\n        // Oracle returns (uint256) that: basicAmountOfAsset * getFiatPrice1e18(asset) / 1e18 === $$ * 1e18, so:\\n        // If decimals is not 18, we should multiply to 10^d and div to 10^18 => we should get x * 10^(d-18)\\n        // that means that realPriceE18 = x / 10^(18-d)\\n        uint256 realPriceE18 = decimals == 18\\n            ? ORACLE.getSafeFiatPrice1e18(collateralAddress)\\n            : ORACLE.getSafeFiatPrice1e18(collateralAddress) / (10 ** (18 - decimals));\\n        // realPrice / redemptionPrice / liquidationRatio, where realPrice should be as RAY (with 1e27)\\n        collateralTypes[collateralType].safetyPrice = _rdiv(\\n            _rdiv(realPriceE18 * 1e9, redemptionPrice),\\n            collateralTypes[collateralType].liquidationRatio\\n        );\\n        collateralTypes[collateralType].safetyPriceBlockNumber = block.number;\\n    }\\n\\n    // --- Fungibility ---\\n    function modifyCollateralBalance(bytes32 collateralType, address usr, int256 wad) external onlyCDPAccess {\\n        tokenCollateral[collateralType][usr] = _add(tokenCollateral[collateralType][usr], wad);\\n    }\\n    function transferCollateral(bytes32 collateralType, address src, address dst, uint256 wad) external {\\n        require(canModifySAFE(src, msg.sender), \\\"SafeEngine/not-allowed\\\");\\n        tokenCollateral[collateralType][src] = _sub(tokenCollateral[collateralType][src], wad);\\n        tokenCollateral[collateralType][dst] = _add(tokenCollateral[collateralType][dst], wad);\\n    }\\n    function transferInternalCoins(address src, address dst, uint256 rad) external {\\n        require(canModifySAFE(src, msg.sender), \\\"SafeEngine/not-allowed\\\");\\n        coinBalance[src] = _sub(coinBalance[src], rad);\\n        coinBalance[dst] = _add(coinBalance[dst], rad);\\n    }\\n\\n    // --- CDP Manipulation ---\\n    function modifySAFECollateralization(\\n        bytes32 collateralType,\\n        address cdp,\\n        address collateralSource,\\n        address debtDestination,\\n        int deltaCollateral,\\n        int deltaDebt\\n    ) external {\\n        // system is contractEnabled\\n        require(contractEnabled == 1, \\\"SafeEngine/not-contractEnabled\\\");\\n\\n        SAFE memory safe_ = safes[collateralType][cdp];\\n\\n        updateSafetyPrice(collateralType);\\n        CollateralType memory collateralType_ = collateralTypes[collateralType];\\n        // collateralType has been initialised\\n        require(collateralType_.accumulatedRate != 0, \\\"SafeEngine/collateral-type-not-init\\\");\\n\\n        safe_.lockedCollateral = _add(safe_.lockedCollateral, deltaCollateral);\\n        safe_.generatedDebt = _add(safe_.generatedDebt, deltaDebt);\\n        collateralType_.debtAmount = _add(collateralType_.debtAmount, deltaDebt);\\n\\n        int dAmountToRaise = _mul(collateralType_.accumulatedRate, deltaDebt);\\n        uint amountToRaise = _mul(collateralType_.accumulatedRate, safe_.generatedDebt);\\n        globalDebt = _add(globalDebt, dAmountToRaise);\\n\\n        // either debt has decreased, or debt ceilings are not exceeded\\n        require(\\n            either(\\n                deltaDebt <= 0,\\n                both(\\n                    _mul(collateralType_.debtAmount, collateralType_.accumulatedRate) <= collateralType_.debtCeiling,\\n                    globalDebt <= globalDebtCeiling\\n                )\\n            ),\\n            \\\"SafeEngine/ceiling-exceeded\\\"\\n        );\\n        // safe is either less risky than before, or it is safe\\n        require(\\n            either(\\n                both(deltaDebt <= 0, deltaCollateral >= 0),\\n                amountToRaise <= _mul(safe_.lockedCollateral, collateralType_.safetyPrice)\\n            ),\\n            \\\"SafeEngine/not-safe\\\"\\n        );\\n\\n        // safe is either more safe, or the owner consents\\n        require(\\n            either(both(deltaDebt <= 0, deltaCollateral >= 0), canModifySAFE(cdp, msg.sender)),\\n            \\\"SafeEngine/not-allowed-u\\\"\\n        );\\n        // collateral src consents\\n        require(either(deltaCollateral <= 0, canModifySAFE(collateralSource, msg.sender)), \\\"SafeEngine/not-allowed-v\\\");\\n        // debt dst consents\\n        require(either(deltaDebt >= 0, canModifySAFE(debtDestination, msg.sender)), \\\"SafeEngine/not-allowed-w\\\");\\n\\n        // safe has no debt, or a non-dusty amount\\n        require(either(safe_.generatedDebt == 0, amountToRaise >= collateralType_.debtFloor), \\\"SafeEngine/debtFloor\\\");\\n\\n        tokenCollateral[collateralType][collateralSource] =\\n                        _sub(tokenCollateral[collateralType][collateralSource], deltaCollateral);\\n        coinBalance[debtDestination] = _add(coinBalance[debtDestination], dAmountToRaise);\\n\\n        safes[collateralType][cdp] = safe_;\\n        collateralTypes[collateralType] = collateralType_;\\n    }\\n    // --- CDP Fungibility ---\\n    function transferSAFECollateralAndDebt(\\n        bytes32 collateralType,\\n        address src,\\n        address dst,\\n        int deltaCollateral,\\n        int deltaDebt\\n    ) external {\\n        updateSafetyPrice(collateralType);\\n        SAFE storage srcCDP = safes[collateralType][src];\\n        SAFE storage dstCDP = safes[collateralType][dst];\\n        CollateralType storage col = collateralTypes[collateralType];\\n\\n        srcCDP.lockedCollateral = _sub(srcCDP.lockedCollateral, deltaCollateral);\\n        srcCDP.generatedDebt = _sub(srcCDP.generatedDebt, deltaDebt);\\n        dstCDP.lockedCollateral = _add(dstCDP.lockedCollateral, deltaCollateral);\\n        dstCDP.generatedDebt = _add(dstCDP.generatedDebt, deltaDebt);\\n\\n        uint srcAmountToRaise = _mul(srcCDP.generatedDebt, col.accumulatedRate);\\n        uint dstAmountToRaise = _mul(dstCDP.generatedDebt, col.accumulatedRate);\\n\\n        // both sides consent\\n        require(both(canModifySAFE(src, msg.sender), canModifySAFE(dst, msg.sender)), \\\"SafeEngine/not-allowed\\\");\\n\\n        // both sides safe\\n        require(srcAmountToRaise <= _mul(srcCDP.lockedCollateral, col.safetyPrice), \\\"SafeEngine/not-safe-src\\\");\\n        require(dstAmountToRaise <= _mul(dstCDP.lockedCollateral, col.safetyPrice), \\\"SafeEngine/not-safe-dst\\\");\\n\\n        // both sides non-dusty\\n        require(either(srcAmountToRaise >= col.debtFloor, srcCDP.generatedDebt == 0), \\\"SafeEngine/debtFloor-src\\\");\\n        require(either(dstAmountToRaise >= col.debtFloor, dstCDP.generatedDebt == 0), \\\"SafeEngine/debtFloor-dst\\\");\\n    }\\n    // --- CDP Confiscation ---\\n    function confiscateSAFECollateralAndDebt(\\n        bytes32 collateralType,\\n        address cdp,\\n        address collateralCounterparty,\\n        address debtCounterparty,\\n        int deltaCollateral,\\n        int deltaDebt\\n    ) external onlyCDPAccess {\\n        SAFE storage safe_ = safes[collateralType][cdp];\\n        CollateralType storage collateralType_ = collateralTypes[collateralType];\\n\\n        safe_.lockedCollateral = _add(safe_.lockedCollateral, deltaCollateral);\\n        safe_.generatedDebt = _add(safe_.generatedDebt, deltaDebt);\\n        collateralType_.debtAmount = _add(collateralType_.debtAmount, deltaDebt);\\n\\n        int deltaTotalIssuedDebt = _mul(collateralType_.accumulatedRate, deltaDebt);\\n\\n        tokenCollateral[collateralType][collateralCounterparty] =\\n                        _sub(tokenCollateral[collateralType][collateralCounterparty], deltaCollateral);\\n        debtBalance[debtCounterparty] = _sub(debtBalance[debtCounterparty], deltaTotalIssuedDebt);\\n        globalUnbackedDebt = _sub(globalUnbackedDebt, deltaTotalIssuedDebt);\\n    }\\n\\n    // --- Settlement ---\\n\\n    function settleDebt(uint rad) external {\\n        address account      = msg.sender;\\n        debtBalance[account] = _sub(debtBalance[account], rad);\\n        coinBalance[account] = _sub(coinBalance[account], rad);\\n        globalUnbackedDebt   = _sub(globalUnbackedDebt,   rad);\\n        globalDebt           = _sub(globalDebt,   rad);\\n    }\\n\\n    function createUnbackedDebt(address debtDestination, address coinDestination, uint rad) external onlyCDPAccess {\\n        debtBalance[debtDestination] = _add(debtBalance[debtDestination], rad);\\n        coinBalance[coinDestination] = _add(coinBalance[coinDestination], rad);\\n        globalUnbackedDebt           = _add(globalUnbackedDebt,   rad);\\n        globalDebt                   = _add(globalDebt,   rad);\\n    }\\n\\n    // --- Rates ---\\n    function updateAccumulatedRate(\\n        bytes32 collateralType,\\n        address surplusDst,\\n        int accumulatedRate\\n    ) external onlyCDPAccess {\\n        require(contractEnabled == 1, \\\"SafeEngine/not-contractEnabled\\\");\\n        CollateralType storage collateralType_ = collateralTypes[collateralType];\\n        collateralType_.accumulatedRate        = _add(collateralType_.accumulatedRate, accumulatedRate);\\n        int deltaSurplus                       = _mul(collateralType_.debtAmount, accumulatedRate);\\n        coinBalance[surplusDst]                = _add(coinBalance[surplusDst], deltaSurplus);\\n        globalDebt                             = _add(globalDebt, deltaSurplus);\\n    }\\n}\\n\",\"keccak256\":\"0x23c5d9009a1625fdcc7e38c91a21768e7ff4f16ae84b93c6a3c1735d8adbd7bb\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/makerdao/interfaces/IDisable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\ninterface IDisable {\\n    event DisableContract();\\n\\n    function disableContract() external;\\n}\\n\",\"keccak256\":\"0xcf4b5ac43556af77a174aa3a3a9b51c4fc89b933ef875797650542bf686b8405\",\"license\":\"UNLICENSED\"},\"contracts/makerdao/interfaces/ISafeEngine.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// TODO: check how to operate with license and use one for all contracts\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IDisable.sol\\\";\\n\\n/**\\n * @title SafeEngine\\n * @notice The single source of truth for the Maker Protocol. It contains the accounting system of the core Vault,\\n * Internal StablePro balances, and collateral state. It houses the public interface for Vault management,\\n * allowing safe(= CDP or Vault) owners to adjust their Vault state balances. It also contains the public interface\\n * for Vault fungibility, allowing safe (Vault) owners to transfer, split, and merge Vaults.\\n * Excluding these interfaces, SAFEEngine is accessed through trusted smart contract modules.\\n **/\\ninterface ISafeEngine is IDisable {\\n    /* ==================== METHODS ==================== */\\n\\n    // --- Data ---\\n    struct CollateralType {\\n        uint256 debtAmount;        // Total debt issued for this specific collateral type                          [wad]\\n        uint256 accumulatedRate;   // Accumulator for interest accrued on this collateral type                     [ray]\\n        uint256 debtCeiling;       // Maximum amount of debt that can be generated with this collateral type       [rad]\\n        uint256 debtFloor;         // Minimum amount of debt that must be generated by a CDP using this collateral [rad]\\n        uint256 safetyPrice;       // Floor price at which a CDP is allowed to generate debt                       [ray]\\n        uint256 liquidationRatio;  // Liquidation ratio to calculate safety price                                  [ray]\\n        address collateralAddress; // Address of collateral\\n        uint256 safetyPriceBlockNumber; // Block when safetyPrice was updated\\n    }\\n    struct SAFE {\\n        uint256 lockedCollateral; // Total amount of collateral locked in a SAFE/CDP  [wad]\\n        uint256 generatedDebt;    // Total amount of debt generated by a SAFE/CDP     [wad]\\n    }\\n\\n    // --- VARS ---\\n\\n    function safes(bytes32, address) external view returns (uint, uint);\\n\\n    function collateralTypes(bytes32) external view returns (\\n        uint256 debtAmount,       // [wad]\\n        uint256 accumulatedRate,  // [ray]\\n        uint256 debtCeiling,      // [rad]\\n        uint256 debtFloor,        // [rad]\\n        uint256 safetyPrice,      // [ray]\\n        uint256 liquidationRatio, // [ray]\\n        address collateralAddress,\\n        uint256 safetyPriceBlockNumber\\n);\\n\\n    function tokenCollateral(bytes32, address) external view returns (uint256);\\n\\n    function coinBalance(address) external view returns (uint256);\\n\\n    function debtBalance(address) external view returns (uint256);\\n\\n    function cdpRights(address, address) external view returns (uint256);\\n\\n    function globalDebtCeiling() external view returns (uint256);\\n\\n    function globalDebt() external view returns (uint256);\\n\\n    // --- Auth ---\\n    /**\\n     * @notice Allow an address to modify your CDP.\\n     * For example coinAdapter should be able to modify your CDP to withdraw all correctly.\\n     * @param usr Account to give CDP permissions to\\n     */\\n    function approveSAFEModification(address usr) external;\\n\\n    /**\\n     * @notice Deny an address the rights to modify your CDP\\n     * @param usr Account to give CDP permissions to\\n     */\\n    function denySAFEModification(address usr) external;\\n\\n    // --- Administration ---\\n\\n    function initializeCollateralType(bytes32 collateralType, address collateralAddress) external;\\n    // TODO: check why not to use strings instead of bytes32\\n    /**\\n     * @notice Method to modify some global variables\\n     * @param what - name of variable we want to change\\n     * @param data - new value of this variable\\n     */\\n    function modifyParameters(bytes32 what, uint data) external;\\n    /**\\n     * @notice Method to modify values in struct of collateralTypes\\n     * @param collateralType - collateral type we want to modify (collateralTypes[collateralType])\\n     * @param what - name of variable in struct we want to change\\n     * @param data - new value of this variable\\n     */\\n    function modifyParameters(bytes32 collateralType, bytes32 what, uint data) external;\\n\\n    // --- Fungibility ---\\n    function modifyCollateralBalance(bytes32 collateralType, address usr, int256 wad) external;\\n    function transferCollateral(bytes32 collateralType, address src, address dst, uint256 wad) external;\\n    function transferInternalCoins(address src, address dst, uint256 rad) external;\\n\\n    // --- SafetyPrice Manipulation ---\\n    /**\\n     * @notice Method to update safetyPrice, it's called each time, when function need actual safetyPrice\\n     * @param collateralType - safetyPrice's collateral type we want to update\\n     */\\n    function updateSafetyPrice(bytes32 collateralType) external;\\n\\n    // --- CDP Manipulation ---\\n    /**\\n     * @notice Add/remove collateral or put back/generate more debt in a CDP\\n     * @param collateralType Type of collateral to withdraw/deposit in and from the CDP\\n     * @param cdp Target CDP\\n     * @param collateralSource Account we take collateral from/put collateral into\\n     * @param debtDestination Account from which we credit/debit coins and debt\\n     * @param deltaCollateral Amount of collateral added/extract from the CDP\\n     * @param deltaDebt Amount of debt to generate/repay\\n     */\\n    function modifySAFECollateralization(\\n        bytes32 collateralType,\\n        address cdp,\\n        address collateralSource,\\n        address debtDestination,\\n        int deltaCollateral,\\n        int deltaDebt\\n    ) external;\\n\\n    // --- CDP Fungibility ---\\n    /**\\n     * @notice Transfer collateral and/or debt between CDPs\\n     * @param collateralType Collateral type transferred between CDPs\\n     * @param src Source CDP\\n     * @param dst Destination CDP\\n     * @param deltaCollateral Amount of collateral to take/add into src and give/take from dst\\n     * @param deltaDebt Amount of debt to take/add into src and give/take from dst\\n     */\\n    function transferSAFECollateralAndDebt(\\n        bytes32 collateralType,\\n        address src,\\n        address dst,\\n        int deltaCollateral,\\n        int deltaDebt\\n    ) external;\\n\\n    // --- CDP Confiscation ---\\n    /**\\n     * @notice Normally used by the LiquidationEngine in order to confiscate collateral and\\n       debt from a CDP and give them to someone else\\n     * @param collateralType Collateral type the CDP has locked inside\\n     * @param cdp Target CDP\\n     * @param collateralCounterparty Who we take/give collateral to\\n     * @param debtCounterparty Who we take/give debt to\\n     * @param deltaCollateral Amount of collateral taken/added into the CDP\\n     * @param deltaDebt Amount of debt taken/added into the CDP\\n     */\\n    function confiscateSAFECollateralAndDebt(\\n        bytes32 collateralType,\\n        address cdp,\\n        address collateralCounterparty,\\n        address debtCounterparty,\\n        int deltaCollateral,\\n        int deltaDebt\\n    ) external;\\n\\n    // --- Settlement ---\\n    /**\\n     * @notice Nullify an amount of coins with an equal amount of debt\\n     * @param rad Amount of debt & coins to destroy (expressed as a number with 45 decimals)\\n     */\\n    function settleDebt(uint rad) external;\\n\\n    /**\\n     * @notice Usually called by CoinSavingsAccount in order to create unbacked debt\\n     * @param debtDestination Usually AccountingEngine that can settle decreaseSoldAmount with surplus\\n     * @param coinDestination Usually CoinSavingsAccount who passes the new coins to depositors\\n     * @param rad Amount of debt to create (expressed as a number with 45 decimals)\\n     */\\n    function createUnbackedDebt(address debtDestination, address coinDestination, uint rad) external;\\n\\n    // --- Rates ---\\n    /**\\n     * @notice Usually called by TaxCollector in order to accrue interest on a specific collateral type\\n     * @param collateralType Collateral type we accrue interest for\\n     * @param surplusDst Destination for amount of surplus created by applying the interest rate\\n       to debt created by CDPs with 'collateralType'\\n     * @param accumulatedRate Multiplier applied to the debtAmount in order to calculate the surplus\\n     */\\n    function updateAccumulatedRate(bytes32 collateralType, address surplusDst, int accumulatedRate) external;\\n}\\n\",\"keccak256\":\"0xf7b5850f4e32a440964ccd8b177cbd8ab6667166fe0a3dbbe69dc1a33215fccf\",\"license\":\"UNLICENSED\"},\"contracts/makerdao/utils/Math.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nabstract contract Math {\\n    uint256 constant ONE = 10 ** 27;\\n    uint256 constant WAD = 10 ** 18;\\n\\n    /**\\n    * @notice Calculates the sum of an unsigned integer and a signed integer\\n    * @param  x Unsigned integer\\n    * @param  y Signed integer\\n    * @return z Unsigned sum of `x` and `y`\\n    */\\n    function _add(uint x, int y) internal pure returns (uint z) {\\n        if (y >= 0) {\\n            z = x + uint256(y);\\n        } else {\\n            z = x - uint256(-y);\\n        }\\n        require(y >= 0 || z <= x);\\n        require(y <= 0 || z >= x);\\n    }\\n\\n    /**\\n    * @notice Calculates the substraction of an unsigned integer and a signed integer\\n    * @param  x Unsigned integer\\n    * @param  y Signed integer\\n    * @return z Unsigned substraction of `x` and `y`\\n    */\\n    function _sub(uint x, int y) internal pure returns (uint z) {\\n        if (y >= 0) {\\n            z = x - uint256(y);\\n        } else {\\n            z = x + uint256(-y);\\n        }\\n        require(y <= 0 || z <= x);\\n        require(y >= 0 || z >= x);\\n    }\\n    function _mul(uint x, int y) internal pure returns (int z) {\\n        z = int(x) * y;\\n        require(int(x) >= 0);\\n        require(y == 0 || z / y == int(x));\\n    }\\n\\n    function _rdiv(uint x, uint y) internal pure returns (uint z) {\\n        z = _mul(x, ONE) / y;\\n    }\\n\\n    function _add(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x + y) >= x);\\n    }\\n    function _sub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) <= x);\\n    }\\n    function _mul(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x);\\n    }\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x <= y ? x : y;\\n    }\\n\\n    function either(bool x, bool y) internal pure returns (bool z) {\\n        assembly{ z := or(x, y)}\\n    }\\n    function both(bool x, bool y) internal pure returns (bool z) {\\n        assembly{ z := and(x, y)}\\n    }\\n}\\n\",\"keccak256\":\"0xd2215ec58e4792d9e68d66f17c0181e4931fd83dc4f4a433d727978997e4ba24\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/periphery/contracts/access-control/SuAccessRoles.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title SuAccessRoles Library\\n * @dev SuAuthenticated and SuAccessControlSingleton need to have this constants\\n * Hierarchy:\\n *      1. DAO - can give admins and system roles\\n *      2.1. Admin - can set Alerters\\n *      2.2. System - includes Minter, Liquidation, Reward and Disabler roles, don't have access to give some roles.\\n *      3. Alerter - can send alerts and trigger rate limits, don't have access to give some roles.\\n */\\nabstract contract SuAccessRoles {\\n    bytes32 public constant ADMIN_ROLE = 0x00;\\n\\n    bytes32 public constant DAO_ROLE = keccak256(\\\"DAO_ROLE\\\");\\n\\n    bytes32 public constant ALERTER_ROLE = keccak256(\\\"ALERTER_ROLE\\\");\\n\\n    // system roles\\n    bytes32 public constant MINT_ACCESS_ROLE = keccak256(\\\"MINT_ACCESS_ROLE\\\");\\n    bytes32 public constant LIQUIDATION_ACCESS_ROLE = keccak256(\\\"LIQUIDATION_ACCESS_ROLE\\\");\\n    bytes32 public constant REWARD_ACCESS_ROLE = keccak256(\\\"REWARD_ACCESS_ROLE\\\");\\n    // bytes32 public constant SYSTEM_ROLE = keccak256(\\\"SYSTEM_ROLE\\\");\\n    bytes32 public constant DISABLER_ROLE = keccak256(\\\"DISABLER_ROLE\\\");\\n    bytes32 public constant CDP_ACCESS_ROLE = keccak256(\\\"CDP_ACCESS_ROLE\\\");\\n    bytes32 public constant VOTING_ESCROW_ROLE = keccak256(\\\"VOTING_ESCROW_ROLE\\\");\\n}\\n\",\"keccak256\":\"0xce66cbb527d3a8e1e5c437ad1546283b02abca7bf6ab7aefb73d81913c6977f3\",\"license\":\"BSL 1.1\"},\"contracts/periphery/contracts/access-control/SuAuthenticatedNonUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/access-control/ISuAccessControl.sol\\\";\\nimport \\\"./SuAccessRoles.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title SuAuthenticated\\n * @dev other contracts should inherit to be authenticated.\\n * The address of SuAccessControlSingleton should be one for all contract that inherits SuAuthenticated\\n */\\nabstract contract SuAuthenticatedNonUpgradeable is SuAccessRoles, IERC165 {\\n    ISuAccessControl public ACCESS_CONTROL_SINGLETON;\\n\\n    error OnlyDAOError();\\n    error OnlyAdminError();\\n    error OnlyAlerterError();\\n    error OnlyLiquidationAccessError();\\n    error OnlyMintAccessError();\\n    error OnlyRewardAccessError();\\n    error OnlyDisablerAccessError();\\n    error OnlyRoleError();\\n    error OnlyCDPAccessError();\\n    error BadAccessControlSingleton();\\n\\n    constructor (address _accessControlSingleton) internal {\\n        ACCESS_CONTROL_SINGLETON = ISuAccessControl(_accessControlSingleton);\\n        if (\\n            !ISuAccessControl(_accessControlSingleton).supportsInterface(type(IAccessControlUpgradeable).interfaceId)\\n        ) revert BadAccessControlSingleton();\\n    }\\n\\n    /** CORE ROLES */\\n\\n    modifier onlyDAO() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(DAO_ROLE, msg.sender)) revert OnlyDAOError();\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(ADMIN_ROLE, msg.sender)) revert OnlyAdminError();\\n        _;\\n    }\\n\\n    modifier onlyAlerter() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(ALERTER_ROLE, msg.sender)) revert OnlyAlerterError();\\n        _;\\n    }\\n\\n    /** SYSTEM ROLES */\\n\\n    modifier onlyLiquidationAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(LIQUIDATION_ACCESS_ROLE, msg.sender)) revert OnlyLiquidationAccessError();\\n        _;\\n    }\\n\\n    modifier onlyMintAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(MINT_ACCESS_ROLE, msg.sender)) revert OnlyMintAccessError();\\n        _;\\n    }\\n\\n    modifier onlyRewardAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(REWARD_ACCESS_ROLE, msg.sender)) revert OnlyRewardAccessError();\\n        _;\\n    }\\n\\n    // @notice This modifier check if user/contract have access to \\\"disable\\\" contracts.\\n    // All main contracts in our lending protocol have disableContract() method that stops contracts main functions.\\n    modifier onlyDisablerAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(DISABLER_ROLE, msg.sender)) revert OnlyDisablerAccessError();\\n        _;\\n    }\\n\\n    modifier onlyCDPAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(CDP_ACCESS_ROLE, msg.sender)) revert OnlyCDPAccessError();\\n        _;\\n    }\\n\\n    // syntax sugar under ACCESS_CONTROL_SINGLETON\\n    modifier onlyRole(bytes32 role) {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(role, msg.sender)) revert OnlyRoleError();\\n        _;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return ACCESS_CONTROL_SINGLETON.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x9d69a9879d0481ec7acaab47aa9edb73ef00acdca50d5a2fbeb5489e060e3a84\",\"license\":\"BSL 1.1\"},\"contracts/periphery/contracts/interfaces/access-control/ISuAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\nimport \\\"../../access-control/SuAccessRoles.sol\\\";\\n\\n/**\\n * @notice Access control for contracts\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n **/\\ninterface ISuAccessControl is IAccessControlUpgradeable, IERC165Upgradeable {\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\\n}\\n\",\"keccak256\":\"0x25724ac502fd6418ccd38273b276de4b2fdecd023d723c5d80c9f0a27c407bcd\",\"license\":\"MIT\"},\"contracts/periphery/contracts/interfaces/oracle/ISuOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\n// solhint-disable compiler-version\\npragma solidity >=0.7.6;\\n\\ninterface ISuOracle {\\n    /**\\n     * @notice WARNING! Read this description very carefully!\\n     *     function getFiatPrice1e18(address asset) returns (uint256) that:\\n     *         basicAmountOfAsset * getFiatPrice1e18(asset) / 1e18 === $$ * 1e18\\n     *     in other words, it doesn't matter what's the erc20.decimals is,\\n     *     you just multiply token balance in basic units on value from oracle and get dollar amount multiplied on 1e18.\\n     *\\n     * different assets have different deviation threshold (errors)\\n     *     for wBTC it's <= 0.5%, read more https://data.chain.link/ethereum/mainnet/crypto-usd/btc-usd\\n     *     for other asset is can be larger based on particular oracle implementation.\\n     *\\n     * examples:\\n     *     market price of btc = $30k,\\n     *     for 0.1 wBTC the unit256 amount is 0.1 * 1e18\\n     *     0.1 * 1e18 * (price1e18 / 1e18) == $3000 == uint256(3000*1e18)\\n     *     => price1e18 = 30000 * 1e18;\\n     *\\n     *     market price of usdt = $0.97,\\n     *     for 1 usdt uint256 = 1 * 1e6\\n     *     so 1*1e6 * price1e18 / 1e18 == $0.97 == uint256(0.97*1e18)\\n     *     => 1*1e6 * (price1e18 / 1e18) / (0.97*1e18)   = 1\\n     *     =>  price1e18 = 0.97 * (1e18/1e6) * 1e18\\n     *\\n     *    assume market price of wBTC = $31,503.77, oracle error = $158\\n     *\\n     *     case #1: small amount of wBTC\\n     *         we have 0.0,000,001 wBTC that is worth v = $0.00315 \\u00b1 $0.00001 = 0.00315*1e18 = 315*1e13 \\u00b1 1*1e13\\n     *         actual balance on the asset b = wBTC.balanceOf() =  0.0000001*1e18 = 1e11\\n     *         oracle should return or = oracle.getFiatPrice1e18(wBTC) <=>\\n     *         <=> b*or = v => v/b = 315*1e13 / 1e11 = 315*1e2 \\u00b1 1e2\\n     *         error = or.error * b = 1e2 * 1e11 = 1e13 => 1e13/1e18 usd = 1e-5 = 0.00001 usd\\n     *\\n     *     case #2: large amount of wBTC\\n     *         v = 2,000,000 wBTC = $31,503.77 * 2m \\u00b1 158*2m = $63,007,540,000 \\u00b1 $316,000,000 = 63,007*1e24 \\u00b1 316*1e24\\n     *         for calc convenience we increase error on 0.05 and have v = 63,000*24 \\u00b1 300*1e24 = (630 \\u00b1 3)*1e26\\n     *         b = 2*1e6 * 1e18 = 2*1e24\\n     *         or = v/b = (630 \\u00b1 3)*1e26 / 2*1e24 = 315*1e2 \\u00b1 1.5*1e2\\n     *         error = or.error * b = 1.5*100 * 2*1e24 = 3*1e26 = 3*1e8*1e18 = $300,000,000 ~ $316,000,000\\n     *\\n     *     assume the market price of USDT = $0.97 \\u00b1 $0.00485,\\n     *\\n     *     case #3: little amount of USDT\\n     *         v = USDT amount 0.005 = 0.005*(0.97 \\u00b1 0.00485) = 0.00485*1e18 \\u00b1 0.00002425*1e18 = 485*1e13 \\u00b1 3*1e13\\n     *         we rounded error up on (3000-2425)/2425 ~= +24% for calculation convenience.\\n     *         b = USDT.balanceOf() = 0.005*1e6 = 5*1e3\\n     *         b*or = v => or = v/b = (485*1e13 \\u00b1 3*1e13) / 5*1e3 = 970*1e9 \\u00b1 6*1e9\\n     *         error = 6*1e9 * 5*1e3 / 1e18 = 30*1e12/1e18 = 3*1e-5 = $0,00005\\n     *\\n     *     case #4: lot of USDT\\n     *         v = we have 100,000,000,000 USDT = $97B = 97*1e9*1e18 \\u00b1 0.5*1e9*1e18\\n     *         b = USDT.balanceOf() = 1e11*1e6 = 1e17\\n     *         or = v/b = (97*1e9*1e18 \\u00b1 0.5*1e9*1e18) / 1e17 = 970*1e9 \\u00b1 5*1e9\\n     *         error = 5*1e9 * 1e17 = 5*1e26 = 0.5 * 1e8*1e18\\n     *\\n     * @param asset - address of erc20 token contract\\n     * @return usdPrice1e18 such that asset.balanceOf() * getFiatPrice1e18(asset) / 1e18 == $$ * 1e18\\n     **/\\n    function getFiatPrice1e18(address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa56b9cc86ef5935efecc276e6a3188d518f1a99cad960083a8de35849c997687\",\"license\":\"UNLICENSED\"},\"contracts/periphery/contracts/interfaces/oracle/ISuOracleAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ISuOracle.sol\\\";\\n\\ninterface ISuOracleAggregator is ISuOracle {\\n    /* ===================== STRUCT ===================== */\\n    struct AssetLimitation {\\n        uint256 lowerBound;\\n        uint256 upperBound;\\n    }\\n\\n    /* ===================== EVENTS ===================== */\\n    event OracleLowerBoundWarning(uint256 price);\\n    event OracleUpperBoundWarning(uint256 price);\\n\\n    /* ===================== ERRORS ===================== */\\n    error NoOracleFound(address asset);\\n    error NoOracleImplementation();\\n    error BadOracleId();\\n\\n    /* ====================== VARS ====================== */\\n    function assetToOracle (address asset) external view returns ( uint256 );\\n    function oracleImplementations (uint256 oracleId) external view returns ( ISuOracle );\\n\\n    /* ==================== METHODS ==================== */\\n\\n    /**\\n    * @notice Like getFiatPrice1e18 from ISuOracle, but also checks bounds and emit event if there is an error.\\n    * We should call it in non-view method where we need safePrice from Oracle.\\n    * @param asset - address of asset\\n    **/\\n    function getSafeFiatPrice1e18(address asset) external returns (uint256);\\n\\n    /**\\n    * @notice Change lower bound of asset\\n    * @param asset - address of asset\\n    * @param newLowerBound - new value of lower bound\\n    **/\\n    function setLowerBound(address asset, uint256 newLowerBound) external;\\n\\n    /**\\n    * @notice Change upper bound of asset\\n    * @param asset - address of asset\\n    * @param newUpperBound - new value of upper bound\\n    **/\\n    function setUpperBound(address asset, uint256 newUpperBound) external;\\n\\n    /**\\n       * @notice assign address of oracle implementation to the oracleId\\n    * @param oracleId - number 0,1, etc to assign the oracle\\n    * @param oracleImplementation - an address with ISuOracle implementation contract\\n    **/\\n    function setOracleImplementation(uint256 oracleId, ISuOracle oracleImplementation) external;\\n\\n    /**\\n    * @notice specify what oracleId should be used for each assets. Checks that oracleId has an implementation\\n    **/\\n    function setOracleIdForAssets(address[] memory assets, uint256 oracleId) external;\\n\\n    /* ==================== VIEW METHODS ==================== */\\n    /**\\n    * @return true if oracle is set to this asset, false otherwise\\n    **/\\n    function hasPriceForAsset(address asset) external view returns(bool);\\n}\\n\",\"keccak256\":\"0x9e9f77c54257263b4caa12a57fcc53e970df3a07fa1ae18559b243f21c827a9f\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60806040908082523462000153578181620022c4803803809162000024828562000158565b8339810103126200015357620000486020620000408362000192565b920162000192565b600080546001600160a01b039384166001600160a01b03199182168117835585516301ffc9a760e01b8152637965db0b60e01b60048201529194939290602090839060249082905afa91821562000147578192620000fb575b505015620000ea57600180556b033b2e3c9fd0803ce8000000600c556001600d556b04d8c55aefb8c05b5c000000600e55169060085416176008555161211c9081620001a88239f35b83516384d942fd60e01b8152600490fd5b9091506020813d82116200013e575b81620001196020938362000158565b810103126200013a57519081151582036200013757503880620000a1565b80fd5b5080fd5b3d91506200010a565b508551903d90823e3d90fd5b600080fd5b601f909101601f19168101906001600160401b038211908210176200017c57604052565b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b0382168203620001535756fe608080604052600436101561001357600080fd5b60003560e01c90816301ffc9a7146119705750806303ee9f22146119475780630e9e11d31461185757806311005b071461181d5780631b142820146117095780631d2a783d146116eb57806320d8a59f146115a757806327a0bb33146115095780632efcc866146114eb57806338013f02146114c25780633d4225041461147157806341b3a0d914611453578063438280dd14611418578063476bb6ef146111eb5780634a11825e146111235780634e14a96714610fb95780634e5111a614610ee857806362a1e17b14610eca57806371d0fb4114610e8f57806375b238fc14610e7357806376e0b4ca14610e2b5780638543d5e014610e0d578063894ba83314610d4b5780638e5313e014610d1057806399bec31514610811578063a39b5580146107f3578063bd5f5be6146107ca578063c5b748c0146107ac578063d07900bb1461072b578063d0e8fa82146106f0578063d2351cee146106c7578063d49d786714610685578063d4b9311d1461056f578063d94d42081461052c578063da49bada146104db578063dc97e84e146104a0578063e401f2e714610484578063e9c265181461045b578063efabcadc146103d0578063fabde80c146103965763fe4f5890146101e257600080fd5b3461039157604036600319011261039157600435602435906044602060018060a01b036000541660405192838092632474521560e21b825260008051602061208783398151915260048301523360248301525afa90811561038557600091610357575b5015610345576102586001805414611b1d565b70676c6f62616c446562744365696c696e6760781b810361027a5750600b555b005b6e726564656d7074696f6e507269636560881b81036102995750600c55005b7664656661756c744c69717569646174696f6e526174696f60481b81036102c05750600e55005b7a1cd859995d1e541c9a58d955985b1a59109b1bd8dad05b5bdd5b9d602a1b036102e957600d55005b60405162461bcd60e51b815260206004820152602e60248201527f53616665456e67696e652f6d6f64696679506172616d65746572732d756e726560448201526d636f676e697a65642d706172616d60901b6064820152608490fd5b60405163599a6c3360e11b8152600490fd5b610378915060203d811161037e575b6103708183611ae2565b810190611b05565b38610245565b503d610366565b6040513d6000823e3d90fd5b600080fd5b34610391576020366003190112610391576001600160a01b036103b76119f8565b1660005260066020526020604060002054604051908152f35b34610391576103de36611a64565b91906103f26103ed3384611e63565b611e1e565b6001600160a01b03918216600081815260066020526040902054906104178583611b8c565b91821161039157600052600660205260406000205516806000526104416040600020549283611b69565b918210610391576000526006602052604060002055600080f35b346103915760003660031901126103915760206040516000805160206120878339815191528152f35b3461039157602036600319011261039157610278600435611bb9565b346103915760003660031901126103915760206040517f9a9aef7c1247d5fc769b0185c052913e39673da29a880317dfd20ebf86f26a498152f35b34610391576040366003190112610391576104f46119f8565b6104fc611a0e565b9060018060a01b038091166000526002602052604060002091166000526020526020604060002054604051908152f35b34610391576020366003190112610391576105456119f8565b33600052600260205260406000209060018060a01b03166000526020526001604060002055600080f35b3461039157606036600319011261039157600435602435906044359160018060a01b0360005416906040518092632474521560e21b8252600080516020612087833981519152600483015233602483015281604460209586935afa90811561038557600091610668575b5015610345576105ec6001805414611b1d565b6a646562744365696c696e6760a81b8103610614575060039160005252600260406000200155005b683232b13a233637b7b960b91b810361063d575060039160005252600360406000200155600080f35b6f6c69717569646174696f6e526174696f60801b036102e95760039160005252600560406000200155005b61067f9150833d851161037e576103708183611ae2565b856105d9565b346103915760203660031901126103915761069e6119f8565b33600052600260205260406000209060018060a01b031660005260205260006040812055600080f35b346103915760003660031901126103915760206040516000805160206120c78339815191528152f35b346103915760003660031901126103915760206040517f76d0567582f23e1e9d7a13eeba60f9aea9d69b8da87ca27a8bf3698b35c653db8152f35b34610391576020366003190112610391576004356000526003602052610100604060002080549060018101549060028101546003820154600483015490600584015492600760018060a01b0360068701541695015495604051978852602088015260408701526060860152608085015260a084015260c083015260e0820152f35b34610391576000366003190112610391576020600c54604051908152f35b346103915760003660031901126103915760206040516000805160206120a78339815191528152f35b34610391576000366003190112610391576020600d54604051908152f35b346103915761081f36611a99565b9061083260018097969495975414611b1d565b60008581526004602090815260408083206001600160a01b0387168452909152908190208151959186018087116001600160401b0390911117610cfa5760019060408701604052805487520154602086015261088d86611bb9565b856000526003602052604060002096604051978861010081011060018060401b036101008b011117610cfa5761010089016040528054895260076001820154918260208c0152600281015460408c0152600381015460608c0152600481015460808c0152600581015460a08c015260018060a01b0360068201541660c08c0152015460e08a015215610ca957610924838751611ea6565b8652610934846020880151611ea6565b6020870152610944848951611ea6565b88526109548460208a0151611f78565b9361096860208a0151602089015190612049565b9061097586600954611ea6565b806009556109898b5160208d015190612049565b60408c0151101590600b5410151660008213151715610c665760008512156000821315166109bd895160808d015190612049565b831115811715610c2b576109d13389611e63565b1715610beb576109e13384611e63565b60008613151715610bab5760006109f83386611e63565b9112151715610b6b576020870151159060608a015111151715610b2f57610a46610a7f9388600052600560205260406000209260018060a01b03169283600052602052604060002054611f17565b9087600052600560205260406000209060005260205260406000205560018060a01b031691826000526006602052604060002054611ea6565b90600052600660205260406000205582600052600460205260406000209060018060a01b0316600052602052600160206040600020928051845501519101556000526003602052600760e0604060002092805184556020810151600185015560408101516002850155606081015160038501556080810151600485015560a081015160058501556006840160018060a01b0360c08301511660018060a01b03198254161790550151910155600080f35b60405162461bcd60e51b815260206004820152601460248201527329b0b332a2b733b4b73297b232b13a233637b7b960611b6044820152606490fd5b60405162461bcd60e51b815260206004820152601860248201527753616665456e67696e652f6e6f742d616c6c6f7765642d7760401b6044820152606490fd5b60405162461bcd60e51b815260206004820152601860248201527729b0b332a2b733b4b73297b737ba16b0b63637bbb2b216bb60411b6044820152606490fd5b60405162461bcd60e51b815260206004820152601860248201527753616665456e67696e652f6e6f742d616c6c6f7765642d7560401b6044820152606490fd5b60405162461bcd60e51b815260206004820152601360248201527253616665456e67696e652f6e6f742d7361666560681b6044820152606490fd5b60405162461bcd60e51b815260206004820152601b60248201527a14d85999515b99da5b994bd8d95a5b1a5b99cb595e18d959591959602a1b6044820152606490fd5b60405162461bcd60e51b815260206004820152602360248201527f53616665456e67696e652f636f6c6c61746572616c2d747970652d6e6f742d696044820152621b9a5d60ea1b6064820152608490fd5b634e487b7160e01b600052604160045260246000fd5b346103915760003660031901126103915760206040517fe453bacb314e78dcd5192e6b1a2b1f0e7c76e92f6b7e429a6a90f04e39db3b768152f35b3461039157600036600319011261039157600054604051632474521560e21b81526000805160206120c7833981519152600482015233602482015290602090829060449082906001600160a01b03165afa90811561038557600091610def575b5015610ddd5760006001557f2d4b4ecff7bd7503135271925520a2f6c0d98c9473ffc1a1e72c92502f51b25e600080a1005b60405163bb0684b760e01b8152600490fd5b610e07915060203d811161037e576103708183611ae2565b81610dab565b34610391576000366003190112610391576020600954604051908152f35b3461039157604036600319011261039157610e44611a0e565b600435600052600560205260406000209060018060a01b03166000526020526020604060002054604051908152f35b3461039157600036600319011261039157602060405160008152f35b346103915760003660031901126103915760206040517f880a91047114272656e533301261260c75e4d11543ac7303d6fe4204579ec7278152f35b34610391576000366003190112610391576020600e54604051908152f35b3461039157608036600319011261039157600435610f04611a0e565b610f0c611a24565b9060643592610f1e6103ed3384611e63565b60008181526005602090815260408083206001600160a01b03958616808552908352922054909391610f508783611b8c565b918211610391578360005260058552604060002090600052845260406000205581600052600583526040600020931692836000528252610f966040600020549485611b69565b938410610391576000526005815260406000209160005252604060002055600080f35b3461039157610fc736611a99565b9490939160018060a01b03918260005416946040518096632474521560e21b82526000805160206120a783398151915260048301523360248301528160446020998a935afa90811561038557600091611106575b50156110f4576110ab6110886110ef996007978560005260048a528760406000209116600052895260018a8160406000208860005260038d526110646040600020938254611ea6565b815501611072848254611ea6565b905561107f838254611ea6565b81550154611f78565b978360005260058852856040600020931692836000528852604060002054611f17565b916000526005865260406000209060005285526040600020551691826000528181526110dc84604060002054611f17565b9260005252604060002055600a54611f17565b600a55005b604051635e9e090760e01b8152600490fd5b61111d9150873d891161037e576103708183611ae2565b8961101b565b346103915761113136611a3a565b600054604051632474521560e21b81526000805160206120a783398151915260048201523360248201526020926001600160a01b039290919084908290604490829087165afa908115610385576000916111ce575b50156110f4576111b19185600052600584526040600020941693846000528352604060002054611ea6565b926000526005815260406000209160005252604060002055600080f35b6111e59150843d861161037e576103708183611ae2565b86611186565b346103915760a036600319011261039157600435611207611a0e565b61120f611a24565b91606435926084359061122183611bb9565b60008381526004602090815260408083206001600160a01b03888116855290835281842090851684528184209684526003835292208254919792959092909161126b908290611f17565b865561129a600161128d81890193611284898654611f17565b85558554611ea6565b9384815501958654611ea6565b80955554946112d86001840154946112d26112ca6112c26112bb898c612049565b988a612049565b9a3390611e63565b913390611e63565b16611e1e565b54906112e960048401548093612049565b84116113d957906112f991612049565b851161139a5760030154809315911015171561135a5715911015171561131b57005b6064906040519062461bcd60e51b82526004820152601860248201527714d85999515b99da5b994bd919589d119b1bdbdc8b591cdd60421b6044820152fd5b60405162461bcd60e51b815260048101859052601860248201527753616665456e67696e652f64656274466c6f6f722d73726360401b6044820152606490fd5b60405162461bcd60e51b815260048101879052601760248201527614d85999515b99da5b994bdb9bdd0b5cd859994b591cdd604a1b6044820152606490fd5b60405162461bcd60e51b815260048101899052601760248201527653616665456e67696e652f6e6f742d736166652d73726360481b6044820152606490fd5b346103915760003660031901126103915760206040517f39f61ca2a1a28fee144218173ec637b649a353e4026b2738c673800e5bf1437b8152f35b34610391576000366003190112610391576020600154604051908152f35b346103915760403660031901126103915761148a611a0e565b600435600052600460205260406000209060018060a01b03166000526020526040806000206001815491015482519182526020820152f35b34610391576000366003190112610391576008546040516001600160a01b039091168152602090f35b34610391576000366003190112610391576020600b54604051908152f35b34610391576020366003190112610391576004353360005260076020526040600020546115368282611b8c565b9081116103915733600052600760205260406000205560066020526040600020546115618282611b8c565b90811161039157336000526006602052604060002055600a546115848282611b8c565b90811161039157600a5561159b6009549182611b8c565b90811161039157600955005b34610391576040366003190112610391576004356115c3611a0e565b9060018060a01b03908160005416906040518092632474521560e21b82526000600483015233602483015281604460209586935afa908115610385576000916116ce575b50156116bc578060005260038252600160406000200154611667576000908152600390915260409020676765c793fa10079d601b1b60018201556006810180546001600160a01b0319169290931691909117909155600e54600590910155005b60405162461bcd60e51b815260048101839052602760248201527f53616665456e67696e652f636f6c6c61746572616c2d747970652d616c726561604482015266191e4b5a5b9a5d60ca1b6064820152608490fd5b604051631886ea7d60e11b8152600490fd5b6116e59150833d851161037e576103708183611ae2565b85611607565b34610391576000366003190112610391576020600a54604051908152f35b346103915761171736611a64565b600054604051632474521560e21b81526000805160206120a7833981519152600482015233602482015291936020936001600160a01b0393909285908290604490829088165afa90811561038557600091611800575b50156110f457821680600052600784526040600020549061178e8683611b69565b9182106103915760005260078452604060002055168060005260068252604060002054916117bc8484611b69565b9283106103915760069160005252604060002055600a546117dd8282611b69565b90811061039157600a556117f46009549182611b69565b90811061039157600955005b6118179150853d871161037e576103708183611ae2565b8661176d565b34610391576020366003190112610391576001600160a01b0361183e6119f8565b1660005260076020526020604060002054604051908152f35b346103915761186536611a3a565b600054604051632474521560e21b81526000805160206120a78339815191526004820152336024820152602092916001600160a01b03919084908290604490829086165afa9081156103855760009161192a575b50156110f4576118f9600692611925966118d66001805414611b1d565b600052600385526040600020600181016118f1838254611ea6565b905554611f78565b9316918260005281815261191284604060002054611ea6565b9260005252604060002055600954611ea6565b600955005b6119419150843d861161037e576103708183611ae2565b866118b9565b34610391576000366003190112610391576000546040516001600160a01b039091168152602090f35b346103915760203660031901126103915760043563ffffffff60e01b8116809103610391576000546301ffc9a760e01b83526004830191909152602090829060249082906001600160a01b03165afa8015610385576020916000916119db575b506040519015158152f35b6119f29150823d811161037e576103708183611ae2565b826119d0565b600435906001600160a01b038216820361039157565b602435906001600160a01b038216820361039157565b604435906001600160a01b038216820361039157565b606090600319011261039157600435906024356001600160a01b0381168103610391579060443590565b6060906003190112610391576001600160a01b0390600435828116810361039157916024359081168103610391579060443590565b60c090600319011261039157600435906001600160a01b036024358181168103610391579160443582811681036103915791606435908116810361039157906084359060a43590565b601f909101601f19168101906001600160401b03821190821017610cfa57604052565b90816020910312610391575180151581036103915790565b15611b2457565b60405162461bcd60e51b815260206004820152601e60248201527f53616665456e67696e652f6e6f742d636f6e7472616374456e61626c656400006044820152606490fd5b91908201809211611b7657565b634e487b7160e01b600052601160045260246000fd5b91908203918211611b7657565b8115611ba3570490565b634e487b7160e01b600052601260045260246000fd5b906000828152602092600384526040906007828420015415600014611dfe578083526003855243600783852001555b8083526003855281832060060154825163313ce56760e01b8152600496916001600160a01b039081169183818a81865afa908115611df4579187939185938591611db0575b5060ff1660128103611d085750602490600854169187519485938492632a5001c960e01b84528d8401525af1908115611cfe578591611ccd575b505b633b9aca0090818102918183041490151715611cba57600794959691611caa611c97600393600c5490612017565b8589528383526005878a20015490612017565b9387525282852001554392200155565b634e487b7160e01b855260118752602485fd5b90508181813d8311611cf7575b611ce48183611ae2565b81010312611cf3575138611c67565b8480fd5b503d611cda565b84513d87823e3d90fd5b92919350600854169260248a8989519687948593632a5001c960e01b85528401525af1918215611da6578692611d73575b5060120360128111611d6057604d8111611d605790611d5b91600a0a90611b99565b611c69565b634e487b7160e01b865260118852602486fd5b9091508281813d8311611d9f575b611d8b8183611ae2565b81010312611d9b57519038611d39565b8580fd5b503d611d81565b85513d88823e3d90fd5b929450509181813d8311611ded575b611dc98183611ae2565b81010312611de9575160ff81168103611de95791839160ff889490611c2d565b8680fd5b503d611dbf565b86513d89823e3d90fd5b611e1160078385200154600d5490611b69565b4311611be8575050509050565b15611e2557565b60405162461bcd60e51b815260206004820152601660248201527514d85999515b99da5b994bdb9bdd0b585b1b1bddd95960521b6044820152606490fd5b9060018060a01b0380911691169081600052600260205260406000208160005260205260016040600020541491141790565b600160ff1b8114611b765760000390565b6000808312801594939192919080611eff57611ec28284611b69565b955b90611ef5575b15611ef157821290811591611ee6575b5015611ee35750565b80fd5b905083101538611eda565b8280fd5b5081851115611eca565b611f11611f0b83611e95565b84611b8c565b95611ec4565b90919060009081841290811582611f5f5783611f338784611b8c565b965b13801590611f55575b15611f515791611ee6575015611ee35750565b8380fd5b5081861115611f3e565b83611f72611f6c88611e95565b84611b69565b96611f35565b600080821293929091600160ff1b91808202838214871661200357828105821483151715612003578096611cf3578115938415611fbc575b5050505015611ee35750565b90919293611fef578114600019831416611fdb57051438808080611fb0565b634e487b7160e01b84526011600452602484fd5b634e487b7160e01b85526012600452602485fd5b634e487b7160e01b85526011600452602485fd5b676765c793fa10079d601b1b808202929190811582850482141715611b76578304036103915761204691611b99565b90565b600092918015918215612060575b50501561039157565b80820294509150811582850482141715611b765761207e9084611b99565b14388061205756fe3b5d4cc60d3ec3516ee8ae083bd60934f6eb2a6c54b1229985c41bfb092b26034f14c8366fa999817edc9f29824eb88a00cc31225e2156f399da4bc91049eb10b0fdd1623e42dbffda4acd8bd643e1cb69f00f0e83abeaa8150ee42cf0fd105ea2646970667358221220ac109d567975aacbd5190ada9857f2a9e9b1560a456b74c3b9cd3a3f2894e6df64736f6c63430008110033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b60003560e01c90816301ffc9a7146119705750806303ee9f22146119475780630e9e11d31461185757806311005b071461181d5780631b142820146117095780631d2a783d146116eb57806320d8a59f146115a757806327a0bb33146115095780632efcc866146114eb57806338013f02146114c25780633d4225041461147157806341b3a0d914611453578063438280dd14611418578063476bb6ef146111eb5780634a11825e146111235780634e14a96714610fb95780634e5111a614610ee857806362a1e17b14610eca57806371d0fb4114610e8f57806375b238fc14610e7357806376e0b4ca14610e2b5780638543d5e014610e0d578063894ba83314610d4b5780638e5313e014610d1057806399bec31514610811578063a39b5580146107f3578063bd5f5be6146107ca578063c5b748c0146107ac578063d07900bb1461072b578063d0e8fa82146106f0578063d2351cee146106c7578063d49d786714610685578063d4b9311d1461056f578063d94d42081461052c578063da49bada146104db578063dc97e84e146104a0578063e401f2e714610484578063e9c265181461045b578063efabcadc146103d0578063fabde80c146103965763fe4f5890146101e257600080fd5b3461039157604036600319011261039157600435602435906044602060018060a01b036000541660405192838092632474521560e21b825260008051602061208783398151915260048301523360248301525afa90811561038557600091610357575b5015610345576102586001805414611b1d565b70676c6f62616c446562744365696c696e6760781b810361027a5750600b555b005b6e726564656d7074696f6e507269636560881b81036102995750600c55005b7664656661756c744c69717569646174696f6e526174696f60481b81036102c05750600e55005b7a1cd859995d1e541c9a58d955985b1a59109b1bd8dad05b5bdd5b9d602a1b036102e957600d55005b60405162461bcd60e51b815260206004820152602e60248201527f53616665456e67696e652f6d6f64696679506172616d65746572732d756e726560448201526d636f676e697a65642d706172616d60901b6064820152608490fd5b60405163599a6c3360e11b8152600490fd5b610378915060203d811161037e575b6103708183611ae2565b810190611b05565b38610245565b503d610366565b6040513d6000823e3d90fd5b600080fd5b34610391576020366003190112610391576001600160a01b036103b76119f8565b1660005260066020526020604060002054604051908152f35b34610391576103de36611a64565b91906103f26103ed3384611e63565b611e1e565b6001600160a01b03918216600081815260066020526040902054906104178583611b8c565b91821161039157600052600660205260406000205516806000526104416040600020549283611b69565b918210610391576000526006602052604060002055600080f35b346103915760003660031901126103915760206040516000805160206120878339815191528152f35b3461039157602036600319011261039157610278600435611bb9565b346103915760003660031901126103915760206040517f9a9aef7c1247d5fc769b0185c052913e39673da29a880317dfd20ebf86f26a498152f35b34610391576040366003190112610391576104f46119f8565b6104fc611a0e565b9060018060a01b038091166000526002602052604060002091166000526020526020604060002054604051908152f35b34610391576020366003190112610391576105456119f8565b33600052600260205260406000209060018060a01b03166000526020526001604060002055600080f35b3461039157606036600319011261039157600435602435906044359160018060a01b0360005416906040518092632474521560e21b8252600080516020612087833981519152600483015233602483015281604460209586935afa90811561038557600091610668575b5015610345576105ec6001805414611b1d565b6a646562744365696c696e6760a81b8103610614575060039160005252600260406000200155005b683232b13a233637b7b960b91b810361063d575060039160005252600360406000200155600080f35b6f6c69717569646174696f6e526174696f60801b036102e95760039160005252600560406000200155005b61067f9150833d851161037e576103708183611ae2565b856105d9565b346103915760203660031901126103915761069e6119f8565b33600052600260205260406000209060018060a01b031660005260205260006040812055600080f35b346103915760003660031901126103915760206040516000805160206120c78339815191528152f35b346103915760003660031901126103915760206040517f76d0567582f23e1e9d7a13eeba60f9aea9d69b8da87ca27a8bf3698b35c653db8152f35b34610391576020366003190112610391576004356000526003602052610100604060002080549060018101549060028101546003820154600483015490600584015492600760018060a01b0360068701541695015495604051978852602088015260408701526060860152608085015260a084015260c083015260e0820152f35b34610391576000366003190112610391576020600c54604051908152f35b346103915760003660031901126103915760206040516000805160206120a78339815191528152f35b34610391576000366003190112610391576020600d54604051908152f35b346103915761081f36611a99565b9061083260018097969495975414611b1d565b60008581526004602090815260408083206001600160a01b0387168452909152908190208151959186018087116001600160401b0390911117610cfa5760019060408701604052805487520154602086015261088d86611bb9565b856000526003602052604060002096604051978861010081011060018060401b036101008b011117610cfa5761010089016040528054895260076001820154918260208c0152600281015460408c0152600381015460608c0152600481015460808c0152600581015460a08c015260018060a01b0360068201541660c08c0152015460e08a015215610ca957610924838751611ea6565b8652610934846020880151611ea6565b6020870152610944848951611ea6565b88526109548460208a0151611f78565b9361096860208a0151602089015190612049565b9061097586600954611ea6565b806009556109898b5160208d015190612049565b60408c0151101590600b5410151660008213151715610c665760008512156000821315166109bd895160808d015190612049565b831115811715610c2b576109d13389611e63565b1715610beb576109e13384611e63565b60008613151715610bab5760006109f83386611e63565b9112151715610b6b576020870151159060608a015111151715610b2f57610a46610a7f9388600052600560205260406000209260018060a01b03169283600052602052604060002054611f17565b9087600052600560205260406000209060005260205260406000205560018060a01b031691826000526006602052604060002054611ea6565b90600052600660205260406000205582600052600460205260406000209060018060a01b0316600052602052600160206040600020928051845501519101556000526003602052600760e0604060002092805184556020810151600185015560408101516002850155606081015160038501556080810151600485015560a081015160058501556006840160018060a01b0360c08301511660018060a01b03198254161790550151910155600080f35b60405162461bcd60e51b815260206004820152601460248201527329b0b332a2b733b4b73297b232b13a233637b7b960611b6044820152606490fd5b60405162461bcd60e51b815260206004820152601860248201527753616665456e67696e652f6e6f742d616c6c6f7765642d7760401b6044820152606490fd5b60405162461bcd60e51b815260206004820152601860248201527729b0b332a2b733b4b73297b737ba16b0b63637bbb2b216bb60411b6044820152606490fd5b60405162461bcd60e51b815260206004820152601860248201527753616665456e67696e652f6e6f742d616c6c6f7765642d7560401b6044820152606490fd5b60405162461bcd60e51b815260206004820152601360248201527253616665456e67696e652f6e6f742d7361666560681b6044820152606490fd5b60405162461bcd60e51b815260206004820152601b60248201527a14d85999515b99da5b994bd8d95a5b1a5b99cb595e18d959591959602a1b6044820152606490fd5b60405162461bcd60e51b815260206004820152602360248201527f53616665456e67696e652f636f6c6c61746572616c2d747970652d6e6f742d696044820152621b9a5d60ea1b6064820152608490fd5b634e487b7160e01b600052604160045260246000fd5b346103915760003660031901126103915760206040517fe453bacb314e78dcd5192e6b1a2b1f0e7c76e92f6b7e429a6a90f04e39db3b768152f35b3461039157600036600319011261039157600054604051632474521560e21b81526000805160206120c7833981519152600482015233602482015290602090829060449082906001600160a01b03165afa90811561038557600091610def575b5015610ddd5760006001557f2d4b4ecff7bd7503135271925520a2f6c0d98c9473ffc1a1e72c92502f51b25e600080a1005b60405163bb0684b760e01b8152600490fd5b610e07915060203d811161037e576103708183611ae2565b81610dab565b34610391576000366003190112610391576020600954604051908152f35b3461039157604036600319011261039157610e44611a0e565b600435600052600560205260406000209060018060a01b03166000526020526020604060002054604051908152f35b3461039157600036600319011261039157602060405160008152f35b346103915760003660031901126103915760206040517f880a91047114272656e533301261260c75e4d11543ac7303d6fe4204579ec7278152f35b34610391576000366003190112610391576020600e54604051908152f35b3461039157608036600319011261039157600435610f04611a0e565b610f0c611a24565b9060643592610f1e6103ed3384611e63565b60008181526005602090815260408083206001600160a01b03958616808552908352922054909391610f508783611b8c565b918211610391578360005260058552604060002090600052845260406000205581600052600583526040600020931692836000528252610f966040600020549485611b69565b938410610391576000526005815260406000209160005252604060002055600080f35b3461039157610fc736611a99565b9490939160018060a01b03918260005416946040518096632474521560e21b82526000805160206120a783398151915260048301523360248301528160446020998a935afa90811561038557600091611106575b50156110f4576110ab6110886110ef996007978560005260048a528760406000209116600052895260018a8160406000208860005260038d526110646040600020938254611ea6565b815501611072848254611ea6565b905561107f838254611ea6565b81550154611f78565b978360005260058852856040600020931692836000528852604060002054611f17565b916000526005865260406000209060005285526040600020551691826000528181526110dc84604060002054611f17565b9260005252604060002055600a54611f17565b600a55005b604051635e9e090760e01b8152600490fd5b61111d9150873d891161037e576103708183611ae2565b8961101b565b346103915761113136611a3a565b600054604051632474521560e21b81526000805160206120a783398151915260048201523360248201526020926001600160a01b039290919084908290604490829087165afa908115610385576000916111ce575b50156110f4576111b19185600052600584526040600020941693846000528352604060002054611ea6565b926000526005815260406000209160005252604060002055600080f35b6111e59150843d861161037e576103708183611ae2565b86611186565b346103915760a036600319011261039157600435611207611a0e565b61120f611a24565b91606435926084359061122183611bb9565b60008381526004602090815260408083206001600160a01b03888116855290835281842090851684528184209684526003835292208254919792959092909161126b908290611f17565b865561129a600161128d81890193611284898654611f17565b85558554611ea6565b9384815501958654611ea6565b80955554946112d86001840154946112d26112ca6112c26112bb898c612049565b988a612049565b9a3390611e63565b913390611e63565b16611e1e565b54906112e960048401548093612049565b84116113d957906112f991612049565b851161139a5760030154809315911015171561135a5715911015171561131b57005b6064906040519062461bcd60e51b82526004820152601860248201527714d85999515b99da5b994bd919589d119b1bdbdc8b591cdd60421b6044820152fd5b60405162461bcd60e51b815260048101859052601860248201527753616665456e67696e652f64656274466c6f6f722d73726360401b6044820152606490fd5b60405162461bcd60e51b815260048101879052601760248201527614d85999515b99da5b994bdb9bdd0b5cd859994b591cdd604a1b6044820152606490fd5b60405162461bcd60e51b815260048101899052601760248201527653616665456e67696e652f6e6f742d736166652d73726360481b6044820152606490fd5b346103915760003660031901126103915760206040517f39f61ca2a1a28fee144218173ec637b649a353e4026b2738c673800e5bf1437b8152f35b34610391576000366003190112610391576020600154604051908152f35b346103915760403660031901126103915761148a611a0e565b600435600052600460205260406000209060018060a01b03166000526020526040806000206001815491015482519182526020820152f35b34610391576000366003190112610391576008546040516001600160a01b039091168152602090f35b34610391576000366003190112610391576020600b54604051908152f35b34610391576020366003190112610391576004353360005260076020526040600020546115368282611b8c565b9081116103915733600052600760205260406000205560066020526040600020546115618282611b8c565b90811161039157336000526006602052604060002055600a546115848282611b8c565b90811161039157600a5561159b6009549182611b8c565b90811161039157600955005b34610391576040366003190112610391576004356115c3611a0e565b9060018060a01b03908160005416906040518092632474521560e21b82526000600483015233602483015281604460209586935afa908115610385576000916116ce575b50156116bc578060005260038252600160406000200154611667576000908152600390915260409020676765c793fa10079d601b1b60018201556006810180546001600160a01b0319169290931691909117909155600e54600590910155005b60405162461bcd60e51b815260048101839052602760248201527f53616665456e67696e652f636f6c6c61746572616c2d747970652d616c726561604482015266191e4b5a5b9a5d60ca1b6064820152608490fd5b604051631886ea7d60e11b8152600490fd5b6116e59150833d851161037e576103708183611ae2565b85611607565b34610391576000366003190112610391576020600a54604051908152f35b346103915761171736611a64565b600054604051632474521560e21b81526000805160206120a7833981519152600482015233602482015291936020936001600160a01b0393909285908290604490829088165afa90811561038557600091611800575b50156110f457821680600052600784526040600020549061178e8683611b69565b9182106103915760005260078452604060002055168060005260068252604060002054916117bc8484611b69565b9283106103915760069160005252604060002055600a546117dd8282611b69565b90811061039157600a556117f46009549182611b69565b90811061039157600955005b6118179150853d871161037e576103708183611ae2565b8661176d565b34610391576020366003190112610391576001600160a01b0361183e6119f8565b1660005260076020526020604060002054604051908152f35b346103915761186536611a3a565b600054604051632474521560e21b81526000805160206120a78339815191526004820152336024820152602092916001600160a01b03919084908290604490829086165afa9081156103855760009161192a575b50156110f4576118f9600692611925966118d66001805414611b1d565b600052600385526040600020600181016118f1838254611ea6565b905554611f78565b9316918260005281815261191284604060002054611ea6565b9260005252604060002055600954611ea6565b600955005b6119419150843d861161037e576103708183611ae2565b866118b9565b34610391576000366003190112610391576000546040516001600160a01b039091168152602090f35b346103915760203660031901126103915760043563ffffffff60e01b8116809103610391576000546301ffc9a760e01b83526004830191909152602090829060249082906001600160a01b03165afa8015610385576020916000916119db575b506040519015158152f35b6119f29150823d811161037e576103708183611ae2565b826119d0565b600435906001600160a01b038216820361039157565b602435906001600160a01b038216820361039157565b604435906001600160a01b038216820361039157565b606090600319011261039157600435906024356001600160a01b0381168103610391579060443590565b6060906003190112610391576001600160a01b0390600435828116810361039157916024359081168103610391579060443590565b60c090600319011261039157600435906001600160a01b036024358181168103610391579160443582811681036103915791606435908116810361039157906084359060a43590565b601f909101601f19168101906001600160401b03821190821017610cfa57604052565b90816020910312610391575180151581036103915790565b15611b2457565b60405162461bcd60e51b815260206004820152601e60248201527f53616665456e67696e652f6e6f742d636f6e7472616374456e61626c656400006044820152606490fd5b91908201809211611b7657565b634e487b7160e01b600052601160045260246000fd5b91908203918211611b7657565b8115611ba3570490565b634e487b7160e01b600052601260045260246000fd5b906000828152602092600384526040906007828420015415600014611dfe578083526003855243600783852001555b8083526003855281832060060154825163313ce56760e01b8152600496916001600160a01b039081169183818a81865afa908115611df4579187939185938591611db0575b5060ff1660128103611d085750602490600854169187519485938492632a5001c960e01b84528d8401525af1908115611cfe578591611ccd575b505b633b9aca0090818102918183041490151715611cba57600794959691611caa611c97600393600c5490612017565b8589528383526005878a20015490612017565b9387525282852001554392200155565b634e487b7160e01b855260118752602485fd5b90508181813d8311611cf7575b611ce48183611ae2565b81010312611cf3575138611c67565b8480fd5b503d611cda565b84513d87823e3d90fd5b92919350600854169260248a8989519687948593632a5001c960e01b85528401525af1918215611da6578692611d73575b5060120360128111611d6057604d8111611d605790611d5b91600a0a90611b99565b611c69565b634e487b7160e01b865260118852602486fd5b9091508281813d8311611d9f575b611d8b8183611ae2565b81010312611d9b57519038611d39565b8580fd5b503d611d81565b85513d88823e3d90fd5b929450509181813d8311611ded575b611dc98183611ae2565b81010312611de9575160ff81168103611de95791839160ff889490611c2d565b8680fd5b503d611dbf565b86513d89823e3d90fd5b611e1160078385200154600d5490611b69565b4311611be8575050509050565b15611e2557565b60405162461bcd60e51b815260206004820152601660248201527514d85999515b99da5b994bdb9bdd0b585b1b1bddd95960521b6044820152606490fd5b9060018060a01b0380911691169081600052600260205260406000208160005260205260016040600020541491141790565b600160ff1b8114611b765760000390565b6000808312801594939192919080611eff57611ec28284611b69565b955b90611ef5575b15611ef157821290811591611ee6575b5015611ee35750565b80fd5b905083101538611eda565b8280fd5b5081851115611eca565b611f11611f0b83611e95565b84611b8c565b95611ec4565b90919060009081841290811582611f5f5783611f338784611b8c565b965b13801590611f55575b15611f515791611ee6575015611ee35750565b8380fd5b5081861115611f3e565b83611f72611f6c88611e95565b84611b69565b96611f35565b600080821293929091600160ff1b91808202838214871661200357828105821483151715612003578096611cf3578115938415611fbc575b5050505015611ee35750565b90919293611fef578114600019831416611fdb57051438808080611fb0565b634e487b7160e01b84526011600452602484fd5b634e487b7160e01b85526012600452602485fd5b634e487b7160e01b85526011600452602485fd5b676765c793fa10079d601b1b808202929190811582850482141715611b76578304036103915761204691611b99565b90565b600092918015918215612060575b50501561039157565b80820294509150811582850482141715611b765761207e9084611b99565b14388061205756fe3b5d4cc60d3ec3516ee8ae083bd60934f6eb2a6c54b1229985c41bfb092b26034f14c8366fa999817edc9f29824eb88a00cc31225e2156f399da4bc91049eb10b0fdd1623e42dbffda4acd8bd643e1cb69f00f0e83abeaa8150ee42cf0fd105ea2646970667358221220ac109d567975aacbd5190ada9857f2a9e9b1560a456b74c3b9cd3a3f2894e6df64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approveSAFEModification(address)": {
        "params": {
          "usr": "Account to give CDP permissions to"
        }
      },
      "confiscateSAFECollateralAndDebt(bytes32,address,address,address,int256,int256)": {
        "params": {
          "cdp": "Target CDP",
          "collateralCounterparty": "Who we take/give collateral to",
          "collateralType": "Collateral type the CDP has locked inside",
          "debtCounterparty": "Who we take/give debt to",
          "deltaCollateral": "Amount of collateral taken/added into the CDP",
          "deltaDebt": "Amount of debt taken/added into the CDP"
        }
      },
      "createUnbackedDebt(address,address,uint256)": {
        "params": {
          "coinDestination": "Usually CoinSavingsAccount who passes the new coins to depositors",
          "debtDestination": "Usually AccountingEngine that can settle decreaseSoldAmount with surplus",
          "rad": "Amount of debt to create (expressed as a number with 45 decimals)"
        }
      },
      "denySAFEModification(address)": {
        "params": {
          "usr": "Account to give CDP permissions to"
        }
      },
      "modifyParameters(bytes32,bytes32,uint256)": {
        "params": {
          "collateralType": "- collateral type we want to modify (collateralTypes[collateralType])",
          "data": "- new value of this variable",
          "what": "- name of variable in struct we want to change"
        }
      },
      "modifyParameters(bytes32,uint256)": {
        "params": {
          "data": "- new value of this variable",
          "what": "- name of variable we want to change"
        }
      },
      "modifySAFECollateralization(bytes32,address,address,address,int256,int256)": {
        "params": {
          "cdp": "Target CDP",
          "collateralSource": "Account we take collateral from/put collateral into",
          "collateralType": "Type of collateral to withdraw/deposit in and from the CDP",
          "debtDestination": "Account from which we credit/debit coins and debt",
          "deltaCollateral": "Amount of collateral added/extract from the CDP",
          "deltaDebt": "Amount of debt to generate/repay"
        }
      },
      "settleDebt(uint256)": {
        "params": {
          "rad": "Amount of debt & coins to destroy (expressed as a number with 45 decimals)"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      },
      "transferSAFECollateralAndDebt(bytes32,address,address,int256,int256)": {
        "params": {
          "collateralType": "Collateral type transferred between CDPs",
          "deltaCollateral": "Amount of collateral to take/add into src and give/take from dst",
          "deltaDebt": "Amount of debt to take/add into src and give/take from dst",
          "dst": "Destination CDP",
          "src": "Source CDP"
        }
      },
      "updateAccumulatedRate(bytes32,address,int256)": {
        "params": {
          "accumulatedRate": "Multiplier applied to the debtAmount in order to calculate the surplus",
          "collateralType": "Collateral type we accrue interest for",
          "surplusDst": "Destination for amount of surplus created by applying the interest rate to debt created by CDPs with 'collateralType'"
        }
      },
      "updateSafetyPrice(bytes32)": {
        "params": {
          "collateralType": "- safetyPrice's collateral type we want to update"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approveSAFEModification(address)": {
        "notice": "Allow an address to modify your CDP. For example coinAdapter should be able to modify your CDP to withdraw all correctly."
      },
      "collateralTypes(bytes32)": {
        "notice": "Total User Debt (drawn StablePro + stability fee accrued) = SAFE.generatedDebt * CollateralType.accumulatedRate"
      },
      "confiscateSAFECollateralAndDebt(bytes32,address,address,address,int256,int256)": {
        "notice": "Normally used by the LiquidationEngine in order to confiscate collateral and debt from a CDP and give them to someone else"
      },
      "createUnbackedDebt(address,address,uint256)": {
        "notice": "Usually called by CoinSavingsAccount in order to create unbacked debt"
      },
      "denySAFEModification(address)": {
        "notice": "Deny an address the rights to modify your CDP"
      },
      "modifyParameters(bytes32,bytes32,uint256)": {
        "notice": "Method to modify values in struct of collateralTypes"
      },
      "modifyParameters(bytes32,uint256)": {
        "notice": "Method to modify some global variables"
      },
      "modifySAFECollateralization(bytes32,address,address,address,int256,int256)": {
        "notice": "Add/remove collateral or put back/generate more debt in a CDP"
      },
      "settleDebt(uint256)": {
        "notice": "Nullify an amount of coins with an equal amount of debt"
      },
      "transferSAFECollateralAndDebt(bytes32,address,address,int256,int256)": {
        "notice": "Transfer collateral and/or debt between CDPs"
      },
      "updateAccumulatedRate(bytes32,address,int256)": {
        "notice": "Usually called by TaxCollector in order to accrue interest on a specific collateral type"
      },
      "updateSafetyPrice(bytes32)": {
        "notice": "Method to update safetyPrice, it's called each time, when function need actual safetyPrice"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 37448,
        "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
        "label": "ACCESS_CONTROL_SINGLETON",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ISuAccessControl)41342"
      },
      {
        "astId": 28792,
        "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
        "label": "contractEnabled",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 28811,
        "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
        "label": "cdpRights",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 28870,
        "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
        "label": "collateralTypes",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_struct(CollateralType)34979_storage)"
      },
      {
        "astId": 28877,
        "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
        "label": "safes",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_struct(SAFE)34984_storage))"
      },
      {
        "astId": 28883,
        "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
        "label": "tokenCollateral",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 28887,
        "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
        "label": "coinBalance",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 28891,
        "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
        "label": "debtBalance",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 28894,
        "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
        "label": "ORACLE",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(ISuOracleAggregator)41645"
      },
      {
        "astId": 28896,
        "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
        "label": "globalDebt",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 28898,
        "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
        "label": "globalUnbackedDebt",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 28900,
        "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
        "label": "globalDebtCeiling",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 28902,
        "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
        "label": "redemptionPrice",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 28904,
        "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
        "label": "safetyPriceValidBlockAmount",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 28906,
        "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
        "label": "defaultLiquidationRatio",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ISuAccessControl)41342": {
        "encoding": "inplace",
        "label": "contract ISuAccessControl",
        "numberOfBytes": "20"
      },
      "t_contract(ISuOracleAggregator)41645": {
        "encoding": "inplace",
        "label": "contract ISuOracleAggregator",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(SAFE)34984_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ISafeEngine.SAFE)",
        "numberOfBytes": "32",
        "value": "t_struct(SAFE)34984_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_struct(SAFE)34984_storage))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => struct ISafeEngine.SAFE))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(SAFE)34984_storage)"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_bytes32,t_struct(CollateralType)34979_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct ISafeEngine.CollateralType)",
        "numberOfBytes": "32",
        "value": "t_struct(CollateralType)34979_storage"
      },
      "t_struct(CollateralType)34979_storage": {
        "encoding": "inplace",
        "label": "struct ISafeEngine.CollateralType",
        "members": [
          {
            "astId": 34964,
            "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
            "label": "debtAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 34966,
            "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
            "label": "accumulatedRate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 34968,
            "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
            "label": "debtCeiling",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 34970,
            "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
            "label": "debtFloor",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 34972,
            "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
            "label": "safetyPrice",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 34974,
            "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
            "label": "liquidationRatio",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 34976,
            "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
            "label": "collateralAddress",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 34978,
            "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
            "label": "safetyPriceBlockNumber",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(SAFE)34984_storage": {
        "encoding": "inplace",
        "label": "struct ISafeEngine.SAFE",
        "members": [
          {
            "astId": 34981,
            "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
            "label": "lockedCollateral",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 34983,
            "contract": "contracts/makerdao/core/SafeEngine.sol:SafeEngine",
            "label": "generatedDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}