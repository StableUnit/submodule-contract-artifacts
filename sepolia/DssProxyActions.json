{
  "address": "0xb8913531f37c360CF1eB99a8c72cA00B924839c5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "internalType": "contract ICollateralJoin",
          "name": "collateralJoin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amt",
          "type": "uint256"
        }
      ],
      "name": "exitTokenCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "internalType": "contract ICollateralJoin",
          "name": "collateralJoin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amt",
          "type": "uint256"
        }
      ],
      "name": "freeTokenCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "taxCollector",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "coinJoin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "generateDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        }
      ],
      "name": "getAvailableToBorrow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        }
      ],
      "name": "getAvailableToWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        }
      ],
      "name": "getCdpId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        }
      ],
      "name": "getCdpInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "internalType": "contract ICollateralJoin",
          "name": "collateralJoin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amt",
          "type": "uint256"
        }
      ],
      "name": "lockTokenCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "taxCollector",
          "type": "address"
        },
        {
          "internalType": "contract ICollateralJoin",
          "name": "collateralJoin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "coinJoin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deltaWad",
          "type": "uint256"
        }
      ],
      "name": "lockTokenCollateralAndGenerateDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "taxCollector",
          "type": "address"
        },
        {
          "internalType": "contract ICollateralJoin",
          "name": "collateralJoin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "coinJoin",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amtC",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "wadD",
          "type": "uint256"
        }
      ],
      "name": "openLockTokenCollateralAndGenerateDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "coinJoin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        }
      ],
      "name": "repayAllDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "internalType": "contract ICollateralJoin",
          "name": "collateralJoin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "coinJoin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amtC",
          "type": "uint256"
        }
      ],
      "name": "repayAllDebtAndFreeTokenCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "coinJoin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "repayDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "internalType": "contract ICollateralJoin",
          "name": "collateralJoin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "coinJoin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amtC",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "wadD",
          "type": "uint256"
        }
      ],
      "name": "repayDebtAndFreeTokenCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "numDeployments": 5,
  "solcInputHash": "c51927dd277f1318ab9de6db4c2443ac",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"contract ICollateralJoin\",\"name\":\"collateralJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"exitTokenCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"contract ICollateralJoin\",\"name\":\"collateralJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"freeTokenCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"taxCollector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"coinJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"generateDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"}],\"name\":\"getAvailableToBorrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"}],\"name\":\"getAvailableToWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"}],\"name\":\"getCdpId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"}],\"name\":\"getCdpInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"contract ICollateralJoin\",\"name\":\"collateralJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"lockTokenCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"taxCollector\",\"type\":\"address\"},{\"internalType\":\"contract ICollateralJoin\",\"name\":\"collateralJoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"coinJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deltaWad\",\"type\":\"uint256\"}],\"name\":\"lockTokenCollateralAndGenerateDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"taxCollector\",\"type\":\"address\"},{\"internalType\":\"contract ICollateralJoin\",\"name\":\"collateralJoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"coinJoin\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amtC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wadD\",\"type\":\"uint256\"}],\"name\":\"openLockTokenCollateralAndGenerateDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"coinJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"}],\"name\":\"repayAllDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"contract ICollateralJoin\",\"name\":\"collateralJoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"coinJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtC\",\"type\":\"uint256\"}],\"name\":\"repayAllDebtAndFreeTokenCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"coinJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"repayDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"contract ICollateralJoin\",\"name\":\"collateralJoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"coinJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wadD\",\"type\":\"uint256\"}],\"name\":\"repayDebtAndFreeTokenCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/makerdao/externalContracts/DssProxyActions.sol\":\"DssProxyActions\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"contracts/makerdao/externalContracts/DssProxyActions.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\n/// DssProxyActions.sol\\n\\n// Copyright (C) 2018-2020 Maker Ecosystem Growth Holdings, INC.\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\n// CHANGED: removed some functions. As default this contract was too large to deploy. Also\\n// TODO: Check if all functions are safe to call\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/IDssCdpManager.sol\\\";\\nimport \\\"../interfaces/ITaxCollector.sol\\\";\\nimport \\\"../interfaces/ICoinJoin.sol\\\";\\nimport \\\"../interfaces/ICollateralJoin.sol\\\";\\n\\npragma solidity ^0.8.0;\\n\\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\\n// WARNING: These functions meant to be used as a a library for a DSProxy. Some are unsafe if you call them directly.\\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\\n\\nabstract contract Math {\\n    uint256 constant RAY = 10 ** 27;\\n\\n    // Internal functions\\n\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x, \\\"mul-overflow\\\");\\n    }\\n\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) <= x, \\\"sub-overflow\\\");\\n    }\\n\\n    function toInt(uint x) internal pure returns (int y) {\\n        y = int(x);\\n        require(y >= 0, \\\"int-overflow\\\");\\n    }\\n\\n    function toRad(uint wad) internal pure returns (uint rad) {\\n        rad = mul(wad, 10 ** 27);\\n    }\\n\\n    function convertTo18(ICollateralJoin collateralJoin, uint256 amt) internal returns (uint256 wad) {\\n        // For those collaterals that have less than 18 decimals precision we need to do the conversion\\n        // before passing to modifySAFECollateralization function\\n        // Adapters will automatically handle the difference of precision\\n        wad = mul(\\n            amt,\\n            10 ** (18 - collateralJoin.decimals())\\n        );\\n    }\\n}\\n\\ncontract DssProxyActions is Math {\\n    // Internal functions\\n    function _getGeneratedDeltaDebt(\\n        ISafeEngine safeEngine,\\n        address taxCollector,\\n        address safe,\\n        bytes32 collateralType,\\n        uint wad\\n    ) internal returns (int deltaDebt) {\\n        // Updates stability fee rate\\n        uint rate = ITaxCollector(taxCollector).taxSingle(collateralType);\\n\\n        // Gets StablePro balance of the safe in the safeEngine\\n        uint stableProBalance = safeEngine.coinBalance(safe);\\n\\n        // If there was already enough StablePro in the safeEngine balance, just exits it without adding more debt\\n        if (stableProBalance < mul(wad, RAY)) {\\n            // Calculates the needed deltaDebt so together with the existing StablePro in the safeEngine\\n            // is enough to exit wad amount of StablePro tokens\\n            deltaDebt = toInt(sub(mul(wad, RAY), stableProBalance) / rate);\\n            // This is neeeded due lack of precision. It might need to sum an extra deltaDebt wei\\n            // (for the given StablePro wad amount)\\n            deltaDebt = mul(uint(deltaDebt), rate) < mul(wad, RAY) ? deltaDebt + 1 : deltaDebt;\\n        }\\n    }\\n\\n    function _getRepaidDeltaDebt(\\n        ISafeEngine safeEngine,\\n        uint stablePro,\\n        address safe,\\n        bytes32 collateralType\\n    ) internal view returns (int deltaDebt) {\\n        // Gets actual rate from the safeEngine\\n        (, uint rate,,,) = safeEngine.collateralTypes(collateralType);\\n        // Gets actual safeDebt value of the safe\\n        (, uint safeDebt) = safeEngine.safes(collateralType, safe);\\n\\n        // Uses the whole StablePro balance in the safeEngine to reduce the debt\\n        deltaDebt = toInt(stablePro / rate);\\n        // Checks the calculated deltaDebt is not higher than safe.safeDebt (total debt), otherwise uses its value\\n        deltaDebt = uint(deltaDebt) <= safeDebt ? - deltaDebt : - toInt(safeDebt);\\n    }\\n\\n    function _getWipeAllWad(\\n        ISafeEngine safeEngine,\\n        address usr,\\n        address safe,\\n        bytes32 collateralType\\n    ) internal view returns (uint wad) {\\n        // Gets actual rate from the safeEngine\\n        (, uint rate,,,) = safeEngine.collateralTypes(collateralType);\\n        // Gets actual safeDebt value of the safe\\n        (, uint safeDebt) = safeEngine.safes(collateralType, safe);\\n        // Gets actual StablePro amount in the safe\\n        uint stablePro = safeEngine.coinBalance(usr);\\n\\n        uint rad = sub(mul(safeDebt, rate), stablePro);\\n        wad = rad / RAY;\\n\\n        // If the rad precision has some dust, it will need to request for 1 extra wad wei\\n        wad = mul(wad, RAY) < rad ? wad + 1 : wad;\\n    }\\n\\n    function _coinJoin_join(bytes32 collateralType, address apt, address cdp, uint wad) internal {\\n        // Gets StablePro from the user's wallet\\n        ICoinJoin(apt).systemCoin().transferFrom(msg.sender, address(this), wad);\\n        // Approves adapter to take the StablePro amount\\n        ICoinJoin(apt).systemCoin().approve(address(apt), wad);\\n        // Joins StablePro into the safeEngine\\n        ICoinJoin(apt).join(collateralType, msg.sender, cdp, wad);\\n    }\\n\\n    function _collateralJoin_join(ICollateralJoin apt, address safe, uint amt) internal {\\n        // Gets token from the user's wallet\\n        apt.collateral().transferFrom(msg.sender, address(this), amt);\\n        // Approves adapter to take the token amount\\n        apt.collateral().approve(address(apt), amt);\\n        // Joins token collateral into the safeEngine\\n        apt.join(safe, amt);\\n    }\\n\\n    //TODO: optimize\\n    function transferCollateral(address manager, uint cdp, address dst, uint wad) internal {\\n        IDssCdpManager(manager).transferCollateral(cdp, dst, wad);\\n    }\\n\\n    function modifySAFECollateralization(address manager, uint cdp, int deltaCollateral, int deltaDebt) internal {\\n        IDssCdpManager(manager).modifySAFECollateralization(cdp, deltaCollateral, deltaDebt);\\n    }\\n\\n    function openSafe(address manager, bytes32 collateralType, address usr) internal returns (uint cdp) {\\n        cdp = IDssCdpManager(manager).openSafe(collateralType, usr);\\n    }\\n\\n    function transferInternalCoins(address manager, uint cdp, address dst, uint rad) internal {\\n        IDssCdpManager(manager).transferInternalCoins(cdp, dst, rad);\\n    }\\n\\n    // Public functions\\n\\n    function lockTokenCollateral(address manager, ICollateralJoin collateralJoin, uint cdp, uint amt) external {\\n        // Takes token amount from user's wallet and joins into the safeEngine\\n        _collateralJoin_join(collateralJoin, address(this), amt);\\n        // Locks token amount into the CDP\\n        IDssCdpManager(manager).safeEngine().modifySAFECollateralization(\\n            IDssCdpManager(manager).collateralTypes(cdp),\\n            IDssCdpManager(manager).safes(cdp),\\n            address(this),\\n            address(this),\\n            toInt(convertTo18(collateralJoin, amt)),\\n            0\\n        );\\n    }\\n\\n//    function safeLockTokenCollateral(address manager,address collateralJoin,uint cdp,uint amt,address owner) public {\\n//        require(IDssCdpManager(manager).owns(cdp) == owner, \\\"bad-owner\\\");\\n//        lockTokenCollateral(manager, collateralJoin, cdp, amt);\\n//    }\\n\\n    function freeTokenCollateral(address manager, ICollateralJoin collateralJoin, uint cdp, uint amt) external {\\n        uint wad = convertTo18(collateralJoin, amt);\\n        // Unlocks token amount from the CDP\\n        modifySAFECollateralization(manager, cdp, -toInt(wad), 0);\\n        // Moves the amount from the CDP safe to proxy's address\\n        transferCollateral(manager, cdp, address(this), wad);\\n        // Exits token amount to the user's wallet as a token\\n        collateralJoin.exit(msg.sender, amt);\\n    }\\n\\n    function exitTokenCollateral(address manager, ICollateralJoin collateralJoin, uint cdp, uint amt) external {\\n        // Moves the amount from the CDP safe to proxy's address\\n        transferCollateral(manager, cdp, address(this), convertTo18(collateralJoin, amt));\\n\\n        // Exits token amount to the user's wallet as a token\\n        collateralJoin.exit(msg.sender, amt);\\n    }\\n\\n    function generateDebt(address manager, address taxCollector, address coinJoin, uint cdp, uint wad) external {\\n        address safe = IDssCdpManager(manager).safes(cdp);\\n        ISafeEngine safeEngine = IDssCdpManager(manager).safeEngine();\\n        bytes32 collateralType = IDssCdpManager(manager).collateralTypes(cdp);\\n        // Generates debt in the CDP\\n        modifySAFECollateralization(\\n            manager,\\n            cdp,\\n            0,\\n            _getGeneratedDeltaDebt(safeEngine, taxCollector, safe, collateralType, wad)\\n        );\\n        // Moves the StablePro amount (balance in the safeEngine in rad) to proxy's address\\n        transferInternalCoins(manager, cdp, address(this), toRad(wad));\\n        // Allows adapter to access to proxy's StablePro balance in the safeEngine\\n        if (safeEngine.cdpRights(address(this), address(coinJoin)) == 0) {\\n            safeEngine.approveSAFEModification(coinJoin);\\n        }\\n        // Exits StablePro to the user's wallet as a token\\n        ICoinJoin(coinJoin).exit(collateralType, msg.sender, msg.sender, wad);\\n    }\\n\\n    function repayDebt(address manager, address coinJoin, uint cdp, uint wad) external {\\n        ISafeEngine safeEngine = IDssCdpManager(manager).safeEngine();\\n        address safe = IDssCdpManager(manager).safes(cdp);\\n        bytes32 collateralType = IDssCdpManager(manager).collateralTypes(cdp);\\n\\n        address own = IDssCdpManager(manager).owns(cdp);\\n        if (own == address(this) || IDssCdpManager(manager).cdpCan(own, cdp, address(this)) == 1) {\\n            // Joins StablePro amount into the safeEngine\\n            _coinJoin_join(collateralType, coinJoin, safe, wad);\\n            // Paybacks debt to the CDP\\n            modifySAFECollateralization(\\n                manager,\\n                cdp,\\n                0,\\n                _getRepaidDeltaDebt(safeEngine, safeEngine.coinBalance(safe), safe, collateralType)\\n            );\\n        } else {\\n            // Joins StablePro amount into the safeEngine\\n            _coinJoin_join(collateralType, coinJoin, address(this), wad);\\n            // Paybacks debt to the CDP\\n            safeEngine.modifySAFECollateralization(\\n                collateralType,\\n                safe,\\n                address(this),\\n                address(this),\\n                0,\\n                _getRepaidDeltaDebt(safeEngine, wad * RAY, safe, collateralType)\\n            );\\n        }\\n    }\\n\\n    function repayAllDebt(address manager, address coinJoin, uint cdp) external {\\n        ISafeEngine safeEngine = IDssCdpManager(manager).safeEngine();\\n        address safe = IDssCdpManager(manager).safes(cdp);\\n        bytes32 collateralType = IDssCdpManager(manager).collateralTypes(cdp);\\n        (, uint safeDebt) = safeEngine.safes(collateralType, safe);\\n\\n        address own = IDssCdpManager(manager).owns(cdp);\\n        if (own == address(this) || IDssCdpManager(manager).cdpCan(own, cdp, address(this)) == 1) {\\n            // Joins StablePro amount into the safeEngine\\n            _coinJoin_join(collateralType, coinJoin, safe, _getWipeAllWad(safeEngine, safe, safe, collateralType));\\n            // Paybacks debt to the CDP\\n            modifySAFECollateralization(manager, cdp, 0, -int(safeDebt));\\n        } else {\\n            // Joins StablePro amount into the safeEngine\\n            _coinJoin_join(collateralType, coinJoin, address(this), _getWipeAllWad(safeEngine, address(this), safe, collateralType));\\n            // Paybacks debt to the CDP\\n            safeEngine.modifySAFECollateralization(\\n                collateralType,\\n                safe,\\n                address(this),\\n                address(this),\\n                0,\\n                -int(safeDebt)\\n            );\\n        }\\n    }\\n\\n    function lockTokenCollateralAndGenerateDebt(\\n        address manager,\\n        address taxCollector,\\n        ICollateralJoin collateralJoin,\\n        address coinJoin,\\n        uint cdp,\\n        uint collateralAmount,\\n        uint deltaWad\\n    ) public {\\n        address safeHandler = IDssCdpManager(manager).safes(cdp);\\n        ISafeEngine safeEngine = IDssCdpManager(manager).safeEngine();\\n        bytes32 collateralType = IDssCdpManager(manager).collateralTypes(cdp);\\n        // Takes token amount from user's wallet and joins into the safeEngine\\n        _collateralJoin_join(collateralJoin, safeHandler, collateralAmount);\\n        // Locks token amount into the SAFE and generates debt\\n        modifySAFECollateralization(\\n            manager,\\n            cdp,\\n            toInt(convertTo18(collateralJoin, collateralAmount)),\\n            _getGeneratedDeltaDebt(safeEngine, taxCollector, safeHandler, collateralType, deltaWad)\\n        );\\n        // Moves the COIN amount (balance in the safeEngine in rad) to proxy's address\\n        transferInternalCoins(manager, cdp, address(this), toRad(deltaWad));\\n        // Allows adapter to access to proxy's COIN balance in the safeEngine\\n        if (safeEngine.cdpRights(address(this), address(coinJoin)) == 0) {\\n            safeEngine.approveSAFEModification(coinJoin);\\n        }\\n        // Exits COIN to the user's wallet as a token\\n        ICoinJoin(coinJoin).exit(collateralType, msg.sender, msg.sender, deltaWad);\\n    }\\n\\n    function openLockTokenCollateralAndGenerateDebt(\\n        address manager,\\n        address taxCollector,\\n        ICollateralJoin collateralJoin,\\n        address coinJoin,\\n        bytes32 collateralType,\\n        uint amtC,\\n        uint wadD\\n    ) external returns (uint cdp) {\\n        cdp = openSafe(manager, collateralType, address(this));\\n        lockTokenCollateralAndGenerateDebt(\\n            manager, taxCollector, collateralJoin, coinJoin, cdp, amtC, wadD\\n        );\\n    }\\n\\n    function repayDebtAndFreeTokenCollateral(\\n        address manager,\\n        ICollateralJoin collateralJoin,\\n        address coinJoin,\\n        uint cdp,\\n        uint amtC,\\n        uint wadD\\n    ) external {\\n        address safe = IDssCdpManager(manager).safes(cdp);\\n        bytes32 collateralType = IDssCdpManager(manager).collateralTypes(cdp);\\n        ISafeEngine safeEngine = IDssCdpManager(manager).safeEngine();\\n        // Joins StablePro amount into the safeEngine\\n        _coinJoin_join(collateralType, coinJoin, safe, wadD);\\n        uint wadC = convertTo18(collateralJoin, amtC);\\n        // Paybacks debt to the CDP and unlocks token amount from it\\n        modifySAFECollateralization(\\n            manager,\\n            cdp,\\n            -toInt(wadC),\\n            _getRepaidDeltaDebt(\\n                safeEngine,\\n                safeEngine.coinBalance(safe),\\n                safe,\\n                collateralType\\n            )\\n        );\\n        // Moves the amount from the CDP safe to proxy's address\\n        transferCollateral(manager, cdp, address(this), wadC);\\n        // Exits token amount to the user's wallet as a token\\n        collateralJoin.exit(msg.sender, amtC);\\n    }\\n\\n    function repayAllDebtAndFreeTokenCollateral(\\n        address manager,\\n        ICollateralJoin collateralJoin,\\n        address coinJoin,\\n        uint cdp,\\n        uint amtC\\n    ) external {\\n        ISafeEngine safeEngine = IDssCdpManager(manager).safeEngine();\\n        address safe = IDssCdpManager(manager).safes(cdp);\\n        bytes32 collateralType = IDssCdpManager(manager).collateralTypes(cdp);\\n        (, uint safeDebt) = safeEngine.safes(collateralType, safe);\\n\\n        // Joins StablePro amount into the safeEngine\\n        _coinJoin_join(collateralType, coinJoin, safe, _getWipeAllWad(safeEngine, safe, safe, collateralType));\\n        uint wadC = convertTo18(collateralJoin, amtC);\\n        // Paybacks debt to the CDP and unlocks token amount from it\\n        modifySAFECollateralization(\\n            manager,\\n            cdp,\\n            -toInt(wadC),\\n            -int(safeDebt)\\n        );\\n        // Moves the amount from the CDP safe to proxy's address\\n        transferCollateral(manager, cdp, address(this), wadC);\\n        // Exits token amount to the user's wallet as a token\\n        collateralJoin.exit(msg.sender, amtC);\\n    }\\n\\n    // Public view functions\\n\\n    function getCdpId(address manager, address user, bytes32 collateralType) public view returns(uint) {\\n        //TODO: optimize\\n        uint256 cdpCount = IDssCdpManager(manager).cdpCount(user);\\n        uint256 cdpId = IDssCdpManager(manager).firstCdpId(user);\\n        for (uint256 i; i < cdpCount; ++i) {\\n            if (IDssCdpManager(manager).collateralTypes(cdpId) == collateralType) {\\n                return cdpId;\\n            }\\n            (,uint256 nextCdpId) = IDssCdpManager(manager).list(cdpId);\\n            cdpId = nextCdpId;\\n        }\\n\\n        return type(uint256).max;\\n    }\\n\\n    function getCdpInfo(address manager, address user, bytes32 collateralType) public view returns(uint, uint) {\\n        uint256 cdpId = getCdpId(manager, user, collateralType);\\n        if (cdpId == type(uint256).max) return (0,0);\\n\\n        ISafeEngine safeEngine = IDssCdpManager(manager).safeEngine();\\n        address safe = IDssCdpManager(manager).safes(cdpId);\\n        return safeEngine.safes(collateralType, safe);\\n    }\\n\\n    // TODO: add checks with debtCeiling and debtFloor\\n    function getAvailableToWithdraw(address manager, address user, bytes32 collateralType) external view returns(uint) {\\n        ISafeEngine safeEngine = IDssCdpManager(manager).safeEngine();\\n\\n        (uint256 lockedCollateral, uint256 generatedDebt) = getCdpInfo(manager, user, collateralType);\\n        (, uint rate, uint safetyPrice,,) = safeEngine.collateralTypes(collateralType);\\n\\n        uint256 minCollateralAmount = mul(generatedDebt, rate) / safetyPrice;\\n        return lockedCollateral > minCollateralAmount ? sub(lockedCollateral, minCollateralAmount) : 0;\\n    }\\n\\n    function getAvailableToBorrow(address manager, address user, bytes32 collateralType) external view returns(uint) {\\n        ISafeEngine safeEngine = IDssCdpManager(manager).safeEngine();\\n\\n        (uint256 lockedCollateral, uint256 generatedDebt) = getCdpInfo(manager, user, collateralType);\\n        (, uint rate, uint safetyPrice,,) = safeEngine.collateralTypes(collateralType);\\n\\n        uint256 usdLimit = mul(lockedCollateral, safetyPrice) / rate;\\n        return usdLimit > generatedDebt ? sub(usdLimit, generatedDebt) : 0;\\n    }\\n}\\n\",\"keccak256\":\"0x8dffc81e3e896e926a6a5120e044e84ea952c6d4b59bb8dcd8d3beab10331376\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/makerdao/interfaces/ICoin.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ICoin is IERC20 {\\n    function mint(address account, uint256 amount) external;\\n    function burn(address account, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x4552a784b9f87c84a4badb298c1d007873304f0f1da6b896defac2df25325f1b\",\"license\":\"UNLICENSED\"},\"contracts/makerdao/interfaces/ICoinJoin.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport {IDisable} from \\\"./IDisable.sol\\\";\\nimport {ICoin} from \\\"./ICoin.sol\\\";\\n\\n/**\\n * @title ITaxCollector\\n **/\\ninterface ICoinJoin is IDisable {\\n    /* ==================== EVENTS ==================== */\\n    event Join(address indexed usr, uint256 wad);\\n    event Exit(address indexed usr, uint256 wad);\\n    event UpdateRewardChef();\\n\\n    /* ====================== VARS ==============-====== */\\n    function systemCoin() external returns (ICoin);\\n\\n    /* ==================== METHODS ==================== */\\n\\n    /**\\n    * @notice Join pegged-coins in the system\\n    * @dev Exited coins have 18 decimals but inside the system they have 45 (rad) decimals.\\n           When we join, the amount (wad) is multiplied by 10**27 (ray)\\n    * @param collateralType Collateral that will be used for borrow\\n    * @param user Account that call borrow/repay function and will receive rewards in RewardChef\\n    * @param cdp Account that will receive the joined coins\\n    * @param wad Amount of external coins to join (18 decimal number)\\n    **/\\n    function join(bytes32 collateralType, address user, address cdp, uint wad) external;\\n\\n    /**\\n    * @notice Exit pegged-coins from the system and inside 'Coin.sol'\\n    * @dev Inside the system, coins have 45 (rad) decimals but outside they have 18 decimals (wad).\\n           When we exit, we specify a wad amount of coins and then the contract automatically multiplies\\n           wad by 10**27 to move the correct 45 decimal coin amount to this adapter\\n    * @param collateralType Collateral that will be used for repay\\n    * @param user Account that call borrow/repay function and will receive rewards in RewardChef\\n    * @param cdp Account that will receive the exited coins\\n    * @param wad Amount of internal coins to join (18 decimal number that will be multiplied by ray)\\n    **/\\n    function exit(bytes32 collateralType, address user, address cdp, uint wad) external;\\n}\\n\",\"keccak256\":\"0x385552ce58cf105165fed078761d025c9bbc48b7345f20762b1398804619b831\",\"license\":\"UNLICENSED\"},\"contracts/makerdao/interfaces/ICollateralJoin.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {IDisable} from \\\"./IDisable.sol\\\";\\n\\n/**\\n * @title ITaxCollector\\n **/\\ninterface ICollateralJoin is IDisable {\\n\\n    /* ===================== EVENTS ===================== */\\n\\n    event Join(address indexed usr, uint256 wad);\\n    event Exit(address indexed usr, uint256 wad);\\n\\n    /* ====================== VARS ===================== */\\n    function decimals() external returns (uint);\\n    function collateral() external view returns(IERC20Metadata);\\n\\n    /* ==================== METHODS ==================== */\\n\\n    /**\\n    * @notice Join collateral in the system\\n    * @param usr Account from which we transferFrom collateral and add it in the system\\n    * @param wad Amount of collateral to transfer in the system (represented as a number with 18 decimals)\\n    **/\\n    function join(address usr, uint wad) external;\\n\\n    /**\\n    * @notice Exit collateral from the system\\n    * @param usr Account to which we transfer the collateral\\n    * @param wad Amount of collateral to transfer to 'account' (represented as a number with 18 decimals)\\n    **/\\n    function exit(address usr, uint wad) external;\\n}\\n\",\"keccak256\":\"0xb276834f1935ca409ecca5542ef257f9b68e1e91c53b9bdc6b73f0db63210c07\",\"license\":\"UNLICENSED\"},\"contracts/makerdao/interfaces/IDisable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\ninterface IDisable {\\n    event DisableContract();\\n\\n    function disableContract() external;\\n}\\n\",\"keccak256\":\"0xcf4b5ac43556af77a174aa3a3a9b51c4fc89b933ef875797650542bf686b8405\",\"license\":\"UNLICENSED\"},\"contracts/makerdao/interfaces/IDssCdpManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/ISafeEngine.sol\\\";\\n\\n/**\\n * @title IDssMiddleware\\n **/\\ninterface IDssCdpManager {\\n\\n    /* ==================== STRUCTS ==================== */\\n\\n    struct List {\\n        uint prev;\\n        uint next;\\n    }\\n\\n    /* ==================== EVENTS ===================== */\\n\\n    event NewCdp(address indexed usr, address indexed own, uint indexed cdp);\\n\\n\\n    /* ===================== VARS ====================== */\\n\\n    // @notice CDPId => CollateralType\\n    function collateralTypes(uint cdp) external view returns (bytes32);\\n    // @notice CDPId => CdpHandler\\n    function safes(uint cdp) external view returns (address);\\n    // @notice Address of safeEngine\\n    function safeEngine() external view returns (ISafeEngine);\\n    // @notice CDPId => Owner\\n    function owns(uint cdp) external view returns (address);\\n    // @notice Owner => CDPId => Allowed Addr => True/False\\n    function cdpCan(address owner, uint cdp, address allowedAddress) external view returns (uint);\\n    // @notice Owner => Amount of CDPs\\n    function cdpCount(address owner) external view returns (uint);\\n    // @notice Owner => First CDPId\\n    function firstCdpId(address owner) external view returns (uint);\\n    // @notice Owner => Last CDPId\\n    function lastCdpId(address owner) external view returns (uint);\\n    // @notice CDPId => Prev & Next CDPIds (double linked list)\\n    function list(uint cdp) external view returns (uint prev, uint next);\\n\\n    /* ==================== METHODS ==================== */\\n\\n    // @notice Allow/disallow a usr address to manage the cdp.\\n    function cdpAllow(uint cdp, address usr, uint ok) external;\\n\\n    // @notice Allow/disallow a usr address to quit to the the sender urn.\\n    function allowHandler(address usr, uint ok) external;\\n\\n    // @notice Open a new cdp for a given usr address.\\n    function openSafe(bytes32 collateralType, address usr) external returns (uint);\\n\\n    // @notice Give the cdp ownership to a dst address.\\n    function transferSafeOwnership(uint cdp, address dst) external;\\n\\n    // @notice Modify the cdp keeping the generated StablePro or collateral freed in the cdp urn address.\\n    function modifySAFECollateralization(uint cdp, int deltaCollateral, int deltaDebt) external;\\n\\n    // @notice Transfer wad amount of cdp collateral from the cdp address to a dst address.\\n    function transferCollateral(uint cdp, address dst, uint wad) external;\\n\\n    // @notice Transfer wad amount of any type of collateral (ilk) from the cdp address to a dst address.\\n    // This function has the purpose to take away collateral from the system that doesn't correspond to the cdp\\n    // but was sent there wrongly.\\n    function transferCollateral(bytes32 ilk, uint cdp, address dst, uint wad) external;\\n\\n    // @notice Transfer wad amount of StablePro from the cdp address to a dst address.\\n    function transferInternalCoins(uint cdp, address dst, uint rad) external;\\n\\n    // @notice Quit the system, migrating the cdp (lockedCollateral, generatedDebt) to a different dst urn\\n    function quit(uint cdp, address dst) external;\\n\\n    // @notice Import a position from src urn to the urn owned by cdp\\n    function enter(address src, uint cdp) external;\\n\\n    // @notice Move a position from cdpSrc urn to the cdpDst urn\\n    function moveSAFE(uint cdpSrc, uint cdpDst) external;\\n}\\n\",\"keccak256\":\"0x55c641947b4cefe2e1dbc413e579b960d64bd55351942b2e88494bb21913fb39\",\"license\":\"UNLICENSED\"},\"contracts/makerdao/interfaces/ISafeEngine.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// TODO: check how to operate with license and use one for all contracts\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title SafeEngine\\n * @notice The single source of truth for the Maker Protocol. It contains the accounting system of the core Vault,\\n * Internal StablePro balances, and collateral state. It houses the public interface for Vault management,\\n * allowing safe(= CDP or Vault) owners to adjust their Vault state balances. It also contains the public interface\\n * for Vault fungibility, allowing safe (Vault) owners to transfer, split, and merge Vaults.\\n * Excluding these interfaces, SAFEEngine is accessed through trusted smart contract modules.\\n **/\\ninterface ISafeEngine {\\n    /* ==================== EVENTS ==================== */\\n    event DisableContract();\\n\\n    /* ==================== METHODS ==================== */\\n\\n    // --- Data ---\\n    struct CollateralType {\\n        uint256 debtAmount;       // Total debt issued for this specific collateral type                          [wad]\\n        uint256 accumulatedRate;  // Accumulator for interest accrued on this collateral type                     [ray]\\n        uint256 safetyPrice;      // Floor price at which a CDP is allowed to generate debt                       [ray]\\n        uint256 debtCeiling;      // Maximum amount of debt that can be generated with this collateral type       [rad]\\n        uint256 debtFloor;        // Minimum amount of debt that must be generated by a CDP using this collateral [rad]\\n    }\\n    struct SAFE {\\n        uint256 lockedCollateral; // Total amount of collateral locked in a SAFE/CDP  [wad]\\n        uint256 generatedDebt;    // Total amount of debt generated by a SAFE/CDP     [wad]\\n    }\\n\\n    // --- VARS ---\\n\\n    function safes(bytes32, address) external view returns (uint, uint);\\n\\n    function collateralTypes(bytes32) external view returns (\\n        uint256 debtAmount,      // [wad]\\n        uint256 accumulatedRate, // [ray]\\n        uint256 safetyPrice,     // [ray]\\n        uint256 debtCeiling,     // [rad]\\n        uint256 debtFloor        // [rad]\\n    );\\n\\n    function tokenCollateral(bytes32, address) external view returns (uint256);\\n\\n    function coinBalance(address) external view returns (uint256);\\n\\n    function debtBalance(address) external view returns (uint256);\\n\\n    function cdpRights(address, address) external view returns (uint256);\\n\\n    // --- Auth ---\\n    /**\\n     * @notice Allow an address to modify your CDP.\\n     * For example coinAdapter should be able to modify your CDP to withdraw all correctly.\\n     * @param usr Account to give CDP permissions to\\n     */\\n    function approveSAFEModification(address usr) external;\\n\\n    /**\\n     * @notice Deny an address the rights to modify your CDP\\n     * @param usr Account to give CDP permissions to\\n     */\\n    function denySAFEModification(address usr) external;\\n\\n    // --- Administration ---\\n\\n    function initializeCollateralType(bytes32 collateralType) external;\\n    // TODO: check why not to use strings instead of bytes32\\n    /**\\n     * @notice Method to modify some global variables\\n     * @param what - name of variable we want to change\\n     * @param data - new value of this variable\\n     */\\n    function modifyParameters(bytes32 what, uint data) external;\\n    /**\\n     * @notice Method to modify values in struct of collateralTypes\\n     * @param collateralType - collateral type we wand to modify (collateralTypes[collateralType])\\n     * @param what - name of variable in struct we want to change\\n     * @param data - new value of this variable\\n     */\\n    function modifyParameters(bytes32 collateralType, bytes32 what, uint data) external;\\n\\n    // --- Fungibility ---\\n    function modifyCollateralBalance(bytes32 collateralType, address usr, int256 wad) external;\\n    function transferCollateral(bytes32 collateralType, address src, address dst, uint256 wad) external;\\n    function transferInternalCoins(address src, address dst, uint256 rad) external;\\n\\n    // --- CDP Manipulation ---\\n    /**\\n     * @notice Add/remove collateral or put back/generate more debt in a CDP\\n     * @param collateralType Type of collateral to withdraw/deposit in and from the CDP\\n     * @param cdp Target CDP\\n     * @param collateralSource Account we take collateral from/put collateral into\\n     * @param debtDestination Account from which we credit/debit coins and debt\\n     * @param deltaCollateral Amount of collateral added/extract from the CDP\\n     * @param deltaDebt Amount of debt to generate/repay\\n     */\\n    function modifySAFECollateralization(\\n        bytes32 collateralType,\\n        address cdp,\\n        address collateralSource,\\n        address debtDestination,\\n        int deltaCollateral,\\n        int deltaDebt\\n    ) external;\\n\\n    // --- CDP Fungibility ---\\n    /**\\n     * @notice Transfer collateral and/or debt between CDPs\\n     * @param collateralType Collateral type transferred between CDPs\\n     * @param src Source CDP\\n     * @param dst Destination CDP\\n     * @param deltaCollateral Amount of collateral to take/add into src and give/take from dst\\n     * @param deltaDebt Amount of debt to take/add into src and give/take from dst\\n     */\\n    function transferSAFECollateralAndDebt(\\n        bytes32 collateralType,\\n        address src,\\n        address dst,\\n        int deltaCollateral,\\n        int deltaDebt\\n    ) external;\\n\\n    // --- CDP Confiscation ---\\n    /**\\n     * @notice Normally used by the LiquidationEngine in order to confiscate collateral and\\n       debt from a CDP and give them to someone else\\n     * @param collateralType Collateral type the CDP has locked inside\\n     * @param cdp Target CDP\\n     * @param collateralCounterparty Who we take/give collateral to\\n     * @param debtCounterparty Who we take/give debt to\\n     * @param deltaCollateral Amount of collateral taken/added into the CDP\\n     * @param deltaDebt Amount of debt taken/added into the CDP\\n     */\\n    function confiscateSAFECollateralAndDebt(\\n        bytes32 collateralType,\\n        address cdp,\\n        address collateralCounterparty,\\n        address debtCounterparty,\\n        int deltaCollateral,\\n        int deltaDebt\\n    ) external;\\n\\n    // --- Settlement ---\\n    /**\\n     * @notice Nullify an amount of coins with an equal amount of debt\\n     * @param rad Amount of debt & coins to destroy (expressed as a number with 45 decimals)\\n     */\\n    function settleDebt(uint rad) external;\\n\\n    /**\\n     * @notice Usually called by CoinSavingsAccount in order to create unbacked debt\\n     * @param debtDestination Usually AccountingEngine that can settle decreaseSoldAmount with surplus\\n     * @param coinDestination Usually CoinSavingsAccount who passes the new coins to depositors\\n     * @param rad Amount of debt to create (expressed as a number with 45 decimals)\\n     */\\n    function createUnbackedDebt(address debtDestination, address coinDestination, uint rad) external;\\n\\n    // --- Rates ---\\n    /**\\n     * @notice Usually called by TaxCollector in order to accrue interest on a specific collateral type\\n     * @param collateralType Collateral type we accrue interest for\\n     * @param surplusDst Destination for amount of surplus created by applying the interest rate\\n       to debt created by CDPs with 'collateralType'\\n     * @param accumulatedRate Multiplier applied to the debtAmount in order to calculate the surplus\\n     */\\n    function updateAccumulatedRate(bytes32 collateralType, address surplusDst, int accumulatedRate) external;\\n}\\n\",\"keccak256\":\"0x11845dee83c9eff2f02955a03ada14f08538121841c83f8a5ff8f13e874f2a8d\",\"license\":\"UNLICENSED\"},\"contracts/makerdao/interfaces/ITaxCollector.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ITaxCollector\\n **/\\ninterface ITaxCollector {\\n    /* ==================== EVENTS ==================== */\\n    event DisableContract();\\n\\n    /* ==================== STRUCTS ==================== */\\n\\n    struct CollateralType {\\n        uint256 stabilityFee;      // Collateral-specific, per-second stability fee contribution [ray]\\n        uint256 latestUpdateTime;  // Time of last taxSingle [unix epoch time]\\n    }\\n\\n\\n    /* ==================== METHODS ==================== */\\n\\n    // --- Administration ---\\n    function initializeCollateralType(bytes32 collateralType) external;\\n    function modifyParameters(bytes32 collateralType, bytes32 what, uint data) external;\\n    function modifyParameters(bytes32 what, uint data) external;\\n    function modifyParameters(bytes32 what, address data) external;\\n\\n\\n    // --- Stability Fee Collection ---\\n    /**\\n     * @notice Collect tax from a single collateral type\\n     * @param collateralType Collateral type to tax\\n     */\\n    function taxSingle(bytes32 collateralType) external returns (uint rate);\\n}\\n\",\"keccak256\":\"0x7d66d3db88a9a4dd1cf1e240975dc4df1f6e39917776dee98d1065982328f1dc\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657612694908161001c8239f35b600080fdfe60406080815260048036101561001457600080fd5b600091823560e01c806303f2cd05146113b65783816313cc55e4146111ae575080632581700814610eb75780632af7ec8b14610e915780632dc469a314610cac578063434fa72214610bb65780636093c97514610ae65780637a2a103114610aca5780637a4d9a47146109f25780637f5b1a1b146109ab578381638f86e01514610819578163b02f9e3d1461058857508063bb44afd3146104595763f7f898b0146100be57600080fd5b34610455576060366003190112610455576100d761142b565b906100e0611457565b81516367aea31360e01b81529093604435926001600160a01b03858116939092602092899190848483818a5afa93841561044b57839461042c575b50805163434efcbd60e01b81528281018990529480866024818b5afa958615610422578496610403575b5081516348c5be7f60e11b81528381018a90529681886024818c5afa9788156103f95785986103c2575b508251630f50894160e21b81529886821692909190848b806101948c8e8b8401611c90565b0381875afa9a8b156103b857879b610387575b50845163040b0d8960e51b81528681018d9052918183602481875afa92831561037d57889361034e575b50821630149182156102c9575b50501590506102185750505050918161021597610204838361020a9661020f9998611f54565b92611da1565b611925565b916119ad565b80f35b9496929990975061020a919850610235868861023e963090611f54565b90309087611da1565b94813b156102c55784516399bec31560e01b81529081019283526001600160a01b039093166020830152306040830181905260608301526000608083015260a08201949094529092849184919082908490829060c00103925af19081156102bc57506102a957505080f35b6102b2906114f1565b6102b95780f35b80fd5b513d84823e3d90fd5b8680fd5b6102ed925081938d87518095819482936302d75da360e51b845230918d8501611c30565b03915afa91821561034457869261030c575b50506001148038806101de565b8196508092503d831161033d575b610324818361151a565b810103126103385760018c945190386102ff565b600080fd5b503d61031a565b84513d88823e3d90fd5b61036f919350823d8411610376575b610367818361151a565b81019061153d565b91386101d1565b503d61035d565b86513d8a823e3d90fd5b6103a8919b50853d87116103b1575b6103a0818361151a565b810190611c7a565b905099386101a7565b503d610396565b85513d89823e3d90fd5b82809299508196503d83116103f2575b6103dc818361151a565b81010312610338579251958b939061019461016f565b503d6103d2565b83513d87823e3d90fd5b8161041b9297503d881161037657610367818361151a565b9438610145565b82513d86823e3d90fd5b610444919450853d871161037657610367818361151a565b923861011b565b81513d85823e3d90fd5b8280fd5b5082346102b957610469366114bc565b84516367aea31360e01b81526001600160a01b03939290919060208389818888165afa92831561057e578693610552575b506104ab8260249260a0959661251d565b9890958851958694859363d07900bb60e01b8552840152165afa90811561054857946104ed9160209685908692610510575b506104e891926116de565b61164c565b9081811115610508576105009250611bea565b905b51908152f35b505090610502565b6104e89250610536915060a03d8111610541575b61052e818361151a565b810190611c53565b5050915090916104dd565b503d610524565b84513d85823e3d90fd5b60a09350826024926105746104ab9360203d811161037657610367818361151a565b955092505061049a565b87513d88823e3d90fd5b808484346108155760a0366003190112610815576105a461142b565b916105ad611457565b6105b5611441565b835163434efcbd60e01b81526064358482018190526001600160a01b0387811697608435959194936020939284826024818e5afa91821561080b579089949392918d926107ec575b508a516367aea31360e01b81529486908690818f5afa9485156107c3578d956107cd575b50858b51809d6348c5be7f60e11b8252868d830152815a91602492fa9b8c156107c3578d9c610785575b509161066a6106638a8e88979561067b978d9a611a81565b83836119ad565b6106738961166c565b913091611bf7565b16908651636d24dd6d60e11b815281818061069987308c8401611a3f565b0381865afa91821561077b578a9261074a575b5050156106f9575b5016803b156106f5576106e29486809486519788958694859363f0b522db60e01b8552339133918601611a59565b03925af19081156102bc57506102a95750f35b8580fd5b803b15610746578780916024885180948193631b29a84160e31b83528888168b8401525af1801561037d57908891610732575b506106b4565b61073b906114f1565b6102c557868961072c565b8780fd5b819a508092503d8311610774575b610762818361151a565b81010312610338578897518a806106ac565b503d610758565b88513d8c823e3d90fd5b929c509a5092918482813d81116107bc575b6107a1818361151a565b81010312610338578c9b87948993519c91935091939461064b565b503d610797565b8b513d8f823e3d90fd5b6107e5919550863d881161037657610367818361151a565b938e610621565b610804919250863d881161037657610367818361151a565b908e6105fd565b8a513d8e823e3d90fd5b5050fd5b808484346108155761082a36611483565b92909194610839843088611770565b84516367aea31360e01b81526020966001600160a01b039384169591888185818a5afa90811561077b579085918b9161098e575b5016958751956348c5be7f60e11b875280858801528987602481855afa968715610984578b97610951575b50899060248a518094819363434efcbd60e01b8352898301525afa98891561077b578a99610926575b50506108d5916108d09161159b565b61155c565b91843b1561074657879460c49386928851998a9788966399bec31560e01b885287015216602485015230604485015230606485015260848401528160a48401525af19081156102bc57506102a95750f35b6108d09299506108d593918161094792903d1061037657610367818361151a565b98918193506108c1565b9a509550888a813d811161097d575b61096a818361151a565b8101031261033857888b9a519690610898565b503d610960565b89513d8d823e3d90fd5b6109a591508a3d8c1161037657610367818361151a565b8c61086d565b83346102b95760e03660031901126102b9576102156109c861142b565b6109d0611457565b6109d8611441565b916109e161146d565b60c4359360a43593608435936120b9565b50829034610ac65760e0366003190112610ac657610a0e61142b565b92610a17611457565b90610a20611441565b610a4b6020610a2d61146d565b938651809381926339855fd160e11b83523090608435908401611c90565b0381896001600160a01b038c165af1958615610abb5795610a7f575b509484610502939260209760c4359460a435946120b9565b92919450946020833d8211610ab3575b81610a9c6020938361151a565b810103126103385791519194919390916020610a67565b3d9150610a8f565b8551903d90823e3d90fd5b5080fd5b838234610ac657602090610500610ae0366114bc565b9161235f565b50829034610ac657610af736611483565b93929591610b05858261159b565b96610b1261020a8961155c565b6001600160a01b03939082851690813b1561033857600091606483928a5194859384926318f0203f60e31b8452888d85015260248401528160448401525af18015610bab5791610b6d93918a9b93610b9c575b503091611957565b1692833b15610b98576106e293859283855180978195829463ef693bed60e01b845233908401611755565b8480fd5b610ba5906114f1565b8b610b65565b87513d6000823e3d90fd5b5082346102b957610bc6366114bc565b84516367aea31360e01b81526001600160a01b0396939290919060208386818b88165afa92831561057e578693610c80575b50610c098260249260a0959661251d565b9590988851958694859363d07900bb60e01b8552840152165afa80156105485794610c449160209685918691610c5657506104e891926116de565b81811115610508576105009250611bea565b6104e89250610c73915060a03d81116105415761052e818361151a565b50919390925090506104dd565b60a0935082602492610ca2610c099360203d811161037657610367818361151a565b9550925050610bf8565b5090346104555760a03660031901126104555782610cc861142b565b610cd0611457565b93610cd9611441565b81516367aea31360e01b815295608435936001600160a01b0392838216916064356020808c8c81885afa94851561077b578b9c8b9c999a9b96610e72575b50895163434efcbd60e01b81529c8d01839052818d602481845afa9c8d1561080b578c9d610e53575b50818360248b8d5194859384926348c5be7f60e11b84528301525afa91821561080b578c92610e22575b50508851630f50894160e21b81529b898d80610d8984868e8401611c90565b03818b8a165afa94851561080b578c9d8b610b6d999a9b9c9d9e97610def575b5050610204838380610dbd9798999a611f54565b610de8610dca8a8761159b565b93610de0610dda61020a8761155c565b91611925565b9083856119f5565b3091611957565b610dbd959697508380610e1361020494848995903d106103b1576103a0818361151a565b9050999897505050508c610da9565b819c508092503d8311610e4c575b610e3a818361151a565b81010312610338578b99513880610d6a565b503d610e30565b610e6b919d50823d841161037657610367818361151a565b9b38610d40565b610e8a919650823d841161037657610367818361151a565b9438610d17565b5082346102b95750610eab610ea5366114bc565b9161251d565b82519182526020820152f35b503461045557608036600319011261045557610ed161142b565b90610eda611457565b81516367aea31360e01b815293604435926001600160a01b038581169392602090606435828a83818a5afa998a156111a4578b9a611185575b50845163434efcbd60e01b81528281018990529583876024818b5afa96871561117b578c9761115c575b5085516348c5be7f60e11b81528381018a9052978489602481845afa9889156110fb578d9961112d575b508c875163040b0d8960e51b81528b868201528681602481865afa91821561112257908792611105575b50308882161492831561108d575b5050506000146110335783929187610fb7928a611da1565b6024855180958193633eaf7a0360e21b8352818a16908301528c165afa92831561102a57508892610ff4575b50509061020f929161021596611ca9565b908094939250813d8311611023575b61100d818361151a565b810103126103385791519091908561020f610fe3565b503d611003565b513d8a823e3d90fd5b909a999497508a91985061104d9250959495309086611da1565b811690676765c793fa10079d601b1b9788810298818a04149015171561107a578284889961023e93611ca9565b634e487b7160e01b875260118652602487fd5b6110af93508c8a518095819482936302d75da360e51b845230918c8501611c30565b03915afa80156110fb578d906110cd575b6001915014843880610f9f565b508481813d83116110f4575b6110e3818361151a565b8101031261033857600190516110c0565b503d6110d9565b87513d8f823e3d90fd5b61111c9150823d841161037657610367818361151a565b38610f91565b8951903d90823e3d90fd5b9098508481813d8311611155575b611145818361151a565b8101031261033857519738610f67565b503d61113b565b611174919750843d861161037657610367818361151a565b9538610f3d565b86513d8e823e3d90fd5b61119d919a50833d851161037657610367818361151a565b9838610f13565b85513d8d823e3d90fd5b808484346108155760c0366003190112610815576111ca61142b565b916111d3611457565b6111db611441565b835163434efcbd60e01b8152606435848201819052608435966001600160a01b0394939092858416916020908183602481875afa92831561080b578c93611397575b5089516348c5be7f60e11b8152898101869052938285602481845afa9485156107c3578d95611357575b5090828a9796959493928c51988980926367aea31360e01b82525afa9687156107c357908b949392918e98611334575b50611287908360a4359186611da1565b6112918c8961159b565b9689828c60246112a361020a8d61155c565b985180948193633eaf7a0360e21b8352818a169083015286165afa928315611328578f936112e4575b505092610b6d9796959492610de092610de895611ca9565b8092959f508193509897969593983d8311611321575b611304818361151a565b8101031261033857518d9c95969495939491939282610de86112cc565b503d6112fa565b8f8e51903d90823e3d90fd5b61128791985061135090833d851161037657610367818361151a565b9790611277565b8380939e5081989796509194933d8311611390575b611376818361151a565b810103126103385794518c9b949593949093919282611247565b503d61136c565b6113af919350823d841161037657610367818361151a565b918d61121d565b503461045557826113de6113c936611483565b9391926113d6858561159b565b913091611957565b6001600160a01b0316803b156104555761140e9483855180978195829463ef693bed60e01b845233908401611755565b03925af19081156102bc5750611422575080f35b610215906114f1565b600435906001600160a01b038216820361033857565b604435906001600160a01b038216820361033857565b602435906001600160a01b038216820361033857565b606435906001600160a01b038216820361033857565b6080906003190112610338576001600160a01b039060043582811681036103385791602435908116810361033857906044359060643590565b6060906003190112610338576001600160a01b0390600435828116810361033857916024359081168103610338579060443590565b6001600160401b03811161150457604052565b634e487b7160e01b600052604160045260246000fd5b601f909101601f19168101906001600160401b0382119082101761150457604052565b9081602091031261033857516001600160a01b03811681036103385790565b906000821261156757565b60405162461bcd60e51b815260206004820152600c60248201526b696e742d6f766572666c6f7760a01b6044820152606490fd5b60405163313ce56760e01b815260009392916020908290600490829088906001600160a01b03165af190811561164157849161160c575b50601203601281116115f857604d81116115f8576115f5929350600a0a906116de565b90565b634e487b7160e01b84526011600452602484fd5b90506020813d8211611639575b816116266020938361151a565b810103126116355751386115d2565b8380fd5b3d9150611619565b6040513d86823e3d90fd5b8115611656570490565b634e487b7160e01b600052601260045260246000fd5b676765c793fa10079d601b1b8082029291908115828504821417156116c85783040361169457565b60405162461bcd60e51b815260206004820152600c60248201526b6d756c2d6f766572666c6f7760a01b6044820152606490fd5b634e487b7160e01b600052601160045260246000fd5b6000929180159182156116f5575b50501561169457565b808202945091508115828504821417156116c857611713908461164c565b1438806116ec565b90816020910312610338575180151581036103385790565b6001600160a01b03918216815291166020820152604081019190915260600190565b6001600160a01b039091168152602081019190915260400190565b6040805163d8dfeb4560e01b8082526001600160a01b039384169592949360209283816004818b5afa908115610bab57600091611908575b5083875180926323b872dd60e01b825281600086826117cc8c303360048501611733565b0393165af18015610bab576118eb575b50855191825282826004818a5afa9182156118e0576118219288859387936000936118be575b506000908a5180978196829563095ea7b360e01b845260048401611755565b0393165af180156118b357611885575b5050833b156103385761185d93600092838551809781958294633b4da69f60e01b845260048401611755565b03925af190811561187b57506118705750565b611879906114f1565b565b513d6000823e3d90fd5b816118a492903d106118ac575b61189c818361151a565b81019061171b565b503880611831565b503d611892565b85513d6000823e3d90fd5b60009193506118d990863d881161037657610367818361151a565b9290611802565b86513d6000823e3d90fd5b61190190843d86116118ac5761189c818361151a565b50386117dc565b61191f9150843d861161037657610367818361151a565b386117a8565b600160ff1b81146116c85760000390565b9081526001600160a01b039091166020820152604081019190915260600190565b919290916001600160a01b0316803b156103385761199093600080946040519687958694859363438ac0d160e11b855260048501611936565b03925af180156119a1576118705750565b6040513d6000823e3d90fd5b6001600160a01b031691823b156103385760646000928360405195869485936318f0203f60e31b8552600485015282602485015260448401525af180156119a1576118705750565b9091906001600160a01b0316803b15610338576000928360649260405196879586946318f0203f60e31b86526004860152602485015260448401525af180156119a1576118705750565b6001600160a01b0391821681529116602082015260400190565b9081526001600160a01b03918216602082015291166040820152606081019190915260800190565b94939091600095600093604051956336286ddd60e11b8752600487015260209283876024818960018060a01b038097165af1968715611bdf578697611baf575b50604051633eaf7a0360e21b8152908216600482015291839183916024918391165afa918215611641578492611b81575b5050611afd8261166c565b8110611b0a575b50505050565b83949550611b2f6108d08394956104e8611b3694611b2a611b3c9761166c565b611bea565b94856116de565b9161166c565b1115611b7b57600182019181600184129112908015821691151617611b6757505b9038808080611b04565b634e487b7160e01b81526011600452602490fd5b50611b5d565b90809250813d8311611ba8575b611b98818361151a565b8101031261045557513880611af2565b503d611b8e565b9096508381813d8311611bd8575b611bc7818361151a565b810103126106f55751956024611ac1565b503d611bbd565b6040513d88823e3d90fd5b9081039081116116c85790565b919290916001600160a01b0316803b156103385761199093600080946040519687958694859363660e160760e01b855260048501611936565b6001600160a01b0391821681526020810192909252909116604082015260600190565b908160a0910312610338578051916020820151916040810151916080606083015192015190565b9190826040910312610338576020825192015190565b9081526001600160a01b03909116602082015260400190565b6040805163d07900bb60e01b8152600481018690529094939092916001600160a01b031660a084602481845afa9384156118e05790869291600095611d78575b50611d0b9394958351809581948293630f50894160e21b845260048401611c90565b03915afa93841561187b57600094611d4b575b5050611d2d916108d09161164c565b818111611d3e576115f59150611925565b5061020a6115f59161155c565b6108d0929450611d2d939181611d6c92903d106103b1576103a0818361151a565b90509391819350611d1e565b611d0b949550611d959060a03d81116105415761052e818361151a565b50505090509493611ce9565b6040805163a7e9445560e01b80825260009796929592946001600160a01b03808216959360209392918b918581600481868d5af1908115611f2b57611e0a83928c868f8b958294611f35575b50519586809581946323b872dd60e01b8352303360048501611733565b0393165af18015611f2b57611f0e575b5089519384528484600481858c5af1938415611f04579282611e5d959287958c9594611ee5575b508c5180978196829563095ea7b360e01b845260048401611755565b0393165af18015611edb57611ebd575b5050823b156102c5579186939184611e9f9798948751988995869485936319b6fb0160e01b8552339060048601611a59565b03925af1918215611eb35750506118705750565b51903d90823e3d90fd5b81611ed392903d106118ac5761189c818361151a565b503880611e6d565b87513d8b823e3d90fd5b611efd919450863d881161037657610367818361151a565b9238611e41565b8a513d84823e3d90fd5b611f2490863d88116118ac5761189c818361151a565b5038611e1a565b8b513d85823e3d90fd5b611f4d919450863d881161037657610367818361151a565b9238611ded565b6040805163d07900bb60e01b8152600481018690529395949093926001600160a01b03928316929160a085602481875afa9485156118e057978691611fb79899600097612094575b508251630f50894160e21b8152988992839260048401611c90565b0381865afa9586156118b35760009661206b575b508451633eaf7a0360e21b81529116600482015290602090829060249082905afa92831561187b5750600092612036575b50611b2a9061200a936116de565b676765c793fa10079d601b1b8104906120228261166c565b10156115f557600181018091116116c85790565b90916020823d8211612063575b816120506020938361151a565b810103126102b957505190611b2a611ffc565b3d9150612043565b602092919650612089602491873d89116103b1576103a0818361151a565b905096919250611fcb565b6120ad91975060a03d81116105415761052e818361151a565b50505090509538611f9c565b9492959391909560018060a01b03918287169360409788519963434efcbd60e01b8b5260009a600498848a83015260209586836024818d5afa9283156123535790878f8f8e9998979695948e9296612334575b50516367aea31360e01b815298899182905afa968715612302578f8f8a928f929a61230e575b50516348c5be7f60e11b81529081018890529b8c9060249082905afa9a8b1561230257908f918e9493929c6122bd575b506121a495938c8461218c6108d08f9c9b9996866121878261219b9b6121939a611770565b61159b565b948a611a81565b9084846119f5565b6106738b61166c565b16908751636d24dd6d60e11b81528181806121c287308c8401611a3f565b0381865afa9182156122b3578a92612281575b505015612234575b501691823b156106f5579184939186809461220f97519788958694859363f0b522db60e01b8552339133918601611a59565b03925af19081156102bc5750612223575050565b61222d82916114f1565b6102b95750565b803b15610746578780916024895180948193631b29a84160e31b83528888168b8401525af1801561227757156121dd57612270909791976114f1565b95386121dd565b87513d8a823e3d90fd5b90809250813d83116122ac575b612298818361151a565b810103126122a8575138806121d5565b8880fd5b503d61228e565b89513d8c823e3d90fd5b89809b9c9d508193969550919398993d83116122fb575b6122de818361151a565b810103126122f75751999897969591928c92918a612162565b8e80fd5b503d6122d4565b8f8f51903d90823e3d90fd5b6024919a509161232b8a93853d871161037657610367818361151a565b9a915091612132565b61234c919650833d851161037657610367818361151a565b943861210c565b8e8e51903d90823e3d90fd5b6040805163b77b80e360e01b81526001600160a01b03938416600480830182905260249692959094169160209182878981875afa9687156118b3576000976124ee575b50845190631e0b152760e21b82528682015282818981875afa9081156118b3576000916124c1575b50916000925b8784106123e65750505050505050505060001990565b85516348c5be7f60e11b815287810182905282818b81895afa908115610bab57908491600091612491575b501461248557855190634064a0cf60e11b82528782015285818a81885afa9081156118e057600091612466575b5092600019811461245257600101926123d0565b88601188634e487b7160e01b600052526000fd5b61247d9150863d88116103b1576103a0818361151a565b90503861243e565b97505050505050505090565b91508382813d83116124ba575b6124a8818361151a565b810103126102b9575083905138612411565b503d61249e565b908382813d83116124e7575b6124d7818361151a565b810103126102b9575051386123ca565b503d6124cd565b90968382813d8311612516575b612505818361151a565b810103126102b957505195386123a2565b503d6124fb565b9291908161252b918561235f565b600019811461265257604080516367aea31360e01b81529094602093916001600160a01b03918216908581600481855afa948515612647578691600096612628575b50602489518094819363434efcbd60e01b835260048301525afa948515610bab5791879593916125be989593600095612609575b50508451809881958294630f50894160e21b845260048401611c90565b0392165afa9283156125fe5760009182946125da575b50509190565b6125f593945080919250903d106103b1576103a0818361151a565b919038806125d4565b50513d6000823e3d90fd5b612620929550803d1061037657610367818361151a565b9238806125a1565b612640919650823d841161037657610367818361151a565b943861256d565b88513d6000823e3d90fd5b5050905060009060009056fea264697066735822122062a020f26da7c63cf832d452e941ea5c33cca9cc23bcf89dbefb5d2a5305709b64736f6c63430008110033",
  "deployedBytecode": "0x60406080815260048036101561001457600080fd5b600091823560e01c806303f2cd05146113b65783816313cc55e4146111ae575080632581700814610eb75780632af7ec8b14610e915780632dc469a314610cac578063434fa72214610bb65780636093c97514610ae65780637a2a103114610aca5780637a4d9a47146109f25780637f5b1a1b146109ab578381638f86e01514610819578163b02f9e3d1461058857508063bb44afd3146104595763f7f898b0146100be57600080fd5b34610455576060366003190112610455576100d761142b565b906100e0611457565b81516367aea31360e01b81529093604435926001600160a01b03858116939092602092899190848483818a5afa93841561044b57839461042c575b50805163434efcbd60e01b81528281018990529480866024818b5afa958615610422578496610403575b5081516348c5be7f60e11b81528381018a90529681886024818c5afa9788156103f95785986103c2575b508251630f50894160e21b81529886821692909190848b806101948c8e8b8401611c90565b0381875afa9a8b156103b857879b610387575b50845163040b0d8960e51b81528681018d9052918183602481875afa92831561037d57889361034e575b50821630149182156102c9575b50501590506102185750505050918161021597610204838361020a9661020f9998611f54565b92611da1565b611925565b916119ad565b80f35b9496929990975061020a919850610235868861023e963090611f54565b90309087611da1565b94813b156102c55784516399bec31560e01b81529081019283526001600160a01b039093166020830152306040830181905260608301526000608083015260a08201949094529092849184919082908490829060c00103925af19081156102bc57506102a957505080f35b6102b2906114f1565b6102b95780f35b80fd5b513d84823e3d90fd5b8680fd5b6102ed925081938d87518095819482936302d75da360e51b845230918d8501611c30565b03915afa91821561034457869261030c575b50506001148038806101de565b8196508092503d831161033d575b610324818361151a565b810103126103385760018c945190386102ff565b600080fd5b503d61031a565b84513d88823e3d90fd5b61036f919350823d8411610376575b610367818361151a565b81019061153d565b91386101d1565b503d61035d565b86513d8a823e3d90fd5b6103a8919b50853d87116103b1575b6103a0818361151a565b810190611c7a565b905099386101a7565b503d610396565b85513d89823e3d90fd5b82809299508196503d83116103f2575b6103dc818361151a565b81010312610338579251958b939061019461016f565b503d6103d2565b83513d87823e3d90fd5b8161041b9297503d881161037657610367818361151a565b9438610145565b82513d86823e3d90fd5b610444919450853d871161037657610367818361151a565b923861011b565b81513d85823e3d90fd5b8280fd5b5082346102b957610469366114bc565b84516367aea31360e01b81526001600160a01b03939290919060208389818888165afa92831561057e578693610552575b506104ab8260249260a0959661251d565b9890958851958694859363d07900bb60e01b8552840152165afa90811561054857946104ed9160209685908692610510575b506104e891926116de565b61164c565b9081811115610508576105009250611bea565b905b51908152f35b505090610502565b6104e89250610536915060a03d8111610541575b61052e818361151a565b810190611c53565b5050915090916104dd565b503d610524565b84513d85823e3d90fd5b60a09350826024926105746104ab9360203d811161037657610367818361151a565b955092505061049a565b87513d88823e3d90fd5b808484346108155760a0366003190112610815576105a461142b565b916105ad611457565b6105b5611441565b835163434efcbd60e01b81526064358482018190526001600160a01b0387811697608435959194936020939284826024818e5afa91821561080b579089949392918d926107ec575b508a516367aea31360e01b81529486908690818f5afa9485156107c3578d956107cd575b50858b51809d6348c5be7f60e11b8252868d830152815a91602492fa9b8c156107c3578d9c610785575b509161066a6106638a8e88979561067b978d9a611a81565b83836119ad565b6106738961166c565b913091611bf7565b16908651636d24dd6d60e11b815281818061069987308c8401611a3f565b0381865afa91821561077b578a9261074a575b5050156106f9575b5016803b156106f5576106e29486809486519788958694859363f0b522db60e01b8552339133918601611a59565b03925af19081156102bc57506102a95750f35b8580fd5b803b15610746578780916024885180948193631b29a84160e31b83528888168b8401525af1801561037d57908891610732575b506106b4565b61073b906114f1565b6102c557868961072c565b8780fd5b819a508092503d8311610774575b610762818361151a565b81010312610338578897518a806106ac565b503d610758565b88513d8c823e3d90fd5b929c509a5092918482813d81116107bc575b6107a1818361151a565b81010312610338578c9b87948993519c91935091939461064b565b503d610797565b8b513d8f823e3d90fd5b6107e5919550863d881161037657610367818361151a565b938e610621565b610804919250863d881161037657610367818361151a565b908e6105fd565b8a513d8e823e3d90fd5b5050fd5b808484346108155761082a36611483565b92909194610839843088611770565b84516367aea31360e01b81526020966001600160a01b039384169591888185818a5afa90811561077b579085918b9161098e575b5016958751956348c5be7f60e11b875280858801528987602481855afa968715610984578b97610951575b50899060248a518094819363434efcbd60e01b8352898301525afa98891561077b578a99610926575b50506108d5916108d09161159b565b61155c565b91843b1561074657879460c49386928851998a9788966399bec31560e01b885287015216602485015230604485015230606485015260848401528160a48401525af19081156102bc57506102a95750f35b6108d09299506108d593918161094792903d1061037657610367818361151a565b98918193506108c1565b9a509550888a813d811161097d575b61096a818361151a565b8101031261033857888b9a519690610898565b503d610960565b89513d8d823e3d90fd5b6109a591508a3d8c1161037657610367818361151a565b8c61086d565b83346102b95760e03660031901126102b9576102156109c861142b565b6109d0611457565b6109d8611441565b916109e161146d565b60c4359360a43593608435936120b9565b50829034610ac65760e0366003190112610ac657610a0e61142b565b92610a17611457565b90610a20611441565b610a4b6020610a2d61146d565b938651809381926339855fd160e11b83523090608435908401611c90565b0381896001600160a01b038c165af1958615610abb5795610a7f575b509484610502939260209760c4359460a435946120b9565b92919450946020833d8211610ab3575b81610a9c6020938361151a565b810103126103385791519194919390916020610a67565b3d9150610a8f565b8551903d90823e3d90fd5b5080fd5b838234610ac657602090610500610ae0366114bc565b9161235f565b50829034610ac657610af736611483565b93929591610b05858261159b565b96610b1261020a8961155c565b6001600160a01b03939082851690813b1561033857600091606483928a5194859384926318f0203f60e31b8452888d85015260248401528160448401525af18015610bab5791610b6d93918a9b93610b9c575b503091611957565b1692833b15610b98576106e293859283855180978195829463ef693bed60e01b845233908401611755565b8480fd5b610ba5906114f1565b8b610b65565b87513d6000823e3d90fd5b5082346102b957610bc6366114bc565b84516367aea31360e01b81526001600160a01b0396939290919060208386818b88165afa92831561057e578693610c80575b50610c098260249260a0959661251d565b9590988851958694859363d07900bb60e01b8552840152165afa80156105485794610c449160209685918691610c5657506104e891926116de565b81811115610508576105009250611bea565b6104e89250610c73915060a03d81116105415761052e818361151a565b50919390925090506104dd565b60a0935082602492610ca2610c099360203d811161037657610367818361151a565b9550925050610bf8565b5090346104555760a03660031901126104555782610cc861142b565b610cd0611457565b93610cd9611441565b81516367aea31360e01b815295608435936001600160a01b0392838216916064356020808c8c81885afa94851561077b578b9c8b9c999a9b96610e72575b50895163434efcbd60e01b81529c8d01839052818d602481845afa9c8d1561080b578c9d610e53575b50818360248b8d5194859384926348c5be7f60e11b84528301525afa91821561080b578c92610e22575b50508851630f50894160e21b81529b898d80610d8984868e8401611c90565b03818b8a165afa94851561080b578c9d8b610b6d999a9b9c9d9e97610def575b5050610204838380610dbd9798999a611f54565b610de8610dca8a8761159b565b93610de0610dda61020a8761155c565b91611925565b9083856119f5565b3091611957565b610dbd959697508380610e1361020494848995903d106103b1576103a0818361151a565b9050999897505050508c610da9565b819c508092503d8311610e4c575b610e3a818361151a565b81010312610338578b99513880610d6a565b503d610e30565b610e6b919d50823d841161037657610367818361151a565b9b38610d40565b610e8a919650823d841161037657610367818361151a565b9438610d17565b5082346102b95750610eab610ea5366114bc565b9161251d565b82519182526020820152f35b503461045557608036600319011261045557610ed161142b565b90610eda611457565b81516367aea31360e01b815293604435926001600160a01b038581169392602090606435828a83818a5afa998a156111a4578b9a611185575b50845163434efcbd60e01b81528281018990529583876024818b5afa96871561117b578c9761115c575b5085516348c5be7f60e11b81528381018a9052978489602481845afa9889156110fb578d9961112d575b508c875163040b0d8960e51b81528b868201528681602481865afa91821561112257908792611105575b50308882161492831561108d575b5050506000146110335783929187610fb7928a611da1565b6024855180958193633eaf7a0360e21b8352818a16908301528c165afa92831561102a57508892610ff4575b50509061020f929161021596611ca9565b908094939250813d8311611023575b61100d818361151a565b810103126103385791519091908561020f610fe3565b503d611003565b513d8a823e3d90fd5b909a999497508a91985061104d9250959495309086611da1565b811690676765c793fa10079d601b1b9788810298818a04149015171561107a578284889961023e93611ca9565b634e487b7160e01b875260118652602487fd5b6110af93508c8a518095819482936302d75da360e51b845230918c8501611c30565b03915afa80156110fb578d906110cd575b6001915014843880610f9f565b508481813d83116110f4575b6110e3818361151a565b8101031261033857600190516110c0565b503d6110d9565b87513d8f823e3d90fd5b61111c9150823d841161037657610367818361151a565b38610f91565b8951903d90823e3d90fd5b9098508481813d8311611155575b611145818361151a565b8101031261033857519738610f67565b503d61113b565b611174919750843d861161037657610367818361151a565b9538610f3d565b86513d8e823e3d90fd5b61119d919a50833d851161037657610367818361151a565b9838610f13565b85513d8d823e3d90fd5b808484346108155760c0366003190112610815576111ca61142b565b916111d3611457565b6111db611441565b835163434efcbd60e01b8152606435848201819052608435966001600160a01b0394939092858416916020908183602481875afa92831561080b578c93611397575b5089516348c5be7f60e11b8152898101869052938285602481845afa9485156107c3578d95611357575b5090828a9796959493928c51988980926367aea31360e01b82525afa9687156107c357908b949392918e98611334575b50611287908360a4359186611da1565b6112918c8961159b565b9689828c60246112a361020a8d61155c565b985180948193633eaf7a0360e21b8352818a169083015286165afa928315611328578f936112e4575b505092610b6d9796959492610de092610de895611ca9565b8092959f508193509897969593983d8311611321575b611304818361151a565b8101031261033857518d9c95969495939491939282610de86112cc565b503d6112fa565b8f8e51903d90823e3d90fd5b61128791985061135090833d851161037657610367818361151a565b9790611277565b8380939e5081989796509194933d8311611390575b611376818361151a565b810103126103385794518c9b949593949093919282611247565b503d61136c565b6113af919350823d841161037657610367818361151a565b918d61121d565b503461045557826113de6113c936611483565b9391926113d6858561159b565b913091611957565b6001600160a01b0316803b156104555761140e9483855180978195829463ef693bed60e01b845233908401611755565b03925af19081156102bc5750611422575080f35b610215906114f1565b600435906001600160a01b038216820361033857565b604435906001600160a01b038216820361033857565b602435906001600160a01b038216820361033857565b606435906001600160a01b038216820361033857565b6080906003190112610338576001600160a01b039060043582811681036103385791602435908116810361033857906044359060643590565b6060906003190112610338576001600160a01b0390600435828116810361033857916024359081168103610338579060443590565b6001600160401b03811161150457604052565b634e487b7160e01b600052604160045260246000fd5b601f909101601f19168101906001600160401b0382119082101761150457604052565b9081602091031261033857516001600160a01b03811681036103385790565b906000821261156757565b60405162461bcd60e51b815260206004820152600c60248201526b696e742d6f766572666c6f7760a01b6044820152606490fd5b60405163313ce56760e01b815260009392916020908290600490829088906001600160a01b03165af190811561164157849161160c575b50601203601281116115f857604d81116115f8576115f5929350600a0a906116de565b90565b634e487b7160e01b84526011600452602484fd5b90506020813d8211611639575b816116266020938361151a565b810103126116355751386115d2565b8380fd5b3d9150611619565b6040513d86823e3d90fd5b8115611656570490565b634e487b7160e01b600052601260045260246000fd5b676765c793fa10079d601b1b8082029291908115828504821417156116c85783040361169457565b60405162461bcd60e51b815260206004820152600c60248201526b6d756c2d6f766572666c6f7760a01b6044820152606490fd5b634e487b7160e01b600052601160045260246000fd5b6000929180159182156116f5575b50501561169457565b808202945091508115828504821417156116c857611713908461164c565b1438806116ec565b90816020910312610338575180151581036103385790565b6001600160a01b03918216815291166020820152604081019190915260600190565b6001600160a01b039091168152602081019190915260400190565b6040805163d8dfeb4560e01b8082526001600160a01b039384169592949360209283816004818b5afa908115610bab57600091611908575b5083875180926323b872dd60e01b825281600086826117cc8c303360048501611733565b0393165af18015610bab576118eb575b50855191825282826004818a5afa9182156118e0576118219288859387936000936118be575b506000908a5180978196829563095ea7b360e01b845260048401611755565b0393165af180156118b357611885575b5050833b156103385761185d93600092838551809781958294633b4da69f60e01b845260048401611755565b03925af190811561187b57506118705750565b611879906114f1565b565b513d6000823e3d90fd5b816118a492903d106118ac575b61189c818361151a565b81019061171b565b503880611831565b503d611892565b85513d6000823e3d90fd5b60009193506118d990863d881161037657610367818361151a565b9290611802565b86513d6000823e3d90fd5b61190190843d86116118ac5761189c818361151a565b50386117dc565b61191f9150843d861161037657610367818361151a565b386117a8565b600160ff1b81146116c85760000390565b9081526001600160a01b039091166020820152604081019190915260600190565b919290916001600160a01b0316803b156103385761199093600080946040519687958694859363438ac0d160e11b855260048501611936565b03925af180156119a1576118705750565b6040513d6000823e3d90fd5b6001600160a01b031691823b156103385760646000928360405195869485936318f0203f60e31b8552600485015282602485015260448401525af180156119a1576118705750565b9091906001600160a01b0316803b15610338576000928360649260405196879586946318f0203f60e31b86526004860152602485015260448401525af180156119a1576118705750565b6001600160a01b0391821681529116602082015260400190565b9081526001600160a01b03918216602082015291166040820152606081019190915260800190565b94939091600095600093604051956336286ddd60e11b8752600487015260209283876024818960018060a01b038097165af1968715611bdf578697611baf575b50604051633eaf7a0360e21b8152908216600482015291839183916024918391165afa918215611641578492611b81575b5050611afd8261166c565b8110611b0a575b50505050565b83949550611b2f6108d08394956104e8611b3694611b2a611b3c9761166c565b611bea565b94856116de565b9161166c565b1115611b7b57600182019181600184129112908015821691151617611b6757505b9038808080611b04565b634e487b7160e01b81526011600452602490fd5b50611b5d565b90809250813d8311611ba8575b611b98818361151a565b8101031261045557513880611af2565b503d611b8e565b9096508381813d8311611bd8575b611bc7818361151a565b810103126106f55751956024611ac1565b503d611bbd565b6040513d88823e3d90fd5b9081039081116116c85790565b919290916001600160a01b0316803b156103385761199093600080946040519687958694859363660e160760e01b855260048501611936565b6001600160a01b0391821681526020810192909252909116604082015260600190565b908160a0910312610338578051916020820151916040810151916080606083015192015190565b9190826040910312610338576020825192015190565b9081526001600160a01b03909116602082015260400190565b6040805163d07900bb60e01b8152600481018690529094939092916001600160a01b031660a084602481845afa9384156118e05790869291600095611d78575b50611d0b9394958351809581948293630f50894160e21b845260048401611c90565b03915afa93841561187b57600094611d4b575b5050611d2d916108d09161164c565b818111611d3e576115f59150611925565b5061020a6115f59161155c565b6108d0929450611d2d939181611d6c92903d106103b1576103a0818361151a565b90509391819350611d1e565b611d0b949550611d959060a03d81116105415761052e818361151a565b50505090509493611ce9565b6040805163a7e9445560e01b80825260009796929592946001600160a01b03808216959360209392918b918581600481868d5af1908115611f2b57611e0a83928c868f8b958294611f35575b50519586809581946323b872dd60e01b8352303360048501611733565b0393165af18015611f2b57611f0e575b5089519384528484600481858c5af1938415611f04579282611e5d959287958c9594611ee5575b508c5180978196829563095ea7b360e01b845260048401611755565b0393165af18015611edb57611ebd575b5050823b156102c5579186939184611e9f9798948751988995869485936319b6fb0160e01b8552339060048601611a59565b03925af1918215611eb35750506118705750565b51903d90823e3d90fd5b81611ed392903d106118ac5761189c818361151a565b503880611e6d565b87513d8b823e3d90fd5b611efd919450863d881161037657610367818361151a565b9238611e41565b8a513d84823e3d90fd5b611f2490863d88116118ac5761189c818361151a565b5038611e1a565b8b513d85823e3d90fd5b611f4d919450863d881161037657610367818361151a565b9238611ded565b6040805163d07900bb60e01b8152600481018690529395949093926001600160a01b03928316929160a085602481875afa9485156118e057978691611fb79899600097612094575b508251630f50894160e21b8152988992839260048401611c90565b0381865afa9586156118b35760009661206b575b508451633eaf7a0360e21b81529116600482015290602090829060249082905afa92831561187b5750600092612036575b50611b2a9061200a936116de565b676765c793fa10079d601b1b8104906120228261166c565b10156115f557600181018091116116c85790565b90916020823d8211612063575b816120506020938361151a565b810103126102b957505190611b2a611ffc565b3d9150612043565b602092919650612089602491873d89116103b1576103a0818361151a565b905096919250611fcb565b6120ad91975060a03d81116105415761052e818361151a565b50505090509538611f9c565b9492959391909560018060a01b03918287169360409788519963434efcbd60e01b8b5260009a600498848a83015260209586836024818d5afa9283156123535790878f8f8e9998979695948e9296612334575b50516367aea31360e01b815298899182905afa968715612302578f8f8a928f929a61230e575b50516348c5be7f60e11b81529081018890529b8c9060249082905afa9a8b1561230257908f918e9493929c6122bd575b506121a495938c8461218c6108d08f9c9b9996866121878261219b9b6121939a611770565b61159b565b948a611a81565b9084846119f5565b6106738b61166c565b16908751636d24dd6d60e11b81528181806121c287308c8401611a3f565b0381865afa9182156122b3578a92612281575b505015612234575b501691823b156106f5579184939186809461220f97519788958694859363f0b522db60e01b8552339133918601611a59565b03925af19081156102bc5750612223575050565b61222d82916114f1565b6102b95750565b803b15610746578780916024895180948193631b29a84160e31b83528888168b8401525af1801561227757156121dd57612270909791976114f1565b95386121dd565b87513d8a823e3d90fd5b90809250813d83116122ac575b612298818361151a565b810103126122a8575138806121d5565b8880fd5b503d61228e565b89513d8c823e3d90fd5b89809b9c9d508193969550919398993d83116122fb575b6122de818361151a565b810103126122f75751999897969591928c92918a612162565b8e80fd5b503d6122d4565b8f8f51903d90823e3d90fd5b6024919a509161232b8a93853d871161037657610367818361151a565b9a915091612132565b61234c919650833d851161037657610367818361151a565b943861210c565b8e8e51903d90823e3d90fd5b6040805163b77b80e360e01b81526001600160a01b03938416600480830182905260249692959094169160209182878981875afa9687156118b3576000976124ee575b50845190631e0b152760e21b82528682015282818981875afa9081156118b3576000916124c1575b50916000925b8784106123e65750505050505050505060001990565b85516348c5be7f60e11b815287810182905282818b81895afa908115610bab57908491600091612491575b501461248557855190634064a0cf60e11b82528782015285818a81885afa9081156118e057600091612466575b5092600019811461245257600101926123d0565b88601188634e487b7160e01b600052526000fd5b61247d9150863d88116103b1576103a0818361151a565b90503861243e565b97505050505050505090565b91508382813d83116124ba575b6124a8818361151a565b810103126102b9575083905138612411565b503d61249e565b908382813d83116124e7575b6124d7818361151a565b810103126102b9575051386123ca565b503d6124cd565b90968382813d8311612516575b612505818361151a565b810103126102b957505195386123a2565b503d6124fb565b9291908161252b918561235f565b600019811461265257604080516367aea31360e01b81529094602093916001600160a01b03918216908581600481855afa948515612647578691600096612628575b50602489518094819363434efcbd60e01b835260048301525afa948515610bab5791879593916125be989593600095612609575b50508451809881958294630f50894160e21b845260048401611c90565b0392165afa9283156125fe5760009182946125da575b50509190565b6125f593945080919250903d106103b1576103a0818361151a565b919038806125d4565b50513d6000823e3d90fd5b612620929550803d1061037657610367818361151a565b9238806125a1565b612640919650823d841161037657610367818361151a565b943861256d565b88513d6000823e3d90fd5b5050905060009060009056fea264697066735822122062a020f26da7c63cf832d452e941ea5c33cca9cc23bcf89dbefb5d2a5305709b64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}