{
  "address": "0x9D4d8e210e96b03bc5EA8e24d0AB3A32556069E0",
  "abi": [
    {
      "inputs": [],
      "name": "BadAccessControlSingleton",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CallbackError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "orderToken2buy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "inToken",
          "type": "address"
        }
      ],
      "name": "IncorrectToken",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "IsNotTopStaker",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughReturnValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAdminError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAlerterError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyDAOError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyLiquidationAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyMintAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyRewardAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyRoleError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyVaultAccessError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "OrderExist",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "OrderNotExist",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "OrderNotForThisStaker",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SmallAmountLeft",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UserIsNotBeneficiary",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "LPToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "orderIds",
          "type": "uint256[]"
        }
      ],
      "name": "LpOrdersAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "OrderAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "OrderCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "OrderFilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "OrderFilledPartially",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACCESS_CONTROL_SINGLETON",
      "outputs": [
        {
          "internalType": "contract ISuAccessControl",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ALERTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DAO_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DUST_THRESHOLD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIQUIDATION_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINT_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ORACLE",
      "outputs": [
        {
          "internalType": "contract ISuOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARD_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SYSTEM_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOP_STAKERS",
      "outputs": [
        {
          "internalType": "contract ITopStakers",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VAULT_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token2sell",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount2sell",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token2buy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "internalType": "enum DiscountType",
          "name": "discountType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "collateralJoin",
          "type": "address"
        }
      ],
      "name": "addOrder",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "cancelOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "fillOrderAsFlashLoan",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "outAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllOrders",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token2sell",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amountLeft",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "token2buy",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "token2buyAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "beneficiary",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "creationTimestamp",
                  "type": "uint256"
                },
                {
                  "internalType": "enum DiscountType",
                  "name": "discountType",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "caller",
                  "type": "address"
                }
              ],
              "internalType": "struct Order",
              "name": "order",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "orderId",
              "type": "uint256"
            }
          ],
          "internalType": "struct OrderWithId[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inAmount",
          "type": "uint256"
        }
      ],
      "name": "getExpectedOrderOutcome",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "outAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "getOrder",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token2sell",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountLeft",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "token2buy",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "token2buyAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "creationTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "enum DiscountType",
              "name": "discountType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "caller",
              "type": "address"
            }
          ],
          "internalType": "struct Order",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOrdersCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_authControl",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oracleAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_topStakersAddress",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "orders",
      "outputs": [
        {
          "internalType": "address",
          "name": "token2sell",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountLeft",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token2buy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "token2buyAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "creationTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "enum DiscountType",
          "name": "discountType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum DiscountType",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "priceCurve",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum DiscountType",
          "name": "discountType",
          "type": "uint8"
        },
        {
          "internalType": "uint256[2]",
          "name": "newPriceCurve",
          "type": "uint256[2]"
        }
      ],
      "name": "setPriceCurve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "1120135cd63872ffb86d1e75143eb50c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"BadAccessControlSingleton\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallbackError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"orderToken2buy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inToken\",\"type\":\"address\"}],\"name\":\"IncorrectToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"IsNotTopStaker\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughReturnValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAdminError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAlerterError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyDAOError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyLiquidationAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyMintAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRewardAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRoleError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyVaultAccessError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"OrderExist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"OrderNotExist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"OrderNotForThisStaker\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SmallAmountLeft\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UserIsNotBeneficiary\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"LPToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"orderIds\",\"type\":\"uint256[]\"}],\"name\":\"LpOrdersAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"OrderAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"OrderCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"OrderFilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"OrderFilledPartially\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACCESS_CONTROL_SINGLETON\",\"outputs\":[{\"internalType\":\"contract ISuAccessControl\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ALERTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAO_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DUST_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDATION_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ORACLE\",\"outputs\":[{\"internalType\":\"contract ISuOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SYSTEM_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOP_STAKERS\",\"outputs\":[{\"internalType\":\"contract ITopStakers\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VAULT_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token2sell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount2sell\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token2buy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"enum DiscountType\",\"name\":\"discountType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"collateralJoin\",\"type\":\"address\"}],\"name\":\"addOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"fillOrderAsFlashLoan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"outAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllOrders\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token2sell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountLeft\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token2buy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"token2buyAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"creationTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum DiscountType\",\"name\":\"discountType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"internalType\":\"struct Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderWithId[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"}],\"name\":\"getExpectedOrderOutcome\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"outAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"getOrder\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token2sell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountLeft\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token2buy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"token2buyAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"creationTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum DiscountType\",\"name\":\"discountType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"internalType\":\"struct Order\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOrdersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_authControl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_topStakersAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token2sell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountLeft\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token2buy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"token2buyAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"creationTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum DiscountType\",\"name\":\"discountType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum DiscountType\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"priceCurve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum DiscountType\",\"name\":\"discountType\",\"type\":\"uint8\"},{\"internalType\":\"uint256[2]\",\"name\":\"newPriceCurve\",\"type\":\"uint256[2]\"}],\"name\":\"setPriceCurve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See IExchange interface for full details.\",\"kind\":\"dev\",\"methods\":{\"addOrder(address,uint256,address,address,uint8,address)\":{\"details\":\"This swap is async, because depends on how arbitrage bots will fill this order. Emits OrderAdded() event. Before addOrder user needs to approve token2sell for exchange contract\",\"params\":{\"amount2sell\":\"- Amount of {token2sell} to sell\",\"beneficiary\":\"- Address that will receive {token2buy} after filling order.\",\"collateralJoin\":\"- address of collateral adapter*\",\"discountType\":\"- Speed of decreasing swap price. { 0 - aggressive, 1 - middle, 2 - conservative }\",\"token2buy\":\"- Address of token to buy\",\"token2sell\":\"- Address of token to sell\"}},\"cancelOrder(uint256)\":{\"params\":{\"orderId\":\"- Id of order to cancel.*\"}},\"fillOrderAsFlashLoan(uint256,uint256,bytes)\":{\"details\":\"Caller contract receive orders {token2sell} and after that his stableunitFillOrderCallback() is called. At the end of thi callback contract should send some amount of another token back to Exchange contract.\",\"params\":{\"data\":\"- encoded data to pass to callback function*\",\"inAmount\":\"- Amount of {token2sell} to receive\",\"orderId\":\"- Id of order to fill.\"}},\"getExpectedOrderOutcome(uint256,uint256)\":{\"returns\":{\"outAmount\":\"The amount of outcome that caller will receive if he will fill {orderId} with {inAmount} of {token2sell}*\"}},\"getOrder(uint256)\":{\"returns\":{\"_0\":\"Order with id = {orderId}*\"}},\"getOrdersCount()\":{\"returns\":{\"_0\":\"The amount of not full-filled orders*\"}},\"setPriceCurve(uint8,uint256[2])\":{\"params\":{\"discountType\":\"- discount type to change\",\"newPriceCurve\":\"- parameters of formula*\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"title\":\"Exchange\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"DUST_THRESHOLD()\":{\"notice\":\"Amount of minimum amountLeft in order. It's measured in fiat. For example DUST_THRESHOLD = 100 * 1e18 => it's 100 USD*\"},\"addOrder(address,uint256,address,address,uint8,address)\":{\"notice\":\"Add order to swap {token2sell} to {token2buy}.\"},\"cancelOrder(uint256)\":{\"notice\":\"Only user who place order or who is beneficiary can cancelOrder();\"},\"fillOrderAsFlashLoan(uint256,uint256,bytes)\":{\"notice\":\"Fill order with flash-loan like logic\"},\"getAllOrders()\":{\"notice\":\"This method will be deleted after we'll add GraphQL to watch orders*\"},\"priceCurve(uint8,uint256)\":{\"notice\":\"priceCurve is like price_t = price_0 * (1 - t/priceCurve[0]) - priceCurve[1] from timePassed = 0 to t priceCurve decrease linear, but after t (when discount is 20%), it's constant*\"},\"setPriceCurve(uint8,uint256[2])\":{\"notice\":\"Function to update price curve - how fast {token2sell} price will decrease/increase\"}},\"notice\":\"Main contract of Exchange module. Here we can add order or fill it to get profit.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/exchange/contracts/Exchange.sol\":\"Exchange\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x1c65595a26548a1b2263315b08a56334a2d7087319814437559c3c96025e939f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\",\"keccak256\":\"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd\",\"license\":\"GPL-2.0-or-later\"},\"contracts/exchange/contracts/Exchange.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\\\";\\n\\nimport \\\"../interfaces/IExchange.sol\\\";\\nimport \\\"../interfaces/ITopStakers.sol\\\";\\nimport \\\"../interfaces/IExchangeCallback.sol\\\";\\nimport \\\"../../makerdao/interfaces/ICollateralJoin.sol\\\";\\nimport \\\"../../periphery/contracts/access-control/SuAuthenticated.sol\\\";\\nimport \\\"../../periphery/contracts/interfaces/oracle/ISuOracle.sol\\\";\\n\\n/**\\n * @title Exchange\\n * @notice Main contract of Exchange module. Here we can add order or fill it to get profit.\\n * @dev See IExchange interface for full details.\\n */\\ncontract Exchange is SuAuthenticated, IExchange {\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.UintSet;\\n    // todo: add enumerableSet of all IDs\\n    mapping (uint256 => Order) public orders;\\n    EnumerableSetUpgradeable.UintSet private orderIdSet;\\n\\n    /**\\n     * @notice priceCurve is like price_t = price_0 * (1 - t/priceCurve[0]) - priceCurve[1]\\n     * from timePassed = 0 to t priceCurve decrease linear, but after t (when discount is 20%), it's constant\\n    **/\\n    mapping (DiscountType => uint256[2]) public priceCurve;\\n\\n    /**\\n     * @notice Amount of minimum amountLeft in order. It's measured in fiat.\\n     * For example DUST_THRESHOLD = 100 * 1e18 => it's 100 USD\\n    **/\\n    uint256 public DUST_THRESHOLD;\\n    ISuOracle public ORACLE;\\n    ITopStakers public TOP_STAKERS;\\n\\n    function initialize(\\n        address _authControl,\\n        address _oracleAddress,\\n        address _topStakersAddress\\n    ) public initializer {\\n        __suAuthenticatedInit(_authControl);\\n\\n        // -20% for 3min/10h/24h\\n        priceCurve[DiscountType.aggressive] = [180 * 5, 0];\\n        priceCurve[DiscountType.middle] = [36_000 * 5, 0];\\n        priceCurve[DiscountType.conservative] = [86_400 * 5, 0];\\n        DUST_THRESHOLD = 100 * 1e18;\\n\\n        ORACLE = ISuOracle(_oracleAddress);\\n        TOP_STAKERS = ITopStakers(_topStakersAddress);\\n    }\\n\\n    function setPriceCurve(DiscountType discountType, uint256[2] calldata newPriceCurve) public onlyDAO {\\n        priceCurve[discountType] = newPriceCurve;\\n    }\\n\\n    function addOrder(\\n        address token2sell,\\n        uint256 amount2sell,\\n        address token2buy,\\n        address beneficiary,\\n        DiscountType discountType,\\n        address collateralJoin // or store this map in exchange module\\n    ) external returns (uint256 orderId) {\\n        // TransferHelper.safeTransferFrom(token2sell, msg.sender, address(this), amount2sell);\\n        ICollateralJoin(collateralJoin).exit(address(this), amount2sell);\\n\\n        orderId = uint256(\\n            keccak256(\\n                abi.encodePacked(block.number, msg.sender, token2sell, amount2sell, token2buy)\\n            )\\n        );\\n        if (orders[orderId].creationTimestamp != 0) orderId += 1;\\n        if (orders[orderId].creationTimestamp != 0) revert OrderExist(orderId);\\n\\n        orders[orderId] = Order(\\n            token2sell,\\n            amount2sell,\\n            token2buy,\\n            0, // token2buyAmount at start should be 0\\n            beneficiary,\\n            block.timestamp,\\n            discountType,\\n            msg.sender\\n        );\\n        EnumerableSetUpgradeable.add(orderIdSet, orderId);\\n        emit OrderAdded(orderId);\\n    }\\n\\n    function cancelOrder(uint256 orderId) public {\\n        Order memory order = orders[orderId];\\n\\n        if (order.creationTimestamp == 0) revert OrderNotExist(orderId);\\n        if (msg.sender != order.beneficiary && msg.sender != order.caller) revert UserIsNotBeneficiary();\\n\\n        TransferHelper.safeTransfer(order.token2sell, msg.sender, order.amountLeft);\\n        delete orders[orderId];\\n        EnumerableSetUpgradeable.remove(orderIdSet, orderId);\\n\\n        emit OrderCanceled(orderId);\\n    }\\n\\n    /**\\n     * @notice Return discounted price of token depending on passed time and type of discount\\n     * @dev orderPrice = x * 10^18 * 10^(18 - decimals) like in Oracle\\n    **/\\n    function getDiscountedTokenPrice(\\n        address token2sell,\\n        uint256 timePassed,\\n        DiscountType discountType\\n    ) internal view returns (uint256) {\\n        uint256 curveDiv = priceCurve[discountType][0];\\n        uint256 curveSub = priceCurve[discountType][1];\\n        uint256 price = ORACLE.getFiatPrice1e18(token2sell);\\n\\n        if (timePassed > curveDiv) {\\n            // minimum is 80%;\\n            return price * 8 / 10;\\n        }\\n\\n        return price - price * timePassed / curveDiv - curveSub;\\n    }\\n\\n    function getExpectedOrderOutcome(uint256 orderId, uint256 inAmount) public view returns (uint256 outAmount) {\\n        Order memory order = orders[orderId];\\n        uint256 timePassed = block.timestamp - order.creationTimestamp;\\n\\n        // Let's assume that: inAmount = x * 10^d1, discountedTokenPrice = p1 * 10^(36 - d1), priceB = p2 * 10^(36 - d2)\\n        // Then outAmount = x * 10^d1 * p1 * 10^(36 - d1) / (p2 * 10^(36 - d2)) = (x * p1 / p2) * 10^(d2)\\n        uint256 discountedTokenPrice = getDiscountedTokenPrice(order.token2sell, timePassed, order.discountType);\\n        uint256 priceB = ORACLE.getFiatPrice1e18(order.token2buy);\\n        outAmount = inAmount * discountedTokenPrice / priceB;\\n    }\\n\\n    // TODO: add reentrancy lock\\n    function fillOrderAsFlashLoan(\\n        uint256 orderId,\\n        uint256 inAmount,\\n        bytes memory data\\n    ) external returns (uint256 outAmount) {\\n        Order storage order = orders[orderId];\\n\\n        if (order.creationTimestamp == 0) revert OrderNotExist(orderId);\\n\\n        uint256 timePassed = block.timestamp - order.creationTimestamp;\\n\\n        // grace period\\n        // solhint-disable-next-line no-empty-blocks\\n        if (timePassed <= 60) {\\n            /**\\n                // check that msg.sender is in TopStaker list + it's on position {orderId % x}\\n                uint256 numberOfStakers = TOP_STAKERS.getTopStakersLength();\\n                // TODO: update top stakers to be able to give \\\"stake power\\\" to another address\\n                if (!TOP_STAKERS.isTopStaker(tx.origin)) revert IsNotTopStaker(tx.origin);\\n                if (\\n                    uint160(tx.origin) % numberOfStakers != orderId % numberOfStakers\\n                ) revert OrderNotForThisStaker(orderId, tx.origin);\\n            */\\n            // solhint-disable-next-line no-empty-blocks\\n        } else {\\n            // check that msg.sender is in TopStaker list\\n        }\\n\\n        if (inAmount > order.amountLeft) {\\n            inAmount = order.amountLeft;\\n        }\\n\\n        // the same as in getExpectedOrderOutcome\\n        uint256 discountedTokenPrice = getDiscountedTokenPrice(order.token2sell, timePassed, order.discountType);\\n        uint256 priceB = ORACLE.getFiatPrice1e18(order.token2buy);\\n        outAmount = inAmount * discountedTokenPrice / priceB;\\n\\n        order.token2buyAmount += outAmount;\\n        order.amountLeft -= inAmount;\\n\\n        // If in order some token amount left after updating it\\n        // then it should have value > DUST_THRESHOLD, counted in fiat\\n        if (order.amountLeft > 0 && discountedTokenPrice * order.amountLeft / 1e18 <= DUST_THRESHOLD) {\\n            revert SmallAmountLeft();\\n        }\\n\\n        TransferHelper.safeTransfer(order.token2sell, msg.sender, inAmount);\\n\\n        uint256 balanceBefore = IERC20(order.token2buy).balanceOf(address(this));\\n        if(!IExchangeCallback(msg.sender).stableunitFillOrderCallback(order.token2buy, outAmount, msg.sender, data)) {\\n            revert CallbackError();\\n        }\\n        uint256 balanceAfter = IERC20(order.token2buy).balanceOf(address(this));\\n        if (balanceAfter < balanceBefore + outAmount) revert NotEnoughReturnValue();\\n\\n        // TODO: check tokenomics with profit to exchange/middleware\\n        TransferHelper.safeTransfer(order.token2buy, order.beneficiary, outAmount);\\n\\n        if (order.amountLeft == 0) {\\n            delete orders[orderId];\\n            EnumerableSetUpgradeable.remove(orderIdSet, orderId);\\n            emit OrderFilled(orderId);\\n        } else {\\n            emit OrderFilledPartially(orderId);\\n        }\\n    }\\n\\n    function getOrder (uint256 orderId) public view returns (Order memory) {\\n        return orders[orderId];\\n    }\\n\\n    function getOrdersCount() public view returns (uint256) {\\n        return EnumerableSetUpgradeable.length(orderIdSet);\\n    }\\n\\n    // TODO: add pagination\\n    /**\\n     * @notice This method will be deleted after we'll add GraphQL to watch orders\\n    **/\\n    function getAllOrders() external view returns (OrderWithId[] memory) {\\n        uint256[] memory orderIdValues = EnumerableSetUpgradeable.values(orderIdSet);\\n        uint256 len = orderIdValues.length;\\n        OrderWithId[] memory result = new OrderWithId[](len);\\n        for (uint256 i = 0; i < len; i++) {\\n            uint256 orderId = orderIdValues[i];\\n            result[i] = OrderWithId({\\n                order: orders[orderId],\\n                orderId: orderId\\n            });\\n        }\\n        return result;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public pure override returns (bool) {\\n        return interfaceId == type(IExchange).interfaceId;\\n    }\\n\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xb8d3c0933d016ca1cfa77f6e0eefc264c9cf69afe7e9aa279c8515aacaed55ac\",\"license\":\"BSL 1.1\"},\"contracts/exchange/interfaces/IExchange.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\npragma solidity ^0.8.0;\\n\\nenum DiscountType {\\n    aggressive,\\n    middle,\\n    conservative\\n}\\n\\nstruct Order {\\n    address token2sell;\\n    uint256 amountLeft;\\n    address token2buy;\\n    uint256 token2buyAmount;\\n    address beneficiary;\\n    uint256 creationTimestamp;\\n    DiscountType discountType;\\n    address caller;\\n}\\n\\nstruct OrderWithId {\\n    Order order;\\n    uint256 orderId;\\n}\\n\\ninterface IExchange {\\n    /* ===================== ERRORS ===================== */\\n    error OrderExist(uint256 orderId);\\n    error OrderNotExist(uint256 orderId);\\n    error IncorrectToken(address orderToken2buy, address inToken);\\n    error SmallAmountLeft();\\n    error UserIsNotBeneficiary();\\n    error IsNotTopStaker(address staker);\\n    error OrderNotForThisStaker(uint256 orderId, address staker);\\n    error NotEnoughReturnValue();\\n    error CallbackError();\\n\\n    /* ======================== EVENTS ========================= */\\n    event OrderAdded(uint256 orderId);\\n    event OrderCanceled(uint256 orderId);\\n    event OrderFilled(uint256 orderId);\\n    event OrderFilledPartially(uint256 orderId);\\n    event LpOrdersAdded(address LPToken, uint256[] orderIds);\\n\\n    /* ==================== MUTABLE METHODS ==================== */\\n\\n    /**\\n      * @notice Add order to swap {token2sell} to {token2buy}.\\n      * @dev This swap is async, because depends on how arbitrage bots will fill this order. Emits OrderAdded() event.\\n      * Before addOrder user needs to approve token2sell for exchange contract\\n      * @param token2sell - Address of token to sell\\n      * @param amount2sell - Amount of {token2sell} to sell\\n      * @param token2buy - Address of token to buy\\n      * @param beneficiary - Address that will receive {token2buy} after filling order.\\n      * @param discountType - Speed of decreasing swap price. { 0 - aggressive, 1 - middle, 2 - conservative }\\n      * @param collateralJoin - address of collateral adapter\\n     **/\\n    function addOrder (\\n        address token2sell,\\n        uint256 amount2sell,\\n        address token2buy,\\n        address beneficiary,\\n        DiscountType discountType,\\n        address collateralJoin\\n    ) external returns (uint256);\\n\\n    /**\\n      * @notice Only user who place order or who is beneficiary can cancelOrder();\\n      * @param orderId - Id of order to cancel.\\n     **/\\n    function cancelOrder (uint256 orderId) external;\\n\\n    /**\\n      * @notice Fill order with flash-loan like logic\\n      * @dev Caller contract receive orders {token2sell} and after that his stableunitFillOrderCallback() is called.\\n      * At the end of thi callback contract should send some amount of another token back to Exchange contract.\\n      * @param orderId - Id of order to fill.\\n      * @param inAmount - Amount of {token2sell} to receive\\n      * @param data - encoded data to pass to callback function\\n     **/\\n    function fillOrderAsFlashLoan (\\n        uint256 orderId,\\n        uint256 inAmount,\\n        bytes memory data\\n    ) external returns (uint256 outAmount);\\n\\n    /**\\n      * @notice Function to update price curve - how fast {token2sell} price will decrease/increase\\n      * @param discountType - discount type to change\\n      * @param newPriceCurve - parameters of formula\\n     **/\\n    function setPriceCurve(DiscountType discountType, uint256[2] calldata newPriceCurve) external;\\n\\n    /* ==================== VIEW METHODS ==================== */\\n    /**\\n      * @return The amount of outcome that caller will receive if he will fill {orderId} with {inAmount} of {token2sell}\\n     **/\\n    function getExpectedOrderOutcome (uint256 orderId, uint256 inAmount) external view returns (uint256);\\n\\n    /**\\n      * @return Order with id = {orderId}\\n     **/\\n    function getOrder (uint256 orderId) external view returns (Order memory);\\n\\n    /**\\n      * @return The amount of not full-filled orders\\n     **/\\n    function getOrdersCount () external view returns (uint256);\\n\\n    /**\\n      * @return The array of all not-filled orders. May be deleted after adding GraphQL for orderIds\\n     **/\\n    function getAllOrders () external view returns (OrderWithId[] memory);\\n}\\n\",\"keccak256\":\"0x53787e6c6540f7972889e73059e082c37982a613beb038684d49aa1192c39074\",\"license\":\"BSL 1.1\"},\"contracts/exchange/interfaces/IExchangeCallback.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\npragma solidity ^0.8.0;\\n\\ninterface IExchangeCallback {\\n    /**\\n     * @notice Callback that will be called by Exchange module in fillOrderAsFlashLoan()\\n     * after sending collateral to msg.sender.\\n     * In the implementation you must pay stablecoin for Exchange contract.\\n     * @dev Any contract that calls Exchange#fillOrderAsFlashLoan must implement this interface\\n     * @param asset - The address of the token that should be returned\\n     * @param amount - The amount of the {token} to return\\n     * @param initiator The address of the flashloan initiator\\n     * @return True if the execution of the operation succeeds, false otherwise\\n     */\\n    function stableunitFillOrderCallback (\\n        address asset,\\n        uint256 amount,\\n        address initiator,\\n        bytes calldata params\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x83d01cfa5b53319a2111163fd3d2f51dbe426069eb552818edbbbc4ef097582e\",\"license\":\"BSL 1.1\"},\"contracts/exchange/interfaces/ITopStakers.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\npragma solidity ^0.8.0;\\n\\n// WARNING: Implementation is a mock, but the interface will be the same\\ninterface ITopStakers {\\n    /* ===================== ERRORS ===================== */\\n    error StakerExist(address staker);\\n    error StakerNotExist(address staker);\\n\\n    /* ==================== MUTABLE METHODS ==================== */\\n\\n    function addTopStaker(address staker) external;\\n\\n    function removeTopStaker(address staker) external;\\n\\n    /* ==================== VIEW METHODS ==================== */\\n\\n    function isTopStaker(address staker) external view returns(bool);\\n    function getTopStakersLength() external view returns(uint256);\\n}\",\"keccak256\":\"0xbdcc48bbccb6aa7c35af6fb778a2c402d3204638d7af03eeb6a577fa59f5a715\",\"license\":\"BSL 1.1\"},\"contracts/makerdao/interfaces/IAuth.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\ninterface IAuth {\\n    function addAuthorization(address usr) external;\\n    function removeAuthorization(address usr) external;\\n}\\n\",\"keccak256\":\"0x0ba65ef98ccabdaae896001950518dbbfbea94c2f3ac84b064abe0cbeddd9b89\",\"license\":\"UNLICENSED\"},\"contracts/makerdao/interfaces/IAuthWithContractEnabled.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport {IAuth} from \\\"./IAuth.sol\\\";\\n\\ninterface IAuthWithContractEnabled is IAuth {\\n    event DisableContract();\\n\\n    function disableContract() external;\\n}\\n\",\"keccak256\":\"0x2c6b500483ce79cf7f277949eed8f8f1322227c031eb504ccf316b3ad49aa49c\",\"license\":\"UNLICENSED\"},\"contracts/makerdao/interfaces/ICollateralJoin.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {IAuthWithContractEnabled} from \\\"./IAuthWithContractEnabled.sol\\\";\\n\\n/**\\n * @title ITaxCollector\\n **/\\ninterface ICollateralJoin is IAuthWithContractEnabled {\\n    /* ==================== METHODS ==================== */\\n\\n    function collateral() external view returns(IERC20Metadata);\\n\\n    /**\\n    * @notice Join collateral in the system\\n    * @param usr Account from which we transferFrom collateral and add it in the system\\n    * @param wad Amount of collateral to transfer in the system (represented as a number with 18 decimals)\\n    **/\\n    function join(address usr, uint wad) external;\\n\\n    /**\\n    * @notice Exit collateral from the system\\n    * @param usr Account to which we transfer the collateral\\n    * @param wad Amount of collateral to transfer to 'account' (represented as a number with 18 decimals)\\n    **/\\n    function exit(address usr, uint wad) external;\\n}\\n\",\"keccak256\":\"0xac3c5caf0b77793b80e69273531b93a40c60ac18532ac3e5a104c0cb13e03821\",\"license\":\"UNLICENSED\"},\"contracts/periphery/contracts/access-control/SuAccessRoles.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title SuAccessRoles Library\\n * @dev SuAuthenticated and SuAccessControlSingleton need to have this constants\\n * Hierarchy:\\n *      1. DAO - can give admins and system roles\\n *      2.1. Admin - can set Alerters\\n *      2.2. System - includes Minter, Vault, Liquidation and Reward roles, don't have access to give some roles.\\n *      3. Alerter - can send alerts and trigger rate limits, don't have access to give some roles.\\n */\\nabstract contract SuAccessRoles {\\n    bytes32 public constant ADMIN_ROLE = 0x00;\\n\\n    bytes32 public constant DAO_ROLE = keccak256(\\\"DAO_ROLE\\\");\\n\\n    bytes32 public constant ALERTER_ROLE = keccak256(\\\"ALERTER_ROLE\\\");\\n\\n    // system roles\\n    bytes32 public constant MINT_ACCESS_ROLE = keccak256(\\\"MINT_ACCESS_ROLE\\\");\\n    bytes32 public constant VAULT_ACCESS_ROLE = keccak256(\\\"VAULT_ACCESS_ROLE\\\");\\n    bytes32 public constant LIQUIDATION_ACCESS_ROLE = keccak256(\\\"LIQUIDATION_ACCESS_ROLE\\\");\\n    bytes32 public constant REWARD_ACCESS_ROLE = keccak256(\\\"REWARD_ACCESS_ROLE\\\");\\n    bytes32 public constant SYSTEM_ROLE = keccak256(\\\"SYSTEM_ROLE\\\");\\n}\\n\",\"keccak256\":\"0xce71310378d7b30dfc4beda0af58490c09cb2cc6c4d951ce1b62bf2fb62d6dbc\",\"license\":\"BSL 1.1\"},\"contracts/periphery/contracts/access-control/SuAuthenticated.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/access-control/ISuAccessControl.sol\\\";\\nimport \\\"./SuAccessRoles.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @title SuAuthenticated\\n * @dev other contracts should inherit to be authenticated.\\n * The address of SuAccessControlSingleton should be one for all contract that inherits SuAuthenticated\\n */\\nabstract contract SuAuthenticated is Initializable, SuAccessRoles, IERC165Upgradeable {\\n    ISuAccessControl public ACCESS_CONTROL_SINGLETON;\\n\\n    error OnlyDAOError();\\n    error OnlyAdminError();\\n    error OnlyAlerterError();\\n    error OnlyVaultAccessError();\\n    error OnlyLiquidationAccessError();\\n    error OnlyMintAccessError();\\n    error OnlyRewardAccessError();\\n    error OnlyRoleError();\\n    error BadAccessControlSingleton();\\n\\n    /**\\n     * @dev should be passed in constructor\\n     */\\n    function __suAuthenticatedInit(address _accessControlSingleton) internal onlyInitializing {\\n        ACCESS_CONTROL_SINGLETON = ISuAccessControl(_accessControlSingleton);\\n        if (\\n            _accessControlSingleton != address(0) &&\\n            !ISuAccessControl(_accessControlSingleton).supportsInterface(type(IAccessControlUpgradeable).interfaceId)\\n        ) revert BadAccessControlSingleton();\\n    }\\n\\n    /** CORE ROLES */\\n\\n    modifier onlyDAO() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(DAO_ROLE, msg.sender)) revert OnlyDAOError();\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(ADMIN_ROLE, msg.sender)) revert OnlyAdminError();\\n        _;\\n    }\\n\\n    modifier onlyAlerter() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(ALERTER_ROLE, msg.sender)) revert OnlyAlerterError();\\n        _;\\n    }\\n\\n    /** SYSTEM ROLES */\\n\\n    modifier onlyVaultAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(VAULT_ACCESS_ROLE, msg.sender)) revert OnlyVaultAccessError();\\n        _;\\n    }\\n\\n    modifier onlyLiquidationAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(LIQUIDATION_ACCESS_ROLE, msg.sender)) revert OnlyLiquidationAccessError();\\n        _;\\n    }\\n\\n    modifier onlyMintAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(MINT_ACCESS_ROLE, msg.sender)) revert OnlyMintAccessError();\\n        _;\\n    }\\n\\n    modifier onlyRewardAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(REWARD_ACCESS_ROLE, msg.sender)) revert OnlyRewardAccessError();\\n        _;\\n    }\\n\\n    // syntax sugar under ACCESS_CONTROL_SINGLETON\\n    modifier onlyRole(bytes32 role) {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(role, msg.sender)) revert OnlyRoleError();\\n        _;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return ACCESS_CONTROL_SINGLETON.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x4e1ac84371a46e7534714397cf0ea5cf30d0e338caee0fde64771f276a5a4303\",\"license\":\"BSL 1.1\"},\"contracts/periphery/contracts/interfaces/access-control/ISuAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\nimport \\\"../../access-control/SuAccessRoles.sol\\\";\\n\\n/**\\n * @notice Access control for contracts\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n **/\\ninterface ISuAccessControl is IAccessControlUpgradeable, IERC165Upgradeable {\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\\n}\\n\",\"keccak256\":\"0x25724ac502fd6418ccd38273b276de4b2fdecd023d723c5d80c9f0a27c407bcd\",\"license\":\"MIT\"},\"contracts/periphery/contracts/interfaces/oracle/ISuOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\n// solhint-disable compiler-version\\npragma solidity >=0.7.6;\\n\\ninterface ISuOracle {\\n    /**\\n     * @notice WARNING! Read this description very carefully!\\n     *     function getFiatPrice1e18(address asset) returns (uint256) that:\\n     *         basicAmountOfAsset * getFiatPrice1e18(asset) / 1e18 === $$ * 1e18\\n     *     in other words, it doesn't matter what's the erc20.decimals is,\\n     *     you just multiply token balance in basic units on value from oracle and get dollar amount multiplied on 1e18.\\n     *\\n     * different assets have different deviation threshold (errors)\\n     *     for wBTC it's <= 0.5%, read more https://data.chain.link/ethereum/mainnet/crypto-usd/btc-usd\\n     *     for other asset is can be larger based on particular oracle implementation.\\n     *\\n     * examples:\\n     *     market price of btc = $30k,\\n     *     for 0.1 wBTC the unit256 amount is 0.1 * 1e18\\n     *     0.1 * 1e18 * (price1e18 / 1e18) == $3000 == uint256(3000*1e18)\\n     *     => price1e18 = 30000 * 1e18;\\n     *\\n     *     market price of usdt = $0.97,\\n     *     for 1 usdt uint256 = 1 * 1e6\\n     *     so 1*1e6 * price1e18 / 1e18 == $0.97 == uint256(0.97*1e18)\\n     *     => 1*1e6 * (price1e18 / 1e18) / (0.97*1e18)   = 1\\n     *     =>  price1e18 = 0.97 * (1e18/1e6) * 1e18\\n     *\\n     *    assume market price of wBTC = $31,503.77, oracle error = $158\\n     *\\n     *     case #1: small amount of wBTC\\n     *         we have 0.0,000,001 wBTC that is worth v = $0.00315 \\u00b1 $0.00001 = 0.00315*1e18 = 315*1e13 \\u00b1 1*1e13\\n     *         actual balance on the asset b = wBTC.balanceOf() =  0.0000001*1e18 = 1e11\\n     *         oracle should return or = oracle.getFiatPrice1e18(wBTC) <=>\\n     *         <=> b*or = v => v/b = 315*1e13 / 1e11 = 315*1e2 \\u00b1 1e2\\n     *         error = or.error * b = 1e2 * 1e11 = 1e13 => 1e13/1e18 usd = 1e-5 = 0.00001 usd\\n     *\\n     *     case #2: large amount of wBTC\\n     *         v = 2,000,000 wBTC = $31,503.77 * 2m \\u00b1 158*2m = $63,007,540,000 \\u00b1 $316,000,000 = 63,007*1e24 \\u00b1 316*1e24\\n     *         for calc convenience we increase error on 0.05 and have v = 63,000*24 \\u00b1 300*1e24 = (630 \\u00b1 3)*1e26\\n     *         b = 2*1e6 * 1e18 = 2*1e24\\n     *         or = v/b = (630 \\u00b1 3)*1e26 / 2*1e24 = 315*1e2 \\u00b1 1.5*1e2\\n     *         error = or.error * b = 1.5*100 * 2*1e24 = 3*1e26 = 3*1e8*1e18 = $300,000,000 ~ $316,000,000\\n     *\\n     *     assume the market price of USDT = $0.97 \\u00b1 $0.00485,\\n     *\\n     *     case #3: little amount of USDT\\n     *         v = USDT amount 0.005 = 0.005*(0.97 \\u00b1 0.00485) = 0.00485*1e18 \\u00b1 0.00002425*1e18 = 485*1e13 \\u00b1 3*1e13\\n     *         we rounded error up on (3000-2425)/2425 ~= +24% for calculation convenience.\\n     *         b = USDT.balanceOf() = 0.005*1e6 = 5*1e3\\n     *         b*or = v => or = v/b = (485*1e13 \\u00b1 3*1e13) / 5*1e3 = 970*1e9 \\u00b1 6*1e9\\n     *         error = 6*1e9 * 5*1e3 / 1e18 = 30*1e12/1e18 = 3*1e-5 = $0,00005\\n     *\\n     *     case #4: lot of USDT\\n     *         v = we have 100,000,000,000 USDT = $97B = 97*1e9*1e18 \\u00b1 0.5*1e9*1e18\\n     *         b = USDT.balanceOf() = 1e11*1e6 = 1e17\\n     *         or = v/b = (97*1e9*1e18 \\u00b1 0.5*1e9*1e18) / 1e17 = 970*1e9 \\u00b1 5*1e9\\n     *         error = 5*1e9 * 1e17 = 5*1e26 = 0.5 * 1e8*1e18\\n     *\\n     * @param asset - address of erc20 token contract\\n     * @return usdPrice1e18 such that asset.balanceOf() * getFiatPrice1e18(asset) / 1e18 == $$ * 1e18\\n     **/\\n    function getFiatPrice1e18(address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa56b9cc86ef5935efecc276e6a3188d518f1a99cad960083a8de35849c997687\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657611a57908161001c8239f35b600080fdfe608080604052600436101561001357600080fd5b600090813560e01c90816301ffc9a7146113805750806303eaa21a146112a757806303ee9f221461127c57806314c376dc1461124157806338013f0214611218578063438280dd146111dd578063514fcac7146110f457806371d0fb41146110b957806375071d2a1461107e57806375b238fc146110625780637bea0d1c14610ed65780638e5313e014610e9b578063a85c38ef14610e0d578063b5b3b05114610def578063ba07fc5914610dc6578063c0c53b8b14610a6f578063d09ef24114610a2c578063d7c8ae89146109e7578063dc97e84e146109ac578063dd7dc9a91461098e578063e2ed06de14610533578063e9c265181461050a578063ef3391bc146102345763f6243a041461012957600080fd5b346102315760403660031901126102315760043581526020906001825261015260408220611632565b61016060a0820151426116ce565b815160c08301516001600160a01b03939290918416600383101561021d579161018a9187936118b9565b926040816006541693015116602460405180948193631735856760e31b835260048301525afa92831561021157926101db575b50906101ce6101d39260243561150d565b611899565b604051908152f35b91508282813d831161020a575b6101f281836114cf565b81010312610205579051906101ce6101bd565b600080fd5b503d6101e8565b604051903d90823e3d90fd5b634e487b7160e01b86526021600452602486fd5b80fd5b50346102315760c03660031901126102315761024e61143d565b9060249081359061025d611453565b6001600160a01b039490939060643586811690819003610506576084359460038610156105025760a4358881168091036104fe57803b156104fe5785604051809263ef693bed60e01b82528183816102b988306004840161154e565b03925af180156104f3576104c5575b5060405197602098898101904382523360601b604082015260018060601b0319808760601b1660548301528460688301528a60601b166088820152607c815260a0810181811060018060401b038211176104b0576040525190209788875260018a52600560408820015461048b575b88875260018a526005604088200154610473579288959492826006958c9460405196610362886114b3565b16865284860192835281604087019116815260608601908a825260808701948552600160a088019642885261039b60c08a019e8f611576565b60e089019b338d528d52528260408c209751169360018060a01b03199485895416178855516001880155826002880191511684825416179055516003860155600485019251169082541617905551600582015501935192600384101561046257505082549051610100600160a81b0360089190911b1660ff929092166001600160a81b031990911617179055610430816115b3565b507f12a866cc569301d2ff9fcbbae3decc9e0cf3fa94ddef08dd0de3e9a693fb8d1982604051838152a1604051908152f35b634e487b7160e01b81526021600452fd5b604051634b92340560e01b8152600481018a90528690fd5b976001810180911161049d5797610337565b634e487b7160e01b875260116004528587fd5b87634e487b7160e01b60005260416004526000fd5b9094906001600160401b0381116104e05760405293386102c8565b634e487b7160e01b825260416004528482fd5b6040513d88823e3d90fd5b8580fd5b8480fd5b8380fd5b50346102315780600319360112610231576020604051600080516020611a028339815191528152f35b50346102315760603660031901126102315760443590602435906001600160401b0383116102315736602384011215610231578260040135610574816114f2565b9361058260405195866114cf565b818552366024838301011161098a578183926024602093018388013785010152819260043582526001602052604082209360058501548015610971576105c890426116ce565b90600186015480951161096a575b6105f360018060a01b038754169260ff60068901541690846118b9565b6006546002880154604051631735856760e31b81526001600160a01b0391821660048201529160209183916024918391165afa9081156104f35783908792610934575b5061064861065f926101ce858461150d565b9760038a016106588a8254611569565b90556116ce565b8060018901558015159182610912575b5050610900576106809133906117c5565b60028401546040516370a0823160e01b8082523060048301529290916001600160a01b031690602083602481855afa9283156108f55785936108c1575b5060405191633517a9e160e11b835260048301528560248301523360448301526080606483015281815191826084830152865b8381106108a957505060a48183888360209684010152601f8019910116810103018187335af190811561085d57849161087a575b50156108685760028501546040519283523060048401526001600160a01b031691602081602481865afa90811561085d5785908592610827575b506107699192611569565b116108155760209361078a84600193848060a01b03600485015416906117c5565b01546107e45760406107a591600435815260018552206116a4565b6107b06004356116db565b507fcdf98e0235c72ad7ae8de32249da25cc98298c8f11710c55a3d58e9e7ac69f94826040516004358152a1604051908152f35b507fc238a2d1c485b17bfd980b5e6d0483704cd4720118eb06215758d49f85ea8963826040516004358152a16101d3565b60405163395c945760e11b8152600490fd5b9150506020813d602011610855575b81610843602093836114cf565b8101031261050657518461076961075e565b3d9150610836565b6040513d86823e3d90fd5b60405163c286d75960e01b8152600490fd5b61089c915060203d6020116108a2575b61089481836114cf565b810190611536565b38610724565b503d61088a565b602082820181015160a48784010152859350016106f0565b9092506020813d6020116108ed575b816108dd602093836114cf565b81010312610502575191386106bd565b3d91506108d0565b6040513d87823e3d90fd5b60405163117be23960e31b8152600490fd5b670de0b6b3a76400009250906109279161150d565b046005541015388061066f565b9150506020813d602011610962575b81610950602093836114cf565b810103126104fe575182610648610636565b3d9150610943565b50836105d6565b60246040516373a98b6360e11b81526004356004820152fd5b8280fd5b50346102315780600319360112610231576020600554604051908152f35b503461023157806003193601126102315760206040517f9a9aef7c1247d5fc769b0185c052913e39673da29a880317dfd20ebf86f26a498152f35b5034610231576040366003190112610231576004356003811015610a2857610a1160243591611469565b600282101561098a57602092500154604051908152f35b5080fd5b503461023157602036600319011261023157610a60604061010092610a4f611998565b506004358152600160205220611632565b610a6d60405180926113db565bf35b503461023157606036600319011261023157610a8961143d565b6001600160a01b0390602435828116919082900361050657610aa9611453565b9184549360ff8560081c161592838094610db9575b8015610da2575b15610d4657600195848760ff198316178955610d35575b50865460ff8160081c1615610cdc5762010000600160b01b031916601082901b62010000600160b01b031617875581168015159081610c75575b50610c635760405193610b2885611482565b6103848552602094878682015287805260048652604088209087895b60028110610c4d5750505050604051610b5c81611482565b6202bf208152878682015286885260048652604088209087895b60028110610c365750505050604051610b8e81611482565b62069780815287868201526002908189526004875260408920888a5b848110610c1f57505050505068056bc75e2d6310000060055560018060a01b03199283600654161760065516906007541617600755610be7578280f35b825461ff00191683556040519182527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249891a138808280f35b8962ffffff85511694019381840155018990610baa565b8862ffffff84511693019281850155018890610b76565b8861ffff84511693019281850155018890610b44565b6040516384d942fd60e01b8152600490fd5b6040516301ffc9a760e01b8152637965db0b60e01b60048201529150602090829060249082905afa908115610cd1578791610cb3575b501538610b16565b610ccb915060203d81116108a25761089481836114cf565b38610cab565b6040513d89823e3d90fd5b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b61ffff191661010117875538610adc565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b158015610ac55750600160ff871614610ac5565b50600160ff871610610abe565b50346102315780600319360112610231576007546040516001600160a01b039091168152602090f35b50346102315780600319360112610231576020600254604051908152f35b503461023157602036600319011261023157604061010091600435815260016020522060018060a01b03808254169160018101549082600282015416600382015484600484015416916006600585015494015494604051978852602088015260408701526060860152608085015260a0840152610e9060c0840160ff83166113b8565b60081c1660e0820152f35b503461023157806003193601126102315760206040517fe453bacb314e78dcd5192e6b1a2b1f0e7c76e92f6b7e429a6a90f04e39db3b768152f35b5034610231578060031936011261023157604051806002548083526020809301906002855283852090855b81811061104e5750505081610f179103826114cf565b8051610f22816119d6565b91610f3060405193846114cf565b818352601f19610f3f836119d6565b01855b81811061101f575050845b828110610fac575050506040519180830190808452825180925280604085019301945b828110610f7d5784840385f35b90919282610120600192828951610f958382516113db565b015161010082015201960191019492919094610f70565b610fb981839795976119ed565b51808552600186526040852090610fdb60405192610fd684611482565b611632565b825286820152610feb82886119ed565b52610ff681876119ed565b50600019811461100b57600101949294610f4d565b634e487b7160e01b84526011600452602484fd5b859060409795975161103081611482565b611038611998565b8152868382015282828a01015201959395610f42565b825484529285019260019283019201610f01565b5034610231578060031936011261023157602090604051908152f35b503461023157806003193601126102315760206040517f5719df9ef2c4678b547f89e4f5ae410dbf400fc51cf3ded434c55f6adea2c43f8152f35b503461023157806003193601126102315760206040517f880a91047114272656e533301261260c75e4d11543ac7303d6fe4204579ec7278152f35b503461023157602036600319011261023157600435808252600160205261111d60408320611632565b60a0810151156111c45760808101516001600160a01b0392908316331415806111b4575b6111a25781516020928301517fc41f4ceb2938876c35e61b705e9d2f18a02c4a26ce5e049a6308a943d46851b39461117b923391166117c5565b8084526001825261118e604085206116a4565b611197816116db565b50604051908152a180f35b60405163da383fb560e01b8152600490fd5b508260e083015116331415611141565b6040516373a98b6360e11b815260048101839052602490fd5b503461023157806003193601126102315760206040517f39f61ca2a1a28fee144218173ec637b649a353e4026b2738c673800e5bf1437b8152f35b50346102315780600319360112610231576006546040516001600160a01b039091168152602090f35b503461023157806003193601126102315760206040517fe965846df3dd5b1dfa65f58e31477079e90140e0908b6dd31b5aead5a57cf3658152f35b50346102315780600319360112610231575460405160109190911c6001600160a01b03168152602090f35b5034610231576060366003190112610231576004356003811015610a285736606411610a28578154604051632474521560e21b8152600080516020611a0283398151915260048201523360248201526020929183908290604490829060101c6001600160a01b03165afa90811561085d578491611363575b50156113515761132e90611469565b602490835b6002811061133f578480f35b82358282015591830191600101611333565b60405163599a6c3360e11b8152600490fd5b61137a9150833d85116108a25761089481836114cf565b3861131f565b905034610a28576020366003190112610a285760043563ffffffff60e01b811680910361098a5763b7988ab760e01b14815260209150f35b9060038210156113c55752565b634e487b7160e01b600052602160045260246000fd5b60e0908160018060a01b0391828151168552602081015160208601528260408201511660408601526060810151606086015282608082015116608086015260a081015160a086015261143560c082015160c08701906113b8565b015116910152565b600435906001600160a01b038216820361020557565b604435906001600160a01b038216820361020557565b60038110156113c5576000526004602052604060002090565b604081019081106001600160401b0382111761149d57604052565b634e487b7160e01b600052604160045260246000fd5b61010081019081106001600160401b0382111761149d57604052565b601f909101601f19168101906001600160401b0382119082101761149d57604052565b6001600160401b03811161149d57601f01601f191660200190565b8181029291811591840414171561152057565b634e487b7160e01b600052601160045260246000fd5b90816020910312610205575180151581036102055790565b6001600160a01b039091168152602081019190915260400190565b9190820180921161152057565b60038210156113c55752565b60025481101561159d57600260005260206000200190600090565b634e487b7160e01b600052603260045260246000fd5b60008181526003602052604081205461162d57600254600160401b8110156116195790826116056115ec84600160409601600255611582565b819391549060031b600019811b9283911b169119161790565b905560025492815260036020522055600190565b634e487b7160e01b82526041600452602482fd5b905090565b9060405161163f816114b3565b60e08193600660018060a01b03918281541685526001810154602086015282600282015416604086015260038101546060860152826004820154166080860152600581015460a0860152015461169b60ff821660c08601611576565b60081c16910152565b60066000918281558260018201558260028201558260038201558260048201558260058201550155565b9190820391821161152057565b60008181526003602052604081205490919080156117c057600019908082018181116117ac576002549083820191821161179857808203611764575b50505060025480156117505781019061172f82611582565b909182549160031b1b19169055600255815260036020526040812055600190565b634e487b7160e01b84526031600452602484fd5b6117826117736115ec93611582565b90549060031b1c928392611582565b9055845260036020526040842055388080611717565b634e487b7160e01b86526011600452602486fd5b634e487b7160e01b85526011600452602485fd5b505090565b60009291836117f06117fe8295604051928391602083019663a9059cbb60e01b88526024840161154e565b03601f1981018352826114cf565b51925af13d15611892573d611812816114f2565b9061182060405192836114cf565b81523d6000602083013e5b81611863575b501561183957565b60405162461bcd60e51b815260206004820152600260248201526114d560f21b6044820152606490fd5b8051801592508215611878575b505038611831565b61188b9250602080918301019101611536565b3880611870565b606061182b565b81156118a3570490565b634e487b7160e01b600052601260045260246000fd5b9160016118cf6118c883611469565b5492611469565b0154600654604051631735856760e31b81526001600160a01b0395861660048201529491939160209186916024918391165afa93841561198c57600094611959575b5081811161193c579261192e611934926101ce611939968461150d565b906116ce565b6116ce565b90565b5050508060031b908082046008149015171561152057600a900490565b90936020823d8211611984575b81611973602093836114cf565b810103126102315750519238611911565b3d9150611966565b6040513d6000823e3d90fd5b604051906119a5826114b3565b8160e06000918281528260208201528260408201528260608201528260808201528260a08201528260c08201520152565b6001600160401b03811161149d5760051b60200190565b805182101561159d5760209160051b01019056fe3b5d4cc60d3ec3516ee8ae083bd60934f6eb2a6c54b1229985c41bfb092b2603a26469706673582212200323baff56286c0defcc5f353ad959fc35876fc4d7aa5f265ce6d7a76c913a6364736f6c63430008110033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b600090813560e01c90816301ffc9a7146113805750806303eaa21a146112a757806303ee9f221461127c57806314c376dc1461124157806338013f0214611218578063438280dd146111dd578063514fcac7146110f457806371d0fb41146110b957806375071d2a1461107e57806375b238fc146110625780637bea0d1c14610ed65780638e5313e014610e9b578063a85c38ef14610e0d578063b5b3b05114610def578063ba07fc5914610dc6578063c0c53b8b14610a6f578063d09ef24114610a2c578063d7c8ae89146109e7578063dc97e84e146109ac578063dd7dc9a91461098e578063e2ed06de14610533578063e9c265181461050a578063ef3391bc146102345763f6243a041461012957600080fd5b346102315760403660031901126102315760043581526020906001825261015260408220611632565b61016060a0820151426116ce565b815160c08301516001600160a01b03939290918416600383101561021d579161018a9187936118b9565b926040816006541693015116602460405180948193631735856760e31b835260048301525afa92831561021157926101db575b50906101ce6101d39260243561150d565b611899565b604051908152f35b91508282813d831161020a575b6101f281836114cf565b81010312610205579051906101ce6101bd565b600080fd5b503d6101e8565b604051903d90823e3d90fd5b634e487b7160e01b86526021600452602486fd5b80fd5b50346102315760c03660031901126102315761024e61143d565b9060249081359061025d611453565b6001600160a01b039490939060643586811690819003610506576084359460038610156105025760a4358881168091036104fe57803b156104fe5785604051809263ef693bed60e01b82528183816102b988306004840161154e565b03925af180156104f3576104c5575b5060405197602098898101904382523360601b604082015260018060601b0319808760601b1660548301528460688301528a60601b166088820152607c815260a0810181811060018060401b038211176104b0576040525190209788875260018a52600560408820015461048b575b88875260018a526005604088200154610473579288959492826006958c9460405196610362886114b3565b16865284860192835281604087019116815260608601908a825260808701948552600160a088019642885261039b60c08a019e8f611576565b60e089019b338d528d52528260408c209751169360018060a01b03199485895416178855516001880155826002880191511684825416179055516003860155600485019251169082541617905551600582015501935192600384101561046257505082549051610100600160a81b0360089190911b1660ff929092166001600160a81b031990911617179055610430816115b3565b507f12a866cc569301d2ff9fcbbae3decc9e0cf3fa94ddef08dd0de3e9a693fb8d1982604051838152a1604051908152f35b634e487b7160e01b81526021600452fd5b604051634b92340560e01b8152600481018a90528690fd5b976001810180911161049d5797610337565b634e487b7160e01b875260116004528587fd5b87634e487b7160e01b60005260416004526000fd5b9094906001600160401b0381116104e05760405293386102c8565b634e487b7160e01b825260416004528482fd5b6040513d88823e3d90fd5b8580fd5b8480fd5b8380fd5b50346102315780600319360112610231576020604051600080516020611a028339815191528152f35b50346102315760603660031901126102315760443590602435906001600160401b0383116102315736602384011215610231578260040135610574816114f2565b9361058260405195866114cf565b818552366024838301011161098a578183926024602093018388013785010152819260043582526001602052604082209360058501548015610971576105c890426116ce565b90600186015480951161096a575b6105f360018060a01b038754169260ff60068901541690846118b9565b6006546002880154604051631735856760e31b81526001600160a01b0391821660048201529160209183916024918391165afa9081156104f35783908792610934575b5061064861065f926101ce858461150d565b9760038a016106588a8254611569565b90556116ce565b8060018901558015159182610912575b5050610900576106809133906117c5565b60028401546040516370a0823160e01b8082523060048301529290916001600160a01b031690602083602481855afa9283156108f55785936108c1575b5060405191633517a9e160e11b835260048301528560248301523360448301526080606483015281815191826084830152865b8381106108a957505060a48183888360209684010152601f8019910116810103018187335af190811561085d57849161087a575b50156108685760028501546040519283523060048401526001600160a01b031691602081602481865afa90811561085d5785908592610827575b506107699192611569565b116108155760209361078a84600193848060a01b03600485015416906117c5565b01546107e45760406107a591600435815260018552206116a4565b6107b06004356116db565b507fcdf98e0235c72ad7ae8de32249da25cc98298c8f11710c55a3d58e9e7ac69f94826040516004358152a1604051908152f35b507fc238a2d1c485b17bfd980b5e6d0483704cd4720118eb06215758d49f85ea8963826040516004358152a16101d3565b60405163395c945760e11b8152600490fd5b9150506020813d602011610855575b81610843602093836114cf565b8101031261050657518461076961075e565b3d9150610836565b6040513d86823e3d90fd5b60405163c286d75960e01b8152600490fd5b61089c915060203d6020116108a2575b61089481836114cf565b810190611536565b38610724565b503d61088a565b602082820181015160a48784010152859350016106f0565b9092506020813d6020116108ed575b816108dd602093836114cf565b81010312610502575191386106bd565b3d91506108d0565b6040513d87823e3d90fd5b60405163117be23960e31b8152600490fd5b670de0b6b3a76400009250906109279161150d565b046005541015388061066f565b9150506020813d602011610962575b81610950602093836114cf565b810103126104fe575182610648610636565b3d9150610943565b50836105d6565b60246040516373a98b6360e11b81526004356004820152fd5b8280fd5b50346102315780600319360112610231576020600554604051908152f35b503461023157806003193601126102315760206040517f9a9aef7c1247d5fc769b0185c052913e39673da29a880317dfd20ebf86f26a498152f35b5034610231576040366003190112610231576004356003811015610a2857610a1160243591611469565b600282101561098a57602092500154604051908152f35b5080fd5b503461023157602036600319011261023157610a60604061010092610a4f611998565b506004358152600160205220611632565b610a6d60405180926113db565bf35b503461023157606036600319011261023157610a8961143d565b6001600160a01b0390602435828116919082900361050657610aa9611453565b9184549360ff8560081c161592838094610db9575b8015610da2575b15610d4657600195848760ff198316178955610d35575b50865460ff8160081c1615610cdc5762010000600160b01b031916601082901b62010000600160b01b031617875581168015159081610c75575b50610c635760405193610b2885611482565b6103848552602094878682015287805260048652604088209087895b60028110610c4d5750505050604051610b5c81611482565b6202bf208152878682015286885260048652604088209087895b60028110610c365750505050604051610b8e81611482565b62069780815287868201526002908189526004875260408920888a5b848110610c1f57505050505068056bc75e2d6310000060055560018060a01b03199283600654161760065516906007541617600755610be7578280f35b825461ff00191683556040519182527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249891a138808280f35b8962ffffff85511694019381840155018990610baa565b8862ffffff84511693019281850155018890610b76565b8861ffff84511693019281850155018890610b44565b6040516384d942fd60e01b8152600490fd5b6040516301ffc9a760e01b8152637965db0b60e01b60048201529150602090829060249082905afa908115610cd1578791610cb3575b501538610b16565b610ccb915060203d81116108a25761089481836114cf565b38610cab565b6040513d89823e3d90fd5b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b61ffff191661010117875538610adc565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b158015610ac55750600160ff871614610ac5565b50600160ff871610610abe565b50346102315780600319360112610231576007546040516001600160a01b039091168152602090f35b50346102315780600319360112610231576020600254604051908152f35b503461023157602036600319011261023157604061010091600435815260016020522060018060a01b03808254169160018101549082600282015416600382015484600484015416916006600585015494015494604051978852602088015260408701526060860152608085015260a0840152610e9060c0840160ff83166113b8565b60081c1660e0820152f35b503461023157806003193601126102315760206040517fe453bacb314e78dcd5192e6b1a2b1f0e7c76e92f6b7e429a6a90f04e39db3b768152f35b5034610231578060031936011261023157604051806002548083526020809301906002855283852090855b81811061104e5750505081610f179103826114cf565b8051610f22816119d6565b91610f3060405193846114cf565b818352601f19610f3f836119d6565b01855b81811061101f575050845b828110610fac575050506040519180830190808452825180925280604085019301945b828110610f7d5784840385f35b90919282610120600192828951610f958382516113db565b015161010082015201960191019492919094610f70565b610fb981839795976119ed565b51808552600186526040852090610fdb60405192610fd684611482565b611632565b825286820152610feb82886119ed565b52610ff681876119ed565b50600019811461100b57600101949294610f4d565b634e487b7160e01b84526011600452602484fd5b859060409795975161103081611482565b611038611998565b8152868382015282828a01015201959395610f42565b825484529285019260019283019201610f01565b5034610231578060031936011261023157602090604051908152f35b503461023157806003193601126102315760206040517f5719df9ef2c4678b547f89e4f5ae410dbf400fc51cf3ded434c55f6adea2c43f8152f35b503461023157806003193601126102315760206040517f880a91047114272656e533301261260c75e4d11543ac7303d6fe4204579ec7278152f35b503461023157602036600319011261023157600435808252600160205261111d60408320611632565b60a0810151156111c45760808101516001600160a01b0392908316331415806111b4575b6111a25781516020928301517fc41f4ceb2938876c35e61b705e9d2f18a02c4a26ce5e049a6308a943d46851b39461117b923391166117c5565b8084526001825261118e604085206116a4565b611197816116db565b50604051908152a180f35b60405163da383fb560e01b8152600490fd5b508260e083015116331415611141565b6040516373a98b6360e11b815260048101839052602490fd5b503461023157806003193601126102315760206040517f39f61ca2a1a28fee144218173ec637b649a353e4026b2738c673800e5bf1437b8152f35b50346102315780600319360112610231576006546040516001600160a01b039091168152602090f35b503461023157806003193601126102315760206040517fe965846df3dd5b1dfa65f58e31477079e90140e0908b6dd31b5aead5a57cf3658152f35b50346102315780600319360112610231575460405160109190911c6001600160a01b03168152602090f35b5034610231576060366003190112610231576004356003811015610a285736606411610a28578154604051632474521560e21b8152600080516020611a0283398151915260048201523360248201526020929183908290604490829060101c6001600160a01b03165afa90811561085d578491611363575b50156113515761132e90611469565b602490835b6002811061133f578480f35b82358282015591830191600101611333565b60405163599a6c3360e11b8152600490fd5b61137a9150833d85116108a25761089481836114cf565b3861131f565b905034610a28576020366003190112610a285760043563ffffffff60e01b811680910361098a5763b7988ab760e01b14815260209150f35b9060038210156113c55752565b634e487b7160e01b600052602160045260246000fd5b60e0908160018060a01b0391828151168552602081015160208601528260408201511660408601526060810151606086015282608082015116608086015260a081015160a086015261143560c082015160c08701906113b8565b015116910152565b600435906001600160a01b038216820361020557565b604435906001600160a01b038216820361020557565b60038110156113c5576000526004602052604060002090565b604081019081106001600160401b0382111761149d57604052565b634e487b7160e01b600052604160045260246000fd5b61010081019081106001600160401b0382111761149d57604052565b601f909101601f19168101906001600160401b0382119082101761149d57604052565b6001600160401b03811161149d57601f01601f191660200190565b8181029291811591840414171561152057565b634e487b7160e01b600052601160045260246000fd5b90816020910312610205575180151581036102055790565b6001600160a01b039091168152602081019190915260400190565b9190820180921161152057565b60038210156113c55752565b60025481101561159d57600260005260206000200190600090565b634e487b7160e01b600052603260045260246000fd5b60008181526003602052604081205461162d57600254600160401b8110156116195790826116056115ec84600160409601600255611582565b819391549060031b600019811b9283911b169119161790565b905560025492815260036020522055600190565b634e487b7160e01b82526041600452602482fd5b905090565b9060405161163f816114b3565b60e08193600660018060a01b03918281541685526001810154602086015282600282015416604086015260038101546060860152826004820154166080860152600581015460a0860152015461169b60ff821660c08601611576565b60081c16910152565b60066000918281558260018201558260028201558260038201558260048201558260058201550155565b9190820391821161152057565b60008181526003602052604081205490919080156117c057600019908082018181116117ac576002549083820191821161179857808203611764575b50505060025480156117505781019061172f82611582565b909182549160031b1b19169055600255815260036020526040812055600190565b634e487b7160e01b84526031600452602484fd5b6117826117736115ec93611582565b90549060031b1c928392611582565b9055845260036020526040842055388080611717565b634e487b7160e01b86526011600452602486fd5b634e487b7160e01b85526011600452602485fd5b505090565b60009291836117f06117fe8295604051928391602083019663a9059cbb60e01b88526024840161154e565b03601f1981018352826114cf565b51925af13d15611892573d611812816114f2565b9061182060405192836114cf565b81523d6000602083013e5b81611863575b501561183957565b60405162461bcd60e51b815260206004820152600260248201526114d560f21b6044820152606490fd5b8051801592508215611878575b505038611831565b61188b9250602080918301019101611536565b3880611870565b606061182b565b81156118a3570490565b634e487b7160e01b600052601260045260246000fd5b9160016118cf6118c883611469565b5492611469565b0154600654604051631735856760e31b81526001600160a01b0395861660048201529491939160209186916024918391165afa93841561198c57600094611959575b5081811161193c579261192e611934926101ce611939968461150d565b906116ce565b6116ce565b90565b5050508060031b908082046008149015171561152057600a900490565b90936020823d8211611984575b81611973602093836114cf565b810103126102315750519238611911565b3d9150611966565b6040513d6000823e3d90fd5b604051906119a5826114b3565b8160e06000918281528260208201528260408201528260608201528260808201528260a08201528260c08201520152565b6001600160401b03811161149d5760051b60200190565b805182101561159d5760209160051b01019056fe3b5d4cc60d3ec3516ee8ae083bd60934f6eb2a6c54b1229985c41bfb092b2603a26469706673582212200323baff56286c0defcc5f353ad959fc35876fc4d7aa5f265ce6d7a76c913a6364736f6c63430008110033",
  "devdoc": {
    "details": "See IExchange interface for full details.",
    "kind": "dev",
    "methods": {
      "addOrder(address,uint256,address,address,uint8,address)": {
        "details": "This swap is async, because depends on how arbitrage bots will fill this order. Emits OrderAdded() event. Before addOrder user needs to approve token2sell for exchange contract",
        "params": {
          "amount2sell": "- Amount of {token2sell} to sell",
          "beneficiary": "- Address that will receive {token2buy} after filling order.",
          "collateralJoin": "- address of collateral adapter*",
          "discountType": "- Speed of decreasing swap price. { 0 - aggressive, 1 - middle, 2 - conservative }",
          "token2buy": "- Address of token to buy",
          "token2sell": "- Address of token to sell"
        }
      },
      "cancelOrder(uint256)": {
        "params": {
          "orderId": "- Id of order to cancel.*"
        }
      },
      "fillOrderAsFlashLoan(uint256,uint256,bytes)": {
        "details": "Caller contract receive orders {token2sell} and after that his stableunitFillOrderCallback() is called. At the end of thi callback contract should send some amount of another token back to Exchange contract.",
        "params": {
          "data": "- encoded data to pass to callback function*",
          "inAmount": "- Amount of {token2sell} to receive",
          "orderId": "- Id of order to fill."
        }
      },
      "getExpectedOrderOutcome(uint256,uint256)": {
        "returns": {
          "outAmount": "The amount of outcome that caller will receive if he will fill {orderId} with {inAmount} of {token2sell}*"
        }
      },
      "getOrder(uint256)": {
        "returns": {
          "_0": "Order with id = {orderId}*"
        }
      },
      "getOrdersCount()": {
        "returns": {
          "_0": "The amount of not full-filled orders*"
        }
      },
      "setPriceCurve(uint8,uint256[2])": {
        "params": {
          "discountType": "- discount type to change",
          "newPriceCurve": "- parameters of formula*"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      }
    },
    "title": "Exchange",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "DUST_THRESHOLD()": {
        "notice": "Amount of minimum amountLeft in order. It's measured in fiat. For example DUST_THRESHOLD = 100 * 1e18 => it's 100 USD*"
      },
      "addOrder(address,uint256,address,address,uint8,address)": {
        "notice": "Add order to swap {token2sell} to {token2buy}."
      },
      "cancelOrder(uint256)": {
        "notice": "Only user who place order or who is beneficiary can cancelOrder();"
      },
      "fillOrderAsFlashLoan(uint256,uint256,bytes)": {
        "notice": "Fill order with flash-loan like logic"
      },
      "getAllOrders()": {
        "notice": "This method will be deleted after we'll add GraphQL to watch orders*"
      },
      "priceCurve(uint8,uint256)": {
        "notice": "priceCurve is like price_t = price_0 * (1 - t/priceCurve[0]) - priceCurve[1] from timePassed = 0 to t priceCurve decrease linear, but after t (when discount is 20%), it's constant*"
      },
      "setPriceCurve(uint8,uint256[2])": {
        "notice": "Function to update price curve - how fast {token2sell} price will decrease/increase"
      }
    },
    "notice": "Main contract of Exchange module. Here we can add order or fill it to get profit.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 79,
        "contract": "contracts/exchange/contracts/Exchange.sol:Exchange",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 82,
        "contract": "contracts/exchange/contracts/Exchange.sol:Exchange",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3430,
        "contract": "contracts/exchange/contracts/Exchange.sol:Exchange",
        "label": "ACCESS_CONTROL_SINGLETON",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(ISuAccessControl)3640"
      },
      {
        "astId": 2309,
        "contract": "contracts/exchange/contracts/Exchange.sol:Exchange",
        "label": "orders",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(Order)3123_storage)"
      },
      {
        "astId": 2312,
        "contract": "contracts/exchange/contracts/Exchange.sol:Exchange",
        "label": "orderIdSet",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(UintSet)1066_storage"
      },
      {
        "astId": 2320,
        "contract": "contracts/exchange/contracts/Exchange.sol:Exchange",
        "label": "priceCurve",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_enum(DiscountType)3105,t_array(t_uint256)2_storage)"
      },
      {
        "astId": 2323,
        "contract": "contracts/exchange/contracts/Exchange.sol:Exchange",
        "label": "DUST_THRESHOLD",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 2326,
        "contract": "contracts/exchange/contracts/Exchange.sol:Exchange",
        "label": "ORACLE",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(ISuOracle)3692"
      },
      {
        "astId": 2329,
        "contract": "contracts/exchange/contracts/Exchange.sol:Exchange",
        "label": "TOP_STAKERS",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(ITopStakers)3316"
      },
      {
        "astId": 3006,
        "contract": "contracts/exchange/contracts/Exchange.sol:Exchange",
        "label": "__gap",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)45_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)2_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[2]",
        "numberOfBytes": "64"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ISuAccessControl)3640": {
        "encoding": "inplace",
        "label": "contract ISuAccessControl",
        "numberOfBytes": "20"
      },
      "t_contract(ISuOracle)3692": {
        "encoding": "inplace",
        "label": "contract ISuOracle",
        "numberOfBytes": "20"
      },
      "t_contract(ITopStakers)3316": {
        "encoding": "inplace",
        "label": "contract ITopStakers",
        "numberOfBytes": "20"
      },
      "t_enum(DiscountType)3105": {
        "encoding": "inplace",
        "label": "enum DiscountType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_enum(DiscountType)3105,t_array(t_uint256)2_storage)": {
        "encoding": "mapping",
        "key": "t_enum(DiscountType)3105",
        "label": "mapping(enum DiscountType => uint256[2])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)2_storage"
      },
      "t_mapping(t_uint256,t_struct(Order)3123_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Order)",
        "numberOfBytes": "32",
        "value": "t_struct(Order)3123_storage"
      },
      "t_struct(Order)3123_storage": {
        "encoding": "inplace",
        "label": "struct Order",
        "members": [
          {
            "astId": 3107,
            "contract": "contracts/exchange/contracts/Exchange.sol:Exchange",
            "label": "token2sell",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3109,
            "contract": "contracts/exchange/contracts/Exchange.sol:Exchange",
            "label": "amountLeft",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3111,
            "contract": "contracts/exchange/contracts/Exchange.sol:Exchange",
            "label": "token2buy",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 3113,
            "contract": "contracts/exchange/contracts/Exchange.sol:Exchange",
            "label": "token2buyAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3115,
            "contract": "contracts/exchange/contracts/Exchange.sol:Exchange",
            "label": "beneficiary",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 3117,
            "contract": "contracts/exchange/contracts/Exchange.sol:Exchange",
            "label": "creationTimestamp",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 3120,
            "contract": "contracts/exchange/contracts/Exchange.sol:Exchange",
            "label": "discountType",
            "offset": 0,
            "slot": "6",
            "type": "t_enum(DiscountType)3105"
          },
          {
            "astId": 3122,
            "contract": "contracts/exchange/contracts/Exchange.sol:Exchange",
            "label": "caller",
            "offset": 1,
            "slot": "6",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Set)594_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Set",
        "members": [
          {
            "astId": 589,
            "contract": "contracts/exchange/contracts/Exchange.sol:Exchange",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 593,
            "contract": "contracts/exchange/contracts/Exchange.sol:Exchange",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)1066_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.UintSet",
        "members": [
          {
            "astId": 1065,
            "contract": "contracts/exchange/contracts/Exchange.sol:Exchange",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)594_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}