{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSetUpgradeable {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.6.0;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\nlibrary TransferHelper {\n    /// @notice Transfers tokens from the targeted address to the given destination\n    /// @notice Errors with 'STF' if transfer fails\n    /// @param token The contract address of the token to be transferred\n    /// @param from The originating address from which the tokens will be transferred\n    /// @param to The destination address of the transfer\n    /// @param value The amount to be transferred\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) =\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\n    }\n\n    /// @notice Transfers tokens from msg.sender to a recipient\n    /// @dev Errors with ST if transfer fails\n    /// @param token The contract address of the token which will be transferred\n    /// @param to The recipient of the transfer\n    /// @param value The value of the transfer\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\n    }\n\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\n    /// @dev Errors with 'SA' if transfer fails\n    /// @param token The contract address of the token to be approved\n    /// @param to The target of the approval\n    /// @param value The amount of the given token the target will be allowed to spend\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\n    }\n\n    /// @notice Transfers ETH to the recipient address\n    /// @dev Fails with `STE`\n    /// @param to The destination of the transfer\n    /// @param value The value to be transferred\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, 'STE');\n    }\n}\n"
    },
    "contracts/exchange/contracts/Exchange.sol": {
      "content": "// SPDX-License-Identifier: BSL 1.1\npragma solidity ^0.8.0;\n\nimport \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\";\n\nimport \"../interfaces/IExchange.sol\";\nimport \"../interfaces/ITopStakers.sol\";\nimport \"../interfaces/IExchangeCallback.sol\";\nimport \"../../makerdao/interfaces/ICollateralJoin.sol\";\nimport \"../../periphery/contracts/access-control/SuAuthenticated.sol\";\nimport \"../../periphery/contracts/interfaces/oracle/ISuOracle.sol\";\n\n/**\n * @title Exchange\n * @notice Main contract of Exchange module. Here we can add order or fill it to get profit.\n * @dev See IExchange interface for full details.\n */\ncontract Exchange is SuAuthenticated, IExchange {\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.UintSet;\n    // todo: add enumerableSet of all IDs\n    mapping (uint256 => Order) public orders;\n    EnumerableSetUpgradeable.UintSet private orderIdSet;\n\n    /**\n     * @notice priceCurve is like price_t = price_0 * (1 - t/priceCurve[0]) - priceCurve[1]\n     * from timePassed = 0 to t priceCurve decrease linear, but after t (when discount is 20%), it's constant\n    **/\n    mapping (DiscountType => uint256[2]) public priceCurve;\n\n    /**\n     * @notice Amount of minimum amountLeft in order. It's measured in fiat.\n     * For example DUST_THRESHOLD = 100 * 1e18 => it's 100 USD\n    **/\n    uint256 public DUST_THRESHOLD;\n    ISuOracle public ORACLE;\n    ITopStakers public TOP_STAKERS;\n\n    function initialize(\n        address _authControl,\n        address _oracleAddress,\n        address _topStakersAddress\n    ) public initializer {\n        __suAuthenticatedInit(_authControl);\n\n        // -20% for 3min/10h/24h\n        priceCurve[DiscountType.aggressive] = [180 * 5, 0];\n        priceCurve[DiscountType.middle] = [36_000 * 5, 0];\n        priceCurve[DiscountType.conservative] = [86_400 * 5, 0];\n        DUST_THRESHOLD = 100 * 1e18;\n\n        ORACLE = ISuOracle(_oracleAddress);\n        TOP_STAKERS = ITopStakers(_topStakersAddress);\n    }\n\n    function setPriceCurve(DiscountType discountType, uint256[2] calldata newPriceCurve) public onlyDAO {\n        priceCurve[discountType] = newPriceCurve;\n    }\n\n    function addOrder(\n        address token2sell,\n        uint256 amount2sell,\n        address token2buy,\n        address beneficiary,\n        DiscountType discountType,\n        address collateralJoin // or store this map in exchange module\n    ) external returns (uint256 orderId) {\n        if (collateralJoin == address(0)) {\n            TransferHelper.safeTransferFrom(token2sell, msg.sender, address(this), amount2sell);\n        } else {\n            ICollateralJoin(collateralJoin).exit(address(this), amount2sell);\n        }\n\n        orderId = uint256(\n            keccak256(\n                abi.encodePacked(block.number, msg.sender, token2sell, amount2sell, token2buy)\n            )\n        );\n        if (orders[orderId].creationTimestamp != 0) orderId += 1;\n        if (orders[orderId].creationTimestamp != 0) revert OrderExist(orderId);\n\n        orders[orderId] = Order(\n            token2sell,\n            amount2sell,\n            token2buy,\n            0, // token2buyAmount at start should be 0\n            beneficiary,\n            block.timestamp,\n            discountType,\n            msg.sender\n        );\n        EnumerableSetUpgradeable.add(orderIdSet, orderId);\n        emit OrderAdded(orderId);\n    }\n\n    function cancelOrder(uint256 orderId) public {\n        Order memory order = orders[orderId];\n\n        if (order.creationTimestamp == 0) revert OrderNotExist(orderId);\n        if (msg.sender != order.beneficiary && msg.sender != order.caller) revert UserIsNotBeneficiary();\n\n        TransferHelper.safeTransfer(order.token2sell, msg.sender, order.amountLeft);\n        delete orders[orderId];\n        EnumerableSetUpgradeable.remove(orderIdSet, orderId);\n\n        emit OrderCanceled(orderId);\n    }\n\n    /**\n     * @notice Return discounted price of token depending on passed time and type of discount\n     * @dev orderPrice = x * 10^18 * 10^(18 - decimals) like in Oracle\n    **/\n    function getDiscountedTokenPrice(\n        address token2sell,\n        uint256 timePassed,\n        DiscountType discountType\n    ) internal view returns (uint256) {\n        uint256 curveDiv = priceCurve[discountType][0];\n        uint256 curveSub = priceCurve[discountType][1];\n        uint256 price = ORACLE.getFiatPrice1e18(token2sell);\n\n        if (timePassed > curveDiv) {\n            // minimum is 80%;\n            return price * 8 / 10;\n        }\n\n        return price - price * timePassed / curveDiv - curveSub;\n    }\n\n    function getExpectedOrderOutcome(uint256 orderId, uint256 inAmount) public view returns (uint256 outAmount) {\n        Order memory order = orders[orderId];\n        uint256 timePassed = block.timestamp - order.creationTimestamp;\n\n        // Let's assume that: inAmount = x * 10^d1, discountedTokenPrice = p1 * 10^(36 - d1), priceB = p2 * 10^(36 - d2)\n        // Then outAmount = x * 10^d1 * p1 * 10^(36 - d1) / (p2 * 10^(36 - d2)) = (x * p1 / p2) * 10^(d2)\n        uint256 discountedTokenPrice = getDiscountedTokenPrice(order.token2sell, timePassed, order.discountType);\n        uint256 priceB = ORACLE.getFiatPrice1e18(order.token2buy);\n        outAmount = inAmount * discountedTokenPrice / priceB;\n    }\n\n    // TODO: add reentrancy lock\n    function fillOrderAsFlashLoan(\n        uint256 orderId,\n        uint256 inAmount,\n        bytes memory data\n    ) external returns (uint256 outAmount) {\n        Order storage order = orders[orderId];\n\n        if (order.creationTimestamp == 0) revert OrderNotExist(orderId);\n\n        uint256 timePassed = block.timestamp - order.creationTimestamp;\n\n        // grace period\n        // solhint-disable-next-line no-empty-blocks\n        if (timePassed <= 60) {\n            /**\n                // check that msg.sender is in TopStaker list + it's on position {orderId % x}\n                uint256 numberOfStakers = TOP_STAKERS.getTopStakersLength();\n                // TODO: update top stakers to be able to give \"stake power\" to another address\n                if (!TOP_STAKERS.isTopStaker(tx.origin)) revert IsNotTopStaker(tx.origin);\n                if (\n                    uint160(tx.origin) % numberOfStakers != orderId % numberOfStakers\n                ) revert OrderNotForThisStaker(orderId, tx.origin);\n            */\n            // solhint-disable-next-line no-empty-blocks\n        } else {\n            // check that msg.sender is in TopStaker list\n        }\n\n        if (inAmount > order.amountLeft) {\n            inAmount = order.amountLeft;\n        }\n\n        // the same as in getExpectedOrderOutcome\n        uint256 discountedTokenPrice = getDiscountedTokenPrice(order.token2sell, timePassed, order.discountType);\n        uint256 priceB = ORACLE.getFiatPrice1e18(order.token2buy);\n        outAmount = inAmount * discountedTokenPrice / priceB;\n\n        order.token2buyAmount += outAmount;\n        order.amountLeft -= inAmount;\n\n        // If in order some token amount left after updating it\n        // then it should have value > DUST_THRESHOLD, counted in fiat\n        if (order.amountLeft > 0 && discountedTokenPrice * order.amountLeft / 1e18 <= DUST_THRESHOLD) {\n            revert SmallAmountLeft();\n        }\n\n        TransferHelper.safeTransfer(order.token2sell, msg.sender, inAmount);\n\n        uint256 balanceBefore = IERC20(order.token2buy).balanceOf(address(this));\n        if(!IExchangeCallback(msg.sender).stableunitFillOrderCallback(order.token2buy, outAmount, msg.sender, data)) {\n            revert CallbackError();\n        }\n        uint256 balanceAfter = IERC20(order.token2buy).balanceOf(address(this));\n        if (balanceAfter < balanceBefore + outAmount) revert NotEnoughReturnValue();\n\n        // TODO: check tokenomics with profit to exchange/middleware\n        TransferHelper.safeTransfer(order.token2buy, order.beneficiary, outAmount);\n\n        if (order.amountLeft == 0) {\n            delete orders[orderId];\n            EnumerableSetUpgradeable.remove(orderIdSet, orderId);\n            emit OrderFilled(orderId);\n        } else {\n            emit OrderFilledPartially(orderId);\n        }\n    }\n\n    function getOrder (uint256 orderId) public view returns (Order memory) {\n        return orders[orderId];\n    }\n\n    function getOrdersCount() public view returns (uint256) {\n        return EnumerableSetUpgradeable.length(orderIdSet);\n    }\n\n    // TODO: add pagination\n    /**\n     * @notice This method will be deleted after we'll add GraphQL to watch orders\n    **/\n    function getAllOrders() external view returns (OrderWithId[] memory) {\n        uint256[] memory orderIdValues = EnumerableSetUpgradeable.values(orderIdSet);\n        uint256 len = orderIdValues.length;\n        OrderWithId[] memory result = new OrderWithId[](len);\n        for (uint256 i = 0; i < len; i++) {\n            uint256 orderId = orderIdValues[i];\n            result[i] = OrderWithId({\n                order: orders[orderId],\n                orderId: orderId\n            });\n        }\n        return result;\n    }\n\n    function supportsInterface(bytes4 interfaceId) public pure override returns (bool) {\n        return interfaceId == type(IExchange).interfaceId;\n    }\n\n    uint256[45] private __gap;\n}\n"
    },
    "contracts/exchange/interfaces/IExchange.sol": {
      "content": "// SPDX-License-Identifier: BSL 1.1\npragma solidity ^0.8.0;\n\nenum DiscountType {\n    aggressive,\n    middle,\n    conservative\n}\n\nstruct Order {\n    address token2sell;\n    uint256 amountLeft;\n    address token2buy;\n    uint256 token2buyAmount;\n    address beneficiary;\n    uint256 creationTimestamp;\n    DiscountType discountType;\n    address caller;\n}\n\nstruct OrderWithId {\n    Order order;\n    uint256 orderId;\n}\n\ninterface IExchange {\n    /* ===================== ERRORS ===================== */\n    error OrderExist(uint256 orderId);\n    error OrderNotExist(uint256 orderId);\n    error IncorrectToken(address orderToken2buy, address inToken);\n    error SmallAmountLeft();\n    error UserIsNotBeneficiary();\n    error IsNotTopStaker(address staker);\n    error OrderNotForThisStaker(uint256 orderId, address staker);\n    error NotEnoughReturnValue();\n    error CallbackError();\n\n    /* ======================== EVENTS ========================= */\n    event OrderAdded(uint256 orderId);\n    event OrderCanceled(uint256 orderId);\n    event OrderFilled(uint256 orderId);\n    event OrderFilledPartially(uint256 orderId);\n    event LpOrdersAdded(address LPToken, uint256[] orderIds);\n\n    /* ==================== MUTABLE METHODS ==================== */\n\n    /**\n      * @notice Add order to swap {token2sell} to {token2buy}.\n      * @dev This swap is async, because depends on how arbitrage bots will fill this order. Emits OrderAdded() event.\n      * Before addOrder user needs to approve token2sell for exchange contract\n      * @param token2sell - Address of token to sell\n      * @param amount2sell - Amount of {token2sell} to sell\n      * @param token2buy - Address of token to buy\n      * @param beneficiary - Address that will receive {token2buy} after filling order.\n      * @param discountType - Speed of decreasing swap price. { 0 - aggressive, 1 - middle, 2 - conservative }\n      * @param collateralJoin - address of collateral adapter\n     **/\n    function addOrder (\n        address token2sell,\n        uint256 amount2sell,\n        address token2buy,\n        address beneficiary,\n        DiscountType discountType,\n        address collateralJoin\n    ) external returns (uint256);\n\n    /**\n      * @notice Only user who place order or who is beneficiary can cancelOrder();\n      * @param orderId - Id of order to cancel.\n     **/\n    function cancelOrder (uint256 orderId) external;\n\n    /**\n      * @notice Fill order with flash-loan like logic\n      * @dev Caller contract receive orders {token2sell} and after that his stableunitFillOrderCallback() is called.\n      * At the end of thi callback contract should send some amount of another token back to Exchange contract.\n      * @param orderId - Id of order to fill.\n      * @param inAmount - Amount of {token2sell} to receive\n      * @param data - encoded data to pass to callback function\n     **/\n    function fillOrderAsFlashLoan (\n        uint256 orderId,\n        uint256 inAmount,\n        bytes memory data\n    ) external returns (uint256 outAmount);\n\n    /**\n      * @notice Function to update price curve - how fast {token2sell} price will decrease/increase\n      * @param discountType - discount type to change\n      * @param newPriceCurve - parameters of formula\n     **/\n    function setPriceCurve(DiscountType discountType, uint256[2] calldata newPriceCurve) external;\n\n    /* ==================== VIEW METHODS ==================== */\n    /**\n      * @return The amount of outcome that caller will receive if he will fill {orderId} with {inAmount} of {token2sell}\n     **/\n    function getExpectedOrderOutcome (uint256 orderId, uint256 inAmount) external view returns (uint256);\n\n    /**\n      * @return Order with id = {orderId}\n     **/\n    function getOrder (uint256 orderId) external view returns (Order memory);\n\n    /**\n      * @return The amount of not full-filled orders\n     **/\n    function getOrdersCount () external view returns (uint256);\n\n    /**\n      * @return The array of all not-filled orders. May be deleted after adding GraphQL for orderIds\n     **/\n    function getAllOrders () external view returns (OrderWithId[] memory);\n}\n"
    },
    "contracts/exchange/interfaces/IExchangeCallback.sol": {
      "content": "// SPDX-License-Identifier: BSL 1.1\npragma solidity ^0.8.0;\n\ninterface IExchangeCallback {\n    /**\n     * @notice Callback that will be called by Exchange module in fillOrderAsFlashLoan()\n     * after sending collateral to msg.sender.\n     * In the implementation you must pay stablecoin for Exchange contract.\n     * @dev Any contract that calls Exchange#fillOrderAsFlashLoan must implement this interface\n     * @param asset - The address of the token that should be returned\n     * @param amount - The amount of the {token} to return\n     * @param initiator The address of the flashloan initiator\n     * @return True if the execution of the operation succeeds, false otherwise\n     */\n    function stableunitFillOrderCallback (\n        address asset,\n        uint256 amount,\n        address initiator,\n        bytes calldata params\n    ) external returns (bool);\n}\n"
    },
    "contracts/exchange/interfaces/ITopStakers.sol": {
      "content": "// SPDX-License-Identifier: BSL 1.1\npragma solidity ^0.8.0;\n\n// WARNING: Implementation is a mock, but the interface will be the same\ninterface ITopStakers {\n    /* ===================== ERRORS ===================== */\n    error StakerExist(address staker);\n    error StakerNotExist(address staker);\n\n    /* ==================== MUTABLE METHODS ==================== */\n\n    function addTopStaker(address staker) external;\n\n    function removeTopStaker(address staker) external;\n\n    /* ==================== VIEW METHODS ==================== */\n\n    function isTopStaker(address staker) external view returns(bool);\n    function getTopStakersLength() external view returns(uint256);\n}"
    },
    "contracts/makerdao/interfaces/ICollateralJoin.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport {IDisable} from \"./IDisable.sol\";\n\n/**\n * @title ITaxCollector\n **/\ninterface ICollateralJoin is IDisable {\n\n    /* ===================== EVENTS ===================== */\n\n    event Join(address indexed usr, uint256 wad);\n    event Exit(address indexed usr, uint256 wad);\n\n    /* ==================== METHODS ==================== */\n\n    function collateral() external view returns(IERC20Metadata);\n\n    /**\n    * @notice Join collateral in the system\n    * @param usr Account from which we transferFrom collateral and add it in the system\n    * @param wad Amount of collateral to transfer in the system (represented as a number with 18 decimals)\n    **/\n    function join(address usr, uint wad) external;\n\n    /**\n    * @notice Exit collateral from the system\n    * @param usr Account to which we transfer the collateral\n    * @param wad Amount of collateral to transfer to 'account' (represented as a number with 18 decimals)\n    **/\n    function exit(address usr, uint wad) external;\n}\n"
    },
    "contracts/makerdao/interfaces/IDisable.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\ninterface IDisable {\n    event DisableContract();\n\n    function disableContract() external;\n}\n"
    },
    "contracts/periphery/contracts/access-control/SuAccessRoles.sol": {
      "content": "// SPDX-License-Identifier: BSL 1.1\n\npragma solidity ^0.8.0;\n\n/**\n * @title SuAccessRoles Library\n * @dev SuAuthenticated and SuAccessControlSingleton need to have this constants\n * Hierarchy:\n *      1. DAO - can give admins and system roles\n *      2.1. Admin - can set Alerters\n *      2.2. System - includes Minter, Liquidation, Reward and Disabler roles, don't have access to give some roles.\n *      3. Alerter - can send alerts and trigger rate limits, don't have access to give some roles.\n */\nabstract contract SuAccessRoles {\n    bytes32 public constant ADMIN_ROLE = 0x00;\n\n    bytes32 public constant DAO_ROLE = keccak256(\"DAO_ROLE\");\n\n    bytes32 public constant ALERTER_ROLE = keccak256(\"ALERTER_ROLE\");\n\n    // system roles\n    bytes32 public constant MINT_ACCESS_ROLE = keccak256(\"MINT_ACCESS_ROLE\");\n    bytes32 public constant LIQUIDATION_ACCESS_ROLE = keccak256(\"LIQUIDATION_ACCESS_ROLE\");\n    bytes32 public constant REWARD_ACCESS_ROLE = keccak256(\"REWARD_ACCESS_ROLE\");\n    bytes32 public constant SYSTEM_ROLE = keccak256(\"SYSTEM_ROLE\");\n    bytes32 public constant DISABLER_ROLE = keccak256(\"DISABLER_ROLE\");\n    bytes32 public constant CDP_ACCESS_ROLE = keccak256(\"CDP_ACCESS_ROLE\");\n}\n"
    },
    "contracts/periphery/contracts/access-control/SuAuthenticated.sol": {
      "content": "// SPDX-License-Identifier: BSL 1.1\n\npragma solidity ^0.8.0;\n\nimport \"../interfaces/access-control/ISuAccessControl.sol\";\nimport \"./SuAccessRoles.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @title SuAuthenticated\n * @dev other contracts should inherit to be authenticated.\n * The address of SuAccessControlSingleton should be one for all contract that inherits SuAuthenticated\n */\nabstract contract SuAuthenticated is Initializable, SuAccessRoles, IERC165Upgradeable {\n    ISuAccessControl public ACCESS_CONTROL_SINGLETON;\n\n    error OnlyDAOError();\n    error OnlyAdminError();\n    error OnlyAlerterError();\n    error OnlyVaultAccessError();\n    error OnlyLiquidationAccessError();\n    error OnlyMintAccessError();\n    error OnlyRewardAccessError();\n    error OnlyDisablerAccessError();\n    error OnlyRoleError();\n    error BadAccessControlSingleton();\n\n    /**\n     * @dev should be passed in constructor\n     */\n    function __suAuthenticatedInit(address _accessControlSingleton) internal onlyInitializing {\n        ACCESS_CONTROL_SINGLETON = ISuAccessControl(_accessControlSingleton);\n        if (\n            _accessControlSingleton != address(0) &&\n            !ISuAccessControl(_accessControlSingleton).supportsInterface(type(IAccessControlUpgradeable).interfaceId)\n        ) revert BadAccessControlSingleton();\n    }\n\n    /** CORE ROLES */\n\n    modifier onlyDAO() {\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(DAO_ROLE, msg.sender)) revert OnlyDAOError();\n        _;\n    }\n\n    modifier onlyAdmin() {\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(ADMIN_ROLE, msg.sender)) revert OnlyAdminError();\n        _;\n    }\n\n    modifier onlyAlerter() {\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(ALERTER_ROLE, msg.sender)) revert OnlyAlerterError();\n        _;\n    }\n\n    /** SYSTEM ROLES */\n\n    modifier onlyLiquidationAccess() {\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(LIQUIDATION_ACCESS_ROLE, msg.sender)) revert OnlyLiquidationAccessError();\n        _;\n    }\n\n    modifier onlyMintAccess() {\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(MINT_ACCESS_ROLE, msg.sender)) revert OnlyMintAccessError();\n        _;\n    }\n\n    modifier onlyRewardAccess() {\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(REWARD_ACCESS_ROLE, msg.sender)) revert OnlyRewardAccessError();\n        _;\n    }\n\n    modifier onlyDisablerAccess() {\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(DISABLER_ROLE, msg.sender)) revert OnlyDisablerAccessError();\n        _;\n    }\n\n    // syntax sugar under ACCESS_CONTROL_SINGLETON\n    modifier onlyRole(bytes32 role) {\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(role, msg.sender)) revert OnlyRoleError();\n        _;\n    }\n\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return ACCESS_CONTROL_SINGLETON.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "contracts/periphery/contracts/interfaces/access-control/ISuAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\";\nimport \"../../access-control/SuAccessRoles.sol\";\n\n/**\n * @notice Access control for contracts\n * @dev External interface of AccessControl declared to support ERC165 detection.\n **/\ninterface ISuAccessControl is IAccessControlUpgradeable, IERC165Upgradeable {\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\n}\n"
    },
    "contracts/periphery/contracts/interfaces/oracle/ISuOracle.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\n// solhint-disable compiler-version\npragma solidity >=0.7.6;\n\ninterface ISuOracle {\n    /**\n     * @notice WARNING! Read this description very carefully!\n     *     function getFiatPrice1e18(address asset) returns (uint256) that:\n     *         basicAmountOfAsset * getFiatPrice1e18(asset) / 1e18 === $$ * 1e18\n     *     in other words, it doesn't matter what's the erc20.decimals is,\n     *     you just multiply token balance in basic units on value from oracle and get dollar amount multiplied on 1e18.\n     *\n     * different assets have different deviation threshold (errors)\n     *     for wBTC it's <= 0.5%, read more https://data.chain.link/ethereum/mainnet/crypto-usd/btc-usd\n     *     for other asset is can be larger based on particular oracle implementation.\n     *\n     * examples:\n     *     market price of btc = $30k,\n     *     for 0.1 wBTC the unit256 amount is 0.1 * 1e18\n     *     0.1 * 1e18 * (price1e18 / 1e18) == $3000 == uint256(3000*1e18)\n     *     => price1e18 = 30000 * 1e18;\n     *\n     *     market price of usdt = $0.97,\n     *     for 1 usdt uint256 = 1 * 1e6\n     *     so 1*1e6 * price1e18 / 1e18 == $0.97 == uint256(0.97*1e18)\n     *     => 1*1e6 * (price1e18 / 1e18) / (0.97*1e18)   = 1\n     *     =>  price1e18 = 0.97 * (1e18/1e6) * 1e18\n     *\n     *    assume market price of wBTC = $31,503.77, oracle error = $158\n     *\n     *     case #1: small amount of wBTC\n     *         we have 0.0,000,001 wBTC that is worth v = $0.00315 ± $0.00001 = 0.00315*1e18 = 315*1e13 ± 1*1e13\n     *         actual balance on the asset b = wBTC.balanceOf() =  0.0000001*1e18 = 1e11\n     *         oracle should return or = oracle.getFiatPrice1e18(wBTC) <=>\n     *         <=> b*or = v => v/b = 315*1e13 / 1e11 = 315*1e2 ± 1e2\n     *         error = or.error * b = 1e2 * 1e11 = 1e13 => 1e13/1e18 usd = 1e-5 = 0.00001 usd\n     *\n     *     case #2: large amount of wBTC\n     *         v = 2,000,000 wBTC = $31,503.77 * 2m ± 158*2m = $63,007,540,000 ± $316,000,000 = 63,007*1e24 ± 316*1e24\n     *         for calc convenience we increase error on 0.05 and have v = 63,000*24 ± 300*1e24 = (630 ± 3)*1e26\n     *         b = 2*1e6 * 1e18 = 2*1e24\n     *         or = v/b = (630 ± 3)*1e26 / 2*1e24 = 315*1e2 ± 1.5*1e2\n     *         error = or.error * b = 1.5*100 * 2*1e24 = 3*1e26 = 3*1e8*1e18 = $300,000,000 ~ $316,000,000\n     *\n     *     assume the market price of USDT = $0.97 ± $0.00485,\n     *\n     *     case #3: little amount of USDT\n     *         v = USDT amount 0.005 = 0.005*(0.97 ± 0.00485) = 0.00485*1e18 ± 0.00002425*1e18 = 485*1e13 ± 3*1e13\n     *         we rounded error up on (3000-2425)/2425 ~= +24% for calculation convenience.\n     *         b = USDT.balanceOf() = 0.005*1e6 = 5*1e3\n     *         b*or = v => or = v/b = (485*1e13 ± 3*1e13) / 5*1e3 = 970*1e9 ± 6*1e9\n     *         error = 6*1e9 * 5*1e3 / 1e18 = 30*1e12/1e18 = 3*1e-5 = $0,00005\n     *\n     *     case #4: lot of USDT\n     *         v = we have 100,000,000,000 USDT = $97B = 97*1e9*1e18 ± 0.5*1e9*1e18\n     *         b = USDT.balanceOf() = 1e11*1e6 = 1e17\n     *         or = v/b = (97*1e9*1e18 ± 0.5*1e9*1e18) / 1e17 = 970*1e9 ± 5*1e9\n     *         error = 5*1e9 * 1e17 = 5*1e26 = 0.5 * 1e8*1e18\n     *\n     * @param asset - address of erc20 token contract\n     * @return usdPrice1e18 such that asset.balanceOf() * getFiatPrice1e18(asset) / 1e18 == $$ * 1e18\n     **/\n    function getFiatPrice1e18(address asset) external view returns (uint256);\n}\n"
    },
    "contracts/periphery/contracts/interfaces/oracle/ISuOracleAggregator.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport \"./ISuOracle.sol\";\n\ninterface ISuOracleAggregator is ISuOracle {\n    /* ===================== ERRORS ===================== */\n    error NoOracleFound(address asset);\n    error NoOracleImplementation();\n    error BadOracleId();\n\n    /* ====================== VARS ====================== */\n    function assetToOracle (address asset) external view returns ( uint256 );\n    function oracleImplementations (uint256 oracleId) external view returns ( ISuOracle );\n\n    /* ==================== METHODS ==================== */\n    /**\n       * @notice assign address of oracle implementation to the oracleId\n    * @param oracleId - number 0,1, etc to assign the oracle\n    * @param oracleImplementation - an address with ISuOracle implementation contract\n    **/\n    function setOracleImplementation(uint256 oracleId, ISuOracle oracleImplementation) external;\n\n    /**\n    * @notice specify what oracleId should be used for each assets. Checks that oracleId has an implementation\n    **/\n    function setOracleIdForAssets(address[] memory assets, uint256 oracleId) external;\n\n    /* ==================== VIEW METHODS ==================== */\n    /**\n    * @return true if oracle is set to this asset, false otherwise\n    **/\n    function hasPriceForAsset(address asset) external view returns(bool);\n}\n"
    },
    "contracts/periphery/contracts/oracle/SuOracleAggregator.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.0;\n\n/*\n    OracleAggregator aggregates several oracles inside, such as: getUsdPrice asset -> id -> call to implementation\n    We have several oracle implementations of ISuOracle (they are inside this folder)\n*/\n\nimport \"../access-control/SuAuthenticated.sol\";\nimport \"../interfaces/oracle/ISuOracleAggregator.sol\";\n\n/**\n * @title SuChainlinkOracle\n * @notice Oracle that aggregate all oracles, like router\n * @dev See ISuOracleAggregator interface for full details.\n */\ncontract SuOracleAggregator is ISuOracleAggregator, SuAuthenticated {\n    mapping (address => uint256) public assetToOracle;\n    mapping (uint256 => ISuOracle) public oracleImplementations;\n\n    function initialize(address _authControl) public initializer {\n        __suAuthenticatedInit(_authControl);\n    }\n\n    function hasPriceForAsset(address asset) public view returns (bool) {\n        return assetToOracle[asset] != 0;\n    }\n\n    function getFiatPrice1e18(address asset) external view returns (uint256) {\n        uint256 oracleId = assetToOracle[asset];\n        if (oracleId == 0) revert NoOracleFound(asset);\n        ISuOracle oracleImplementation = oracleImplementations[oracleId];\n        if (address(oracleImplementation) == address(0)) revert NoOracleImplementation();\n        return oracleImplementation.getFiatPrice1e18(asset);\n    }\n\n    function setOracleImplementation(uint256 oracleId, ISuOracle oracleImplementation) external onlyDAO {\n        if (oracleId == 0) revert BadOracleId();\n        if (address(oracleImplementation) == address(0)) revert NoOracleImplementation();\n        oracleImplementations[oracleId] = oracleImplementation;\n    }\n\n    function setOracleIdForAssets(address[] memory assets, uint256 oracleId) external onlyDAO {\n        if (address(oracleImplementations[oracleId]) == address(0)) revert NoOracleImplementation();\n        for (uint256 i = 0; i < assets.length; ++i) {\n            assetToOracle[assets[i]] = oracleId;\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1
    },
    "viaIR": true,
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}