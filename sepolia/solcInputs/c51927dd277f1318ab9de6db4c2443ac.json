{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSetUpgradeable {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.6.0;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\nlibrary TransferHelper {\n    /// @notice Transfers tokens from the targeted address to the given destination\n    /// @notice Errors with 'STF' if transfer fails\n    /// @param token The contract address of the token to be transferred\n    /// @param from The originating address from which the tokens will be transferred\n    /// @param to The destination address of the transfer\n    /// @param value The amount to be transferred\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) =\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\n    }\n\n    /// @notice Transfers tokens from msg.sender to a recipient\n    /// @dev Errors with ST if transfer fails\n    /// @param token The contract address of the token which will be transferred\n    /// @param to The recipient of the transfer\n    /// @param value The value of the transfer\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\n    }\n\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\n    /// @dev Errors with 'SA' if transfer fails\n    /// @param token The contract address of the token to be approved\n    /// @param to The target of the approval\n    /// @param value The amount of the given token the target will be allowed to spend\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\n    }\n\n    /// @notice Transfers ETH to the recipient address\n    /// @dev Fails with `STE`\n    /// @param to The destination of the transfer\n    /// @param value The value to be transferred\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, 'STE');\n    }\n}\n"
    },
    "contracts/exchange/contracts/Exchange.sol": {
      "content": "// SPDX-License-Identifier: BSL 1.1\npragma solidity ^0.8.0;\n\nimport \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\";\n\nimport \"../interfaces/IExchange.sol\";\nimport \"../interfaces/ITopStakers.sol\";\nimport \"../interfaces/IExchangeCallback.sol\";\nimport \"../../makerdao/interfaces/ICollateralJoin.sol\";\nimport \"../../periphery/contracts/access-control/SuAuthenticated.sol\";\nimport \"../../periphery/contracts/interfaces/oracle/ISuOracle.sol\";\n\n/**\n * @title Exchange\n * @notice Main contract of Exchange module. Here we can add order or fill it to get profit.\n * @dev See IExchange interface for full details.\n */\ncontract Exchange is SuAuthenticated, IExchange {\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.UintSet;\n    // todo: add enumerableSet of all IDs\n    mapping (uint256 => Order) public orders;\n    EnumerableSetUpgradeable.UintSet private orderIdSet;\n\n    /**\n     * @notice priceCurve is like price_t = price_0 * (1 - t/priceCurve[0]) - priceCurve[1]\n     * from timePassed = 0 to t priceCurve decrease linear, but after t (when discount is 20%), it's constant\n    **/\n    mapping (DiscountType => uint256[2]) public priceCurve;\n\n    /**\n     * @notice Amount of minimum amountLeft in order. It's measured in fiat.\n     * For example DUST_THRESHOLD = 100 * 1e18 => it's 100 USD\n    **/\n    uint256 public DUST_THRESHOLD;\n    ISuOracle public ORACLE;\n    ITopStakers public TOP_STAKERS;\n\n    function initialize(\n        address _authControl,\n        address _oracleAddress,\n        address _topStakersAddress\n    ) public initializer {\n        __suAuthenticatedInit(_authControl);\n\n        // -20% for 3min/10h/24h\n        priceCurve[DiscountType.aggressive] = [180 * 5, 0];\n        priceCurve[DiscountType.middle] = [36_000 * 5, 0];\n        priceCurve[DiscountType.conservative] = [86_400 * 5, 0];\n        DUST_THRESHOLD = 100 * 1e18;\n\n        ORACLE = ISuOracle(_oracleAddress);\n        TOP_STAKERS = ITopStakers(_topStakersAddress);\n    }\n\n    function setPriceCurve(DiscountType discountType, uint256[2] calldata newPriceCurve) public onlyDAO {\n        priceCurve[discountType] = newPriceCurve;\n    }\n\n    function addOrder(\n        address token2sell,\n        uint256 amount2sell,\n        address token2buy,\n        address beneficiary,\n        DiscountType discountType,\n        address collateralJoin // or store this map in exchange module\n    ) external returns (uint256 orderId) {\n        if (collateralJoin == address(0)) {\n            TransferHelper.safeTransferFrom(token2sell, msg.sender, address(this), amount2sell);\n        } else {\n            ICollateralJoin(collateralJoin).exit(address(this), amount2sell);\n        }\n\n        orderId = uint256(\n            keccak256(\n                abi.encodePacked(block.number, msg.sender, token2sell, amount2sell, token2buy)\n            )\n        );\n        if (orders[orderId].creationTimestamp != 0) orderId += 1;\n        if (orders[orderId].creationTimestamp != 0) revert OrderExist(orderId);\n\n        orders[orderId] = Order(\n            token2sell,\n            amount2sell,\n            token2buy,\n            0, // token2buyAmount at start should be 0\n            beneficiary,\n            block.timestamp,\n            discountType,\n            msg.sender\n        );\n        EnumerableSetUpgradeable.add(orderIdSet, orderId);\n        emit OrderAdded(orderId);\n    }\n\n    function cancelOrder(uint256 orderId) public {\n        Order memory order = orders[orderId];\n\n        if (order.creationTimestamp == 0) revert OrderNotExist(orderId);\n        if (msg.sender != order.beneficiary && msg.sender != order.caller) revert UserIsNotBeneficiary();\n\n        TransferHelper.safeTransfer(order.token2sell, msg.sender, order.amountLeft);\n        delete orders[orderId];\n        EnumerableSetUpgradeable.remove(orderIdSet, orderId);\n\n        emit OrderCanceled(orderId);\n    }\n\n    /**\n     * @notice Return discounted price of token depending on passed time and type of discount\n     * @dev orderPrice = x * 10^18 * 10^(18 - decimals) like in Oracle\n    **/\n    function getDiscountedTokenPrice(\n        address token2sell,\n        uint256 timePassed,\n        DiscountType discountType\n    ) internal view returns (uint256) {\n        uint256 curveDiv = priceCurve[discountType][0];\n        uint256 curveSub = priceCurve[discountType][1];\n        uint256 price = ORACLE.getFiatPrice1e18(token2sell);\n\n        if (timePassed > curveDiv) {\n            // minimum is 80%;\n            return price * 8 / 10;\n        }\n\n        return price - price * timePassed / curveDiv - curveSub;\n    }\n\n    function getExpectedOrderOutcome(uint256 orderId, uint256 inAmount) public view returns (uint256 outAmount) {\n        Order memory order = orders[orderId];\n        uint256 timePassed = block.timestamp - order.creationTimestamp;\n\n        // Let's assume that: inAmount = x * 10^d1, discountedTokenPrice = p1 * 10^(36 - d1), priceB = p2 * 10^(36 - d2)\n        // Then outAmount = x * 10^d1 * p1 * 10^(36 - d1) / (p2 * 10^(36 - d2)) = (x * p1 / p2) * 10^(d2)\n        uint256 discountedTokenPrice = getDiscountedTokenPrice(order.token2sell, timePassed, order.discountType);\n        uint256 priceB = ORACLE.getFiatPrice1e18(order.token2buy);\n        outAmount = inAmount * discountedTokenPrice / priceB;\n    }\n\n    // TODO: add reentrancy lock\n    function fillOrderAsFlashLoan(\n        uint256 orderId,\n        uint256 inAmount,\n        bytes memory data\n    ) external returns (uint256 outAmount) {\n        Order storage order = orders[orderId];\n\n        if (order.creationTimestamp == 0) revert OrderNotExist(orderId);\n\n        uint256 timePassed = block.timestamp - order.creationTimestamp;\n\n        // grace period\n        // solhint-disable-next-line no-empty-blocks\n        if (timePassed <= 60) {\n            /**\n                // check that msg.sender is in TopStaker list + it's on position {orderId % x}\n                uint256 numberOfStakers = TOP_STAKERS.getTopStakersLength();\n                // TODO: update top stakers to be able to give \"stake power\" to another address\n                if (!TOP_STAKERS.isTopStaker(tx.origin)) revert IsNotTopStaker(tx.origin);\n                if (\n                    uint160(tx.origin) % numberOfStakers != orderId % numberOfStakers\n                ) revert OrderNotForThisStaker(orderId, tx.origin);\n            */\n            // solhint-disable-next-line no-empty-blocks\n        } else {\n            // check that msg.sender is in TopStaker list\n        }\n\n        if (inAmount > order.amountLeft) {\n            inAmount = order.amountLeft;\n        }\n\n        // the same as in getExpectedOrderOutcome\n        uint256 discountedTokenPrice = getDiscountedTokenPrice(order.token2sell, timePassed, order.discountType);\n        uint256 priceB = ORACLE.getFiatPrice1e18(order.token2buy);\n        outAmount = inAmount * discountedTokenPrice / priceB;\n\n        order.token2buyAmount += outAmount;\n        order.amountLeft -= inAmount;\n\n        // If in order some token amount left after updating it\n        // then it should have value > DUST_THRESHOLD, counted in fiat\n        if (order.amountLeft > 0 && discountedTokenPrice * order.amountLeft / 1e18 <= DUST_THRESHOLD) {\n            revert SmallAmountLeft();\n        }\n\n        TransferHelper.safeTransfer(order.token2sell, msg.sender, inAmount);\n\n        uint256 balanceBefore = IERC20(order.token2buy).balanceOf(address(this));\n        if(!IExchangeCallback(msg.sender).stableunitFillOrderCallback(order.token2buy, outAmount, msg.sender, data)) {\n            revert CallbackError();\n        }\n        uint256 balanceAfter = IERC20(order.token2buy).balanceOf(address(this));\n        if (balanceAfter < balanceBefore + outAmount) revert NotEnoughReturnValue();\n\n        // TODO: check tokenomics with profit to exchange/middleware\n        TransferHelper.safeTransfer(order.token2buy, order.beneficiary, outAmount);\n\n        if (order.amountLeft == 0) {\n            delete orders[orderId];\n            EnumerableSetUpgradeable.remove(orderIdSet, orderId);\n            emit OrderFilled(orderId);\n        } else {\n            emit OrderFilledPartially(orderId);\n        }\n    }\n\n    function getOrder (uint256 orderId) public view returns (Order memory) {\n        return orders[orderId];\n    }\n\n    function getOrdersCount() public view returns (uint256) {\n        return EnumerableSetUpgradeable.length(orderIdSet);\n    }\n\n    // TODO: add pagination\n    /**\n     * @notice This method will be deleted after we'll add GraphQL to watch orders\n    **/\n    function getAllOrders() external view returns (OrderWithId[] memory) {\n        uint256[] memory orderIdValues = EnumerableSetUpgradeable.values(orderIdSet);\n        uint256 len = orderIdValues.length;\n        OrderWithId[] memory result = new OrderWithId[](len);\n        for (uint256 i = 0; i < len; i++) {\n            uint256 orderId = orderIdValues[i];\n            result[i] = OrderWithId({\n                order: orders[orderId],\n                orderId: orderId\n            });\n        }\n        return result;\n    }\n\n    function supportsInterface(bytes4 interfaceId) public pure override returns (bool) {\n        return interfaceId == type(IExchange).interfaceId;\n    }\n\n    uint256[45] private __gap;\n}\n"
    },
    "contracts/exchange/interfaces/IExchange.sol": {
      "content": "// SPDX-License-Identifier: BSL 1.1\npragma solidity ^0.8.0;\n\nenum DiscountType {\n    aggressive,\n    middle,\n    conservative\n}\n\nstruct Order {\n    address token2sell;\n    uint256 amountLeft;\n    address token2buy;\n    uint256 token2buyAmount;\n    address beneficiary;\n    uint256 creationTimestamp;\n    DiscountType discountType;\n    address caller;\n}\n\nstruct OrderWithId {\n    Order order;\n    uint256 orderId;\n}\n\ninterface IExchange {\n    /* ===================== ERRORS ===================== */\n    error OrderExist(uint256 orderId);\n    error OrderNotExist(uint256 orderId);\n    error IncorrectToken(address orderToken2buy, address inToken);\n    error SmallAmountLeft();\n    error UserIsNotBeneficiary();\n    error IsNotTopStaker(address staker);\n    error OrderNotForThisStaker(uint256 orderId, address staker);\n    error NotEnoughReturnValue();\n    error CallbackError();\n\n    /* ======================== EVENTS ========================= */\n    event OrderAdded(uint256 orderId);\n    event OrderCanceled(uint256 orderId);\n    event OrderFilled(uint256 orderId);\n    event OrderFilledPartially(uint256 orderId);\n    event LpOrdersAdded(address LPToken, uint256[] orderIds);\n\n    /* ==================== MUTABLE METHODS ==================== */\n\n    /**\n      * @notice Add order to swap {token2sell} to {token2buy}.\n      * @dev This swap is async, because depends on how arbitrage bots will fill this order. Emits OrderAdded() event.\n      * Before addOrder user needs to approve token2sell for exchange contract\n      * @param token2sell - Address of token to sell\n      * @param amount2sell - Amount of {token2sell} to sell\n      * @param token2buy - Address of token to buy\n      * @param beneficiary - Address that will receive {token2buy} after filling order.\n      * @param discountType - Speed of decreasing swap price. { 0 - aggressive, 1 - middle, 2 - conservative }\n      * @param collateralJoin - address of collateral adapter\n     **/\n    function addOrder (\n        address token2sell,\n        uint256 amount2sell,\n        address token2buy,\n        address beneficiary,\n        DiscountType discountType,\n        address collateralJoin\n    ) external returns (uint256);\n\n    /**\n      * @notice Only user who place order or who is beneficiary can cancelOrder();\n      * @param orderId - Id of order to cancel.\n     **/\n    function cancelOrder (uint256 orderId) external;\n\n    /**\n      * @notice Fill order with flash-loan like logic\n      * @dev Caller contract receive orders {token2sell} and after that his stableunitFillOrderCallback() is called.\n      * At the end of thi callback contract should send some amount of another token back to Exchange contract.\n      * @param orderId - Id of order to fill.\n      * @param inAmount - Amount of {token2sell} to receive\n      * @param data - encoded data to pass to callback function\n     **/\n    function fillOrderAsFlashLoan (\n        uint256 orderId,\n        uint256 inAmount,\n        bytes memory data\n    ) external returns (uint256 outAmount);\n\n    /**\n      * @notice Function to update price curve - how fast {token2sell} price will decrease/increase\n      * @param discountType - discount type to change\n      * @param newPriceCurve - parameters of formula\n     **/\n    function setPriceCurve(DiscountType discountType, uint256[2] calldata newPriceCurve) external;\n\n    /* ==================== VIEW METHODS ==================== */\n    /**\n      * @return The amount of outcome that caller will receive if he will fill {orderId} with {inAmount} of {token2sell}\n     **/\n    function getExpectedOrderOutcome (uint256 orderId, uint256 inAmount) external view returns (uint256);\n\n    /**\n      * @return Order with id = {orderId}\n     **/\n    function getOrder (uint256 orderId) external view returns (Order memory);\n\n    /**\n      * @return The amount of not full-filled orders\n     **/\n    function getOrdersCount () external view returns (uint256);\n\n    /**\n      * @return The array of all not-filled orders. May be deleted after adding GraphQL for orderIds\n     **/\n    function getAllOrders () external view returns (OrderWithId[] memory);\n}\n"
    },
    "contracts/exchange/interfaces/IExchangeCallback.sol": {
      "content": "// SPDX-License-Identifier: BSL 1.1\npragma solidity ^0.8.0;\n\ninterface IExchangeCallback {\n    /**\n     * @notice Callback that will be called by Exchange module in fillOrderAsFlashLoan()\n     * after sending collateral to msg.sender.\n     * In the implementation you must pay stablecoin for Exchange contract.\n     * @dev Any contract that calls Exchange#fillOrderAsFlashLoan must implement this interface\n     * @param asset - The address of the token that should be returned\n     * @param amount - The amount of the {token} to return\n     * @param initiator The address of the flashloan initiator\n     * @return True if the execution of the operation succeeds, false otherwise\n     */\n    function stableunitFillOrderCallback (\n        address asset,\n        uint256 amount,\n        address initiator,\n        bytes calldata params\n    ) external returns (bool);\n}\n"
    },
    "contracts/exchange/interfaces/ITopStakers.sol": {
      "content": "// SPDX-License-Identifier: BSL 1.1\npragma solidity ^0.8.0;\n\n// WARNING: Implementation is a mock, but the interface will be the same\ninterface ITopStakers {\n    /* ===================== ERRORS ===================== */\n    error StakerExist(address staker);\n    error StakerNotExist(address staker);\n\n    /* ==================== MUTABLE METHODS ==================== */\n\n    function addTopStaker(address staker) external;\n\n    function removeTopStaker(address staker) external;\n\n    /* ==================== VIEW METHODS ==================== */\n\n    function isTopStaker(address staker) external view returns(bool);\n    function getTopStakersLength() external view returns(uint256);\n}"
    },
    "contracts/interfaces/IRewardChefV2.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"../periphery/contracts/interfaces/oracle/ISuOracle.sol\";\n\n/**\n * @title RewardChefV2\n * @notice fork of MasterChefV2(13/05/2023) https://etherscan.io/address/0xef0881ec094552b2e128cf945ef17a6752b4ec5d#code\n * @dev This contract is based on MVC2, but uses \"virtual\" balances instead of storing real ERC20 tokens\n * and uses address of this assets instead of pid.\n * Rewards that are distributed have to be deposited using refillReward(uint256 amount, uint64 endBlock)\n **/\ninterface IRewardChefV2 {\n    /**\n      * @notice Info of each reward pool.\n      * @param accSushiPerShare -\n      * @param lastRewardBlock -\n      * @param allocPoint - The amount of allocation points assigned to the pool.\n      * Also known as the amount of REWARD_TOKEN to distribute per block.\n      * @param lpSupply -\n     **/\n    struct PoolInfo {\n        uint128 accSushiPerShare;\n        uint64 lastRewardBlock;\n        uint64 allocPoint;\n        uint256 lpSupply;\n    }\n\n    /**\n      * @notice Info of each user.\n      * @param amount - token amount the user has provided.\n      * @param rewardDebt - The amount of rewards entitled to the user.\n      * @param multiplicator1e18 - deposit amount multiplicator for current user, that depends on his lockupPeriod\n      * @param lockupPeriodSeconds - users lockupPeriod in seconds\n      * @param lockupStartTimestamp - timestamp when user start lockup\n     **/\n    struct UserInfo {\n        uint256 amount;\n        int256 rewardDebt;\n\n        uint256 multiplicator1e18;\n        uint256 lockupPeriodSeconds;\n        uint256 lockupStartTimestamp;\n    }\n\n    /**\n      * @notice Lockup info struct for a view method getPossibleLockupPeriodsSeconds()\n      * @param lockupPeriodSeconds - available lockupPeriod in seconds\n      * @param multiplicator1e18 - deposit amount multiplicator for this lockup period\n     **/\n    struct ILockupPeriod {\n        uint256 lockupPeriodSeconds;\n        uint256 multiplicator1e18;\n    }\n\n    // =======================================EVENTS=============================================\n    event VirtualDeposit(address indexed user, address indexed asset, uint256 amount);\n    event VirtualWithdraw(address indexed user, address indexed asset, uint256 amount);\n    event ResetAmount(\n        address indexed user, address indexed asset, address indexed to, uint256 amount, uint256 lockupPeriodSeconds\n    );\n    event Harvest(address indexed user, address indexed asset, uint256 amount);\n    event LogPoolAddition(address indexed asset, uint256 allocPoint);\n    event LogSetPool(address indexed asset, uint256 allocPoint);\n    event LogUpdatePool(address indexed asset, uint64 lastRewardBlock, uint256 lpSupply, uint256 accSushiPerShare);\n\n    // =======================================ERRORS=============================================\n    error BadEndBlockForRefill();\n    error ZeroLockupPeriod();\n    error ZeroMultiplicator();\n    error PoolExist();\n    error PoolNotExist();\n    error DifferentLockup();\n    error HarvestBeforeLockup();\n\n    // =========================================VARS=============================================\n    /**\n     *  @dev Total allocation points. Must be the sum of all allocation points in all pools.\n     * The good practice, to always keep this variable is equal 1000.\n     */\n    function totalAllocPoint() external view returns ( uint256 );\n\n    // =======================================REWARDER=============================================\n    // solhint-disable-next-line func-name-mixedcase\n    function REWARD_TOKEN() external view returns ( IERC20Upgradeable );\n    // solhint-disable-next-line func-name-mixedcase\n    function ORACLE() external view returns ( ISuOracle );\n    function rewardPerBlock() external view returns ( uint256 );\n    function rewardEndBlock() external view returns ( uint256 );\n\n    /**\n     * @dev admin transfer REWARD_TOKEN to contract to increase rewards per block\n     */\n    function refillReward(uint256 amount, uint64 endBlock) external;\n    /**\n     * @dev returns total amount of rewards allocated to the all pools on the rage (startBlock, endBlock]\n     * i.e. excluding startBlock but including endBlock\n     */\n    function rewardsBetweenBlocks(uint256 startBlock, uint256 endBlock) external returns ( uint256 );\n\n    //=======================================LOCKUP LOGIC===========================================\n    /**\n     * @notice view method that return all lockupPeriods in ILockupPeriod struct\n     */\n    function getPossibleLockupPeriodsSeconds() external view returns (ILockupPeriod[] memory);\n\n    /**\n     * @notice method to add new LockupPeriods with it multiplicator\n     * @dev If multiplicator1e18 == 0 => we remove lockupPeriodSeconds else we add it\n     * @param lockupPeriodSeconds Amount of seconds of lockupPeriod we want to add/remove\n     * @param multiplicator1e18 Multiplicator for that lockupPeriod\n     */\n    function setPossibleLockupPeriodsSeconds(uint256 lockupPeriodSeconds, uint256 multiplicator1e18) external;\n\n    //================================CORE REWARD CHEF METHODS======================================\n    /**\n     * @notice Add a new reward pool. Can only be called by the admin. Can't add the same LP token more than once.\n     * @param allocPoint AP of the new pool.\n     * @param _asset Address of the ERC-20 token.\n     */\n    function add(uint256 allocPoint, address _asset) external;\n\n    /**\n     * @notice Update the given pool's REWARD_TOKEN allocation point. Can only be called by the admin.\n     * Can't be called for asset that was not added by add() function.\n     * @param _asset Address of the ERC-20 token.\n     * @param _allocPoint New AP of the pool.\n     */\n    function set(address _asset, uint256 _allocPoint) external;\n\n    /**\n     * @notice View function to see pending REWARD_TOKEN on frontend.\n     * @param _asset Address of the ERC-20 token.\n     * @param _user Address of user.\n     * @return pending REWARD_TOKEN reward for a given user.\n     */\n    function pendingSushi(address _asset, address _user) external view returns ( uint256 );\n\n    /**\n     * @notice Update reward variables of the given pool.\n     * @param asset Asset address\n     * @return updated pool info\n     */\n    function updatePool(address asset) external returns ( PoolInfo memory );\n\n    /**\n     * @notice Update reward variables for all pools. Be careful of gas spending!\n     */\n    function updateAllPools() external;\n\n    /**\n     * @notice analogues to MCV2 Deposit method, but can be called only by trusted address (onlyRewardAccess)\n     * that is trusted to honestly calc how many \"virtual\" tokens have to be allocated for each user.\n     * @param asset Asset address\n     * @param to User for whom we will increase the virtual balance\n     * @param amountEDecimal Quantity without taking into account the multiplier that we will add\n     * @param lockupPeriodSeconds Current deposit lockup period. Can't increase amount with 2 different lockupPeriods\n     */\n    function increaseAmount(address asset, address to, uint256 amountEDecimal, uint256 lockupPeriodSeconds) external;\n\n    /**\n     * @notice Analogues to MVC2 Withdraw method, that can be called only by trusted address (onlyRewardAccess)\n     * that is trusted to honestly calc how many \"virtual\" tokens have to be allocated for each user.\n     * @param asset Asset address\n     * @param to User for whom we will subtract the virtual balance\n     * @param amountEDecimal Quantity without taking into account the multiplier that we will subtract\n     */\n    function decreaseAmount(address asset, address to, uint256 amountEDecimal) external;\n\n    /**\n     * @notice View method that return penalty for user that will decrease amount by {amountEDecimal}\n     * @param asset Asset address\n     * @param to User who will decrease his deposit amount\n     * @param amountEDecimal Quantity without taking into account the multiplier that we will subtract\n     */\n    function getDecreaseAmountRewardPenalty(\n        address asset,\n        address to,\n        uint256 amountEDecimal\n    ) external view returns (uint256);\n\n    /**\n     * @notice Harvest proceeds for transaction sender to {to}.\n     * @dev Here we send msg.sender pendingSushi to {to} and update lockup period.\n     * @param asset Asset address\n     * @param to Receiver of REWARD_TOKEN rewards.\n     */\n    function harvest(address asset, address to, uint256 newLockupPeriodSeconds) external;\n\n    // TODO: check for exploits\n    /**\n     * @notice Withdraw without caring about rewards. EMERGENCY ONLY.\n     * @param asset Asset address\n     * @param to The address of the user whose information will be cleared\n     */\n    function resetAmount(address asset, address to) external;\n\n    //================================VIEW METHODS======================================\n    /**\n     * @notice Method for frontend that return pool APR\n     * @param asset Asset address\n     */\n    function getPoolApr(address asset) external view returns (uint256);\n\n    /**\n     * @notice Reward tokens can be locked for certain period of time.\n     * So user have to wait until at least timestamp to be able to harvest them.\n     * There's no lock or any restriction on withdrawing principle.\n     * This function return end timestamp for that lock.\n     * @param asset Asset address\n     * @param user User address\n     */\n    function getHarvestLockupEndTimestamp(address asset, address user) external view returns (uint256);\n}\n"
    },
    "contracts/makerdao/core/adapters/CoinJoin.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/ICollateralJoin.sol\";\nimport \"../../interfaces/ISafeEngine.sol\";\nimport \"../../interfaces/ICoin.sol\";\nimport \"../../interfaces/ICoinJoin.sol\";\nimport \"../../../interfaces/IRewardChefV2.sol\";\nimport \"../../../periphery/contracts/access-control/SuAuthenticatedNonUpgradeable.sol\";\n\n// CHANGED: in dss all joins contracts are in join.sol, I split and rename them to read this better.\n// In CoinJoin (DaiJoin) I only added events.\n// Added SuAuthenticated instead of authorizedAccounts\n\ncontract CoinJoin is ICoinJoin, SuAuthenticatedNonUpgradeable {\n    IRewardChefV2 public rewardChef;\n    ISafeEngine public safeEngine;\n    // Coin created by the system; this is the external, ERC-20 representation, not the internal 'coinBalance'\n    ICoin public systemCoin;\n    mapping (bytes32 => address) public collateralAddress; // CollateralType => address of collateral\n\n    constructor(address accessControlSingleton, address safeEngine_, address systemCoin_, address rewardChef_)\n        SuAuthenticatedNonUpgradeable(accessControlSingleton) public {\n        contractEnabled = 1;\n        safeEngine = ISafeEngine(safeEngine_);\n        systemCoin = ICoin(systemCoin_);\n        rewardChef = IRewardChefV2(rewardChef_);\n    }\n\n    uint public contractEnabled;\n    function disableContract() external onlyDisablerAccess {\n        contractEnabled = 0;\n        emit DisableContract();\n    }\n\n    uint constant ONE = 10 ** 27;\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x);\n    }\n\n    function updateRewardChef(address rewardChef_) external onlyAdmin {\n        rewardChef = IRewardChefV2(rewardChef_);\n        emit UpdateRewardChef();\n    }\n\n    function initializeCollateralType(bytes32 _collateralType, address _collateralAddress) external onlyAdmin {\n        collateralAddress[_collateralType] = _collateralAddress;\n    }\n\n    function join(bytes32 collateralType, address user, address cdp, uint wad) external {\n        safeEngine.transferInternalCoins(address(this), cdp, mul(ONE, wad));\n        systemCoin.burn(msg.sender, wad);\n        rewardChef.decreaseAmount(collateralAddress[collateralType], user, wad);\n        emit Join(cdp, wad);\n    }\n\n    function exit(bytes32 collateralType, address user, address cdp, uint wad) external {\n        require(contractEnabled == 1, \"CoinJoin/not-contractEnabled\");\n        safeEngine.transferInternalCoins(msg.sender, address(this), mul(ONE, wad));\n        systemCoin.mint(cdp, wad);\n        rewardChef.increaseAmount(collateralAddress[collateralType], user, wad, 1); // As default we set lockupPeriodSeconds to 1\n        emit Exit(cdp, wad);\n    }\n\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(ICoinJoin).interfaceId || interfaceId == type(IERC165).interfaceId || ACCESS_CONTROL_SINGLETON.supportsInterface(interfaceId);\n    }\n}\n\n"
    },
    "contracts/makerdao/core/adapters/CollateralJoin.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/ICollateralJoin.sol\";\nimport \"../../interfaces/ISafeEngine.sol\";\nimport \"../../../periphery/contracts/access-control/SuAuthenticatedNonUpgradeable.sol\";\n\n// CHANGED: In CollateralJoin (GemJoin) I only added events.\n// Added rewardChef and increaseAmount/decreaseAmount in join/exit functions\n// Added SuAuthenticated instead of authorizedAccounts\n\n/// @dev This adapter assumes that the collateral has 18 decimals\ncontract CollateralJoin is ICollateralJoin, SuAuthenticatedNonUpgradeable {\n    ISafeEngine public safeEngine;\n    bytes32 public collateralType;\n    IERC20Metadata public collateral;      // Actual collateral token contract\n    uint public decimals;        // How many decimals the collateral token has\n\n    constructor(address accessControlSingleton, address safeEngine_, bytes32 collateralType_, address collateral_)\n        SuAuthenticatedNonUpgradeable(accessControlSingleton) public {\n        contractEnabled = 1;\n        safeEngine = ISafeEngine(safeEngine_);\n        collateralType = collateralType_;\n        collateral = IERC20Metadata(collateral_);\n        decimals = collateral.decimals();\n    }\n\n    uint public contractEnabled;\n    function disableContract() external onlyDisablerAccess {\n        contractEnabled = 0;\n        emit DisableContract();\n    }\n\n    function join(address usr, uint wad) external {\n        require(contractEnabled == 1, \"CollateralJoin/not-contractEnabled\");\n        require(int(wad) >= 0, \"CollateralJoin/overflow\");\n        safeEngine.modifyCollateralBalance(collateralType, usr, int(wad));\n        require(collateral.transferFrom(msg.sender, address(this), wad), \"CollateralJoin/failed-transfer\");\n        emit Join(usr, wad);\n    }\n\n    function exit(address usr, uint wad) external {\n        require(wad <= 2 ** 255, \"CollateralJoin/overflow\");\n        safeEngine.modifyCollateralBalance(collateralType, msg.sender, -int(wad));\n        require(collateral.transfer(usr, wad), \"CollateralJoin/failed-transfer\");\n        emit Exit(usr, wad);\n    }\n}\n"
    },
    "contracts/makerdao/core/DssCdpManager.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n\n/// DssCdpManager.sol\n\n// Copyright (C) 2018-2020 Maker Ecosystem Growth Holdings, INC.\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity ^0.8.0;\n\nimport \"../interfaces/ISafeEngine.sol\";\nimport \"../interfaces/IDssCdpManager.sol\";\n\n// CHANGED: interface created and struct and events moved there\n\ncontract CdpHandler {\n    constructor(ISafeEngine safeEngine) public {\n        safeEngine.approveSAFEModification(msg.sender);\n    }\n}\n\ncontract DssCdpManager is IDssCdpManager {\n    ISafeEngine               public safeEngine;\n    uint                      public cdpi;  // Auto incremental\n    mapping (uint => address) public safes; // CDPId => CdpHandler\n    mapping (uint => List)    public list;  // CDPId => Prev & Next CDPIds (double linked list)\n    mapping (uint => address) public owns;  // CDPId => Owner\n    mapping (uint => bytes32) public collateralTypes; // CDPId => CollateralType\n\n    mapping (address => uint) public firstCdpId; // Owner => First CDPId\n    mapping (address => uint) public lastCdpId; // Owner => Last CDPId\n    mapping (address => uint) public cdpCount; // Owner => Amount of CDPs\n\n    mapping (\n        address => mapping (\n            uint => mapping (\n                address => uint\n            )\n        )\n    ) public cdpCan; // Owner => CDPId => Allowed Addr => True/False\n\n    mapping (\n        address => mapping (\n            address => uint\n        )\n    ) public handlerCan; // Cdp => Allowed Addr => True/False\n    \n    modifier cdpAllowed(uint cdp) {\n        require(msg.sender == owns[cdp] || cdpCan[owns[cdp]][cdp][msg.sender] == 1, \"cdp-not-allowed\");\n        _;\n    }\n\n    modifier handlerAlloweded(address urn) {\n        require(msg.sender == urn || handlerCan[urn][msg.sender] == 1, \"urn-not-allowed\");\n        _;\n    }\n\n    constructor(address safeEngine_) public {\n        safeEngine = ISafeEngine(safeEngine_);\n    }\n\n    function _add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x);\n    }\n\n    function _sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x);\n    }\n\n    function toInt(uint x) internal pure returns (int y) {\n        y = int(x);\n        require(y >= 0);\n    }\n\n    function cdpAllow(uint cdp, address usr, uint ok) public cdpAllowed(cdp) {\n        cdpCan[owns[cdp]][cdp][usr] = ok;\n    }\n\n    function allowHandler(address usr, uint ok) public {\n        handlerCan[msg.sender][usr] = ok;\n    }\n\n    function openSafe(bytes32 collateralType, address usr) public returns (uint) {\n        require(usr != address(0), \"usr-address-0\");\n\n        cdpi = _add(cdpi, 1);\n        safes[cdpi] = address(new CdpHandler(safeEngine));\n        owns[cdpi] = usr;\n        collateralTypes[cdpi] = collateralType;\n\n        // Add new CDP to double linked list and pointers\n        if (firstCdpId[usr] == 0) {\n            firstCdpId[usr] = cdpi;\n        }\n        if (lastCdpId[usr] != 0) {\n            list[cdpi].prev = lastCdpId[usr];\n            list[lastCdpId[usr]].next = cdpi;\n        }\n        lastCdpId[usr] = cdpi;\n        cdpCount[usr] = _add(cdpCount[usr], 1);\n\n        emit NewCdp(msg.sender, usr, cdpi);\n        return cdpi;\n    }\n\n    function transferSafeOwnership(uint cdp, address dst) public cdpAllowed(cdp) {\n        require(dst != address(0), \"dst-address-0\");\n        require(dst != owns[cdp], \"dst-already-owner\");\n\n        // Remove transferred CDP from double linked list of origin user and pointers\n        if (list[cdp].prev != 0) {\n            // Set the next pointer of the prev cdp (if exists) to the next of the transferred one\n            list[list[cdp].prev].next = list[cdp].next;\n        }\n        if (list[cdp].next != 0) {\n            // If wasn't the last one - Set the prev pointer of the next cdp to the prev of the transferred one\n            list[list[cdp].next].prev = list[cdp].prev;\n        } else {\n            // If was the last one - Update last pointer of the owner\n            lastCdpId[owns[cdp]] = list[cdp].prev;\n        }\n        if (firstCdpId[owns[cdp]] == cdp) {\n            // If was the first one - Update first pointer of the owner\n            firstCdpId[owns[cdp]] = list[cdp].next;\n        }\n        cdpCount[owns[cdp]] = _sub(cdpCount[owns[cdp]], 1);\n\n        // Transfer ownership\n        owns[cdp] = dst;\n\n        // Add transferred CDP to double linked list of destiny user and pointers\n        list[cdp].prev = lastCdpId[dst];\n        list[cdp].next = 0;\n        if (lastCdpId[dst] != 0) {\n            list[lastCdpId[dst]].next = cdp;\n        }\n        if (firstCdpId[dst] == 0) {\n            firstCdpId[dst] = cdp;\n        }\n        lastCdpId[dst] = cdp;\n        cdpCount[dst] = _add(cdpCount[dst], 1);\n    }\n\n    function modifySAFECollateralization(\n        uint cdp,\n        int deltaCollateral,\n        int deltaDebt\n    ) public cdpAllowed(cdp) {\n        address urn = safes[cdp];\n        safeEngine.modifySAFECollateralization(\n            collateralTypes[cdp],\n            urn,\n            urn,\n            urn,\n            deltaCollateral,\n            deltaDebt\n        );\n    }\n\n    function transferCollateral(\n        uint cdp,\n        address dst,\n        uint wad\n    ) public cdpAllowed(cdp) {\n        safeEngine.transferCollateral(collateralTypes[cdp], safes[cdp], dst, wad);\n    }\n\n    function transferCollateral(\n        bytes32 ilk,\n        uint cdp,\n        address dst,\n        uint wad\n    ) public cdpAllowed(cdp) {\n        safeEngine.transferCollateral(ilk, safes[cdp], dst, wad);\n    }\n\n    function transferInternalCoins(uint cdp, address dst, uint rad) public cdpAllowed(cdp) {\n        safeEngine.transferInternalCoins(safes[cdp], dst, rad);\n    }\n\n    function quit(uint cdp, address dst) public cdpAllowed(cdp) handlerAlloweded(dst) {\n        (uint lockedCollateral, uint generatedDebt) = safeEngine.safes(collateralTypes[cdp], safes[cdp]);\n        safeEngine.transferSAFECollateralAndDebt(\n            collateralTypes[cdp],\n            safes[cdp],\n            dst,\n            toInt(lockedCollateral),\n            toInt(generatedDebt)\n        );\n    }\n\n    function enter(address src, uint cdp) public handlerAlloweded(src) cdpAllowed(cdp) {\n        (uint lockedCollateral, uint generatedDebt) = safeEngine.safes(collateralTypes[cdp], src);\n        safeEngine.transferSAFECollateralAndDebt(\n            collateralTypes[cdp],\n            src,\n            safes[cdp],\n            toInt(lockedCollateral),\n            toInt(generatedDebt)\n        );\n    }\n\n    function moveSAFE(uint cdpSrc, uint cdpDst) public cdpAllowed(cdpSrc) cdpAllowed(cdpDst) {\n        require(collateralTypes[cdpSrc] == collateralTypes[cdpDst], \"non-matching-cdps\");\n        (uint lockedCollateral, uint generatedDebt) = safeEngine.safes(collateralTypes[cdpSrc], safes[cdpSrc]);\n        safeEngine.transferSAFECollateralAndDebt(\n            collateralTypes[cdpSrc],\n            safes[cdpSrc],\n            safes[cdpDst],\n            toInt(lockedCollateral),\n            toInt(generatedDebt)\n        );\n    }\n}\n"
    },
    "contracts/makerdao/core/OracleRelayer.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n\n/// OracleRelayer.sol -- OracleRelayer\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity ^0.8.0;\n\nimport \"../interfaces/ISafeEngine.sol\";\nimport \"../interfaces/IPriceFeed.sol\";\nimport \"../../periphery/contracts/access-control/SuAuthenticatedNonUpgradeable.sol\";\n\n// FIXME: This contract was altered compared to the production version.\n// It doesn't use LibNote anymore.\n// New deployments of this contract will need to include custom events (TO DO).\n\n// CHANGED: Added SuAuthenticated instead of authorizedAccounts\n// @notice this contract can be deprecated\n\ncontract OracleRelayer is SuAuthenticatedNonUpgradeable {\n    // --- Data ---\n    struct CollateralType {\n        IPriceFeed priceFeed;\n        uint256 liquidationRatio; // [ray]\n    }\n\n    mapping (bytes32 => CollateralType) public collateralTypes;\n\n    ISafeEngine public safeEngine;\n    uint256 public redemptionPrice;  // ref per StablePro [ray]\n\n    // --- Events ---\n    event Poke(\n      bytes32 collateralType,\n      bytes32 val,  // [wad]\n      uint256 safetyPrice  // [ray]\n    );\n\n    // --- Init ---\n    constructor(address accessControl, address safeEngine_) SuAuthenticatedNonUpgradeable(accessControl) public {\n        safeEngine = ISafeEngine(safeEngine_);\n        redemptionPrice = ONE;\n        contractEnabled = 1;\n    }\n\n    // --- Disable ---\n    event DisableContract();\n    uint256 public contractEnabled; // Access flag, indicates whether this contract is still active\n    function disableContract() external onlyDisablerAccess {\n        contractEnabled = 0;\n        emit DisableContract();\n    }\n\n    // --- Math ---\n    uint constant ONE = 10 ** 27;\n\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x);\n    }\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\n        z = mul(x, ONE) / y;\n    }\n\n    // --- Administration ---\n    function modifyParameters(bytes32 collateralType, bytes32 what, address priceFeed_) external onlyAdmin {\n        require(contractEnabled == 1, \"OracleRelayer/not-contractEnabled\");\n        if (what == \"priceFeed\") collateralTypes[collateralType].priceFeed = IPriceFeed(priceFeed_);\n        else revert(\"OracleRelayer/modifyParameters-unrecognized-param\");\n    }\n    function modifyParameters(bytes32 what, uint data) external onlyAdmin {\n        require(contractEnabled == 1, \"OracleRelayer/not-contractEnabled\");\n        if (what == \"redemptionPrice\") redemptionPrice = data;\n        else revert(\"OracleRelayer/modifyParameters-unrecognized-param\");\n    }\n    function modifyParameters(bytes32 collateralType, bytes32 what, uint data) external onlyAdmin {\n        require(contractEnabled == 1, \"OracleRelayer/not-contractEnabled\");\n        if (what == \"liquidationRatio\") collateralTypes[collateralType].liquidationRatio = data;\n        else revert(\"OracleRelayer/modifyParameters-unrecognized-param\");\n    }\n\n    // --- Update value ---\n    function updateSafetyPrice(bytes32 collateralType) external {\n        (bytes32 val, bool has) = collateralTypes[collateralType].priceFeed.peek();\n        uint256 safetyPrice = has\n            ? rdiv(\n                rdiv(mul(uint(val), 10 ** 9), redemptionPrice),\n                collateralTypes[collateralType].liquidationRatio\n            )\n            : 0;\n        safeEngine.modifyParameters(collateralType, \"safetyPrice\", safetyPrice);\n        emit Poke(collateralType, val, safetyPrice);\n    }\n}\n"
    },
    "contracts/makerdao/core/SafeEngine.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n\n/// SAFEEngine.sol -- StablePro CDP database\n\n// Copyright (C) 2018 Rain <rainbreak@riseup.net>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity ^0.8.0;\n\nimport {Math} from \"../utils/Math.sol\";\nimport {ISafeEngine} from \"../interfaces/ISafeEngine.sol\";\nimport \"../../periphery/contracts/access-control/SuAuthenticatedNonUpgradeable.sol\";\n\n// FIXME: This contract was altered compared to the production version.\n// It doesn't use LibNote anymore.\n// New deployments of this contract will need to include custom events (TO DO).\n\n// CHANGED: added interface, moved structs there.\n// Maybe we'll need to add events in each method (need to discuss, in another branch dss has LogNote for that)\n// Added SuAuthenticated instead of authorizedAccounts\n\ncontract SafeEngine is SuAuthenticatedNonUpgradeable, Math, ISafeEngine {\n    // --- Disable ---\n    uint public contractEnabled;\n    function disableContract() external onlyDisablerAccess {\n        contractEnabled = 0;\n        emit DisableContract();\n    }\n\n    // --- Auth ---\n    // Who can transfer collateral & debt in/out of a CDP\n    mapping(address => mapping (address => uint)) public cdpRights;\n\n    function approveSAFEModification(address usr) external { cdpRights[msg.sender][usr] = 1; }\n\n    function denySAFEModification(address usr) external { cdpRights[msg.sender][usr] = 0; }\n\n    function canModifySAFE(address cdp, address account) internal view returns (bool) {\n        return either(cdp == account, cdpRights[cdp][account] == 1);\n    }\n\n    /// Total User Debt (drawn StablePro + stability fee accrued) = SAFE.generatedDebt * CollateralType.accumulatedRate\n\n    // Data about each collateral type\n    mapping (bytes32 => CollateralType)            public collateralTypes;\n    // Data about each SAFE\n    mapping (bytes32 => mapping (address => SAFE)) public safes;\n    // Balance of each collateral type\n    mapping (bytes32 => mapping (address => uint)) public tokenCollateral; // [wad]\n    // Internal balance of pegged-coins\n    mapping (address => uint256)                   public coinBalance;     // [rad]\n    // Amount of debt held by an account. Coin & debt are like matter and antimatter. They nullify each other\n    mapping (address => uint256)                   public debtBalance;     // [rad]\n\n    uint256 public globalDebt;          // Total amount of debt (coins) currently issued [rad]\n    uint256 public globalUnbackedDebt;  // 'Bad' debt that's not covered by collateral   [rad]\n    uint256 public globalDebtCeiling;   // Maximum amount of debt that can be issued     [rad]\n\n    // --- Init ---\n    constructor(address accessControl) SuAuthenticatedNonUpgradeable(accessControl) public {\n        contractEnabled = 1;\n    }\n\n    // --- Administration ---\n    function initializeCollateralType(bytes32 collateralType) external onlyAdmin {\n        require(collateralTypes[collateralType].accumulatedRate == 0, \"SafeEngine/collateral-type-already-init\");\n        collateralTypes[collateralType].accumulatedRate = 10 ** 27;\n    }\n    function modifyParameters(bytes32 what, uint data) external onlyAdmin {\n        require(contractEnabled == 1, \"SafeEngine/not-contractEnabled\");\n        if (what == \"globalDebtCeiling\") globalDebtCeiling = data;\n        else revert(\"SafeEngine/modifyParameters-unrecognized-param\");\n    }\n    function modifyParameters(bytes32 collateralType, bytes32 what, uint data) external onlyAdmin {\n        require(contractEnabled == 1, \"SafeEngine/not-contractEnabled\");\n        if (what == \"safetyPrice\") collateralTypes[collateralType].safetyPrice = data;\n        else if (what == \"debtCeiling\") collateralTypes[collateralType].debtCeiling = data;\n        else if (what == \"debtFloor\") collateralTypes[collateralType].debtFloor = data;\n        else revert(\"SafeEngine/modifyParameters-unrecognized-param\");\n    }\n\n    // --- Fungibility ---\n    function modifyCollateralBalance(bytes32 collateralType, address usr, int256 wad) external onlyCDPAccess {\n        tokenCollateral[collateralType][usr] = _add(tokenCollateral[collateralType][usr], wad);\n    }\n    function transferCollateral(bytes32 collateralType, address src, address dst, uint256 wad) external {\n        require(canModifySAFE(src, msg.sender), \"SafeEngine/not-allowed\");\n        tokenCollateral[collateralType][src] = _sub(tokenCollateral[collateralType][src], wad);\n        tokenCollateral[collateralType][dst] = _add(tokenCollateral[collateralType][dst], wad);\n    }\n    function transferInternalCoins(address src, address dst, uint256 rad) external {\n        require(canModifySAFE(src, msg.sender), \"SafeEngine/not-allowed\");\n        coinBalance[src] = _sub(coinBalance[src], rad);\n        coinBalance[dst] = _add(coinBalance[dst], rad);\n    }\n\n    // --- CDP Manipulation ---\n    function modifySAFECollateralization(\n        bytes32 collateralType,\n        address cdp,\n        address collateralSource,\n        address debtDestination,\n        int deltaCollateral,\n        int deltaDebt\n    ) external {\n        // system is contractEnabled\n        require(contractEnabled == 1, \"SafeEngine/not-contractEnabled\");\n\n        SAFE memory safe_ = safes[collateralType][cdp];\n        CollateralType memory collateralType_ = collateralTypes[collateralType];\n        // collateralType has been initialised\n        require(collateralType_.accumulatedRate != 0, \"SafeEngine/collateral-type-not-init\");\n\n        safe_.lockedCollateral = _add(safe_.lockedCollateral, deltaCollateral);\n        safe_.generatedDebt = _add(safe_.generatedDebt, deltaDebt);\n        collateralType_.debtAmount = _add(collateralType_.debtAmount, deltaDebt);\n\n        int dAmountToRaise = _mul(collateralType_.accumulatedRate, deltaDebt);\n        uint amountToRaise = _mul(collateralType_.accumulatedRate, safe_.generatedDebt);\n        globalDebt = _add(globalDebt, dAmountToRaise);\n\n        // either debt has decreased, or debt ceilings are not exceeded\n        require(\n            either(\n                deltaDebt <= 0,\n                both(\n                    _mul(collateralType_.debtAmount, collateralType_.accumulatedRate) <= collateralType_.debtCeiling,\n                    globalDebt <= globalDebtCeiling\n                )\n            ),\n            \"SafeEngine/ceiling-exceeded\"\n        );\n        // safe is either less risky than before, or it is safe\n        require(\n            either(\n                both(deltaDebt <= 0, deltaCollateral >= 0),\n                amountToRaise <= _mul(safe_.lockedCollateral, collateralType_.safetyPrice)\n            ),\n            \"SafeEngine/not-safe\"\n        );\n\n        // safe is either more safe, or the owner consents\n        require(\n            either(both(deltaDebt <= 0, deltaCollateral >= 0), canModifySAFE(cdp, msg.sender)),\n            \"SafeEngine/not-allowed-u\"\n        );\n        // collateral src consents\n        require(either(deltaCollateral <= 0, canModifySAFE(collateralSource, msg.sender)), \"SafeEngine/not-allowed-v\");\n        // debt dst consents\n        require(either(deltaDebt >= 0, canModifySAFE(debtDestination, msg.sender)), \"SafeEngine/not-allowed-w\");\n\n        // safe has no debt, or a non-dusty amount\n        require(either(safe_.generatedDebt == 0, amountToRaise >= collateralType_.debtFloor), \"SafeEngine/debtFloor\");\n\n        tokenCollateral[collateralType][collateralSource] =\n                        _sub(tokenCollateral[collateralType][collateralSource], deltaCollateral);\n        coinBalance[debtDestination] = _add(coinBalance[debtDestination], dAmountToRaise);\n\n        safes[collateralType][cdp] = safe_;\n        collateralTypes[collateralType] = collateralType_;\n    }\n    // --- CDP Fungibility ---\n    function transferSAFECollateralAndDebt(\n        bytes32 collateralType,\n        address src,\n        address dst,\n        int deltaCollateral,\n        int deltaDebt\n    ) external {\n        SAFE storage srcCDP = safes[collateralType][src];\n        SAFE storage dstCDP = safes[collateralType][dst];\n        CollateralType storage col = collateralTypes[collateralType];\n\n        srcCDP.lockedCollateral = _sub(srcCDP.lockedCollateral, deltaCollateral);\n        srcCDP.generatedDebt = _sub(srcCDP.generatedDebt, deltaDebt);\n        dstCDP.lockedCollateral = _add(dstCDP.lockedCollateral, deltaCollateral);\n        dstCDP.generatedDebt = _add(dstCDP.generatedDebt, deltaDebt);\n\n        uint srcAmountToRaise = _mul(srcCDP.generatedDebt, col.accumulatedRate);\n        uint dstAmountToRaise = _mul(dstCDP.generatedDebt, col.accumulatedRate);\n\n        // both sides consent\n        require(both(canModifySAFE(src, msg.sender), canModifySAFE(dst, msg.sender)), \"SafeEngine/not-allowed\");\n\n        // both sides safe\n        require(srcAmountToRaise <= _mul(srcCDP.lockedCollateral, col.safetyPrice), \"SafeEngine/not-safe-src\");\n        require(dstAmountToRaise <= _mul(dstCDP.lockedCollateral, col.safetyPrice), \"SafeEngine/not-safe-dst\");\n\n        // both sides non-dusty\n        require(either(srcAmountToRaise >= col.debtFloor, srcCDP.generatedDebt == 0), \"SafeEngine/debtFloor-src\");\n        require(either(dstAmountToRaise >= col.debtFloor, dstCDP.generatedDebt == 0), \"SafeEngine/debtFloor-dst\");\n    }\n    // --- CDP Confiscation ---\n    function confiscateSAFECollateralAndDebt(\n        bytes32 collateralType,\n        address cdp,\n        address collateralCounterparty,\n        address debtCounterparty,\n        int deltaCollateral,\n        int deltaDebt\n    ) external onlyCDPAccess {\n        SAFE storage safe_ = safes[collateralType][cdp];\n        CollateralType storage collateralType_ = collateralTypes[collateralType];\n\n        safe_.lockedCollateral = _add(safe_.lockedCollateral, deltaCollateral);\n        safe_.generatedDebt = _add(safe_.generatedDebt, deltaDebt);\n        collateralType_.debtAmount = _add(collateralType_.debtAmount, deltaDebt);\n\n        int deltaTotalIssuedDebt = _mul(collateralType_.accumulatedRate, deltaDebt);\n\n        tokenCollateral[collateralType][collateralCounterparty] =\n                        _sub(tokenCollateral[collateralType][collateralCounterparty], deltaCollateral);\n        debtBalance[debtCounterparty] = _sub(debtBalance[debtCounterparty], deltaTotalIssuedDebt);\n        globalUnbackedDebt = _sub(globalUnbackedDebt, deltaTotalIssuedDebt);\n    }\n\n    // --- Settlement ---\n\n    function settleDebt(uint rad) external {\n        address account      = msg.sender;\n        debtBalance[account] = _sub(debtBalance[account], rad);\n        coinBalance[account] = _sub(coinBalance[account], rad);\n        globalUnbackedDebt   = _sub(globalUnbackedDebt,   rad);\n        globalDebt           = _sub(globalDebt,   rad);\n    }\n\n    function createUnbackedDebt(address debtDestination, address coinDestination, uint rad) external onlyCDPAccess {\n        debtBalance[debtDestination] = _add(debtBalance[debtDestination], rad);\n        coinBalance[coinDestination] = _add(coinBalance[coinDestination], rad);\n        globalUnbackedDebt           = _add(globalUnbackedDebt,   rad);\n        globalDebt                   = _add(globalDebt,   rad);\n    }\n\n    // --- Rates ---\n    function updateAccumulatedRate(\n        bytes32 collateralType,\n        address surplusDst,\n        int accumulatedRate\n    ) external onlyCDPAccess {\n        require(contractEnabled == 1, \"SafeEngine/not-contractEnabled\");\n        CollateralType storage collateralType_ = collateralTypes[collateralType];\n        collateralType_.accumulatedRate        = _add(collateralType_.accumulatedRate, accumulatedRate);\n        int deltaSurplus                       = _mul(collateralType_.debtAmount, accumulatedRate);\n        coinBalance[surplusDst]                = _add(coinBalance[surplusDst], deltaSurplus);\n        globalDebt                             = _add(globalDebt, deltaSurplus);\n    }\n}\n"
    },
    "contracts/makerdao/core/TaxCollector.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n\n/// TaxCollector.sol -- StablePro Lending Rate\n\n// Copyright (C) 2018 Rain <rainbreak@riseup.net>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity ^0.8.0;\n\nimport \"../interfaces/ISafeEngine.sol\";\nimport \"../interfaces/ITaxCollector.sol\";\nimport \"../../periphery/contracts/access-control/SuAuthenticatedNonUpgradeable.sol\";\n\n// FIXME: This contract was altered compared to the production version.\n// It doesn't use LibNote anymore.\n// New deployments of this contract will need to include custom events (TO DO).\n\n// CHANGED: added interface and moved struct there.\n// Added SuAuthenticated instead of authorizedAccounts\n\ncontract TaxCollector is ITaxCollector, SuAuthenticatedNonUpgradeable {\n    mapping (bytes32 => CollateralType) public collateralTypes;\n    ISafeEngine public safeEngine;   // CDP Engine\n    address public primaryTaxReceiver;   // Debt Engine\n    uint256 public base;  // Global, per-second stability fee contribution [ray]\n\n    // --- Init ---\n    constructor(address accessControl, address safeEngine_) SuAuthenticatedNonUpgradeable(accessControl) public {\n        safeEngine = ISafeEngine(safeEngine_);\n    }\n\n    // --- Disable ---\n    uint public contractEnabled;\n    function disableContract() external onlyDisablerAccess {\n        contractEnabled = 0;\n        emit DisableContract();\n    }\n\n    // --- Math ---\n    function _rpow(uint x, uint n, uint b) internal pure returns (uint z) {\n      assembly {\n        switch x case 0 {switch n case 0 {z := b} default {z := 0}}\n        default {\n          switch mod(n, 2) case 0 { z := b } default { z := x }\n          let half := div(b, 2)  // for rounding.\n          for { n := div(n, 2) } n { n := div(n,2) } {\n            let xx := mul(x, x)\n            if iszero(eq(div(xx, x), x)) { revert(0,0) }\n            let xxRound := add(xx, half)\n            if lt(xxRound, xx) { revert(0,0) }\n            x := div(xxRound, b)\n            if mod(n,2) {\n              let zx := mul(z, x)\n              if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) { revert(0,0) }\n              let zxRound := add(zx, half)\n              if lt(zxRound, zx) { revert(0,0) }\n              z := div(zxRound, b)\n            }\n          }\n        }\n      }\n    }\n    uint256 constant ONE = 10 ** 27;\n    function _add(uint x, uint y) internal pure returns (uint z) {\n        z = x + y;\n        require(z >= x);\n    }\n    function _diff(uint x, uint y) internal pure returns (int z) {\n        z = int(x) - int(y);\n        require(int(x) >= 0 && int(y) >= 0);\n    }\n    function _rmul(uint x, uint y) internal pure returns (uint z) {\n        z = x * y;\n        require(y == 0 || z / y == x);\n        z = z / ONE;\n    }\n\n    // --- Administration ---\n    function initializeCollateralType(bytes32 collateralType) external onlyAdmin {\n        CollateralType storage i = collateralTypes[collateralType];\n        require(i.stabilityFee == 0, \"TaxCollector/collateralType-already-init\");\n        i.stabilityFee = ONE;\n        i.latestUpdateTime  = block.timestamp;\n    }\n    function modifyParameters(bytes32 collateralType, bytes32 what, uint data) external onlyAdmin {\n        require(\n            block.timestamp == collateralTypes[collateralType].latestUpdateTime,\n            \"TaxCollector/latestUpdateTime-not-updated\"\n        );\n        if (what == \"stabilityFee\") collateralTypes[collateralType].stabilityFee = data;\n        else revert(\"TaxCollector/modifyParameters-unrecognized-param\");\n    }\n    function modifyParameters(bytes32 what, uint data) external onlyAdmin {\n        if (what == \"base\") base = data;\n        else revert(\"TaxCollector/modifyParameters-unrecognized-param\");\n    }\n    function modifyParameters(bytes32 what, address data) external onlyAdmin {\n        if (what == \"primaryTaxReceiver\") primaryTaxReceiver = data;\n        else revert(\"TaxCollector/modifyParameters-unrecognized-param\");\n    }\n\n    function taxSingle(bytes32 collateralType) external returns (uint rate) {\n        require(\n            block.timestamp >= collateralTypes[collateralType].latestUpdateTime,\n            \"TaxCollector/invalid-block-timestamp\"\n        );\n        (, uint prevRate,,,) = safeEngine.collateralTypes(collateralType);\n        /// rate = oldRate * (1 + StabilityRate)^(time since last taxSingle)\n        rate = _rmul(\n            _rpow(\n                _add(base, collateralTypes[collateralType].stabilityFee),\n                block.timestamp - collateralTypes[collateralType].latestUpdateTime,\n                ONE\n            ),\n            prevRate\n        );\n        safeEngine.updateAccumulatedRate(collateralType, primaryTaxReceiver, _diff(rate, prevRate));\n        collateralTypes[collateralType].latestUpdateTime = block.timestamp;\n    }\n}\n"
    },
    "contracts/makerdao/externalContracts/AccountingEngine.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n\n/// AccountingEngine.sol -- StablePro settlement module\n\n// Copyright (C) 2018 Rain <rainbreak@riseup.net>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity ^0.8.0;\n\nimport \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\n\nimport {Math} from \"../utils/Math.sol\";\nimport \"../interfaces/ISafeEngine.sol\";\nimport \"../interfaces/ILiquidationEngine.sol\";\nimport \"../interfaces/IAccountingEngine.sol\";\nimport \"../../periphery/contracts/interfaces/oracle/ISuOracle.sol\";\n\n// FIXME: This contract was altered compared to the production version.\n// It doesn't use LibNote anymore.\n// New deployments of this contract will need to include custom events (TO DO).\n\n// CHANGED: removed all methods about surplus and debt auctions. Need to be updated later to work with debt and surplus.\n// Added swapStableProToStablecoin function, because after liquidation AccountingEngine receive stablecoin\n// that can be changed for StablePro.\n// Also moved Math behaviour into lib and added interface and moved struct there.\n\ncontract AccountingEngine is Math, IAccountingEngine {\n    // --- Auth ---\n    mapping (address => uint) public authorizedAccounts;\n    function addAuthorization(address usr) external isAuthorized {\n        require(contractEnabled == 1, \"AccountingEngine/not-contractEnabled\");\n        authorizedAccounts[usr] = 1;\n    }\n    function removeAuthorization(address usr) external isAuthorized { authorizedAccounts[usr] = 0; }\n    modifier isAuthorized {\n        require(authorizedAccounts[msg.sender] == 1, \"AccountingEngine/not-authorized\");\n        _;\n    }\n\n    // --- Data ---\n    ISafeEngine public safeEngine;\n    ILiquidationEngine public liquidationEngine;\n    ISuOracle public oracle;\n    address public stablePro;\n\n    mapping (uint256 => uint256) public debtQueue;  // debt queue\n    uint256 public totalQueuedDebt;   // Queued debt [rad]\n    uint256 public contractEnabled;\n\n    // --- Init ---\n    constructor(address safeEngine_, address liquidationEngine_, address oracle_, address stablePro_) public {\n        authorizedAccounts[msg.sender] = 1;\n        safeEngine = ISafeEngine(safeEngine_);\n        liquidationEngine = ILiquidationEngine(liquidationEngine_);\n        oracle = ISuOracle(oracle_);\n        stablePro = stablePro_;\n        contractEnabled = 1;\n    }\n\n    /**\n    * @notice Push debt (that the system tries to cover with collateral auctions) to a queue\n     * @dev Debt is locked in a queue to give the system enough time to auction collateral\n     *      and gather surplus\n     * @param amountToRaise Amount of debt to push\n     */\n    function pushDebtToQueue(uint amountToRaise) external isAuthorized {\n        debtQueue[block.timestamp] = _add(debtQueue[block.timestamp], amountToRaise);\n        totalQueuedDebt = _add(totalQueuedDebt, amountToRaise);\n    }\n    /**\n     * @notice A block of debt can be popped from the queue after popDebtDelay seconds passed since it was\n     *         added there\n     * @param era Timestamp of the block of debt that should be popped out\n     */\n    function popDebtFromQueue(uint era) external {\n        // require(_add(era, popDebtDelay) <= block.timestamp, \"AccountingEngine/popDebtDelay-not-finished\");\n        totalQueuedDebt = _sub(totalQueuedDebt, debtQueue[era]);\n        debtQueue[era] = 0;\n    }\n\n    // Debt settlement\n//    /**\n//     * @notice Destroy an equal amount of coins and debt\n//     * @dev We can only destroy debt that is not locked in the queue and also not in a debt auction\n//     * @param rad Amount of coins/debt to destroy (number with 45 decimals)\n//    **/\n//    function settleDebt(uint rad) external {\n//        require(rad <= safeEngine.coinBalance(address(this)), \"AccountingEngine/insufficient-surplus\");\n//        require(\n//            rad <= _sub(_sub(safeEngine.debtBalance(address(this)), totalQueuedDebt), totalOnAuctionDebt),\n//            \"AccountingEngine/insufficient-debt\"\n//        );\n//        safeEngine.settleDebt(rad);\n//    }\n\n    /**\n     * @notice Disable this contract (normally called by Global Settlement)\n     * @dev When we disable, the contract tries to settle as much debt as possible (if there's any) with\n            any surplus that's left in the system. After erasing debt, the contract will either transfer any\n            remaining surplus right away (if disableCooldown == 0) or will only record the timestamp when\n            it was disabled\n    **/\n    function disableContract() external isAuthorized {\n        require(contractEnabled == 1, \"AccountingEngine/not-contractEnabled\");\n        contractEnabled = 0;\n        totalQueuedDebt = 0;\n        safeEngine.settleDebt(min(safeEngine.coinBalance(address(this)), safeEngine.debtBalance(address(this))));\n        emit DisableContract();\n    }\n\n    // user need to approve StablePro\n    function swapStableProToStablecoin(\n        address stablecoinToken,\n        uint256 stableProAmountE18\n    ) external {\n        if (!liquidationEngine.hasWhitelistStablecoin(stablecoinToken)) revert BadStablecoin(stablecoinToken);\n\n        uint256 stablecoinAmountEDecimal = stableProAmountE18 * 1e18 / oracle.getFiatPrice1e18(stablecoinToken);\n\n        TransferHelper.safeTransferFrom(stablePro, msg.sender, address(this), stableProAmountE18);\n        TransferHelper.safeTransfer(stablecoinToken, msg.sender, stablecoinAmountEDecimal);\n\n        // middlewareDebt -= int256(stableProAmountE18);\n        // TODO: should we settleDebt and do some manipulations in safeEngine?\n\n        emit StableProSwapped(stableProAmountE18);\n    }\n}\n"
    },
    "contracts/makerdao/externalContracts/DssProxyActions.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n\n/// DssProxyActions.sol\n\n// Copyright (C) 2018-2020 Maker Ecosystem Growth Holdings, INC.\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// CHANGED: removed some functions. As default this contract was too large to deploy. Also\n// TODO: Check if all functions are safe to call\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../interfaces/IDssCdpManager.sol\";\nimport \"../interfaces/ITaxCollector.sol\";\nimport \"../interfaces/ICoinJoin.sol\";\nimport \"../interfaces/ICollateralJoin.sol\";\n\npragma solidity ^0.8.0;\n\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n// WARNING: These functions meant to be used as a a library for a DSProxy. Some are unsafe if you call them directly.\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\nabstract contract Math {\n    uint256 constant RAY = 10 ** 27;\n\n    // Internal functions\n\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x, \"mul-overflow\");\n    }\n\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x, \"sub-overflow\");\n    }\n\n    function toInt(uint x) internal pure returns (int y) {\n        y = int(x);\n        require(y >= 0, \"int-overflow\");\n    }\n\n    function toRad(uint wad) internal pure returns (uint rad) {\n        rad = mul(wad, 10 ** 27);\n    }\n\n    function convertTo18(ICollateralJoin collateralJoin, uint256 amt) internal returns (uint256 wad) {\n        // For those collaterals that have less than 18 decimals precision we need to do the conversion\n        // before passing to modifySAFECollateralization function\n        // Adapters will automatically handle the difference of precision\n        wad = mul(\n            amt,\n            10 ** (18 - collateralJoin.decimals())\n        );\n    }\n}\n\ncontract DssProxyActions is Math {\n    // Internal functions\n    function _getGeneratedDeltaDebt(\n        ISafeEngine safeEngine,\n        address taxCollector,\n        address safe,\n        bytes32 collateralType,\n        uint wad\n    ) internal returns (int deltaDebt) {\n        // Updates stability fee rate\n        uint rate = ITaxCollector(taxCollector).taxSingle(collateralType);\n\n        // Gets StablePro balance of the safe in the safeEngine\n        uint stableProBalance = safeEngine.coinBalance(safe);\n\n        // If there was already enough StablePro in the safeEngine balance, just exits it without adding more debt\n        if (stableProBalance < mul(wad, RAY)) {\n            // Calculates the needed deltaDebt so together with the existing StablePro in the safeEngine\n            // is enough to exit wad amount of StablePro tokens\n            deltaDebt = toInt(sub(mul(wad, RAY), stableProBalance) / rate);\n            // This is neeeded due lack of precision. It might need to sum an extra deltaDebt wei\n            // (for the given StablePro wad amount)\n            deltaDebt = mul(uint(deltaDebt), rate) < mul(wad, RAY) ? deltaDebt + 1 : deltaDebt;\n        }\n    }\n\n    function _getRepaidDeltaDebt(\n        ISafeEngine safeEngine,\n        uint stablePro,\n        address safe,\n        bytes32 collateralType\n    ) internal view returns (int deltaDebt) {\n        // Gets actual rate from the safeEngine\n        (, uint rate,,,) = safeEngine.collateralTypes(collateralType);\n        // Gets actual safeDebt value of the safe\n        (, uint safeDebt) = safeEngine.safes(collateralType, safe);\n\n        // Uses the whole StablePro balance in the safeEngine to reduce the debt\n        deltaDebt = toInt(stablePro / rate);\n        // Checks the calculated deltaDebt is not higher than safe.safeDebt (total debt), otherwise uses its value\n        deltaDebt = uint(deltaDebt) <= safeDebt ? - deltaDebt : - toInt(safeDebt);\n    }\n\n    function _getWipeAllWad(\n        ISafeEngine safeEngine,\n        address usr,\n        address safe,\n        bytes32 collateralType\n    ) internal view returns (uint wad) {\n        // Gets actual rate from the safeEngine\n        (, uint rate,,,) = safeEngine.collateralTypes(collateralType);\n        // Gets actual safeDebt value of the safe\n        (, uint safeDebt) = safeEngine.safes(collateralType, safe);\n        // Gets actual StablePro amount in the safe\n        uint stablePro = safeEngine.coinBalance(usr);\n\n        uint rad = sub(mul(safeDebt, rate), stablePro);\n        wad = rad / RAY;\n\n        // If the rad precision has some dust, it will need to request for 1 extra wad wei\n        wad = mul(wad, RAY) < rad ? wad + 1 : wad;\n    }\n\n    function _coinJoin_join(bytes32 collateralType, address apt, address cdp, uint wad) internal {\n        // Gets StablePro from the user's wallet\n        ICoinJoin(apt).systemCoin().transferFrom(msg.sender, address(this), wad);\n        // Approves adapter to take the StablePro amount\n        ICoinJoin(apt).systemCoin().approve(address(apt), wad);\n        // Joins StablePro into the safeEngine\n        ICoinJoin(apt).join(collateralType, msg.sender, cdp, wad);\n    }\n\n    function _collateralJoin_join(ICollateralJoin apt, address safe, uint amt) internal {\n        // Gets token from the user's wallet\n        apt.collateral().transferFrom(msg.sender, address(this), amt);\n        // Approves adapter to take the token amount\n        apt.collateral().approve(address(apt), amt);\n        // Joins token collateral into the safeEngine\n        apt.join(safe, amt);\n    }\n\n    //TODO: optimize\n    function transferCollateral(address manager, uint cdp, address dst, uint wad) internal {\n        IDssCdpManager(manager).transferCollateral(cdp, dst, wad);\n    }\n\n    function modifySAFECollateralization(address manager, uint cdp, int deltaCollateral, int deltaDebt) internal {\n        IDssCdpManager(manager).modifySAFECollateralization(cdp, deltaCollateral, deltaDebt);\n    }\n\n    function openSafe(address manager, bytes32 collateralType, address usr) internal returns (uint cdp) {\n        cdp = IDssCdpManager(manager).openSafe(collateralType, usr);\n    }\n\n    function transferInternalCoins(address manager, uint cdp, address dst, uint rad) internal {\n        IDssCdpManager(manager).transferInternalCoins(cdp, dst, rad);\n    }\n\n    // Public functions\n\n    function lockTokenCollateral(address manager, ICollateralJoin collateralJoin, uint cdp, uint amt) external {\n        // Takes token amount from user's wallet and joins into the safeEngine\n        _collateralJoin_join(collateralJoin, address(this), amt);\n        // Locks token amount into the CDP\n        IDssCdpManager(manager).safeEngine().modifySAFECollateralization(\n            IDssCdpManager(manager).collateralTypes(cdp),\n            IDssCdpManager(manager).safes(cdp),\n            address(this),\n            address(this),\n            toInt(convertTo18(collateralJoin, amt)),\n            0\n        );\n    }\n\n//    function safeLockTokenCollateral(address manager,address collateralJoin,uint cdp,uint amt,address owner) public {\n//        require(IDssCdpManager(manager).owns(cdp) == owner, \"bad-owner\");\n//        lockTokenCollateral(manager, collateralJoin, cdp, amt);\n//    }\n\n    function freeTokenCollateral(address manager, ICollateralJoin collateralJoin, uint cdp, uint amt) external {\n        uint wad = convertTo18(collateralJoin, amt);\n        // Unlocks token amount from the CDP\n        modifySAFECollateralization(manager, cdp, -toInt(wad), 0);\n        // Moves the amount from the CDP safe to proxy's address\n        transferCollateral(manager, cdp, address(this), wad);\n        // Exits token amount to the user's wallet as a token\n        collateralJoin.exit(msg.sender, amt);\n    }\n\n    function exitTokenCollateral(address manager, ICollateralJoin collateralJoin, uint cdp, uint amt) external {\n        // Moves the amount from the CDP safe to proxy's address\n        transferCollateral(manager, cdp, address(this), convertTo18(collateralJoin, amt));\n\n        // Exits token amount to the user's wallet as a token\n        collateralJoin.exit(msg.sender, amt);\n    }\n\n    function generateDebt(address manager, address taxCollector, address coinJoin, uint cdp, uint wad) external {\n        address safe = IDssCdpManager(manager).safes(cdp);\n        ISafeEngine safeEngine = IDssCdpManager(manager).safeEngine();\n        bytes32 collateralType = IDssCdpManager(manager).collateralTypes(cdp);\n        // Generates debt in the CDP\n        modifySAFECollateralization(\n            manager,\n            cdp,\n            0,\n            _getGeneratedDeltaDebt(safeEngine, taxCollector, safe, collateralType, wad)\n        );\n        // Moves the StablePro amount (balance in the safeEngine in rad) to proxy's address\n        transferInternalCoins(manager, cdp, address(this), toRad(wad));\n        // Allows adapter to access to proxy's StablePro balance in the safeEngine\n        if (safeEngine.cdpRights(address(this), address(coinJoin)) == 0) {\n            safeEngine.approveSAFEModification(coinJoin);\n        }\n        // Exits StablePro to the user's wallet as a token\n        ICoinJoin(coinJoin).exit(collateralType, msg.sender, msg.sender, wad);\n    }\n\n    function repayDebt(address manager, address coinJoin, uint cdp, uint wad) external {\n        ISafeEngine safeEngine = IDssCdpManager(manager).safeEngine();\n        address safe = IDssCdpManager(manager).safes(cdp);\n        bytes32 collateralType = IDssCdpManager(manager).collateralTypes(cdp);\n\n        address own = IDssCdpManager(manager).owns(cdp);\n        if (own == address(this) || IDssCdpManager(manager).cdpCan(own, cdp, address(this)) == 1) {\n            // Joins StablePro amount into the safeEngine\n            _coinJoin_join(collateralType, coinJoin, safe, wad);\n            // Paybacks debt to the CDP\n            modifySAFECollateralization(\n                manager,\n                cdp,\n                0,\n                _getRepaidDeltaDebt(safeEngine, safeEngine.coinBalance(safe), safe, collateralType)\n            );\n        } else {\n            // Joins StablePro amount into the safeEngine\n            _coinJoin_join(collateralType, coinJoin, address(this), wad);\n            // Paybacks debt to the CDP\n            safeEngine.modifySAFECollateralization(\n                collateralType,\n                safe,\n                address(this),\n                address(this),\n                0,\n                _getRepaidDeltaDebt(safeEngine, wad * RAY, safe, collateralType)\n            );\n        }\n    }\n\n    function repayAllDebt(address manager, address coinJoin, uint cdp) external {\n        ISafeEngine safeEngine = IDssCdpManager(manager).safeEngine();\n        address safe = IDssCdpManager(manager).safes(cdp);\n        bytes32 collateralType = IDssCdpManager(manager).collateralTypes(cdp);\n        (, uint safeDebt) = safeEngine.safes(collateralType, safe);\n\n        address own = IDssCdpManager(manager).owns(cdp);\n        if (own == address(this) || IDssCdpManager(manager).cdpCan(own, cdp, address(this)) == 1) {\n            // Joins StablePro amount into the safeEngine\n            _coinJoin_join(collateralType, coinJoin, safe, _getWipeAllWad(safeEngine, safe, safe, collateralType));\n            // Paybacks debt to the CDP\n            modifySAFECollateralization(manager, cdp, 0, -int(safeDebt));\n        } else {\n            // Joins StablePro amount into the safeEngine\n            _coinJoin_join(collateralType, coinJoin, address(this), _getWipeAllWad(safeEngine, address(this), safe, collateralType));\n            // Paybacks debt to the CDP\n            safeEngine.modifySAFECollateralization(\n                collateralType,\n                safe,\n                address(this),\n                address(this),\n                0,\n                -int(safeDebt)\n            );\n        }\n    }\n\n    function lockTokenCollateralAndGenerateDebt(\n        address manager,\n        address taxCollector,\n        ICollateralJoin collateralJoin,\n        address coinJoin,\n        uint cdp,\n        uint collateralAmount,\n        uint deltaWad\n    ) public {\n        address safeHandler = IDssCdpManager(manager).safes(cdp);\n        ISafeEngine safeEngine = IDssCdpManager(manager).safeEngine();\n        bytes32 collateralType = IDssCdpManager(manager).collateralTypes(cdp);\n        // Takes token amount from user's wallet and joins into the safeEngine\n        _collateralJoin_join(collateralJoin, safeHandler, collateralAmount);\n        // Locks token amount into the SAFE and generates debt\n        modifySAFECollateralization(\n            manager,\n            cdp,\n            toInt(convertTo18(collateralJoin, collateralAmount)),\n            _getGeneratedDeltaDebt(safeEngine, taxCollector, safeHandler, collateralType, deltaWad)\n        );\n        // Moves the COIN amount (balance in the safeEngine in rad) to proxy's address\n        transferInternalCoins(manager, cdp, address(this), toRad(deltaWad));\n        // Allows adapter to access to proxy's COIN balance in the safeEngine\n        if (safeEngine.cdpRights(address(this), address(coinJoin)) == 0) {\n            safeEngine.approveSAFEModification(coinJoin);\n        }\n        // Exits COIN to the user's wallet as a token\n        ICoinJoin(coinJoin).exit(collateralType, msg.sender, msg.sender, deltaWad);\n    }\n\n    function openLockTokenCollateralAndGenerateDebt(\n        address manager,\n        address taxCollector,\n        ICollateralJoin collateralJoin,\n        address coinJoin,\n        bytes32 collateralType,\n        uint amtC,\n        uint wadD\n    ) external returns (uint cdp) {\n        cdp = openSafe(manager, collateralType, address(this));\n        lockTokenCollateralAndGenerateDebt(\n            manager, taxCollector, collateralJoin, coinJoin, cdp, amtC, wadD\n        );\n    }\n\n    function repayDebtAndFreeTokenCollateral(\n        address manager,\n        ICollateralJoin collateralJoin,\n        address coinJoin,\n        uint cdp,\n        uint amtC,\n        uint wadD\n    ) external {\n        address safe = IDssCdpManager(manager).safes(cdp);\n        bytes32 collateralType = IDssCdpManager(manager).collateralTypes(cdp);\n        ISafeEngine safeEngine = IDssCdpManager(manager).safeEngine();\n        // Joins StablePro amount into the safeEngine\n        _coinJoin_join(collateralType, coinJoin, safe, wadD);\n        uint wadC = convertTo18(collateralJoin, amtC);\n        // Paybacks debt to the CDP and unlocks token amount from it\n        modifySAFECollateralization(\n            manager,\n            cdp,\n            -toInt(wadC),\n            _getRepaidDeltaDebt(\n                safeEngine,\n                safeEngine.coinBalance(safe),\n                safe,\n                collateralType\n            )\n        );\n        // Moves the amount from the CDP safe to proxy's address\n        transferCollateral(manager, cdp, address(this), wadC);\n        // Exits token amount to the user's wallet as a token\n        collateralJoin.exit(msg.sender, amtC);\n    }\n\n    function repayAllDebtAndFreeTokenCollateral(\n        address manager,\n        ICollateralJoin collateralJoin,\n        address coinJoin,\n        uint cdp,\n        uint amtC\n    ) external {\n        ISafeEngine safeEngine = IDssCdpManager(manager).safeEngine();\n        address safe = IDssCdpManager(manager).safes(cdp);\n        bytes32 collateralType = IDssCdpManager(manager).collateralTypes(cdp);\n        (, uint safeDebt) = safeEngine.safes(collateralType, safe);\n\n        // Joins StablePro amount into the safeEngine\n        _coinJoin_join(collateralType, coinJoin, safe, _getWipeAllWad(safeEngine, safe, safe, collateralType));\n        uint wadC = convertTo18(collateralJoin, amtC);\n        // Paybacks debt to the CDP and unlocks token amount from it\n        modifySAFECollateralization(\n            manager,\n            cdp,\n            -toInt(wadC),\n            -int(safeDebt)\n        );\n        // Moves the amount from the CDP safe to proxy's address\n        transferCollateral(manager, cdp, address(this), wadC);\n        // Exits token amount to the user's wallet as a token\n        collateralJoin.exit(msg.sender, amtC);\n    }\n\n    // Public view functions\n\n    function getCdpId(address manager, address user, bytes32 collateralType) public view returns(uint) {\n        //TODO: optimize\n        uint256 cdpCount = IDssCdpManager(manager).cdpCount(user);\n        uint256 cdpId = IDssCdpManager(manager).firstCdpId(user);\n        for (uint256 i; i < cdpCount; ++i) {\n            if (IDssCdpManager(manager).collateralTypes(cdpId) == collateralType) {\n                return cdpId;\n            }\n            (,uint256 nextCdpId) = IDssCdpManager(manager).list(cdpId);\n            cdpId = nextCdpId;\n        }\n\n        return type(uint256).max;\n    }\n\n    function getCdpInfo(address manager, address user, bytes32 collateralType) public view returns(uint, uint) {\n        uint256 cdpId = getCdpId(manager, user, collateralType);\n        if (cdpId == type(uint256).max) return (0,0);\n\n        ISafeEngine safeEngine = IDssCdpManager(manager).safeEngine();\n        address safe = IDssCdpManager(manager).safes(cdpId);\n        return safeEngine.safes(collateralType, safe);\n    }\n\n    // TODO: add checks with debtCeiling and debtFloor\n    function getAvailableToWithdraw(address manager, address user, bytes32 collateralType) external view returns(uint) {\n        ISafeEngine safeEngine = IDssCdpManager(manager).safeEngine();\n\n        (uint256 lockedCollateral, uint256 generatedDebt) = getCdpInfo(manager, user, collateralType);\n        (, uint rate, uint safetyPrice,,) = safeEngine.collateralTypes(collateralType);\n\n        uint256 minCollateralAmount = mul(generatedDebt, rate) / safetyPrice;\n        return lockedCollateral > minCollateralAmount ? sub(lockedCollateral, minCollateralAmount) : 0;\n    }\n\n    function getAvailableToBorrow(address manager, address user, bytes32 collateralType) external view returns(uint) {\n        ISafeEngine safeEngine = IDssCdpManager(manager).safeEngine();\n\n        (uint256 lockedCollateral, uint256 generatedDebt) = getCdpInfo(manager, user, collateralType);\n        (, uint rate, uint safetyPrice,,) = safeEngine.collateralTypes(collateralType);\n\n        uint256 usdLimit = mul(lockedCollateral, safetyPrice) / rate;\n        return usdLimit > generatedDebt ? sub(usdLimit, generatedDebt) : 0;\n    }\n}\n"
    },
    "contracts/makerdao/externalContracts/LiquidationEngine.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n\n/// dog.sol -- StablePro liquidation module 2.0\n\n// Copyright (C) 2020-2022 Dai Foundation\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\";\n\nimport \"../interfaces/ILiquidationEngine.sol\";\nimport \"../interfaces/ISafeEngine.sol\";\nimport \"../interfaces/ICollateralJoin.sol\";\nimport \"../../exchange/interfaces/IExchange.sol\";\nimport \"../../periphery/contracts/access-control/SuAuthenticatedNonUpgradeable.sol\";\n\nimport {Math} from \"../utils/Math.sol\";\n\n// CHANGED (from dog.sol): added Whitelist behaviour to add order correctly.\n// Added SuAuthenticated instead of authorizedAccounts\n// Added Math to move Math behaviour.\n// Added interface and moved struct there.\n// Added AddAuthorization call in constructor (can be removed).\n// Added LiquidatorReward\n// Moved Liquidator from CollateralType struct to global var, because it's one for all collaterals\n// Calculate rewardCollateral in liquidateCDP\n// Use addOrder instead of startAuction in liquidateCDP\n\ninterface AccountingEngineLike {\n    function pushDebtToQueue(uint256) external;\n}\n\ncontract LiquidationEngine is SuAuthenticatedNonUpgradeable, ILiquidationEngine, Math {\n    ISafeEngine immutable public safeEngine;  // CDP Engine\n\n    mapping (bytes32 => CollateralType) public collateralTypes;\n\n    AccountingEngineLike public accountingEngine;   // Debt Engine\n    uint256 public GlobalLiquidationLimit;  // Max StablePro needed to cover debt+fees of active auctions [rad]\n    uint256 public ActiveLiquidationAmount;  // Amt StablePro needed to cover debt+fees of active auctions [rad]\n    uint256 public LiquidatorReward;  // Reward in percent (1e18 == 1) for liquidation [wad]\n    address public liquidator;  // Liquidator, Exchange module\n\n    // --- Init ---\n    constructor(address accessControl, address safeEngine_) SuAuthenticatedNonUpgradeable(accessControl) public {\n        safeEngine = ISafeEngine(safeEngine_);\n        contractEnabled = 1;\n        emit AddAuthorization(msg.sender);\n    }\n\n    // --- Disable ---\n    uint public contractEnabled;\n    function disableContract() external onlyDisablerAccess {\n        contractEnabled = 0;\n        emit DisableContract();\n    }\n\n    // --- Administration ---\n    function modifyParameters(bytes32 what, address data) external onlyAdmin {\n        if (what == \"accountingEngine\") accountingEngine = AccountingEngineLike(data);\n        else if (what == \"liquidator\") liquidator = data;\n        else revert(\"LiquidationEngine/file-unrecognized-param\");\n        emit ModifyParameters(what, data);\n    }\n    function modifyParameters(bytes32 what, uint256 data) external onlyAdmin {\n        if (what == \"GlobalLiquidationLimit\") GlobalLiquidationLimit = data;\n        else if (what == \"LiquidatorReward\") LiquidatorReward = data;\n        else revert(\"LiquidationEngine/file-unrecognized-param\");\n        emit ModifyParameters(what, data);\n    }\n    function modifyParameters(bytes32 collateralType, bytes32 what, uint256 data) external onlyAdmin {\n        if (what == \"liquidationPenalty\") {\n            require(data >= WAD, \"LiquidationEngine/file-liquidationPenalty-lt-WAD\");\n            collateralTypes[collateralType].liquidationPenalty = data;\n        } else if (what == \"liquidationLimit\") collateralTypes[collateralType].liquidationLimit = data;\n        else revert(\"LiquidationEngine/file-unrecognized-param\");\n        emit ModifyParameters(collateralType, what, data);\n    }\n\n    function liquidationPenalty(bytes32 collateralType) external view returns (uint256) {\n        return collateralTypes[collateralType].liquidationPenalty;\n    }\n\n    // --- CDP Liquidation ---\n    function liquidateCDP(\n        bytes32 collateralType,\n        address cdp,\n        address incentivesReceiver,\n        address collateralJoin\n    ) external returns (uint256 id) {\n        require(contractEnabled == 1, \"LiquidationEngine/not-contractEnabled\");\n\n        (uint256 collateralAmount, uint256 generatedDebt) = safeEngine.safes(collateralType, cdp);\n        CollateralType memory _cType = collateralTypes[collateralType];\n        uint256 deltaGeneratedDebt;\n        uint256 accumulatedRate;\n        uint256 debtFloor;\n        {\n            uint256 safetyPrice;\n            (, accumulatedRate, safetyPrice,, debtFloor) = safeEngine.collateralTypes(collateralType);\n            require(\n                safetyPrice > 0 && _mul(collateralAmount, safetyPrice) < _mul(generatedDebt, accumulatedRate),\n                \"LiquidationEngine/not-unsafe\"\n            );\n\n            // Get the minimum value between:\n            // 1) Remaining space in the general GlobalLiquidationLimit\n            // 2) Remaining space in the collateral liquidationLimit\n            require(\n                GlobalLiquidationLimit > ActiveLiquidationAmount\n                    && _cType.liquidationLimit > _cType.activeLiquidationAmount,\n                \"LiquidationEngine/liquidation-limit-hit\"\n            );\n            uint256 room = min(\n                GlobalLiquidationLimit - ActiveLiquidationAmount,\n                _cType.liquidationLimit - _cType.activeLiquidationAmount\n            );\n\n            // uint256.max()/(RAD*WAD) = 115,792,089,237,316\n            deltaGeneratedDebt = min(generatedDebt, _mul(room, WAD) / accumulatedRate / _cType.liquidationPenalty);\n\n            // Partial liquidation edge case logic\n            if (generatedDebt > deltaGeneratedDebt) {\n                if (_mul(generatedDebt - deltaGeneratedDebt, accumulatedRate) < debtFloor) {\n\n                    // If the leftover Vault would be dusty, just liquidate it entirely.\n                    // This will result in at least one of activeLiquidationAmount_i > liquidationLimit_i or\n                    // ActiveLiquidationAmount > GlobalLiquidationLimit becoming true.\n                    // The amount of excess will be bounded above by ceiling(debtFloor_i * liquidationPenalty_i / WAD).\n                    // This deviation is assumed to be small compared to both liquidationLimit_i and\n                    // GlobalLiquidationLimit, so that the extra amount of target StablePro over the limits\n                    // intended is not of economic concern.\n                    deltaGeneratedDebt = generatedDebt;\n                } else {\n\n                    // In a partial liquidation, the resulting auction should also be non-dusty.\n                    require(\n                        _mul(deltaGeneratedDebt, accumulatedRate) >= debtFloor,\n                        \"LiquidationEngine/dusty-auction-from-partial-liquidation\"\n                    );\n                }\n            }\n        }\n\n        uint256 deltaCollateral = _mul(collateralAmount, deltaGeneratedDebt) / generatedDebt;\n\n        require(deltaCollateral > 0, \"LiquidationEngine/null-auction\");\n        require(deltaGeneratedDebt <= 2**255 && deltaCollateral <= 2**255, \"LiquidationEngine/overflow\");\n\n        uint256 rewardCollateral = _mul(deltaCollateral, LiquidatorReward) / WAD;\n        uint256 collateral2sell = _sub(deltaCollateral, rewardCollateral);\n        safeEngine.confiscateSAFECollateralAndDebt(\n            collateralType, cdp, incentivesReceiver, address(accountingEngine), -int256(rewardCollateral), 0\n        );\n        safeEngine.confiscateSAFECollateralAndDebt(\n            collateralType,\n            cdp,\n            liquidator,\n            address(accountingEngine),\n            -int256(collateral2sell),\n            -int256(deltaGeneratedDebt)\n        );\n\n        uint256 due = _mul(deltaGeneratedDebt, accumulatedRate);\n        accountingEngine.pushDebtToQueue(due);\n\n        {   // Avoid stack too deep\n            // This calcuation will overflow if deltaGeneratedDebt*rate exceeds ~10^14\n            uint256 amountToRaise = _mul(due, _cType.liquidationPenalty) / WAD;\n            ActiveLiquidationAmount = _add(ActiveLiquidationAmount, amountToRaise);\n            collateralTypes[collateralType].activeLiquidationAmount =\n                            _add(_cType.activeLiquidationAmount, amountToRaise);\n\n            /// Now we nee to use our \"auction\" with Exchange module, that mean we need to add order\n            /// id is needed only for event, so it's not necessary to store it\n            /// But we don't use amountToRaise (=minAmount), so in future we may need to use it\n            /// Also we send some tokens to incentivesReceiver previously, so we don't need it more\n//            id = AuctionLike(_cType.liquidator).startAuction({\n//                debt: amountToRaise,\n//                collateralToSell: deltaCollateral,\n//                colReceiver: cdp,\n//                incentivesReceiver: incentivesReceiver\n//            });\n\n            // TODO: create algorithm, how to choose stablecoin\n            address stablecoin = EnumerableSetUpgradeable.at(_stablecoinWhitelist, 0);\n            id = IExchange(liquidator).addOrder(\n                address(ICollateralJoin(collateralJoin).collateral()),\n                collateral2sell,\n                // amountToRaise, TODO: add minAmount?\n                stablecoin,\n                address(accountingEngine),\n                DiscountType.middle, // TODO: should depend on HF\n                collateralJoin\n            );\n        }\n\n        emit LiquidateCDP(collateralType, cdp, deltaCollateral, deltaGeneratedDebt, due, liquidator, id);\n    }\n\n    function reduceActiveLiquidationAmount(bytes32 collateralType, uint256 rad) external onlyLiquidationAccess {\n        ActiveLiquidationAmount = _sub(ActiveLiquidationAmount, rad);\n        collateralTypes[collateralType].activeLiquidationAmount =\n                        _sub(collateralTypes[collateralType].activeLiquidationAmount, rad);\n        emit ReduceActiveLiquidationAmount(collateralType, rad);\n    }\n\n    // --- Stablecoin Whitelist ---\n    EnumerableSetUpgradeable.AddressSet internal _stablecoinWhitelist;\n\n    function addWhitelistStablecoin(address _stablecoin) public onlyAdmin {\n        EnumerableSetUpgradeable.add(_stablecoinWhitelist, _stablecoin);\n    }\n\n    function removeWhitelistStablecoin(address _stablecoin) public onlyAdmin {\n        EnumerableSetUpgradeable.remove(_stablecoinWhitelist, _stablecoin);\n    }\n\n    function hasWhitelistStablecoin(address _stablecoin) public view returns(bool) {\n        return EnumerableSetUpgradeable.contains(_stablecoinWhitelist, _stablecoin);\n    }\n}\n"
    },
    "contracts/makerdao/interfaces/IAccountingEngine.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\n/**\n * @title IAccountingEngine\n **/\ninterface IAccountingEngine {\n    /* ==================== EVENTS ===============-===== */\n    event StableProSwapped(uint256 amount);\n    event DisableContract();\n\n    /* ==================== ERRORS ===============-===== */\n    error BadStablecoin(address asset);\n\n\n    /* ==================== MUTABLE METHODS ==================== */\n\n    function pushDebtToQueue(uint amountToRaise) external;\n\n    function swapStableProToStablecoin(address stablecoinToken, uint256 stableProAmountE18) external;\n}\n"
    },
    "contracts/makerdao/interfaces/ICoin.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface ICoin is IERC20 {\n    function mint(address account, uint256 amount) external;\n    function burn(address account, uint256 amount) external;\n}\n"
    },
    "contracts/makerdao/interfaces/ICoinJoin.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport {IDisable} from \"./IDisable.sol\";\nimport {ICoin} from \"./ICoin.sol\";\n\n/**\n * @title ITaxCollector\n **/\ninterface ICoinJoin is IDisable {\n    /* ==================== EVENTS ==================== */\n    event Join(address indexed usr, uint256 wad);\n    event Exit(address indexed usr, uint256 wad);\n    event UpdateRewardChef();\n\n    /* ====================== VARS ==============-====== */\n    function systemCoin() external returns (ICoin);\n\n    /* ==================== METHODS ==================== */\n\n    /**\n    * @notice Join pegged-coins in the system\n    * @dev Exited coins have 18 decimals but inside the system they have 45 (rad) decimals.\n           When we join, the amount (wad) is multiplied by 10**27 (ray)\n    * @param collateralType Collateral that will be used for borrow\n    * @param user Account that call borrow/repay function and will receive rewards in RewardChef\n    * @param cdp Account that will receive the joined coins\n    * @param wad Amount of external coins to join (18 decimal number)\n    **/\n    function join(bytes32 collateralType, address user, address cdp, uint wad) external;\n\n    /**\n    * @notice Exit pegged-coins from the system and inside 'Coin.sol'\n    * @dev Inside the system, coins have 45 (rad) decimals but outside they have 18 decimals (wad).\n           When we exit, we specify a wad amount of coins and then the contract automatically multiplies\n           wad by 10**27 to move the correct 45 decimal coin amount to this adapter\n    * @param collateralType Collateral that will be used for repay\n    * @param user Account that call borrow/repay function and will receive rewards in RewardChef\n    * @param cdp Account that will receive the exited coins\n    * @param wad Amount of internal coins to join (18 decimal number that will be multiplied by ray)\n    **/\n    function exit(bytes32 collateralType, address user, address cdp, uint wad) external;\n}\n"
    },
    "contracts/makerdao/interfaces/ICollateralJoin.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport {IDisable} from \"./IDisable.sol\";\n\n/**\n * @title ITaxCollector\n **/\ninterface ICollateralJoin is IDisable {\n\n    /* ===================== EVENTS ===================== */\n\n    event Join(address indexed usr, uint256 wad);\n    event Exit(address indexed usr, uint256 wad);\n\n    /* ====================== VARS ===================== */\n    function decimals() external returns (uint);\n    function collateral() external view returns(IERC20Metadata);\n\n    /* ==================== METHODS ==================== */\n\n    /**\n    * @notice Join collateral in the system\n    * @param usr Account from which we transferFrom collateral and add it in the system\n    * @param wad Amount of collateral to transfer in the system (represented as a number with 18 decimals)\n    **/\n    function join(address usr, uint wad) external;\n\n    /**\n    * @notice Exit collateral from the system\n    * @param usr Account to which we transfer the collateral\n    * @param wad Amount of collateral to transfer to 'account' (represented as a number with 18 decimals)\n    **/\n    function exit(address usr, uint wad) external;\n}\n"
    },
    "contracts/makerdao/interfaces/IDisable.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\ninterface IDisable {\n    event DisableContract();\n\n    function disableContract() external;\n}\n"
    },
    "contracts/makerdao/interfaces/IDssCdpManager.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport \"../interfaces/ISafeEngine.sol\";\n\n/**\n * @title IDssMiddleware\n **/\ninterface IDssCdpManager {\n\n    /* ==================== STRUCTS ==================== */\n\n    struct List {\n        uint prev;\n        uint next;\n    }\n\n    /* ==================== EVENTS ===================== */\n\n    event NewCdp(address indexed usr, address indexed own, uint indexed cdp);\n\n\n    /* ===================== VARS ====================== */\n\n    // @notice CDPId => CollateralType\n    function collateralTypes(uint cdp) external view returns (bytes32);\n    // @notice CDPId => CdpHandler\n    function safes(uint cdp) external view returns (address);\n    // @notice Address of safeEngine\n    function safeEngine() external view returns (ISafeEngine);\n    // @notice CDPId => Owner\n    function owns(uint cdp) external view returns (address);\n    // @notice Owner => CDPId => Allowed Addr => True/False\n    function cdpCan(address owner, uint cdp, address allowedAddress) external view returns (uint);\n    // @notice Owner => Amount of CDPs\n    function cdpCount(address owner) external view returns (uint);\n    // @notice Owner => First CDPId\n    function firstCdpId(address owner) external view returns (uint);\n    // @notice Owner => Last CDPId\n    function lastCdpId(address owner) external view returns (uint);\n    // @notice CDPId => Prev & Next CDPIds (double linked list)\n    function list(uint cdp) external view returns (uint prev, uint next);\n\n    /* ==================== METHODS ==================== */\n\n    // @notice Allow/disallow a usr address to manage the cdp.\n    function cdpAllow(uint cdp, address usr, uint ok) external;\n\n    // @notice Allow/disallow a usr address to quit to the the sender urn.\n    function allowHandler(address usr, uint ok) external;\n\n    // @notice Open a new cdp for a given usr address.\n    function openSafe(bytes32 collateralType, address usr) external returns (uint);\n\n    // @notice Give the cdp ownership to a dst address.\n    function transferSafeOwnership(uint cdp, address dst) external;\n\n    // @notice Modify the cdp keeping the generated StablePro or collateral freed in the cdp urn address.\n    function modifySAFECollateralization(uint cdp, int deltaCollateral, int deltaDebt) external;\n\n    // @notice Transfer wad amount of cdp collateral from the cdp address to a dst address.\n    function transferCollateral(uint cdp, address dst, uint wad) external;\n\n    // @notice Transfer wad amount of any type of collateral (ilk) from the cdp address to a dst address.\n    // This function has the purpose to take away collateral from the system that doesn't correspond to the cdp\n    // but was sent there wrongly.\n    function transferCollateral(bytes32 ilk, uint cdp, address dst, uint wad) external;\n\n    // @notice Transfer wad amount of StablePro from the cdp address to a dst address.\n    function transferInternalCoins(uint cdp, address dst, uint rad) external;\n\n    // @notice Quit the system, migrating the cdp (lockedCollateral, generatedDebt) to a different dst urn\n    function quit(uint cdp, address dst) external;\n\n    // @notice Import a position from src urn to the urn owned by cdp\n    function enter(address src, uint cdp) external;\n\n    // @notice Move a position from cdpSrc urn to the cdpDst urn\n    function moveSAFE(uint cdpSrc, uint cdpDst) external;\n}\n"
    },
    "contracts/makerdao/interfaces/ILiquidationEngine.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\n/**\n * @title ITaxCollector\n **/\ninterface ILiquidationEngine {\n    /* ==================== STRUCTS ==================== */\n\n    struct CollateralType {\n        uint256 liquidationPenalty;  // Liquidation Penalty [wad]\n        uint256 liquidationLimit;  // Max StablePro needed to cover debt+fees of active auctions per cType [rad]\n        uint256 activeLiquidationAmount;  // Amt StablePro needed to cover debt+fees of active auctions per cType [rad]\n    }\n\n    /* ==================== EVENTS ===============-===== */\n\n    event DisableContract();\n\n    event AddAuthorization(address indexed usr);\n    event RemoveAuthorization(address indexed usr);\n\n    event ModifyParameters(bytes32 indexed what, uint256 data);\n    event ModifyParameters(bytes32 indexed what, address data);\n    event ModifyParameters(bytes32 indexed collateralType, bytes32 indexed what, uint256 data);\n    event ModifyParameters(bytes32 indexed collateralType, bytes32 indexed what, address liquidator);\n\n    event LiquidateCDP(\n        bytes32 indexed collateralType,\n        address indexed cdp,\n        uint256 lockedCollateral,\n        uint256 generatedDebt,\n        uint256 due,\n        address liquidator,\n        uint256 indexed id\n    );\n    event ReduceActiveLiquidationAmount(bytes32 indexed collateralType, uint256 rad);\n\n    /* ==================== MUTABLE METHODS ==================== */\n\n    // --- Administration ---\n    function modifyParameters(bytes32 what, uint data) external;\n    function modifyParameters(bytes32 what, address data) external;\n    function modifyParameters(bytes32 collateralType, bytes32 what, uint data) external;\n\n    /**\n      * @notice Liquidate a Vault and start a Dutch auction to sell its collateral for StablePro.\n      * @dev The entire Vault will be liquidated except when the target amount of StablePro to be raised in\n      * the resulting auction (debt of Vault + liquidation penalty) causes either ActiveLiquidationAmount to exceed\n      * GlobalLiquidationLimit or collateralType.activeLiquidationAmount to exceed collateralType.liquidationLimit\n      * by an economically significant amount. In that case, a partial liquidation is performed to respect the global\n      * and per-collateralType limits on outstanding StablePro target. The one exception is if the resulting auction\n      * would likely have too little collateral to be interesting to Keepers\n      * (debt taken from Vault < collateralType.debtFloor),\n      * in which case the function reverts. Please refer to the code and comments within if more detail is desired.\n      * @param collateralType - collateral type\n      * @param cdp - address of cdp position\n      * @param incentivesReceiver - address that will receive the liquidation reward, if any.\n      * @param collateralJoin - address of collateral adapter\n    **/\n    function liquidateCDP(\n        bytes32 collateralType,\n        address cdp,\n        address incentivesReceiver,\n        address collateralJoin\n    ) external returns (uint256 id);\n\n    function reduceActiveLiquidationAmount(bytes32 collateralType, uint256 rad) external;\n\n    // --- Whitelist ---\n    function addWhitelistStablecoin(address _stablecoin) external;\n    function removeWhitelistStablecoin(address _stablecoin) external;\n\n    /* ==================== VIEW METHODS ==================== */\n\n    function liquidationPenalty(bytes32 collateralType) external view returns (uint256);\n\n    function hasWhitelistStablecoin(address _stablecoin) external view returns(bool);\n}\n"
    },
    "contracts/makerdao/interfaces/IPriceFeed.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\n/**\n * @title IPriceFeed\n **/\ninterface IPriceFeed {\n    function peek() external returns (bytes32, bool);\n}\n"
    },
    "contracts/makerdao/interfaces/ISafeEngine.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// TODO: check how to operate with license and use one for all contracts\n\npragma solidity ^0.8.0;\n\n/**\n * @title SafeEngine\n * @notice The single source of truth for the Maker Protocol. It contains the accounting system of the core Vault,\n * Internal StablePro balances, and collateral state. It houses the public interface for Vault management,\n * allowing safe(= CDP or Vault) owners to adjust their Vault state balances. It also contains the public interface\n * for Vault fungibility, allowing safe (Vault) owners to transfer, split, and merge Vaults.\n * Excluding these interfaces, SAFEEngine is accessed through trusted smart contract modules.\n **/\ninterface ISafeEngine {\n    /* ==================== EVENTS ==================== */\n    event DisableContract();\n\n    /* ==================== METHODS ==================== */\n\n    // --- Data ---\n    struct CollateralType {\n        uint256 debtAmount;       // Total debt issued for this specific collateral type                          [wad]\n        uint256 accumulatedRate;  // Accumulator for interest accrued on this collateral type                     [ray]\n        uint256 safetyPrice;      // Floor price at which a CDP is allowed to generate debt                       [ray]\n        uint256 debtCeiling;      // Maximum amount of debt that can be generated with this collateral type       [rad]\n        uint256 debtFloor;        // Minimum amount of debt that must be generated by a CDP using this collateral [rad]\n    }\n    struct SAFE {\n        uint256 lockedCollateral; // Total amount of collateral locked in a SAFE/CDP  [wad]\n        uint256 generatedDebt;    // Total amount of debt generated by a SAFE/CDP     [wad]\n    }\n\n    // --- VARS ---\n\n    function safes(bytes32, address) external view returns (uint, uint);\n\n    function collateralTypes(bytes32) external view returns (\n        uint256 debtAmount,      // [wad]\n        uint256 accumulatedRate, // [ray]\n        uint256 safetyPrice,     // [ray]\n        uint256 debtCeiling,     // [rad]\n        uint256 debtFloor        // [rad]\n    );\n\n    function tokenCollateral(bytes32, address) external view returns (uint256);\n\n    function coinBalance(address) external view returns (uint256);\n\n    function debtBalance(address) external view returns (uint256);\n\n    function cdpRights(address, address) external view returns (uint256);\n\n    // --- Auth ---\n    /**\n     * @notice Allow an address to modify your CDP.\n     * For example coinAdapter should be able to modify your CDP to withdraw all correctly.\n     * @param usr Account to give CDP permissions to\n     */\n    function approveSAFEModification(address usr) external;\n\n    /**\n     * @notice Deny an address the rights to modify your CDP\n     * @param usr Account to give CDP permissions to\n     */\n    function denySAFEModification(address usr) external;\n\n    // --- Administration ---\n\n    function initializeCollateralType(bytes32 collateralType) external;\n    // TODO: check why not to use strings instead of bytes32\n    /**\n     * @notice Method to modify some global variables\n     * @param what - name of variable we want to change\n     * @param data - new value of this variable\n     */\n    function modifyParameters(bytes32 what, uint data) external;\n    /**\n     * @notice Method to modify values in struct of collateralTypes\n     * @param collateralType - collateral type we wand to modify (collateralTypes[collateralType])\n     * @param what - name of variable in struct we want to change\n     * @param data - new value of this variable\n     */\n    function modifyParameters(bytes32 collateralType, bytes32 what, uint data) external;\n\n    // --- Fungibility ---\n    function modifyCollateralBalance(bytes32 collateralType, address usr, int256 wad) external;\n    function transferCollateral(bytes32 collateralType, address src, address dst, uint256 wad) external;\n    function transferInternalCoins(address src, address dst, uint256 rad) external;\n\n    // --- CDP Manipulation ---\n    /**\n     * @notice Add/remove collateral or put back/generate more debt in a CDP\n     * @param collateralType Type of collateral to withdraw/deposit in and from the CDP\n     * @param cdp Target CDP\n     * @param collateralSource Account we take collateral from/put collateral into\n     * @param debtDestination Account from which we credit/debit coins and debt\n     * @param deltaCollateral Amount of collateral added/extract from the CDP\n     * @param deltaDebt Amount of debt to generate/repay\n     */\n    function modifySAFECollateralization(\n        bytes32 collateralType,\n        address cdp,\n        address collateralSource,\n        address debtDestination,\n        int deltaCollateral,\n        int deltaDebt\n    ) external;\n\n    // --- CDP Fungibility ---\n    /**\n     * @notice Transfer collateral and/or debt between CDPs\n     * @param collateralType Collateral type transferred between CDPs\n     * @param src Source CDP\n     * @param dst Destination CDP\n     * @param deltaCollateral Amount of collateral to take/add into src and give/take from dst\n     * @param deltaDebt Amount of debt to take/add into src and give/take from dst\n     */\n    function transferSAFECollateralAndDebt(\n        bytes32 collateralType,\n        address src,\n        address dst,\n        int deltaCollateral,\n        int deltaDebt\n    ) external;\n\n    // --- CDP Confiscation ---\n    /**\n     * @notice Normally used by the LiquidationEngine in order to confiscate collateral and\n       debt from a CDP and give them to someone else\n     * @param collateralType Collateral type the CDP has locked inside\n     * @param cdp Target CDP\n     * @param collateralCounterparty Who we take/give collateral to\n     * @param debtCounterparty Who we take/give debt to\n     * @param deltaCollateral Amount of collateral taken/added into the CDP\n     * @param deltaDebt Amount of debt taken/added into the CDP\n     */\n    function confiscateSAFECollateralAndDebt(\n        bytes32 collateralType,\n        address cdp,\n        address collateralCounterparty,\n        address debtCounterparty,\n        int deltaCollateral,\n        int deltaDebt\n    ) external;\n\n    // --- Settlement ---\n    /**\n     * @notice Nullify an amount of coins with an equal amount of debt\n     * @param rad Amount of debt & coins to destroy (expressed as a number with 45 decimals)\n     */\n    function settleDebt(uint rad) external;\n\n    /**\n     * @notice Usually called by CoinSavingsAccount in order to create unbacked debt\n     * @param debtDestination Usually AccountingEngine that can settle decreaseSoldAmount with surplus\n     * @param coinDestination Usually CoinSavingsAccount who passes the new coins to depositors\n     * @param rad Amount of debt to create (expressed as a number with 45 decimals)\n     */\n    function createUnbackedDebt(address debtDestination, address coinDestination, uint rad) external;\n\n    // --- Rates ---\n    /**\n     * @notice Usually called by TaxCollector in order to accrue interest on a specific collateral type\n     * @param collateralType Collateral type we accrue interest for\n     * @param surplusDst Destination for amount of surplus created by applying the interest rate\n       to debt created by CDPs with 'collateralType'\n     * @param accumulatedRate Multiplier applied to the debtAmount in order to calculate the surplus\n     */\n    function updateAccumulatedRate(bytes32 collateralType, address surplusDst, int accumulatedRate) external;\n}\n"
    },
    "contracts/makerdao/interfaces/ITaxCollector.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\n/**\n * @title ITaxCollector\n **/\ninterface ITaxCollector {\n    /* ==================== EVENTS ==================== */\n    event DisableContract();\n\n    /* ==================== STRUCTS ==================== */\n\n    struct CollateralType {\n        uint256 stabilityFee;      // Collateral-specific, per-second stability fee contribution [ray]\n        uint256 latestUpdateTime;  // Time of last taxSingle [unix epoch time]\n    }\n\n\n    /* ==================== METHODS ==================== */\n\n    // --- Administration ---\n    function initializeCollateralType(bytes32 collateralType) external;\n    function modifyParameters(bytes32 collateralType, bytes32 what, uint data) external;\n    function modifyParameters(bytes32 what, uint data) external;\n    function modifyParameters(bytes32 what, address data) external;\n\n\n    // --- Stability Fee Collection ---\n    /**\n     * @notice Collect tax from a single collateral type\n     * @param collateralType Collateral type to tax\n     */\n    function taxSingle(bytes32 collateralType) external returns (uint rate);\n}\n"
    },
    "contracts/makerdao/utils/Math.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n\npragma solidity ^0.8.0;\n\nabstract contract Math {\n    uint256 constant WAD = 10 ** 18;\n\n    /**\n    * @notice Calculates the sum of an unsigned integer and a signed integer\n    * @param  x Unsigned integer\n    * @param  y Signed integer\n    * @return z Unsigned sum of `x` and `y`\n    */\n    function _add(uint x, int y) internal pure returns (uint z) {\n        if (y >= 0) {\n            z = x + uint256(y);\n        } else {\n            z = x - uint256(-y);\n        }\n        require(y >= 0 || z <= x);\n        require(y <= 0 || z >= x);\n    }\n\n    /**\n    * @notice Calculates the substraction of an unsigned integer and a signed integer\n    * @param  x Unsigned integer\n    * @param  y Signed integer\n    * @return z Unsigned substraction of `x` and `y`\n    */\n    function _sub(uint x, int y) internal pure returns (uint z) {\n        if (y >= 0) {\n            z = x - uint256(y);\n        } else {\n            z = x + uint256(-y);\n        }\n        require(y <= 0 || z <= x);\n        require(y >= 0 || z >= x);\n    }\n    function _mul(uint x, int y) internal pure returns (int z) {\n        z = int(x) * y;\n        require(int(x) >= 0);\n        require(y == 0 || z / y == int(x));\n    }\n\n    function _add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x);\n    }\n    function _sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x);\n    }\n    function _mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x);\n    }\n\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = x <= y ? x : y;\n    }\n\n    function either(bool x, bool y) internal pure returns (bool z) {\n        assembly{ z := or(x, y)}\n    }\n    function both(bool x, bool y) internal pure returns (bool z) {\n        assembly{ z := and(x, y)}\n    }\n}\n"
    },
    "contracts/mocks/MockRewardChef.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract MockRewardChef {\n    function pendingSushi(address _asset, address _user) public view returns (uint256) {\n        return 0;\n    }\n\n    function increaseAmount(\n        address asset,\n        address to,\n        uint256 amountEDecimal,\n        uint256 lockupPeriodSeconds\n    ) public {}\n\n    function decreaseAmount(address asset, address to, uint256 amountEDecimal) public {}\n}\n"
    },
    "contracts/periphery/contracts/access-control/SuAccessRoles.sol": {
      "content": "// SPDX-License-Identifier: BSL 1.1\n\npragma solidity ^0.8.0;\n\n/**\n * @title SuAccessRoles Library\n * @dev SuAuthenticated and SuAccessControlSingleton need to have this constants\n * Hierarchy:\n *      1. DAO - can give admins and system roles\n *      2.1. Admin - can set Alerters\n *      2.2. System - includes Minter, Liquidation, Reward and Disabler roles, don't have access to give some roles.\n *      3. Alerter - can send alerts and trigger rate limits, don't have access to give some roles.\n */\nabstract contract SuAccessRoles {\n    bytes32 public constant ADMIN_ROLE = 0x00;\n\n    bytes32 public constant DAO_ROLE = keccak256(\"DAO_ROLE\");\n\n    bytes32 public constant ALERTER_ROLE = keccak256(\"ALERTER_ROLE\");\n\n    // system roles\n    bytes32 public constant MINT_ACCESS_ROLE = keccak256(\"MINT_ACCESS_ROLE\");\n    bytes32 public constant LIQUIDATION_ACCESS_ROLE = keccak256(\"LIQUIDATION_ACCESS_ROLE\");\n    bytes32 public constant REWARD_ACCESS_ROLE = keccak256(\"REWARD_ACCESS_ROLE\");\n    bytes32 public constant SYSTEM_ROLE = keccak256(\"SYSTEM_ROLE\");\n    bytes32 public constant DISABLER_ROLE = keccak256(\"DISABLER_ROLE\");\n    bytes32 public constant CDP_ACCESS_ROLE = keccak256(\"CDP_ACCESS_ROLE\");\n}\n"
    },
    "contracts/periphery/contracts/access-control/SuAuthenticated.sol": {
      "content": "// SPDX-License-Identifier: BSL 1.1\n\npragma solidity ^0.8.0;\n\nimport \"../interfaces/access-control/ISuAccessControl.sol\";\nimport \"./SuAccessRoles.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @title SuAuthenticated\n * @dev other contracts should inherit to be authenticated.\n * The address of SuAccessControlSingleton should be one for all contract that inherits SuAuthenticated\n */\nabstract contract SuAuthenticated is Initializable, SuAccessRoles, IERC165Upgradeable {\n    ISuAccessControl public ACCESS_CONTROL_SINGLETON;\n\n    error OnlyDAOError();\n    error OnlyAdminError();\n    error OnlyAlerterError();\n    error OnlyVaultAccessError();\n    error OnlyLiquidationAccessError();\n    error OnlyMintAccessError();\n    error OnlyRewardAccessError();\n    error OnlyDisablerAccessError();\n    error OnlyRoleError();\n    error BadAccessControlSingleton();\n\n    /**\n     * @dev should be passed in constructor\n     */\n    function __suAuthenticatedInit(address _accessControlSingleton) internal onlyInitializing {\n        ACCESS_CONTROL_SINGLETON = ISuAccessControl(_accessControlSingleton);\n        if (\n            _accessControlSingleton != address(0) &&\n            !ISuAccessControl(_accessControlSingleton).supportsInterface(type(IAccessControlUpgradeable).interfaceId)\n        ) revert BadAccessControlSingleton();\n    }\n\n    /** CORE ROLES */\n\n    modifier onlyDAO() {\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(DAO_ROLE, msg.sender)) revert OnlyDAOError();\n        _;\n    }\n\n    modifier onlyAdmin() {\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(ADMIN_ROLE, msg.sender)) revert OnlyAdminError();\n        _;\n    }\n\n    modifier onlyAlerter() {\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(ALERTER_ROLE, msg.sender)) revert OnlyAlerterError();\n        _;\n    }\n\n    /** SYSTEM ROLES */\n\n    modifier onlyLiquidationAccess() {\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(LIQUIDATION_ACCESS_ROLE, msg.sender)) revert OnlyLiquidationAccessError();\n        _;\n    }\n\n    modifier onlyMintAccess() {\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(MINT_ACCESS_ROLE, msg.sender)) revert OnlyMintAccessError();\n        _;\n    }\n\n    modifier onlyRewardAccess() {\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(REWARD_ACCESS_ROLE, msg.sender)) revert OnlyRewardAccessError();\n        _;\n    }\n\n    modifier onlyDisablerAccess() {\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(DISABLER_ROLE, msg.sender)) revert OnlyDisablerAccessError();\n        _;\n    }\n\n    // syntax sugar under ACCESS_CONTROL_SINGLETON\n    modifier onlyRole(bytes32 role) {\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(role, msg.sender)) revert OnlyRoleError();\n        _;\n    }\n\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return ACCESS_CONTROL_SINGLETON.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "contracts/periphery/contracts/access-control/SuAuthenticatedNonUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: BSL 1.1\n\npragma solidity ^0.8.0;\n\nimport \"../interfaces/access-control/ISuAccessControl.sol\";\nimport \"./SuAccessRoles.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n/**\n * @title SuAuthenticated\n * @dev other contracts should inherit to be authenticated.\n * The address of SuAccessControlSingleton should be one for all contract that inherits SuAuthenticated\n */\nabstract contract SuAuthenticatedNonUpgradeable is SuAccessRoles, IERC165 {\n    ISuAccessControl public ACCESS_CONTROL_SINGLETON;\n\n    error OnlyDAOError();\n    error OnlyAdminError();\n    error OnlyAlerterError();\n    error OnlyLiquidationAccessError();\n    error OnlyMintAccessError();\n    error OnlyRewardAccessError();\n    error OnlyDisablerAccessError();\n    error OnlyRoleError();\n    error OnlyCDPAccessError();\n    error BadAccessControlSingleton();\n\n    constructor (address _accessControlSingleton) internal {\n        ACCESS_CONTROL_SINGLETON = ISuAccessControl(_accessControlSingleton);\n        if (\n            !ISuAccessControl(_accessControlSingleton).supportsInterface(type(IAccessControlUpgradeable).interfaceId)\n        ) revert BadAccessControlSingleton();\n    }\n\n    /** CORE ROLES */\n\n    modifier onlyDAO() {\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(DAO_ROLE, msg.sender)) revert OnlyDAOError();\n        _;\n    }\n\n    modifier onlyAdmin() {\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(ADMIN_ROLE, msg.sender)) revert OnlyAdminError();\n        _;\n    }\n\n    modifier onlyAlerter() {\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(ALERTER_ROLE, msg.sender)) revert OnlyAlerterError();\n        _;\n    }\n\n    /** SYSTEM ROLES */\n\n    modifier onlyLiquidationAccess() {\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(LIQUIDATION_ACCESS_ROLE, msg.sender)) revert OnlyLiquidationAccessError();\n        _;\n    }\n\n    modifier onlyMintAccess() {\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(MINT_ACCESS_ROLE, msg.sender)) revert OnlyMintAccessError();\n        _;\n    }\n\n    modifier onlyRewardAccess() {\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(REWARD_ACCESS_ROLE, msg.sender)) revert OnlyRewardAccessError();\n        _;\n    }\n\n    modifier onlyDisablerAccess() {\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(DISABLER_ROLE, msg.sender)) revert OnlyDisablerAccessError();\n        _;\n    }\n\n    modifier onlyCDPAccess() {\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(CDP_ACCESS_ROLE, msg.sender)) revert OnlyCDPAccessError();\n        _;\n    }\n\n    // syntax sugar under ACCESS_CONTROL_SINGLETON\n    modifier onlyRole(bytes32 role) {\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(role, msg.sender)) revert OnlyRoleError();\n        _;\n    }\n\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return ACCESS_CONTROL_SINGLETON.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "contracts/periphery/contracts/interfaces/access-control/ISuAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\";\nimport \"../../access-control/SuAccessRoles.sol\";\n\n/**\n * @notice Access control for contracts\n * @dev External interface of AccessControl declared to support ERC165 detection.\n **/\ninterface ISuAccessControl is IAccessControlUpgradeable, IERC165Upgradeable {\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\n}\n"
    },
    "contracts/periphery/contracts/interfaces/oracle/ISuOracle.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\n// solhint-disable compiler-version\npragma solidity >=0.7.6;\n\ninterface ISuOracle {\n    /**\n     * @notice WARNING! Read this description very carefully!\n     *     function getFiatPrice1e18(address asset) returns (uint256) that:\n     *         basicAmountOfAsset * getFiatPrice1e18(asset) / 1e18 === $$ * 1e18\n     *     in other words, it doesn't matter what's the erc20.decimals is,\n     *     you just multiply token balance in basic units on value from oracle and get dollar amount multiplied on 1e18.\n     *\n     * different assets have different deviation threshold (errors)\n     *     for wBTC it's <= 0.5%, read more https://data.chain.link/ethereum/mainnet/crypto-usd/btc-usd\n     *     for other asset is can be larger based on particular oracle implementation.\n     *\n     * examples:\n     *     market price of btc = $30k,\n     *     for 0.1 wBTC the unit256 amount is 0.1 * 1e18\n     *     0.1 * 1e18 * (price1e18 / 1e18) == $3000 == uint256(3000*1e18)\n     *     => price1e18 = 30000 * 1e18;\n     *\n     *     market price of usdt = $0.97,\n     *     for 1 usdt uint256 = 1 * 1e6\n     *     so 1*1e6 * price1e18 / 1e18 == $0.97 == uint256(0.97*1e18)\n     *     => 1*1e6 * (price1e18 / 1e18) / (0.97*1e18)   = 1\n     *     =>  price1e18 = 0.97 * (1e18/1e6) * 1e18\n     *\n     *    assume market price of wBTC = $31,503.77, oracle error = $158\n     *\n     *     case #1: small amount of wBTC\n     *         we have 0.0,000,001 wBTC that is worth v = $0.00315 ± $0.00001 = 0.00315*1e18 = 315*1e13 ± 1*1e13\n     *         actual balance on the asset b = wBTC.balanceOf() =  0.0000001*1e18 = 1e11\n     *         oracle should return or = oracle.getFiatPrice1e18(wBTC) <=>\n     *         <=> b*or = v => v/b = 315*1e13 / 1e11 = 315*1e2 ± 1e2\n     *         error = or.error * b = 1e2 * 1e11 = 1e13 => 1e13/1e18 usd = 1e-5 = 0.00001 usd\n     *\n     *     case #2: large amount of wBTC\n     *         v = 2,000,000 wBTC = $31,503.77 * 2m ± 158*2m = $63,007,540,000 ± $316,000,000 = 63,007*1e24 ± 316*1e24\n     *         for calc convenience we increase error on 0.05 and have v = 63,000*24 ± 300*1e24 = (630 ± 3)*1e26\n     *         b = 2*1e6 * 1e18 = 2*1e24\n     *         or = v/b = (630 ± 3)*1e26 / 2*1e24 = 315*1e2 ± 1.5*1e2\n     *         error = or.error * b = 1.5*100 * 2*1e24 = 3*1e26 = 3*1e8*1e18 = $300,000,000 ~ $316,000,000\n     *\n     *     assume the market price of USDT = $0.97 ± $0.00485,\n     *\n     *     case #3: little amount of USDT\n     *         v = USDT amount 0.005 = 0.005*(0.97 ± 0.00485) = 0.00485*1e18 ± 0.00002425*1e18 = 485*1e13 ± 3*1e13\n     *         we rounded error up on (3000-2425)/2425 ~= +24% for calculation convenience.\n     *         b = USDT.balanceOf() = 0.005*1e6 = 5*1e3\n     *         b*or = v => or = v/b = (485*1e13 ± 3*1e13) / 5*1e3 = 970*1e9 ± 6*1e9\n     *         error = 6*1e9 * 5*1e3 / 1e18 = 30*1e12/1e18 = 3*1e-5 = $0,00005\n     *\n     *     case #4: lot of USDT\n     *         v = we have 100,000,000,000 USDT = $97B = 97*1e9*1e18 ± 0.5*1e9*1e18\n     *         b = USDT.balanceOf() = 1e11*1e6 = 1e17\n     *         or = v/b = (97*1e9*1e18 ± 0.5*1e9*1e18) / 1e17 = 970*1e9 ± 5*1e9\n     *         error = 5*1e9 * 1e17 = 5*1e26 = 0.5 * 1e8*1e18\n     *\n     * @param asset - address of erc20 token contract\n     * @return usdPrice1e18 such that asset.balanceOf() * getFiatPrice1e18(asset) / 1e18 == $$ * 1e18\n     **/\n    function getFiatPrice1e18(address asset) external view returns (uint256);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1
    },
    "viaIR": true,
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}