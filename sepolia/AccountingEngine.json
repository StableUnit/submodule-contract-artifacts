{
  "address": "0x66aF2e9e05aB418A32742A0351FCe9F7801F8aA8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "accessControl_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "safeEngine_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "exchange_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "oracle_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "suDAO_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rewardChef_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "stablePro_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "coinJoin_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "BadAccessControlSingleton",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BadModifyParameters",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BadRewardToken",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "BadStablecoin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ContractDisabled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DebtNotZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientDebt",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientSurplus",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughAsh",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAdminError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAlerterError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyCDPAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyDAOError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyDisablerAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyLiquidationAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyMintAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyRewardAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyRoleError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PopDebtDelayNotFinished",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "StablecoinExists",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "StablecoinNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SurplusNotZero",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "DisableContract",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "StableProSwapped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "stablecoin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "StablecoinRefilled",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACCESS_CONTROL_SINGLETON",
      "outputs": [
        {
          "internalType": "contract ISuAccessControl",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ALERTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CDP_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DAO_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DISABLER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIQUIDATION_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINT_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARD_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VOTING_ESCROW_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stablecoin",
          "type": "address"
        }
      ],
      "name": "addWhitelistStablecoin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token2sell",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountToSell",
          "type": "uint256"
        },
        {
          "internalType": "enum DiscountType",
          "name": "discountType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "auctionDebt",
          "type": "uint256"
        }
      ],
      "name": "auctionDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "surplusAmount",
          "type": "uint256"
        },
        {
          "internalType": "enum DiscountType",
          "name": "discountType",
          "type": "uint8"
        }
      ],
      "name": "auctionSurplus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rad",
          "type": "uint256"
        }
      ],
      "name": "cancelAuctionedDebtWithSurplus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "coinJoin",
      "outputs": [
        {
          "internalType": "contract ICoinJoin",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractEnabled",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "debtQueue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultRewardEndBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disableContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "distributeSurplus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchange",
      "outputs": [
        {
          "internalType": "contract IExchange",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getRealStablePro",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stablecoin",
          "type": "address"
        }
      ],
      "name": "hasWhitelistStablecoin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "joinStablePro",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "what",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "data",
          "type": "address"
        }
      ],
      "name": "modifyParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "what",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "data",
          "type": "uint256"
        }
      ],
      "name": "modifyParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "contract ISuOracleAggregator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "popDebtDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "era",
          "type": "uint256"
        }
      ],
      "name": "popDebtFromQueue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountToRaise",
          "type": "uint256"
        }
      ],
      "name": "pushDebtToQueue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stablecoin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "refillStablecoin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stablecoin",
          "type": "address"
        }
      ],
      "name": "removeWhitelistStablecoin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardChef",
      "outputs": [
        {
          "internalType": "contract IRewardChefV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "safeEngine",
      "outputs": [
        {
          "internalType": "contract ISafeEngine",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stablecoin",
          "type": "address"
        }
      ],
      "name": "setStablecoinToSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rad",
          "type": "uint256"
        }
      ],
      "name": "settleDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stablePro",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stablecoinToSwap",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "suDAO",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "surplusBuffer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stablecoinToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stableProAmountE18",
          "type": "uint256"
        }
      ],
      "name": "swapStableProToStablecoin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalOnAuctionDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalQueuedDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "numDeployments": 3,
  "solcInputHash": "99c0a0d9f58fa8279c64246a47fa58ae",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"accessControl_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"safeEngine_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exchange_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"suDAO_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardChef_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stablePro_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"coinJoin_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BadAccessControlSingleton\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BadModifyParameters\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BadRewardToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"BadStablecoin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ContractDisabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DebtNotZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientDebt\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientSurplus\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughAsh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAdminError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAlerterError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyCDPAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyDAOError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyDisablerAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyLiquidationAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyMintAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRewardAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRoleError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PopDebtDelayNotFinished\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"StablecoinExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"StablecoinNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SurplusNotZero\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DisableContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StableProSwapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stablecoin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StablecoinRefilled\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACCESS_CONTROL_SINGLETON\",\"outputs\":[{\"internalType\":\"contract ISuAccessControl\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ALERTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CDP_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAO_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DISABLER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDATION_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VOTING_ESCROW_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stablecoin\",\"type\":\"address\"}],\"name\":\"addWhitelistStablecoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token2sell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToSell\",\"type\":\"uint256\"},{\"internalType\":\"enum DiscountType\",\"name\":\"discountType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"auctionDebt\",\"type\":\"uint256\"}],\"name\":\"auctionDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"surplusAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum DiscountType\",\"name\":\"discountType\",\"type\":\"uint8\"}],\"name\":\"auctionSurplus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rad\",\"type\":\"uint256\"}],\"name\":\"cancelAuctionedDebtWithSurplus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coinJoin\",\"outputs\":[{\"internalType\":\"contract ICoinJoin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractEnabled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"debtQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultRewardEndBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"distributeSurplus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchange\",\"outputs\":[{\"internalType\":\"contract IExchange\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getRealStablePro\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stablecoin\",\"type\":\"address\"}],\"name\":\"hasWhitelistStablecoin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"joinStablePro\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract ISuOracleAggregator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"popDebtDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"era\",\"type\":\"uint256\"}],\"name\":\"popDebtFromQueue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToRaise\",\"type\":\"uint256\"}],\"name\":\"pushDebtToQueue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stablecoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"refillStablecoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stablecoin\",\"type\":\"address\"}],\"name\":\"removeWhitelistStablecoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardChef\",\"outputs\":[{\"internalType\":\"contract IRewardChefV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeEngine\",\"outputs\":[{\"internalType\":\"contract ISafeEngine\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stablecoin\",\"type\":\"address\"}],\"name\":\"setStablecoinToSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rad\",\"type\":\"uint256\"}],\"name\":\"settleDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stablePro\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stablecoinToSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"suDAO\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"surplusBuffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stablecoinToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stableProAmountE18\",\"type\":\"uint256\"}],\"name\":\"swapStableProToStablecoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalOnAuctionDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalQueuedDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"auctionDebt(address,uint256,uint8,uint256)\":{\"details\":\"We can only auction debt that is not already being auctioned and is not locked in the debt queue. Firstly, we should donate token2sell (it's collateral or stablecoin) by refillStablecoin*\"},\"auctionSurplus(uint256,uint8)\":{\"details\":\"We can only auction surplus if we wait at least 'surplusAuctionDelay' seconds since the last      auction trigger, if we keep enough surplus in the buffer and if there is no bad debt to settle*\"},\"cancelAuctionedDebtWithSurplus(uint256)\":{\"params\":{\"rad\":\"Amount of coins/debt to destroy (number with 45 decimals)*\"}},\"disableContract()\":{\"details\":\"When we disable, the contract tries to settle as much debt as possible (if there's any) with any surplus that's left in the system. After erasing debt, the contract will either transfer any remaining surplus right away (if disableCooldown == 0) or will only record the timestamp when it was disabled*\"},\"popDebtFromQueue(uint256)\":{\"params\":{\"era\":\"Timestamp of the block of debt that should be popped out\"}},\"pushDebtToQueue(uint256)\":{\"details\":\"Debt is locked in a queue to give the system enough time to auction collateral      and gather surplus\",\"params\":{\"amountToRaise\":\"Amount of debt to push\"}},\"settleDebt(uint256)\":{\"details\":\"We can only destroy debt that is not locked in the queue and also not in a debt auction\",\"params\":{\"rad\":\"Amount of coins/debt to destroy (number with 45 decimals)*\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addWhitelistStablecoin(address)\":{\"notice\":\"Add new stablecoin to whitelist of stablecoins protocol works with*\"},\"auctionDebt(address,uint256,uint8,uint256)\":{\"notice\":\"Start a debt auction (we have debt = x$, token2sell with value of y$, where y >= x)\"},\"auctionSurplus(uint256,uint8)\":{\"notice\":\"Start a surplus auction\"},\"cancelAuctionedDebtWithSurplus(uint256)\":{\"notice\":\"Use surplus coins to destroy debt that is/was in a debt auction\"},\"disableContract()\":{\"notice\":\"Disable this contract (normally called by Global Settlement)\"},\"distributeSurplus(uint256)\":{\"notice\":\"Admin function to distribute surplus after getting it*\"},\"getRealStablePro(uint256)\":{\"notice\":\"Admin function to get real StablePro tokens instead of records in protocol (= exit from coinJoin)*\"},\"hasWhitelistStablecoin(address)\":{\"notice\":\"Check if give token is in stablecoins whitelist*\"},\"joinStablePro(uint256)\":{\"notice\":\"Admin function to join protocol using real StablePro (= join in coinJoin)*\"},\"popDebtFromQueue(uint256)\":{\"notice\":\"A block of debt can be popped from the queue after popDebtDelay seconds passed since it was         added there\"},\"pushDebtToQueue(uint256)\":{\"notice\":\"Push debt (that the system tries to cover with collateral auctions) to a queue\"},\"refillStablecoin(address,uint256)\":{\"notice\":\"Function to send stablecoin to AccountingEngine contract*\"},\"removeWhitelistStablecoin(address)\":{\"notice\":\"Remove stablecoin from whitelist of stablecoins protocol works with*\"},\"setStablecoinToSwap(address)\":{\"notice\":\"Change var stablecoinToSwap, that is used in liquidation process*\"},\"settleDebt(uint256)\":{\"notice\":\"Destroy an equal amount of coins and debt\"},\"swapStableProToStablecoin(address,uint256)\":{\"notice\":\"Function to swap sender's stablePro to stablecoin that is in whitelist*\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/makerdao/externalContracts/AccountingEngine.sol\":\"AccountingEngine\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\",\"keccak256\":\"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd\",\"license\":\"GPL-2.0-or-later\"},\"contracts/exchange/interfaces/IExchange.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\npragma solidity ^0.8.0;\\n\\nenum DiscountType {\\n    aggressive,\\n    middle,\\n    conservative\\n}\\n\\nstruct Order {\\n    address token2sell;\\n    uint256 amountLeft;\\n    address token2buy;\\n    uint256 token2buyAmount;\\n    address beneficiary;\\n    uint256 creationTimestamp;\\n    DiscountType discountType;\\n    address caller;\\n}\\n\\nstruct OrderWithId {\\n    Order order;\\n    uint256 orderId;\\n}\\n\\ninterface IExchange {\\n    /* ===================== ERRORS ===================== */\\n    error OrderExist(uint256 orderId);\\n    error OrderNotExist(uint256 orderId);\\n    error IncorrectToken(address orderToken2buy, address inToken);\\n    error SmallAmountLeft();\\n    error BadOutAmount();\\n    error UserIsNotBeneficiary();\\n    error IsNotTopStaker(address staker);\\n    error IsNotStaker(address staker);\\n    error OrderNotForThisStaker(uint256 orderId, address staker);\\n    error NotEnoughReturnValue();\\n    error CallbackError();\\n\\n    /* ======================== EVENTS ========================= */\\n    event OrderAdded(uint256 orderId);\\n    event OrderCanceled(uint256 orderId);\\n    event OrderFilled(uint256 orderId);\\n    event OrderFilledPartially(uint256 orderId);\\n    event LpOrdersAdded(address LPToken, uint256[] orderIds);\\n\\n    /* ==================== MUTABLE METHODS ==================== */\\n\\n    /**\\n      * @notice Add order to swap {token2sell} to {token2buy}.\\n      * @dev This swap is async, because depends on how arbitrage bots will fill this order. Emits OrderAdded() event.\\n      * Before addOrder user needs to approve token2sell for exchange contract\\n      * @param token2sell - Address of token to sell\\n      * @param amount2sell - Amount of {token2sell} to sell\\n      * @param token2buy - Address of token to buy\\n      * @param beneficiary - Address that will receive {token2buy} after filling order.\\n      * @param discountType - Speed of decreasing swap price. { 0 - aggressive, 1 - middle, 2 - conservative }\\n      * @param collateralJoin - address of collateral adapter\\n     **/\\n    function addOrder (\\n        address token2sell,\\n        uint256 amount2sell,\\n        address token2buy,\\n        address beneficiary,\\n        DiscountType discountType,\\n        address collateralJoin\\n    ) external returns (uint256);\\n\\n    /**\\n      * @notice Only user who place order or who is beneficiary can cancelOrder();\\n      * @param orderId - Id of order to cancel.\\n     **/\\n    function cancelOrder (uint256 orderId) external;\\n\\n    /**\\n      * @notice Fill order with flash-loan like logic\\n      * @dev Caller contract receive orders {token2sell} and after that his stableunitFillOrderCallback() is called.\\n      * At the end of thi callback contract should send some amount of another token back to Exchange contract.\\n      * @param orderId - Id of order to fill.\\n      * @param inAmount - Amount of {token2sell} to receive\\n      * @param data - encoded data to pass to callback function\\n     **/\\n    function fillOrderAsFlashLoan (\\n        uint256 orderId,\\n        uint256 inAmount,\\n        bytes memory data\\n    ) external returns (uint256 outAmount);\\n\\n    /**\\n      * @notice Function to update price curve - how fast {token2sell} price will decrease/increase\\n      * @param discountType - discount type to change\\n      * @param newPriceCurve - parameters of formula\\n     **/\\n    function setPriceCurve(DiscountType discountType, uint256[2] calldata newPriceCurve) external;\\n\\n    /* ==================== VIEW METHODS ==================== */\\n    /**\\n      * @return The amount of outcome that caller will receive if he will fill {orderId} with {inAmount} of {token2sell}\\n     **/\\n    function getExpectedOrderOutcome (uint256 orderId, uint256 inAmount) external view returns (uint256);\\n\\n    /**\\n      * @return Order with id = {orderId}\\n     **/\\n    function getOrder (uint256 orderId) external view returns (Order memory);\\n\\n    /**\\n      * @return The amount of not full-filled orders\\n     **/\\n    function getOrdersCount () external view returns (uint256);\\n\\n    /**\\n      * @return The array of all not-filled orders. May be deleted after adding GraphQL for orderIds\\n     **/\\n    function getAllOrders (uint256 offset, uint256 limit) external view returns (OrderWithId[] memory);\\n}\\n\",\"keccak256\":\"0x000b0a11ef4c13e58838aae6613d678817a9e32c37f597f4a0aa9e714a47c9e5\",\"license\":\"BSL 1.1\"},\"contracts/interfaces/IRewardChefV2.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"../periphery/contracts/interfaces/oracle/ISuOracle.sol\\\";\\n\\n/**\\n * @title RewardChefV2\\n * @notice fork of MasterChefV2(13/05/2023) https://etherscan.io/address/0xef0881ec094552b2e128cf945ef17a6752b4ec5d#code\\n * @dev This contract is based on MVC2, but uses \\\"virtual\\\" balances instead of storing real ERC20 tokens\\n * and uses address of this assets instead of pid.\\n * Rewards that are distributed have to be deposited using refillReward(uint256 amount, uint64 endBlock)\\n **/\\ninterface IRewardChefV2 {\\n    /**\\n      * @notice Info of each reward pool.\\n      * @param accSushiPerShare -\\n      * @param lastRewardBlock -\\n      * @param allocPoint - The amount of allocation points assigned to the pool.\\n      * Also known as the amount of REWARD_TOKEN to distribute per block.\\n      * @param lpSupply -\\n     **/\\n    struct PoolInfo {\\n        uint128 accSushiPerShare;\\n        uint64 lastRewardBlock;\\n        uint64 allocPoint;\\n        uint256 lpSupply;\\n    }\\n\\n    /**\\n      * @notice Info of each user.\\n      * @param amount - token amount the user has provided.\\n      * @param rewardDebt - The amount of rewards entitled to the user.\\n      * @param multiplicator1e18 - deposit amount multiplicator for current user, that depends on his lockupPeriod\\n      * @param lockupPeriodSeconds - users lockupPeriod in seconds\\n      * @param lockupStartTimestamp - timestamp when user start lockup\\n     **/\\n    struct UserInfo {\\n        uint256 amount;\\n        int256 rewardDebt;\\n\\n        uint256 multiplicator1e18;\\n        uint256 lockupPeriodSeconds;\\n        uint256 lockupStartTimestamp;\\n    }\\n\\n    /**\\n      * @notice Lockup info struct for a view method getPossibleLockupPeriodsSeconds()\\n      * @param lockupPeriodSeconds - available lockupPeriod in seconds\\n      * @param multiplicator1e18 - deposit amount multiplicator for this lockup period\\n     **/\\n    struct ILockupPeriod {\\n        uint256 lockupPeriodSeconds;\\n        uint256 multiplicator1e18;\\n    }\\n\\n    // =======================================EVENTS=============================================\\n    event VirtualDeposit(address indexed user, address indexed asset, uint256 amount);\\n    event VirtualWithdraw(address indexed user, address indexed asset, uint256 amount);\\n    event ResetAmount(\\n        address indexed user, address indexed asset, address indexed to, uint256 amount, uint256 lockupPeriodSeconds\\n    );\\n    event Harvest(address indexed user, address indexed asset, uint256 amount);\\n    event LogPoolAddition(address indexed asset, uint256 allocPoint);\\n    event LogSetPool(address indexed asset, uint256 allocPoint);\\n    event LogUpdatePool(address indexed asset, uint64 lastRewardBlock, uint256 lpSupply, uint256 accSushiPerShare);\\n\\n    // =======================================ERRORS=============================================\\n    error BadEndBlockForRefill();\\n    error ZeroLockupPeriod();\\n    error ZeroMultiplicator();\\n    error PoolExist();\\n    error PoolNotExist();\\n    error DifferentLockup();\\n    error HarvestBeforeLockup();\\n\\n    // =========================================VARS=============================================\\n    /**\\n     *  @dev Total allocation points. Must be the sum of all allocation points in all pools.\\n     * The good practice, to always keep this variable is equal 1000.\\n     */\\n    function totalAllocPoint() external view returns ( uint256 );\\n\\n    // =======================================REWARDER=============================================\\n    // solhint-disable-next-line func-name-mixedcase\\n    function REWARD_TOKEN() external view returns ( IERC20Upgradeable );\\n    // solhint-disable-next-line func-name-mixedcase\\n    function ORACLE() external view returns ( ISuOracle );\\n    function rewardPerBlock() external view returns ( uint256 );\\n    function rewardEndBlock() external view returns ( uint256 );\\n\\n    /**\\n     * @dev admin transfer REWARD_TOKEN to contract to increase rewards per block\\n     */\\n    function refillReward(uint256 amount, uint64 endBlock) external;\\n    /**\\n     * @dev returns total amount of rewards allocated to the all pools on the rage (startBlock, endBlock]\\n     * i.e. excluding startBlock but including endBlock\\n     */\\n    function rewardsBetweenBlocks(uint256 startBlock, uint256 endBlock) external returns ( uint256 );\\n\\n    //=======================================LOCKUP LOGIC===========================================\\n    /**\\n     * @notice view method that return all lockupPeriods in ILockupPeriod struct\\n     */\\n    function getPossibleLockupPeriodsSeconds() external view returns (ILockupPeriod[] memory);\\n\\n    /**\\n     * @notice method to add new LockupPeriods with it multiplicator\\n     * @dev If multiplicator1e18 == 0 => we remove lockupPeriodSeconds else we add it\\n     * @param lockupPeriodSeconds Amount of seconds of lockupPeriod we want to add/remove\\n     * @param multiplicator1e18 Multiplicator for that lockupPeriod\\n     */\\n    function setPossibleLockupPeriodsSeconds(uint256 lockupPeriodSeconds, uint256 multiplicator1e18) external;\\n\\n    //================================CORE REWARD CHEF METHODS======================================\\n    /**\\n     * @notice Add a new reward pool. Can only be called by the admin. Can't add the same LP token more than once.\\n     * @param allocPoint AP of the new pool.\\n     * @param _asset Address of the ERC-20 token.\\n     */\\n    function add(uint256 allocPoint, address _asset) external;\\n\\n    /**\\n     * @notice Update the given pool's REWARD_TOKEN allocation point. Can only be called by the admin.\\n     * Can't be called for asset that was not added by add() function.\\n     * @param _asset Address of the ERC-20 token.\\n     * @param _allocPoint New AP of the pool.\\n     */\\n    function set(address _asset, uint256 _allocPoint) external;\\n\\n    /**\\n     * @notice View function to see pending REWARD_TOKEN on frontend.\\n     * @param _asset Address of the ERC-20 token.\\n     * @param _user Address of user.\\n     * @return pending REWARD_TOKEN reward for a given user.\\n     */\\n    function pendingSushi(address _asset, address _user) external view returns ( uint256 );\\n\\n    /**\\n     * @notice Update reward variables of the given pool.\\n     * @param asset Asset address\\n     * @return updated pool info\\n     */\\n    function updatePool(address asset) external returns ( PoolInfo memory );\\n\\n    /**\\n     * @notice Update reward variables for all pools. Be careful of gas spending!\\n     */\\n    function updateAllPools() external;\\n\\n    /**\\n     * @notice analogues to MCV2 Deposit method, but can be called only by trusted address (onlyRewardAccess)\\n     * that is trusted to honestly calc how many \\\"virtual\\\" tokens have to be allocated for each user.\\n     * @param asset Asset address\\n     * @param to User for whom we will increase the virtual balance\\n     * @param amountEDecimal Quantity without taking into account the multiplier that we will add\\n     * @param lockupPeriodSeconds Current deposit lockup period. Can't increase amount with 2 different lockupPeriods\\n     */\\n    function increaseAmount(address asset, address to, uint256 amountEDecimal, uint256 lockupPeriodSeconds) external;\\n\\n    /**\\n     * @notice Analogues to MVC2 Withdraw method, that can be called only by trusted address (onlyRewardAccess)\\n     * that is trusted to honestly calc how many \\\"virtual\\\" tokens have to be allocated for each user.\\n     * @param asset Asset address\\n     * @param to User for whom we will subtract the virtual balance\\n     * @param amountEDecimal Quantity without taking into account the multiplier that we will subtract\\n     */\\n    function decreaseAmount(address asset, address to, uint256 amountEDecimal) external;\\n\\n    /**\\n     * @notice View method that return penalty for user that will decrease amount by {amountEDecimal}\\n     * @param asset Asset address\\n     * @param to User who will decrease his deposit amount\\n     * @param amountEDecimal Quantity without taking into account the multiplier that we will subtract\\n     */\\n    function getDecreaseAmountRewardPenalty(\\n        address asset,\\n        address to,\\n        uint256 amountEDecimal\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Harvest proceeds for transaction sender to {to}.\\n     * @dev Here we send msg.sender pendingSushi to {to} and update lockup period.\\n     * @param asset Asset address\\n     * @param to Receiver of REWARD_TOKEN rewards.\\n     */\\n    function harvest(address asset, address to, uint256 newLockupPeriodSeconds) external;\\n\\n    // TODO: check for exploits\\n    /**\\n     * @notice Withdraw without caring about rewards. EMERGENCY ONLY.\\n     * @param asset Asset address\\n     * @param to The address of the user whose information will be cleared\\n     */\\n    function resetAmount(address asset, address to) external;\\n\\n    //================================VIEW METHODS======================================\\n    /**\\n     * @notice Method for frontend that return pool APR in base of 1e18\\n     * @param asset Asset address\\n     */\\n    function getPoolApr(address asset) external view returns (uint256);\\n\\n    /**\\n     * @notice Reward tokens can be locked for certain period of time.\\n     * So user have to wait until at least timestamp to be able to harvest them.\\n     * There's no lock or any restriction on withdrawing principle.\\n     * This function return end timestamp for that lock.\\n     * @param asset Asset address\\n     * @param user User address\\n     */\\n    function getHarvestLockupEndTimestamp(address asset, address user) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4a3199fa6d6306f004d1fe0f3fd07c99e731330c63b6d199125a3e55f5ef5d71\",\"license\":\"UNLICENSED\"},\"contracts/makerdao/externalContracts/AccountingEngine.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\n/// AccountingEngine.sol -- StablePro settlement module\\n\\n// Copyright (C) 2018 Rain <rainbreak@riseup.net>\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\n\\nimport {Math} from \\\"../utils/Math.sol\\\";\\nimport \\\"../interfaces/IAccountingEngine.sol\\\";\\nimport \\\"../interfaces/ISafeEngine.sol\\\";\\nimport \\\"../interfaces/ICoinJoin.sol\\\";\\nimport \\\"../../interfaces/IRewardChefV2.sol\\\";\\nimport \\\"../../periphery/contracts/interfaces/oracle/ISuOracle.sol\\\";\\nimport \\\"../../periphery/contracts/access-control/SuAuthenticatedNonUpgradeable.sol\\\";\\nimport \\\"../../periphery/contracts/interfaces/oracle/ISuOracleAggregator.sol\\\";\\n\\n// FIXME: This contract was altered compared to the production version.\\n// It doesn't use LibNote anymore.\\n// New deployments of this contract will need to include custom events (TO DO).\\n\\ncontract AccountingEngine is SuAuthenticatedNonUpgradeable, Math, IAccountingEngine {\\n    // --- Data ---\\n    ISafeEngine public immutable safeEngine;   // CDP Engine\\n    IExchange public exchange;       // Exchange module\\n    ISuOracleAggregator public oracle;         // Oracle\\n    IERC20 public suDAO;             // Protocol governance token\\n    IERC20 public immutable stablePro; // System coin\\n    IRewardChefV2 public rewardChef; // RewardModule\\n    ICoinJoin public coinJoin;       // Adapter to join StablePro\\n\\n    mapping(address => bool) internal stablecoinWhitelist;\\n    address public stablecoinToSwap; // Stablecoin to which the collateral will be exchanged during liquidation\\n\\n    mapping (uint256 => uint256) public debtQueue;  // debt queue\\n    uint256 public totalQueuedDebt;   // Queued debt            [rad]\\n    uint256 public totalOnAuctionDebt;   // On-auction debt        [rad]\\n\\n    uint256 public popDebtDelay;  // DebtAuctionHouse delay             [seconds]\\n\\n    uint256 public surplusBuffer;  // Surplus buffer         [rad]\\n\\n    uint256 public contractEnabled;  // Active Flag\\n\\n    uint256 public defaultRewardEndBlock;  // Active Flag\\n\\n    // --- Init ---\\n    constructor(\\n        address accessControl_,\\n        address safeEngine_,\\n        address exchange_,\\n        address oracle_,\\n        address suDAO_,\\n        address rewardChef_,\\n        address stablePro_,\\n        address coinJoin_\\n    ) SuAuthenticatedNonUpgradeable(accessControl_) public {\\n        safeEngine = ISafeEngine(safeEngine_);\\n        exchange = IExchange(exchange_);\\n        oracle = ISuOracleAggregator(oracle_);\\n        suDAO = IERC20(suDAO_);\\n        stablePro = IERC20(stablePro_);\\n        rewardChef = IRewardChefV2(rewardChef_);\\n        coinJoin = ICoinJoin(coinJoin_);\\n\\n        safeEngine.approveSAFEModification(coinJoin_);\\n        contractEnabled = 1;\\n        defaultRewardEndBlock = 172800; // 1 MONTH\\n\\n        if (rewardChef_ != address(0)) {\\n            suDAO.approve(rewardChef_, type(uint256).max); // to call refillReward\\n        }\\n    }\\n\\n    // --- Administration ---\\n    function modifyParameters(bytes32 what, uint data) external onlyDAO {\\n        if (what == \\\"popDebtDelay\\\") popDebtDelay = data;\\n        else if (what == \\\"surplusBuffer\\\") surplusBuffer = data;\\n        else if (what == \\\"defaultRewardEndBlock\\\") defaultRewardEndBlock = data;\\n        else revert BadModifyParameters();\\n    }\\n\\n    function modifyParameters(bytes32 what, address data) external onlyDAO {\\n        if (what == \\\"exchange\\\") exchange = IExchange(data);\\n        if (what == \\\"oracle\\\") oracle = ISuOracleAggregator(data);\\n        if (what == \\\"suDAO\\\") suDAO = IERC20(suDAO);\\n        if (what == \\\"coinJoin\\\") coinJoin = ICoinJoin(data);\\n        if (what == \\\"rewardChef\\\") {\\n            rewardChef = IRewardChefV2(data);\\n            suDAO.approve(address(rewardChef), type(uint256).max); // to call refillReward\\n        } else revert BadModifyParameters();\\n    }\\n\\n    function pushDebtToQueue(uint amountToRaise) external onlyLiquidationAccess {\\n        debtQueue[block.timestamp] = _add(debtQueue[block.timestamp], amountToRaise);\\n        totalQueuedDebt = _add(totalQueuedDebt, amountToRaise);\\n    }\\n\\n    function popDebtFromQueue(uint era) external {\\n        if (_add(era, popDebtDelay) > block.timestamp) revert PopDebtDelayNotFinished();\\n        totalQueuedDebt = _sub(totalQueuedDebt, debtQueue[era]);\\n        debtQueue[era] = 0;\\n    }\\n\\n    // Debt settlement\\n    function settleDebt(uint rad) external {\\n        if (rad > safeEngine.coinBalance(address(this))) revert InsufficientSurplus();\\n        if (rad > _sub(_sub(safeEngine.debtBalance(address(this)), totalQueuedDebt), totalOnAuctionDebt)) revert InsufficientDebt();\\n        safeEngine.settleDebt(rad);\\n    }\\n\\n    function cancelAuctionedDebtWithSurplus(uint rad) external {\\n        if (rad > totalOnAuctionDebt) revert NotEnoughAsh();\\n        if (rad > safeEngine.coinBalance(address(this))) revert InsufficientSurplus();\\n        totalOnAuctionDebt = _sub(totalOnAuctionDebt, rad);\\n        safeEngine.settleDebt(rad);\\n    }\\n\\n    function auctionDebt(address token2sell, uint256 amountToSell, DiscountType discountType, uint256 auctionDebt) external onlyAdmin returns (uint orderId) {\\n        uint256 sellValue = oracle.getSafeFiatPrice1e18(token2sell) * amountToSell / 1e18;\\n        if (safeEngine.coinBalance(address(this)) != 0) revert SurplusNotZero();\\n\\n        totalOnAuctionDebt = _add(totalOnAuctionDebt, auctionDebt);\\n\\n        orderId = exchange.addOrder(\\n            token2sell, // we want to sell token2sell\\n            amountToSell,\\n            address(stablePro), // token2buy is stablecoin\\n            address(this), // beneficiary is the AccountingEngine itself\\n            discountType, // or whatever discount type you want to use\\n            address(0) // no collateral join, since it's a direct debt sale\\n        );\\n    }\\n\\n    function auctionSurplus(uint256 surplusAmount, DiscountType discountType) external onlyAdmin returns (uint orderId) {\\n        uint256 coinBalance = safeEngine.coinBalance(address(this));\\n        uint256 debtBalance = safeEngine.debtBalance(address(this));\\n        uint256 realBalance = IERC20(stablePro).balanceOf(address(this));\\n        if (\\n            coinBalance < surplusBuffer ||\\n            _add(coinBalance, realBalance * 1e27) < _add(_add(debtBalance, surplusAmount * 1e27), surplusBuffer)\\n        ) revert InsufficientSurplus();\\n        if (_sub(_sub(debtBalance, totalQueuedDebt), totalOnAuctionDebt) != 0) revert DebtNotZero();\\n        // Auction some system coins in return for protocol tokens that are then burnt\\n        orderId = exchange.addOrder(\\n            address(stablePro), // we sell StablePro\\n            surplusAmount,\\n            address(suDAO), // we buy SuDAO (governance token)\\n            address(this), // beneficiary is the AccountingEngine itself\\n            discountType, // or whatever discount type you want to use\\n            address(0) // no collateral join, since it's a direct surplus sale\\n        );\\n        // After filling we can call distributeSurplus();\\n    }\\n\\n    function disableContract() external onlyDisablerAccess {\\n        if (contractEnabled == 0) revert ContractDisabled();\\n        contractEnabled = 0;\\n        totalQueuedDebt = 0;\\n        totalOnAuctionDebt = 0;\\n        safeEngine.settleDebt(min(safeEngine.coinBalance(address(this)), safeEngine.debtBalance(address(this))));\\n    }\\n\\n    // --- Manual functions ---\\n    function joinStablePro(uint256 amount) external onlyAdmin {\\n        totalOnAuctionDebt = totalOnAuctionDebt < amount ? 0 : _sub(totalOnAuctionDebt, amount);\\n        coinJoin.joinNoReward(address(this), amount);\\n    }\\n\\n    function getRealStablePro(uint256 amount) external onlyAdmin {\\n        coinJoin.exitNoReward(address(this), amount);\\n    }\\n\\n    function refillStablecoin(address stablecoin, uint256 amount) external {\\n        TransferHelper.safeTransferFrom(stablecoin, msg.sender, address(this), amount);\\n        emit StablecoinRefilled(stablecoin, amount);\\n    }\\n\\n    function distributeSurplus(uint256 amount) external onlyAdmin {\\n        if (address(rewardChef.REWARD_TOKEN()) != address(suDAO)) revert BadRewardToken();\\n        uint256 rewardBlock = rewardChef.rewardEndBlock();\\n        rewardChef.refillReward(\\n            amount,\\n            rewardBlock > 0 ? uint64(rewardBlock) : uint64(block.number + defaultRewardEndBlock)\\n        );\\n    }\\n\\n    function swapStableProToStablecoin(address stablecoinToken, uint256 stableProAmountE18) public {\\n        if (!stablecoinWhitelist[stablecoinToken]) revert BadStablecoin(stablecoinToken);\\n\\n        uint256 stablecoinAmountEDecimal = stableProAmountE18 * 1e18 / oracle.getFiatPrice1e18(stablecoinToken);\\n\\n        TransferHelper.safeTransferFrom(address(stablePro), msg.sender, address(this), stableProAmountE18);\\n        TransferHelper.safeTransfer(stablecoinToken, msg.sender, stablecoinAmountEDecimal);\\n\\n        emit StableProSwapped(stableProAmountE18);\\n    }\\n\\n    // --- Stablecoin Whitelist ---\\n    function addWhitelistStablecoin(address stablecoin) external onlyDAO {\\n        if (stablecoinWhitelist[stablecoin]) revert StablecoinExists(stablecoin);\\n        stablecoinWhitelist[stablecoin] = true;\\n        TransferHelper.safeApprove(stablecoin, address(exchange), type(uint256).max);\\n    }\\n\\n    function removeWhitelistStablecoin(address stablecoin) external onlyDAO {\\n        if (!stablecoinWhitelist[stablecoin]) revert StablecoinNotExist(stablecoin);\\n        stablecoinWhitelist[stablecoin] = false;\\n        TransferHelper.safeApprove(stablecoin, address(exchange), 0);\\n    }\\n\\n    function hasWhitelistStablecoin(address stablecoin) external view returns (bool) {\\n        return stablecoinWhitelist[stablecoin];\\n    }\\n\\n    function setStablecoinToSwap(address stablecoin) external onlyAdmin {\\n        if (!stablecoinWhitelist[stablecoin]) revert BadStablecoin(stablecoin);\\n        stablecoinToSwap = stablecoin;\\n    }\\n}\\n\",\"keccak256\":\"0x33a779ddfb6203c7daee72272cbdb1429a3b3d24ccec9f266ca45eeece9a380a\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/makerdao/interfaces/IAccountingEngine.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../exchange/interfaces/IExchange.sol\\\";\\n\\n/**\\n * @title IAccountingEngine\\n **/\\ninterface IAccountingEngine {\\n    /* ==================== EVENTS ===============-===== */\\n    event StableProSwapped(uint256 amount);\\n    event DisableContract();\\n    event StablecoinRefilled(address stablecoin, uint256 amount);\\n\\n    /* ==================== ERRORS ===============-===== */\\n    error ContractDisabled();\\n    error BadModifyParameters();\\n    error BadStablecoin(address asset);\\n    error BadRewardToken();\\n    error DebtNotZero();\\n    error SurplusNotZero();\\n    error InsufficientDebt();\\n    error InsufficientSurplus();\\n    error NotEnoughAsh();\\n    error PopDebtDelayNotFinished();\\n    error StablecoinNotExist(address asset);\\n    error StablecoinExists(address asset);\\n\\n    /* ====================== VARS ===================== */\\n\\n    function stablecoinToSwap() external view returns (address);\\n\\n    /* ==================== MUTABLE METHODS ==================== */\\n\\n    /**\\n     * @notice Push debt (that the system tries to cover with collateral auctions) to a queue\\n     * @dev Debt is locked in a queue to give the system enough time to auction collateral\\n     *      and gather surplus\\n     * @param amountToRaise Amount of debt to push\\n     */\\n    function pushDebtToQueue(uint amountToRaise) external;\\n\\n    /**\\n     * @notice A block of debt can be popped from the queue after popDebtDelay seconds passed since it was\\n     *         added there\\n     * @param era Timestamp of the block of debt that should be popped out\\n     */\\n    function popDebtFromQueue(uint era) external;\\n\\n    // Debt settlement\\n    /**\\n     * @notice Destroy an equal amount of coins and debt\\n     * @dev We can only destroy debt that is not locked in the queue and also not in a debt auction\\n     * @param rad Amount of coins/debt to destroy (number with 45 decimals)\\n    **/\\n    function settleDebt(uint rad) external;\\n\\n    /**\\n     * @notice Use surplus coins to destroy debt that is/was in a debt auction\\n     * @param rad Amount of coins/debt to destroy (number with 45 decimals)\\n    **/\\n    function cancelAuctionedDebtWithSurplus(uint rad) external;\\n\\n    /**\\n     * @notice Start a debt auction (we have debt = x$, token2sell with value of y$, where y >= x)\\n     * @dev We can only auction debt that is not already being auctioned and is not locked in the debt queue.\\n     * Firstly, we should donate token2sell (it's collateral or stablecoin) by refillStablecoin\\n    **/\\n    function auctionDebt(\\n        address token2sell,\\n        uint256 amountToSell,\\n        DiscountType discountType,\\n        uint256 auctionDebt\\n    ) external returns (uint orderId);\\n\\n    /**\\n     * @notice Start a surplus auction\\n     * @dev We can only auction surplus if we wait at least 'surplusAuctionDelay' seconds since the last\\n     *      auction trigger, if we keep enough surplus in the buffer and if there is no bad debt to settle\\n    **/\\n    function auctionSurplus(uint256 surplusAmount, DiscountType discountType) external returns (uint orderId);\\n\\n    /**\\n     * @notice Disable this contract (normally called by Global Settlement)\\n     * @dev When we disable, the contract tries to settle as much debt as possible (if there's any) with\\n            any surplus that's left in the system. After erasing debt, the contract will either transfer any\\n            remaining surplus right away (if disableCooldown == 0) or will only record the timestamp when\\n            it was disabled\\n    **/\\n    function disableContract() external;\\n\\n    /* ================= Stablecoin Whitelist ================== */\\n\\n    /**\\n     * @notice Add new stablecoin to whitelist of stablecoins protocol works with\\n    **/\\n    function addWhitelistStablecoin(address stablecoin) external;\\n\\n    /**\\n     * @notice Remove stablecoin from whitelist of stablecoins protocol works with\\n    **/\\n    function removeWhitelistStablecoin(address stablecoin) external;\\n\\n    /**\\n     * @notice Check if give token is in stablecoins whitelist\\n    **/\\n    function hasWhitelistStablecoin(address stablecoin) external view returns (bool);\\n\\n    /**\\n     * @notice Change var stablecoinToSwap, that is used in liquidation process\\n    **/\\n    function setStablecoinToSwap(address stablecoin) external;\\n\\n    /* =================== MANUAL FUNCTIONS ==================== */\\n    /**\\n     * @notice Admin function to join protocol using real StablePro (= join in coinJoin)\\n    **/\\n    function joinStablePro(uint256 amount) external;\\n\\n    /**\\n     * @notice Admin function to get real StablePro tokens instead of records in protocol (= exit from coinJoin)\\n    **/\\n    function getRealStablePro(uint256 amount) external;\\n\\n    /**\\n     * @notice Function to send stablecoin to AccountingEngine contract\\n    **/\\n    function refillStablecoin(address stablecoin, uint256 amount) external;\\n\\n    /**\\n     * @notice Admin function to distribute surplus after getting it\\n    **/\\n    function distributeSurplus(uint256 amount) external;\\n\\n    /**\\n     * @notice Function to swap sender's stablePro to stablecoin that is in whitelist\\n    **/\\n    function swapStableProToStablecoin(address stablecoinToken, uint256 stableProAmountE18) external;\\n}\\n\",\"keccak256\":\"0x076f5e17dc394cc75acd8d6d47acad40feacf9b70d6f87be62aacc466f7a9991\",\"license\":\"UNLICENSED\"},\"contracts/makerdao/interfaces/ICoin.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ICoin is IERC20 {\\n    function mint(address account, uint256 amount) external;\\n    function burn(address account, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x4552a784b9f87c84a4badb298c1d007873304f0f1da6b896defac2df25325f1b\",\"license\":\"UNLICENSED\"},\"contracts/makerdao/interfaces/ICoinJoin.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport {IDisable} from \\\"./IDisable.sol\\\";\\nimport {ICoin} from \\\"./ICoin.sol\\\";\\n\\n/**\\n * @title ITaxCollector\\n **/\\ninterface ICoinJoin is IDisable {\\n    /* ==================== EVENTS ==================== */\\n    event Join(address indexed usr, uint256 wad);\\n    event JoinNoReward(address indexed usr, uint256 wad);\\n    event Exit(address indexed usr, uint256 wad);\\n    event ExitNoReward(address indexed usr, uint256 wad);\\n    event UpdateRewardChef();\\n\\n    /* ====================== VARS ==============-====== */\\n    function systemCoin() external returns (ICoin);\\n\\n    /* ==================== METHODS ==================== */\\n\\n    /**\\n    * @notice Join pegged-coins in the system\\n    * @dev Exited coins have 18 decimals but inside the system they have 45 (rad) decimals.\\n           When we join, the amount (wad) is multiplied by 10**27 (ray)\\n    * @param collateralType Collateral that will be used for borrow\\n    * @param user Account that call borrow/repay function and will receive rewards in RewardChef\\n    * @param cdp Account that will receive the joined coins\\n    * @param wad Amount of external coins to join (18 decimal number)\\n    **/\\n    function join(bytes32 collateralType, address user, address cdp, uint wad) external;\\n\\n    /**\\n    * @notice Simple version of join(). Don't have Rewards, it is useful for our smart-contracts.\\n    * @param cdp Account that will receive the joined coins\\n    * @param wad Amount of external coins to join (18 decimal number)\\n    **/\\n    function joinNoReward(address cdp, uint wad) external;\\n\\n    /**\\n    * @notice Exit pegged-coins from the system and inside 'Coin.sol'\\n    * @dev Inside the system, coins have 45 (rad) decimals but outside they have 18 decimals (wad).\\n           When we exit, we specify a wad amount of coins and then the contract automatically multiplies\\n           wad by 10**27 to move the correct 45 decimal coin amount to this adapter\\n    * @param collateralType Collateral that will be used for repay\\n    * @param user Account that call borrow/repay function and will receive rewards in RewardChef\\n    * @param cdp Account that will receive the exited coins\\n    * @param wad Amount of internal coins to join (18 decimal number that will be multiplied by ray)\\n    **/\\n    function exit(bytes32 collateralType, address user, address cdp, uint wad) external;\\n\\n    /**\\n    * @notice Simple version of exit(). Don't have Rewards, it is useful for our smart-contracts.\\n    * @param cdp Account that will receive the joined coins\\n    * @param wad Amount of external coins to join (18 decimal number)\\n    **/\\n    function exitNoReward(address cdp, uint wad) external;\\n\\n    /**\\n    * @notice We use rewardChef to increaseAmount/decreaseAmount during join and exit,\\n    * so admin should be able to change RewardChef contract's address.\\n    * @param rewardChef New address of RewardChef contract.\\n    **/\\n    function updateRewardChef(address rewardChef) external;\\n\\n    /**\\n    * @notice We need to save mapping of collateralType => collateralAddress to work with RewardChef.\\n    * @param _collateralType Collateral type as bytes32, that we use in our protocol.\\n    * @param _collateralAddress Address of collateral\\n    **/\\n    function initializeCollateralType(bytes32 _collateralType, address _collateralAddress) external;\\n}\\n\",\"keccak256\":\"0x391ab28dba9d5ac4a9715b4a11bde06ee5f01a7c998921f88d5f75871bacb342\",\"license\":\"UNLICENSED\"},\"contracts/makerdao/interfaces/IDisable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\ninterface IDisable {\\n    event DisableContract();\\n\\n    function disableContract() external;\\n}\\n\",\"keccak256\":\"0xcf4b5ac43556af77a174aa3a3a9b51c4fc89b933ef875797650542bf686b8405\",\"license\":\"UNLICENSED\"},\"contracts/makerdao/interfaces/ISafeEngine.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// TODO: check how to operate with license and use one for all contracts\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IDisable.sol\\\";\\n\\n/**\\n * @title SafeEngine\\n * @notice The single source of truth for the Maker Protocol. It contains the accounting system of the core Vault,\\n * Internal StablePro balances, and collateral state. It houses the public interface for Vault management,\\n * allowing safe(= CDP or Vault) owners to adjust their Vault state balances. It also contains the public interface\\n * for Vault fungibility, allowing safe (Vault) owners to transfer, split, and merge Vaults.\\n * Excluding these interfaces, SAFEEngine is accessed through trusted smart contract modules.\\n **/\\ninterface ISafeEngine is IDisable {\\n    /* ==================== METHODS ==================== */\\n\\n    // --- Data ---\\n    struct CollateralType {\\n        uint256 debtAmount;        // Total debt issued for this specific collateral type                          [wad]\\n        uint256 accumulatedRate;   // Accumulator for interest accrued on this collateral type                     [ray]\\n        uint256 debtCeiling;       // Maximum amount of debt that can be generated with this collateral type       [rad]\\n        uint256 debtFloor;         // Minimum amount of debt that must be generated by a CDP using this collateral [rad]\\n        uint256 safetyPrice;       // Floor price at which a CDP is allowed to generate debt                       [ray]\\n        uint256 liquidationRatio;  // Liquidation ratio to calculate safety price                                  [ray]\\n        address collateralAddress; // Address of collateral\\n        uint256 safetyPriceBlockNumber; // Block when safetyPrice was updated\\n    }\\n    struct SAFE {\\n        uint256 lockedCollateral; // Total amount of collateral locked in a SAFE/CDP  [wad]\\n        uint256 generatedDebt;    // Total amount of debt generated by a SAFE/CDP     [wad]\\n    }\\n\\n    // --- VARS ---\\n\\n    function safes(bytes32, address) external view returns (uint, uint);\\n\\n    function collateralTypes(bytes32) external view returns (\\n        uint256 debtAmount,       // [wad]\\n        uint256 accumulatedRate,  // [ray]\\n        uint256 debtCeiling,      // [rad]\\n        uint256 debtFloor,        // [rad]\\n        uint256 safetyPrice,      // [ray]\\n        uint256 liquidationRatio, // [ray]\\n        address collateralAddress,\\n        uint256 safetyPriceBlockNumber\\n);\\n\\n    function tokenCollateral(bytes32, address) external view returns (uint256);\\n\\n    function coinBalance(address) external view returns (uint256);\\n\\n    function debtBalance(address) external view returns (uint256);\\n\\n    function cdpRights(address, address) external view returns (uint256);\\n\\n    function globalDebtCeiling() external view returns (uint256);\\n\\n    function globalDebt() external view returns (uint256);\\n\\n    // --- Auth ---\\n    /**\\n     * @notice Allow an address to modify your CDP.\\n     * For example coinAdapter should be able to modify your CDP to withdraw all correctly.\\n     * @param usr Account to give CDP permissions to\\n     */\\n    function approveSAFEModification(address usr) external;\\n\\n    /**\\n     * @notice Deny an address the rights to modify your CDP\\n     * @param usr Account to give CDP permissions to\\n     */\\n    function denySAFEModification(address usr) external;\\n\\n    // --- Administration ---\\n\\n    function initializeCollateralType(bytes32 collateralType, address collateralAddress) external;\\n    // TODO: check why not to use strings instead of bytes32\\n    /**\\n     * @notice Method to modify some global variables\\n     * @param what - name of variable we want to change\\n     * @param data - new value of this variable\\n     */\\n    function modifyParameters(bytes32 what, uint data) external;\\n    /**\\n     * @notice Method to modify values in struct of collateralTypes\\n     * @param collateralType - collateral type we want to modify (collateralTypes[collateralType])\\n     * @param what - name of variable in struct we want to change\\n     * @param data - new value of this variable\\n     */\\n    function modifyParameters(bytes32 collateralType, bytes32 what, uint data) external;\\n\\n    // --- Fungibility ---\\n    function modifyCollateralBalance(bytes32 collateralType, address usr, int256 wad) external;\\n    function transferCollateral(bytes32 collateralType, address src, address dst, uint256 wad) external;\\n    function transferInternalCoins(address src, address dst, uint256 rad) external;\\n\\n    // --- SafetyPrice Manipulation ---\\n    /**\\n     * @notice Method to update safetyPrice, it's called each time, when function need actual safetyPrice\\n     * @param collateralType - safetyPrice's collateral type we want to update\\n     */\\n    function updateSafetyPrice(bytes32 collateralType) external;\\n\\n    // --- CDP Manipulation ---\\n    /**\\n     * @notice Add/remove collateral or put back/generate more debt in a CDP\\n     * @param collateralType Type of collateral to withdraw/deposit in and from the CDP\\n     * @param cdp Target CDP\\n     * @param collateralSource Account we take collateral from/put collateral into\\n     * @param debtDestination Account from which we credit/debit coins and debt\\n     * @param deltaCollateral Amount of collateral added/extract from the CDP\\n     * @param deltaDebt Amount of debt to generate/repay\\n     */\\n    function modifySAFECollateralization(\\n        bytes32 collateralType,\\n        address cdp,\\n        address collateralSource,\\n        address debtDestination,\\n        int deltaCollateral,\\n        int deltaDebt\\n    ) external;\\n\\n    // --- CDP Fungibility ---\\n    /**\\n     * @notice Transfer collateral and/or debt between CDPs\\n     * @param collateralType Collateral type transferred between CDPs\\n     * @param src Source CDP\\n     * @param dst Destination CDP\\n     * @param deltaCollateral Amount of collateral to take/add into src and give/take from dst\\n     * @param deltaDebt Amount of debt to take/add into src and give/take from dst\\n     */\\n    function transferSAFECollateralAndDebt(\\n        bytes32 collateralType,\\n        address src,\\n        address dst,\\n        int deltaCollateral,\\n        int deltaDebt\\n    ) external;\\n\\n    // --- CDP Confiscation ---\\n    /**\\n     * @notice Normally used by the LiquidationEngine in order to confiscate collateral and\\n       debt from a CDP and give them to someone else\\n     * @param collateralType Collateral type the CDP has locked inside\\n     * @param cdp Target CDP\\n     * @param collateralCounterparty Who we take/give collateral to\\n     * @param debtCounterparty Who we take/give debt to\\n     * @param deltaCollateral Amount of collateral taken/added into the CDP\\n     * @param deltaDebt Amount of debt taken/added into the CDP\\n     */\\n    function confiscateSAFECollateralAndDebt(\\n        bytes32 collateralType,\\n        address cdp,\\n        address collateralCounterparty,\\n        address debtCounterparty,\\n        int deltaCollateral,\\n        int deltaDebt\\n    ) external;\\n\\n    // --- Settlement ---\\n    /**\\n     * @notice Nullify an amount of coins with an equal amount of debt\\n     * @param rad Amount of debt & coins to destroy (expressed as a number with 45 decimals)\\n     */\\n    function settleDebt(uint rad) external;\\n\\n    /**\\n     * @notice Usually called by CoinSavingsAccount in order to create unbacked debt\\n     * @param debtDestination Usually AccountingEngine that can settle decreaseSoldAmount with surplus\\n     * @param coinDestination Usually CoinSavingsAccount who passes the new coins to depositors\\n     * @param rad Amount of debt to create (expressed as a number with 45 decimals)\\n     */\\n    function createUnbackedDebt(address debtDestination, address coinDestination, uint rad) external;\\n\\n    // --- Rates ---\\n    /**\\n     * @notice Usually called by TaxCollector in order to accrue interest on a specific collateral type\\n     * @param collateralType Collateral type we accrue interest for\\n     * @param surplusDst Destination for amount of surplus created by applying the interest rate\\n       to debt created by CDPs with 'collateralType'\\n     * @param accumulatedRate Multiplier applied to the debtAmount in order to calculate the surplus\\n     */\\n    function updateAccumulatedRate(bytes32 collateralType, address surplusDst, int accumulatedRate) external;\\n}\\n\",\"keccak256\":\"0xf7b5850f4e32a440964ccd8b177cbd8ab6667166fe0a3dbbe69dc1a33215fccf\",\"license\":\"UNLICENSED\"},\"contracts/makerdao/utils/Math.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nabstract contract Math {\\n    uint256 constant ONE = 10 ** 27;\\n    uint256 constant WAD = 10 ** 18;\\n\\n    /**\\n    * @notice Calculates the sum of an unsigned integer and a signed integer\\n    * @param  x Unsigned integer\\n    * @param  y Signed integer\\n    * @return z Unsigned sum of `x` and `y`\\n    */\\n    function _add(uint x, int y) internal pure returns (uint z) {\\n        if (y >= 0) {\\n            z = x + uint256(y);\\n        } else {\\n            z = x - uint256(-y);\\n        }\\n        require(y >= 0 || z <= x);\\n        require(y <= 0 || z >= x);\\n    }\\n\\n    /**\\n    * @notice Calculates the substraction of an unsigned integer and a signed integer\\n    * @param  x Unsigned integer\\n    * @param  y Signed integer\\n    * @return z Unsigned substraction of `x` and `y`\\n    */\\n    function _sub(uint x, int y) internal pure returns (uint z) {\\n        if (y >= 0) {\\n            z = x - uint256(y);\\n        } else {\\n            z = x + uint256(-y);\\n        }\\n        require(y <= 0 || z <= x);\\n        require(y >= 0 || z >= x);\\n    }\\n    function _mul(uint x, int y) internal pure returns (int z) {\\n        z = int(x) * y;\\n        require(int(x) >= 0);\\n        require(y == 0 || z / y == int(x));\\n    }\\n\\n    function _rdiv(uint x, uint y) internal pure returns (uint z) {\\n        z = _mul(x, ONE) / y;\\n    }\\n\\n    function _add(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x + y) >= x);\\n    }\\n    function _sub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) <= x);\\n    }\\n    function _mul(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x);\\n    }\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x <= y ? x : y;\\n    }\\n\\n    function either(bool x, bool y) internal pure returns (bool z) {\\n        assembly{ z := or(x, y)}\\n    }\\n    function both(bool x, bool y) internal pure returns (bool z) {\\n        assembly{ z := and(x, y)}\\n    }\\n}\\n\",\"keccak256\":\"0xd2215ec58e4792d9e68d66f17c0181e4931fd83dc4f4a433d727978997e4ba24\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/periphery/contracts/access-control/SuAccessRoles.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title SuAccessRoles Library\\n * @dev SuAuthenticated and SuAccessControlSingleton need to have this constants\\n * Hierarchy:\\n *      1. DAO - can give admins and system roles\\n *      2.1. Admin - can set Alerters\\n *      2.2. System - includes Minter, Liquidation, Reward and Disabler roles, don't have access to give some roles.\\n *      3. Alerter - can send alerts and trigger rate limits, don't have access to give some roles.\\n */\\nabstract contract SuAccessRoles {\\n    bytes32 public constant ADMIN_ROLE = 0x00;\\n\\n    bytes32 public constant DAO_ROLE = keccak256(\\\"DAO_ROLE\\\");\\n\\n    bytes32 public constant ALERTER_ROLE = keccak256(\\\"ALERTER_ROLE\\\");\\n\\n    // system roles\\n    bytes32 public constant MINT_ACCESS_ROLE = keccak256(\\\"MINT_ACCESS_ROLE\\\");\\n    bytes32 public constant LIQUIDATION_ACCESS_ROLE = keccak256(\\\"LIQUIDATION_ACCESS_ROLE\\\");\\n    bytes32 public constant REWARD_ACCESS_ROLE = keccak256(\\\"REWARD_ACCESS_ROLE\\\");\\n    // bytes32 public constant SYSTEM_ROLE = keccak256(\\\"SYSTEM_ROLE\\\");\\n    bytes32 public constant DISABLER_ROLE = keccak256(\\\"DISABLER_ROLE\\\");\\n    bytes32 public constant CDP_ACCESS_ROLE = keccak256(\\\"CDP_ACCESS_ROLE\\\");\\n    bytes32 public constant VOTING_ESCROW_ROLE = keccak256(\\\"VOTING_ESCROW_ROLE\\\");\\n}\\n\",\"keccak256\":\"0xce66cbb527d3a8e1e5c437ad1546283b02abca7bf6ab7aefb73d81913c6977f3\",\"license\":\"BSL 1.1\"},\"contracts/periphery/contracts/access-control/SuAuthenticatedNonUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/access-control/ISuAccessControl.sol\\\";\\nimport \\\"./SuAccessRoles.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title SuAuthenticated\\n * @dev other contracts should inherit to be authenticated.\\n * The address of SuAccessControlSingleton should be one for all contract that inherits SuAuthenticated\\n */\\nabstract contract SuAuthenticatedNonUpgradeable is SuAccessRoles, IERC165 {\\n    ISuAccessControl public ACCESS_CONTROL_SINGLETON;\\n\\n    error OnlyDAOError();\\n    error OnlyAdminError();\\n    error OnlyAlerterError();\\n    error OnlyLiquidationAccessError();\\n    error OnlyMintAccessError();\\n    error OnlyRewardAccessError();\\n    error OnlyDisablerAccessError();\\n    error OnlyRoleError();\\n    error OnlyCDPAccessError();\\n    error BadAccessControlSingleton();\\n\\n    constructor (address _accessControlSingleton) internal {\\n        ACCESS_CONTROL_SINGLETON = ISuAccessControl(_accessControlSingleton);\\n        if (\\n            !ISuAccessControl(_accessControlSingleton).supportsInterface(type(IAccessControlUpgradeable).interfaceId)\\n        ) revert BadAccessControlSingleton();\\n    }\\n\\n    /** CORE ROLES */\\n\\n    modifier onlyDAO() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(DAO_ROLE, msg.sender)) revert OnlyDAOError();\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(ADMIN_ROLE, msg.sender)) revert OnlyAdminError();\\n        _;\\n    }\\n\\n    modifier onlyAlerter() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(ALERTER_ROLE, msg.sender)) revert OnlyAlerterError();\\n        _;\\n    }\\n\\n    /** SYSTEM ROLES */\\n\\n    modifier onlyLiquidationAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(LIQUIDATION_ACCESS_ROLE, msg.sender)) revert OnlyLiquidationAccessError();\\n        _;\\n    }\\n\\n    modifier onlyMintAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(MINT_ACCESS_ROLE, msg.sender)) revert OnlyMintAccessError();\\n        _;\\n    }\\n\\n    modifier onlyRewardAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(REWARD_ACCESS_ROLE, msg.sender)) revert OnlyRewardAccessError();\\n        _;\\n    }\\n\\n    // @notice This modifier check if user/contract have access to \\\"disable\\\" contracts.\\n    // All main contracts in our lending protocol have disableContract() method that stops contracts main functions.\\n    modifier onlyDisablerAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(DISABLER_ROLE, msg.sender)) revert OnlyDisablerAccessError();\\n        _;\\n    }\\n\\n    modifier onlyCDPAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(CDP_ACCESS_ROLE, msg.sender)) revert OnlyCDPAccessError();\\n        _;\\n    }\\n\\n    // syntax sugar under ACCESS_CONTROL_SINGLETON\\n    modifier onlyRole(bytes32 role) {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(role, msg.sender)) revert OnlyRoleError();\\n        _;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return ACCESS_CONTROL_SINGLETON.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x9d69a9879d0481ec7acaab47aa9edb73ef00acdca50d5a2fbeb5489e060e3a84\",\"license\":\"BSL 1.1\"},\"contracts/periphery/contracts/interfaces/access-control/ISuAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\nimport \\\"../../access-control/SuAccessRoles.sol\\\";\\n\\n/**\\n * @notice Access control for contracts\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n **/\\ninterface ISuAccessControl is IAccessControlUpgradeable, IERC165Upgradeable {\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\\n}\\n\",\"keccak256\":\"0x25724ac502fd6418ccd38273b276de4b2fdecd023d723c5d80c9f0a27c407bcd\",\"license\":\"MIT\"},\"contracts/periphery/contracts/interfaces/oracle/ISuOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\n// solhint-disable compiler-version\\npragma solidity >=0.7.6;\\n\\ninterface ISuOracle {\\n    /**\\n     * @notice WARNING! Read this description very carefully!\\n     *     function getFiatPrice1e18(address asset) returns (uint256) that:\\n     *         basicAmountOfAsset * getFiatPrice1e18(asset) / 1e18 === $$ * 1e18\\n     *     in other words, it doesn't matter what's the erc20.decimals is,\\n     *     you just multiply token balance in basic units on value from oracle and get dollar amount multiplied on 1e18.\\n     *\\n     * different assets have different deviation threshold (errors)\\n     *     for wBTC it's <= 0.5%, read more https://data.chain.link/ethereum/mainnet/crypto-usd/btc-usd\\n     *     for other asset is can be larger based on particular oracle implementation.\\n     *\\n     * examples:\\n     *     market price of btc = $30k,\\n     *     for 0.1 wBTC the unit256 amount is 0.1 * 1e18\\n     *     0.1 * 1e18 * (price1e18 / 1e18) == $3000 == uint256(3000*1e18)\\n     *     => price1e18 = 30000 * 1e18;\\n     *\\n     *     market price of usdt = $0.97,\\n     *     for 1 usdt uint256 = 1 * 1e6\\n     *     so 1*1e6 * price1e18 / 1e18 == $0.97 == uint256(0.97*1e18)\\n     *     => 1*1e6 * (price1e18 / 1e18) / (0.97*1e18)   = 1\\n     *     =>  price1e18 = 0.97 * (1e18/1e6) * 1e18\\n     *\\n     *    assume market price of wBTC = $31,503.77, oracle error = $158\\n     *\\n     *     case #1: small amount of wBTC\\n     *         we have 0.0,000,001 wBTC that is worth v = $0.00315 \\u00b1 $0.00001 = 0.00315*1e18 = 315*1e13 \\u00b1 1*1e13\\n     *         actual balance on the asset b = wBTC.balanceOf() =  0.0000001*1e18 = 1e11\\n     *         oracle should return or = oracle.getFiatPrice1e18(wBTC) <=>\\n     *         <=> b*or = v => v/b = 315*1e13 / 1e11 = 315*1e2 \\u00b1 1e2\\n     *         error = or.error * b = 1e2 * 1e11 = 1e13 => 1e13/1e18 usd = 1e-5 = 0.00001 usd\\n     *\\n     *     case #2: large amount of wBTC\\n     *         v = 2,000,000 wBTC = $31,503.77 * 2m \\u00b1 158*2m = $63,007,540,000 \\u00b1 $316,000,000 = 63,007*1e24 \\u00b1 316*1e24\\n     *         for calc convenience we increase error on 0.05 and have v = 63,000*24 \\u00b1 300*1e24 = (630 \\u00b1 3)*1e26\\n     *         b = 2*1e6 * 1e18 = 2*1e24\\n     *         or = v/b = (630 \\u00b1 3)*1e26 / 2*1e24 = 315*1e2 \\u00b1 1.5*1e2\\n     *         error = or.error * b = 1.5*100 * 2*1e24 = 3*1e26 = 3*1e8*1e18 = $300,000,000 ~ $316,000,000\\n     *\\n     *     assume the market price of USDT = $0.97 \\u00b1 $0.00485,\\n     *\\n     *     case #3: little amount of USDT\\n     *         v = USDT amount 0.005 = 0.005*(0.97 \\u00b1 0.00485) = 0.00485*1e18 \\u00b1 0.00002425*1e18 = 485*1e13 \\u00b1 3*1e13\\n     *         we rounded error up on (3000-2425)/2425 ~= +24% for calculation convenience.\\n     *         b = USDT.balanceOf() = 0.005*1e6 = 5*1e3\\n     *         b*or = v => or = v/b = (485*1e13 \\u00b1 3*1e13) / 5*1e3 = 970*1e9 \\u00b1 6*1e9\\n     *         error = 6*1e9 * 5*1e3 / 1e18 = 30*1e12/1e18 = 3*1e-5 = $0,00005\\n     *\\n     *     case #4: lot of USDT\\n     *         v = we have 100,000,000,000 USDT = $97B = 97*1e9*1e18 \\u00b1 0.5*1e9*1e18\\n     *         b = USDT.balanceOf() = 1e11*1e6 = 1e17\\n     *         or = v/b = (97*1e9*1e18 \\u00b1 0.5*1e9*1e18) / 1e17 = 970*1e9 \\u00b1 5*1e9\\n     *         error = 5*1e9 * 1e17 = 5*1e26 = 0.5 * 1e8*1e18\\n     *\\n     * @param asset - address of erc20 token contract\\n     * @return usdPrice1e18 such that asset.balanceOf() * getFiatPrice1e18(asset) / 1e18 == $$ * 1e18\\n     **/\\n    function getFiatPrice1e18(address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa56b9cc86ef5935efecc276e6a3188d518f1a99cad960083a8de35849c997687\",\"license\":\"UNLICENSED\"},\"contracts/periphery/contracts/interfaces/oracle/ISuOracleAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ISuOracle.sol\\\";\\n\\ninterface ISuOracleAggregator is ISuOracle {\\n    /* ===================== STRUCT ===================== */\\n    struct AssetLimitation {\\n        uint256 lowerBound;\\n        uint256 upperBound;\\n    }\\n\\n    /* ===================== EVENTS ===================== */\\n    event OracleLowerBoundWarning(uint256 price);\\n    event OracleUpperBoundWarning(uint256 price);\\n\\n    /* ===================== ERRORS ===================== */\\n    error NoOracleFound(address asset);\\n    error NoOracleImplementation();\\n    error BadOracleId();\\n\\n    /* ====================== VARS ====================== */\\n    function assetToOracle (address asset) external view returns ( uint256 );\\n    function oracleImplementations (uint256 oracleId) external view returns ( ISuOracle );\\n\\n    /* ==================== METHODS ==================== */\\n\\n    /**\\n    * @notice Like getFiatPrice1e18 from ISuOracle, but also checks bounds and emit event if there is an error.\\n    * We should call it in non-view method where we need safePrice from Oracle.\\n    * @param asset - address of asset\\n    **/\\n    function getSafeFiatPrice1e18(address asset) external returns (uint256);\\n\\n    /**\\n    * @notice Change lower bound of asset\\n    * @param asset - address of asset\\n    * @param newLowerBound - new value of lower bound\\n    **/\\n    function setLowerBound(address asset, uint256 newLowerBound) external;\\n\\n    /**\\n    * @notice Change upper bound of asset\\n    * @param asset - address of asset\\n    * @param newUpperBound - new value of upper bound\\n    **/\\n    function setUpperBound(address asset, uint256 newUpperBound) external;\\n\\n    /**\\n       * @notice assign address of oracle implementation to the oracleId\\n    * @param oracleId - number 0,1, etc to assign the oracle\\n    * @param oracleImplementation - an address with ISuOracle implementation contract\\n    **/\\n    function setOracleImplementation(uint256 oracleId, ISuOracle oracleImplementation) external;\\n\\n    /**\\n    * @notice specify what oracleId should be used for each assets. Checks that oracleId has an implementation\\n    **/\\n    function setOracleIdForAssets(address[] memory assets, uint256 oracleId) external;\\n\\n    /* ==================== VIEW METHODS ==================== */\\n    /**\\n    * @return true if oracle is set to this asset, false otherwise\\n    **/\\n    function hasPriceForAsset(address asset) external view returns(bool);\\n}\\n\",\"keccak256\":\"0x9e9f77c54257263b4caa12a57fcc53e970df3a07fa1ae18559b243f21c827a9f\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60c060409080825234620002f35760009061010081620025058038038091620000298285620002f8565b833981010312620002ef576200003f8162000332565b602092906200005083850162000332565b926200005e86820162000332565b6200006c6060830162000332565b946200007b6080840162000332565b926200008a60a0820162000332565b906200009960c0820162000332565b9060e001620000a89062000332565b87546001600160a01b039788166001600160a01b031991821681178a558c516301ffc9a760e01b8152637965db0b60e01b6004808301919091529b93989296929392918d908290815a91602492fa908115620002e5578b91620002c3575b5015620002b35792888095938180969481808097169b8c608052168a600154161760015516886002541617600255168660035416176003551660a052169384838954161788551680916005541617600555813b15620002af578491602483928a519485938492631b29a84160e31b84528b8401525af18015620002a55762000276575b506001600d556202a300600e5580620001f6575b85516121a390816200036282396080518181816103a201528181610d1301528181610f88015281816112b301528181611a460152611bd1015260a051818181610418015281816108c801528181610d89015261164d0152f35b604485926003541694848851968794859363095ea7b360e01b855284015260001960248401525af19081156200026b575062000236575b8080806200019d565b816200025a92903d1062000263575b620002518183620002f8565b81019062000347565b5038806200022d565b503d62000245565b8451903d90823e3d90fd5b9092906001600160401b03811162000292578652913862000189565b634e487b7160e01b825260418552602482fd5b87513d86823e3d90fd5b8480fd5b8c516384d942fd60e01b81528b90fd5b620002de91508d803d106200026357620002518183620002f8565b3862000106565b8e513d8d823e3d90fd5b5080fd5b600080fd5b601f909101601f19168101906001600160401b038211908210176200031c57604052565b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b0382168203620002f357565b90816020910312620002f357518015158103620002f3579056fe6080604081815260048036101561001557600080fd5b600092833560e01c90816301ffc9a714611e3a57508063038a3e2f14611d5e57806303ee9f2214611d365780630f44d6bd14611d1757806327a0bb3314611ba95780632a608d5b14611b8a5780632d09f11d14611b6b57806330413a2a14611b425780633977a31914611b1b5780633dc4ab1d14611a115780633fec7e46146119e857806341b3a0d9146119c9578063438280dd1461198e5780634a9afc5b146117cc5780635221e882146117ad578063550a1e00146115a55780635d49502b146114cc5780636614f010146112e257806367aea3131461129e57806371d0fb411461126357806375b238fc146112485780637ae8b2e11461114c5780637dc0d1d014611123578063887e2a4a146110fa578063894ba83314610f065780638b24dc3e14610e9c5780638e5313e014610e615780639d32526814610c4a578063a8b30a9f14610b75578063bd5f5be614610b3a578063c9bc438414610b13578063d09a79dd14610984578063d0e8fa8214610949578063d2351cee14610920578063d2f7265a146108f7578063d46e50d0146108b3578063d5070076146107bc578063d65e861d1461079d578063dc97e84e14610774578063de51eefd14610736578063e9c265181461070d578063e9de2c3f146106ae578063ed9ac368146103285763fe4f58901461020757600080fd5b34610324578160031936011261032457803591602435926044602060018060a01b03875416845192838092632474521560e21b825260008051602061210e833981519152898301523360248301525afa90811561031a5786916102ec575b50156102de576b706f704465627444656c617960a01b810361028b57505050600b555b80f35b6c39bab938363ab9a13ab33332b960991b81036102ab57505050600c5580f35b7464656661756c74526577617264456e64426c6f636b60581b036102d1575050600e5580f35b51634f7c191f60e01b8152fd5b505163599a6c3360e11b8152fd5b61030d915060203d8111610313575b6103058183611f23565b810190611f46565b38610265565b503d6102fb565b83513d88823e3d90fd5b8280fd5b509190346106aa57806003193601126106aa576024928335813560038210156106a65760018060a01b0390818654169685518098632474521560e21b82528887830152338383015281604460209b8c935afa90811561069c57889161067f575b501561066f578551633eaf7a0360e21b81523086820152907f0000000000000000000000000000000000000000000000000000000000000000841689838381845afa92831561063457908a918a9461063e575b509082918951938480926311005b0760e01b8252308c8301525afa918215610634578992610605575b5087516370a0823160e01b815230888201527f00000000000000000000000000000000000000000000000000000000000000008616938b828481885afa9182156105fb578b926105cc575b50600c549182821093841561052b575b5050505061051b576104776104809160095490612100565b600a5490612100565b61050b57908683926104b48a969560015416946003541695895198899788968795633bcce46f60e21b875230938701611f79565b03925af192831561050057926104cc575b5051908152f35b9091508281813d83116104f9575b6104e48183611f23565b810103126104f4575190386104c5565b600080fd5b503d6104da565b8251903d90823e3d90fd5b85516312bf4cab60e01b81528590fd5b86516394290ab960e01b81528690fd5b9293509091676765c793fa10079d601b1b91828102908015908204841417156105ba5761055890846120dd565b9283106105b6578187029187830414871517156105a5575061057a90846120dd565b918383106105a15761058c90836120dd565b91821061059d57103880808061045f565b8980fd5b8a80fd5b634e487b7160e01b8c5260118a528bfd5b8b80fd5b50634e487b7160e01b8c5260118a528bfd5b9091508b81813d83116105f4575b6105e48183611f23565b810103126104f45751903861044f565b503d6105da565b8a513d8d823e3d90fd5b9091508981813d831161062d575b61061d8183611f23565b810103126104f457519038610404565b503d610613565b88513d8b823e3d90fd5b8281939295503d8311610668575b6106568183611f23565b810103126104f45751918990826103db565b503d61064c565b8551631886ea7d60e11b81528590fd5b6106969150893d8b11610313576103058183611f23565b38610388565b87513d8a823e3d90fd5b8480fd5b5080fd5b5050346106aa57806003193601126106aa577f2cb31b7cd23f5e7810b379525524ddf0fdf14cab7855eff4507f490a268ce016906106ea611ec9565b610707602435926106fd84303386612010565b5192839283611f5e565b0390a180f35b5050346106aa57816003193601126106aa576020905160008051602061210e8339815191528152f35b5050346106aa5760203660031901126106aa5760209160ff9082906001600160a01b03610761611ec9565b1681526006855220541690519015158152f35b5050346106aa57816003193601126106aa576020905160008051602061212e8339815191528152f35b5050346106aa57816003193601126106aa57602090600e549051908152f35b508290346106aa5760203660031901126106aa5781548351632474521560e21b81528281018490523360248201526001600160a01b0394916020908290604490829089165afa9081156108a957849161088b575b501561087e57829360055416803b15610879578151633bccb9b760e21b8152928491849182908490829061084a9080359030908401611f5e565b03925af1908115610870575061085d5750f35b61086690611edf565b61086d5780f35b80fd5b513d84823e3d90fd5b505050fd5b51631886ea7d60e11b8152fd5b6108a3915060203d8111610313576103058183611f23565b85610810565b82513d86823e3d90fd5b5050346106aa57816003193601126106aa57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5050346106aa57816003193601126106aa5760015490516001600160a01b039091168152602090f35b5050346106aa57816003193601126106aa576020905160008051602061214e8339815191528152f35b5050346106aa57816003193601126106aa57602090517f76d0567582f23e1e9d7a13eeba60f9aea9d69b8da87ca27a8bf3698b35c653db8152f35b5090346103245760209081600319360112610b0f576109a1611ec9565b84548251632474521560e21b815260008051602061210e833981519152868201523360248201526001600160a01b039185908290604490829086165afa908115610b05578791610ae8575b5015610ad8578082168087526006855260ff8488205416610ac25791600092918392885260068652848820600160ff19825416179055600154168285518781019263095ea7b360e01b845260248201528119604482015260448152610a5081611f08565b51925af1610a5c611fd1565b81610a92575b5015610a6c578380f35b5162461bcd60e51b8152918201526002602482015261534160f01b604482015260649150fd5b80518015925084908315610aaa575b50505038610a62565b610aba9350820181019101611f46565b388381610aa1565b8560249185519163c05cbd9360e01b8352820152fd5b825163599a6c3360e11b81528590fd5b610aff9150853d8711610313576103058183611f23565b386109ec565b84513d89823e3d90fd5b8380fd5b50346103245782600319360112610324575490516001600160a01b03909116815260209150f35b5050346106aa57816003193601126106aa57602090517f4f14c8366fa999817edc9f29824eb88a00cc31225e2156f399da4bc91049eb108152f35b5090346103245760209081600319360112610b0f5783548151632474521560e21b815260008051602061212e83398151915281860152336024820152843594918490829060449082906001600160a01b03165afa90811561031a578691610c2d575b5015610c1f5750428452600882528084205491610bf484846120dd565b9283106106a65760089042865252832055610c1260095491826120dd565b9081106106aa5760095580f35b905163200ab6d960e01b8152fd5b610c449150843d8611610313576103058183611f23565b38610bd7565b509190346106aa5760803660031901126106aa57610c66611ec9565b926024359060443560038110156106a65760018060a01b0392838654169685518098632474521560e21b8252888683015233602483015281604460209b8c935afa90811561069c578891610e44575b5015610e3457868886600254166024895180948193632a5001c960e01b83528b88168b8401525af190811561069c578891610e07575b508083810204831490151715610df2578551633eaf7a0360e21b8152308582015288816024817f00000000000000000000000000000000000000000000000000000000000000008a165afa90811561069c578891610dc5575b50610db557600a54610d58606435826120dd565b908110610db15788949392918891600a556104b4876001541694895198899788968795633bcce46f60e21b875230937f000000000000000000000000000000000000000000000000000000000000000016928701611f79565b8780fd5b855163e9f0635560e01b81528490fd5b90508881813d8311610deb575b610ddc8183611f23565b810103126104f4575138610d44565b503d610dd2565b601184634e487b7160e01b6000525260246000fd5b90508881813d8311610e2d575b610e1e8183611f23565b810103126104f4575138610ceb565b503d610e14565b8551631886ea7d60e11b81528490fd5b610e5b9150893d8b11610313576103058183611f23565b38610cb5565b5050346106aa57816003193601126106aa57602090517fe453bacb314e78dcd5192e6b1a2b1f0e7c76e92f6b7e429a6a90f04e39db3b768152f35b509190346106aa5760203660031901126106aa578235610ebe600b54826120dd565b818110610b0f574210610ef657829350610ee660095482855260086020528385205490612100565b6009558252600860205281205580f35b81516306932a5360e11b81528490fd5b509190346106aa57816003193601126106aa5781548151632474521560e21b815260008051602061214e83398151915285820152336024820152602092916001600160a01b03919084908290604490829086165afa9081156110f05785916110d3575b50156110c357600d54156110b35793839484600d558460095584600a557f00000000000000000000000000000000000000000000000000000000000000001692825190633eaf7a0360e21b825230838301528082602481885afa9182156110a9578692611077575b5083516311005b0760e01b815230848201528181602481895afa91821561106d57879261103c575b505080821161103557505b833b156106a6576024859283855196879485936327a0bb3360e01b85528401525af1908115610870575061085d5750f35b9050611004565b8197508092503d8311611066575b6110548183611f23565b810103126104f4578594513880610ff9565b503d61104a565b85513d89823e3d90fd5b809650818093503d83116110a2575b6110908183611f23565b810103126104f4578594519038610fd1565b503d611086565b84513d88823e3d90fd5b81516303b14e6560e51b81528590fd5b815163bb0684b760e01b81528590fd5b6110ea9150843d8611610313576103058183611f23565b38610f69565b83513d87823e3d90fd5b5050346106aa57816003193601126106aa5760035490516001600160a01b039091168152602090f35b5050346106aa57816003193601126106aa5760025490516001600160a01b039091168152602090f35b5090346103245760209081600319360112610b0f57611169611ec9565b84548251632474521560e21b815260008051602061210e833981519152868201523360248201526001600160a01b039185908290604490829086165afa908115610b0557879161122b575b5015610ad8578082168087526006855260ff848820541615611215579160009291839288526006865284882060ff198154169055600154168285518781019263095ea7b360e01b8452602482015281604482015260448152610a5081611f08565b8560249185519163052bb4dd60e01b8352820152fd5b6112429150853d8711610313576103058183611f23565b386111b4565b5050346106aa57816003193601126106aa5751908152602090f35b5050346106aa57816003193601126106aa57602090517f880a91047114272656e533301261260c75e4d11543ac7303d6fe4204579ec7278152f35b5050346106aa57816003193601126106aa57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50346103245781600319360112610324578035916001600160a01b0360243581811693908490036104f457818654169483518096632474521560e21b825260008051602061210e833981519152848301523360248301528160446020998a935afa9081156114c25788916114a5575b5015611496576765786368616e676560c01b811461147f575b656f7261636c6560d01b8114611468575b64737544414f60d81b811461144e575b6731b7b4b72537b4b760c11b8114611437575b693932bbb0b93221b432b360b11b036114295780546001600160a01b0319811685178255600354845163095ea7b360e01b8152918816909517918101919091526000196024820152928491849160449183918991165af1908115611420575061140657505080f35b8161141c92903d10610313576103058183611f23565b5080f35b513d85823e3d90fd5b8251634f7c191f60e01b8152fd5b600580546001600160a01b0319168617905561139e565b600380546001600160a01b0319811690851617905561138b565b600280546001600160a01b0319168617905561137b565b600180546001600160a01b0319168617905561136a565b50825163599a6c3360e11b8152fd5b6114bc9150873d8911610313576103058183611f23565b38611351565b85513d8a823e3d90fd5b509190346106aa5760203660031901126106aa5782359060018060a01b036044602082865416845192838092632474521560e21b8252898b8301523360248301525afa9081156110f0578591611587575b501561157757938394600a5484808210600014611569575050845b600a556005541692833b156106a65761084a9385928385518097819582946312db6f5f60e01b845230908401611f5e565b61157291612100565b611538565b8151631886ea7d60e11b81528590fd5b61159f915060203d8111610313576103058183611f23565b3861151d565b508290346106aa57826003193601126106aa576115c0611ec9565b9060249081359160018060a01b0393848116948587526020956006875260ff89892054161561179857670de0b6b3a7640000918287029287840414871517156117865787816002541692868c5180958193631735856760e31b83528b8301525afa91821561177c57899261174d575b50811561173957918861168f61169d8296946116728b8598309033907f000000000000000000000000000000000000000000000000000000000000000016612010565b8d519283918d83019663a9059cbb60e01b885204338b8401611f5e565b03601f198101835282611f23565b51925af16116a9611fd1565b81611709575b50156116e25750507f062234b32cab33fa5bcd957e318141fefab38cc79f25ec5b972be8392e98cb6c929351908152a180f35b855162461bcd60e51b81529182018490526002908201526114d560f21b6044820152606490fd5b80518015925086908315611721575b505050876116af565b6117319350820181019101611f46565b878581611718565b84601287634e487b7160e01b600052526000fd5b9091508781813d8311611775575b6117658183611f23565b810103126104f45751908a61162f565b503d61175b565b8a513d8b823e3d90fd5b634e487b7160e01b8952601186528489fd5b8484918a5191633935d9fb60e21b8352820152fd5b5050346106aa57816003193601126106aa57602090600b549051908152f35b509190346106aa57602090816003193601126103245782548151632474521560e21b81528581018590523360248201526001600160a01b03939182908290604490829088165afa9081156110f0578591611971575b501561157757845482516399248ea760e01b81529084169382828881885afa9182156110a9578692611935575b50806003541691160361192657938394825163604ef2e560e01b815281818481885afa9182156110a95786926118f5575b505080156118d8576001600160401b03165b833b156106a65782516321fba31360e21b81528235928101929092526001600160401b031660248201529183908390604490829084905af1908115610870575061085d5750f35b50600e546001600160401b03906118ef90436120dd565b16611891565b8196508092503d831161191f575b61190d8183611f23565b810103126104f457849351388061187f565b503d611903565b815162ce650360e31b81528590fd5b9091508281813d831161196a575b61194d8183611f23565b810103126119665751818116810361196657903861184e565b8580fd5b503d611943565b6119889150823d8411610313576103058183611f23565b38611821565b5050346106aa57816003193601126106aa57602090517f39f61ca2a1a28fee144218173ec637b649a353e4026b2738c673800e5bf1437b8152f35b5050346106aa57816003193601126106aa57602090600d549051908152f35b5050346106aa57816003193601126106aa5760075490516001600160a01b039091168152602090f35b509190346106aa5760203660031901126106aa57823590600a5493848311611b0d578151633eaf7a0360e21b815230828201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169390602081602481885afa9081156110a9578691611adc575b508111611acd57611a99818697612100565b600a55833b156106a6576024859283855196879485936327a0bb3360e01b85528401525af1908115610870575061085d5750f35b5090516394290ab960e01b8152fd5b90506020813d8211611b05575b81611af660209383611f23565b810103126104f4575138611a87565b3d9150611ae9565b9051633f94439960e21b8152fd5b50346103245760203660031901126103245760209282913581526008845220549051908152f35b5050346106aa57816003193601126106aa5760055490516001600160a01b039091168152602090f35b5050346106aa57816003193601126106aa576020906009549051908152f35b5050346106aa57816003193601126106aa57602090600c549051908152f35b5090346103245760209182600319360112610b0f578151633eaf7a0360e21b815230818301527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031693823592918181602481895afa90811561106d578791611ce6575b508311611cd75783516311005b0760e01b815230838201528181602481895afa91821561106d578792611ca5575b5050610477611c549160095490612100565b8211611c9757908491843b156103245760249083855196879485936327a0bb3360e01b85528401525af19081156108705750611c8e575080f35b61028890611edf565b825163ac4314a960e01b8152fd5b90809250813d8311611cd0575b611cbc8183611f23565b810103126119665751610477611c54611c42565b503d611cb2565b5082516394290ab960e01b8152fd5b90508181813d8311611d10575b611cfd8183611f23565b81010312611d0c575138611c14565b8680fd5b503d611cf3565b5050346106aa57816003193601126106aa57602090600a549051908152f35b5050346106aa57816003193601126106aa57905490516001600160a01b039091168152602090f35b503461032457602036600319011261032457611d78611ec9565b83548351632474521560e21b81528381018690523360248201526001600160a01b0392916020908290604490829087165afa908115611e30578691611e12575b5015611e02571691828452600660205260ff818520541615611ded575050600780546001600160a01b03191691909117905580f35b916024925191633935d9fb60e21b8352820152fd5b8351631886ea7d60e11b81528390fd5b611e2a915060203d8111610313576103058183611f23565b38611db8565b85513d88823e3d90fd5b9291905034610b0f576020366003190112610b0f57803563ffffffff60e01b81168091036106a65784546301ffc9a760e01b855291840152602090839060249082906001600160a01b03165afa918215611ebf5760209392611ea0575b50519015158152f35b611eb8919250833d8111610313576103058183611f23565b9038611e97565b81513d85823e3d90fd5b600435906001600160a01b03821682036104f457565b6001600160401b038111611ef257604052565b634e487b7160e01b600052604160045260246000fd5b608081019081106001600160401b03821117611ef257604052565b601f909101601f19168101906001600160401b03821190821017611ef257604052565b908160209103126104f4575180151581036104f45790565b6001600160a01b039091168152602081019190915260400190565b6001600160a01b039182168152602081019290925291821660408201529116606082015260c0810192916003811015611fbb578160a091608060009401520152565b634e487b7160e01b600052602160045260246000fd5b3d1561200b573d906001600160401b038211611ef25760405191611fff601f8201601f191660200184611f23565b82523d6000602084013e565b606090565b6040516323b872dd60e01b602082019081526001600160a01b03938416602483015292909316604484015260648084019490945292825260a0820192906001600160401b03841183851017611ef2576000809493819460405251925af1612075611fd1565b816120ae575b501561208357565b60405162461bcd60e51b815260206004820152600360248201526229aa2360e91b6044820152606490fd5b80518015925082156120c3575b50503861207b565b6120d69250602080918301019101611f46565b38806120bb565b919082018092116120ea57565b634e487b7160e01b600052601160045260246000fd5b9081039081116120ea579056fe3b5d4cc60d3ec3516ee8ae083bd60934f6eb2a6c54b1229985c41bfb092b26039a9aef7c1247d5fc769b0185c052913e39673da29a880317dfd20ebf86f26a49b0fdd1623e42dbffda4acd8bd643e1cb69f00f0e83abeaa8150ee42cf0fd105ea2646970667358221220599c4b177b4729772b69ec1b24ae6553b3f3fd0d08643c32b403fe818f9e54a064736f6c63430008110033",
  "deployedBytecode": "0x6080604081815260048036101561001557600080fd5b600092833560e01c90816301ffc9a714611e3a57508063038a3e2f14611d5e57806303ee9f2214611d365780630f44d6bd14611d1757806327a0bb3314611ba95780632a608d5b14611b8a5780632d09f11d14611b6b57806330413a2a14611b425780633977a31914611b1b5780633dc4ab1d14611a115780633fec7e46146119e857806341b3a0d9146119c9578063438280dd1461198e5780634a9afc5b146117cc5780635221e882146117ad578063550a1e00146115a55780635d49502b146114cc5780636614f010146112e257806367aea3131461129e57806371d0fb411461126357806375b238fc146112485780637ae8b2e11461114c5780637dc0d1d014611123578063887e2a4a146110fa578063894ba83314610f065780638b24dc3e14610e9c5780638e5313e014610e615780639d32526814610c4a578063a8b30a9f14610b75578063bd5f5be614610b3a578063c9bc438414610b13578063d09a79dd14610984578063d0e8fa8214610949578063d2351cee14610920578063d2f7265a146108f7578063d46e50d0146108b3578063d5070076146107bc578063d65e861d1461079d578063dc97e84e14610774578063de51eefd14610736578063e9c265181461070d578063e9de2c3f146106ae578063ed9ac368146103285763fe4f58901461020757600080fd5b34610324578160031936011261032457803591602435926044602060018060a01b03875416845192838092632474521560e21b825260008051602061210e833981519152898301523360248301525afa90811561031a5786916102ec575b50156102de576b706f704465627444656c617960a01b810361028b57505050600b555b80f35b6c39bab938363ab9a13ab33332b960991b81036102ab57505050600c5580f35b7464656661756c74526577617264456e64426c6f636b60581b036102d1575050600e5580f35b51634f7c191f60e01b8152fd5b505163599a6c3360e11b8152fd5b61030d915060203d8111610313575b6103058183611f23565b810190611f46565b38610265565b503d6102fb565b83513d88823e3d90fd5b8280fd5b509190346106aa57806003193601126106aa576024928335813560038210156106a65760018060a01b0390818654169685518098632474521560e21b82528887830152338383015281604460209b8c935afa90811561069c57889161067f575b501561066f578551633eaf7a0360e21b81523086820152907f0000000000000000000000000000000000000000000000000000000000000000841689838381845afa92831561063457908a918a9461063e575b509082918951938480926311005b0760e01b8252308c8301525afa918215610634578992610605575b5087516370a0823160e01b815230888201527f00000000000000000000000000000000000000000000000000000000000000008616938b828481885afa9182156105fb578b926105cc575b50600c549182821093841561052b575b5050505061051b576104776104809160095490612100565b600a5490612100565b61050b57908683926104b48a969560015416946003541695895198899788968795633bcce46f60e21b875230938701611f79565b03925af192831561050057926104cc575b5051908152f35b9091508281813d83116104f9575b6104e48183611f23565b810103126104f4575190386104c5565b600080fd5b503d6104da565b8251903d90823e3d90fd5b85516312bf4cab60e01b81528590fd5b86516394290ab960e01b81528690fd5b9293509091676765c793fa10079d601b1b91828102908015908204841417156105ba5761055890846120dd565b9283106105b6578187029187830414871517156105a5575061057a90846120dd565b918383106105a15761058c90836120dd565b91821061059d57103880808061045f565b8980fd5b8a80fd5b634e487b7160e01b8c5260118a528bfd5b8b80fd5b50634e487b7160e01b8c5260118a528bfd5b9091508b81813d83116105f4575b6105e48183611f23565b810103126104f45751903861044f565b503d6105da565b8a513d8d823e3d90fd5b9091508981813d831161062d575b61061d8183611f23565b810103126104f457519038610404565b503d610613565b88513d8b823e3d90fd5b8281939295503d8311610668575b6106568183611f23565b810103126104f45751918990826103db565b503d61064c565b8551631886ea7d60e11b81528590fd5b6106969150893d8b11610313576103058183611f23565b38610388565b87513d8a823e3d90fd5b8480fd5b5080fd5b5050346106aa57806003193601126106aa577f2cb31b7cd23f5e7810b379525524ddf0fdf14cab7855eff4507f490a268ce016906106ea611ec9565b610707602435926106fd84303386612010565b5192839283611f5e565b0390a180f35b5050346106aa57816003193601126106aa576020905160008051602061210e8339815191528152f35b5050346106aa5760203660031901126106aa5760209160ff9082906001600160a01b03610761611ec9565b1681526006855220541690519015158152f35b5050346106aa57816003193601126106aa576020905160008051602061212e8339815191528152f35b5050346106aa57816003193601126106aa57602090600e549051908152f35b508290346106aa5760203660031901126106aa5781548351632474521560e21b81528281018490523360248201526001600160a01b0394916020908290604490829089165afa9081156108a957849161088b575b501561087e57829360055416803b15610879578151633bccb9b760e21b8152928491849182908490829061084a9080359030908401611f5e565b03925af1908115610870575061085d5750f35b61086690611edf565b61086d5780f35b80fd5b513d84823e3d90fd5b505050fd5b51631886ea7d60e11b8152fd5b6108a3915060203d8111610313576103058183611f23565b85610810565b82513d86823e3d90fd5b5050346106aa57816003193601126106aa57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5050346106aa57816003193601126106aa5760015490516001600160a01b039091168152602090f35b5050346106aa57816003193601126106aa576020905160008051602061214e8339815191528152f35b5050346106aa57816003193601126106aa57602090517f76d0567582f23e1e9d7a13eeba60f9aea9d69b8da87ca27a8bf3698b35c653db8152f35b5090346103245760209081600319360112610b0f576109a1611ec9565b84548251632474521560e21b815260008051602061210e833981519152868201523360248201526001600160a01b039185908290604490829086165afa908115610b05578791610ae8575b5015610ad8578082168087526006855260ff8488205416610ac25791600092918392885260068652848820600160ff19825416179055600154168285518781019263095ea7b360e01b845260248201528119604482015260448152610a5081611f08565b51925af1610a5c611fd1565b81610a92575b5015610a6c578380f35b5162461bcd60e51b8152918201526002602482015261534160f01b604482015260649150fd5b80518015925084908315610aaa575b50505038610a62565b610aba9350820181019101611f46565b388381610aa1565b8560249185519163c05cbd9360e01b8352820152fd5b825163599a6c3360e11b81528590fd5b610aff9150853d8711610313576103058183611f23565b386109ec565b84513d89823e3d90fd5b8380fd5b50346103245782600319360112610324575490516001600160a01b03909116815260209150f35b5050346106aa57816003193601126106aa57602090517f4f14c8366fa999817edc9f29824eb88a00cc31225e2156f399da4bc91049eb108152f35b5090346103245760209081600319360112610b0f5783548151632474521560e21b815260008051602061212e83398151915281860152336024820152843594918490829060449082906001600160a01b03165afa90811561031a578691610c2d575b5015610c1f5750428452600882528084205491610bf484846120dd565b9283106106a65760089042865252832055610c1260095491826120dd565b9081106106aa5760095580f35b905163200ab6d960e01b8152fd5b610c449150843d8611610313576103058183611f23565b38610bd7565b509190346106aa5760803660031901126106aa57610c66611ec9565b926024359060443560038110156106a65760018060a01b0392838654169685518098632474521560e21b8252888683015233602483015281604460209b8c935afa90811561069c578891610e44575b5015610e3457868886600254166024895180948193632a5001c960e01b83528b88168b8401525af190811561069c578891610e07575b508083810204831490151715610df2578551633eaf7a0360e21b8152308582015288816024817f00000000000000000000000000000000000000000000000000000000000000008a165afa90811561069c578891610dc5575b50610db557600a54610d58606435826120dd565b908110610db15788949392918891600a556104b4876001541694895198899788968795633bcce46f60e21b875230937f000000000000000000000000000000000000000000000000000000000000000016928701611f79565b8780fd5b855163e9f0635560e01b81528490fd5b90508881813d8311610deb575b610ddc8183611f23565b810103126104f4575138610d44565b503d610dd2565b601184634e487b7160e01b6000525260246000fd5b90508881813d8311610e2d575b610e1e8183611f23565b810103126104f4575138610ceb565b503d610e14565b8551631886ea7d60e11b81528490fd5b610e5b9150893d8b11610313576103058183611f23565b38610cb5565b5050346106aa57816003193601126106aa57602090517fe453bacb314e78dcd5192e6b1a2b1f0e7c76e92f6b7e429a6a90f04e39db3b768152f35b509190346106aa5760203660031901126106aa578235610ebe600b54826120dd565b818110610b0f574210610ef657829350610ee660095482855260086020528385205490612100565b6009558252600860205281205580f35b81516306932a5360e11b81528490fd5b509190346106aa57816003193601126106aa5781548151632474521560e21b815260008051602061214e83398151915285820152336024820152602092916001600160a01b03919084908290604490829086165afa9081156110f05785916110d3575b50156110c357600d54156110b35793839484600d558460095584600a557f00000000000000000000000000000000000000000000000000000000000000001692825190633eaf7a0360e21b825230838301528082602481885afa9182156110a9578692611077575b5083516311005b0760e01b815230848201528181602481895afa91821561106d57879261103c575b505080821161103557505b833b156106a6576024859283855196879485936327a0bb3360e01b85528401525af1908115610870575061085d5750f35b9050611004565b8197508092503d8311611066575b6110548183611f23565b810103126104f4578594513880610ff9565b503d61104a565b85513d89823e3d90fd5b809650818093503d83116110a2575b6110908183611f23565b810103126104f4578594519038610fd1565b503d611086565b84513d88823e3d90fd5b81516303b14e6560e51b81528590fd5b815163bb0684b760e01b81528590fd5b6110ea9150843d8611610313576103058183611f23565b38610f69565b83513d87823e3d90fd5b5050346106aa57816003193601126106aa5760035490516001600160a01b039091168152602090f35b5050346106aa57816003193601126106aa5760025490516001600160a01b039091168152602090f35b5090346103245760209081600319360112610b0f57611169611ec9565b84548251632474521560e21b815260008051602061210e833981519152868201523360248201526001600160a01b039185908290604490829086165afa908115610b0557879161122b575b5015610ad8578082168087526006855260ff848820541615611215579160009291839288526006865284882060ff198154169055600154168285518781019263095ea7b360e01b8452602482015281604482015260448152610a5081611f08565b8560249185519163052bb4dd60e01b8352820152fd5b6112429150853d8711610313576103058183611f23565b386111b4565b5050346106aa57816003193601126106aa5751908152602090f35b5050346106aa57816003193601126106aa57602090517f880a91047114272656e533301261260c75e4d11543ac7303d6fe4204579ec7278152f35b5050346106aa57816003193601126106aa57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50346103245781600319360112610324578035916001600160a01b0360243581811693908490036104f457818654169483518096632474521560e21b825260008051602061210e833981519152848301523360248301528160446020998a935afa9081156114c25788916114a5575b5015611496576765786368616e676560c01b811461147f575b656f7261636c6560d01b8114611468575b64737544414f60d81b811461144e575b6731b7b4b72537b4b760c11b8114611437575b693932bbb0b93221b432b360b11b036114295780546001600160a01b0319811685178255600354845163095ea7b360e01b8152918816909517918101919091526000196024820152928491849160449183918991165af1908115611420575061140657505080f35b8161141c92903d10610313576103058183611f23565b5080f35b513d85823e3d90fd5b8251634f7c191f60e01b8152fd5b600580546001600160a01b0319168617905561139e565b600380546001600160a01b0319811690851617905561138b565b600280546001600160a01b0319168617905561137b565b600180546001600160a01b0319168617905561136a565b50825163599a6c3360e11b8152fd5b6114bc9150873d8911610313576103058183611f23565b38611351565b85513d8a823e3d90fd5b509190346106aa5760203660031901126106aa5782359060018060a01b036044602082865416845192838092632474521560e21b8252898b8301523360248301525afa9081156110f0578591611587575b501561157757938394600a5484808210600014611569575050845b600a556005541692833b156106a65761084a9385928385518097819582946312db6f5f60e01b845230908401611f5e565b61157291612100565b611538565b8151631886ea7d60e11b81528590fd5b61159f915060203d8111610313576103058183611f23565b3861151d565b508290346106aa57826003193601126106aa576115c0611ec9565b9060249081359160018060a01b0393848116948587526020956006875260ff89892054161561179857670de0b6b3a7640000918287029287840414871517156117865787816002541692868c5180958193631735856760e31b83528b8301525afa91821561177c57899261174d575b50811561173957918861168f61169d8296946116728b8598309033907f000000000000000000000000000000000000000000000000000000000000000016612010565b8d519283918d83019663a9059cbb60e01b885204338b8401611f5e565b03601f198101835282611f23565b51925af16116a9611fd1565b81611709575b50156116e25750507f062234b32cab33fa5bcd957e318141fefab38cc79f25ec5b972be8392e98cb6c929351908152a180f35b855162461bcd60e51b81529182018490526002908201526114d560f21b6044820152606490fd5b80518015925086908315611721575b505050876116af565b6117319350820181019101611f46565b878581611718565b84601287634e487b7160e01b600052526000fd5b9091508781813d8311611775575b6117658183611f23565b810103126104f45751908a61162f565b503d61175b565b8a513d8b823e3d90fd5b634e487b7160e01b8952601186528489fd5b8484918a5191633935d9fb60e21b8352820152fd5b5050346106aa57816003193601126106aa57602090600b549051908152f35b509190346106aa57602090816003193601126103245782548151632474521560e21b81528581018590523360248201526001600160a01b03939182908290604490829088165afa9081156110f0578591611971575b501561157757845482516399248ea760e01b81529084169382828881885afa9182156110a9578692611935575b50806003541691160361192657938394825163604ef2e560e01b815281818481885afa9182156110a95786926118f5575b505080156118d8576001600160401b03165b833b156106a65782516321fba31360e21b81528235928101929092526001600160401b031660248201529183908390604490829084905af1908115610870575061085d5750f35b50600e546001600160401b03906118ef90436120dd565b16611891565b8196508092503d831161191f575b61190d8183611f23565b810103126104f457849351388061187f565b503d611903565b815162ce650360e31b81528590fd5b9091508281813d831161196a575b61194d8183611f23565b810103126119665751818116810361196657903861184e565b8580fd5b503d611943565b6119889150823d8411610313576103058183611f23565b38611821565b5050346106aa57816003193601126106aa57602090517f39f61ca2a1a28fee144218173ec637b649a353e4026b2738c673800e5bf1437b8152f35b5050346106aa57816003193601126106aa57602090600d549051908152f35b5050346106aa57816003193601126106aa5760075490516001600160a01b039091168152602090f35b509190346106aa5760203660031901126106aa57823590600a5493848311611b0d578151633eaf7a0360e21b815230828201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169390602081602481885afa9081156110a9578691611adc575b508111611acd57611a99818697612100565b600a55833b156106a6576024859283855196879485936327a0bb3360e01b85528401525af1908115610870575061085d5750f35b5090516394290ab960e01b8152fd5b90506020813d8211611b05575b81611af660209383611f23565b810103126104f4575138611a87565b3d9150611ae9565b9051633f94439960e21b8152fd5b50346103245760203660031901126103245760209282913581526008845220549051908152f35b5050346106aa57816003193601126106aa5760055490516001600160a01b039091168152602090f35b5050346106aa57816003193601126106aa576020906009549051908152f35b5050346106aa57816003193601126106aa57602090600c549051908152f35b5090346103245760209182600319360112610b0f578151633eaf7a0360e21b815230818301527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031693823592918181602481895afa90811561106d578791611ce6575b508311611cd75783516311005b0760e01b815230838201528181602481895afa91821561106d578792611ca5575b5050610477611c549160095490612100565b8211611c9757908491843b156103245760249083855196879485936327a0bb3360e01b85528401525af19081156108705750611c8e575080f35b61028890611edf565b825163ac4314a960e01b8152fd5b90809250813d8311611cd0575b611cbc8183611f23565b810103126119665751610477611c54611c42565b503d611cb2565b5082516394290ab960e01b8152fd5b90508181813d8311611d10575b611cfd8183611f23565b81010312611d0c575138611c14565b8680fd5b503d611cf3565b5050346106aa57816003193601126106aa57602090600a549051908152f35b5050346106aa57816003193601126106aa57905490516001600160a01b039091168152602090f35b503461032457602036600319011261032457611d78611ec9565b83548351632474521560e21b81528381018690523360248201526001600160a01b0392916020908290604490829087165afa908115611e30578691611e12575b5015611e02571691828452600660205260ff818520541615611ded575050600780546001600160a01b03191691909117905580f35b916024925191633935d9fb60e21b8352820152fd5b8351631886ea7d60e11b81528390fd5b611e2a915060203d8111610313576103058183611f23565b38611db8565b85513d88823e3d90fd5b9291905034610b0f576020366003190112610b0f57803563ffffffff60e01b81168091036106a65784546301ffc9a760e01b855291840152602090839060249082906001600160a01b03165afa918215611ebf5760209392611ea0575b50519015158152f35b611eb8919250833d8111610313576103058183611f23565b9038611e97565b81513d85823e3d90fd5b600435906001600160a01b03821682036104f457565b6001600160401b038111611ef257604052565b634e487b7160e01b600052604160045260246000fd5b608081019081106001600160401b03821117611ef257604052565b601f909101601f19168101906001600160401b03821190821017611ef257604052565b908160209103126104f4575180151581036104f45790565b6001600160a01b039091168152602081019190915260400190565b6001600160a01b039182168152602081019290925291821660408201529116606082015260c0810192916003811015611fbb578160a091608060009401520152565b634e487b7160e01b600052602160045260246000fd5b3d1561200b573d906001600160401b038211611ef25760405191611fff601f8201601f191660200184611f23565b82523d6000602084013e565b606090565b6040516323b872dd60e01b602082019081526001600160a01b03938416602483015292909316604484015260648084019490945292825260a0820192906001600160401b03841183851017611ef2576000809493819460405251925af1612075611fd1565b816120ae575b501561208357565b60405162461bcd60e51b815260206004820152600360248201526229aa2360e91b6044820152606490fd5b80518015925082156120c3575b50503861207b565b6120d69250602080918301019101611f46565b38806120bb565b919082018092116120ea57565b634e487b7160e01b600052601160045260246000fd5b9081039081116120ea579056fe3b5d4cc60d3ec3516ee8ae083bd60934f6eb2a6c54b1229985c41bfb092b26039a9aef7c1247d5fc769b0185c052913e39673da29a880317dfd20ebf86f26a49b0fdd1623e42dbffda4acd8bd643e1cb69f00f0e83abeaa8150ee42cf0fd105ea2646970667358221220599c4b177b4729772b69ec1b24ae6553b3f3fd0d08643c32b403fe818f9e54a064736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "auctionDebt(address,uint256,uint8,uint256)": {
        "details": "We can only auction debt that is not already being auctioned and is not locked in the debt queue. Firstly, we should donate token2sell (it's collateral or stablecoin) by refillStablecoin*"
      },
      "auctionSurplus(uint256,uint8)": {
        "details": "We can only auction surplus if we wait at least 'surplusAuctionDelay' seconds since the last      auction trigger, if we keep enough surplus in the buffer and if there is no bad debt to settle*"
      },
      "cancelAuctionedDebtWithSurplus(uint256)": {
        "params": {
          "rad": "Amount of coins/debt to destroy (number with 45 decimals)*"
        }
      },
      "disableContract()": {
        "details": "When we disable, the contract tries to settle as much debt as possible (if there's any) with any surplus that's left in the system. After erasing debt, the contract will either transfer any remaining surplus right away (if disableCooldown == 0) or will only record the timestamp when it was disabled*"
      },
      "popDebtFromQueue(uint256)": {
        "params": {
          "era": "Timestamp of the block of debt that should be popped out"
        }
      },
      "pushDebtToQueue(uint256)": {
        "details": "Debt is locked in a queue to give the system enough time to auction collateral      and gather surplus",
        "params": {
          "amountToRaise": "Amount of debt to push"
        }
      },
      "settleDebt(uint256)": {
        "details": "We can only destroy debt that is not locked in the queue and also not in a debt auction",
        "params": {
          "rad": "Amount of coins/debt to destroy (number with 45 decimals)*"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addWhitelistStablecoin(address)": {
        "notice": "Add new stablecoin to whitelist of stablecoins protocol works with*"
      },
      "auctionDebt(address,uint256,uint8,uint256)": {
        "notice": "Start a debt auction (we have debt = x$, token2sell with value of y$, where y >= x)"
      },
      "auctionSurplus(uint256,uint8)": {
        "notice": "Start a surplus auction"
      },
      "cancelAuctionedDebtWithSurplus(uint256)": {
        "notice": "Use surplus coins to destroy debt that is/was in a debt auction"
      },
      "disableContract()": {
        "notice": "Disable this contract (normally called by Global Settlement)"
      },
      "distributeSurplus(uint256)": {
        "notice": "Admin function to distribute surplus after getting it*"
      },
      "getRealStablePro(uint256)": {
        "notice": "Admin function to get real StablePro tokens instead of records in protocol (= exit from coinJoin)*"
      },
      "hasWhitelistStablecoin(address)": {
        "notice": "Check if give token is in stablecoins whitelist*"
      },
      "joinStablePro(uint256)": {
        "notice": "Admin function to join protocol using real StablePro (= join in coinJoin)*"
      },
      "popDebtFromQueue(uint256)": {
        "notice": "A block of debt can be popped from the queue after popDebtDelay seconds passed since it was         added there"
      },
      "pushDebtToQueue(uint256)": {
        "notice": "Push debt (that the system tries to cover with collateral auctions) to a queue"
      },
      "refillStablecoin(address,uint256)": {
        "notice": "Function to send stablecoin to AccountingEngine contract*"
      },
      "removeWhitelistStablecoin(address)": {
        "notice": "Remove stablecoin from whitelist of stablecoins protocol works with*"
      },
      "setStablecoinToSwap(address)": {
        "notice": "Change var stablecoinToSwap, that is used in liquidation process*"
      },
      "settleDebt(uint256)": {
        "notice": "Destroy an equal amount of coins and debt"
      },
      "swapStableProToStablecoin(address,uint256)": {
        "notice": "Function to swap sender's stablePro to stablecoin that is in whitelist*"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7048,
        "contract": "contracts/makerdao/externalContracts/AccountingEngine.sol:AccountingEngine",
        "label": "ACCESS_CONTROL_SINGLETON",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ISuAccessControl)7265"
      },
      {
        "astId": 4067,
        "contract": "contracts/makerdao/externalContracts/AccountingEngine.sol:AccountingEngine",
        "label": "exchange",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IExchange)3751"
      },
      {
        "astId": 4070,
        "contract": "contracts/makerdao/externalContracts/AccountingEngine.sol:AccountingEngine",
        "label": "oracle",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ISuOracleAggregator)7409"
      },
      {
        "astId": 4073,
        "contract": "contracts/makerdao/externalContracts/AccountingEngine.sol:AccountingEngine",
        "label": "suDAO",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20)1437"
      },
      {
        "astId": 4079,
        "contract": "contracts/makerdao/externalContracts/AccountingEngine.sol:AccountingEngine",
        "label": "rewardChef",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IRewardChefV2)4042"
      },
      {
        "astId": 4082,
        "contract": "contracts/makerdao/externalContracts/AccountingEngine.sol:AccountingEngine",
        "label": "coinJoin",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(ICoinJoin)5839"
      },
      {
        "astId": 4086,
        "contract": "contracts/makerdao/externalContracts/AccountingEngine.sol:AccountingEngine",
        "label": "stablecoinWhitelist",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4088,
        "contract": "contracts/makerdao/externalContracts/AccountingEngine.sol:AccountingEngine",
        "label": "stablecoinToSwap",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 4092,
        "contract": "contracts/makerdao/externalContracts/AccountingEngine.sol:AccountingEngine",
        "label": "debtQueue",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 4094,
        "contract": "contracts/makerdao/externalContracts/AccountingEngine.sol:AccountingEngine",
        "label": "totalQueuedDebt",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 4096,
        "contract": "contracts/makerdao/externalContracts/AccountingEngine.sol:AccountingEngine",
        "label": "totalOnAuctionDebt",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 4098,
        "contract": "contracts/makerdao/externalContracts/AccountingEngine.sol:AccountingEngine",
        "label": "popDebtDelay",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 4100,
        "contract": "contracts/makerdao/externalContracts/AccountingEngine.sol:AccountingEngine",
        "label": "surplusBuffer",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 4102,
        "contract": "contracts/makerdao/externalContracts/AccountingEngine.sol:AccountingEngine",
        "label": "contractEnabled",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 4104,
        "contract": "contracts/makerdao/externalContracts/AccountingEngine.sol:AccountingEngine",
        "label": "defaultRewardEndBlock",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ICoinJoin)5839": {
        "encoding": "inplace",
        "label": "contract ICoinJoin",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)1437": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IExchange)3751": {
        "encoding": "inplace",
        "label": "contract IExchange",
        "numberOfBytes": "20"
      },
      "t_contract(IRewardChefV2)4042": {
        "encoding": "inplace",
        "label": "contract IRewardChefV2",
        "numberOfBytes": "20"
      },
      "t_contract(ISuAccessControl)7265": {
        "encoding": "inplace",
        "label": "contract ISuAccessControl",
        "numberOfBytes": "20"
      },
      "t_contract(ISuOracleAggregator)7409": {
        "encoding": "inplace",
        "label": "contract ISuOracleAggregator",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}