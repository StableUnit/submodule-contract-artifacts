{
  "address": "0x8106DE5bF39B00e1247dBF33D28419210004257B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_penaltyRecipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "CollectPenalty",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "locktime",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "enum VotingEscrow.LockAction",
          "name": "action",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ts",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "TransferOwnership",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Unlock",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "blocklist",
          "type": "address"
        }
      ],
      "name": "UpdateBlocklist",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "UpdatePenaltyRecipient",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "enum VotingEscrow.LockAction",
          "name": "action",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ts",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAXTIME",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MULTIPLIER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WEEK",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_blockNumber",
          "type": "uint256"
        }
      ],
      "name": "balanceOfAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "blocklist",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkpoint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collectPenalty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_unlockTime",
          "type": "uint256"
        }
      ],
      "name": "createLock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "delegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "forceUndelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "getLastUserPoint",
      "outputs": [
        {
          "internalType": "int128",
          "name": "bias",
          "type": "int128"
        },
        {
          "internalType": "int128",
          "name": "slope",
          "type": "int128"
        },
        {
          "internalType": "uint256",
          "name": "ts",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "name": "getPenaltyRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "globalEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "increaseAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_unlockTime",
          "type": "uint256"
        }
      ],
      "name": "increaseUnlockTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "lockEnd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "locked",
      "outputs": [
        {
          "internalType": "int128",
          "name": "amount",
          "type": "int128"
        },
        {
          "internalType": "int128",
          "name": "delegated",
          "type": "int128"
        },
        {
          "internalType": "uint96",
          "name": "end",
          "type": "uint96"
        },
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPenalty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "penaltyAccumulated",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "penaltyRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pointHistory",
      "outputs": [
        {
          "internalType": "int128",
          "name": "bias",
          "type": "int128"
        },
        {
          "internalType": "int128",
          "name": "slope",
          "type": "int128"
        },
        {
          "internalType": "uint256",
          "name": "ts",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blk",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quitLock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "slopeChanges",
      "outputs": [
        {
          "internalType": "int128",
          "name": "",
          "type": "int128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "supply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_blockNumber",
          "type": "uint256"
        }
      ],
      "name": "totalSupplyAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "updateBlocklist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "updatePenaltyRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userPointEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userPointHistory",
      "outputs": [
        {
          "internalType": "int128",
          "name": "bias",
          "type": "int128"
        },
        {
          "internalType": "int128",
          "name": "slope",
          "type": "int128"
        },
        {
          "internalType": "uint256",
          "name": "ts",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blk",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2189a337ca78da6a7b11a5c198bf57b63d4710e1fd25e2249f122ebccb05585f",
  "receipt": {
    "to": null,
    "from": "0xB1A2C47AA400bDbfb46822A39843C0d91127864f",
    "contractAddress": "0x8106DE5bF39B00e1247dBF33D28419210004257B",
    "transactionIndex": 29,
    "gasUsed": "3247864",
    "logsBloom": "0x
    "blockHash": "0x064f7fdf4564a6a245f6488b3988d97d608d311541563a85fa39ecdceb149dbd",
    "transactionHash": "0x2189a337ca78da6a7b11a5c198bf57b63d4710e1fd25e2249f122ebccb05585f",
    "logs": [],
    "blockNumber": 6372627,
    "cumulativeGasUsed": "5999708",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xB1A2C47AA400bDbfb46822A39843C0d91127864f",
    "0xB1A2C47AA400bDbfb46822A39843C0d91127864f",
    "0x8BE91C4f2add90179A0aa610aF7f03590E970565",
    "Voting Escrow SuDAO",
    "VeSuDAO"
  ],
  "numDeployments": 1,
  "solcInputHash": "3e34b7cdfcb2b752c6d40a74851c15ba",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_penaltyRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"CollectPenalty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"locktime\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"enum VotingEscrow.LockAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"TransferOwnership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"blocklist\",\"type\":\"address\"}],\"name\":\"UpdateBlocklist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"UpdatePenaltyRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"enum VotingEscrow.LockAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAXTIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WEEK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blocklist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectPenalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unlockTime\",\"type\":\"uint256\"}],\"name\":\"createLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"forceUndelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getLastUserPoint\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"bias\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"slope\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getPenaltyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"increaseAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unlockTime\",\"type\":\"uint256\"}],\"name\":\"increaseUnlockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"lockEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"amount\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"delegated\",\"type\":\"int128\"},{\"internalType\":\"uint96\",\"name\":\"end\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPenalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"penaltyAccumulated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"penaltyRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pointHistory\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"bias\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"slope\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blk\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quitLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"slopeChanges\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"updateBlocklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"updatePenaltyRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userPointEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userPointHistory\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"bias\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"slope\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blk\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Builds on Curve Finance's original VotingEscrow implementation (see https://github.com/curvefi/curve-dao-contracts/blob/master/contracts/VotingEscrow.vy) and mStable's Solidity translation thereof (see https://github.com/mstable/mStable-contracts/blob/master/contracts/governance/IncentivisedVotingLockup.sol) Usage of this contract is not safe with all tokens, specifically: - Contract does not support tokens with maxSupply>2^128-10^[decimals] - Contract does not support fee-on-transfer tokens - Contract may be unsafe for tokens with decimals<6\",\"kind\":\"dev\",\"methods\":{\"balanceOf(address)\":{\"params\":{\"_owner\":\"The address of the lock owner for which to return voting power\"},\"returns\":{\"_0\":\"Voting power of the lock\"}},\"balanceOfAt(address,uint256)\":{\"params\":{\"_blockNumber\":\"The block at which to calculate the lock's voting power\",\"_owner\":\"The address of the lock owner for which to return voting power\"},\"returns\":{\"_0\":\"uint256 Voting power of the lock\"}},\"constructor\":{\"params\":{\"_name\":\"The name of the voting token\",\"_owner\":\"Is assumed to be a timelock contract\",\"_penaltyRecipient\":\"The recipient of penalty paid by lock quitters\",\"_symbol\":\"The symbol of the voting token\",\"_token\":\"The token locked in order to obtain voting power\"}},\"createLock(uint256,uint256)\":{\"details\":\"`_value` is (unsafely) downcasted from `uint256` to `int128` and `_unlockTime` is (unsafely) downcasted from `uint256` to `uint96` assuming that the values never reach the respective max values\",\"params\":{\"_unlockTime\":\"Expiration time of the lock\",\"_value\":\"Amount of token to lock\"}},\"delegate(address)\":{\"params\":{\"_addr\":\"The address of the lock owner to which to delegate\"}},\"forceUndelegate(address)\":{\"details\":\"Only callable by the blocklist contract\",\"params\":{\"_addr\":\"user to which voting power is delegated\"}},\"getLastUserPoint(address)\":{\"params\":{\"_addr\":\"The address of the lock owner\"},\"returns\":{\"bias\":\"The last recorded virtual balance\",\"slope\":\"The last recorded linear decay\",\"ts\":\"The last recorded timestamp\"}},\"getPenaltyRate(uint256)\":{\"details\":\"The penalty rate decreases linearly at the same rate as a lock's voting power in order to compensate for votes unlocked without committing to the lock expiration\",\"params\":{\"end\":\"The lock's expiration\"},\"returns\":{\"_0\":\"The penalty rate applicable to the lock\"}},\"increaseAmount(uint256)\":{\"details\":\"Does not update the lock's expiration Does record a new checkpoint for the lock `_value` is (unsafely) downcasted from `uint256` to `int128` assuming that the max value is never reached in practice\",\"params\":{\"_value\":\"Amount of tokens to add to the lock\"}},\"increaseUnlockTime(uint256)\":{\"details\":\"Does not update the amount of tokens locked Does record a new checkpoint for the lock `_unlockTime` is (unsafely) downcasted from `uint256` to `uint96` assuming that the max value is never reached in practice\",\"params\":{\"_unlockTime\":\"New lock expiration time\"}},\"lockEnd(address)\":{\"params\":{\"_addr\":\"The address of the lock owner\"},\"returns\":{\"_0\":\"Expiration of the lock\"}},\"quitLock()\":{\"details\":\"Quitters lock expiration remains in place because it might be delegated to\"},\"totalSupply()\":{\"returns\":{\"_0\":\"Current totalSupply\"}},\"totalSupplyAt(uint256)\":{\"params\":{\"_blockNumber\":\"The block number at which to calculate total supply\"},\"returns\":{\"_0\":\"totalSupply of voting power at the given block number\"}},\"transferOwnership(address)\":{\"details\":\"Owner is assumed to be a timelock contract\",\"params\":{\"_addr\":\"The new owner\"}},\"unlock()\":{\"details\":\"This is an irreversible action and is assumed to be used in a migration to a new VotingEscrow contract only\"}},\"title\":\"Delegated Voting Escrow\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"balanceOf(address)\":{\"notice\":\"Get a lock's current voting power\"},\"balanceOfAt(address,uint256)\":{\"notice\":\"Get a lock's voting power at a given block number\"},\"checkpoint()\":{\"notice\":\"Records a new global checkpoint\"},\"collectPenalty()\":{\"notice\":\"Collect accumulated penalty from lock quitters Everyone can collect but penalty is sent to `penaltyRecipient`\"},\"constructor\":{\"notice\":\"Initializes state\"},\"createLock(uint256,uint256)\":{\"notice\":\"Creates a new lock\"},\"delegate(address)\":{\"notice\":\"Delegate lock and voting power to another lock The receiving lock needs to have a longer lock duration The delegated lock will inherit the receiving lock's expiration\"},\"forceUndelegate(address)\":{\"notice\":\"Remove delegation for blocked contract\"},\"getLastUserPoint(address)\":{\"notice\":\"Returns a lock's last available user point\"},\"getPenaltyRate(uint256)\":{\"notice\":\"Returns the penalty rate for a given lock expiration\"},\"increaseAmount(uint256)\":{\"notice\":\"Locks more tokens in an existing lock\"},\"increaseUnlockTime(uint256)\":{\"notice\":\"Extends the expiration of an existing lock\"},\"lockEnd(address)\":{\"notice\":\"Returns a lock's expiration\"},\"quitLock()\":{\"notice\":\"Quit an existing lock by withdrawing all tokens less a penalty Use `withdraw` for expired locks\"},\"totalSupply()\":{\"notice\":\"Calculate current total supply of voting power\"},\"totalSupplyAt(uint256)\":{\"notice\":\"Calculate total supply of voting power at a given block number\"},\"transferOwnership(address)\":{\"notice\":\"Transfers ownership to a new owner\"},\"unlock()\":{\"notice\":\"Removes quitlock penalty by setting it to zero\"},\"updateBlocklist(address)\":{\"notice\":\"Updates the blocklist contract\"},\"updatePenaltyRecipient(address)\":{\"notice\":\"Updates the recipient of the accumulated penalty paid by quitters\"},\"withdraw()\":{\"notice\":\"Withdraws the tokens of an expired lock Delegated locks need to be undelegated first\"}},\"notice\":\"An ERC20 token that allocates users a virtual balance depending on the amount of tokens locked and their remaining lock duration. The virtual balance decreases linearly with the remaining lock duration. This is the locking mechanism known from veCRV with additional features: - Delegation of lock and voting power - Quit an existing lock and pay a penalty - Optimistic approval of SmartWallets through Blocklist - Reduced pointHistory array size and, as a result, lifetime of the contract - Removed public deposit_for and Aragon compatibility (no use case)\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/staking/contracts/VotingEscrow.sol\":\"VotingEscrow\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"contracts/staking/contracts/VotingEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.3;\\n\\nimport {\\nReentrancyGuard\\n} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {\\nSafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {\\nIERC20Metadata\\n} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport { IVotingEscrow } from \\\"../interfaces/IVotingEscrow.sol\\\";\\nimport { IBlocklist } from \\\"../interfaces/IBlocklist.sol\\\";\\n\\n/// @title  Delegated Voting Escrow\\n/// @notice An ERC20 token that allocates users a virtual balance depending\\n/// on the amount of tokens locked and their remaining lock duration. The\\n/// virtual balance decreases linearly with the remaining lock duration.\\n/// This is the locking mechanism known from veCRV with additional features:\\n/// - Delegation of lock and voting power\\n/// - Quit an existing lock and pay a penalty\\n/// - Optimistic approval of SmartWallets through Blocklist\\n/// - Reduced pointHistory array size and, as a result, lifetime of the contract\\n/// - Removed public deposit_for and Aragon compatibility (no use case)\\n/// @dev Builds on Curve Finance's original VotingEscrow implementation\\n/// (see https://github.com/curvefi/curve-dao-contracts/blob/master/contracts/VotingEscrow.vy)\\n/// and mStable's Solidity translation thereof\\n/// (see https://github.com/mstable/mStable-contracts/blob/master/contracts/governance/IncentivisedVotingLockup.sol)\\n/// Usage of this contract is not safe with all tokens, specifically:\\n/// - Contract does not support tokens with maxSupply>2^128-10^[decimals]\\n/// - Contract does not support fee-on-transfer tokens\\n/// - Contract may be unsafe for tokens with decimals<6\\n\\n//// TODO: also we can use implementation from Pendle https://github.com/pendle-finance/pendle-core-v2-public/blob/main/contracts/LiquidityMining/VotingEscrow/VotingEscrowPendleMainchain.sol\\n//// or https://github.com/chimera-defi/SharedDeposit/blob/main/contracts/governance/voteEscrow.sol\\n//// or from Cream.finance, Fixed Forex, Iron.finance, Firebird.finance, Pickle.finance\\ncontract VotingEscrow is IVotingEscrow, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n    // Shared Events\\n    event Deposit(\\n        address indexed provider,\\n        uint256 value,\\n        uint256 locktime,\\n        LockAction indexed action,\\n        uint256 ts\\n    );\\n    event Withdraw(\\n        address indexed provider,\\n        uint256 value,\\n        LockAction indexed action,\\n        uint256 ts\\n    );\\n    event TransferOwnership(address indexed owner);\\n    event UpdateBlocklist(address indexed blocklist);\\n    event UpdatePenaltyRecipient(address indexed recipient);\\n    event CollectPenalty(uint256 amount, address indexed recipient);\\n    event Unlock();\\n\\n    // Shared global state\\n    IERC20 public immutable token;\\n    uint256 public constant WEEK = 7 days;\\n    uint256 public constant MAXTIME = 730 days;\\n    uint256 public constant MULTIPLIER = 1e18;\\n    address public owner;\\n    address public penaltyRecipient; // receives collected penalty payments\\n    uint256 public maxPenalty = 1e18; // penalty for quitters with MAXTIME remaining lock\\n    uint256 public penaltyAccumulated; // accumulated and unwithdrawn penalty payments\\n    address public blocklist;\\n    uint256 public supply;\\n\\n    // Lock state\\n    uint256 public globalEpoch;\\n    Point[1000000000000000000] public pointHistory; // 1e9 * userPointHistory-length, so sufficient for 1e9 users\\n    mapping(address => Point[1000000000]) public userPointHistory;\\n    mapping(address => uint256) public userPointEpoch;\\n    mapping(uint256 => int128) public slopeChanges;\\n    mapping(address => LockedBalance) public locked;\\n\\n    // Voting token\\n    string public name;\\n    string public symbol;\\n    uint256 public decimals;\\n\\n    // Structs\\n    struct Point {\\n        int128 bias;\\n        int128 slope;\\n        uint256 ts;\\n        uint256 blk;\\n    }\\n    struct LockedBalance {\\n        int128 amount;\\n        int128 delegated;\\n        uint96 end;\\n        address delegatee;\\n    }\\n\\n    // Miscellaneous\\n    enum LockAction {\\n        CREATE,\\n        INCREASE_AMOUNT,\\n        INCREASE_AMOUNT_AND_DELEGATION,\\n        INCREASE_TIME,\\n        WITHDRAW,\\n        QUIT,\\n        DELEGATE,\\n        UNDELEGATE\\n    }\\n\\n    /// @notice Initializes state\\n    /// @param _owner Is assumed to be a timelock contract\\n    /// @param _penaltyRecipient The recipient of penalty paid by lock quitters\\n    /// @param _token The token locked in order to obtain voting power\\n    /// @param _name The name of the voting token\\n    /// @param _symbol The symbol of the voting token\\n    constructor(\\n        address _owner,\\n        address _penaltyRecipient,\\n        address _token,\\n        string memory _name,\\n        string memory _symbol\\n    ) {\\n        token = IERC20(_token);\\n        pointHistory[0] = Point({\\n            bias: int128(0),\\n            slope: int128(0),\\n            ts: block.timestamp,\\n            blk: block.number\\n        });\\n\\n        decimals = IERC20Metadata(_token).decimals();\\n        require(decimals <= 18, \\\"Exceeds max decimals\\\");\\n\\n        name = _name;\\n        symbol = _symbol;\\n        owner = _owner;\\n        penaltyRecipient = _penaltyRecipient;\\n    }\\n\\n    modifier checkBlocklist() {\\n        require(\\n            !IBlocklist(blocklist).isBlocked(msg.sender),\\n            \\\"Blocked contract\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Only owner\\\");\\n        _;\\n    }\\n\\n    /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~ ///\\n    ///       Owner Functions       ///\\n    /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~ ///\\n\\n    /// @notice Transfers ownership to a new owner\\n    /// @param _addr The new owner\\n    /// @dev Owner is assumed to be a timelock contract\\n    function transferOwnership(address _addr) external onlyOwner {\\n        owner = _addr;\\n        emit TransferOwnership(_addr);\\n    }\\n\\n    /// @notice Updates the blocklist contract\\n    function updateBlocklist(address _addr) external onlyOwner {\\n        blocklist = _addr;\\n        emit UpdateBlocklist(_addr);\\n    }\\n\\n    /// @notice Updates the recipient of the accumulated penalty paid by quitters\\n    function updatePenaltyRecipient(address _addr) external onlyOwner {\\n        penaltyRecipient = _addr;\\n        emit UpdatePenaltyRecipient(_addr);\\n    }\\n\\n    /// @notice Removes quitlock penalty by setting it to zero\\n    /// @dev This is an irreversible action and is assumed to be used in\\n    /// a migration to a new VotingEscrow contract only\\n    function unlock() external onlyOwner {\\n        maxPenalty = 0;\\n        emit Unlock();\\n    }\\n\\n    /// @notice Remove delegation for blocked contract\\n    /// @param _addr user to which voting power is delegated\\n    /// @dev Only callable by the blocklist contract\\n    function forceUndelegate(address _addr) external override {\\n        require(msg.sender == blocklist, \\\"Only Blocklist\\\");\\n        LockedBalance memory locked_ = locked[_addr];\\n        address delegatee = locked_.delegatee;\\n        int128 value = locked_.amount;\\n\\n        if (delegatee != _addr && value > 0) {\\n            LockedBalance memory fromLocked;\\n            locked_.delegatee = _addr;\\n            fromLocked = locked[delegatee];\\n            locked_.end = fromLocked.end;\\n            _delegate(delegatee, fromLocked, value, LockAction.UNDELEGATE);\\n            _delegate(_addr, locked_, value, LockAction.DELEGATE);\\n        }\\n    }\\n\\n    /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~ ///\\n    ///       LOCK MANAGEMENT       ///\\n    /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~ ///\\n\\n    /// @notice Returns a lock's expiration\\n    /// @param _addr The address of the lock owner\\n    /// @return Expiration of the lock\\n    function lockEnd(address _addr) external view returns (uint256) {\\n        return locked[_addr].end;\\n    }\\n\\n    /// @notice Returns a lock's last available user point\\n    /// @param _addr The address of the lock owner\\n    /// @return bias The last recorded virtual balance\\n    /// @return slope The last recorded linear decay\\n    /// @return ts The last recorded timestamp\\n    function getLastUserPoint(address _addr)\\n    external\\n    view\\n    returns (\\n        int128 bias,\\n        int128 slope,\\n        uint256 ts\\n    )\\n    {\\n        uint256 uepoch = userPointEpoch[_addr];\\n        if (uepoch == 0) {\\n            return (0, 0, 0);\\n        }\\n        Point memory point = userPointHistory[_addr][uepoch];\\n        return (point.bias, point.slope, point.ts);\\n    }\\n\\n    /// @notice Records a checkpoint of both individual and global slope\\n    /// @param _addr The address of the lock owner, or address(0) for only global\\n    /// @param _oldLocked Old amount that user had locked, or null for global\\n    /// @param _newLocked New amount that user has locked, or null for global\\n    function _checkpoint(\\n        address _addr,\\n        LockedBalance memory _oldLocked,\\n        LockedBalance memory _newLocked\\n    ) internal {\\n        Point memory userOldPoint;\\n        Point memory userNewPoint;\\n        int128 oldSlopeDelta = 0;\\n        int128 newSlopeDelta = 0;\\n        uint256 epoch = globalEpoch;\\n\\n        if (_addr != address(0)) {\\n            // Calculate slopes and biases\\n            // Kept at zero when they have to\\n            // Casting in the next blocks is safe given that MAXTIME is a small\\n            // positive number and we check for _oldLocked.end>block.timestamp\\n            // and _newLocked.end>block.timestamp\\n            if (_oldLocked.end > block.timestamp && _oldLocked.delegated > 0) {\\n                userOldPoint.slope =\\n                    _oldLocked.delegated /\\n                    int128(int256(MAXTIME));\\n                userOldPoint.bias =\\n                    userOldPoint.slope *\\n                    int128(int256(_oldLocked.end - block.timestamp));\\n            }\\n            if (_newLocked.end > block.timestamp && _newLocked.delegated > 0) {\\n                userNewPoint.slope =\\n                    _newLocked.delegated /\\n                    int128(int256(MAXTIME));\\n                userNewPoint.bias =\\n                    userNewPoint.slope *\\n                    int128(int256(_newLocked.end - block.timestamp));\\n            }\\n\\n            // Moved from bottom final if statement to resolve stack too deep err\\n            // start {\\n            // Now handle user history\\n            uint256 uEpoch = userPointEpoch[_addr];\\n\\n            userPointEpoch[_addr] = uEpoch + 1;\\n            userNewPoint.ts = block.timestamp;\\n            userNewPoint.blk = block.number;\\n            userPointHistory[_addr][uEpoch + 1] = userNewPoint;\\n\\n            // } end\\n\\n            // Read values of scheduled changes in the slope\\n            // oldLocked.end can be in the past and in the future\\n            // newLocked.end can ONLY by in the FUTURE unless everything expired: than zeros\\n            oldSlopeDelta = slopeChanges[_oldLocked.end];\\n            if (_newLocked.end != 0) {\\n                if (_newLocked.end == _oldLocked.end) {\\n                    newSlopeDelta = oldSlopeDelta;\\n                } else {\\n                    newSlopeDelta = slopeChanges[_newLocked.end];\\n                }\\n            }\\n        }\\n\\n        Point memory lastPoint =\\n                        Point({\\n                bias: 0,\\n                slope: 0,\\n                ts: block.timestamp,\\n                blk: block.number\\n            });\\n        if (epoch > 0) {\\n            lastPoint = pointHistory[epoch];\\n        }\\n        uint256 lastCheckpoint = lastPoint.ts;\\n\\n        // initialLastPoint is used for extrapolation to calculate block number\\n        // (approximately, for *At methods) and save them\\n        // as we cannot figure that out exactly from inside the contract\\n        Point memory initialLastPoint =\\n                        Point({ bias: 0, slope: 0, ts: lastPoint.ts, blk: lastPoint.blk });\\n        uint256 blockSlope = 0; // dblock/dt\\n        if (block.timestamp > lastPoint.ts) {\\n            blockSlope =\\n                (MULTIPLIER * (block.number - lastPoint.blk)) /\\n                (block.timestamp - lastPoint.ts);\\n        }\\n        // If last point is already recorded in this block, slope=0\\n        // But that's ok b/c we know the block in such case\\n\\n        // Go over weeks to fill history and calculate what the current point is\\n        uint256 iterativeTime = _floorToWeek(lastCheckpoint);\\n        for (uint256 i; i < 255; ) {\\n            // Hopefully it won't happen that this won't get used in 5 years!\\n            // If it does, users will be able to withdraw but vote weight will be broken\\n            iterativeTime = iterativeTime + WEEK;\\n            int128 dSlope = 0;\\n            if (iterativeTime > block.timestamp) {\\n                iterativeTime = block.timestamp;\\n            } else {\\n                dSlope = slopeChanges[iterativeTime];\\n            }\\n            int128 biasDelta =\\n                lastPoint.slope *\\n                int128(int256((iterativeTime - lastCheckpoint)));\\n            lastPoint.bias = lastPoint.bias - biasDelta;\\n            lastPoint.slope = lastPoint.slope + dSlope;\\n            // This can happen\\n            if (lastPoint.bias < 0) {\\n                lastPoint.bias = 0;\\n            }\\n            // This cannot happen - just in case\\n            if (lastPoint.slope < 0) {\\n                lastPoint.slope = 0;\\n            }\\n            lastCheckpoint = iterativeTime;\\n            lastPoint.ts = iterativeTime;\\n            lastPoint.blk =\\n                initialLastPoint.blk +\\n                (blockSlope * (iterativeTime - initialLastPoint.ts)) /\\n                MULTIPLIER;\\n\\n            // when epoch is incremented, we either push here or after slopes updated below\\n            epoch = epoch + 1;\\n            if (iterativeTime == block.timestamp) {\\n                lastPoint.blk = block.number;\\n                break;\\n            } else {\\n                pointHistory[epoch] = lastPoint;\\n            }\\n            unchecked { ++i; }\\n        }\\n\\n        globalEpoch = epoch;\\n        // Now pointHistory is filled until t=now\\n\\n        if (_addr != address(0)) {\\n            // If last point was in this block, the slope change has been applied already\\n            // But in such case we have 0 slope(s)\\n            lastPoint.slope =\\n                lastPoint.slope +\\n                userNewPoint.slope -\\n                userOldPoint.slope;\\n            lastPoint.bias =\\n                lastPoint.bias +\\n                userNewPoint.bias -\\n                userOldPoint.bias;\\n            if (lastPoint.slope < 0) {\\n                lastPoint.slope = 0;\\n            }\\n            if (lastPoint.bias < 0) {\\n                lastPoint.bias = 0;\\n            }\\n        }\\n\\n        // Record the changed point into history\\n        pointHistory[epoch] = lastPoint;\\n\\n        if (_addr != address(0)) {\\n            // Schedule the slope changes (slope is going down)\\n            // We subtract new_user_slope from [new_locked.end]\\n            // and add old_user_slope to [old_locked.end]\\n            if (_oldLocked.end > block.timestamp) {\\n                // oldSlopeDelta was <something> - userOldPoint.slope, so we cancel that\\n                oldSlopeDelta = oldSlopeDelta + userOldPoint.slope;\\n                if (_newLocked.end == _oldLocked.end) {\\n                    oldSlopeDelta = oldSlopeDelta - userNewPoint.slope; // It was a new deposit, not extension\\n                }\\n                slopeChanges[_oldLocked.end] = oldSlopeDelta;\\n            }\\n            if (_newLocked.end > block.timestamp) {\\n                if (_newLocked.end > _oldLocked.end) {\\n                    newSlopeDelta = newSlopeDelta - userNewPoint.slope; // old slope disappeared at this point\\n                    slopeChanges[_newLocked.end] = newSlopeDelta;\\n                }\\n                // else: we recorded it already in oldSlopeDelta\\n            }\\n        }\\n    }\\n\\n    /// @notice Records a new global checkpoint\\n    function checkpoint() external {\\n        LockedBalance memory empty;\\n        _checkpoint(address(0), empty, empty);\\n    }\\n\\n    /// @notice Creates a new lock\\n    /// @param _value Amount of token to lock\\n    /// @param _unlockTime Expiration time of the lock\\n    /// @dev `_value` is (unsafely) downcasted from `uint256` to `int128`\\n    /// and `_unlockTime` is (unsafely) downcasted from `uint256` to `uint96`\\n    /// assuming that the values never reach the respective max values\\n    function createLock(uint256 _value, uint256 _unlockTime)\\n    external\\n    override\\n    nonReentrant\\n    checkBlocklist\\n    {\\n        uint256 unlock_time = _floorToWeek(_unlockTime); // Locktime is rounded down to weeks\\n        LockedBalance memory locked_ = locked[msg.sender];\\n        // Validate inputs\\n        require(_value != 0, \\\"Only non zero amount\\\");\\n        require(locked_.amount == 0, \\\"Lock exists\\\");\\n        require(unlock_time >= locked_.end, \\\"Only increase lock end\\\"); // from using quitLock, user should increaseAmount instead\\n        require(unlock_time > block.timestamp, \\\"Only future lock end\\\");\\n        require(unlock_time <= block.timestamp + MAXTIME, \\\"Exceeds maxtime\\\");\\n        // Update total supply of token deposited\\n        supply = supply + _value;\\n        // Update lock and voting power (checkpoint)\\n        // Casting in the next block is safe given that we check for _value>0 and the\\n        // totalSupply of tokens is generally significantly lower than the int128.max\\n        // value (considering the max precision of 18 decimals enforced in the constructor)\\n        locked_.amount = locked_.amount + int128(int256(_value));\\n        locked_.end = uint96(unlock_time);\\n        locked_.delegated = locked_.delegated + int128(int256(_value));\\n        locked_.delegatee = msg.sender;\\n        locked[msg.sender] = locked_;\\n        _checkpoint(msg.sender, LockedBalance(0, 0, 0, address(0)), locked_);\\n        // Deposit locked tokens\\n        token.safeTransferFrom(msg.sender, address(this), _value);\\n        emit Deposit(\\n            msg.sender,\\n            _value,\\n            unlock_time,\\n            LockAction.CREATE,\\n            block.timestamp\\n        );\\n    }\\n\\n    /// @notice Locks more tokens in an existing lock\\n    /// @param _value Amount of tokens to add to the lock\\n    /// @dev Does not update the lock's expiration\\n    /// Does record a new checkpoint for the lock\\n    /// `_value` is (unsafely) downcasted from `uint256` to `int128` assuming\\n    /// that the max value is never reached in practice\\n    function increaseAmount(uint256 _value)\\n    external\\n    override\\n    nonReentrant\\n    checkBlocklist\\n    {\\n        LockedBalance memory locked_ = locked[msg.sender];\\n        // Validate inputs\\n        require(_value != 0, \\\"Only non zero amount\\\");\\n        require(locked_.amount > 0, \\\"No lock\\\");\\n        require(locked_.end > block.timestamp, \\\"Lock expired\\\");\\n        // Update total supply of token deposited\\n        supply = supply + _value;\\n        // Update lock\\n        address delegatee = locked_.delegatee;\\n        uint256 unlockTime = locked_.end;\\n        LockAction action = LockAction.INCREASE_AMOUNT;\\n        LockedBalance memory newLocked;\\n        // Casting in the next block is safe given that we check for _value>0 and the\\n        // totalSupply of tokens is generally significantly lower than the int128.max\\n        // value (considering the max precision of 18 decimals enforced in the constructor)\\n        if (delegatee == msg.sender) {\\n            // Undelegated lock\\n            action = LockAction.INCREASE_AMOUNT_AND_DELEGATION;\\n            newLocked = _copyLock(locked_);\\n            newLocked.amount = newLocked.amount + int128(int256(_value));\\n            newLocked.delegated = newLocked.delegated + int128(int256(_value));\\n            locked[msg.sender] = newLocked;\\n        } else {\\n            // Delegated lock, update sender's lock first\\n            locked_.amount = locked_.amount + int128(int256(_value));\\n            locked[msg.sender] = locked_;\\n            // Then, update delegatee's lock and voting power (checkpoint)\\n            locked_ = locked[delegatee];\\n            require(locked_.amount > 0, \\\"Delegatee has no lock\\\");\\n            require(locked_.end > block.timestamp, \\\"Delegatee lock expired\\\");\\n            newLocked = _copyLock(locked_);\\n            newLocked.delegated = newLocked.delegated + int128(int256(_value));\\n            locked[delegatee] = newLocked;\\n            emit Deposit(\\n                delegatee,\\n                _value,\\n                newLocked.end,\\n                LockAction.DELEGATE,\\n                block.timestamp\\n            );\\n        }\\n        // Checkpoint only for delegatee\\n        _checkpoint(delegatee, locked_, newLocked);\\n        // Deposit locked tokens\\n        token.safeTransferFrom(msg.sender, address(this), _value);\\n        emit Deposit(msg.sender, _value, unlockTime, action, block.timestamp);\\n    }\\n\\n    /// @notice Extends the expiration of an existing lock\\n    /// @param _unlockTime New lock expiration time\\n    /// @dev Does not update the amount of tokens locked\\n    /// Does record a new checkpoint for the lock\\n    /// `_unlockTime` is (unsafely) downcasted from `uint256` to `uint96`\\n    /// assuming that the max value is never reached in practice\\n    function increaseUnlockTime(uint256 _unlockTime)\\n    external\\n    override\\n    nonReentrant\\n    checkBlocklist\\n    {\\n        LockedBalance memory locked_ = locked[msg.sender];\\n        uint256 unlock_time = _floorToWeek(_unlockTime); // Locktime is rounded down to weeks\\n        // Validate inputs\\n        require(locked_.amount > 0, \\\"No lock\\\");\\n        require(locked_.end > block.timestamp, \\\"Lock expired\\\");\\n        require(unlock_time > locked_.end, \\\"Only increase lock end\\\");\\n        require(unlock_time <= block.timestamp + MAXTIME, \\\"Exceeds maxtime\\\");\\n        // Update lock\\n        uint256 oldUnlockTime = locked_.end;\\n        locked_.end = uint96(unlock_time);\\n        locked[msg.sender] = locked_;\\n        if (locked_.delegated > 0) {\\n            // Lock with non-zero virtual balance\\n            LockedBalance memory oldLocked = _copyLock(locked_);\\n            oldLocked.end = uint96(oldUnlockTime);\\n            _checkpoint(msg.sender, oldLocked, locked_);\\n        }\\n        emit Deposit(\\n            msg.sender,\\n            0,\\n            unlock_time,\\n            LockAction.INCREASE_TIME,\\n            block.timestamp\\n        );\\n    }\\n\\n    /// @notice Withdraws the tokens of an expired lock\\n    /// Delegated locks need to be undelegated first\\n    function withdraw() external override nonReentrant {\\n        LockedBalance memory locked_ = locked[msg.sender];\\n        // Validate inputs\\n        require(locked_.amount > 0, \\\"No lock\\\");\\n        require(locked_.end <= block.timestamp, \\\"Lock not expired\\\");\\n        require(locked_.delegatee == msg.sender, \\\"Lock delegated\\\");\\n        // Update total supply of token deposited\\n        uint256 value = uint256(uint128(locked_.amount));\\n        supply = supply - value;\\n        // Update lock\\n        LockedBalance memory newLocked = _copyLock(locked_);\\n        newLocked.amount = 0;\\n        newLocked.end = 0;\\n        newLocked.delegated = newLocked.delegated - locked_.amount;\\n        newLocked.delegatee = address(0);\\n        locked[msg.sender] = newLocked;\\n        newLocked.delegated = 0;\\n        // oldLocked can have either expired <= timestamp or zero end\\n        // currentLock has only 0 end\\n        // Both can have >= 0 amount\\n        _checkpoint(msg.sender, locked_, newLocked);\\n        // Send back deposited tokens\\n        token.safeTransfer(msg.sender, value);\\n        emit Withdraw(msg.sender, value, LockAction.WITHDRAW, block.timestamp);\\n    }\\n\\n    /// ~~~~~~~~~~~~~~~~~~~~~~~~~~ ///\\n    ///         DELEGATION         ///\\n    /// ~~~~~~~~~~~~~~~~~~~~~~~~~~ ///\\n\\n    /// @notice Delegate lock and voting power to another lock\\n    /// The receiving lock needs to have a longer lock duration\\n    /// The delegated lock will inherit the receiving lock's expiration\\n    /// @param _addr The address of the lock owner to which to delegate\\n    function delegate(address _addr)\\n    external\\n    override\\n    nonReentrant\\n    checkBlocklist\\n    {\\n        // Different restrictions apply to undelegation\\n        if (_addr == msg.sender) {\\n            _undelegate();\\n            return;\\n        }\\n        LockedBalance memory locked_ = locked[msg.sender];\\n        // Validate inputs\\n        require(!IBlocklist(blocklist).isBlocked(_addr), \\\"Blocked contract\\\");\\n        require(locked_.amount > 0, \\\"No lock\\\");\\n        require(locked_.end > block.timestamp, \\\"Lock expired\\\");\\n        require(locked_.delegatee != _addr, \\\"Already delegated\\\");\\n        // Update locks\\n        int128 value = locked_.amount;\\n        address delegatee = locked_.delegatee;\\n        LockedBalance memory toLocked = locked[_addr];\\n        locked_.delegatee = _addr;\\n        if (delegatee != msg.sender) {\\n            locked[msg.sender] = locked_;\\n            locked_ = locked[delegatee];\\n        }\\n        require(toLocked.amount > 0, \\\"Delegatee has no lock\\\");\\n        require(toLocked.end > block.timestamp, \\\"Delegatee lock expired\\\");\\n        require(toLocked.end >= locked_.end, \\\"Only delegate to longer lock\\\");\\n        _delegate(delegatee, locked_, value, LockAction.UNDELEGATE);\\n        _delegate(_addr, toLocked, value, LockAction.DELEGATE);\\n    }\\n\\n    // Undelegates sender's lock\\n    // Can be executed on expired locks too\\n    // Owner inherits delegatee's unlockTime if it exceeds owner's\\n    function _undelegate() internal {\\n        LockedBalance memory locked_ = locked[msg.sender];\\n        // Validate inputs\\n        require(locked_.amount > 0, \\\"No lock\\\");\\n        require(locked_.delegatee != msg.sender, \\\"Already undelegated\\\");\\n        // Update locks\\n        int128 value = locked_.amount;\\n        address delegatee = locked_.delegatee;\\n        LockedBalance memory fromLocked = locked[delegatee];\\n        locked_.delegatee = msg.sender;\\n        if (locked_.end < fromLocked.end) {\\n            locked_.end = fromLocked.end;\\n        }\\n        _delegate(delegatee, fromLocked, value, LockAction.UNDELEGATE);\\n        _delegate(msg.sender, locked_, value, LockAction.DELEGATE);\\n    }\\n\\n    // Delegates from/to lock and voting power\\n    function _delegate(\\n        address addr,\\n        LockedBalance memory _locked,\\n        int128 value,\\n        LockAction action\\n    ) internal {\\n        LockedBalance memory newLocked = _copyLock(_locked);\\n        if (action == LockAction.DELEGATE) {\\n            newLocked.delegated = newLocked.delegated + value;\\n            emit Deposit(\\n                addr,\\n                uint256(int256(value)),\\n                newLocked.end,\\n                action,\\n                block.timestamp\\n            );\\n        } else {\\n            newLocked.delegated = newLocked.delegated - value;\\n            emit Withdraw(\\n                addr,\\n                uint256(int256(value)),\\n                action,\\n                block.timestamp\\n            );\\n        }\\n        locked[addr] = newLocked;\\n        if (newLocked.amount > 0) {\\n            // Only if lock (from lock) hasn't been withdrawn/quitted\\n            _checkpoint(addr, _locked, newLocked);\\n        }\\n    }\\n\\n    /// ~~~~~~~~~~~~~~~~~~~~~~~~~~ ///\\n    ///         QUIT LOCK          ///\\n    /// ~~~~~~~~~~~~~~~~~~~~~~~~~~ ///\\n\\n    /// @notice Quit an existing lock by withdrawing all tokens less a penalty\\n    /// Use `withdraw` for expired locks\\n    /// @dev Quitters lock expiration remains in place because it might be delegated to\\n    function quitLock() external override nonReentrant {\\n        LockedBalance memory locked_ = locked[msg.sender];\\n        // Validate inputs\\n        require(locked_.amount > 0, \\\"No lock\\\");\\n        require(locked_.end > block.timestamp, \\\"Lock expired\\\");\\n        require(locked_.delegatee == msg.sender, \\\"Lock delegated\\\");\\n        // Update total supply of token deposited\\n        uint256 value = uint256(uint128(locked_.amount));\\n        supply = supply - value;\\n        // Update lock\\n        LockedBalance memory newLocked = _copyLock(locked_);\\n        newLocked.amount = 0;\\n        newLocked.delegated = newLocked.delegated - locked_.amount;\\n        newLocked.delegatee = address(0);\\n        locked[msg.sender] = newLocked;\\n        newLocked.end = 0;\\n        newLocked.delegated = 0;\\n        // oldLocked can have either expired <= timestamp or zero end\\n        // currentLock has only 0 end\\n        // Both can have >= 0 amount\\n        _checkpoint(msg.sender, locked_, newLocked);\\n        // apply penalty\\n        uint256 penaltyRate = _calculatePenaltyRate(locked_.end);\\n        uint256 penaltyAmount = (value * penaltyRate) / 1e18; // quitlock_penalty is in 18 decimals precision\\n        penaltyAccumulated = penaltyAccumulated + penaltyAmount;\\n        uint256 remainingAmount = value - penaltyAmount;\\n        // Send back remaining tokens\\n        token.safeTransfer(msg.sender, remainingAmount);\\n        emit Withdraw(msg.sender, value, LockAction.QUIT, block.timestamp);\\n    }\\n\\n    /// @notice Returns the penalty rate for a given lock expiration\\n    /// @param end The lock's expiration\\n    /// @return The penalty rate applicable to the lock\\n    /// @dev The penalty rate decreases linearly at the same rate as a lock's voting power\\n    /// in order to compensate for votes unlocked without committing to the lock expiration\\n    function getPenaltyRate(uint256 end) external view returns (uint256) {\\n        return _calculatePenaltyRate(end);\\n    }\\n\\n    // Calculate penalty rate\\n    // Penalty rate decreases linearly at the same rate as a lock's voting power\\n    // in order to compensate for votes used\\n    function _calculatePenaltyRate(uint256 end)\\n    internal\\n    view\\n    returns (uint256)\\n    {\\n        // We know that end > block.timestamp because expired locks cannot be quitted\\n        return ((end - block.timestamp) * maxPenalty) / MAXTIME;\\n    }\\n\\n    /// @notice Collect accumulated penalty from lock quitters\\n    /// Everyone can collect but penalty is sent to `penaltyRecipient`\\n    function collectPenalty() external {\\n        uint256 amount = penaltyAccumulated;\\n        penaltyAccumulated = 0;\\n        address recipient = penaltyRecipient;\\n        token.safeTransfer(recipient, amount);\\n        emit CollectPenalty(amount, recipient);\\n    }\\n\\n    /// ~~~~~~~~~~~~~~~~~~~~~~~~~~ ///\\n    ///            GETTERS         ///\\n    /// ~~~~~~~~~~~~~~~~~~~~~~~~~~ ///\\n\\n    // Creates a copy of a lock\\n    function _copyLock(LockedBalance memory _locked)\\n    internal\\n    pure\\n    returns (LockedBalance memory)\\n    {\\n        return\\n            LockedBalance({\\n            amount: _locked.amount,\\n            end: _locked.end,\\n            delegatee: _locked.delegatee,\\n            delegated: _locked.delegated\\n        });\\n    }\\n\\n    // Floors a timestamp to the nearest weekly increment\\n    function _floorToWeek(uint256 _t) internal pure returns (uint256) {\\n        return (_t / WEEK) * WEEK;\\n    }\\n\\n    // Uses binarysearch to find the most recent point history preceeding block\\n    // Find the most recent point history before _block\\n    // Do not search pointHistories past _maxEpoch\\n    function _findBlockEpoch(uint256 _block, uint256 _maxEpoch)\\n    internal\\n    view\\n    returns (uint256)\\n    {\\n        // Binary search\\n        uint256 min = 0;\\n        uint256 max = _maxEpoch;\\n        // Will be always enough for 128-bit numbers\\n        for (uint256 i; i < 128; ) {\\n            if (min >= max) break;\\n            uint256 mid = (min + max + 1) / 2;\\n            if (pointHistory[mid].blk <= _block) {\\n                min = mid;\\n            } else {\\n                max = mid - 1;\\n            }\\n            unchecked { ++i; }\\n        }\\n        return min;\\n    }\\n\\n    // Uses binarysearch to find the most recent user point history preceeding block\\n    // _addr is the lock owner for which to search\\n    // Find the most recent point history before _block\\n    function _findUserBlockEpoch(address _addr, uint256 _block)\\n    internal\\n    view\\n    returns (uint256)\\n    {\\n        uint256 min = 0;\\n        uint256 max = userPointEpoch[_addr];\\n        for (uint256 i; i < 128; ) {\\n            if (min >= max) {\\n                break;\\n            }\\n            uint256 mid = (min + max + 1) / 2;\\n            if (userPointHistory[_addr][mid].blk <= _block) {\\n                min = mid;\\n            } else {\\n                max = mid - 1;\\n            }\\n            unchecked { ++i; }\\n        }\\n        return min;\\n    }\\n\\n    /// @notice Get a lock's current voting power\\n    /// @param _owner The address of the lock owner for which to return voting power\\n    /// @return Voting power of the lock\\n    function balanceOf(address _owner) public view override returns (uint256) {\\n        uint256 epoch = userPointEpoch[_owner];\\n        if (epoch == 0) {\\n            return 0;\\n        }\\n        // Casting is safe given that checkpoints are recorded in the past\\n        // and are more frequent than every int128.max seconds\\n        Point memory lastPoint = userPointHistory[_owner][epoch];\\n        lastPoint.bias =\\n            lastPoint.bias -\\n            (lastPoint.slope * int128(int256(block.timestamp - lastPoint.ts)));\\n        if (lastPoint.bias < 0) {\\n            lastPoint.bias = 0;\\n        }\\n        return uint256(uint128(lastPoint.bias));\\n    }\\n\\n    /// @notice Get a lock's voting power at a given block number\\n    /// @param _owner The address of the lock owner for which to return voting power\\n    /// @param _blockNumber The block at which to calculate the lock's voting power\\n    /// @return uint256 Voting power of the lock\\n    function balanceOfAt(address _owner, uint256 _blockNumber)\\n    public\\n    view\\n    override\\n    returns (uint256)\\n    {\\n        require(_blockNumber <= block.number, \\\"Only past block number\\\");\\n\\n        // Get most recent user Point to block\\n        uint256 userEpoch = _findUserBlockEpoch(_owner, _blockNumber);\\n        if (userEpoch == 0) {\\n            return 0;\\n        }\\n        Point memory upoint = userPointHistory[_owner][userEpoch];\\n\\n        // Get most recent global Point to block\\n        uint256 maxEpoch = globalEpoch;\\n        uint256 epoch = _findBlockEpoch(_blockNumber, maxEpoch);\\n        Point memory point0 = pointHistory[epoch];\\n\\n        // Calculate delta (block & time) between user Point and target block\\n        // Allowing us to calculate the average seconds per block between\\n        // the two points\\n        uint256 dBlock = 0;\\n        uint256 dTime = 0;\\n        if (epoch < maxEpoch) {\\n            Point memory point1 = pointHistory[epoch + 1];\\n            dBlock = point1.blk - point0.blk;\\n            dTime = point1.ts - point0.ts;\\n        } else {\\n            dBlock = block.number - point0.blk;\\n            dTime = block.timestamp - point0.ts;\\n        }\\n        // (Deterministically) Estimate the time at which block _blockNumber was mined\\n        uint256 blockTime = point0.ts;\\n        if (dBlock != 0) {\\n            blockTime =\\n                blockTime +\\n                ((dTime * (_blockNumber - point0.blk)) / dBlock);\\n        }\\n        // Current Bias = most recent bias - (slope * time since update)\\n        // Casting is safe given that checkpoints are recorded in the past\\n        // and are more frequent than every int128.max seconds\\n        upoint.bias =\\n            upoint.bias -\\n            (upoint.slope * int128(int256(blockTime - upoint.ts)));\\n        if (upoint.bias >= 0) {\\n            return uint256(uint128(upoint.bias));\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    // Calculate total supply of voting power at a given time _t\\n    // _point is the most recent point before time _t\\n    // _t is the time at which to calculate supply\\n    function _supplyAt(Point memory _point, uint256 _t)\\n    internal\\n    view\\n    returns (uint256)\\n    {\\n        Point memory lastPoint = _point;\\n        // Floor the timestamp to weekly interval\\n        uint256 iterativeTime = _floorToWeek(lastPoint.ts);\\n        // Iterate through all weeks between _point & _t to account for slope changes\\n        for (uint256 i; i < 255; ) {\\n            iterativeTime = iterativeTime + WEEK;\\n            int128 dSlope = 0;\\n            // If week end is after timestamp, then truncate & leave dSlope to 0\\n            if (iterativeTime > _t) {\\n                iterativeTime = _t;\\n            }\\n                // else get most recent slope change\\n            else {\\n                dSlope = slopeChanges[iterativeTime];\\n            }\\n\\n            // Casting is safe given that lastPoint.ts < iterativeTime and\\n            // iteration goes over 255 weeks max\\n            lastPoint.bias =\\n                lastPoint.bias -\\n                (lastPoint.slope *\\n                    int128(int256(iterativeTime - lastPoint.ts)));\\n            if (iterativeTime == _t) {\\n                break;\\n            }\\n            lastPoint.slope = lastPoint.slope + dSlope;\\n            lastPoint.ts = iterativeTime;\\n\\n            unchecked { ++i; }\\n        }\\n\\n        if (lastPoint.bias < 0) {\\n            lastPoint.bias = 0;\\n        }\\n        return uint256(uint128(lastPoint.bias));\\n    }\\n\\n    /// @notice Calculate current total supply of voting power\\n    /// @return Current totalSupply\\n    function totalSupply() public view override returns (uint256) {\\n        uint256 epoch_ = globalEpoch;\\n        Point memory lastPoint = pointHistory[epoch_];\\n        return _supplyAt(lastPoint, block.timestamp);\\n    }\\n\\n    /// @notice Calculate total supply of voting power at a given block number\\n    /// @param _blockNumber The block number at which to calculate total supply\\n    /// @return totalSupply of voting power at the given block number\\n    function totalSupplyAt(uint256 _blockNumber)\\n    public\\n    view\\n    override\\n    returns (uint256)\\n    {\\n        require(_blockNumber <= block.number, \\\"Only past block number\\\");\\n\\n        uint256 epoch = globalEpoch;\\n        uint256 targetEpoch = _findBlockEpoch(_blockNumber, epoch);\\n\\n        Point memory point = pointHistory[targetEpoch];\\n\\n        // If point.blk > _blockNumber that means we got the initial epoch & contract did not yet exist\\n        if (point.blk > _blockNumber) {\\n            return 0;\\n        }\\n\\n        uint256 dTime = 0;\\n        if (targetEpoch < epoch) {\\n            Point memory pointNext = pointHistory[targetEpoch + 1];\\n            if (point.blk != pointNext.blk) {\\n                dTime =\\n                    ((_blockNumber - point.blk) * (pointNext.ts - point.ts)) /\\n                    (pointNext.blk - point.blk);\\n            }\\n        } else if (point.blk != block.number) {\\n            dTime =\\n                ((_blockNumber - point.blk) * (block.timestamp - point.ts)) /\\n                (block.number - point.blk);\\n        }\\n        // Now dTime contains info on how far are we beyond point\\n        return _supplyAt(point, point.ts + dTime);\\n    }\\n}\",\"keccak256\":\"0x6f76959de4c3c6d600091feb49d2580d1dc31d9ee55267882f6f0ab050ff1aed\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/staking/interfaces/IBlocklist.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.3;\\n\\ninterface IBlocklist {\\n    function isBlocked(address addr) external view returns (bool);\\n}\",\"keccak256\":\"0xf1335668548a344e7f179a02c95ca367d19a7987a375934bf9b461af43d48f7e\",\"license\":\"Apache-2.0\"},\"contracts/staking/interfaces/IVotingEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.3;\\n\\ninterface IVotingEscrow {\\n    function createLock(uint256 _value, uint256 _unlockTime) external;\\n\\n    function increaseAmount(uint256 _value) external;\\n\\n    function increaseUnlockTime(uint256 _unlockTime) external;\\n\\n    function withdraw() external;\\n\\n    function delegate(address _addr) external;\\n\\n    function quitLock() external;\\n\\n    function balanceOf(address _owner) external view returns (uint256);\\n\\n    function balanceOfAt(address _owner, uint256 _blockNumber)\\n    external\\n    view\\n    returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function totalSupplyAt(uint256 _blockNumber)\\n    external\\n    view\\n    returns (uint256);\\n\\n    function forceUndelegate(address _addr) external;\\n}\\n\",\"keccak256\":\"0x2041a3a93f3f5b3d3498ed12c2d98f440b55566cff72cba11233b95f320e83ab\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60a060409080825234620004ef5762003b5c8038038091620000228285620004f4565b833981019060a081830312620004ef576200003d816200052e565b916020906200004e8284016200052e565b916200005c8685016200052e565b606085015190946001600160401b0391828111620004ef57846200008291830162000543565b936080820151838111620004ef576200009c920162000543565b60016000818155670de0b6b3a76400006003556001600160a01b0397881660808181528b519397949390810186811182821017620004db57908792918d528381528383820152428d820152606043910152826008554260095543600a558b519687809263313ce56760e01b82526004998a915afa908115620004d15783916200048e575b5060ff60129116806729a2241af62c000e55116200044c57835185811162000439576729a2241af62c000c908154958987811c971680156200042e575b848810146200041b578190601f97888111620003c8575b5084908883116001146200036457869262000358575b5050600019600383901b1c191690891b1790555b825194851162000345576729a2241af62c000d958654908882811c921680156200033a575b83831014620003275750908185879695949311620002ce575b5080938511600114620002675750926200025b575b5050600019600383901b1c191690831b1790555b8260018060a01b031994168482541617905516906002541617600255516135a19081620005bb82396080518181816101e2015281816108e201528181610fa5015281816112ba0152818161138b01526117fd0152f35b015190503880620001f1565b868252808220889650939291601f198616915b828210620002b457505084116200029a575b505050811b01905562000205565b015160001960f88460031b161c191690553880806200028c565b84840151865589979095019493840193908101906200027a565b9091929394508683528183208580880160051c8201928489106200031d575b9188978b9297969594930160051c01915b8281106200030e575050620001dc565b8481558897508a9101620002fe565b92508192620002ed565b634e487b7160e01b845260229052602483fd5b91607f1691620001c3565b634e487b7160e01b825260418652602482fd5b0151905038806200018a565b8487528587208c94509190601f198416885b88828210620003b1575050841162000397575b505050811b0190556200019e565b015160001960f88460031b161c1916905538808062000389565b8385015186558f9790950194938401930162000376565b9091508386528486208880850160051c82019287861062000411575b918d91869594930160051c01915b8281106200040257505062000174565b8881558594508d9101620003f2565b92508192620003e4565b634e487b7160e01b855260228952602485fd5b96607f16966200015d565b634e487b7160e01b835260418752602483fd5b856064918c519162461bcd60e51b8352820152601460248201527f45786365656473206d617820646563696d616c730000000000000000000000006044820152fd5b90508181813d8311620004c9575b620004a88183620004f4565b81010312620004c5575160ff81168103620004c55760ff62000120565b8280fd5b503d6200049c565b8c513d85823e3d90fd5b634e487b7160e01b84526041600452602484fd5b600080fd5b601f909101601f19168101906001600160401b038211908210176200051857604052565b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b0382168203620004ef57565b919080601f84011215620004ef578251906001600160401b0382116200051857604051916020916200057f601f8301601f1916840185620004f4565b818452828287010111620004ef5760005b818110620005a657508260009394955001015290565b85810183015184820184015282016200059056fe608080604052600436101561001357600080fd5b60003560e01c908163012caae114611b0657508063047fc9aa14611ae8578063059f8b1614611ac557806306fdde0314611a1c57806315456eba1461161a57806318160ddd146115db578063237922791461158f578063313ce5671461156a57806334d901a4146114f7578063391cc9f6146113b857806339f22f6b1461133c5780633ccfd60b146111725780634684532e146111065780634ee2cd7e146110df5780635200e79e146110c15780635719098b146110a35780635c19a95c1461101557806370a0823114610ff257806375c54eda14610df05780637c616fe614610c2257806381fc83bb14610be15780638ad4c44714610b945780638da5cb5b14610b6b57806392e9352614610b3257806395d89b4114610a40578063981b24d014610a1a578063a69df4b5146109c8578063b52c05fe14610706578063c2c4c5c114610450578063c4698ee514610414578063cbf9fe5f146103a9578063d64e539614610380578063e489071114610314578063ee00ef3a146102f5578063f2fde38b14610288578063f4359ce51461026a578063f52a36f714610234578063f6ab9d81146102165763fc0c546a146101cc57600080fd5b34610211576000366003190112610211576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b600080fd5b34610211576000366003190112610211576020600454604051908152f35b34610211576020366003190112610211576004356000526729a2241af62c000a6020526020604060002054600f0b604051908152f35b3461021157600036600319011261021157602060405162093a808152f35b34610211576020366003190112610211576102a1611bc7565b600154906001600160a01b03906102bb3383851614611c16565b166001600160a01b03199190911681176001557fcfaaa26691e16e66e73290fc725eee1a6b4e0e693a1640484937aac25ffb55a4600080a2005b346102115760003660031901126102115760206040516303c267008152f35b346102115760203660031901126102115761032d611bc7565b6001546001600160a01b0391906103479083163314611c16565b168060018060a01b031960025416176002557ff5fad27d0b1a5f45f08a652a1e4502d75974a852e28d3502d4a978b7cfd900ba600080a2005b34610211576000366003190112610211576005546040516001600160a01b039091168152602090f35b34610211576020366003190112610211576001600160a01b036103ca611bc7565b166000526729a2241af62c000b60205260806040600020600181549101546040519180600f0b8352831d600f0b602083015260018060601b038116604083015260601c6060820152f35b34610211576020366003190112610211576060610437610432611bc7565b611cab565b9060405192600f0b8352600f0b60208301526040820152f35b3461021157600036600319011261021157610469611c4f565b50610472611c4f565b5061047b611c4f565b5060075460405161048b81611b2a565b6000815260209060008282015242604082015243606082015290826106df575b604082019081519060608401918251906040516104c781611b2a565b600081526000848201526060604082019183835201928352600090865142116106a2575b6104f9839796959493612f7f565b936000975b60ff891061054b575b50505050505050505081600755670de0b6b3a76400008210156105355760036105339202600801611d67565b005b634e487b7160e01b600052603260045260246000fd5b62093a80869798999b95960180971161065357600096804281111561067b57505060008a816105b1429a8b935b6105a461059b61058d8a8401998a5198611d13565b96600f97880b90880b611d20565b8251870b611de2565b850b90528551840b611e07565b820b918285528d51900b12610673575b12610669575b50859386895285519a6105f9670de0b6b3a76400009c8d6105f26105ec88518d611d13565b89611daf565b0490611d37565b895260019182810180911161065357809c428a1460001461063157505050505050505050509050439052828080808080808080610507565b811015610535578b60036106489202600801611d67565b0197969594936104fe565b634e487b7160e01b600052601160045260246000fd5b600090528a6105c7565b818c526105c1565b9097506000526729a2241af62c000a8252600087816105b18d6040832054600f0b90610578565b90506106af855143611d13565b670de0b6b3a76400009080820291820403610653576106d9906106d3885142611d13565b90611dc2565b906104eb565b9050670de0b6b3a76400008210156105355761070060038302600801611c74565b906104ab565b3461021157604036600319011261021157600435610722612564565b60055460405163fbac395160e01b8152336004820152602092918390829060249082906001600160a01b03165afa80156109bc576107699160009161098f575b5015612449565b610774602435612f7f565b90336000526729a2241af62c000b928381526040600020916040519261079984611b2a565b8054936001600f9286840b83528583019660801d840b8752015493604082019560018060601b03988987168852606084019660601c87526107db861515612488565b8351850b61095c576107f28a8951168a10156124cb565b42891115610920576303c26700420196874211610653578a60008051602061352c833981519152996108a06108da9860019560009f8f610870916109169f918f9261083f90821115612510565b61084b83600654611d37565b6006558d6108608151880b94880b8095611e07565b870b90521686528951840b611e07565b820b885233808752600052885260408f2089518154608089901b8990039182169119161781559651900b86611d44565b511690828060601b0319905160601b161791015587604051916108c283611b2a565b81835282015287604082015287606082015233611e2c565b6109068130337f00000000000000000000000000000000000000000000000000000000000000006125ba565b604051918291339542918461254e565b0390a36001600055005b60405162461bcd60e51b815260048101849052601460248201527313db9b1e48199d5d1d5c99481b1bd8dac8195b9960621b6044820152606490fd5b60405162461bcd60e51b815260048101849052600b60248201526a4c6f636b2065786973747360a81b6044820152606490fd5b6109af9150843d86116109b5575b6109a78183611b5b565b810190612431565b84610762565b503d61099d565b6040513d6000823e3d90fd5b34610211576000366003190112610211576109ee60018060a01b03600154163314611c16565b60006003557f70e3fffea7bbb557facdee48ed7f7af5179030adef9ad0c876df039a718f359e600080a1005b34610211576020366003190112610211576020610a386004356133ec565b604051908152f35b34610211576000366003190112610211576040516000906729a2241af62c000d805490600182811c91818416938415610b28575b6020948585108114610b1257848752908115610af05750600114610ab3575b610aaf85610aa381890382611b5b565b60405191829182611b7e565b0390f35b6000908152838120939550925b828410610add5750505081610aaf93610aa3928201019385610a93565b8054858501870152928501928101610ac0565b60ff191686860152505050151560051b8201019150610aa381610aaf85610a93565b634e487b7160e01b600052602260045260246000fd5b92607f1692610a74565b346102115760203660031901126102115760206303c26700610b62610b5942600435611d13565b60035490611daf565b04604051908152f35b34610211576000366003190112610211576001546040516001600160a01b039091168152602090f35b3461021157602036600319011261021157600435670de0b6b3a7640000811015610211576003028060080154610aaf600a60098401549301546040519383859460801d90600f0b85611bf4565b34610211576020366003190112610211576001600160a01b03610c02611bc7565b166000526729a2241af62c00096020526020604060002054604051908152f35b346102115760208060031936011261021157610c3c612564565b60055460405163fbac395160e01b8152336004820152908290829060249082906001600160a01b03165afa80156109bc57610c7f91600091610dd3575015612449565b336000526729a2241af62c000b90818152604060002060405192610ca284611b2a565b600182549283600f0b86528486019360801d600f0b84520154936040810160018060601b03908187168152606083019660601c8752610ce2600435612f7f565b94610cf360008551600f0b136127f1565b610d01838351164210612827565b610d0f8383511687116124cb565b6303c26700420180421161065357600398600094610d316001938a1115612510565b8085511697818a1686523387528a5260408620938751848060801b031986541690858060801b031617855551600f0b94610d6b8686611d44565b511690828060601b0319905160601b161791015513610db3575b5050604051916000835282015242604082015260008051602061352c83398151915260603392a36001600055005b610dcc91610dc082612f26565b90604082015233611e2c565b8380610d85565b610dea9150833d85116109b5576109a78183611b5b565b83610762565b3461021157600036600319011261021157610e09612564565b336000526729a2241af62c000b806020526040600020604051610e2b81611b2a565b815490600f9282840b9283835260801d840b602083015260010154926040820193600160601b60019003938482168652606084019160601c8252600012610e71906127f1565b838551164210610e8090612827565b51610e95906001600160a01b0316331461290c565b81516006546001600160801b039182169691929190610eb5908890611d13565b600655610ec184612f26565b926000845260208401928351810b8651820b610edc91611de2565b810b8452606085019260008452336000526020526040600020918551600160801b600190031984541691161782558351900b610f189082611d44565b604084018051925160601b6001600160601b03191692871692909217600191909101556000908190529052610f4d9133611e2c565b4291511690610f5b91611d13565b600354610f6791611daf565b6303c267009004610f789082611daf565b670de0b6b3a764000090048060045490610f9191611d37565b600455610f9e9082611d13565b610fc990337f0000000000000000000000000000000000000000000000000000000000000000612949565b6040519081524260208201523360008051602061354c8339815191526040600593a36001600055005b34610211576020366003190112610211576020610a38611010611bc7565b612f99565b34610211576020366003190112610211576024611030611bc7565b611038612564565b60055460405163fbac395160e01b81523360048201529260209184919082906001600160a01b03165afa9182156109bc576110849261107f9160009161108b575015612449565b612987565b6001600055005b6109af915060203d81116109b5576109a78183611b5b565b34610211576000366003190112610211576020600754604051908152f35b34610211576000366003190112610211576020600354604051908152f35b34610211576040366003190112610211576020610a386110fd611bc7565b60243590613077565b346102115760203660031901126102115761111f611bc7565b6001546001600160a01b0391906111399083163314611c16565b168060018060a01b031960055416176005557fb089f68ad820a83477076ed7bca5d94c6a56c0c85e82b7ed8df87507a1d6198b600080a2005b346102115760003660031901126102115761118b612564565b336000526729a2241af62c000b602090808252600060408120604051906111b182611b2a565b80546001600f9282840b9283865260801d840b88860152015490604084016111f160018060601b039687938486168452606088019560601c8652136127f1565b511642106113045751600495936112b393909290916000919061121e906001600160a01b0316331461290c565b60018060801b03600181855116986112388a600654611d13565b60065561124486612f26565b96858852604088018681526112988b8a01966112678851820b8b51830b90611de2565b810b885260608b0194898652338a528d5260408920968b51878060801b031989541691161787558751900b86611d44565b511690828060601b0319905160601b16179101555233611e2c565b6112de82337f0000000000000000000000000000000000000000000000000000000000000000612949565b604051918252429082015260008051602061354c83398151915260403392a36001600055005b60405162461bcd60e51b815260048101879052601060248201526f131bd8dac81b9bdd08195e1c1a5c995960821b6044820152606490fd5b346102115760003660031901126102115760045460006004557fabef55bd3931568707a1758ae67679779c66d9deaa23e8bbad8974e421035d60602060018060a01b0360025416926113af81857f0000000000000000000000000000000000000000000000000000000000000000612949565b604051908152a2005b3461021157602080600319360112610211576113d2611bc7565b6005549091906001600160a01b0390811633036114c157821690816000526729a2241af62c000b928382526040600020926040519261141084611b2a565b600185549586600f0b9687875260801d600f0b83870152015490604085019160018060601b0390818116845260601c90606087019382855285831415806114b7575b61145857005b610533996114b2968a9661146a611c4f565b5052836000528452600160406000206040519561148687611b2a565b815480600f0b885260801d600f0b9087015201549182169182604086015260601c606085015252612d8f565b612e60565b5060008913611452565b60405162461bcd60e51b815260048101839052600e60248201526d13db9b1e48109b1bd8dadb1a5cdd60921b6044820152606490fd5b3461021157604036600319011261021157611510611bc7565b6001600160a01b031660009081526729a2241af62c000860205260409020602435633b9aca008110156102115761154691611bdd565b508054610aaf600260018401549301546040519383859460801d90600f0b85611bf4565b346102115760003660031901126102115760206729a2241af62c000e54604051908152f35b34610211576020366003190112610211576001600160a01b036115b0611bc7565b166000526729a2241af62c000b602052602060018060601b0360016040600020015416604051908152f35b3461021157600036600319011261021157600754670de0b6b3a764000081101561053557610a38611613600360209302600801611c74565b429061330a565b3461021157602036600319011261021157611633612564565b60055460405163fbac395160e01b81523360048201526001600160a01b03916020908290602490829086165afa80156109bc5761167891600091611a03575015612449565b336000526729a2241af62c000b602052604060002060405161169981611b2a565b600182549283600f0b8352602083019360801d600f0b8452015460018060601b038116604083015260601c606082015280926116d86004351515612488565b6116e860008351600f0b136127f1565b6040820151611701906001600160601b03164210612827565b61170f600435600654611d37565b600655606082015160408301516001600160601b03169391169160019190611735611c4f565b50338403611863575050506117f39060029361175081612f26565b918251600f0b611766600435600f0b8092611e07565b600f0b845261177d60208501918251600f0b611e07565b600f90810b82523360009081526729a2241af62c000b60205260409020855181546001600160801b0319166001600160801b0390911617815591516117c3910b82611d44565b6040840151606085810151901b6001600160601b0319166001600160601b03919091161760019190910155611e2c565b61182160043530337f00000000000000000000000000000000000000000000000000000000000000006125ba565b600882101561184d5760008051602061352c83398151915260405180610916339442906004358461254e565b634e487b7160e01b600052602160045260246000fd5b6117f3939295508061188160019251600f0b600435600f0b90611e07565b600f0b8152336000526729a2241af62c000b6020526118c06040600020938251848060801b031986541690858060801b031617855551600f0b84611d44565b818060601b036040820151169060608380821b031991015160601b16179101558060005260406000206119536040516118f881611b2a565b600183549384600f0b83528460801d600f0b6020840152015460018060601b038116604083015260601c606082015261193760008294600f0b13612862565b61194e4260018060601b03604084015116116128a6565b612f26565b9160068160008051602061352c8339815191526119fb60208701611980600435600f0b8251600f0b611e07565b600f90810b825260008581526729a2241af62c000b60205260409020895181546001600160801b0319166001600160801b0390911617815591516119c5910b82611d44565b60018060601b03604089015116906001808060601b031960608b015160601b1683179101556040519182914290600435846128eb565b0390a3611e2c565b610dea915060203d6020116109b5576109a78183611b5b565b34610211576000366003190112610211576040516000906729a2241af62c000c805490600182811c91818416938415611abb575b6020948585108114610b1257848752908115610af05750600114611a7e57610aaf85610aa381890382611b5b565b6000908152838120939550925b828410611aa85750505081610aaf93610aa3928201019385610a93565b8054858501870152928501928101611a8b565b92607f1692611a50565b34610211576000366003190112610211576020604051670de0b6b3a76400008152f35b34610211576000366003190112610211576020600654604051908152f35b34610211576000366003190112610211576002546001600160a01b03168152602090f35b608081019081106001600160401b03821117611b4557604052565b634e487b7160e01b600052604160045260246000fd5b601f909101601f19168101906001600160401b03821190821017611b4557604052565b6020808252825181830181905290939260005b828110611bb357505060409293506000838284010152601f8019910116010190565b818101860151848201604001528501611b91565b600435906001600160a01b038216820361021157565b90633b9aca00811015610535576003020190600090565b909493926060926080830196600f0b8352600f0b602083015260408201520152565b15611c1d57565b60405162461bcd60e51b815260206004820152600a60248201526927b7363c9037bbb732b960b11b6044820152606490fd5b60405190611c5c82611b2a565b60006060838281528260208201528260408201520152565b90604051611c8181611b2a565b606060028294805480600f0b855260801d600f0b6020850152600181015460408501520154910152565b6001600160a01b031660009081526729a2241af62c000960205260408120548015611d0c57611cec906040611cf2936729a2241af62c000860205220611bdd565b50611c74565b908151600f0b9060406020840151600f0b93015191929190565b5080918190565b9190820391821161065357565b90600f0b90600f0b029081600f0b91820361065357565b9190820180921161065357565b80546001600160801b031660809290921b6001600160801b031916919091179055565b815181546001600160801b0319166001600160801b039091161781556020820151909160029160609190611d9e90600f0b85611d44565b604081015160018501550151910155565b8181029291811591840414171561065357565b8115611dcc570490565b634e487b7160e01b600052601260045260246000fd5b600f91820b910b039060016001607f1b0319821260016001607f1b0383131761065357565b600f91820b910b019060016001607f1b0319821260016001607f1b0383131761065357565b9190611e36611c4f565b92611e3f611c4f565b9160009384926007549060018060a01b03169081612251575b604051611e6481611b2a565b60008152600060208201524260408201524360608201528161222c575b6040810151606082015160405190611e9882611b2a565b600082526000602083015260408201908382526060830152600092604085015142116121da575b929190611ecb84612f7f565b926000945b60ff8610612090575b5050505050508160075582612013575b670de0b6b3a7640000821015610535576003611f089202600801611d67565b611f15575b505050505050565b60408092019560018060601b0395428789511611611f9e575b50500193838551169042821115611f0d5751841610611f4f575b8080611f0d565b6020611f60920151600f0b90611de2565b91511660009081526729a2241af62c000a6020526040902080546001600160801b0319166001600160801b0390921691909117905538808080611f48565b6020611faf920151600f0b90611e07565b8583830151168688511614611ffc575b8651861660009081526729a2241af62c000a60205283902080546001600160801b0319166001600160801b03929092169190911790553880611f2e565b61200e906020860151600f0b90611de2565b611fbf565b600087602083016120428c602061203781855196015195600f96870b90870b611e07565b910151840b90611de2565b820b8152826120678d61205d8d8851870b9051870b90611e07565b9051850b90611de2565b830b928386528251900b12612087575b501215611ee95760008152611ee9565b82905238612077565b62093a808596989394950180961161065357869560009080428111156121aa57505060209660006120f881936120eb6120e26120d4429d8e975b0198895197611d13565b95600f96870b90870b611d20565b8d51860b611de2565b840b8c528551840b611e07565b820b918285528a51900b126121a2575b12612198575b50849185604088015260608501519761213f670de0b6b3a7640000998a6105f261213989518c611d13565b87611daf565b606089015260019182810180911161065357809942891460001461217757505050505050505050436060820152388080808080611ed9565b8110156105355788600361218e9202600801611d67565b0194939291611ed0565b600090523861210e565b818952612108565b6120f882996120eb6120e26120d4602060408960009a988b99526729a2241af62c000a83522054600f0b946120ca565b926121e9606086015143611d13565b90670de0b6b3a764000091808302928304036122185750612212906106d3604087015142611d13565b92611ebf565b634e487b7160e01b81526011600452602490fd5b50670de0b6b3a76400008110156105355761224c60038202600801611c74565b611e81565b604084810180516001600160601b03908116421080612421575b6123ef575b8286019942828c511611806123df575b6123a4575b8581526729a2241af62c000980602052848220549060018201809211612390578783526020528085832055848b01904282526122d960608d01914383528985526729a2241af62c0008602052878520611bdd565b92909261237c578c5183546001600160801b0319166001600160801b0390911617835560208d0151859488949093909260029261231990600f0b85611d44565b516001840155519101558285511681526729a2241af62c000a6020522054600f0b9a5116918261234d575b50505050611e58565b9091929397505116811460001461236c57505085935b38808080612344565b60005260002054600f0b93612363565b634e487b7160e01b84526004849052602484fd5b634e487b7160e01b83526011600452602483fd5b6123d56303c267006020890151600f0b05600f0b8060208d01526123cc8d8542915116611d13565b600f0b90611d20565b600f0b8a52612285565b50806020880151600f0b13612280565b61241760208c6303c26700828b0151600f0b05600f0b91829101526123cc4284865116611d13565b600f0b8b52612270565b50896020880151600f0b1361226b565b90816020910312610211575180151581036102115790565b1561245057565b60405162461bcd60e51b815260206004820152601060248201526f109b1bd8dad9590818dbdb9d1c9858dd60821b6044820152606490fd5b1561248f57565b60405162461bcd60e51b815260206004820152601460248201527313db9b1e481b9bdb881e995c9bc8185b5bdd5b9d60621b6044820152606490fd5b156124d257565b60405162461bcd60e51b815260206004820152601660248201527513db9b1e481a5b98dc99585cd9481b1bd8dac8195b9960521b6044820152606490fd5b1561251757565b60405162461bcd60e51b815260206004820152600f60248201526e45786365656473206d617874696d6560881b6044820152606490fd5b6040919493926060820195825260208201520152565b600260005414612575576002600055565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b6040516323b872dd60e01b60208201526001600160a01b03928316602482015292909116604483015260648083019390935291815260a08101918183106001600160401b03841117611b455761261292604052612614565b565b604080516001600160401b0394936001600160a01b03909316929091820185811183821017611b45576040526020928383527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564848401526000808386829551910182855af1903d1561274f573d96871161273b576126b3949596604051906126a588601f19601f8401160183611b5b565b81528093873d92013e61275c565b805190828215928315612723575b505050156126cc5750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b6127339350820181019101612431565b3882816126c1565b634e487b7160e01b83526041600452602483fd5b91506126b3939495506060915b919290156127be5750815115612770575090565b3b156127795790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156127d15750805190602001fd5b60405162461bcd60e51b81529081906127ed9060048301611b7e565b0390fd5b156127f857565b60405162461bcd60e51b81526020600482015260076024820152664e6f206c6f636b60c81b6044820152606490fd5b1561282e57565b60405162461bcd60e51b815260206004820152600c60248201526b131bd8dac8195e1c1a5c995960a21b6044820152606490fd5b1561286957565b60405162461bcd60e51b815260206004820152601560248201527444656c65676174656520686173206e6f206c6f636b60581b6044820152606490fd5b156128ad57565b60405162461bcd60e51b815260206004820152601660248201527511195b1959d85d1959481b1bd8dac8195e1c1a5c995960521b6044820152606490fd5b9081526001600160601b039091166020820152604081019190915260600190565b1561291357565b60405162461bcd60e51b815260206004820152600e60248201526d131bd8dac819195b1959d85d195960921b6044820152606490fd5b60405163a9059cbb60e01b60208201526001600160a01b0390921660248301526044808301939093529181526126129161298282611b2a565b612614565b6001600160a01b03818116338114612c6257336000526729a2241af62c000b602052604060002092604051936129bc85611b2a565b6001815491600f9280840b885260801d830b6020880152015460018060601b038116604087015260601c606086015284906024602086600554166040519283809263fbac395160e01b82528960048301525afa80156109bc57612a2791600091612c43575015612449565b612a3660008751830b136127f1565b6040860151612a4f906001600160601b03164210612827565b838560608801511614612c0a578551810b9460608701511695846000526729a2241af62c000b602052604060002094600160405196612a8d88611b2a565b805480860b895260801d850b602089015201546001600160601b0381166040880152606090811c81880152820152338703612b59575b506000612ad4918551900b13612862565b612aeb4260018060601b03604086015116116128a6565b604083810151908201516001600160601b03918216911611612b1557836114b29161261296612d8f565b60405162461bcd60e51b815260206004820152601c60248201527b4f6e6c792064656c656761746520746f206c6f6e676572206c6f636b60201b6044820152606490fd5b909150336000526729a2241af62c000b60205260016040600020918051828060801b031984541690838060801b0316178355612b9b6020820151850b84611d44565b818060601b036040820151169060608380821b031991015160601b161791015584600052612ad4600060408120600160405191612bd783611b2a565b805480870b845260801d860b602084015201546001600160601b0381166040830152606090811c90820152929150612ac3565b60405162461bcd60e51b8152602060048201526011602482015270105b1c9958591e4819195b1959d85d1959607a1b6044820152606490fd5b612c5c915060203d6020116109b5576109a78183611b5b565b38610762565b50919050336000526729a2241af62c000b91826020526040928360002091845191612c8c83611b2a565b600184549485600f0b9586865260801d600f0b6020860152015490868401612ccc600060018060601b03978886168452606088019560601c8652136127f1565b338484511614612d5557906126129697612d479493928651600f0b978895855116938460005260205282600020946001845196612d0888611b2a565b805480600f0b895260801d600f0b6020890152015493860193828116855260601c606087015233905280825116925116809210612d4d575b5050612d8f565b33612e60565b523880612d40565b875162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481d5b99195b1959d85d1959606a1b6044820152606490fd5b91906000612d9c82612f26565b92604060076020860192612db4818551600f0b611de2565b600f0b845260008051602061354c83398151915260018060a01b038916938492815190600f0b8152426020820152a382526729a2241af62c000b60205260408220845181546001600160801b0319166001600160801b0382161782559151612e1f90600f0b82611d44565b6040850151606086810151901b6001600160601b0319166001600160601b03919091161760019190910155600f0b13612e5757505050565b61261292611e2c565b91906000612e6d82612f26565b926020840190612e81818351600f0b611e07565b600f0b825260016040860191818060601b039060068285511660008051602061352c833981519152858060a01b038c16938492612ec86040519283924291600f0b846128eb565b0390a385526729a2241af62c000b6020526040852092612f03885195848060801b031986541687868060801b031617865551600f0b85611d44565b5116818060601b0319606088015160601b1617910155600f0b13612e5757505050565b612f2e611c4f565b50805160408083015160608401516020909401519151936001600160a01b0316926001600160601b039091169190612f6585611b2a565b600f0b8452600f0b60208401526040830152606082015290565b62093a808091048181029181830414901517156106535790565b6001600160a01b031660009081526729a2241af62c00096020526040812054801561302e57611cec612fda916729a2241af62c000860205260408420611bdd565b908061300c83516130036020860151612ff7604088015142611d13565b600f0b90600f0b611d20565b90600f0b611de2565b600f0b80845212613026575b50516001600160801b031690565b815238613018565b5090565b1561303957565b60405162461bcd60e51b815260206004820152601660248201527527b7363c903830b9ba10313637b1b590373ab6b132b960511b6044820152606490fd5b9061308443821115613032565b60009160018060a01b0316908183526020926729a2241af62c000984526040928382205482905b60808210613219575b5050811561320f576130db91611cec916000526729a2241af62c0008865284600020611bdd565b92600754916130ea838261328a565b93670de0b6b3a7640000808610156105355761310b60038702600801611c74565b948610156131dd57600186018096116106535785101561053557612ff76131879461300393613141600360009902600801611c74565b90613166856131596060850151606087015190611d13565b9301518685015190611d13565b905b8584015193836131a8575b505050508751948801519288015190611d13565b600f81900b9283905291126131a2576001600160801b031690565b50600090565b6131ce926131c36131d496959360606131c994015190611d13565b90611daf565b611dc2565b90611d37565b38808080613173565b5060009450612ff784613003936131fb606061318798015143611d13565b906132098584015142611d13565b90613168565b5050505050600090565b9092818110156132845761322d8282611d37565b9060019182810180911161065357821c90846000526729a2241af62c0008895286600261325d848b600020611bdd565b5001541161326f5750935b01906130ab565b94925060001981019081116106535791613268565b926130b4565b6000919082915b608083106132a0575b50505090565b90919281811015613304576132b58282611d37565b9060019182810180911161065357821c90670de0b6b3a76400008210156105355760038202600a015485106132ef5750935b019190613291565b949250600019810190811161065357916132e7565b9261329a565b90604080830161331a8151612f7f565b926000935b60ff8510613350575b505050505060008151600f0b12613347575b516001600160801b031690565b6000815261333a565b62093a8081018091116106535760009080838111156133ce57505081945b8651602088019061339e825191613396600f9361338c8a518d611d13565b850b90850b611d20565b90830b611de2565b810b89528488146133c6576133b86001948351830b611e07565b900b9052858452019361331f565b505050613328565b918591969281526729a2241af62c000a6020522054600f0b9061336e565b6133f843821115613032565b60075490613406828261328a565b670de0b6b3a764000092838210156105355761342760038302600801611c74565b926060840194855182811161351f576000938510156134d0575060018401809411610653578310156105355761348f9461346960036134899502600801611c74565b8151606082019384518203613492575b50505050505b6040830151611d37565b9061330a565b90565b6134c69550916131c360406134ae6134bc946106d39796611d13565b92015160408a015190611d13565b9251905190611d13565b3880808080613479565b9050613489935061348f95914382036134ec575b50505061347f565b61351793506135016106d39261350f92611d13565b6131c3604088015142611d13565b915143611d13565b3880806134e4565b5050505050505060009056febe9cf0e939c614fad640a623a53ba0a807c8cb503c4c4c8dacabe27b86ff2dd5c6c74a68f89b63353b582f75a2009daefef14ef389fbf7e30edb6141f414f028a26469706673582212203d225699abbce55bdab3cb43f36e326166402fc44afb5bf505c4de5c8df11a8c64736f6c63430008110033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b60003560e01c908163012caae114611b0657508063047fc9aa14611ae8578063059f8b1614611ac557806306fdde0314611a1c57806315456eba1461161a57806318160ddd146115db578063237922791461158f578063313ce5671461156a57806334d901a4146114f7578063391cc9f6146113b857806339f22f6b1461133c5780633ccfd60b146111725780634684532e146111065780634ee2cd7e146110df5780635200e79e146110c15780635719098b146110a35780635c19a95c1461101557806370a0823114610ff257806375c54eda14610df05780637c616fe614610c2257806381fc83bb14610be15780638ad4c44714610b945780638da5cb5b14610b6b57806392e9352614610b3257806395d89b4114610a40578063981b24d014610a1a578063a69df4b5146109c8578063b52c05fe14610706578063c2c4c5c114610450578063c4698ee514610414578063cbf9fe5f146103a9578063d64e539614610380578063e489071114610314578063ee00ef3a146102f5578063f2fde38b14610288578063f4359ce51461026a578063f52a36f714610234578063f6ab9d81146102165763fc0c546a146101cc57600080fd5b34610211576000366003190112610211576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b600080fd5b34610211576000366003190112610211576020600454604051908152f35b34610211576020366003190112610211576004356000526729a2241af62c000a6020526020604060002054600f0b604051908152f35b3461021157600036600319011261021157602060405162093a808152f35b34610211576020366003190112610211576102a1611bc7565b600154906001600160a01b03906102bb3383851614611c16565b166001600160a01b03199190911681176001557fcfaaa26691e16e66e73290fc725eee1a6b4e0e693a1640484937aac25ffb55a4600080a2005b346102115760003660031901126102115760206040516303c267008152f35b346102115760203660031901126102115761032d611bc7565b6001546001600160a01b0391906103479083163314611c16565b168060018060a01b031960025416176002557ff5fad27d0b1a5f45f08a652a1e4502d75974a852e28d3502d4a978b7cfd900ba600080a2005b34610211576000366003190112610211576005546040516001600160a01b039091168152602090f35b34610211576020366003190112610211576001600160a01b036103ca611bc7565b166000526729a2241af62c000b60205260806040600020600181549101546040519180600f0b8352831d600f0b602083015260018060601b038116604083015260601c6060820152f35b34610211576020366003190112610211576060610437610432611bc7565b611cab565b9060405192600f0b8352600f0b60208301526040820152f35b3461021157600036600319011261021157610469611c4f565b50610472611c4f565b5061047b611c4f565b5060075460405161048b81611b2a565b6000815260209060008282015242604082015243606082015290826106df575b604082019081519060608401918251906040516104c781611b2a565b600081526000848201526060604082019183835201928352600090865142116106a2575b6104f9839796959493612f7f565b936000975b60ff891061054b575b50505050505050505081600755670de0b6b3a76400008210156105355760036105339202600801611d67565b005b634e487b7160e01b600052603260045260246000fd5b62093a80869798999b95960180971161065357600096804281111561067b57505060008a816105b1429a8b935b6105a461059b61058d8a8401998a5198611d13565b96600f97880b90880b611d20565b8251870b611de2565b850b90528551840b611e07565b820b918285528d51900b12610673575b12610669575b50859386895285519a6105f9670de0b6b3a76400009c8d6105f26105ec88518d611d13565b89611daf565b0490611d37565b895260019182810180911161065357809c428a1460001461063157505050505050505050509050439052828080808080808080610507565b811015610535578b60036106489202600801611d67565b0197969594936104fe565b634e487b7160e01b600052601160045260246000fd5b600090528a6105c7565b818c526105c1565b9097506000526729a2241af62c000a8252600087816105b18d6040832054600f0b90610578565b90506106af855143611d13565b670de0b6b3a76400009080820291820403610653576106d9906106d3885142611d13565b90611dc2565b906104eb565b9050670de0b6b3a76400008210156105355761070060038302600801611c74565b906104ab565b3461021157604036600319011261021157600435610722612564565b60055460405163fbac395160e01b8152336004820152602092918390829060249082906001600160a01b03165afa80156109bc576107699160009161098f575b5015612449565b610774602435612f7f565b90336000526729a2241af62c000b928381526040600020916040519261079984611b2a565b8054936001600f9286840b83528583019660801d840b8752015493604082019560018060601b03988987168852606084019660601c87526107db861515612488565b8351850b61095c576107f28a8951168a10156124cb565b42891115610920576303c26700420196874211610653578a60008051602061352c833981519152996108a06108da9860019560009f8f610870916109169f918f9261083f90821115612510565b61084b83600654611d37565b6006558d6108608151880b94880b8095611e07565b870b90521686528951840b611e07565b820b885233808752600052885260408f2089518154608089901b8990039182169119161781559651900b86611d44565b511690828060601b0319905160601b161791015587604051916108c283611b2a565b81835282015287604082015287606082015233611e2c565b6109068130337f00000000000000000000000000000000000000000000000000000000000000006125ba565b604051918291339542918461254e565b0390a36001600055005b60405162461bcd60e51b815260048101849052601460248201527313db9b1e48199d5d1d5c99481b1bd8dac8195b9960621b6044820152606490fd5b60405162461bcd60e51b815260048101849052600b60248201526a4c6f636b2065786973747360a81b6044820152606490fd5b6109af9150843d86116109b5575b6109a78183611b5b565b810190612431565b84610762565b503d61099d565b6040513d6000823e3d90fd5b34610211576000366003190112610211576109ee60018060a01b03600154163314611c16565b60006003557f70e3fffea7bbb557facdee48ed7f7af5179030adef9ad0c876df039a718f359e600080a1005b34610211576020366003190112610211576020610a386004356133ec565b604051908152f35b34610211576000366003190112610211576040516000906729a2241af62c000d805490600182811c91818416938415610b28575b6020948585108114610b1257848752908115610af05750600114610ab3575b610aaf85610aa381890382611b5b565b60405191829182611b7e565b0390f35b6000908152838120939550925b828410610add5750505081610aaf93610aa3928201019385610a93565b8054858501870152928501928101610ac0565b60ff191686860152505050151560051b8201019150610aa381610aaf85610a93565b634e487b7160e01b600052602260045260246000fd5b92607f1692610a74565b346102115760203660031901126102115760206303c26700610b62610b5942600435611d13565b60035490611daf565b04604051908152f35b34610211576000366003190112610211576001546040516001600160a01b039091168152602090f35b3461021157602036600319011261021157600435670de0b6b3a7640000811015610211576003028060080154610aaf600a60098401549301546040519383859460801d90600f0b85611bf4565b34610211576020366003190112610211576001600160a01b03610c02611bc7565b166000526729a2241af62c00096020526020604060002054604051908152f35b346102115760208060031936011261021157610c3c612564565b60055460405163fbac395160e01b8152336004820152908290829060249082906001600160a01b03165afa80156109bc57610c7f91600091610dd3575015612449565b336000526729a2241af62c000b90818152604060002060405192610ca284611b2a565b600182549283600f0b86528486019360801d600f0b84520154936040810160018060601b03908187168152606083019660601c8752610ce2600435612f7f565b94610cf360008551600f0b136127f1565b610d01838351164210612827565b610d0f8383511687116124cb565b6303c26700420180421161065357600398600094610d316001938a1115612510565b8085511697818a1686523387528a5260408620938751848060801b031986541690858060801b031617855551600f0b94610d6b8686611d44565b511690828060601b0319905160601b161791015513610db3575b5050604051916000835282015242604082015260008051602061352c83398151915260603392a36001600055005b610dcc91610dc082612f26565b90604082015233611e2c565b8380610d85565b610dea9150833d85116109b5576109a78183611b5b565b83610762565b3461021157600036600319011261021157610e09612564565b336000526729a2241af62c000b806020526040600020604051610e2b81611b2a565b815490600f9282840b9283835260801d840b602083015260010154926040820193600160601b60019003938482168652606084019160601c8252600012610e71906127f1565b838551164210610e8090612827565b51610e95906001600160a01b0316331461290c565b81516006546001600160801b039182169691929190610eb5908890611d13565b600655610ec184612f26565b926000845260208401928351810b8651820b610edc91611de2565b810b8452606085019260008452336000526020526040600020918551600160801b600190031984541691161782558351900b610f189082611d44565b604084018051925160601b6001600160601b03191692871692909217600191909101556000908190529052610f4d9133611e2c565b4291511690610f5b91611d13565b600354610f6791611daf565b6303c267009004610f789082611daf565b670de0b6b3a764000090048060045490610f9191611d37565b600455610f9e9082611d13565b610fc990337f0000000000000000000000000000000000000000000000000000000000000000612949565b6040519081524260208201523360008051602061354c8339815191526040600593a36001600055005b34610211576020366003190112610211576020610a38611010611bc7565b612f99565b34610211576020366003190112610211576024611030611bc7565b611038612564565b60055460405163fbac395160e01b81523360048201529260209184919082906001600160a01b03165afa9182156109bc576110849261107f9160009161108b575015612449565b612987565b6001600055005b6109af915060203d81116109b5576109a78183611b5b565b34610211576000366003190112610211576020600754604051908152f35b34610211576000366003190112610211576020600354604051908152f35b34610211576040366003190112610211576020610a386110fd611bc7565b60243590613077565b346102115760203660031901126102115761111f611bc7565b6001546001600160a01b0391906111399083163314611c16565b168060018060a01b031960055416176005557fb089f68ad820a83477076ed7bca5d94c6a56c0c85e82b7ed8df87507a1d6198b600080a2005b346102115760003660031901126102115761118b612564565b336000526729a2241af62c000b602090808252600060408120604051906111b182611b2a565b80546001600f9282840b9283865260801d840b88860152015490604084016111f160018060601b039687938486168452606088019560601c8652136127f1565b511642106113045751600495936112b393909290916000919061121e906001600160a01b0316331461290c565b60018060801b03600181855116986112388a600654611d13565b60065561124486612f26565b96858852604088018681526112988b8a01966112678851820b8b51830b90611de2565b810b885260608b0194898652338a528d5260408920968b51878060801b031989541691161787558751900b86611d44565b511690828060601b0319905160601b16179101555233611e2c565b6112de82337f0000000000000000000000000000000000000000000000000000000000000000612949565b604051918252429082015260008051602061354c83398151915260403392a36001600055005b60405162461bcd60e51b815260048101879052601060248201526f131bd8dac81b9bdd08195e1c1a5c995960821b6044820152606490fd5b346102115760003660031901126102115760045460006004557fabef55bd3931568707a1758ae67679779c66d9deaa23e8bbad8974e421035d60602060018060a01b0360025416926113af81857f0000000000000000000000000000000000000000000000000000000000000000612949565b604051908152a2005b3461021157602080600319360112610211576113d2611bc7565b6005549091906001600160a01b0390811633036114c157821690816000526729a2241af62c000b928382526040600020926040519261141084611b2a565b600185549586600f0b9687875260801d600f0b83870152015490604085019160018060601b0390818116845260601c90606087019382855285831415806114b7575b61145857005b610533996114b2968a9661146a611c4f565b5052836000528452600160406000206040519561148687611b2a565b815480600f0b885260801d600f0b9087015201549182169182604086015260601c606085015252612d8f565b612e60565b5060008913611452565b60405162461bcd60e51b815260048101839052600e60248201526d13db9b1e48109b1bd8dadb1a5cdd60921b6044820152606490fd5b3461021157604036600319011261021157611510611bc7565b6001600160a01b031660009081526729a2241af62c000860205260409020602435633b9aca008110156102115761154691611bdd565b508054610aaf600260018401549301546040519383859460801d90600f0b85611bf4565b346102115760003660031901126102115760206729a2241af62c000e54604051908152f35b34610211576020366003190112610211576001600160a01b036115b0611bc7565b166000526729a2241af62c000b602052602060018060601b0360016040600020015416604051908152f35b3461021157600036600319011261021157600754670de0b6b3a764000081101561053557610a38611613600360209302600801611c74565b429061330a565b3461021157602036600319011261021157611633612564565b60055460405163fbac395160e01b81523360048201526001600160a01b03916020908290602490829086165afa80156109bc5761167891600091611a03575015612449565b336000526729a2241af62c000b602052604060002060405161169981611b2a565b600182549283600f0b8352602083019360801d600f0b8452015460018060601b038116604083015260601c606082015280926116d86004351515612488565b6116e860008351600f0b136127f1565b6040820151611701906001600160601b03164210612827565b61170f600435600654611d37565b600655606082015160408301516001600160601b03169391169160019190611735611c4f565b50338403611863575050506117f39060029361175081612f26565b918251600f0b611766600435600f0b8092611e07565b600f0b845261177d60208501918251600f0b611e07565b600f90810b82523360009081526729a2241af62c000b60205260409020855181546001600160801b0319166001600160801b0390911617815591516117c3910b82611d44565b6040840151606085810151901b6001600160601b0319166001600160601b03919091161760019190910155611e2c565b61182160043530337f00000000000000000000000000000000000000000000000000000000000000006125ba565b600882101561184d5760008051602061352c83398151915260405180610916339442906004358461254e565b634e487b7160e01b600052602160045260246000fd5b6117f3939295508061188160019251600f0b600435600f0b90611e07565b600f0b8152336000526729a2241af62c000b6020526118c06040600020938251848060801b031986541690858060801b031617855551600f0b84611d44565b818060601b036040820151169060608380821b031991015160601b16179101558060005260406000206119536040516118f881611b2a565b600183549384600f0b83528460801d600f0b6020840152015460018060601b038116604083015260601c606082015261193760008294600f0b13612862565b61194e4260018060601b03604084015116116128a6565b612f26565b9160068160008051602061352c8339815191526119fb60208701611980600435600f0b8251600f0b611e07565b600f90810b825260008581526729a2241af62c000b60205260409020895181546001600160801b0319166001600160801b0390911617815591516119c5910b82611d44565b60018060601b03604089015116906001808060601b031960608b015160601b1683179101556040519182914290600435846128eb565b0390a3611e2c565b610dea915060203d6020116109b5576109a78183611b5b565b34610211576000366003190112610211576040516000906729a2241af62c000c805490600182811c91818416938415611abb575b6020948585108114610b1257848752908115610af05750600114611a7e57610aaf85610aa381890382611b5b565b6000908152838120939550925b828410611aa85750505081610aaf93610aa3928201019385610a93565b8054858501870152928501928101611a8b565b92607f1692611a50565b34610211576000366003190112610211576020604051670de0b6b3a76400008152f35b34610211576000366003190112610211576020600654604051908152f35b34610211576000366003190112610211576002546001600160a01b03168152602090f35b608081019081106001600160401b03821117611b4557604052565b634e487b7160e01b600052604160045260246000fd5b601f909101601f19168101906001600160401b03821190821017611b4557604052565b6020808252825181830181905290939260005b828110611bb357505060409293506000838284010152601f8019910116010190565b818101860151848201604001528501611b91565b600435906001600160a01b038216820361021157565b90633b9aca00811015610535576003020190600090565b909493926060926080830196600f0b8352600f0b602083015260408201520152565b15611c1d57565b60405162461bcd60e51b815260206004820152600a60248201526927b7363c9037bbb732b960b11b6044820152606490fd5b60405190611c5c82611b2a565b60006060838281528260208201528260408201520152565b90604051611c8181611b2a565b606060028294805480600f0b855260801d600f0b6020850152600181015460408501520154910152565b6001600160a01b031660009081526729a2241af62c000960205260408120548015611d0c57611cec906040611cf2936729a2241af62c000860205220611bdd565b50611c74565b908151600f0b9060406020840151600f0b93015191929190565b5080918190565b9190820391821161065357565b90600f0b90600f0b029081600f0b91820361065357565b9190820180921161065357565b80546001600160801b031660809290921b6001600160801b031916919091179055565b815181546001600160801b0319166001600160801b039091161781556020820151909160029160609190611d9e90600f0b85611d44565b604081015160018501550151910155565b8181029291811591840414171561065357565b8115611dcc570490565b634e487b7160e01b600052601260045260246000fd5b600f91820b910b039060016001607f1b0319821260016001607f1b0383131761065357565b600f91820b910b019060016001607f1b0319821260016001607f1b0383131761065357565b9190611e36611c4f565b92611e3f611c4f565b9160009384926007549060018060a01b03169081612251575b604051611e6481611b2a565b60008152600060208201524260408201524360608201528161222c575b6040810151606082015160405190611e9882611b2a565b600082526000602083015260408201908382526060830152600092604085015142116121da575b929190611ecb84612f7f565b926000945b60ff8610612090575b5050505050508160075582612013575b670de0b6b3a7640000821015610535576003611f089202600801611d67565b611f15575b505050505050565b60408092019560018060601b0395428789511611611f9e575b50500193838551169042821115611f0d5751841610611f4f575b8080611f0d565b6020611f60920151600f0b90611de2565b91511660009081526729a2241af62c000a6020526040902080546001600160801b0319166001600160801b0390921691909117905538808080611f48565b6020611faf920151600f0b90611e07565b8583830151168688511614611ffc575b8651861660009081526729a2241af62c000a60205283902080546001600160801b0319166001600160801b03929092169190911790553880611f2e565b61200e906020860151600f0b90611de2565b611fbf565b600087602083016120428c602061203781855196015195600f96870b90870b611e07565b910151840b90611de2565b820b8152826120678d61205d8d8851870b9051870b90611e07565b9051850b90611de2565b830b928386528251900b12612087575b501215611ee95760008152611ee9565b82905238612077565b62093a808596989394950180961161065357869560009080428111156121aa57505060209660006120f881936120eb6120e26120d4429d8e975b0198895197611d13565b95600f96870b90870b611d20565b8d51860b611de2565b840b8c528551840b611e07565b820b918285528a51900b126121a2575b12612198575b50849185604088015260608501519761213f670de0b6b3a7640000998a6105f261213989518c611d13565b87611daf565b606089015260019182810180911161065357809942891460001461217757505050505050505050436060820152388080808080611ed9565b8110156105355788600361218e9202600801611d67565b0194939291611ed0565b600090523861210e565b818952612108565b6120f882996120eb6120e26120d4602060408960009a988b99526729a2241af62c000a83522054600f0b946120ca565b926121e9606086015143611d13565b90670de0b6b3a764000091808302928304036122185750612212906106d3604087015142611d13565b92611ebf565b634e487b7160e01b81526011600452602490fd5b50670de0b6b3a76400008110156105355761224c60038202600801611c74565b611e81565b604084810180516001600160601b03908116421080612421575b6123ef575b8286019942828c511611806123df575b6123a4575b8581526729a2241af62c000980602052848220549060018201809211612390578783526020528085832055848b01904282526122d960608d01914383528985526729a2241af62c0008602052878520611bdd565b92909261237c578c5183546001600160801b0319166001600160801b0390911617835560208d0151859488949093909260029261231990600f0b85611d44565b516001840155519101558285511681526729a2241af62c000a6020522054600f0b9a5116918261234d575b50505050611e58565b9091929397505116811460001461236c57505085935b38808080612344565b60005260002054600f0b93612363565b634e487b7160e01b84526004849052602484fd5b634e487b7160e01b83526011600452602483fd5b6123d56303c267006020890151600f0b05600f0b8060208d01526123cc8d8542915116611d13565b600f0b90611d20565b600f0b8a52612285565b50806020880151600f0b13612280565b61241760208c6303c26700828b0151600f0b05600f0b91829101526123cc4284865116611d13565b600f0b8b52612270565b50896020880151600f0b1361226b565b90816020910312610211575180151581036102115790565b1561245057565b60405162461bcd60e51b815260206004820152601060248201526f109b1bd8dad9590818dbdb9d1c9858dd60821b6044820152606490fd5b1561248f57565b60405162461bcd60e51b815260206004820152601460248201527313db9b1e481b9bdb881e995c9bc8185b5bdd5b9d60621b6044820152606490fd5b156124d257565b60405162461bcd60e51b815260206004820152601660248201527513db9b1e481a5b98dc99585cd9481b1bd8dac8195b9960521b6044820152606490fd5b1561251757565b60405162461bcd60e51b815260206004820152600f60248201526e45786365656473206d617874696d6560881b6044820152606490fd5b6040919493926060820195825260208201520152565b600260005414612575576002600055565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b6040516323b872dd60e01b60208201526001600160a01b03928316602482015292909116604483015260648083019390935291815260a08101918183106001600160401b03841117611b455761261292604052612614565b565b604080516001600160401b0394936001600160a01b03909316929091820185811183821017611b45576040526020928383527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564848401526000808386829551910182855af1903d1561274f573d96871161273b576126b3949596604051906126a588601f19601f8401160183611b5b565b81528093873d92013e61275c565b805190828215928315612723575b505050156126cc5750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b6127339350820181019101612431565b3882816126c1565b634e487b7160e01b83526041600452602483fd5b91506126b3939495506060915b919290156127be5750815115612770575090565b3b156127795790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156127d15750805190602001fd5b60405162461bcd60e51b81529081906127ed9060048301611b7e565b0390fd5b156127f857565b60405162461bcd60e51b81526020600482015260076024820152664e6f206c6f636b60c81b6044820152606490fd5b1561282e57565b60405162461bcd60e51b815260206004820152600c60248201526b131bd8dac8195e1c1a5c995960a21b6044820152606490fd5b1561286957565b60405162461bcd60e51b815260206004820152601560248201527444656c65676174656520686173206e6f206c6f636b60581b6044820152606490fd5b156128ad57565b60405162461bcd60e51b815260206004820152601660248201527511195b1959d85d1959481b1bd8dac8195e1c1a5c995960521b6044820152606490fd5b9081526001600160601b039091166020820152604081019190915260600190565b1561291357565b60405162461bcd60e51b815260206004820152600e60248201526d131bd8dac819195b1959d85d195960921b6044820152606490fd5b60405163a9059cbb60e01b60208201526001600160a01b0390921660248301526044808301939093529181526126129161298282611b2a565b612614565b6001600160a01b03818116338114612c6257336000526729a2241af62c000b602052604060002092604051936129bc85611b2a565b6001815491600f9280840b885260801d830b6020880152015460018060601b038116604087015260601c606086015284906024602086600554166040519283809263fbac395160e01b82528960048301525afa80156109bc57612a2791600091612c43575015612449565b612a3660008751830b136127f1565b6040860151612a4f906001600160601b03164210612827565b838560608801511614612c0a578551810b9460608701511695846000526729a2241af62c000b602052604060002094600160405196612a8d88611b2a565b805480860b895260801d850b602089015201546001600160601b0381166040880152606090811c81880152820152338703612b59575b506000612ad4918551900b13612862565b612aeb4260018060601b03604086015116116128a6565b604083810151908201516001600160601b03918216911611612b1557836114b29161261296612d8f565b60405162461bcd60e51b815260206004820152601c60248201527b4f6e6c792064656c656761746520746f206c6f6e676572206c6f636b60201b6044820152606490fd5b909150336000526729a2241af62c000b60205260016040600020918051828060801b031984541690838060801b0316178355612b9b6020820151850b84611d44565b818060601b036040820151169060608380821b031991015160601b161791015584600052612ad4600060408120600160405191612bd783611b2a565b805480870b845260801d860b602084015201546001600160601b0381166040830152606090811c90820152929150612ac3565b60405162461bcd60e51b8152602060048201526011602482015270105b1c9958591e4819195b1959d85d1959607a1b6044820152606490fd5b612c5c915060203d6020116109b5576109a78183611b5b565b38610762565b50919050336000526729a2241af62c000b91826020526040928360002091845191612c8c83611b2a565b600184549485600f0b9586865260801d600f0b6020860152015490868401612ccc600060018060601b03978886168452606088019560601c8652136127f1565b338484511614612d5557906126129697612d479493928651600f0b978895855116938460005260205282600020946001845196612d0888611b2a565b805480600f0b895260801d600f0b6020890152015493860193828116855260601c606087015233905280825116925116809210612d4d575b5050612d8f565b33612e60565b523880612d40565b875162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481d5b99195b1959d85d1959606a1b6044820152606490fd5b91906000612d9c82612f26565b92604060076020860192612db4818551600f0b611de2565b600f0b845260008051602061354c83398151915260018060a01b038916938492815190600f0b8152426020820152a382526729a2241af62c000b60205260408220845181546001600160801b0319166001600160801b0382161782559151612e1f90600f0b82611d44565b6040850151606086810151901b6001600160601b0319166001600160601b03919091161760019190910155600f0b13612e5757505050565b61261292611e2c565b91906000612e6d82612f26565b926020840190612e81818351600f0b611e07565b600f0b825260016040860191818060601b039060068285511660008051602061352c833981519152858060a01b038c16938492612ec86040519283924291600f0b846128eb565b0390a385526729a2241af62c000b6020526040852092612f03885195848060801b031986541687868060801b031617865551600f0b85611d44565b5116818060601b0319606088015160601b1617910155600f0b13612e5757505050565b612f2e611c4f565b50805160408083015160608401516020909401519151936001600160a01b0316926001600160601b039091169190612f6585611b2a565b600f0b8452600f0b60208401526040830152606082015290565b62093a808091048181029181830414901517156106535790565b6001600160a01b031660009081526729a2241af62c00096020526040812054801561302e57611cec612fda916729a2241af62c000860205260408420611bdd565b908061300c83516130036020860151612ff7604088015142611d13565b600f0b90600f0b611d20565b90600f0b611de2565b600f0b80845212613026575b50516001600160801b031690565b815238613018565b5090565b1561303957565b60405162461bcd60e51b815260206004820152601660248201527527b7363c903830b9ba10313637b1b590373ab6b132b960511b6044820152606490fd5b9061308443821115613032565b60009160018060a01b0316908183526020926729a2241af62c000984526040928382205482905b60808210613219575b5050811561320f576130db91611cec916000526729a2241af62c0008865284600020611bdd565b92600754916130ea838261328a565b93670de0b6b3a7640000808610156105355761310b60038702600801611c74565b948610156131dd57600186018096116106535785101561053557612ff76131879461300393613141600360009902600801611c74565b90613166856131596060850151606087015190611d13565b9301518685015190611d13565b905b8584015193836131a8575b505050508751948801519288015190611d13565b600f81900b9283905291126131a2576001600160801b031690565b50600090565b6131ce926131c36131d496959360606131c994015190611d13565b90611daf565b611dc2565b90611d37565b38808080613173565b5060009450612ff784613003936131fb606061318798015143611d13565b906132098584015142611d13565b90613168565b5050505050600090565b9092818110156132845761322d8282611d37565b9060019182810180911161065357821c90846000526729a2241af62c0008895286600261325d848b600020611bdd565b5001541161326f5750935b01906130ab565b94925060001981019081116106535791613268565b926130b4565b6000919082915b608083106132a0575b50505090565b90919281811015613304576132b58282611d37565b9060019182810180911161065357821c90670de0b6b3a76400008210156105355760038202600a015485106132ef5750935b019190613291565b949250600019810190811161065357916132e7565b9261329a565b90604080830161331a8151612f7f565b926000935b60ff8510613350575b505050505060008151600f0b12613347575b516001600160801b031690565b6000815261333a565b62093a8081018091116106535760009080838111156133ce57505081945b8651602088019061339e825191613396600f9361338c8a518d611d13565b850b90850b611d20565b90830b611de2565b810b89528488146133c6576133b86001948351830b611e07565b900b9052858452019361331f565b505050613328565b918591969281526729a2241af62c000a6020522054600f0b9061336e565b6133f843821115613032565b60075490613406828261328a565b670de0b6b3a764000092838210156105355761342760038302600801611c74565b926060840194855182811161351f576000938510156134d0575060018401809411610653578310156105355761348f9461346960036134899502600801611c74565b8151606082019384518203613492575b50505050505b6040830151611d37565b9061330a565b90565b6134c69550916131c360406134ae6134bc946106d39796611d13565b92015160408a015190611d13565b9251905190611d13565b3880808080613479565b9050613489935061348f95914382036134ec575b50505061347f565b61351793506135016106d39261350f92611d13565b6131c3604088015142611d13565b915143611d13565b3880806134e4565b5050505050505060009056febe9cf0e939c614fad640a623a53ba0a807c8cb503c4c4c8dacabe27b86ff2dd5c6c74a68f89b63353b582f75a2009daefef14ef389fbf7e30edb6141f414f028a26469706673582212203d225699abbce55bdab3cb43f36e326166402fc44afb5bf505c4de5c8df11a8c64736f6c63430008110033",
  "devdoc": {
    "details": "Builds on Curve Finance's original VotingEscrow implementation (see https://github.com/curvefi/curve-dao-contracts/blob/master/contracts/VotingEscrow.vy) and mStable's Solidity translation thereof (see https://github.com/mstable/mStable-contracts/blob/master/contracts/governance/IncentivisedVotingLockup.sol) Usage of this contract is not safe with all tokens, specifically: - Contract does not support tokens with maxSupply>2^128-10^[decimals] - Contract does not support fee-on-transfer tokens - Contract may be unsafe for tokens with decimals<6",
    "kind": "dev",
    "methods": {
      "balanceOf(address)": {
        "params": {
          "_owner": "The address of the lock owner for which to return voting power"
        },
        "returns": {
          "_0": "Voting power of the lock"
        }
      },
      "balanceOfAt(address,uint256)": {
        "params": {
          "_blockNumber": "The block at which to calculate the lock's voting power",
          "_owner": "The address of the lock owner for which to return voting power"
        },
        "returns": {
          "_0": "uint256 Voting power of the lock"
        }
      },
      "constructor": {
        "params": {
          "_name": "The name of the voting token",
          "_owner": "Is assumed to be a timelock contract",
          "_penaltyRecipient": "The recipient of penalty paid by lock quitters",
          "_symbol": "The symbol of the voting token",
          "_token": "The token locked in order to obtain voting power"
        }
      },
      "createLock(uint256,uint256)": {
        "details": "`_value` is (unsafely) downcasted from `uint256` to `int128` and `_unlockTime` is (unsafely) downcasted from `uint256` to `uint96` assuming that the values never reach the respective max values",
        "params": {
          "_unlockTime": "Expiration time of the lock",
          "_value": "Amount of token to lock"
        }
      },
      "delegate(address)": {
        "params": {
          "_addr": "The address of the lock owner to which to delegate"
        }
      },
      "forceUndelegate(address)": {
        "details": "Only callable by the blocklist contract",
        "params": {
          "_addr": "user to which voting power is delegated"
        }
      },
      "getLastUserPoint(address)": {
        "params": {
          "_addr": "The address of the lock owner"
        },
        "returns": {
          "bias": "The last recorded virtual balance",
          "slope": "The last recorded linear decay",
          "ts": "The last recorded timestamp"
        }
      },
      "getPenaltyRate(uint256)": {
        "details": "The penalty rate decreases linearly at the same rate as a lock's voting power in order to compensate for votes unlocked without committing to the lock expiration",
        "params": {
          "end": "The lock's expiration"
        },
        "returns": {
          "_0": "The penalty rate applicable to the lock"
        }
      },
      "increaseAmount(uint256)": {
        "details": "Does not update the lock's expiration Does record a new checkpoint for the lock `_value` is (unsafely) downcasted from `uint256` to `int128` assuming that the max value is never reached in practice",
        "params": {
          "_value": "Amount of tokens to add to the lock"
        }
      },
      "increaseUnlockTime(uint256)": {
        "details": "Does not update the amount of tokens locked Does record a new checkpoint for the lock `_unlockTime` is (unsafely) downcasted from `uint256` to `uint96` assuming that the max value is never reached in practice",
        "params": {
          "_unlockTime": "New lock expiration time"
        }
      },
      "lockEnd(address)": {
        "params": {
          "_addr": "The address of the lock owner"
        },
        "returns": {
          "_0": "Expiration of the lock"
        }
      },
      "quitLock()": {
        "details": "Quitters lock expiration remains in place because it might be delegated to"
      },
      "totalSupply()": {
        "returns": {
          "_0": "Current totalSupply"
        }
      },
      "totalSupplyAt(uint256)": {
        "params": {
          "_blockNumber": "The block number at which to calculate total supply"
        },
        "returns": {
          "_0": "totalSupply of voting power at the given block number"
        }
      },
      "transferOwnership(address)": {
        "details": "Owner is assumed to be a timelock contract",
        "params": {
          "_addr": "The new owner"
        }
      },
      "unlock()": {
        "details": "This is an irreversible action and is assumed to be used in a migration to a new VotingEscrow contract only"
      }
    },
    "title": "Delegated Voting Escrow",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "balanceOf(address)": {
        "notice": "Get a lock's current voting power"
      },
      "balanceOfAt(address,uint256)": {
        "notice": "Get a lock's voting power at a given block number"
      },
      "checkpoint()": {
        "notice": "Records a new global checkpoint"
      },
      "collectPenalty()": {
        "notice": "Collect accumulated penalty from lock quitters Everyone can collect but penalty is sent to `penaltyRecipient`"
      },
      "constructor": {
        "notice": "Initializes state"
      },
      "createLock(uint256,uint256)": {
        "notice": "Creates a new lock"
      },
      "delegate(address)": {
        "notice": "Delegate lock and voting power to another lock The receiving lock needs to have a longer lock duration The delegated lock will inherit the receiving lock's expiration"
      },
      "forceUndelegate(address)": {
        "notice": "Remove delegation for blocked contract"
      },
      "getLastUserPoint(address)": {
        "notice": "Returns a lock's last available user point"
      },
      "getPenaltyRate(uint256)": {
        "notice": "Returns the penalty rate for a given lock expiration"
      },
      "increaseAmount(uint256)": {
        "notice": "Locks more tokens in an existing lock"
      },
      "increaseUnlockTime(uint256)": {
        "notice": "Extends the expiration of an existing lock"
      },
      "lockEnd(address)": {
        "notice": "Returns a lock's expiration"
      },
      "quitLock()": {
        "notice": "Quit an existing lock by withdrawing all tokens less a penalty Use `withdraw` for expired locks"
      },
      "totalSupply()": {
        "notice": "Calculate current total supply of voting power"
      },
      "totalSupplyAt(uint256)": {
        "notice": "Calculate total supply of voting power at a given block number"
      },
      "transferOwnership(address)": {
        "notice": "Transfers ownership to a new owner"
      },
      "unlock()": {
        "notice": "Removes quitlock penalty by setting it to zero"
      },
      "updateBlocklist(address)": {
        "notice": "Updates the blocklist contract"
      },
      "updatePenaltyRecipient(address)": {
        "notice": "Updates the recipient of the accumulated penalty paid by quitters"
      },
      "withdraw()": {
        "notice": "Withdraws the tokens of an expired lock Delegated locks need to be undelegated first"
      }
    },
    "notice": "An ERC20 token that allocates users a virtual balance depending on the amount of tokens locked and their remaining lock duration. The virtual balance decreases linearly with the remaining lock duration. This is the locking mechanism known from veCRV with additional features: - Delegation of lock and voting power - Quit an existing lock and pay a penalty - Optimistic approval of SmartWallets through Blocklist - Reduced pointHistory array size and, as a result, lifetime of the contract - Removed public deposit_for and Aragon compatibility (no use case)",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/staking/contracts/VotingEscrow.sol:VotingEscrow",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 990,
        "contract": "contracts/staking/contracts/VotingEscrow.sol:VotingEscrow",
        "label": "owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 992,
        "contract": "contracts/staking/contracts/VotingEscrow.sol:VotingEscrow",
        "label": "penaltyRecipient",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 995,
        "contract": "contracts/staking/contracts/VotingEscrow.sol:VotingEscrow",
        "label": "maxPenalty",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 997,
        "contract": "contracts/staking/contracts/VotingEscrow.sol:VotingEscrow",
        "label": "penaltyAccumulated",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 999,
        "contract": "contracts/staking/contracts/VotingEscrow.sol:VotingEscrow",
        "label": "blocklist",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 1001,
        "contract": "contracts/staking/contracts/VotingEscrow.sol:VotingEscrow",
        "label": "supply",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1003,
        "contract": "contracts/staking/contracts/VotingEscrow.sol:VotingEscrow",
        "label": "globalEpoch",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1008,
        "contract": "contracts/staking/contracts/VotingEscrow.sol:VotingEscrow",
        "label": "pointHistory",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_struct(Point)1043_storage)1000000000000000000_storage"
      },
      {
        "astId": 1015,
        "contract": "contracts/staking/contracts/VotingEscrow.sol:VotingEscrow",
        "label": "userPointHistory",
        "offset": 0,
        "slot": "3000000000000000008",
        "type": "t_mapping(t_address,t_array(t_struct(Point)1043_storage)1000000000_storage)"
      },
      {
        "astId": 1019,
        "contract": "contracts/staking/contracts/VotingEscrow.sol:VotingEscrow",
        "label": "userPointEpoch",
        "offset": 0,
        "slot": "3000000000000000009",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1023,
        "contract": "contracts/staking/contracts/VotingEscrow.sol:VotingEscrow",
        "label": "slopeChanges",
        "offset": 0,
        "slot": "3000000000000000010",
        "type": "t_mapping(t_uint256,t_int128)"
      },
      {
        "astId": 1028,
        "contract": "contracts/staking/contracts/VotingEscrow.sol:VotingEscrow",
        "label": "locked",
        "offset": 0,
        "slot": "3000000000000000011",
        "type": "t_mapping(t_address,t_struct(LockedBalance)1052_storage)"
      },
      {
        "astId": 1030,
        "contract": "contracts/staking/contracts/VotingEscrow.sol:VotingEscrow",
        "label": "name",
        "offset": 0,
        "slot": "3000000000000000012",
        "type": "t_string_storage"
      },
      {
        "astId": 1032,
        "contract": "contracts/staking/contracts/VotingEscrow.sol:VotingEscrow",
        "label": "symbol",
        "offset": 0,
        "slot": "3000000000000000013",
        "type": "t_string_storage"
      },
      {
        "astId": 1034,
        "contract": "contracts/staking/contracts/VotingEscrow.sol:VotingEscrow",
        "label": "decimals",
        "offset": 0,
        "slot": "3000000000000000014",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Point)1043_storage)1000000000000000000_storage": {
        "base": "t_struct(Point)1043_storage",
        "encoding": "inplace",
        "label": "struct VotingEscrow.Point[1000000000000000000]",
        "numberOfBytes": "96000000000000000000"
      },
      "t_array(t_struct(Point)1043_storage)1000000000_storage": {
        "base": "t_struct(Point)1043_storage",
        "encoding": "inplace",
        "label": "struct VotingEscrow.Point[1000000000]",
        "numberOfBytes": "96000000000"
      },
      "t_int128": {
        "encoding": "inplace",
        "label": "int128",
        "numberOfBytes": "16"
      },
      "t_mapping(t_address,t_array(t_struct(Point)1043_storage)1000000000_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct VotingEscrow.Point[1000000000])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Point)1043_storage)1000000000_storage"
      },
      "t_mapping(t_address,t_struct(LockedBalance)1052_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct VotingEscrow.LockedBalance)",
        "numberOfBytes": "32",
        "value": "t_struct(LockedBalance)1052_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_int128)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => int128)",
        "numberOfBytes": "32",
        "value": "t_int128"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(LockedBalance)1052_storage": {
        "encoding": "inplace",
        "label": "struct VotingEscrow.LockedBalance",
        "members": [
          {
            "astId": 1045,
            "contract": "contracts/staking/contracts/VotingEscrow.sol:VotingEscrow",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_int128"
          },
          {
            "astId": 1047,
            "contract": "contracts/staking/contracts/VotingEscrow.sol:VotingEscrow",
            "label": "delegated",
            "offset": 16,
            "slot": "0",
            "type": "t_int128"
          },
          {
            "astId": 1049,
            "contract": "contracts/staking/contracts/VotingEscrow.sol:VotingEscrow",
            "label": "end",
            "offset": 0,
            "slot": "1",
            "type": "t_uint96"
          },
          {
            "astId": 1051,
            "contract": "contracts/staking/contracts/VotingEscrow.sol:VotingEscrow",
            "label": "delegatee",
            "offset": 12,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Point)1043_storage": {
        "encoding": "inplace",
        "label": "struct VotingEscrow.Point",
        "members": [
          {
            "astId": 1036,
            "contract": "contracts/staking/contracts/VotingEscrow.sol:VotingEscrow",
            "label": "bias",
            "offset": 0,
            "slot": "0",
            "type": "t_int128"
          },
          {
            "astId": 1038,
            "contract": "contracts/staking/contracts/VotingEscrow.sol:VotingEscrow",
            "label": "slope",
            "offset": 16,
            "slot": "0",
            "type": "t_int128"
          },
          {
            "astId": 1040,
            "contract": "contracts/staking/contracts/VotingEscrow.sol:VotingEscrow",
            "label": "ts",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1042,
            "contract": "contracts/staking/contracts/VotingEscrow.sol:VotingEscrow",
            "label": "blk",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}